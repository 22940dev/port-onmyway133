<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How to work with Hardened runtime and sandbox in macOS</title>
      <link href="/blog/How-to-work-with-Hardened-runtime-and-sandbox-in-macOS/"/>
      <url>/blog/How-to-work-with-Hardened-runtime-and-sandbox-in-macOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/413" target="_blank" rel="noopener">#413</a></strong></p><ul><li><a href="https://lapcatsoftware.com/articles/hardened-runtime-sandboxing.html" target="_blank" rel="noopener">Hardened Runtime and Sandboxing</a></li><li><a href="https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution/resolving_common_notarization_issues" target="_blank" rel="noopener">Resolving Common Notarization Issues</a></li><li><a href="https://developer.apple.com/library/archive/technotes/tn2206/_index.html" target="_blank" rel="noopener">macOS Code Signing In Depth</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to speed up GMSMarker in Google Maps for iOS</title>
      <link href="/blog/How-to-speed-up-GMSMarker-in-Google-Maps-for-iOS/"/>
      <url>/blog/How-to-speed-up-GMSMarker-in-Google-Maps-for-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/412" target="_blank" rel="noopener">#412</a></strong></p><ul><li>Google Maps with a lot of pin, and no clustering can have bad performance if there are complex view in the marker.</li><li>The workaround is to use manual layout and rasterization</li></ul><p><a href="https://developer.apple.com/documentation/quartzcore/calayer/1410905-shouldrasterize" target="_blank" rel="noopener">shouldRasterize</a></p><blockquote><p>When the value of this property is true, the layer is rendered as a bitmap in its local coordinate space and then composited to the destination with any other content. Shadow effects and any filters in the filters property are rasterized and included in the bitmap. However, the current opacity of the layer is not rasterized. If the rasterized bitmap requires scaling during compositing, the filters in the minificationFilter and magnificationFilter properties are applied as needed.</p></blockquote><p>In the <code>class PinView: UIView</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">isOpaque = <span class="literal">true</span></span><br><span class="line">layer.shouldRasterize = <span class="literal">true</span></span><br><span class="line">layer.rasterizationScale = <span class="type">UIScreen</span>.main.scale</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StopMarker</span>: <span class="title">GMSMarker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stop: <span class="type">Stop</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> pinView = <span class="type">PinView</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(stop: <span class="type">Stop</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.stop = stop</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.position = stop.toCoordinate()</span><br><span class="line">        <span class="keyword">self</span>.iconView = pinView</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="http://angelolloqui.com/blog/30-iOS-Performance-tips-I-Drawing-shadows" target="_blank" rel="noopener">iOS Performance tips I: Drawing shadows</a></li></ul><blockquote><p>When your app needs to draw something on the screen, the GPU takes your layer hierarchy (UIView is just a wrapper on top of CALayer, which in the end are OpenGL textures) and applies one by one on top of each other based on their x,y,z position. In regular rendering, the whole operation happens in special frame buffers that the display will directly read for rendering on the screen, repeating the process at a rate around 60 times per second.</p></blockquote><blockquote><p>Of course the process have some drawbacks as well. The main one is that offscreen rendering requires a context switch (GPU has to change to a different memory area to perform the drawing) and then copying the resulting composited layer into the frame buffer. Every time any of the composited layers change, the cache needs to be redrawn again. This is why in many circumstances offscreen rendering is not a good idea, as it requires additional computation when need to be rerendered. Besides, the layer requires extra video memory which of course is limited, so use it with caution. </p></blockquote><ul><li><a href="https://www.objc.io/issues/3-views/moving-pixels-onto-the-screen/" target="_blank" rel="noopener">Getting Pixels onto the Screen</a></li><li><a href="https://stackoverflow.com/questions/19405741/when-should-i-set-layer-shouldrasterize-to-yes" target="_blank" rel="noopener">https://stackoverflow.com/questions/19405741/when-should-i-set-layer-shouldrasterize-to-yes</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to support drag and drop in UICollectionView iOS</title>
      <link href="/blog/How-to-support-drag-and-drop-in-UICollectionView-iOS/"/>
      <url>/blog/How-to-support-drag-and-drop-in-UICollectionView-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/411" target="_blank" rel="noopener">#411</a></strong></p><p>See <a href="https://github.com/onmyway133/CollectionUpdateExample/blob/master/DragAndDrop/ViewController.swift" target="_blank" rel="noopener">DragAndDrop example</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UICollectionViewDropDelegate</span>, <span class="title">UICollectionViewDragDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - UICollectionViewDragDelegate</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath)</span></span> -&gt; [<span class="type">UIDragItem</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> controller = leftController</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> provider = <span class="type">NSItemProvider</span>(</span><br><span class="line">            object: controller.imageForCell(indexPath: indexPath)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> dragItem = <span class="type">UIDragItem</span>(itemProvider: provider)</span><br><span class="line">        dragItem.localObject = indexPath</span><br><span class="line">        <span class="keyword">return</span> [dragItem]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - UICollectionViewDropDelegate</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, performDropWith coordinator: UICollectionViewDropCoordinator)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> destinationIndexPath: <span class="type">IndexPath</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> indexPath = coordinator.destinationIndexPath &#123;</span><br><span class="line">            destinationIndexPath = indexPath</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            destinationIndexPath = <span class="type">IndexPath</span>(row: <span class="number">0</span>, section: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> controller = rightController</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> dragItemIndexPath = coordinator.items.last?.dragItem.localObject <span class="keyword">as</span>! <span class="type">IndexPath</span></span><br><span class="line">        <span class="keyword">let</span> draggedItem = leftController.items[dragItemIndexPath.item]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove</span></span><br><span class="line">        leftController.items.remove(at: dragItemIndexPath.item)</span><br><span class="line">        leftController.collectionView.deleteItems(at: [dragItemIndexPath])</span><br><span class="line"></span><br><span class="line">        <span class="comment">// insert</span></span><br><span class="line">        controller.items.insert(draggedItem, at: destinationIndexPath.item)</span><br><span class="line">        controller.collectionView.insertItems(at: [destinationIndexPath])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to support drag and drop in NSView</title>
      <link href="/blog/How-to-support-drag-and-drop-in-NSView/"/>
      <url>/blog/How-to-support-drag-and-drop-in-NSView/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/410" target="_blank" rel="noopener">#410</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"><span class="keyword">import</span> Anchors</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DraggingView</span>: <span class="title">NSView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> didDrag: ((<span class="type">FileInfo</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">    <span class="keyword">let</span> highlightView = <span class="type">NSView</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame frameRect: <span class="type">NSRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frameRect)</span><br><span class="line"></span><br><span class="line">        registerForDraggedTypes([</span><br><span class="line">            .fileURL</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        highlightView.isHidden = <span class="literal">true</span></span><br><span class="line">        addSubview(highlightView)</span><br><span class="line">        activate(highlightView.anchor.edges)</span><br><span class="line">        highlightView.wantsLayer = <span class="literal">true</span></span><br><span class="line">        highlightView.layer?.borderColor = <span class="type">NSColor</span>(hex: <span class="string">"#FF6CA8"</span>).cgColor</span><br><span class="line">        highlightView.layer?.borderWidth = <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder decoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingEntered</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class="type">NSDragOperation</span> &#123;</span><br><span class="line">        highlightView.isHidden = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">NSDragOperation</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingEnded</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> pathAlias = sender.draggingPasteboard.propertyList(forType: .fileURL) <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> url = <span class="type">URL</span>(fileURLWithPath: pathAlias).standardized</span><br><span class="line">        <span class="keyword">let</span> fileInfo = <span class="type">FileInfo</span>(url: url)</span><br><span class="line">        didDrag?(fileInfo)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingExited</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo?)</span></span> &#123;</span><br><span class="line">        highlightView.isHidden = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingUpdated</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class="type">NSDragOperation</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NSDragOperation</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To get information about multiple files</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingEnded</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> pasteBoardItems = sender.draggingPasteboard.pasteboardItems <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fileInfos: [<span class="type">FileInfo</span>] = pasteBoardItems</span><br><span class="line">        .flatMap(&#123;</span><br><span class="line">            <span class="keyword">return</span> $<span class="number">0</span>.propertyList(forType: .fileURL) <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="built_in">map</span>(&#123;</span><br><span class="line">            <span class="keyword">let</span> url = <span class="type">URL</span>(fileURLWithPath: $<span class="number">0</span>).standardized</span><br><span class="line">            <span class="keyword">return</span> <span class="type">FileInfo</span>(url: url)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">URL</span>(fileURLWithPath: pathAlias).standardized</span><br><span class="line">    <span class="keyword">let</span> fileInfo = <span class="type">FileInfo</span>(url: url)</span><br><span class="line">    didDrag(fileInfos)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use NSStepper in Appkit</title>
      <link href="/blog/How-to-use-NSStepper-in-Appkit/"/>
      <url>/blog/How-to-use-NSStepper-in-Appkit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/409" target="_blank" rel="noopener">#409</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stepper = <span class="type">NSStepper</span>()</span><br><span class="line"><span class="keyword">let</span> textField = <span class="type">NSTextField</span>(wrappingLabelWithString: <span class="string">"\(myLocalCount)"</span>)</span><br><span class="line"></span><br><span class="line">stepper.integerValue = myLocalCount</span><br><span class="line">stepper.minValue = <span class="number">5</span></span><br><span class="line">stepper.maxValue = <span class="number">24</span></span><br><span class="line">stepper.valueWraps = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">stepper.target = <span class="keyword">self</span></span><br><span class="line">stepper.action = #selector(onStepperChange(<span class="number">_</span>:))</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">onStepperChange</span><span class="params">(<span class="number">_</span> sender: NSStepper)</span></span> &#123;</span><br><span class="line">    myLocalCount = sender.integerValue</span><br><span class="line">    textField.stringValue = <span class="string">"\(sender.integerValue)"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to handle shortcut in AppKit</title>
      <link href="/blog/How-to-handle-shortcut-in-AppKit/"/>
      <url>/blog/How-to-handle-shortcut-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/408" target="_blank" rel="noopener">#408</a></strong></p><p><code>Podfile</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'MASShortcut'</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shortcut = <span class="type">MASShortcut</span>(keyCode: kVK_ANSI_K, modifierFlags: [.command, .shift])</span><br><span class="line"></span><br><span class="line"><span class="type">MASShortcutMonitor</span>.shared()?.register(shortcut, withAction: &#123;</span><br><span class="line">    <span class="keyword">self</span>.showPopover(sender: <span class="keyword">self</span>.statusItem.button)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to select file in its directory in AppKit</title>
      <link href="/blog/How-to-select-file-in-its-directory-in-AppKit/"/>
      <url>/blog/How-to-select-file-in-its-directory-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/407" target="_blank" rel="noopener">#407</a></strong></p><p><a href="https://developer.apple.com/documentation/appkit/nsworkspace/1524399-selectfile" target="_blank" rel="noopener">https://developer.apple.com/documentation/appkit/nsworkspace/1524399-selectfile</a></p><blockquote><p>In macOS 10.5 and later, this method does not follow symlinks when selecting the file. If the fullPath parameter contains any symlinks, this method selects the symlink instead of the file it targets. If you want to select the target file, use the resolvingSymlinksInPath method to resolve any symlinks before calling this method.</p></blockquote><blockquote><p>It is safe to call this method from any thread of your app.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSWorkspace</span>.shared.selectFile(</span><br><span class="line">    url.path,</span><br><span class="line">    inFileViewerRootedAtPath: url.deletingLastPathComponent().path)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use NSProgressIndicator in AppKit</title>
      <link href="/blog/How-to-use-NSProgressIndicator-in-AppKit/"/>
      <url>/blog/How-to-use-NSProgressIndicator-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/406" target="_blank" rel="noopener">#406</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> progressIndicator = <span class="type">NSProgressIndicator</span>()</span><br><span class="line">progressIndicator.isIndeterminate = <span class="literal">true</span></span><br><span class="line">progressIndicator.style = .spinning</span><br><span class="line">progressIndicator.startAnimation(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to show save panel in AppKit</title>
      <link href="/blog/How-to-show-save-panel-in-AppKit/"/>
      <url>/blog/How-to-show-save-panel-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/405" target="_blank" rel="noopener">#405</a></strong></p><p>Enable <code>Read/Write</code> for <code>User Selected File</code> under <code>Sandbox</code> to avoid bridge absent error</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> panel = <span class="type">NSSavePanel</span>()</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    panel.directoryURL = <span class="type">FileManager</span>.<span class="keyword">default</span>.homeDirectoryForCurrentUser</span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">    panel.nameFieldStringValue = <span class="string">"abc.gif"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> window = view.window <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    panel.beginSheetModal(<span class="keyword">for</span>: window) &#123; (result) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> result == .<span class="type">OK</span>, <span class="keyword">let</span> url = panel.url <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.showAlert()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showAlert</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> alert = <span class="type">NSAlert</span>()</span><br><span class="line">    alert.messageText = <span class="string">"Hello world"</span></span><br><span class="line">    alert.informativeText = <span class="string">"Information text"</span></span><br><span class="line">    alert.addButton(withTitle: <span class="string">"OK"</span>)</span><br><span class="line">    alert.addButton(withTitle: <span class="string">"Cancel"</span>)</span><br><span class="line">    alert.runModal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://www.raywenderlich.com/666-filemanager-class-tutorial-for-macos-getting-started-with-the-file-system" target="_blank" rel="noopener">https://www.raywenderlich.com/666-filemanager-class-tutorial-for-macos-getting-started-with-the-file-system</a></li><li><a href="https://stackoverflow.com/questions/47954418/using-cocoa-nssavepanel-in-sandbox-causes-assertion-failure" target="_blank" rel="noopener">https://stackoverflow.com/questions/47954418/using-cocoa-nssavepanel-in-sandbox-causes-assertion-failure</a></li><li><a href="https://stackoverflow.com/questions/18417432/how-to-show-alert-pop-up-in-in-cocoa" target="_blank" rel="noopener">https://stackoverflow.com/questions/18417432/how-to-show-alert-pop-up-in-in-cocoa</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to animate NSView using keyframe</title>
      <link href="/blog/How-to-animate-NSView-using-keyframe/"/>
      <url>/blog/How-to-animate-NSView-using-keyframe/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/404" target="_blank" rel="noopener">#404</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animation = <span class="type">CAKeyframeAnimation</span>(keyPath: <span class="string">"position.y"</span>)</span><br><span class="line">animation.values = [<span class="number">50</span>, <span class="number">20</span>, <span class="number">50</span>]</span><br><span class="line">animation.keyTimes = [<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>]</span><br><span class="line">animation.duration = <span class="number">2</span></span><br><span class="line">animation.repeatCount = <span class="type">Float</span>.greatestFiniteMagnitude</span><br><span class="line">animation.autoreverses = <span class="literal">true</span></span><br><span class="line">myView.wantsLayer = <span class="literal">true</span></span><br><span class="line">myView.layer?.add(animation, forKey: <span class="string">"bounce"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to quit macOS on last window closed</title>
      <link href="/blog/How-to-quit-macOS-on-last-window-closed/"/>
      <url>/blog/How-to-quit-macOS-on-last-window-closed/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/403" target="_blank" rel="noopener">#403</a></strong></p><p><a href="https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428381-applicationshouldterminateafterl?language=objc" target="_blank" rel="noopener">https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428381-applicationshouldterminateafterl?language=objc</a></p><blockquote><p>The application sends this message to your delegate when the application’s last window is closed. It sends this message regardless of whether there are still panels open. (A panel in this case is defined as being an instance of NSPanel or one of its subclasses.)</p></blockquote><blockquote><p>If your implementation returns NO, control returns to the main event loop and the application is not terminated. If you return YES, your delegate’s applicationShouldTerminate: method is subsequently invoked to confirm that the application should be terminated.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationShouldTerminateAfterLastWindowClosed</span><span class="params">(<span class="number">_</span> sender: NSApplication)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to test Date with timezone aware in Swift</title>
      <link href="/blog/How-to-test-Date-with-timezone-aware-in-Swift/"/>
      <url>/blog/How-to-test-Date-with-timezone-aware-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/402" target="_blank" rel="noopener">#402</a></strong></p><p>I want to test if a date has passed another date</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> base =  <span class="type">Date</span>(timeIntervalSince1970: <span class="number">1567756697</span>)</span><br><span class="line"><span class="type">XCTAssertEqual</span>(validator.hasPassed(event: event, date: base), <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>My <code>hasPassed</code> is using Calendar.current</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minuteSinceMidnight</span><span class="params">(date: Date)</span></span> -&gt; <span class="type">MinuteSinceMidnight</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> calendar = <span class="type">Calendar</span>.current</span><br><span class="line">    <span class="keyword">let</span> start = calendar.startOfDay(<span class="keyword">for</span>: date)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>(date.timeIntervalSince(start)) / <span class="number">60</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But the minute is always having timezone applied. Even if I try with <code>DateComponents</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minuteSinceMidnight</span><span class="params">(date: Date)</span></span> -&gt; <span class="type">MinuteSinceMidnight</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> components = calendar.dateComponents([.hour, .minute], from: date)</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> hour = components.hour, <span class="keyword">let</span> minute = components.minute <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hour * <span class="number">60</span> + minute</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As long as I use <code>Calendar</code>, it always has timezone applied.</p><p>Checking this time interval <code>1567756697</code> on <a href="https://www.epochconverter.com/" target="_blank" rel="noopener">https://www.epochconverter.com/</a></p><blockquote><p>Assuming that this timestamp is in seconds:<br>GMT: Friday, September 6, 2019 7:58:17 PM<br>Your time zone: Friday, September 6, 2019 9:58:17 PM GMT+02:00 DST</p></blockquote><p>Because I have GMT+2, there will always be 2 hours offset. This works in app, but not in test because of the way I construct Date with time interval.</p><p>One way is to have test data using string construction, and provide timezone to <code>DateFormatter</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formatter = <span class="type">ISO8601DateFormatter</span>()</span><br><span class="line"><span class="keyword">let</span> date = formatter.date(from: <span class="string">"2019-07-58T12:39:00Z"</span>)</span><br><span class="line"><span class="keyword">let</span> string = formatter.string(from: <span class="type">Date</span>())</span><br></pre></td></tr></table></figure><p>Another way is to have a fixed timezone for Calendar</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calendar = <span class="type">Calendar</span>.current</span><br><span class="line">calendar.timeZone = <span class="type">TimeZone</span>(secondsFromGMT: <span class="number">0</span>)!</span><br></pre></td></tr></table></figure><p>Another way is to adjust existing date</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calendar.date(bySettingHour: <span class="number">20</span>, minute: <span class="number">02</span>, second: <span class="number">00</span>, of: <span class="type">Date</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to sign executable for sandbox</title>
      <link href="/blog/How-to-sign-executable-for-sandbox/"/>
      <url>/blog/How-to-sign-executable-for-sandbox/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/401" target="_blank" rel="noopener">#401</a></strong></p><p>Find identity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">security find-identity</span><br></pre></td></tr></table></figure><p>Sign with entitlements and identity. For macOS, use <code>3rd Party Mac Developer Application</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign -f -s &quot;3rd Party Mac Developer Application: Khoa Pham (123DK123F2)&quot; --entitlements &quot;MyApp.entitlements&quot; &quot;tool/mytool&quot;</span><br></pre></td></tr></table></figure><p>To enable harden runtime</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign --verbose --force --deep -o runtime --sign</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make simple traffic simulation in Javascript</title>
      <link href="/blog/How-to-make-simple-traffic-simulation-in-Javascript/"/>
      <url>/blog/How-to-make-simple-traffic-simulation-in-Javascript/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/400" target="_blank" rel="noopener">#400</a></strong></p><ul><li>Use prototype.js for inheritance</li><li>Use enchant.js for 2d game logic</li><li>Code <a href="https://github.com/onmyway133/traffic_simulator" target="_blank" rel="noopener">https://github.com/onmyway133/traffic_simulator</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make collaborative drawing canvas with socketio and node</title>
      <link href="/blog/How-to-make-collaborative-drawing-canvas-with-socketio-and-node/"/>
      <url>/blog/How-to-make-collaborative-drawing-canvas-with-socketio-and-node/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/399" target="_blank" rel="noopener">#399</a></strong></p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><ul><li>Use <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">https://github.com/facebook/create-react-app</a></li></ul><p><code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">'./Main'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Main</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default App;</span></span><br></pre></td></tr></table></figure><p><code>Main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withStyles &#125; <span class="keyword">from</span> <span class="string">'@material-ui/core/styles'</span>;</span><br><span class="line"><span class="keyword">import</span> AppBar <span class="keyword">from</span> <span class="string">'@material-ui/core/AppBar'</span>;</span><br><span class="line"><span class="keyword">import</span> Toolbar <span class="keyword">from</span> <span class="string">'@material-ui/core/Toolbar'</span>;</span><br><span class="line"><span class="keyword">import</span> Typography <span class="keyword">from</span> <span class="string">'@material-ui/core/Typography'</span>;</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'@material-ui/core/Button'</span>;</span><br><span class="line"><span class="keyword">import</span> IconButton <span class="keyword">from</span> <span class="string">'@material-ui/core/IconButton'</span>;</span><br><span class="line"><span class="keyword">import</span> MenuIcon <span class="keyword">from</span> <span class="string">'@material-ui/icons/Menu'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Manager <span class="keyword">from</span> <span class="string">'./Manager'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">    root: &#123;</span><br><span class="line">      flexGrow: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    grow: &#123;</span><br><span class="line">      flexGrow: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    menuButton: &#123;</span><br><span class="line">      marginLeft: <span class="number">-12</span>,</span><br><span class="line">      marginRight: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        classes: PropTypes.object.isRequired,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; classes &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=&#123;classes.root&#125;&gt;</span><br><span class="line">              &lt;AppBar position=<span class="string">"static"</span>&gt;</span><br><span class="line">                &lt;Toolbar&gt;</span><br><span class="line">                  &lt;IconButton className=&#123;classes.menuButton&#125; color=<span class="string">"inherit"</span> aria-label=<span class="string">"Menu"</span>&gt;</span><br><span class="line">                    &lt;MenuIcon /&gt;</span><br><span class="line">                  &lt;<span class="regexp">/IconButton&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;Typography variant="h6" color="inherit" className=&#123;classes.grow&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    Collaborate Canvas</span></span><br><span class="line"><span class="regexp">                  &lt;/</span>Typography&gt;</span><br><span class="line">                  &lt;Button color=<span class="string">"inherit"</span> onClick=&#123;<span class="keyword">this</span>.onImagePress&#125; &gt;Image&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;Button color="inherit" onClick=&#123;this.onClearPress&#125; &gt;Clear&lt;/</span>Button&gt;</span><br><span class="line">                  &lt;input ref=<span class="string">"fileInput"</span> type=<span class="string">"file"</span> id=<span class="string">"myFile"</span> multiple accept=<span class="string">"image/*"</span> style=&#123;&#123;<span class="attr">display</span>: <span class="string">'none'</span>&#125;&#125; onChange=&#123;<span class="keyword">this</span>.handleFiles&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/Toolbar&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>AppBar&gt;</span><br><span class="line">              &lt;canvas ref=<span class="string">"canvas"</span> <span class="keyword">with</span>=<span class="string">"1000"</span> height=<span class="string">"1000"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">      const canvas = this.refs.canvas</span></span><br><span class="line"><span class="regexp">      this.manager = new Manager(canvas)</span></span><br><span class="line"><span class="regexp">      this.manager.connect()</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    onImagePress = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      const fileInput = this.refs.fileInput</span></span><br><span class="line"><span class="regexp">      fileInput.click()</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    onClearPress = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      this.manager.clear()</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    handleFiles = (e) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      e.persist()</span></span><br><span class="line"><span class="regexp">      const canvas = this.refs.canvas</span></span><br><span class="line"><span class="regexp">      const context = canvas.getContext('2d')</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      const file = e.target.files[0]</span></span><br><span class="line"><span class="regexp">      var image = new Image()</span></span><br><span class="line"><span class="regexp">      image.onload = function() &#123;</span></span><br><span class="line"><span class="regexp">          context.drawImage(image, 0, 0, window.innerWidth, window.innerHeight)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      image.src = URL.createObjectURL(file)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default withStyles(styles)(Main);</span></span><br></pre></td></tr></table></figure><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>Use <code>express</code> and <code>socket.io</code></p><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> socketIO = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(app)</span><br><span class="line"><span class="keyword">const</span> io = socketIO.listen(server)</span><br><span class="line">server.listen(<span class="number">3001</span>)</span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server running on 127.0.0.1:8080"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lines = []</span><br><span class="line">io.on(<span class="string">'connection'</span>, (socket) =&gt; &#123;</span><br><span class="line">    lines.forEach(<span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = &#123; line &#125;</span><br><span class="line">        socket.emit(<span class="string">'draw_line'</span>, data) </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'draw_line'</span>, (data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; line &#125; = data</span><br><span class="line">        lines.push(line)</span><br><span class="line"></span><br><span class="line">        io.emit(<span class="string">'draw_line'</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'clear'</span>, () =&gt; &#123;</span><br><span class="line">        lines = []</span><br><span class="line">        io.emit(<span class="string">'clear'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'draw_image'</span>, (data) =&gt; &#123;</span><br><span class="line">        io.emit(<span class="string">'draw_image'</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to generate changelog for GitHub releases with rxjs and node</title>
      <link href="/blog/How-to-generate-changelog-for-GitHub-releases-with-rxjs-and-node/"/>
      <url>/blog/How-to-generate-changelog-for-GitHub-releases-with-rxjs-and-node/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/398" target="_blank" rel="noopener">#398</a></strong></p><h2 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h2><ul><li>Use <a href="https://github.com/onmyway133/github-changelogs-maker" target="_blank" rel="noopener">https://github.com/onmyway133/github-changelogs-maker</a></li><li>Generate personal access token <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a></li></ul><h2 id="Technical"><a href="#Technical" class="headerlink" title="Technical"></a>Technical</h2><p>Dependencies</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Rx = <span class="built_in">require</span>(<span class="string">'rxjs/Rx'</span>)</span><br><span class="line"><span class="keyword">const</span> Fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>)</span><br><span class="line"><span class="keyword">const</span> Minimist = <span class="built_in">require</span>(<span class="string">'minimist'</span>)</span><br><span class="line"><span class="keyword">const</span> Fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br></pre></td></tr></table></figure><p>Use GraphQL</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">makeOptions(query, token) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      <span class="string">'Authorization'</span>: <span class="string">`bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      query: <span class="string">`</span></span><br><span class="line"><span class="string">      query &#123;</span></span><br><span class="line"><span class="string">        repository(owner: "<span class="subst">$&#123;<span class="keyword">this</span>.owner&#125;</span>", name: "<span class="subst">$&#123;<span class="keyword">this</span>.repo&#125;</span>") &#123;</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;query&#125;</span></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use orderBy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">fetchPRsAndIssues(dates) &#123;</span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">`</span></span><br><span class="line"><span class="string">    pullRequests(last: 100, orderBy: &#123;field: UPDATED_AT, direction: ASC&#125;) &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          title</span></span><br><span class="line"><span class="string">          merged</span></span><br><span class="line"><span class="string">          mergedAt</span></span><br><span class="line"><span class="string">          url</span></span><br><span class="line"><span class="string">          author &#123;</span></span><br><span class="line"><span class="string">            login</span></span><br><span class="line"><span class="string">            url</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    issues(last: 100, orderBy: &#123;field: UPDATED_AT, direction: ASC&#125;) &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          title</span></span><br><span class="line"><span class="string">          closed</span></span><br><span class="line"><span class="string">          updatedAt</span></span><br><span class="line"><span class="string">          url</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to do launch screen in Android</title>
      <link href="/blog/How-to-do-launch-screen-in-Android/"/>
      <url>/blog/How-to-do-launch-screen-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/397" target="_blank" rel="noopener">#397</a></strong></p><blockquote><p>We recommend that, rather than disabling the preview window, you follow the common Material Design patterns. You can use the activity’s windowBackground theme attribute to provide a simple custom drawable for the starting activity.</p></blockquote><p><code>styles.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"LaunchTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/launch_background<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Set <code>android:theme=&quot;@style/LaunchTheme&quot;</code> to <code>activity</code> element</p><p><code>AndroidManifest.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">package</span>=<span class="string">"com.onmyway133.whatsupintech"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MyApplication"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">".features.main.MainActivity"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:theme</span>=<span class="string">"@style/LaunchTheme"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>MainActivity.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        setTheme(R.style.AppTheme_NoActionBar)</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.main_activity)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://android.jlelse.eu/the-complete-android-splash-screen-guide-c7db82bce565" target="_blank" rel="noopener">The Complete Android Splash Screen Guide</a></li><li><a href="https://developer.android.com/topic/performance/vitals/launch-time#themed" target="_blank" rel="noopener">Themed launch screens</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to add header to NavigationView in Android</title>
      <link href="/blog/How-to-add-header-to-NavigationView-in-Android/"/>
      <url>/blog/How-to-add-header-to-NavigationView-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/396" target="_blank" rel="noopener">#396</a></strong></p><p>Use <code>app:headerLayout</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigationView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:menu</span>=<span class="string">"@menu/drawer_menu"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:itemIconTint</span>=<span class="string">"@color/title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:itemTextColor</span>=<span class="string">"@color/title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:headerLayout</span>=<span class="string">"@layout/navigation_header"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>navigation_header.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to do simple analytics in iOS</title>
      <link href="/blog/How-to-do-simple-analytics-in-iOS/"/>
      <url>/blog/How-to-do-simple-analytics-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/395" target="_blank" rel="noopener">#395</a></strong></p><p>Prefer static enum to avoid repetition and error. The Log should have methods with all required fields so the call site is as simple as possible. How to format and assign parameters is encapsulated in this Analytics.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Firebase</span><br><span class="line"><span class="keyword">import</span> FirebaseAnalytics</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Analytics</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Parameter</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> studentId = <span class="string">"student_id"</span></span><br><span class="line">        <span class="keyword">case</span> classId = <span class="string">"class_id"</span></span><br><span class="line">        <span class="keyword">case</span> url = <span class="string">"url"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Property</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> grantLocation = <span class="string">"grant_location"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Name</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> login</span><br><span class="line">        <span class="keyword">case</span> logOut = <span class="string">"log_out"</span></span><br><span class="line">        <span class="keyword">case</span> enroll</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">log</span><span class="params">(<span class="number">_</span> name: Name, parameters: [Parameter: String] = [:])</span></span> &#123;</span><br><span class="line">            <span class="keyword">let</span> mapped: [<span class="type">String</span>: <span class="type">String</span>] = <span class="type">Dictionary</span>(uniqueKeysWithValues: parameters.<span class="built_in">map</span>(&#123; key, value <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">return</span> (key.rawValue, value)</span><br><span class="line">            &#125;))</span><br><span class="line"></span><br><span class="line">            <span class="type">FirebaseAnalytics</span>.<span class="type">Analytics</span>.logEvent(name.rawValue, parameters: mapped)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(userId: String?)</span></span> &#123;</span><br><span class="line">            <span class="type">FirebaseAnalytics</span>.<span class="type">Analytics</span>.setUserID(userId)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setProperty</span><span class="params">(<span class="number">_</span> property: Property, value: String)</span></span> &#123;</span><br><span class="line">            <span class="type">FirebaseAnalytics</span>.<span class="type">Analytics</span>.setUserProperty(value, forName: property.rawValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> log = <span class="type">Log</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Analytics</span>.<span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">grantLocation</span><span class="params">(hasGranted: Bool)</span></span> &#123;</span><br><span class="line">        setProperty(.grantLocation, value: hasGranted.<span class="built_in">toString</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(userId: String)</span></span> &#123;</span><br><span class="line">        log(.login)</span><br><span class="line">        <span class="keyword">set</span>(userId: userId)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">logOut</span><span class="params">()</span></span> &#123;</span><br><span class="line">        log(.logOut)</span><br><span class="line">        <span class="keyword">set</span>(userId: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enroll</span><span class="params">(classId: String)</span></span> &#123;</span><br><span class="line">        log(.enroll, parameters: [</span><br><span class="line">            .classId: classId</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">Bool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toString</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span> ? <span class="string">"yes"</span>: <span class="string">"no"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Back to static site</title>
      <link href="/blog/Back-to-static-site/"/>
      <url>/blog/Back-to-static-site/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/394" target="_blank" rel="noopener">#394</a></strong></p><p>It’s been a while since I wrote <a href="https://github.com/onmyway133/blog/issues/1" target="_blank" rel="noopener">Hello world, again</a>, the ease of GitHub issue indeed motivates me to write more.</p><p>In the mean time I also wrote on <a href="https://medium.com/@onmyway133" target="_blank" rel="noopener">https://medium.com/@onmyway133</a> and <a href="https://dev.to/onmyway133" target="_blank" rel="noopener">https://dev.to/onmyway133</a> and got some traction.</p><p>Then I started using GitHub pages again, with Jekyll and remote theme, it works great. But then I needed to manually link the GitHub issues to my page, that’s just labor work.</p><p>The best combo is to have a GitHub page backed by GitHub issue. After a bit comparison between different static site generators, I actually tried them all, I chose Hexo because I simply like Javascript</p><ul><li><a href="https://github.com/onmyway133/blog/issues/392" target="_blank" rel="noopener">How to use Hexo to deploy static site</a></li><li><a href="https://github.com/onmyway133/blog/issues/393" target="_blank" rel="noopener">How to get all GitHub issues using GraphQL</a></li></ul><p>I use the simple <a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">cactus</a> theme for now with local searched power by <a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo-generator-search</a>.</p><p>Then I wrote a node.js script to mirror my GitHub issue to my page, with correct tags and updated date.</p><p>If you by any chance visit my new page <a href="https://onmyway133.github.io/">https://onmyway133.github.io/</a>, ohayou from me 👋 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to get all GitHub issues using GraphQL</title>
      <link href="/blog/How-to-get-all-GitHub-issues-using-GraphQL/"/>
      <url>/blog/How-to-get-all-GitHub-issues-using-GraphQL/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/393" target="_blank" rel="noopener">#393</a></strong></p><p><a href="https://developer.github.com/v4/explorer/" target="_blank" rel="noopener">https://developer.github.com/v4/explorer/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">query &#123; </span><br><span class="line">  repository(owner: &quot;onmyway133&quot;, name: &quot;blog&quot;) &#123; </span><br><span class="line">    issues(orderBy: &#123;field: UPDATED_AT, direction: ASC&#125;, last: 100) &#123;</span><br><span class="line">      edges &#123;</span><br><span class="line">        cursor</span><br><span class="line">        node &#123;</span><br><span class="line">          title</span><br><span class="line">          createdAt</span><br><span class="line">          updatedAt</span><br><span class="line">          labels(first: 10) &#123;</span><br><span class="line">            edges &#123;</span><br><span class="line">              node &#123;</span><br><span class="line">                name</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In node.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> GraphQL = <span class="built_in">require</span>(<span class="string">'graphql-request'</span>)</span><br><span class="line"><span class="keyword">const</span> GraphQLClient = GraphQL.GraphQLClient</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> GraphQLClient(<span class="string">'https://api.github.com/graphql'</span>, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Authorization: <span class="string">'Bearer 123456730712334152e6e1232c53987654312'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> query = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">  repository(owner: "onmyway133", name: "blog") &#123; </span></span><br><span class="line"><span class="string">    issues(first: 100) &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          title</span></span><br><span class="line"><span class="string">          createdAt</span></span><br><span class="line"><span class="string">          updatedAt</span></span><br><span class="line"><span class="string">          labels(first: 10) &#123;</span></span><br><span class="line"><span class="string">            edges &#123;</span></span><br><span class="line"><span class="string">              node &#123;</span></span><br><span class="line"><span class="string">                name</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line"> </span><br><span class="line">client.request(query)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> issues = data.repository.issues.edges.map(<span class="function">(<span class="params">edge</span>) =&gt;</span> &#123; <span class="keyword">return</span> edge.node &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(issues)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Hexo to deploy static site</title>
      <link href="/blog/How-to-use-Hexo-to-deploy-static-site/"/>
      <url>/blog/How-to-use-Hexo-to-deploy-static-site/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/392" target="_blank" rel="noopener">#392</a></strong></p><p>It’s been a long journey since <a href="https://github.com/onmyway133/blog/issues/1" target="_blank" rel="noopener">https://github.com/onmyway133/blog/issues/1</a>, next step is to keep GitHub issues as source, and mirror those to a static site.</p><p>Use 2 repos</p><ul><li><a href="https://github.com/onmyway133/web" target="_blank" rel="noopener">https://github.com/onmyway133/web</a> for source</li><li><a href="https://github.com/onmyway133/onmyway133.github.io" target="_blank" rel="noopener">https://github.com/onmyway133/onmyway133.github.io</a> for generated content</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm isntall -g hexo-cli</span><br><span class="line">echo $PATH=$PATH:/Users/khoa/.nodenv/versions/10.15.2/bin/hexo</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>Update <code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/onmyway133/onmyway133.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a></li><li><a href="https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39" target="_blank" rel="noopener">https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use type coersion in Javascript</title>
      <link href="/blog/How-to-use-type-coersion-in-Javascript/"/>
      <url>/blog/How-to-use-type-coersion-in-Javascript/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/391" target="_blank" rel="noopener">#391</a></strong></p><p>People who make fun of Javascript probably don’t understand implicit type coersion and when to use triple equal. Javascript is very unexpected, but when we work with this language, we need to be aware.</p><blockquote><ol><li>Coercion–Automatically changing a value from one type to another.</li><li>If x is Number and y is String, return x == ToNumber(y)</li><li>If x is String or Number and y is Object, return x == ToPrimitive(y)</li><li>Empty array becomes empty string</li></ol></blockquote><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a" target="_blank" rel="noopener">https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a</a></li><li><a href="https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/</a></li><li><a href="https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to safely access deeply nested object in Javascript</title>
      <link href="/blog/How-to-safely-access-deeply-nested-object-in-Javascript/"/>
      <url>/blog/How-to-safely-access-deeply-nested-object-in-Javascript/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/390" target="_blank" rel="noopener">#390</a></strong></p><p>An object ‘s property can be null or undefined.</p><p>Accessing step by step is tedious</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props.user &amp;&amp;</span><br><span class="line">props.user.posts &amp;&amp;</span><br><span class="line">props.user.posts[<span class="number">0</span>] &amp;&amp;</span><br><span class="line">props.user.posts[<span class="number">0</span>].comments</span><br></pre></td></tr></table></figure><p>Dynamic parsing path is too clever and involves string in the end, which is a no no</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">get</span> = (p, o) =&gt;</span><br><span class="line">  p.reduce((xs, x) =&gt; (xs &amp;&amp; xs[x]) ? xs[x] : null, o)</span><br><span class="line"></span><br><span class="line">const getUserComments = <span class="keyword">get</span>(['user', 'posts', 0, 'comments'])</span><br></pre></td></tr></table></figure><p>Instead let’s use function and catch errors explicitly, and defaults with a fallback</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">get</span>: (f, defaultValue) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> value = f()</span><br><span class="line">      <span class="keyword">if</span> (isNotNullOrUndefined(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> defaultValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> comments = <span class="keyword">get</span>(() =&gt; &#123; .user.posts[<span class="number">0</span>].comments &#125;, [])</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://medium.com/javascript-inside/safely-accessing-deeply-nested-values-in-javascript-99bf72a0855a" target="_blank" rel="noopener">https://medium.com/javascript-inside/safely-accessing-deeply-nested-values-in-javascript-99bf72a0855a</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use flow type in Javascript</title>
      <link href="/blog/How-to-use-flow-type-in-Javascript/"/>
      <url>/blog/How-to-use-flow-type-in-Javascript/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/389" target="_blank" rel="noopener">#389</a></strong></p><p>Prefer <a href="https://flow.org/" target="_blank" rel="noopener">flow</a> over TypeScript for simplicity</p><p>Javascript primitive types <code>number</code> and <code>string</code> are too general and do not express the domain objects. Because lack of type alias in Javascript, we can use flow</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type Centimeter = number</span><br><span class="line"><span class="keyword">export</span> type Color = string</span><br><span class="line"><span class="keyword">export</span> type ImageSource = number</span><br><span class="line"><span class="keyword">export</span> type Kilogram = number</span><br><span class="line"><span class="keyword">export</span> type Kilocalorie = number <span class="comment">// 1 cal = 4.1840 J</span></span><br><span class="line"><span class="keyword">export</span> type Second = number</span><br><span class="line"><span class="keyword">export</span> type SecondsSince1970 = number</span><br><span class="line"><span class="keyword">export</span> type Minute = number</span><br><span class="line"><span class="keyword">export</span> type DateString = string <span class="comment">// 2018-11-20</span></span><br><span class="line"><span class="keyword">export</span> type DateTimeString = string <span class="comment">// 2018-11-20T00:00:00</span></span><br><span class="line"><span class="keyword">export</span> type YearWeekString = string <span class="comment">// 201838</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type FunctionWithVoid = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span></span><br><span class="line"><span class="keyword">export</span> type FunctionWithString = <span class="function">(<span class="params">string</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line"><span class="keyword">export</span> type FunctionWithBoolean = <span class="function">(<span class="params">boolean</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line"><span class="keyword">export</span> type FunctionWithNumber = <span class="function">(<span class="params">number</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line"><span class="keyword">export</span> type JSONObject = any</span><br><span class="line"><span class="keyword">export</span> type JSONString = string</span><br><span class="line"><span class="keyword">export</span> type StringToString = any</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Degree = number</span><br><span class="line"><span class="keyword">export</span> type Radian = number</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Animal = <span class="string">'cat'</span> | <span class="string">'dog'</span> | <span class="string">'cow'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use flow in Kotlin</title>
      <link href="/blog/How-to-use-flow-in-Kotlin/"/>
      <url>/blog/How-to-use-flow-in-Kotlin/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/388" target="_blank" rel="noopener">#388</a></strong></p><h2 id="Asynchronous-Flow"><a href="#Asynchronous-Flow" class="headerlink" title="Asynchronous Flow"></a>Asynchronous Flow</h2><p><a href="https://kotlinlang.org/docs/reference/coroutines/flow.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/coroutines/flow.html</a></p><blockquote><p>Using List<int> result type we can only return all the values at once. To represent the stream of values that are being asynchronously computed we can use Flow<int> type similarly to the Sequence<int> type for synchronously computed values:</int></int></int></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to choose Firebase vs Google Analytics</title>
      <link href="/blog/How-to-choose-Firebase-vs-Google-Analytics/"/>
      <url>/blog/How-to-choose-Firebase-vs-Google-Analytics/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/387" target="_blank" rel="noopener">#387</a></strong></p><p>Google Analytics is shutting down. From Firebase Analytics console, we can choose to upgrade to Google Analytics, no code change is needed.</p><p><a href="https://support.google.com/firebase/answer/9167112?hl=en" target="_blank" rel="noopener">https://support.google.com/firebase/answer/9167112?hl=en</a></p><blockquote><p>In October 2019, we will start to sunset Google Analytics mobile-apps reporting based on the Google Analytics Services SDKs for Android and iOS.</p></blockquote><p><a href="https://firebase.googleblog.com/2019/07/firebase-google-analytics-upgrade.html" target="_blank" rel="noopener">https://firebase.googleblog.com/2019/07/firebase-google-analytics-upgrade.html</a></p><blockquote><p>Thanks to our continued partnership with Google Analytics, you can now upgrade your Firebase projects to the next generation of app analytics! </p></blockquote><p><a href="https://www.e-nor.com/blog/google-analytics/google-analytics-unifies-app-and-website-measurement" target="_blank" rel="noopener">https://www.e-nor.com/blog/google-analytics/google-analytics-unifies-app-and-website-measurement</a></p><blockquote><p>Google Analytics team has officially launched a new type of GA properties called “App + Web” to open public beta</p></blockquote><blockquote><p>It is a new GA property type that allows you to combine app and web data for unified reporting and analysis</p></blockquote><blockquote><p>Over the coming weeks, those who have existing Firebase projects will be able to upgrade your projects to the next generation Google Analytics experience as follows:</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use lessThan and greaterThan in Auto Layout in iOS</title>
      <link href="/blog/How-to-use-lessThan-and-greaterThan-in-Auto-Layout-in-iOS/"/>
      <url>/blog/How-to-use-lessThan-and-greaterThan-in-Auto-Layout-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/386" target="_blank" rel="noopener">#386</a></strong></p><p>When it comes to <code>right</code> and <code>bottom</code> side, we should use negative values, and use <code>lessThan</code>, as it means less than a negative value</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to check app running on jailbreak iOS device</title>
      <link href="/blog/How-to-check-app-running-on-jailbreak-iOS-device/"/>
      <url>/blog/How-to-check-app-running-on-jailbreak-iOS-device/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/385" target="_blank" rel="noopener">#385</a></strong></p><p>From <a href="https://github.com/OneSignal/OneSignal-iOS-SDK/blob/master/iOS_SDK/OneSignalSDK/Source/OneSignalJailbreakDetection.m" target="_blank" rel="noopener">https://github.com/OneSignal/OneSignal-iOS-SDK/blob/master/iOS_SDK/OneSignalSDK/Source/OneSignalJailbreakDetection.m</a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)isJailbroken &#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#if !(TARGET_IPHONE_SIMULATOR)</span></span><br><span class="line">    </span><br><span class="line">    FILE *file = fopen(<span class="string">"/Applications/Cydia.app"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    file = fopen(<span class="string">"/Library/MobileSubstrate/MobileSubstrate.dylib"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file = fopen(<span class="string">"/bin/bash"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    file = fopen(<span class="string">"/usr/sbin/sshd"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    file = fopen(<span class="string">"/etc/apt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    file = fopen(<span class="string">"/usr/bin/ssh"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([fileManager fileExistsAtPath:<span class="string">@"/Applications/Cydia.app"</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([fileManager fileExistsAtPath:<span class="string">@"/Library/MobileSubstrate/MobileSubstrate.dylib"</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([fileManager fileExistsAtPath:<span class="string">@"/bin/bash"</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([fileManager fileExistsAtPath:<span class="string">@"/usr/sbin/sshd"</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([fileManager fileExistsAtPath:<span class="string">@"/etc/apt"</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([fileManager fileExistsAtPath:<span class="string">@"/usr/bin/ssh"</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Omit logic below since they show warnings in the device log on iOS 9 devices.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">NSFoundationVersionNumber</span> &gt; <span class="number">1144.17</span>) <span class="comment">// NSFoundationVersionNumber_iOS_8_4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Check if the app can access outside of its sandbox</span></span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *string = <span class="string">@"."</span>;</span><br><span class="line">    [string writeToFile:<span class="string">@"/private/jailbreak.txt"</span> atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (!error)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        [fileManager removeItemAtPath:<span class="string">@"/private/jailbreak.txt"</span> error:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Check if the app can open a Cydia's URL scheme</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"cydia://package/com.example.package"</span>]])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Links for iOS</title>
      <link href="/blog/Links-for-iOS/"/>
      <url>/blog/Links-for-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/384" target="_blank" rel="noopener">#384</a></strong></p><ul><li><a href="https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/Displays/Displays.html" target="_blank" rel="noopener">iOS Device Display Summary</a></li><li><a href="https://developer.apple.com/documentation/bundleresources/information_property_list" target="_blank" rel="noopener">Information Property List</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to create bounce animation programmatically in Android</title>
      <link href="/blog/How-to-create-bounce-animation-programmatically-in-Android/"/>
      <url>/blog/How-to-create-bounce-animation-programmatically-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/383" target="_blank" rel="noopener">#383</a></strong></p><p>Right click <code>res -&gt; New -&gt; Android Resource Directory</code>, select <code>anim</code> and name it <code>anim</code><br>Right click <code>res/anim -&gt; New -&gt; Android Resource file</code>, name it <code>bounce</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">"-100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:repeatCount</span>=<span class="string">"infinite"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">We have to set `repeatCount` in xml, setting in code does not work !!</span><br><span class="line"></span><br><span class="line">```kt</span><br><span class="line">val bounce = AnimationUtils.loadAnimation(context, R.anim.bounce)</span><br><span class="line">bounce.repeatMode = Animation.REVERSE</span><br><span class="line">bounce.duration = (1000..2000).random().toLong()</span><br><span class="line"></span><br><span class="line">imageView.startAnimation(bounce)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use point in dp programmatically in Android</title>
      <link href="/blog/How-to-use-point-in-dp-programmatically-in-Android/"/>
      <url>/blog/How-to-use-point-in-dp-programmatically-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/382" target="_blank" rel="noopener">#382</a></strong></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">toDp</span><span class="params">(context: <span class="type">Context</span>?)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> scale = context.resources.displayMetrics.density</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.toFloat() * scale + <span class="number">0.5f</span>).toInt()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">set</span> = ConstraintSet()</span><br><span class="line"><span class="keyword">set</span>.setMargin(imageView.id, ConstraintSet.RIGHT, rightMargin.toDp(<span class="number">150</span>))</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://stackoverflow.com/questions/5255184/android-and-setting-width-and-height-programmatically-in-dp-units" target="_blank" rel="noopener">https://stackoverflow.com/questions/5255184/android-and-setting-width-and-height-programmatically-in-dp-units</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to create constraints programmatically with ConstraintLayout in Android</title>
      <link href="/blog/How-to-create-constraints-programmatically-with-ConstraintLayout-in-Android/"/>
      <url>/blog/How-to-create-constraints-programmatically-with-ConstraintLayout-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/381" target="_blank" rel="noopener">#381</a></strong></p><p>From API &lt; 17, there is ViewCompat.generateViewId()<br>For API 17, there is View.generateViewId()</p><p>Note that to use <code>ConstraintSet</code>, all views under <code>ConstraintLayout</code> inside xml must have unique id</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> imageView = ImageView(context)</span><br><span class="line">imageView.id = View.generateViewId()</span><br><span class="line">imageView.setImageResource(resId)</span><br><span class="line">constraintLayout.addView(imageView)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> <span class="keyword">set</span> = ConstraintSet()</span><br><span class="line"><span class="keyword">set</span>.clone(constraintLayout)</span><br><span class="line"><span class="keyword">set</span>.connect(imageView.id, ConstraintSet.RIGHT, ConstraintSet.PARENT_ID, ConstraintSet.RIGHT)</span><br><span class="line"><span class="keyword">set</span>.applyTo(constraintLayout)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use custom font as resource in Android</title>
      <link href="/blog/How-to-use-custom-font-as-resource-in-Android/"/>
      <url>/blog/How-to-use-custom-font-as-resource-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/380" target="_blank" rel="noopener">#380</a></strong></p><h2 id="Downloadable-fonts"><a href="#Downloadable-fonts" class="headerlink" title="Downloadable fonts"></a>Downloadable fonts</h2><p><a href="https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts" target="_blank" rel="noopener">https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts</a></p><blockquote><p>Android 8.0 (API level 26) and Android Support Library 26 introduce support for APIs to request fonts from a provider application instead of bundling files into the APK or letting the APK download fonts. The feature is available on devices running Android API versions 14 and higher through the Support Library 26</p></blockquote><h2 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h2><ul><li>Select <code>File -&gt; New -&gt; Folder -&gt; Assets Folder</code> to create <code>src/main/assets/fonts</code></li></ul><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">al myTypeface = Typeface.createFromAsset(assets, <span class="string">"fonts/myFont.ttf"</span>)</span><br><span class="line">myTextView.typeface = myTypeface</span><br></pre></td></tr></table></figure><h2 id="In-res"><a href="#In-res" class="headerlink" title="In res"></a>In res</h2><p>Create font directory</p><p>Right click <code>res -&gt; New -&gt; Android Resource Directory</code>, select <code>font</code> and name the folder <code>font</code></p><p>Add custom fonts to <code>res/font</code> folder. Note that name must be lower case and underscore, like <code>opensans_extrabolditalic.ttf</code></p><p>Right click <code>res/font -&gt; New -&gt; Font resource file</code> to create font family</p><p><code>opensans.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font-family</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:font</span>=<span class="string">"@font/opensans_regular"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fontStyle</span>=<span class="string">"normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fontWeight</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontFamily</span>=<span class="string">"@font/opensans_regular"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontStyle</span>=<span class="string">"normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontWeight</span>=<span class="string">"400"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:font</span>=<span class="string">"@font/opensans_semibold"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fontStyle</span>=<span class="string">"normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fontWeight</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontFamily</span>=<span class="string">"@font/opensans_semibold"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontStyle</span>=<span class="string">"normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontWeight</span>=<span class="string">"400"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:font</span>=<span class="string">"@font/opensans_bold"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fontStyle</span>=<span class="string">"normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fontWeight</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontFamily</span>=<span class="string">"@font/opensans_bold"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontStyle</span>=<span class="string">"normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:fontWeight</span>=<span class="string">"400"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">font-family</span>&gt;</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">Then use</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fontFamily</span>=<span class="string">"@font/opensans_bold"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"26dp"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://stackoverflow.com/questions/5583608/difference-between-res-and-assets-directories" target="_blank" rel="noopener">https://stackoverflow.com/questions/5583608/difference-between-res-and-assets-directories</a></li><li><a href="https://www.raywenderlich.com/213-custom-and-downloadable-fonts-on-android" target="_blank" rel="noopener">https://www.raywenderlich.com/213-custom-and-downloadable-fonts-on-android</a></li><li><a href="https://stackoverflow.com/questions/27588965/how-to-use-custom-font-in-a-project-written-in-android-studio" target="_blank" rel="noopener">https://stackoverflow.com/questions/27588965/how-to-use-custom-font-in-a-project-written-in-android-studio</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to get Hacker News top stories using parallel coroutine and Retrofit</title>
      <link href="/blog/How-to-get-Hacker-News-top-stories-using-parallel-coroutine-and-Retrofit/"/>
      <url>/blog/How-to-get-Hacker-News-top-stories-using-parallel-coroutine-and-Retrofit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/379" target="_blank" rel="noopener">#379</a></strong></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">"topstories.json?print=pretty"</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTopStories</span><span class="params">()</span></span>: List&lt;<span class="built_in">Int</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">"item/&#123;id&#125;.json?print=pretty"</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getStory</span><span class="params">(<span class="meta">@Path(<span class="meta-string">"id"</span>)</span> id: <span class="type">Int</span>)</span></span>: Item</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Repo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">api</span><span class="params">()</span></span>: Api &#123;</span><br><span class="line">        <span class="keyword">return</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(<span class="string">"https://hacker-news.firebaseio.com/v0/"</span>)</span><br><span class="line">            .addConverterFactory(MoshiConverterFactory.create())</span><br><span class="line">            .build()</span><br><span class="line">            .create(Api::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span></span>(<span class="keyword">val</span> repo: Repo): ViewModel() &#123;</span><br><span class="line">    <span class="keyword">val</span> items = MutableLiveData&lt;ArrayList&lt;Item&gt;&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> ids = repo.api()</span><br><span class="line">                .getTopStories()</span><br><span class="line">                .take(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> items = ids.map &#123;</span><br><span class="line">                repo.api().getStory(it)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.items.value = items.toCollection(ArrayList())</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            <span class="keyword">this</span>.items.value = arrayListOf()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Running-parallel"><a href="#Running-parallel" class="headerlink" title="Running parallel"></a>Running parallel</h2><p>The above run in serial. To run in parallel, we can use <code>async</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.async</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.coroutineScope</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span></span>(<span class="keyword">val</span> repo: Repo): ViewModel() &#123;</span><br><span class="line">    <span class="keyword">val</span> items = MutableLiveData&lt;ArrayList&lt;Item&gt;&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> ids = repo.api()</span><br><span class="line">                .getTopStories()</span><br><span class="line">                .take(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">            coroutineScope &#123;</span><br><span class="line">                <span class="keyword">val</span> items = ids</span><br><span class="line">                    .map &#123; async &#123; repo.api().getStory(it) &#125; &#125;</span><br><span class="line">                    .awaitAll()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@ViewModel</span>.items.value = items.toCollection(ArrayList())</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            <span class="keyword">this</span>.items.value = arrayListOf()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Parallel-decomposition"><a href="#Parallel-decomposition" class="headerlink" title="Parallel decomposition"></a>Parallel decomposition</h2><p><a href="https://medium.com/@elizarov/structured-concurrency-722d765aa952" target="_blank" rel="noopener">https://medium.com/@elizarov/structured-concurrency-722d765aa952</a></p><blockquote><p>With structured concurrency async coroutine builder became an extension on CoroutineScope just like launch did. You cannot simply write async { … } anymore, you have to provide a scope. A proper example of parallel decomposition becomes:</p></blockquote><h2 id="coroutineScope"><a href="#coroutineScope" class="headerlink" title="coroutineScope"></a>coroutineScope</h2><p><a href="https://proandroiddev.com/part-2-coroutine-cancellation-and-structured-concurrency-2dbc6583c07d" target="_blank" rel="noopener">https://proandroiddev.com/part-2-coroutine-cancellation-and-structured-concurrency-2dbc6583c07d</a></p><blockquote><p>coroutineScope function can be used to create a custom scope that suspends and only completes when all coroutines launched within that scope complete. If any of the children coroutines within the coroutineScope throws an exception, all other running sibling coroutines gets cancelled and this exception is propagated up the hierarchy. If the parent coroutine at the top of the hierarchy does not handle this error, it will also be cancelled.</p></blockquote><h2 id="awaitAll"><a href="#awaitAll" class="headerlink" title="awaitAll"></a>awaitAll</h2><p><a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await-all.html" target="_blank" rel="noopener">https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await-all.html</a></p><blockquote><p>Awaits for completion of given deferred values without blocking a thread and resumes normally with the list of values when all deferred computations are complete or resumes with the first thrown exception if any of computations complete exceptionally including cancellation.</p></blockquote><blockquote><p>This function is not equivalent to deferreds.map { it.await() } which fails only when it sequentially gets to wait for the failing deferred, while this awaitAll fails immediately as soon as any of the deferreds fail.</p></blockquote><blockquote><p>This suspending function is cancellable. If the Job of the current coroutine is cancelled or completed while this suspending function is waiting, this function immediately resumes with CancellationException.</p></blockquote><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/" target="_blank" rel="noopener">https://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/</a></li><li><a href="https://stackoverflow.com/questions/53535977/coroutines-runblocking-vs-coroutinescope" target="_blank" rel="noopener">https://stackoverflow.com/questions/53535977/coroutines-runblocking-vs-coroutinescope</a></li><li>awaitAll <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await-all.html" target="_blank" rel="noopener">https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await-all.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to show generic list in Fragment in Android</title>
      <link href="/blog/How-to-show-generic-list-in-Fragment-in-Android/"/>
      <url>/blog/How-to-show-generic-list-in-Fragment-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/378" target="_blank" rel="noopener">#378</a></strong></p><p>After having a <a href="https://github.com/onmyway133/blog/issues/357" target="_blank" rel="noopener">generic RecyclerView</a>, if we want to show multiple kinds of data in Fragment, we can use generic.</p><p>We may be tempted to use interface or protocol, but should prefer generic.</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedFragment</span></span>() : Fragment() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityCreated</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> mainViewModel: MainViewModel = ViewModelProviders.of(activity!!).<span class="keyword">get</span>(MainViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        mainViewModel.resId.observe(viewLifecycleOwner, Observer &#123;</span><br><span class="line">            <span class="keyword">when</span> (it) &#123;</span><br><span class="line">                R.id.gitHub -&gt; &#123; handleGitHub() &#125;</span><br><span class="line">                R.id.hackerNews -&gt; &#123; handleHackerNews() &#125;</span><br><span class="line">                R.id.reddit -&gt; &#123; handleReddit() &#125;</span><br><span class="line">                R.id.dev -&gt; &#123; handleDev() &#125;</span><br><span class="line">                R.id.productHunt -&gt; &#123; handleProductHunt() &#125;</span><br><span class="line">                <span class="keyword">else</span> -&gt; &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        recyclerView.layoutManager = LinearLayoutManager(context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The difference between each kind are</p><ul><li>The type of model</li><li>The type of Adapter</li><li>How to observe from viewModel</li><li>How to load from viewModel</li></ul><p>Here we also use <code>lifecycleScope</code> from <code>lifecycle runtime ktx</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">"androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha01"</span></span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">handle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    makeResId: () -&gt; <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    makeAdapter: () -&gt; <span class="type">com</span>.<span class="type">myapp</span>.<span class="type">Adapter</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    observe: ((<span class="type">ArrayList</span>&lt;<span class="type">T</span>&gt;) -&gt; <span class="type">Unit</span>) -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    load: <span class="type">suspend</span> () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    (activity <span class="keyword">as</span> AppCompatActivity).toolbar.title = getString(makeResId())</span><br><span class="line">    <span class="keyword">val</span> adapter = makeAdapter()</span><br><span class="line">    recyclerView.adapter = adapter</span><br><span class="line">    observe &#123;</span><br><span class="line">        adapter.update(it)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        viewLifecycleOwner.lifecycleScope.launch &#123;</span><br><span class="line">            progressBar.visibility = View.VISIBLE</span><br><span class="line">            load()</span><br><span class="line">            progressBar.visibility = View.GONE</span><br><span class="line">            swipeRefreshLayout.isRefreshing = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    doLoad()</span><br><span class="line">    swipeRefreshLayout.setOnRefreshListener &#123;</span><br><span class="line">        doLoad()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we just need to provide the required data</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleDev</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> viewModel: com.myapp.ViewModel <span class="keyword">by</span> viewModel()</span><br><span class="line">    handle(</span><br><span class="line">        &#123; R.string.menu_dev &#125;,</span><br><span class="line">        &#123; com.myapp.Adapter(items = arrayListOf()) &#125;,</span><br><span class="line">        &#123; completion -&gt;</span><br><span class="line">            viewModel.items.observe(viewLifecycleOwner, Observer &#123;</span><br><span class="line">                completion(it)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            viewModel.load()</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://developer.android.com/topic/libraries/architecture/coroutines" target="_blank" rel="noopener">Use Kotlin coroutines with Architecture components</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to manage OneSignal push notification in iOS</title>
      <link href="/blog/How-to-manage-OneSignal-push-notification-in-iOS/"/>
      <url>/blog/How-to-manage-OneSignal-push-notification-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/377" target="_blank" rel="noopener">#377</a></strong></p><p><a href="https://onesignal.com/" target="_blank" rel="noopener">OneSignal</a> is an alternative for Parse for push notifications but the sdk has many extra stuff and assumptions and lots of swizzling.</p><p>We can just use Rest to make API calls. From <a href="https://github.com/onmyway133/Dust" target="_blank" rel="noopener">https://github.com/onmyway133/Dust</a></p><p>Every official push notification SDK can do many things</p><ul><li>Register device token. This is crucial for the notification to get from your backend -&gt; APNS -&gt; device</li><li>Manage player id, user id, arn, …This is used to associate with device token</li><li>Manager tag, topic, subscription, segments, …This is used to group a set of device tokens</li><li>Do swizzling, update your application badge number, change your user notification settings, … without your knowing about that</li><li>Some other fancy stuffs</li><li>Dust does only one thing, which is push notification handling. The rest is under your control</li></ul><p>OneSignal</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="type">OneSignal</span>.appID = <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData)</span></span> &#123;</span><br><span class="line">  <span class="type">OneSignal</span>.handleDeviceToken(deviceToken)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the implementation</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">parse</span><span class="params">(deviceToken data: NSData)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> buffer = <span class="type">UnsafePointer</span>&lt;<span class="type">CChar</span>&gt;(data.bytes)</span><br><span class="line">    <span class="keyword">var</span> string = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;data.length &#123;</span><br><span class="line">      string += <span class="type">String</span>(format: <span class="string">"%02.2hhx"</span>, arguments: [buffer[i]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">deviceModel</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> systemInfo = utsname()</span><br><span class="line">    uname(&amp;systemInfo)</span><br><span class="line">    <span class="keyword">var</span> v = systemInfo.machine</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deviceModel = <span class="string">""</span></span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = <span class="built_in">withUnsafePointer</span>(&amp;v) &#123;</span><br><span class="line">      deviceModel = <span class="type">String</span>(<span class="type">UTF8String</span>: <span class="type">UnsafePointer</span>($<span class="number">0</span>)) ?? <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deviceModel</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">systemVersion</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> version = <span class="type">NSProcessInfo</span>.processInfo().operatingSystemVersion</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\(version.majorVersion).\(version.minorVersion).\(version.patchVersion)"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">language</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">NSLocale</span>.preferredLanguages().first!</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">timezone</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">NSTimeZone</span>.localTimeZone().secondsFromGMT</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">soundFiles</span><span class="params">()</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> resourcePath = <span class="type">NSBundle</span>.mainBundle().resourcePath</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> files = <span class="keyword">try</span>? <span class="type">NSFileManager</span>.defaultManager()</span><br><span class="line">      .contentsOfDirectoryAtPath(resourcePath)</span><br><span class="line">      .<span class="built_in">filter</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="number">0</span>.hasSuffix(<span class="string">".wav"</span>) || $<span class="number">0</span>.hasSuffix(<span class="string">".mp3"</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> files ?? []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">versionNumber</span><span class="params">()</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">NSBundle</span>.mainBundle().infoDictionary?[<span class="string">"CFBundleShortVersionString"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildNumber</span><span class="params">()</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">NSBundle</span>.mainBundle().infoDictionary?[<span class="string">"CFBundleVersionString"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">netType</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// Reachability</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">UserDefaults</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Key</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> playerID: <span class="type">String</span> = <span class="string">"Dust-OneSignal-Player-ID-Key"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> deviceToken: <span class="type">String</span> = <span class="string">"Dust-OneSignal-Device-Token-Key"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> subscribed: <span class="type">String</span> = <span class="string">"Dust-OneSignal-Disable-Subscribed-Key"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> playerID: <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">NSUserDefaults</span>.standardUserDefaults().stringForKey(<span class="type">Key</span>.playerID)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="type">NSUserDefaults</span>.standardUserDefaults().setObject(newValue, forKey: <span class="type">Key</span>.playerID)</span><br><span class="line">      <span class="type">NSUserDefaults</span>.standardUserDefaults().synchronize()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> deviceToken: <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">NSUserDefaults</span>.standardUserDefaults().stringForKey(<span class="type">Key</span>.deviceToken)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="type">NSUserDefaults</span>.standardUserDefaults().setObject(newValue, forKey: <span class="type">Key</span>.deviceToken)</span><br><span class="line">      <span class="type">NSUserDefaults</span>.standardUserDefaults().synchronize()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> subscribed: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">NSUserDefaults</span>.standardUserDefaults().boolForKey(<span class="type">Key</span>.subscribed)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="type">NSUserDefaults</span>.standardUserDefaults().setBool(newValue, forKey: <span class="type">Key</span>.subscribed)</span><br><span class="line">      <span class="type">NSUserDefaults</span>.standardUserDefaults().synchronize()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Alamofire</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">OneSignal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">var</span> appID: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> version = <span class="string">"020115"</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> baseURL = <span class="type">NSURL</span>(string: <span class="string">"https://onesignal.com/api/v1"</span>)!</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">NotificationType</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> subscribed = <span class="number">7</span></span><br><span class="line">    <span class="keyword">case</span> unsubscribed = -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">value</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">UserDefaults</span>.subscribed</span><br><span class="line">        ? <span class="type">NotificationType</span>.subscribed.rawValue : <span class="type">NotificationType</span>.unsubscribed.rawValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">Provisioning</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> development = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">(appID appID: String)</span></span> &#123;</span><br><span class="line">    <span class="type">NSUserDefaults</span>.standardUserDefaults().registerDefaults([</span><br><span class="line">      <span class="type">UserDefaults</span>.<span class="type">Key</span>.subscribed: <span class="literal">true</span></span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="type">OneSignal</span>.appID = appID</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">registerOrUpdateSession</span><span class="params">(completion: <span class="params">(<span class="params">(String?)</span></span></span></span> -&gt; <span class="type">Void</span>)? = <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> bundleID = <span class="type">NSBundle</span>.mainBundle().bundleIdentifier,</span><br><span class="line">      <span class="keyword">let</span> deviceToken = <span class="type">UserDefaults</span>.deviceToken</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> params: [<span class="type">String</span>: <span class="type">AnyObject</span>] = [</span><br><span class="line">      <span class="string">"app_id"</span> : appID,</span><br><span class="line">      <span class="string">"device_model"</span> : <span class="type">Utils</span>.deviceModel(),</span><br><span class="line">      <span class="string">"device_os"</span> : <span class="type">Utils</span>.systemVersion(),</span><br><span class="line">      <span class="string">"language"</span> : <span class="type">Utils</span>.language(),</span><br><span class="line">      <span class="string">"timezone"</span> : <span class="type">NSNumber</span>(integer: <span class="type">Utils</span>.timezone()),</span><br><span class="line">      <span class="string">"device_type"</span> : <span class="type">NSNumber</span>(integer : <span class="number">0</span>),</span><br><span class="line">      <span class="string">"sounds"</span> : <span class="type">Utils</span>.soundFiles(),</span><br><span class="line">      <span class="string">"sdk"</span> : version,</span><br><span class="line">      <span class="string">"identifier"</span> : deviceToken,</span><br><span class="line">      <span class="string">"net_type"</span> : <span class="type">NSNumber</span>(integer: <span class="type">Utils</span>.netType()),</span><br><span class="line">      <span class="string">"rooted"</span>: <span class="type">NSNumber</span>(bool: <span class="literal">false</span>),</span><br><span class="line">      <span class="string">"as_id"</span>: <span class="string">"OptedOut"</span>,</span><br><span class="line">      <span class="string">"sdk_type"</span>: <span class="string">"native"</span>,</span><br><span class="line">      <span class="string">"ios_bundle"</span>: bundleID,</span><br><span class="line">      <span class="string">"game_version"</span>: <span class="type">Utils</span>.versionNumber() ?? <span class="string">""</span>,</span><br><span class="line">      <span class="string">"notification_types"</span>: <span class="type">NotificationType</span>.value(),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">      params[<span class="string">"test_type"</span>] = <span class="type">Provisioning</span>.development.rawValue</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">NSURL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> playerID = <span class="type">UserDefaults</span>.playerID &#123;</span><br><span class="line">      url = baseURL.<span class="type">URLByAppendingPathComponent</span>(<span class="string">"players/\(playerID)/on_session"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      url = baseURL.<span class="type">URLByAppendingPathComponent</span>(<span class="string">"players"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Alamofire</span></span><br><span class="line">    .request(.<span class="type">POST</span>, url, parameters: params)</span><br><span class="line">    .responseJSON &#123; response <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> json = response.result.value <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">AnyObject</span>]</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        completion?(<span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> id = json[<span class="string">"id"</span>] <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">        <span class="type">UserDefaults</span>.playerID = id</span><br><span class="line">        completion?(id)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> value = json[<span class="string">"success"</span>] <span class="keyword">as</span>? <span class="type">Int</span>,</span><br><span class="line">        playerID = <span class="type">UserDefaults</span>.playerID <span class="keyword">where</span> value == <span class="number">1</span> &#123;</span><br><span class="line">        completion?(playerID)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        completion?(<span class="literal">nil</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(deviceToken data: NSData)</span></span> &#123;</span><br><span class="line">    <span class="type">UserDefaults</span>.deviceToken = <span class="type">Utils</span>.parse(deviceToken: data)</span><br><span class="line">    registerOrUpdateSession()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(subscription subscribed: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> playerID = <span class="type">UserDefaults</span>.playerID <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="type">UserDefaults</span>.subscribed = subscribed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url = baseURL.<span class="type">URLByAppendingPathComponent</span>(<span class="string">"players/\(playerID)"</span>)</span><br><span class="line">    <span class="keyword">let</span> params: [<span class="type">String</span>: <span class="type">AnyObject</span>] = [</span><br><span class="line">      <span class="string">"app_id"</span>: appID,</span><br><span class="line">      <span class="string">"notification_types"</span>: <span class="type">NotificationType</span>.value()</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="type">Alamofire</span></span><br><span class="line">    .request(.<span class="type">PUT</span>, url, parameters: params)</span><br><span class="line">    .responseJSON &#123; response <span class="keyword">in</span></span><br><span class="line">      <span class="built_in">print</span>(response)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(badge <span class="built_in">count</span>: Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> playerID = <span class="type">UserDefaults</span>.playerID <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url = baseURL.<span class="type">URLByAppendingPathComponent</span>(<span class="string">"players/\(playerID)"</span>)</span><br><span class="line">    <span class="keyword">let</span> params: [<span class="type">String</span>: <span class="type">AnyObject</span>] = [</span><br><span class="line">      <span class="string">"app_id"</span>: appID,</span><br><span class="line">      <span class="string">"badge_count"</span>: <span class="built_in">count</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="type">Alamofire</span></span><br><span class="line">      .request(.<span class="type">PUT</span>, url, parameters: params)</span><br><span class="line">      .responseJSON &#123; response <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getPlayerID</span><span class="params">(completion: String -&gt; Void)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> playerID = <span class="type">UserDefaults</span>.playerID &#123;</span><br><span class="line">      completion(playerID)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    registerOrUpdateSession &#123; playerID <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> playerID = playerID &#123;</span><br><span class="line">        completion(playerID)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to do throttle and debounce using DispatchWorkItem in Swift</title>
      <link href="/blog/How-to-do-throttle-and-debounce-using-DispatchWorkItem-in-Swift/"/>
      <url>/blog/How-to-do-throttle-and-debounce-using-DispatchWorkItem-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/376" target="_blank" rel="noopener">#376</a></strong></p><p><a href="https://github.com/onmyway133/Omnia/blob/master/Sources/Shared/Debouncer.swift" target="_blank" rel="noopener">https://github.com/onmyway133/Omnia/blob/master/Sources/Shared/Debouncer.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Debouncer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> delay: <span class="type">TimeInterval</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> workItem: <span class="type">DispatchWorkItem?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(delay: <span class="type">TimeInterval</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.delay = delay</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Trigger the action after some delay</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(action: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        workItem?.cancel()</span><br><span class="line">        workItem = <span class="type">DispatchWorkItem</span>(block: action)</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + delay, execute: workItem!)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DebouncerTests</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testDebounce</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> expectation = <span class="keyword">self</span>.expectation(description: #function)</span><br><span class="line">        <span class="keyword">let</span> debouncer = <span class="type">Debouncer</span>(delay: <span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        debouncer.run(action: &#123;</span><br><span class="line">            value = <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        debouncer.run(action: &#123;</span><br><span class="line">            value = <span class="number">2</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">0.2</span>, execute: &#123;</span><br><span class="line">            debouncer.run(action: &#123;</span><br><span class="line">                value = <span class="number">3</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">0.71</span>, execute: &#123;</span><br><span class="line">            <span class="type">XCTAssertEqual</span>(value, <span class="number">3</span>)</span><br><span class="line">            expectation.fulfill()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        wait(<span class="keyword">for</span>: [expectation], timeout: <span class="number">1.2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to simplify UIApplication life cycle observation in iOS</title>
      <link href="/blog/How-to-simplify-UIApplication-life-cycle-observation-in-iOS/"/>
      <url>/blog/How-to-simplify-UIApplication-life-cycle-observation-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/375" target="_blank" rel="noopener">#375</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecyclerHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> observer: <span class="type">AnyObject!</span></span><br><span class="line">    <span class="keyword">var</span> action: (() -&gt; <span class="type">Void</span>)?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> debouncer = <span class="type">Debouncer</span>(delay: <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        observer = <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(</span><br><span class="line">            forName: <span class="type">UIApplication</span>.didBecomeActiveNotification,</span><br><span class="line">            object: <span class="literal">nil</span>,</span><br><span class="line">            queue: .main,</span><br><span class="line">            using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>?.debouncer.run &#123;</span><br><span class="line">                    <span class="keyword">self</span>?.action?()</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> lifecycleHandler = <span class="type">LifecyclerHandler</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    lifecycleHandler.action = &#123;</span><br><span class="line">        <span class="type">Deps</span>.userHandler.refreshToken()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lifecycleHandler.setup()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to do UITests with Google Maps on iOS</title>
      <link href="/blog/How-to-do-UITests-with-Google-Maps-on-iOS/"/>
      <url>/blog/How-to-do-UITests-with-Google-Maps-on-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/374" target="_blank" rel="noopener">#374</a></strong></p><h2 id="Interact-with-GMSMapView"><a href="#Interact-with-GMSMapView" class="headerlink" title="Interact with GMSMapView"></a>Interact with GMSMapView</h2><p>Add <code>accessibilityIdentifier</code> to the parent view of <code>GMSMapView</code>. Setting directly onto <code>GMSMapView</code> has no effect</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accessibilityIdentifier = <span class="string">"MapView"</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = app.otherElements.matching(identifier: <span class="string">"MapView"</span>).element(boundBy: <span class="number">0</span>)</span><br><span class="line"><span class="built_in">map</span>.pinch(withScale: <span class="number">2</span>, velocity: <span class="number">1</span>)</span><br><span class="line"><span class="built_in">map</span>.rotate(<span class="type">CGFloat</span>.pi/<span class="number">3</span>, withVelocity: <span class="number">1.0</span>)</span><br><span class="line"><span class="built_in">map</span>.swipeLeft()</span><br><span class="line"><span class="built_in">map</span>.swipeRight()</span><br><span class="line"><span class="built_in">map</span>.swipeDown()</span><br><span class="line"><span class="built_in">map</span>.swipeDown()</span><br></pre></td></tr></table></figure><h2 id="Interact-with-GMSMarker-1st-try"><a href="#Interact-with-GMSMarker-1st-try" class="headerlink" title="Interact with GMSMarker (1st try)"></a>Interact with GMSMarker (1st try)</h2><p>Need to enable accessibility</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapView.accessibilityElementsHidden = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Can’t use pinch to zoom out with UITests, so need to mock location !!!</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>().pinch(withScale: <span class="number">0.05</span>, velocity: -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Need to use gpx to mock to preferred location</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = app.otherElements[<span class="type">Constant</span>.<span class="type">AccessibilityId</span>.mapView.rawValue]</span><br><span class="line"><span class="keyword">let</span> pin = app.otherElements</span><br><span class="line">            .matching(identifier: <span class="type">Constant</span>.<span class="type">AccessibilityId</span>.pin.rawValue)</span><br><span class="line">            .element(boundBy: <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Try <code>isAccessibilityElement = true</code> for <code>PinView</code>, can’t touch!!<br>Use coordinate, can’t touch !!</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> coordinate = pin.coordinate(withNormalizedOffset: <span class="type">CGVector</span>(dx: <span class="number">0.5</span>, dy: <span class="number">0.5</span>))</span><br><span class="line">coordinate.tap()</span><br></pre></td></tr></table></figure><p>Try traversing all the pins, can’t touch</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Array</span>(<span class="number">0</span>..&lt;pins.<span class="built_in">count</span>).forEach &#123;</span><br><span class="line">    <span class="keyword">let</span> pin = pins.element(boundBy: $<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> pin.isHittable &#123;</span><br><span class="line">        pin.tap()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When <code>po app.otherElements</code>, coordinates are outside screen</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Other, &#123;&#123;1624.0, 1624.0&#125;, &#123;30.0, 30.0&#125;&#125;, identifier: &apos;pin&apos;, label: &apos;Hello world&apos;</span><br></pre></td></tr></table></figure><h2 id="Interact-with-GMSMarker-works"><a href="#Interact-with-GMSMarker-works" class="headerlink" title="Interact with GMSMarker (works)"></a>Interact with GMSMarker (works)</h2><p>My <code>PinView</code> has <code>isHittable</code> being false, no matter how I use coordinate or enable it. It can’t be touched.</p><p>Go to Xcode -&gt; Open Developer Tool -&gt; Accessibility Inspector to inspect our app in iOS simulator</p><img width="1680" alt="inspector" src="https://user-images.githubusercontent.com/2284279/63772730-fe373480-c8d9-11e9-97b9-e089d468e6f9.png"><p>It turns out that if I do </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">po app.buttons</span><br></pre></td></tr></table></figure><p>It shows all the GMSMarker, but with <code>identifier</code> having class name <code>MyApp.MyStopMarker</code>, so just need to use <code>buttons</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSPredicate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(identifier: String)</span></span> -&gt; <span class="type">NSPredicate</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NSPredicate</span>(format: <span class="string">"identifier CONTAINS[c] '\(text)'"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pin = <span class="built_in">map</span>()</span><br><span class="line">    .buttons.matching(<span class="type">NSPredicate</span>.<span class="built_in">contains</span>(<span class="string">"MyStopMarker"</span>))</span><br><span class="line">    .element(boundBy: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">pin.tap()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make to make rounded background UIButton in iOS</title>
      <link href="/blog/Make-to-make-rounded-background-UIButton-in-iOS/"/>
      <url>/blog/Make-to-make-rounded-background-UIButton-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/373" target="_blank" rel="noopener">#373</a></strong></p><p><code>UIButton.contentEdgeInsets</code> does not play well with Auto Layout, we need to use <code>intrinsicContentSize</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InsetButton</span>: <span class="title">UIButton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(text: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: .zero)</span><br><span class="line"></span><br><span class="line">        titleLabel?.textColor = .white</span><br><span class="line">        setTitle(text, <span class="keyword">for</span>: .normal)</span><br><span class="line"></span><br><span class="line">        layer.cornerRadius = <span class="number">15</span></span><br><span class="line">        layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">        backgroundColor = .black</span><br><span class="line">        isUserInteractionEnabled = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> intrinsicContentSize: <span class="type">CGSize</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> size = <span class="keyword">super</span>.intrinsicContentSize</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: size.width + <span class="number">24</span>, height: size.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Links for Javascript</title>
      <link href="/blog/Links-for-Javascript/"/>
      <url>/blog/Links-for-Javascript/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/372" target="_blank" rel="noopener">#372</a></strong></p><ul><li><a href="https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/</a></li><li><a href="https://www.freecodecamp.org/news/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8/</a></li><li><a href="https://www.freecodecamp.org/news/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make scrolling UIScrollView with Auto Layout in iOS</title>
      <link href="/blog/How-to-make-scrolling-UIScrollView-with-Auto-Layout-in-iOS/"/>
      <url>/blog/How-to-make-scrolling-UIScrollView-with-Auto-Layout-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/371" target="_blank" rel="noopener">#371</a></strong></p><p>Scrolling <code>UIScrollView</code> is used in common scenarios like steps, onboarding.<br>From iOS 11, UIScrollView has <code>contentLayoutGuide</code> and <code>frameLayoutGuide</code></p><h2 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h2><p><a href="https://developer.apple.com/documentation/uikit/uiscrollview/2865870-contentlayoutguide" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uiscrollview/2865870-contentlayoutguide</a></p><blockquote><p>Use this layout guide when you want to create Auto Layout constraints related to the content area of a scroll view.</p></blockquote><p><a href="https://developer.apple.com/documentation/uikit/uiscrollview/2865772-framelayoutguide" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uiscrollview/2865772-framelayoutguide</a></p><blockquote><p>Use this layout guide when you want to create Auto Layout constraints that explicitly involve the frame rectangle of the scroll view itself, as opposed to its content rectangle.</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>I found out that using <code>contentLayoutGuide</code> and <code>frameLayoutGuide</code> does not work in iOS 11, when swiping to the next page, it breaks the constraints. iOS 12 works well, so we have to check iOS version</p><p>Let the <code>contentView</code> drives the <code>contentSize</code> of <code>scrollView</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PagerView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> scrollView = <span class="type">UIScrollView</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> pages: [<span class="type">UIView</span>] = []</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> contentView = <span class="type">UIView</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line"></span><br><span class="line">        setup()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        scrollView.isPagingEnabled = <span class="literal">true</span></span><br><span class="line">        scrollView.showsHorizontalScrollIndicator = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        addSubview(scrollView)</span><br><span class="line">        scrollView.addSubview(contentView)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">12.0</span>, *) &#123;</span><br><span class="line">            scrollView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">            contentView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                scrollView.frameLayoutGuide.pinEdges(view: <span class="keyword">self</span>)</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">            <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                scrollView.contentLayoutGuide.pinEdges(view: contentView),</span><br><span class="line">                [scrollView.contentLayoutGuide.heightAnchor.constraint(</span><br><span class="line">                    equalTo: scrollView.frameLayoutGuide.heightAnchor</span><br><span class="line">                )]</span><br><span class="line">            ])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                scrollView.pinEdges(view: <span class="keyword">self</span>),</span><br><span class="line">                scrollView.pinEdges(view: contentView)</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">            <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                contentView.heightAnchor.constraint(equalTo: heightAnchor)</span><br><span class="line">            ])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(pages: [UIView])</span></span> &#123;</span><br><span class="line">        clearExistingViews()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.pages = pages</span><br><span class="line">        setupConstraints()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupConstraints</span><span class="params">()</span></span> &#123;</span><br><span class="line">        pages.enumerated().forEach &#123; tuple <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> index = tuple.offset</span><br><span class="line">            <span class="keyword">let</span> page = tuple.element</span><br><span class="line"></span><br><span class="line">            contentView.addSubview(page)</span><br><span class="line"></span><br><span class="line">            <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                page.topAnchor.constraint(equalTo: scrollView.topAnchor),</span><br><span class="line">                page.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),</span><br><span class="line">                page.widthAnchor.constraint(equalTo: scrollView.widthAnchor)</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                    page.leftAnchor.constraint(equalTo: contentView.leftAnchor)</span><br><span class="line">                ])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                    page.leftAnchor.constraint(equalTo: pages[index - <span class="number">1</span>].rightAnchor)</span><br><span class="line">                ])</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> index == pages.<span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">                <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                    page.rightAnchor.constraint(equalTo: contentView.rightAnchor)</span><br><span class="line">                ])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">clearExistingViews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        pages.forEach &#123;</span><br><span class="line">            $<span class="number">0</span>.removeFromSuperview()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UILayoutGuide</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pinEdges</span><span class="params">(view: UIView, inset: UIEdgeInsets = UIEdgeInsets.zero)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: inset.<span class="keyword">left</span>),</span><br><span class="line">            trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: inset.<span class="keyword">right</span>),</span><br><span class="line">            topAnchor.constraint(equalTo: view.topAnchor, constant: inset.top),</span><br><span class="line">            bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: inset.bottom)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Product Hunt GraphQL API with Retrofit</title>
      <link href="/blog/How-to-use-Product-Hunt-GraphQL-API-with-Retrofit/"/>
      <url>/blog/How-to-use-Product-Hunt-GraphQL-API-with-Retrofit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/370" target="_blank" rel="noopener">#370</a></strong></p><p>Define response model</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.squareup.moshi.Json</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span></span>(</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"data"</span>) <span class="keyword">val</span> <span class="keyword">data</span>: ResponseData</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseData</span></span>(</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"posts"</span>) <span class="keyword">val</span> posts: Posts</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Posts</span></span>(</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"edges"</span>) <span class="keyword">val</span> edges: List&lt;Edge&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span>(</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"node"</span>) <span class="keyword">val</span> node: Item</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"id"</span>) <span class="keyword">val</span> id: String,</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"name"</span>) <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"url"</span>) <span class="keyword">val</span> url: String,</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"tagline"</span>) <span class="keyword">val</span> tagline: String,</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"featuredAt"</span>) <span class="keyword">val</span> featuredAt: String,</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"votesCount"</span>) <span class="keyword">val</span> votesCount: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"commentsCount"</span>) <span class="keyword">val</span> commentsCount: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"thumbnail"</span>) <span class="keyword">val</span> thumbnail: Thumbnail</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Thumbnail</span></span>(</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"url"</span>) <span class="keyword">val</span> ur: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Here is the query</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  posts &#123;</span><br><span class="line">    edges &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        id</span><br><span class="line">        name</span><br><span class="line">        url</span><br><span class="line">        tagline</span><br><span class="line">        featuredAt</span><br><span class="line">        votesCount</span><br><span class="line">        commentsCount</span><br><span class="line">        thumbnail &#123;</span><br><span class="line">          url</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here’s how request looks in Insomnia</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; POST /v2/api/graphql HTTP/1.1</span><br><span class="line">&gt; Host: api.producthunt.com</span><br><span class="line">&gt; User-Agent: insomnia/6.6.2</span><br><span class="line">&gt; Cookie: __cfduid=d9a588136cbb286b156d8e4a873d52a301566795296</span><br><span class="line">&gt; Accept: application/json</span><br><span class="line">&gt; Content-Type: application/json</span><br><span class="line">&gt; Authorization: Bearer 068665d215cccad9123449841463b1248da07123418915a192a1233dedfd23b2</span><br><span class="line">&gt; Content-Length: 241</span><br><span class="line"></span><br><span class="line">| &#123;&quot;query&quot;:&quot;&#123;\n  posts &#123;\n    edges &#123;\n      node &#123;\n        id\n        name\n        url\n        tagline\n        featuredAt\n        votesCount\n        commentsCount\n        thumbnail &#123;\n          url\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;&quot;&#125;</span><br></pre></td></tr></table></figure><p>To post as json, need to use object for Moshi to convert</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">GetTopBody</span></span>(</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"query"</span>) <span class="keyword">val</span> queryString: String</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Headers(</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"Content-Type: application/json"</span>,</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"Accept: application/json"</span>,</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"Authorization: Bearer 068665d215cccad9123449841463b1248da07123418915a192a1233dedfd23b2"</span>,</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"Host: api.producthunt.com"</span>,</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"User-Agent: insomnia/6.6.2"</span></span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@POST(<span class="meta-string">"./"</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTop</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@Body</span> body: <span class="type">GetTopBody</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: Response</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And consume it in ViewModel. Use multiline string interpolation. No need to set <code>contentLength</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span></span>(<span class="keyword">val</span> repo: Repo): ViewModel() &#123;</span><br><span class="line">    <span class="keyword">val</span> items = liveData &#123;</span><br><span class="line">        <span class="keyword">val</span> queryString = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    posts &#123;</span></span><br><span class="line"><span class="string">        edges &#123;</span></span><br><span class="line"><span class="string">            node &#123;</span></span><br><span class="line"><span class="string">                id</span></span><br><span class="line"><span class="string">                name</span></span><br><span class="line"><span class="string">                url</span></span><br><span class="line"><span class="string">                tagline</span></span><br><span class="line"><span class="string">                featuredAt</span></span><br><span class="line"><span class="string">                votesCount</span></span><br><span class="line"><span class="string">                commentsCount</span></span><br><span class="line"><span class="string">                thumbnail &#123;</span></span><br><span class="line"><span class="string">                    url</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">        """</span>.trimIndent()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> body = GetTopBody(queryString)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> response = repo.api().getTop(body)</span><br><span class="line">            <span class="keyword">val</span> items = response.<span class="keyword">data</span>.posts.edges.map &#123; it.node &#125;</span><br><span class="line">            emit(items.toCollection(ArrayList()))</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            emit(arrayListOf&lt;Item&gt;())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The response looks like</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"posts"</span>: &#123;</span><br><span class="line">      <span class="attr">"edges"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"node"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"158359"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Toast"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"https://www.producthunt.com/posts/toast-2?utm_campaign=producthunt-api&amp;utm_medium=api-v2&amp;utm_source=Application%3A+PH+API+Explorer+%28ID%3A+9162%29"</span>,</span><br><span class="line">            <span class="attr">"tagline"</span>: <span class="string">"Organise tabs into organised sessions"</span>,</span><br><span class="line">            <span class="attr">"featuredAt"</span>: <span class="string">"2019-08-25T07:00:00Z"</span>,</span><br><span class="line">            <span class="attr">"votesCount"</span>: <span class="number">318</span>,</span><br><span class="line">            <span class="attr">"commentsCount"</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="attr">"thumbnail"</span>: &#123;</span><br><span class="line">              <span class="attr">"url"</span>: <span class="string">"https://ph-files.imgix.net/a169654a-850d-4b1c-80ba-be289f973fb7?auto=format&amp;fit=crop"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"node"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"165621"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Tree"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"https://www.producthunt.com/posts/tree-2?utm_campaign=producthunt-api&amp;utm_medium=api-v2&amp;utm_source=Application%3A+PH+API+Explorer+%28ID%3A+9162%29"</span>,</span><br><span class="line">            <span class="attr">"tagline"</span>: <span class="string">"Write documents in tree-like organisation with Markdown"</span>,</span><br><span class="line">            <span class="attr">"featuredAt"</span>: <span class="string">"2019-08-25T09:10:53Z"</span>,</span><br><span class="line">            <span class="attr">"votesCount"</span>: <span class="number">227</span>,</span><br><span class="line">            <span class="attr">"commentsCount"</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="attr">"thumbnail"</span>: &#123;</span><br><span class="line">              <span class="attr">"url"</span>: <span class="string">"https://ph-files.imgix.net/68b1f007-e630-4c79-8a27-756ec364343f?auto=format&amp;fit=crop"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Instead of using an object, we can use <code>Map</code>. If using HashMap, I get </p><blockquote><p>Unable to create @Body converter for java.util.HashMap&lt;java.lang.String, java.lang.String&gt;</p></blockquote><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST(<span class="meta-string">"./"</span>)</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTop</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Body</span> body: <span class="type">Map</span>&lt;<span class="type">String</span>, String&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: Response</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> body = mapOf(<span class="string">"query"</span> to queryString)</span><br></pre></td></tr></table></figure><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>Use Network Profiler to inspect failure <code>View &gt; Tool Windows &gt; Profiler</code></p><img width="1415" alt="query" src="https://user-images.githubusercontent.com/2284279/63846057-4cf0d700-c98b-11e9-9ee6-c02ec4fb558b.png"><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li>Product Hunt API Docs <a href="https://api.producthunt.com/v2/docs" target="_blank" rel="noopener">https://api.producthunt.com/v2/docs</a></li><li>API Explorer <a href="https://ph-graph-api-explorer.herokuapp.com/" target="_blank" rel="noopener">https://ph-graph-api-explorer.herokuapp.com/</a></li><li>Posts <a href="http://api-v2-docs.producthunt.com.s3-website-us-east-1.amazonaws.com/object/post/" target="_blank" rel="noopener">http://api-v2-docs.producthunt.com.s3-website-us-east-1.amazonaws.com/object/post/</a></li><li><a href="https://stackoverflow.com/questions/21398598/how-to-post-raw-whole-json-in-the-body-of-a-retrofit-request" target="_blank" rel="noopener">https://stackoverflow.com/questions/21398598/how-to-post-raw-whole-json-in-the-body-of-a-retrofit-request</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to fix Auto Layout issues in iOS</title>
      <link href="/blog/How-to-fix-Auto-Layout-issues-in-iOS/"/>
      <url>/blog/How-to-fix-Auto-Layout-issues-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/369" target="_blank" rel="noopener">#369</a></strong></p><h2 id="UITemporaryLayoutHeight-and-UITemporaryLayoutWidth"><a href="#UITemporaryLayoutHeight-and-UITemporaryLayoutWidth" class="headerlink" title="UITemporaryLayoutHeight and UITemporaryLayoutWidth"></a>UITemporaryLayoutHeight and UITemporaryLayoutWidth</h2><ul><li>Demystify warnings with <a href="https://www.wtfautolayout.com/" target="_blank" rel="noopener">https://www.wtfautolayout.com/</a></li><li>Reduce priority</li><li>Use Auto Layout directly instead of using manual frame layout, specially for scrolling pager</li></ul><h2 id="NSAutoresizingMaskLayoutConstraint"><a href="#NSAutoresizingMaskLayoutConstraint" class="headerlink" title="NSAutoresizingMaskLayoutConstraint"></a>NSAutoresizingMaskLayoutConstraint</h2><ul><li>Check that a view ACTUALLY has <code>translatesAutoresizingMaskIntoConstraints</code> set to <code>false</code></li></ul><h2 id="UISV-spacing-UISV-distributing"><a href="#UISV-spacing-UISV-distributing" class="headerlink" title="UISV-spacing, UISV-distributing"></a>UISV-spacing, UISV-distributing</h2><ul><li>Check <code>UIStackView</code></li><li>Set <code>stackview.alignment = .center</code> if you see <code>UIStackView</code> trying to set same trailing or leading edges for its subviews</li><li>Reduce priority if there’s edge constraints break from subviews to <code>UIStackView</code></li></ul><h2 id="Intrinsic-size-between-UIImageView-and-UILabel"><a href="#Intrinsic-size-between-UIImageView-and-UILabel" class="headerlink" title="Intrinsic size between UIImageView and UILabel"></a>Intrinsic size between UIImageView and UILabel</h2><ul><li>When constraint to each other, can cause UILabel to disappear</li><li>Reduce compression resistance</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageView.setContentCompressionResistancePriority(<span class="type">UILayoutPriority</span>.defaultLow, <span class="keyword">for</span>: .vertical)</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://useyourloaf.com/blog/stack-view-constraint-conflicts-when-hiding-views/" target="_blank" rel="noopener">https://useyourloaf.com/blog/stack-view-constraint-conflicts-when-hiding-views/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to simplify anchor with NSLayoutConstraint in iOS</title>
      <link href="/blog/How-to-simplify-anchor-with-NSLayoutConstraint-in-iOS/"/>
      <url>/blog/How-to-simplify-anchor-with-NSLayoutConstraint-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/368" target="_blank" rel="noopener">#368</a></strong></p><p>See <a href="https://github.com/onmyway133/Omnia/blob/master/Sources/iOS/NSLayoutConstraint.swift" target="_blank" rel="noopener">https://github.com/onmyway133/Omnia/blob/master/Sources/iOS/NSLayoutConstraint.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSLayoutConstraint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Disable auto resizing mask and activate constraints</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameter constraints: constraints to activate</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(<span class="number">_</span> constraints: [NSLayoutConstraint])</span></span> &#123;</span><br><span class="line">        constraints.forEach &#123;</span><br><span class="line">            ($<span class="number">0</span>.firstItem <span class="keyword">as</span>? <span class="type">UIView</span>)?.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">            $<span class="number">0</span>.isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(<span class="number">_</span> constraintsArray: [[NSLayoutConstraint]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> constraints = constraintsArray.flatMap(&#123; $<span class="number">0</span> &#125;)</span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on(constraints)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">priority</span><span class="params">(<span class="number">_</span> value: Float)</span></span> -&gt; <span class="type">NSLayoutConstraint</span> &#123;</span><br><span class="line">        priority = <span class="type">UILayoutPriority</span>(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> <span class="title">where</span> <span class="title">Element</span> == <span class="title">NSLayoutConstraint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">priority</span><span class="params">(<span class="number">_</span> value: Float)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        forEach &#123;</span><br><span class="line">            $<span class="number">0</span>.priority = <span class="type">UILayoutPriority</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UILayoutGuide</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pinEdges</span><span class="params">(view: UIView, inset: UIEdgeInsets = UIEdgeInsets.zero)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: inset.<span class="keyword">left</span>),</span><br><span class="line">            trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: inset.<span class="keyword">right</span>),</span><br><span class="line">            topAnchor.constraint(equalTo: view.topAnchor, constant: inset.top),</span><br><span class="line">            bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: inset.bottom)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pinEdges</span><span class="params">(view: UIView, inset: UIEdgeInsets = UIEdgeInsets.zero)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: inset.<span class="keyword">left</span>),</span><br><span class="line">            trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: inset.<span class="keyword">right</span>),</span><br><span class="line">            topAnchor.constraint(equalTo: view.topAnchor, constant: inset.top),</span><br><span class="line">            bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: inset.bottom)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pinCenter</span><span class="params">(view: UIView, offset: CGPoint = .zero)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            centerXAnchor.constraint(equalTo: view.centerXAnchor, constant: offset.x),</span><br><span class="line">            centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: offset.y)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">padding</span><span class="params">(view: UIView, <span class="number">_</span> constant: CGFloat = <span class="number">0</span>)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: constant),</span><br><span class="line">            trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -constant)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">(<span class="number">_</span> constant: CGFloat)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            widthAnchor.constraint(equalToConstant: constant),</span><br><span class="line">            heightAnchor.constraint(equalToConstant: constant)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">(<span class="number">_</span> width: CGFloat, <span class="number">_</span> height: CGFloat)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            widthAnchor.constraint(equalToConstant: width),</span><br><span class="line">            heightAnchor.constraint(equalToConstant: height)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addSubviews</span><span class="params">(<span class="number">_</span> views: [UIView])</span></span> &#123;</span><br><span class="line">        views.forEach &#123;</span><br><span class="line">            addSubview($<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to get trending repos on GitHub using Retrofit</title>
      <link href="/blog/How-to-get-trending-repos-on-GitHub-using-Retrofit/"/>
      <url>/blog/How-to-get-trending-repos-on-GitHub-using-Retrofit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/367" target="_blank" rel="noopener">#367</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q=language:javascript,java,swift,kotlin&amp;q=created:&gt;2019-08-21</span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">"https://api.github.com/search/repositories"</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTrendingRepos</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@Query(<span class="meta-string">"sort"</span>)</span> sort: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@Query(<span class="meta-string">"order"</span>)</span> order: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@Query(<span class="meta-string">"q"</span>)</span> qs: <span class="type">List</span>&lt;<span class="type">String</span>&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: Response</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Repo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">api</span><span class="params">()</span></span>: Api &#123;</span><br><span class="line">        <span class="keyword">return</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(<span class="string">"https://api.github.com/"</span>)</span><br><span class="line">            .addConverterFactory(MoshiConverterFactory.create())</span><br><span class="line">            .build()</span><br><span class="line">            .create(Api::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span></span>(<span class="keyword">val</span> repo: Repo, <span class="keyword">val</span> dateProvider: DateProvider): ViewModel() &#123;</span><br><span class="line">    <span class="keyword">val</span> items = MutableLiveData&lt;ArrayList&lt;Item&gt;&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> order = <span class="string">"desc"</span></span><br><span class="line">            <span class="keyword">val</span> sort = <span class="string">"star"</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> formatter = SimpleDateFormat(<span class="string">"YYYY-MM-dd"</span>)</span><br><span class="line">            <span class="keyword">val</span> qs = listOf(</span><br><span class="line">                <span class="string">"language:javascript,java,swift,kotlin"</span>,</span><br><span class="line">                <span class="string">"q=created:&gt;<span class="subst">$&#123;formatter.format(dateProvider.yesterday)&#125;</span>"</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> response = repo.api().getTrendingRepos(sort=sort, order=order, qs=qs)</span><br><span class="line">            <span class="keyword">this</span>.items.value = response.items.toCollection(ArrayList())</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            <span class="keyword">this</span>.items.value = arrayListOf()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Retrofit in Android</title>
      <link href="/blog/How-to-use-Retrofit-in-Android/"/>
      <url>/blog/How-to-use-Retrofit-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/366" target="_blank" rel="noopener">#366</a></strong></p><p>Code uses Retrofit 2.6.0 which has Coroutine support</p><p><code>app/build.gradle</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha01"</span></span><br><span class="line"></span><br><span class="line">implementation <span class="string">"com.squareup.moshi:moshi:<span class="variable">$Version</span>.moshi"</span></span><br><span class="line"></span><br><span class="line">implementation <span class="string">"com.squareup.retrofit2:retrofit:<span class="variable">$Version</span>.retrofit"</span></span><br><span class="line">implementation <span class="string">"com.squareup.retrofit2:converter-moshi:<span class="variable">$Version</span>.retrofit"</span></span><br></pre></td></tr></table></figure><p><code>Api.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> retrofit2.http.GET</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">"api/articles"</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getArticles</span><span class="params">()</span></span>: List&lt;Article&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Repo.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> retrofit2.Retrofit</span><br><span class="line"><span class="keyword">import</span> retrofit2.converter.moshi.MoshiConverterFactory</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Repo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">()</span></span>: Api &#123;</span><br><span class="line">        <span class="keyword">return</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(<span class="string">"https://dev.to"</span>)</span><br><span class="line">            .addConverterFactory(MoshiConverterFactory.create())</span><br><span class="line">            .build()</span><br><span class="line">            .create(Api::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ViewModel.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.liveData</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.Dispatchers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span></span>(<span class="keyword">val</span> repo: Repo): ViewModel() &#123;</span><br><span class="line">    <span class="keyword">val</span> articles = liveData(Dispatchers.Main) &#123;</span><br><span class="line">        emit(repo.<span class="keyword">get</span>().getArticles().toCollection(ArrayList()))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Article.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.squareup.moshi.Json</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span></span>(</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"type_of"</span>) <span class="keyword">val</span> typeOf: String,</span><br><span class="line">    <span class="meta">@field:Json</span>(name=<span class="string">"title"</span>) <span class="keyword">val</span> title: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to handle link clicked in WKWebView in iOS</title>
      <link href="/blog/How-to-handle-link-clicked-in-WKWebView-in-iOS/"/>
      <url>/blog/How-to-handle-link-clicked-in-WKWebView-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/365" target="_blank" rel="noopener">#365</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> WebKit</span><br><span class="line"><span class="keyword">import</span> SafariServices</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewHandler</span>: <span class="title">NSObject</span>, <span class="title">WKNavigationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> show: ((<span class="type">UIViewController</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">    <span class="keyword">let</span> supportedSchemes = [<span class="string">"http"</span>, <span class="string">"https"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping <span class="params">(WKNavigationActionPolicy)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            decisionHandler(.allow)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            navigationAction.navigationType == .linkActivated,</span><br><span class="line">            <span class="keyword">let</span> url = navigationAction.request.url,</span><br><span class="line">            <span class="keyword">let</span> scheme = url.scheme,</span><br><span class="line">            supportedSchemes.<span class="built_in">contains</span>(scheme)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> controller = <span class="type">SFSafariViewController</span>(url: url)</span><br><span class="line">        show?(controller)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use AppFlowController in iOS</title>
      <link href="/blog/How-to-use-AppFlowController-in-iOS/"/>
      <url>/blog/How-to-use-AppFlowController-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/364" target="_blank" rel="noopener">#364</a></strong></p><p><code>AppFlowController.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> GoogleMaps</span><br><span class="line"><span class="keyword">import</span> Stripe</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppFlowController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configure</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">GMSServices</span>.provideAPIKey(<span class="type">Constant</span>.googleMapsApiKey)</span><br><span class="line">        <span class="type">STPPaymentConfiguration</span>.shared().publishableKey = <span class="type">Constant</span>.stripeKey</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">Deps</span>.onboardingHandler.hasOnboarded &#123;</span><br><span class="line">            startMain()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startOnboarding()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        window.makeKeyAndVisible()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startOnboarding</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> controller = <span class="type">OnboardingController</span>()</span><br><span class="line">        controller.delegate = <span class="keyword">self</span></span><br><span class="line">        window.rootViewController = controller</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startMain</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> controller = <span class="type">MainFlowController</span>()</span><br><span class="line">        window.rootViewController = controller</span><br><span class="line">        controller.start()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppFlowController</span>: <span class="title">OnboardingControllerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onboardingControllerDidFinish</span><span class="params">(<span class="number">_</span> controller: OnboardingController)</span></span> &#123;</span><br><span class="line">        <span class="type">Deps</span>.onboardingHandler.hasOnboarded = <span class="literal">true</span></span><br><span class="line">        startMain()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AppDelegate.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> appFlowController = <span class="type">AppFlowController</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">        appFlowController.configure()</span><br><span class="line">        appFlowController.start()</span><br><span class="line"></span><br><span class="line">        <span class="type">UIApplication</span>.shared.registerForRemoteNotifications()</span><br><span class="line"><span class="type">FirebaseApp</span>.configure()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use ViewModel and ViewModelsProviders in Android</title>
      <link href="/blog/How-to-use-ViewModel-and-ViewModelsProviders-in-Android/"/>
      <url>/blog/How-to-use-ViewModel-and-ViewModelsProviders-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/363" target="_blank" rel="noopener">#363</a></strong></p><h2 id="ViewModels-a-simple-example"><a href="#ViewModels-a-simple-example" class="headerlink" title="ViewModels a simple example"></a>ViewModels a simple example</h2><p><a href="https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e" target="_blank" rel="noopener">https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e</a></p><blockquote><p>Rotating a device is one of a few configuration changes that an app can go through during its lifetime, including keyboard availability and changing the device’s language. All of these configuration changes cause the Activity to be torn down and recreated</p></blockquote><blockquote><p>The ViewModel class is designed to hold and manage UI-related data in a life-cycle conscious way. This allows data to survive configuration changes such as screen rotations.</p></blockquote><blockquote><p>The ViewModel exists from when the you first request a ViewModel (usually in the onCreate the Activity) until the Activity is finished and destroyed. onCreate may be called several times during the life of an Activity, such as when the app is rotated, but the ViewModel survives throughout.</p></blockquote><p><img src="https://miro.medium.com/max/1044/1*3Kr2-5HE0TLZ4eqq8UQCkQ.png" alt></p><blockquote><p>Storing an Application context in a ViewModel is okay because an Application context is tied to the Application lifecycle. This is different from an Activity context, which is tied to the Activity lifecycle. In fact, if you need an Application context, you should extend AndroidViewModel which is simply a ViewModel that includes an Application reference.</p></blockquote><blockquote><p>The first time the ViewModelProviders.of method is called by MainActivity, it creates a new ViewModel instance. When this method is called again, which happens whenever onCreate is called, it will return the pre-existing ViewModel associated with the specific Court-Counter MainActivity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewModelProviders.of(&lt;THIS ARGUMENT&gt;).get(ScoreViewModel.class);</span><br></pre></td></tr></table></figure><blockquote><p>This allows you to have an app that opens a lot of different instances of the same Activity or Fragment, but with different ViewModel information</p></blockquote><h2 id="Dive-deep-into-Android’s-ViewModel-—-Android-Architecture-Components"><a href="#Dive-deep-into-Android’s-ViewModel-—-Android-Architecture-Components" class="headerlink" title="Dive deep into Android’s ViewModel — Android Architecture Components"></a>Dive deep into Android’s ViewModel — Android Architecture Components</h2><p><a href="https://android.jlelse.eu/dive-deep-into-androids-viewmodel-android-architecture-components-e0a7ded26f70" target="_blank" rel="noopener">https://android.jlelse.eu/dive-deep-into-androids-viewmodel-android-architecture-components-e0a7ded26f70</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Utilities methods for &#123;<span class="doctag">@link</span> ViewModelStore&#125; class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelProviders</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> ViewModelProvider&#125;, which retains ViewModels while a scope of given Activity</span></span><br><span class="line"><span class="comment">     * is alive. More detailed explanation is in &#123;<span class="doctag">@link</span> ViewModel&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * It uses &#123;<span class="doctag">@link</span> ViewModelProvider.AndroidViewModelFactory&#125; to instantiate new ViewModels.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity an activity, in whose scope ViewModels should be retained</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a ViewModelProvider instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewModelProvider <span class="title">of</span><span class="params">(@NonNull FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">        ViewModelProvider.AndroidViewModelFactory factory =</span><br><span class="line">                ViewModelProvider.AndroidViewModelFactory.getInstance(</span><br><span class="line">                        checkApplication(activity));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewModelProvider(ViewModelStores.of(activity), factory);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>It seems like ViewModelProviders.of is just a factory of ViewModelProvider, which depends upon ViewModelFactory and a ViewModelStore.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyViewModelFactory factory = <span class="keyword">new</span> MyViewModelFactory(data1, data2);</span><br><span class="line">ViewModelProviders.of(<span class="keyword">this</span>, factory).get(MyViewModel.class);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HolderFragment"><a href="#HolderFragment" class="headerlink" title="HolderFragment"></a>HolderFragment</h3><blockquote><p>HolderFragment is a regular Android Headless Fragment. It is the scope where all ViewModels inside the ViewModelStore will live.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HolderFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">ViewModelStoreOwner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HolderFragmentManager sHolderFragmentManager = <span class="keyword">new</span> HolderFragmentManager();</span><br><span class="line">    <span class="keyword">private</span> ViewModelStore mViewModelStore = <span class="keyword">new</span> ViewModelStore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HolderFragmentManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Activity, HolderFragment&gt; mNotCommittedActivityHolders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Fragment, HolderFragment&gt; mNotCommittedFragmentHolders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Who-owns-the-HolderFragment"><a href="#Who-owns-the-HolderFragment" class="headerlink" title="Who owns the HolderFragment?"></a>Who owns the HolderFragment?</h3><blockquote><p>The HolderFragment has an inner static class named HolderFragmentManager. The HolderFragmentManager creates and manages HolderFragment instances.<br>After creating the instances it associates them with an Activity or Fragment.</p></blockquote><blockquote><p>The whole process is done using the methods holderFragmentFor(Activity) and holderFragmentFor(Fragment).</p></blockquote><h3 id="How-does-HolderFragment-retains-the-state"><a href="#How-does-HolderFragment-retains-the-state" class="headerlink" title="How does HolderFragment retains the state ?"></a>How does HolderFragment retains the state ?</h3><blockquote><p>By setting retain instance to true and not providing a view, the HolderFragment becomes essentially a headless Fragment that is retained for as long as the Activity is not destroyed.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HolderFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   setRetainInstance(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void setRetainInstance (boolean retain)</code></p><blockquote><p>Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). This can only be used with fragments not in the back stack. If set, the fragment lifecycle will be slightly different when an activity is recreated:</p></blockquote><h3 id="Retrieving-ViewModel-instance"><a href="#Retrieving-ViewModel-instance" class="headerlink" title="Retrieving ViewModel instance"></a>Retrieving ViewModel instance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get(MyViewModel.class)</span><br></pre></td></tr></table></figure><blockquote><p>It tries to retrieve a MyViewModel instance from the store. If none is there, it uses the factory to create it and then stores it into HashMap&lt;String, ViewModel&gt;. In order to retrieve the already created ViewModel, it generates a key from the class qualified name.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to declare UIGestureRecognizer in iOS</title>
      <link href="/blog/How-to-declare-UIGestureRecognizer-in-iOS/"/>
      <url>/blog/How-to-declare-UIGestureRecognizer-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/362" target="_blank" rel="noopener">#362</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tapGR = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(handleTap(<span class="number">_</span>:)))</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handleTap</span><span class="params">(<span class="number">_</span> gr: UITapGestureRecognizer)</span></span> &#123;</span><br><span class="line">    didTouch?()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We need to use <code>lazy</code> instead of <code>let</code> for gesture to work</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> tapGR = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(handleTap(<span class="number">_</span>:)))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use function builder in Swift 5.1</title>
      <link href="/blog/How-to-use-function-builder-in-Swift-5.1/"/>
      <url>/blog/How-to-use-function-builder-in-Swift-5.1/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/361" target="_blank" rel="noopener">#361</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Task</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Build</span>: <span class="title">Task</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span>: <span class="title">Task</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">@_functionBuilder</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">TaskBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildBlock</span><span class="params">(<span class="number">_</span> tasks: Task...)</span></span> -&gt; [<span class="type">Task</span>] &#123;</span><br><span class="line">        tasks</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(@TaskBuilder builder: <span class="params">()</span></span></span> -&gt; [<span class="type">Task</span>]) &#123;</span><br><span class="line">    <span class="type">MyManager</span>.run(tasks: builder())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(@TaskBuilder builder: <span class="params">()</span></span></span> -&gt; <span class="type">Task</span>) &#123;</span><br><span class="line">    <span class="type">MyManager</span>.run(tasks: [builder()])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">run &#123;</span><br><span class="line">   <span class="type">Build</span>()</span><br><span class="line">   <span class="type">Test</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://www.swiftbysundell.com/posts/the-swift-51-features-that-power-swiftuis-api" target="_blank" rel="noopener">The Swift 5.1 features that power SwiftUI’s API</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to simplify get GRPC streaming in Swift</title>
      <link href="/blog/How-to-simplify-get-GRPC-streaming-in-Swift/"/>
      <url>/blog/How-to-simplify-get-GRPC-streaming-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/360" target="_blank" rel="noopener">#360</a></strong></p><p>Given a streaming service</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service Server &#123;</span><br><span class="line">  rpc GetUsers(GetUsersRequest) returns (stream GetUsersResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To get a response list in Swift, we need to do observe stream, which is a subclass of <code>ClientCallServerStreaming</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(roomId: String, completion: @escaping <span class="params">(Result&lt;[User], Error&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> request = withValue(<span class="type">Server_GetUsersRequest</span>()) &#123;</span><br><span class="line">        $<span class="number">0</span>.roomId = roomId</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">        <span class="keyword">var</span> users = [<span class="type">User</span>]()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> streaming = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">let</span> stream = <span class="keyword">try</span> <span class="keyword">self</span>.client.getUsers(request, completion: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                streaming = <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> streaming &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> response = <span class="keyword">try</span> stream.receive() &#123;</span><br><span class="line">                    users.append(response.user)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                completion(.success(users))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                completion(.failure(error))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This can get repetitive very fast. To avoid the duplication, we can make a generic function</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftGRPC</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStream</span>&lt;Streaming, Response&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    makeStream: @escaping <span class="params">(@escaping <span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>) <span class="keyword">throws</span> -&gt; <span class="type">Streaming</span>,</span><br><span class="line">    receive: @escaping (<span class="type">Streaming</span>) <span class="keyword">throws</span> -&gt; <span class="type">Response?</span>,</span><br><span class="line">    completion: @escaping (<span class="type">Result</span>&lt;[<span class="type">Response</span>], <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">        <span class="keyword">var</span> responses = [<span class="type">Response</span>]()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> streaming = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> stream = <span class="keyword">try</span> makeStream(&#123;</span><br><span class="line">                streaming = <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> streaming &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> response = <span class="keyword">try</span> receive(stream) &#123;</span><br><span class="line">                    responses.append(response)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                completion(.success(responses))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                completion(.failure(error))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since swift-grpc generates very concrete structs, we need to use generic. The difference is the <code>Streaming</code> class and <code>Response</code> struct</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(roomId: String, completion: @escaping <span class="params">(Result&lt;[User], Error&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> request = withValue(<span class="type">Server_GetUsersRequest</span>()) &#123;</span><br><span class="line">        $<span class="number">0</span>.roomId = roomId</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getStream(</span><br><span class="line">        makeStream: &#123; completion <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> <span class="keyword">self</span>.client.getUsers(request, completion: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                completion()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, receive: &#123; stream <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> stream.receive()</span><br><span class="line">        &#125;, completion: &#123; result <span class="keyword">in</span></span><br><span class="line">            completion(result.<span class="built_in">map</span> &#123; $<span class="number">0</span>.<span class="built_in">map</span> &#123; $<span class="number">0</span>.user &#125;&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to inject view model with Koin in Android</title>
      <link href="/blog/How-to-inject-view-model-with-Koin-in-Android/"/>
      <url>/blog/How-to-inject-view-model-with-Koin-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/359" target="_blank" rel="noopener">#359</a></strong></p><p><code>app/build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">"org.koin:koin-core:$Version.koin"</span></span><br><span class="line">implementation <span class="string">"org.koin:koin-androidx-scope:$Version.koin"</span></span><br><span class="line">implementation <span class="string">"org.koin:koin-androidx-viewmodel:$Version.koin"</span></span><br></pre></td></tr></table></figure><p><code>MyApplication.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Application</span><br><span class="line"><span class="keyword">import</span> org.koin.android.ext.koin.androidContext</span><br><span class="line"><span class="keyword">import</span> org.koin.android.ext.koin.androidLogger</span><br><span class="line"><span class="keyword">import</span> org.koin.androidx.viewmodel.dsl.viewModel</span><br><span class="line"><span class="keyword">import</span> org.koin.core.context.startKoin</span><br><span class="line"><span class="keyword">import</span> org.koin.dsl.module</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span>: <span class="type">Application</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> appModule = module &#123;</span><br><span class="line">        single &#123; MyRepo() &#125;</span><br><span class="line">        viewModel &#123; MyViewModel(<span class="keyword">get</span>()) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line"></span><br><span class="line">        startKoin &#123;</span><br><span class="line">            androidLogger()</span><br><span class="line">            androidContext(<span class="keyword">this</span><span class="symbol">@MyApplication</span>)</span><br><span class="line">            modules(appModule)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyFragment.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.koin.androidx.viewmodel.ext.android.viewModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> viewModel: MyViewModel <span class="keyword">by</span> viewModel()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use coroutine LiveData in Android</title>
      <link href="/blog/How-to-use-coroutine-LiveData-in-Android/"/>
      <url>/blog/How-to-use-coroutine-LiveData-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/358" target="_blank" rel="noopener">#358</a></strong></p><p><code>app/build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha01"</span></span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.liveData</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.Dispatchers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="keyword">val</span> repository: TodoRepository = TodoRepository()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> firstTodo = liveData(Dispatchers.IO) &#123;</span><br><span class="line">        <span class="keyword">val</span> retrivedTodo = repository.getTodo(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        emit(retrivedTodo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-coroutines-with-LiveData"><a href="#Use-coroutines-with-LiveData" class="headerlink" title="Use coroutines with LiveData"></a>Use coroutines with LiveData</h2><p><a href="https://developer.android.com/topic/libraries/architecture/coroutines" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/architecture/coroutines</a></p><blockquote><p>The liveData building block serves as a structured concurrency primitive between coroutines and LiveData. The code block starts executing when LiveData becomes active and is automatically canceled after a configurable timeout when the LiveData becomes inactive.</p></blockquote><h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><p><a href="https://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev/lifecycle/lifecycle-livedata-ktx/src/main/java/androidx/lifecycle/CoroutineLiveData.kt" target="_blank" rel="noopener">https://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev/lifecycle/lifecycle-livedata-ktx/src/main/java/androidx/lifecycle/CoroutineLiveData.kt</a><br><a href="https://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev/lifecycle/lifecycle-livedata-ktx/src/main/java/androidx/lifecycle/FlowLiveData.kt" target="_blank" rel="noopener">https://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev/lifecycle/lifecycle-livedata-ktx/src/main/java/androidx/lifecycle/FlowLiveData.kt</a></p><p><code>CoroutineLiveData.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UseExperimental(ExperimentalTypeInference::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">liveData</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    timeoutInMs: <span class="type">Long</span> = DEFAULT_TIMEOUT,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@BuilderInference</span> block: <span class="type">suspend</span> <span class="type">LiveDataScope</span>&lt;<span class="type">T</span>&gt;.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: LiveData&lt;T&gt; = CoroutineLiveData(context, timeoutInMs, block)</span><br></pre></td></tr></table></figure><blockquote><p>a LiveData that tries to load the <code>User</code> from local cache first and then tries from the server and also yields the updated value</p></blockquote><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> user = liveData &#123;</span><br><span class="line"> <span class="comment">// dispatch loading first</span></span><br><span class="line"> emit(LOADING(id))</span><br><span class="line"> <span class="comment">// check local storage</span></span><br><span class="line"> <span class="keyword">val</span> cached = cache.loadUser(id)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (cached != <span class="literal">null</span>) &#123;</span><br><span class="line">    emit(cached)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (cached == <span class="literal">null</span> || cached.isStale()) &#123;</span><br><span class="line">    <span class="keyword">val</span> fresh = api.fetch(id) <span class="comment">// errors are ignored for brevity</span></span><br><span class="line">     cache.save(fresh)</span><br><span class="line">     emit(fresh)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://proandroiddev.com/suspend-what-youre-doing-retrofit-has-now-coroutines-support-c65bd09ba067" target="_blank" rel="noopener">Suspend what you’re doing: Retrofit has now Coroutines support!</a></li><li><a href="https://medium.com/corouteam/exploring-kotlin-coroutines-and-lifecycle-architectural-components-integration-on-android-c63bb8a9156f" target="_blank" rel="noopener">Exploring new Coroutines and Lifecycle Architectural Components integration on Android</a></li><li><a href="https://android.jlelse.eu/coroutine-in-android-working-with-lifecycle-fc9c1a31e5f3" target="_blank" rel="noopener">Coroutine in Android: Working with Lifecycle</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to declare generic RecyclerView adapter in Android</title>
      <link href="/blog/How-to-declare-generic-RecyclerView-adapter-in-Android/"/>
      <url>/blog/How-to-declare-generic-RecyclerView-adapter-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/357" target="_blank" rel="noopener">#357</a></strong></p><p><code>generic/Adapter.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onmyway133.generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">var</span> items: ArrayList&lt;T&gt;): RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;() &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">configure</span><span class="params">(item: <span class="type">T</span>, holder: <span class="type">ViewHolder</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(items: <span class="type">ArrayList</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items</span><br><span class="line">        notifyDataSetChanged()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> = items.count()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: RecyclerView.ViewHolder &#123;</span><br><span class="line">        <span class="keyword">val</span> view = LayoutInflater</span><br><span class="line">            .from(parent.context)</span><br><span class="line">            .inflate(viewType, parent, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> ViewHolder(view)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        configure(items[position], holder <span class="keyword">as</span> ViewHolder)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>(view: View): RecyclerView.ViewHolder(view) &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>hero/HeroAdapter.kt</code></p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onmyway133.hero</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.hero_item_view.view.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span></span>(items: ArrayList&lt;Hero&gt;): com.onmyway133.generic.Adapter&lt;Hero&gt;(items) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">configure</span><span class="params">(item: <span class="type">Hero</span>, holder: <span class="type">ViewHolder</span>)</span></span> &#123;</span><br><span class="line">        holder.itemView.titleLabel.text = item.name</span><br><span class="line">        holder.itemView.descriptionLabel.text = item.description</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemViewType</span><span class="params">(position: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.hero_item_view</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>May run into <a href="https://stackoverflow.com/questions/49512629/default-interface-methods-are-only-supported-starting-with-android-n" target="_blank" rel="noopener">https://stackoverflow.com/questions/49512629/default-interface-methods-are-only-supported-starting-with-android-n</a></p><p><code>app/build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Payment Intent and Setup Intents with Stripe in iOS</title>
      <link href="/blog/How-to-use-Payment-Intent-and-Setup-Intents-with-Stripe-in-iOS/"/>
      <url>/blog/How-to-use-Payment-Intent-and-Setup-Intents-with-Stripe-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/356" target="_blank" rel="noopener">#356</a></strong></p><p><code>StripeHandler.swift</code></p><p>From Stripe 16.0.0 <a href="https://github.com/stripe/stripe-ios/blob/master/CHANGELOG.md#1600-2019-07-18" target="_blank" rel="noopener">https://github.com/stripe/stripe-ios/blob/master/CHANGELOG.md#1600-2019-07-18</a></p><blockquote><p>Migrates STPPaymentCardTextField.cardParams property type from STPCardParams to STPPaymentMethodCardParams</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StripeHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createPaymentMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        textField: STPPaymentCardTextField,</span></span></span><br><span class="line"><span class="function"><span class="params">        completion: @escaping <span class="params">(Result&lt;STPPaymentMethod, Error&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> paymentMethodParams = <span class="type">STPPaymentMethodParams</span>(</span><br><span class="line">            card: textField.cardParams,</span><br><span class="line">            billingDetails: <span class="literal">nil</span>,</span><br><span class="line">            metadata: <span class="literal">nil</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="type">STPAPIClient</span>.shared().createPaymentMethod(</span><br><span class="line">            with: paymentMethodParams,</span><br><span class="line">            completion: &#123; paymentMethod, error <span class="keyword">in</span></span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> paymentMethod = paymentMethod &#123;</span><br><span class="line">                        completion(.success(paymentMethod))</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        completion(.failure(error ?? <span class="type">AppError</span>.request))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="type">STPAPIClient</span>.shared().createPaymentMethod(</span><br><span class="line">            with: paymentMethodParams,</span><br><span class="line">            completion: &#123; paymentMethod, error <span class="keyword">in</span></span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> paymentMethod = paymentMethod &#123;</span><br><span class="line">                        completion(.success(paymentMethod))</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        completion(.failure(error ?? <span class="type">AppError</span>.request))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">confirmSetupIntents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        clientSecret: String,</span></span></span><br><span class="line"><span class="function"><span class="params">        paymentMethodId: String,</span></span></span><br><span class="line"><span class="function"><span class="params">        context: STPAuthenticationContext?,</span></span></span><br><span class="line"><span class="function"><span class="params">        completion: @escaping <span class="params">(Result&lt;STPSetupIntent, Error&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> context = context <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(.failure(<span class="type">AppError</span>.invalid))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> setupIntentParams = <span class="type">STPSetupIntentConfirmParams</span>(clientSecret: clientSecret)</span><br><span class="line">        setupIntentParams.paymentMethodID = paymentMethodId</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> paymentHandler = <span class="type">STPPaymentHandler</span>.shared()</span><br><span class="line">        paymentHandler.confirmSetupIntent(</span><br><span class="line">            setupIntentParams,</span><br><span class="line">            with: context,</span><br><span class="line">            completion: &#123; status, intent, error <span class="keyword">in</span></span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">case</span> .succeeded = status, <span class="keyword">let</span> intent = intent &#123;</span><br><span class="line">                        completion(.success(intent))</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        completion(.failure(error ?? <span class="type">AppError</span>.invalid))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">func</span> <span class="title">confirmPaymentIntents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        clientSecret: String,</span></span></span><br><span class="line"><span class="function"><span class="params">        context: STPAuthenticationContext?,</span></span></span><br><span class="line"><span class="function"><span class="params">        completion: @escaping <span class="params">(Result&lt;STPPaymentIntent, Error&gt;)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> context = context <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(.failure(<span class="type">AppError</span>.invalid))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">STPPaymentHandler</span>.shared().handleNextAction(</span><br><span class="line">            forPayment: clientSecret,</span><br><span class="line">            with: context,</span><br><span class="line">            returnURL: <span class="literal">nil</span>,</span><br><span class="line">            completion: &#123; status, paymentIntent, error <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">case</span> .succeeded = status, <span class="keyword">let</span> paymentIntent = paymentIntent &#123;</span><br><span class="line">                    completion(.success(paymentIntent))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    completion(.failure(error ?? <span class="type">AppError</span>.invalid))</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toCard</span><span class="params">(paymentMethod: STPPaymentMethod)</span></span> -&gt; <span class="type">MyCard?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> card = paymentMethod.card,</span><br><span class="line">            <span class="keyword">let</span> last4 = card.last4</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> withValue(<span class="type">MyCard</span>()) &#123;</span><br><span class="line">            $<span class="number">0</span>.expiryYear = <span class="type">UInt32</span>(card.expYear)</span><br><span class="line">            $<span class="number">0</span>.expiryMonth = <span class="type">UInt32</span>(card.expMonth)</span><br><span class="line">            $<span class="number">0</span>.lastFourDigits = last4</span><br><span class="line">            $<span class="number">0</span>.brand = <span class="type">STPCard</span>.string(from: card.brand)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Payment-intents"><a href="#Payment-intents" class="headerlink" title="Payment intents"></a>Payment intents</h2><p><a href="https://stripe.com/docs/payments/payment-intents/creating-payment-intents" target="_blank" rel="noopener">https://stripe.com/docs/payments/payment-intents/creating-payment-intents</a></p><blockquote><p>When using automatic confirmation, create the PaymentIntent at the beginning of the checkout process. When using manual confirmation, create the PaymentIntent after collecting payment information from the customer using Elements or our iOS and Android SDKs. For a detailed comparison on the automatic and manual confirmation flows, see accepting one-time payments.</p></blockquote><h4 id="Step-3-Authenticate-the-payment-if-necessary"><a href="#Step-3-Authenticate-the-payment-if-necessary" class="headerlink" title="Step 3: Authenticate the payment if necessary"></a>Step 3: Authenticate the payment if necessary</h4><blockquote><p>Pass the confirmed Payment Intent client secret from the previous step to STPPaymentHandler handleNextActionForPayment. If the customer must perform 3D Secure authentication to complete the payment, STPPaymentHandler presents view controllers using the STPAuthenticationContext passed in and walks them through that process. See Supporting 3D Secure Authentication on iOS to learn more.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyAPIClient</span>.createAndConfirmPaymentIntent(paymentMethodId: paymentMethodId) &#123; result <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">case</span> .success(<span class="keyword">let</span> paymentIntentClientSecret) = result <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Handle error</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">STPPaymentHandler</span>.shared().handleNextAction(forPayment: paymentIntentClientSecret, with: <span class="keyword">self</span>, returnURL: <span class="literal">nil</span>) &#123; (status, paymentIntent, error) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> .succeeded:</span><br><span class="line">        <span class="comment">// ...Continued in Step 4</span></span><br><span class="line">      <span class="keyword">case</span> .canceled:</span><br><span class="line">        <span class="comment">// Handle cancel</span></span><br><span class="line">      <span class="keyword">case</span> .failed:</span><br><span class="line">        <span class="comment">// Handle error</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Setup-intents"><a href="#Setup-intents" class="headerlink" title="Setup intents"></a>Setup intents</h2><p>There is Setup intents <a href="https://stripe.com/docs/payments/cards/reusing-cards#saving-cards-without-payment" target="_blank" rel="noopener">https://stripe.com/docs/payments/cards/reusing-cards#saving-cards-without-payment</a> for saving cards</p><blockquote><p>Use the Setup Intents API to authenticate a customer’s card without making an initial payment. This flow works best for businesses that want to onboard customers without charging them right away:</p></blockquote><h4 id="Step-4-Submit-the-card-details-to-Stripe-from-the-client"><a href="#Step-4-Submit-the-card-details-to-Stripe-from-the-client" class="headerlink" title="Step 4: Submit the card details to Stripe from the client"></a>Step 4: Submit the card details to Stripe from the client</h4><blockquote><p>Pass the STPSetupIntentParams object to the confirmSetupIntent method on a STPPaymentHandler sharedManager. If the customer must perform additional steps to complete the payment, such as authentication, STPPaymentHandler presents view controllers using the STPAuthenticationContext passed in and walks them through that process. See Supporting 3D Secure Authentication on iOS to learn more.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setupIntentParams = <span class="type">STPSetupIntentParams</span>(clientSecret: clientSecret)</span><br><span class="line">setupIntentParams.paymentMethodId = paymentMethodId</span><br><span class="line"><span class="keyword">let</span> paymentManager = <span class="type">STPPaymentHandler</span>.shared()</span><br><span class="line">paymentManager.confirmSetupIntent(setupIntentParams, authenticationContext: <span class="keyword">self</span>, completion &#123; (status, setupIntent, error) <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> .succeeded:</span><br><span class="line">      <span class="comment">// Setup succeeded</span></span><br><span class="line">    <span class="keyword">case</span> .canceled:</span><br><span class="line">      <span class="comment">// Handle cancel</span></span><br><span class="line">    <span class="keyword">case</span> .failed:</span><br><span class="line">      <span class="comment">// Handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Authentication-context"><a href="#Authentication-context" class="headerlink" title="Authentication context"></a>Authentication context</h2><p>In <code>STPPaymentHandler.m</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)_canPresentWithAuthenticationContext:(<span class="keyword">id</span>&lt;STPAuthenticationContext&gt;)authenticationContext &#123;</span><br><span class="line">    <span class="built_in">UIViewController</span> *presentingViewController = authenticationContext.authenticationPresentingViewController;</span><br><span class="line">    <span class="comment">// Is presentingViewController non-nil and in the window?</span></span><br><span class="line">    <span class="keyword">if</span> (presentingViewController == <span class="literal">nil</span> || presentingViewController.view.window == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Is it the Apple Pay VC?</span></span><br><span class="line">    <span class="keyword">if</span> ([presentingViewController isKindOfClass:[PKPaymentAuthorizationViewController <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="comment">// We can't present over Apple Pay, user must implement prepareAuthenticationContextForPresentation: to dismiss it.</span></span><br><span class="line">        <span class="keyword">return</span> [authenticationContext respondsToSelector:<span class="keyword">@selector</span>(prepareAuthenticationContextForPresentation:)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Is it already presenting something?</span></span><br><span class="line">    <span class="keyword">if</span> (presentingViewController.presentedViewController == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Hopefully the user implemented prepareAuthenticationContextForPresentation: to dismiss it.</span></span><br><span class="line">        <span class="keyword">return</span> [authenticationContext respondsToSelector:<span class="keyword">@selector</span>(prepareAuthenticationContextForPresentation:)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-stripe-SDK"><a href="#Use-stripe-SDK" class="headerlink" title="Use stripe SDK"></a>Use stripe SDK</h2><p><code>STPSetupIntentConfirmParams.useStripeSDK</code></p><blockquote><p> A boolean number to indicate whether you intend to use the Stripe SDK’s functionality to handle any SetupIntent next actions.<br>If set to false, STPSetupIntent.nextAction will only ever contain a redirect url that can be opened in a webview or mobile browser.<br>When set to true, the nextAction may contain information that the Stripe SDK can use to perform native authentication within your app.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setupIntentParams = <span class="type">STPSetupIntentConfirmParams</span>(clientSecret: clientSecret)</span><br><span class="line">setupIntentParams.useStripeSDK = <span class="type">NSNumber</span>(booleanLiteral: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://stripe.com/docs/payments/payment-intents/ios#create-and-confirm-payment-intent-manual" target="_blank" rel="noopener">Using Payment Intents on iOS</a></li><li><a href="https://stripe.com/docs/payments/payment-intents" target="_blank" rel="noopener">One-time Payments with the Payment Intents API</a></li><li><a href="https://stripe.com/docs/mobile/ios/authentication#return-url" target="_blank" rel="noopener">Supporting 3D Secure Authentication on iOS</a></li><li><a href="https://stripe.dev/stripe-ios/docs/Classes/STPSetupIntentConfirmParams.html" target="_blank" rel="noopener">STPSetupIntentConfirmParams</a></li><li><a href="https://stripe.com/docs/testing" target="_blank" rel="noopener">Testing</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to format currency in Swift</title>
      <link href="/blog/How-to-format-currency-in-Swift/"/>
      <url>/blog/How-to-format-currency-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/355" target="_blank" rel="noopener">#355</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrencyFormatter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">format</span><span class="params">(amount: UInt64, decimalCount: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter = <span class="type">NumberFormatter</span>()</span><br><span class="line">        formatter.minimumFractionDigits = <span class="number">0</span></span><br><span class="line">        formatter.maximumFractionDigits = decimalCount</span><br><span class="line">        formatter.numberStyle = .decimal</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> value = <span class="type">Double</span>(amount) / pow(<span class="type">Double</span>(<span class="number">10</span>), <span class="type">Double</span>(decimalCount))</span><br><span class="line">        <span class="keyword">let</span> fallback = <span class="type">String</span>(format: <span class="string">"%.0f"</span>, value)</span><br><span class="line">        <span class="keyword">return</span> formatter.string(from: <span class="type">NSNumber</span>(value: value)) ?? fallback</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrencyFormatterTests</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testFormat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter = <span class="type">CurrencyFormatter</span>()</span><br><span class="line">        <span class="comment">// 120 USD</span></span><br><span class="line">        <span class="type">XCTAssertEqual</span>(formatter.format(amount: <span class="number">120</span>, decimalCount: <span class="number">0</span>), <span class="string">"120"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 12000 cents</span></span><br><span class="line">        <span class="type">XCTAssertEqual</span>(formatter.format(amount: <span class="number">12000</span>, decimalCount: <span class="number">2</span>), <span class="string">"120"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 12520 cents</span></span><br><span class="line">        <span class="type">XCTAssertEqual</span>(formatter.format(amount: <span class="number">12520</span>, decimalCount: <span class="number">2</span>), <span class="string">"125.2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to simplify struct mutating in Swift</title>
      <link href="/blog/How-to-simplify-struct-mutating-in-Swift/"/>
      <url>/blog/How-to-simplify-struct-mutating-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/354" target="_blank" rel="noopener">#354</a></strong></p><p>In <a href="https://github.com/onmyway133/Construction/blob/master/Sources/Construction.swift#L37" target="_blank" rel="noopener">Construction</a>, we have a <code>build</code> method to apply closure to <code>inout</code> struct.</p><p>We can explicitly define that with <code>withValue</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">withValue</span>&lt;T&gt;<span class="params">(<span class="number">_</span> value: T, closure: <span class="params">(<span class="keyword">inout</span> T)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mutableValue = value</span><br><span class="line">    closure(&amp;mutableValue)</span><br><span class="line">    <span class="keyword">return</span> mutableValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we can modify Protobuf structs easily</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user.book = withValue(<span class="type">Book</span>()) &#123;</span><br><span class="line">    $<span class="number">0</span>.price = <span class="number">300</span></span><br><span class="line">    $<span class="number">0</span>.author = withValue(<span class="type">Author</span>()) &#123;</span><br><span class="line">        $<span class="number">0</span>.name = <span class="string">"Thor"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to not resign first responder for UITextField in iOS</title>
      <link href="/blog/How-to-not-resign-first-responder-for-UITextField-in-iOS/"/>
      <url>/blog/How-to-not-resign-first-responder-for-UITextField-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/353" target="_blank" rel="noopener">#353</a></strong></p><p>When using <code>STPPaymentCardTextField</code> from <a href="https://github.com/stripe/stripe-ios" target="_blank" rel="noopener">stripe-ios</a>, the default behavior is when we touch outside to dismiss keyboard, it checks and focus on number text field is it is invalid</p><p><code>STPPaymentCardTextField.m</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (STPFormTextField *)currentFirstResponderField &#123;</span><br><span class="line">    <span class="keyword">for</span> (STPFormTextField *textField <span class="keyword">in</span> [<span class="keyword">self</span> allFields]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([textField isFirstResponder]) &#123;</span><br><span class="line">            <span class="keyword">return</span> textField;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)canResignFirstResponder &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.currentFirstResponderField canResignFirstResponder];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)resignFirstResponder &#123;</span><br><span class="line">    [<span class="keyword">super</span> resignFirstResponder];</span><br><span class="line">    <span class="built_in">BOOL</span> success = [<span class="keyword">self</span>.currentFirstResponderField resignFirstResponder];</span><br><span class="line">    [<span class="keyword">self</span> layoutViewsToFocusField:<span class="literal">nil</span></span><br><span class="line">                         animated:<span class="literal">YES</span></span><br><span class="line">                       completion:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="keyword">self</span> updateImageForFieldType:STPCardFieldTypeNumber];</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then it calls <code>[self.numberField becomeFirstResponder];</code> is validation on number fails</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^STPLayoutAnimationCompletionBlock)(<span class="built_in">BOOL</span> completed);</span><br><span class="line">- (<span class="keyword">void</span>)layoutViewsToFocusField:(<span class="built_in">NSNumber</span> *)focusedField</span><br><span class="line">                       animated:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">                     completion:(STPLayoutAnimationCompletionBlock)completion &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSNumber</span> *fieldtoFocus = focusedField;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fieldtoFocus == <span class="literal">nil</span></span><br><span class="line">        &amp;&amp; ![<span class="keyword">self</span>.focusedTextFieldForLayout isEqualToNumber:@(STPCardFieldTypeNumber)]</span><br><span class="line">        &amp;&amp; ([<span class="keyword">self</span>.viewModel validationStateForField:STPCardFieldTypeNumber] != STPCardValidationStateValid)) &#123;</span><br><span class="line">        fieldtoFocus = @(STPCardFieldTypeNumber);</span><br><span class="line">        [<span class="keyword">self</span>.numberField becomeFirstResponder];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isUserInteractionEnabled"><a href="#isUserInteractionEnabled" class="headerlink" title="isUserInteractionEnabled"></a>isUserInteractionEnabled</h3><p>Be aware to use <code>isUserInteractionEnabled</code> on <code>STPPaymentCardTextField</code> as that can resign first responder when set to <code>true</code> and become first responder when set to <code>false</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use React JSX with Babel in Electron</title>
      <link href="/blog/How-to-use-React-JSX-with-Babel-in-Electron/"/>
      <url>/blog/How-to-use-React-JSX-with-Babel-in-Electron/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/352" target="_blank" rel="noopener">#352</a></strong></p><p>For a normal electron app created with <code>npm init</code>, we can use all features of ES6, but not the JSX syntax for React. We can use just Babel to transpile JSX, as used in <a href="https://github.com/onmyway133/IconGenerator/blob/master/.babelrc" target="_blank" rel="noopener">IconGenerator</a></p><p><code>.babelrc</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"transform-react-jsx-source"</span>    </span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"react"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And in <code>package.json</code>, call babel to transpile <code>src</code> to <code>dist</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"main"</span>: <span class="string">"dist/main.js"</span>,</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"npm run babel &amp;&amp; electron ."</span>,</span><br><span class="line">    <span class="string">"babel"</span>: <span class="string">"babel ./src --out-dir ./dist --copy-files"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Remember to use <code>dist/main.js</code> as our starting point, and in <a href="https://github.com/onmyway133/IconGenerator/blob/master/index.html" target="_blank" rel="noopener">index.html</a>, specify <code>./dist/renderer.js</code></p><p>```html</p><body>    <div id="root">    <script type="text/javascript">      require('./dist/renderer.js')    </script></div></body>``]]></content>
      
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to define version property in gradle</title>
      <link href="/blog/How-to-define-version-property-in-gradle/"/>
      <url>/blog/How-to-define-version-property-in-gradle/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/351" target="_blank" rel="noopener">#351</a></strong></p><p>From <a href="https://developer.android.com/studio/build/gradle-tips" target="_blank" rel="noopener">Gradle tips and recipes</a>, Configure project-wide properties</p><blockquote><p>For projects that include multiple modules, it might be useful to define properties at the project level and share them across all modules. You can do this by adding extra properties to the ext block in the top-level build.gradle file.</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    navigationVersion = <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootProject.ext.navigationVersion</span><br></pre></td></tr></table></figure><p>Versions are used mostly in <code>dependencies</code> block so having them defined in global <code>ext</code> is not quite right.  We can use <code>def</code> to define variables</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="keyword">def</span> navigationVersion = <span class="string">"2.0.0"</span></span><br><span class="line">    implementation <span class="string">"androidx.navigation:navigation-fragment-ktx:$navigationVersion"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For better namespacing, we can use a class</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Version</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">def</span> navigation = <span class="string">"2.0.0"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">def</span> drawerLayout = <span class="string">"1.0.0"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">def</span> koin = <span class="string">"2.0.1"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">def</span> moshi = <span class="string">"1.8.0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">"androidx.navigation:navigation-fragment-ktx:$Version.navigation"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Firebase PhoneAuth in iOS</title>
      <link href="/blog/How-to-use-Firebase-PhoneAuth-in-iOS/"/>
      <url>/blog/How-to-use-Firebase-PhoneAuth-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/350" target="_blank" rel="noopener">#350</a></strong></p><p>Read <a href="https://firebase.google.com/docs/auth/ios/phone-auth" target="_blank" rel="noopener">Authenticate with Firebase on iOS using a Phone Number</a></p><h3 id="Disable-swizzling"><a href="#Disable-swizzling" class="headerlink" title="Disable swizzling"></a>Disable swizzling</h3><p><code>Info.plist</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>FirebaseAppDelegateProxyEnabled<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>NO<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Enable-remote-notification"><a href="#Enable-remote-notification" class="headerlink" title="Enable remote notification"></a>Enable remote notification</h3><p>Enable Capability -&gt; Background mode -&gt; Remote notification</p><p><code>AppDelegate.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Firebase</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> FirebaseAuth</span><br><span class="line"></span><br><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> appFlowController = <span class="type">AppFlowController</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UIApplication</span>.shared.registerForRemoteNotifications()</span><br><span class="line"><span class="type">FirebaseApp</span>.configure()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - Remote Notification</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)</span></span> &#123;</span><br><span class="line">        <span class="type">Auth</span>.auth().setAPNSToken(deviceToken, type: .unknown)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">        didReceiveRemoteNotification userInfo: [AnyHashable: <span class="keyword">Any</span>],</span></span></span><br><span class="line"><span class="function"><span class="params">        fetchCompletionHandler completionHandler: @escaping <span class="params">(UIBackgroundFetchResult)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        completionHandler(.noData)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> app: UIApplication, <span class="keyword">open</span> url: URL, options: [UIApplication.OpenURLOptionsKey: <span class="keyword">Any</span>] = [:])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">Auth</span>.auth().canHandle(url) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Captcha"><a href="#Captcha" class="headerlink" title="Captcha"></a>Captcha</h2><p>To disable captcha during testing</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Auth</span>.auth().settings?.isAppVerificationDisabledForTesting = <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Navigation component with DrawerLayout in Android</title>
      <link href="/blog/How-to-use-Navigation-component-with-DrawerLayout-in-Android/"/>
      <url>/blog/How-to-use-Navigation-component-with-DrawerLayout-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/349" target="_blank" rel="noopener">#349</a></strong></p><p><img src="https://user-images.githubusercontent.com/2284279/62612124-24833900-b907-11e9-9a7d-57fbcffa72aa.png" alt="Screenshot_1565169686"></p><p><code>build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath <span class="string">'android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0-alpha05'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'androidx.navigation.safeargs'</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="keyword">def</span> navigationVersion = <span class="string">"2.0.0"</span></span><br><span class="line">    <span class="keyword">def</span> drawerLayoutVersion = <span class="string">"1.0.0"</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">"androidx.drawerlayout:drawerlayout:$drawerLayoutVersion"</span></span><br><span class="line">    implementation <span class="string">"androidx.navigation:navigation-fragment-ktx:$navigationVersion"</span></span><br><span class="line">    implementation <span class="string">"androidx.navigation:navigation-ui-ktx:$navigationVersion"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main_activity.xml</code></p><ul><li>Use <code>CoordinatorLayout</code> and <code>ToolBar</code></li><li>Define <code>layout_gravity</code> for <code>NavigationView</code></li></ul><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;androidx.drawerlayout.widget.DrawerLayout</span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    android:id=<span class="string">"@+id/drawerLayout"</span></span><br><span class="line">    tools:context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line">        &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"wrap_content"</span>&gt;</span><br><span class="line">            &lt;androidx.appcompat.widget.Toolbar</span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">                android:id=<span class="string">"@+id/toolbar"</span>/&gt;</span><br><span class="line">        &lt;/com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class="line">        &lt;fragment</span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            android:id=<span class="string">"@+id/hostFragment"</span></span><br><span class="line">            android:name=<span class="string">"androidx.navigation.fragment.NavHostFragment"</span></span><br><span class="line">            app:defaultNavHost=<span class="string">"true"</span></span><br><span class="line">            app:navGraph=<span class="string">"@navigation/navigation_graph"</span>/&gt;</span><br><span class="line">    &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br><span class="line">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        android:id=<span class="string">"@+id/navigationView"</span></span><br><span class="line">        android:fitsSystemWindows=<span class="string">"true"</span></span><br><span class="line">        android:layout_gravity=<span class="string">"start"</span></span><br><span class="line">        app:menu=<span class="string">"@menu/drawer_menu"</span>/&gt;</span><br><span class="line">&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure><p><code>navigation/navigation_graph.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigationGraph"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">"@id/aboutFragment"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/aboutFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.onmyway133.whatsupintech.AboutFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/menu_about"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">"@layout/about_fragment"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/feedFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.onmyway133.whatsupintech.FeedFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/menu_git_hub"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">"@layout/feed_fragment"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/webFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.onmyway133.whatsupintech.WebFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">"@layout/web_fragment"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>menu/drawer_menu.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/about"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/menu_about"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/hackerNews"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/menu_hacker_news"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/reddit"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/menu_reddit"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/dev"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/menu_dev"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/gitHub"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"@string/menu_git_hub"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>MainActivity.kotlin</code></p><ul><li>Use <code>AppBarConfiguration</code> to define multiple top level destinations</li><li>Convert Toolbar to ActionBar</li></ul><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onmyway133.whatsupintech</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.GravityCompat</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.findNavController</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.ui.AppBarConfiguration</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.ui.navigateUp</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.ui.setupActionBarWithNavController</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.ui.setupWithNavController</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.main_activity.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> appBarConfig: AppBarConfiguration</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.main_activity)</span><br><span class="line">        setupNavigationController()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setupNavigationController</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> navigationController = findNavController(R.id.hostFragment)</span><br><span class="line"></span><br><span class="line">        setSupportActionBar(toolbar)</span><br><span class="line"></span><br><span class="line">        appBarConfig = AppBarConfiguration(setOf(R.id.aboutFragment, R.id.feedFragment), drawerLayout)</span><br><span class="line">        setupActionBarWithNavController(navigationController, appBarConfig)</span><br><span class="line">        navigationView.setupWithNavController(navigationController)</span><br><span class="line">        navigationView.setNavigationItemSelectedListener &#123; menuItem -&gt;</span><br><span class="line">            drawerLayout.closeDrawers()</span><br><span class="line">            menuItem.isChecked = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">when</span> (menuItem.itemId) &#123;</span><br><span class="line">                R.id.about -&gt; navigationController.navigate(R.id.aboutFragment)</span><br><span class="line">                R.id.gitHub, R.id.reddit, R.id.hackerNews, R.id.dev -&gt; navigationController.navigate(R.id.feedFragment)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> navigationController = findNavController(R.id.hostFragment)</span><br><span class="line">        <span class="keyword">return</span> navigationController.navigateUp(appBarConfig) || <span class="keyword">super</span>.onSupportNavigateUp()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (drawerLayout.isDrawerOpen(GravityCompat.START)) &#123;</span><br><span class="line">            drawerLayout.closeDrawer(GravityCompat.START)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onBackPressed()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Update-UI-components-with-NavigationUI"><a href="#Update-UI-components-with-NavigationUI" class="headerlink" title="Update UI components with NavigationUI"></a><a href="https://developer.android.com/guide/navigation/navigation-ui" target="_blank" rel="noopener">Update UI components with NavigationUI</a></h2><h3 id="Tie-destinations-to-menu-items"><a href="#Tie-destinations-to-menu-items" class="headerlink" title="Tie destinations to menu items"></a>Tie destinations to menu items</h3><blockquote><p>NavigationUI also provides helpers for tying destinations to menu-driven UI components. NavigationUI contains a helper method, onNavDestinationSelected(), which takes a MenuItem along with the NavController that hosts the associated destination. If the id of the MenuItem matches the id of the destination, the NavController can then navigate to that destination.</p></blockquote><h3 id="Add-a-navigation-drawer"><a href="#Add-a-navigation-drawer" class="headerlink" title="Add a navigation drawer"></a>Add a navigation drawer</h3><blockquote><p>The drawer icon is displayed on all top-level destinations that use a DrawerLayout. Top-level destinations are the root-level destinations of your app. They do not display an Up button in the app bar.</p></blockquote><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://mvnrepository.com/artifact/android.arch.navigation/navigation-safe-args-gradle-plugin/1.0.0-alpha01" target="_blank" rel="noopener">Android Navigation TypeSafe Arguments Gradle Plugin</a></li><li><a href="https://developer.android.com/guide/navigation/navigation-getting-started" target="_blank" rel="noopener">Get started with the Navigation component</a></li><li><a href="https://developer.android.com/guide/navigation/navigation-conditional" target="_blank" rel="noopener">Conditional navigation</a></li><li><a href="https://github.com/umangburman/Navigation-Drawer-With-Navigation-Component" target="_blank" rel="noopener">Navigation Drawer with New JetPacks Navigation Component</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Links for Android</title>
      <link href="/blog/Links-for-Android/"/>
      <url>/blog/Links-for-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/348" target="_blank" rel="noopener">#348</a></strong></p><ul><li>Google Maven Repository <a href="https://dl.google.com/dl/android/maven2/index.html" target="_blank" rel="noopener">https://dl.google.com/dl/android/maven2/index.html</a></li></ul><h3 id="Posts"><a href="#Posts" class="headerlink" title="Posts"></a>Posts</h3><ul><li><a href="https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e" target="_blank" rel="noopener">https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e</a></li><li><a href="https://proandroiddev.com/5-common-mistakes-when-using-architecture-components-403e9899f4cb" target="_blank" rel="noopener">https://proandroiddev.com/5-common-mistakes-when-using-architecture-components-403e9899f4cb</a></li><li><a href="https://tech.instacart.com/introducing-coil-kotlin-first-image-loading-on-android-f0fdc7a2a99e" target="_blank" rel="noopener">https://tech.instacart.com/introducing-coil-kotlin-first-image-loading-on-android-f0fdc7a2a99e</a></li></ul><h3 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h3><ul><li>Index <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/index.html" target="_blank" rel="noopener">https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/index.html</a></li><li><a href="https://proandroiddev.com/suspend-what-youre-doing-retrofit-has-now-coroutines-support-c65bd09ba067" target="_blank" rel="noopener">https://proandroiddev.com/suspend-what-youre-doing-retrofit-has-now-coroutines-support-c65bd09ba067</a></li><li><a href="https://blog.mindorks.com/mastering-kotlin-coroutines-in-android-step-by-step-guide" target="_blank" rel="noopener">https://blog.mindorks.com/mastering-kotlin-coroutines-in-android-step-by-step-guide</a></li><li><a href="https://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/" target="_blank" rel="noopener">https://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/</a></li><li><a href="https://developer.android.com/topic/libraries/architecture/coroutines" target="_blank" rel="noopener">Use Kotlin coroutines with Architecture components</a></li><li><a href="https://proandroiddev.com/async-operations-with-kotlin-coroutines-part-1-c51cc581ad33" target="_blank" rel="noopener">https://proandroiddev.com/async-operations-with-kotlin-coroutines-part-1-c51cc581ad33</a></li><li><a href="https://medium.com/@elizarov/coroutine-context-and-scope-c8b255d59055" target="_blank" rel="noopener">https://medium.com/@elizarov/coroutine-context-and-scope-c8b255d59055</a></li><li><a href="https://medium.com/@elizarov/structured-concurrency-722d765aa952" target="_blank" rel="noopener">https://medium.com/@elizarov/structured-concurrency-722d765aa952</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make digit passcode input in Swift</title>
      <link href="/blog/How-to-make-digit-passcode-input-in-Swift/"/>
      <url>/blog/How-to-make-digit-passcode-input-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/347" target="_blank" rel="noopener">#347</a></strong></p><p>Add a hidden <code>UITextField</code> to view hierarchy, and add <code>UITapGestureRecognizer</code> to activate that textField.</p><p>Use padding string with limit to the number of labels, and prefix to get exactly n characters.</p><img width="596" alt="code" src="https://user-images.githubusercontent.com/2284279/62542858-f34e2e80-b85c-11e9-91df-c9c46a00eefe.png"><p><code>DigitView.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> stackView: <span class="type">UIStackView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">UIStackView</span>()</span><br><span class="line">        view.axis = .horizontal</span><br><span class="line">        view.distribution = .equalSpacing</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> boxes: [<span class="type">UIView</span>] = []</span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> labels: [<span class="type">UILabel</span>] = []</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> hiddenTextField: <span class="type">UITextField</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> textField = <span class="type">UITextField</span>()</span><br><span class="line">        textField.alpha = <span class="number">0</span></span><br><span class="line">        textField.keyboardType = .numbersAndPunctuation</span><br><span class="line">        <span class="keyword">return</span> textField</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> tapGR = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(handle(<span class="number">_</span>:)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        setup()</span><br><span class="line"></span><br><span class="line">        addGestureRecognizer(tapGR)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line"></span><br><span class="line">        boxes.forEach &#123;</span><br><span class="line">            $<span class="number">0</span>.layer.borderWidth = <span class="number">1</span></span><br><span class="line">            $<span class="number">0</span>.layer.borderColor = <span class="type">R</span>.color.primary.cgColor</span><br><span class="line">            $<span class="number">0</span>.layoutIfNeeded()</span><br><span class="line">            $<span class="number">0</span>.layer.cornerRadius = $<span class="number">0</span>.bounds.height / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(<span class="number">_</span> tapGR: UITapGestureRecognizer)</span></span> &#123;</span><br><span class="line">        hiddenTextField.becomeFirstResponder()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        addSubviews([hiddenTextField, stackView])</span><br><span class="line">        boxes = <span class="type">Array</span>(<span class="number">0</span>..&lt;<span class="number">6</span>).<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">UIView</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        labels = boxes.<span class="built_in">map</span> &#123; box <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">            label.font = <span class="type">R</span>.customFont.semibold(<span class="number">16</span>)</span><br><span class="line">            label.textAlignment = .center</span><br><span class="line">            label.textColor = <span class="type">R</span>.color.primary</span><br><span class="line">            box.addSubview(label)</span><br><span class="line"></span><br><span class="line">            <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                label.centerXAnchor.constraint(equalTo: box.centerXAnchor),</span><br><span class="line">                label.centerYAnchor.constraint(equalTo: box.centerYAnchor)</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> label</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boxes.forEach &#123;</span><br><span class="line">            stackView.addArrangedSubview($<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                $<span class="number">0</span>.heightAnchor.constraint(equalTo: stackView.heightAnchor, multiplier: <span class="number">0.9</span>),</span><br><span class="line">                $<span class="number">0</span>.widthAnchor.constraint(equalTo: $<span class="number">0</span>.heightAnchor, multiplier: <span class="number">1.0</span>)</span><br><span class="line">            ])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            stackView.pinEdges(view: <span class="keyword">self</span>, inset: <span class="type">UIEdgeInsets</span>(top: <span class="number">0</span>, <span class="keyword">left</span>: <span class="number">16</span>, bottom: <span class="number">0</span>, <span class="keyword">right</span>: -<span class="number">16</span>))</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DigitHandler.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitHandler</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> digitView: <span class="type">DigitView</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(digitView: <span class="type">DigitView</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.digitView = digitView</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line"></span><br><span class="line">        digitView.hiddenTextField.delegate = <span class="keyword">self</span></span><br><span class="line">        digitView.hiddenTextField.addTarget(<span class="keyword">self</span>, action: #selector(handle(<span class="number">_</span>:)), <span class="keyword">for</span>: .editingChanged)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> text = textField.text <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">count</span> = digitView.labels.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">let</span> paddedText = <span class="type">String</span>(text.padding(toLength: <span class="built_in">count</span>, withPad: <span class="string">"-"</span>, startingAt: <span class="number">0</span>).<span class="keyword">prefix</span>(<span class="built_in">count</span>))</span><br><span class="line">        <span class="built_in">zip</span>(digitView.labels, paddedText).forEach &#123; tuple <span class="keyword">in</span></span><br><span class="line">            tuple.<span class="number">0</span>.text = <span class="type">String</span>(tuple.<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DigitHandler</span>: <span class="title">UITextFieldDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        textField.resignFirstResponder()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> text = textField.text ?? <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> text.<span class="built_in">count</span> &lt; digitView.labels.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make credit card input UI in Swift</title>
      <link href="/blog/How-to-make-credit-card-input-UI-in-Swift/"/>
      <url>/blog/How-to-make-credit-card-input-UI-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/346" target="_blank" rel="noopener">#346</a></strong></p><p>We have FrontCard that contains number and expiration date, BackCard that contains CVC. CardView is used to contain front and back sides for flipping transition.</p><p>We leverage <code>STPPaymentCardTextField</code> from Stripe for working input fields, then <code>CardHandler</code> is used to parse <code>STPPaymentCardTextField</code> content and update our UI.</p><p>For masked credit card numbers, we pad string to fit 16 characters with <code>●</code> symbol, then chunk into 4 parts and zip with labels to update.</p><p>For flipping animation, we use <code>UIView.transition</code> with <code>showHideTransitionViews</code></p><img width="370" alt="a1" src="https://user-images.githubusercontent.com/2284279/62470585-0dbfd380-b79b-11e9-9c31-13ea6cd17550.png"><img width="362" alt="a2" src="https://user-images.githubusercontent.com/2284279/62470586-0dbfd380-b79b-11e9-9473-4c534b263b74.png"><p><code>BackCard.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BackCard</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> rectangle: <span class="type">UIView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">UIView</span>()</span><br><span class="line">        view.backgroundColor = <span class="type">R</span>.color.darkText</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> cvcLabel: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">        label.font = <span class="type">R</span>.customFont.medium(<span class="number">14</span>)</span><br><span class="line">        label.textColor = <span class="type">R</span>.color.darkText</span><br><span class="line">        label.textAlignment = .center</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> cvcBox: <span class="type">UIView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">UIView</span>()</span><br><span class="line">        view.backgroundColor = <span class="type">R</span>.color.lightText</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        setup()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        addSubviews([rectangle, cvcBox, cvcLabel])</span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            rectangle.leftAnchor.constraint(equalTo: leftAnchor),</span><br><span class="line">            rectangle.rightAnchor.constraint(equalTo: rightAnchor),</span><br><span class="line">            rectangle.heightAnchor.constraint(equalToConstant: <span class="number">52</span>),</span><br><span class="line">            rectangle.topAnchor.constraint(equalTo: topAnchor, constant: <span class="number">30</span>),</span><br><span class="line"></span><br><span class="line">            cvcBox.rightAnchor.constraint(equalTo: rightAnchor, constant: -<span class="number">16</span>),</span><br><span class="line">            cvcBox.topAnchor.constraint(equalTo: rectangle.bottomAnchor, constant: <span class="number">16</span>),</span><br><span class="line">            cvcBox.widthAnchor.constraint(equalToConstant: <span class="number">66</span>),</span><br><span class="line">            cvcBox.heightAnchor.constraint(equalToConstant: <span class="number">30</span>),</span><br><span class="line"></span><br><span class="line">            cvcLabel.centerXAnchor.constraint(equalTo: cvcBox.centerXAnchor),</span><br><span class="line">            cvcLabel.centerYAnchor.constraint(equalTo: cvcBox.centerYAnchor)</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FrontCard.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontCard</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> stackView: <span class="type">UIStackView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> stackView = <span class="type">UIStackView</span>()</span><br><span class="line">        stackView.axis = .horizontal</span><br><span class="line">        stackView.distribution = .equalSpacing</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stackView</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> numberLabels: [<span class="type">UILabel</span>] = <span class="type">Array</span>(<span class="number">0</span>..&lt;<span class="number">4</span>).<span class="built_in">map</span>(&#123; <span class="number">_</span> <span class="keyword">in</span> <span class="keyword">return</span> <span class="type">UILabel</span>() &#125;)</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> expirationStaticLabel: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">        label.font = <span class="type">R</span>.customFont.regular(<span class="number">10</span>)</span><br><span class="line">        label.textColor = <span class="type">R</span>.color.darkText</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> expirationLabel: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">        label.font = <span class="type">R</span>.customFont.medium(<span class="number">14</span>)</span><br><span class="line">        label.textColor = <span class="type">R</span>.color.darkText</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        setup()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        addSubview(stackView)</span><br><span class="line">        numberLabels.forEach &#123;</span><br><span class="line">            stackView.addArrangedSubview($<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addSubviews([expirationStaticLabel, expirationLabel])</span><br><span class="line"></span><br><span class="line">        numberLabels.forEach &#123;</span><br><span class="line">            $<span class="number">0</span>.font = <span class="type">R</span>.customFont.medium(<span class="number">16</span>)</span><br><span class="line">            $<span class="number">0</span>.textColor = <span class="type">R</span>.color.darkText</span><br><span class="line">            $<span class="number">0</span>.textAlignment = .center</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            stackView.heightAnchor.constraint(equalToConstant: <span class="number">50</span>),</span><br><span class="line">            stackView.leftAnchor.constraint(equalTo: leftAnchor, constant: <span class="number">24</span>),</span><br><span class="line">            stackView.rightAnchor.constraint(equalTo: rightAnchor, constant: -<span class="number">24</span>),</span><br><span class="line">            stackView.topAnchor.constraint(equalTo: centerYAnchor),</span><br><span class="line"></span><br><span class="line">            expirationStaticLabel.topAnchor.constraint(equalTo: stackView.bottomAnchor),</span><br><span class="line">            expirationStaticLabel.leftAnchor.constraint(equalTo: rightAnchor, constant: -<span class="number">70</span>),</span><br><span class="line"></span><br><span class="line">            expirationLabel.leftAnchor.constraint(equalTo: expirationStaticLabel.leftAnchor),</span><br><span class="line">            expirationLabel.topAnchor.constraint(equalTo: expirationStaticLabel.bottomAnchor)</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CardView.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CardView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> backCard = <span class="type">BackCard</span>()</span><br><span class="line">    <span class="keyword">let</span> frontCard = <span class="type">FrontCard</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        setup()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        addSubview(backCard)</span><br><span class="line">        addSubview(frontCard)</span><br><span class="line"></span><br><span class="line">        [backCard, frontCard].forEach &#123;</span><br><span class="line">            <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">                $<span class="number">0</span>.pinEdges(view: <span class="keyword">self</span>)</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">            $<span class="number">0</span>.clipsToBounds = <span class="literal">true</span></span><br><span class="line">            $<span class="number">0</span>.layer.cornerRadius = <span class="number">10</span></span><br><span class="line">            $<span class="number">0</span>.backgroundColor = <span class="type">R</span>.color.card.background</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CardHandler.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Stripe</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CardHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cardView: <span class="type">CardView</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(cardView: <span class="type">CardView</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.cardView = cardView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reset</span><span class="params">()</span></span> &#123;</span><br><span class="line">        cardView.frontCard.expirationStaticLabel.text = <span class="type">R</span>.string.localizable.cardExpiration()</span><br><span class="line">        cardView.frontCard.expirationLabel.text = <span class="type">R</span>.string.localizable.cardExpirationPlaceholder()</span><br><span class="line">        cardView.backCard.cvcLabel.text = <span class="type">R</span>.string.localizable.cardCvcPlaceholder()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showFront</span><span class="params">()</span></span> &#123;</span><br><span class="line">        flip(</span><br><span class="line">            from: cardView.backCard,</span><br><span class="line">            to: cardView.frontCard,</span><br><span class="line">            options: .transitionFlipFromLeft</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showBack</span><span class="params">()</span></span> &#123;</span><br><span class="line">        flip(</span><br><span class="line">            from: cardView.frontCard,</span><br><span class="line">            to: cardView.backCard,</span><br><span class="line">            options: .transitionFlipFromRight</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(<span class="number">_</span> textField: STPPaymentCardTextField)</span></span> &#123;</span><br><span class="line">        handle(number: textField.cardNumber ?? <span class="string">""</span>)</span><br><span class="line">        handle(month: textField.formattedExpirationMonth, year: textField.formattedExpirationYear)</span><br><span class="line">        handle(cvc: textField.cvc)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(number: String)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> paddedNumber = number.padding(</span><br><span class="line">            toLength: <span class="number">16</span>,</span><br><span class="line">            withPad: <span class="type">R</span>.string.localizable.cardNumberPlaceholder(),</span><br><span class="line">            startingAt: <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> chunkedNumbers = paddedNumber.chunk(by: <span class="number">4</span>)</span><br><span class="line">        <span class="built_in">zip</span>(cardView.frontCard.numberLabels, chunkedNumbers).forEach &#123; tuple <span class="keyword">in</span></span><br><span class="line">            tuple.<span class="number">0</span>.text = tuple.<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(cvc: String?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cvc = cvc, !cvc.isEmpty &#123;</span><br><span class="line">            cardView.backCard.cvcLabel.text = cvc</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cardView.backCard.cvcLabel.text = <span class="type">R</span>.string.localizable.cardCvcPlaceholder()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(month: String?, year: String?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> month = month, <span class="keyword">let</span> year = year,</span><br><span class="line">            !month.isEmpty</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cardView.frontCard.expirationLabel.text = <span class="type">R</span>.string.localizable.cardExpirationPlaceholder()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> formattedYear = year.ifEmpty(replaceWith: <span class="string">"00"</span>)</span><br><span class="line">        cardView.frontCard.expirationLabel.text = <span class="string">"\(month)/\(formattedYear)"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">flip</span><span class="params">(from: UIView, to: UIView, options: UIView.AnimationOptions)</span></span> &#123;</span><br><span class="line">        <span class="type">UIView</span>.transition(</span><br><span class="line">            from: from,</span><br><span class="line">            to: to,</span><br><span class="line">            duration: <span class="number">0.25</span>,</span><br><span class="line">            options: [options, .showHideTransitionViews],</span><br><span class="line">            completion: <span class="literal">nil</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String+Extension.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">ifEmpty</span><span class="params">(replaceWith: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isEmpty ? replaceWith : <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chunk</span><span class="params">(by length: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: <span class="built_in">count</span>, by: length).<span class="built_in">map</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> start = index(startIndex, offsetBy: $<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">let</span> end = index(start, offsetBy: length, limitedBy: endIndex) ?? endIndex</span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>(<span class="keyword">self</span>[start..&lt;end])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to stop implicit animation when title change on UIButton</title>
      <link href="/blog/How-to-stop-implicit-animation-when-title-change-on-UIButton/"/>
      <url>/blog/How-to-stop-implicit-animation-when-title-change-on-UIButton/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/345" target="_blank" rel="noopener">#345</a></strong></p><p><code>UIButton</code> with system type has implicit animation for <a href="https://developer.apple.com/documentation/uikit/uibutton/1624018-settitle" target="_blank" rel="noopener">setTitle(_:for:)</a></p><blockquote><p>Use this method to set the title for the button. The title you specify derives its formatting from the button’s associated label object. If you set both a title and an attributed title for the button, the button prefers the use of the attributed title over this one.</p></blockquote><blockquote><p>At a minimum, you should set the value for the normal state. If a title is not specified for a state, the default behavior is to use the title associated with the normal state. If the value for normal is not set, then the property defaults to a system value.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.performWithoutAnimation &#123;</span><br><span class="line">    button.setTitle(title, <span class="keyword">for</span>: .normal)</span><br><span class="line">    button.layoutIfNeeded()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use addSubview in iOS</title>
      <link href="/blog/How-to-use-addSubview-in-iOS/"/>
      <url>/blog/How-to-use-addSubview-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/344" target="_blank" rel="noopener">#344</a></strong></p><p><a href="https://developer.apple.com/documentation/uikit/uiview/1622616-addsubview" target="_blank" rel="noopener">addSubview</a> can trigger <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621398-viewdidlayoutsubviews" target="_blank" rel="noopener">viewDidLayoutSubviews</a>, so be careful to just do layout stuff in <code>viewDidLayoutSubviews</code></p><blockquote><p>This method establishes a strong reference to view and sets its next responder to the receiver, which is its new superview.</p></blockquote><blockquote><p>Views can have only one superview. If view already has a superview and that view is not the receiver, this method removes the previous superview before making the receiver its new superview.</p></blockquote><blockquote><p>When the bounds change for a view controller’s view, the view adjusts the positions of its subviews and then the system calls this method. However, this method being called does not indicate that the individual layouts of the view’s subviews have been adjusted. Each subview is responsible for adjusting its own layout.</p></blockquote><blockquote><p>Your view controller can override this method to make changes after the view lays out its subviews. The default implementation of this method does nothing.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to run app on beta iOS devices</title>
      <link href="/blog/How-to-run-app-on-beta-iOS-devices/"/>
      <url>/blog/How-to-run-app-on-beta-iOS-devices/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/343" target="_blank" rel="noopener">#343</a></strong></p><p>Xcode 10.3 with iOS 11</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/13.0 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to submit electron app to AppStore</title>
      <link href="/blog/How-to-submit-electron-app-to-AppStore/"/>
      <url>/blog/How-to-submit-electron-app-to-AppStore/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/342" target="_blank" rel="noopener">#342</a></strong></p><h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><p>Install electron as dev <code>npm install electron --save-dev</code><br>Update electron-packager <code>npm install electron-packager@latest --save-dev</code><br>Use no space in app name</p><h3 id="Package-with-electron-packager"><a href="#Package-with-electron-packager" class="headerlink" title="Package with electron-packager"></a>Package with electron-packager</h3><p>Follow <a href="https://github.com/electron/electron-osx-sign/wiki/Packaging-and-Submitting-an-Electron-App-to-the-Mac-App-Store" target="_blank" rel="noopener">https://github.com/electron/electron-osx-sign/wiki/Packaging-and-Submitting-an-Electron-App-to-the-Mac-App-Store</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx electron-packager . <span class="string">"MyApp"</span> --app-bundle-id=com.onmyway133.MyApp --helper-bundle-id=com.onmyway133.MyApp.helper --app-version=1.4.0 --build-version=1.0.100 --platform=mas --arch=x64 --icon=Icon/Icon.icns --overwrite</span><br><span class="line">npx electron-osx-sign <span class="string">"MyApp-mas-x64/MyApp.app"</span> --verbose</span><br><span class="line">npx electron-osx-flat <span class="string">"MyApp-mas-x64/MyApp.app"</span> --verbose</span><br></pre></td></tr></table></figure><h3 id="Sign-with-electron-osx-sign"><a href="#Sign-with-electron-osx-sign" class="headerlink" title="Sign with electron-osx-sign"></a>Sign with electron-osx-sign</h3><p>Read README <a href="https://github.com/electron/electron-osx-sign" target="_blank" rel="noopener">https://github.com/electron/electron-osx-sign</a></p><blockquote><p>For distribution in the Mac App Store: Have the provisioning profile for distribution placed in the current working directory and the signing identity installed in the default keychain.</p></blockquote><h3 id="Certificate"><a href="#Certificate" class="headerlink" title="Certificate"></a>Certificate</h3><p>On developer.apple.com, create Mac App Distribution certificate. Make sure when we download in Keychain Access, it has associated private key</p><h3 id="Manually-upload"><a href="#Manually-upload" class="headerlink" title="Manually upload"></a>Manually upload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/itms/bin/iTMSTransporter -m upload  -assetFile MyApp/MyApp.pkg  -u onmyway133@gmail.com -p mypassword</span><br></pre></td></tr></table></figure><h3 id="Use-Application-Loader"><a href="#Use-Application-Loader" class="headerlink" title="Use Application Loader"></a>Use Application Loader</h3><p>Use <a href="https://support.apple.com/en-us/HT204397" target="_blank" rel="noopener">Using app-specific passwords</a></p><h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><h4 id="electron-Bad-CFBundleExecutable-Cannot-find-executable-file"><a href="#electron-Bad-CFBundleExecutable-Cannot-find-executable-file" class="headerlink" title="electron Bad CFBundleExecutable. Cannot find executable file"></a>electron Bad CFBundleExecutable. Cannot find executable file</h4><blockquote><p>ERROR ITMS-90261: “Bad CFBundleExecutable. Cannot find executable file that matches the value of CFBundleExecutable in the nested bundle MyApp [com.onmyway133.MyApp.pkg/Payload/MyApp.app/Contents/Frameworks/MyApp (GPU).app] property list file.”</p></blockquote><p><a href="https://github.com/electron/electron-packager/issues?utf8=%E2%9C%93&amp;q=helper" target="_blank" rel="noopener">https://github.com/electron/electron-packager/issues?utf8=%E2%9C%93&amp;q=helper</a></p><p>Try electron 5.0.0 <code>npm install electron@5.0.0 --save-dev</code></p><h4 id="Specifically-we-found-that-when-the-user-closes-the-main-application-window-there-is-no-menu-item-to-re-open-it"><a href="#Specifically-we-found-that-when-the-user-closes-the-main-application-window-there-is-no-menu-item-to-re-open-it" class="headerlink" title="Specifically, we found that when the user closes the main application window there is no menu item to re-open it."></a>Specifically, we found that when the user closes the main application window there is no menu item to re-open it.</h4><p><a href="https://stackoverflow.com/questions/35008347/electron-close-w-x-vs-right-click-dock-and-quit" target="_blank" rel="noopener">https://stackoverflow.com/questions/35008347/electron-close-w-x-vs-right-click-dock-and-quit</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> application = &#123;</span><br><span class="line">    label: <span class="string">"MyApp"</span>,</span><br><span class="line">    submenu: [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"New"</span>,</span><br><span class="line">        accelerator: <span class="string">"Command+N"</span>,</span><br><span class="line">        click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">            createWindow()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to fix undefined require in electron 5.0</title>
      <link href="/blog/How-to-fix-undefined-require-in-electron-5.0/"/>
      <url>/blog/How-to-fix-undefined-require-in-electron-5.0/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/341" target="_blank" rel="noopener">#341</a></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to format hour minute from time interval in Swift</title>
      <link href="/blog/How-to-format-hour-minute-from-time-interval-in-Swift/"/>
      <url>/blog/How-to-format-hour-minute-from-time-interval-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/340" target="_blank" rel="noopener">#340</a></strong></p><h2 id="Use-DateComponentsFormatter"><a href="#Use-DateComponentsFormatter" class="headerlink" title="Use DateComponentsFormatter"></a>Use DateComponentsFormatter</h2><p><a href="https://nshipster.com/formatter/#datecomponentsformatter" target="_blank" rel="noopener">https://nshipster.com/formatter/#datecomponentsformatter</a></p><p>Results in no padding 0</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">format</span><span class="params">(second: TimeInterval)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> formatter = <span class="type">DateComponentsFormatter</span>()</span><br><span class="line">    formatter.unitsStyle = .positional</span><br><span class="line">    formatter.allowedUnits = [.hour, .minute]</span><br><span class="line">    formatter.zeroFormattingBehavior = .pad</span><br><span class="line">    <span class="keyword">return</span> formatter.string(from: second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">XCTAssertEqual</span>(format(second: <span class="number">5400</span> ), <span class="string">"1:30"</span>)</span><br><span class="line"><span class="type">XCTAssertEqual</span>(format(second: <span class="number">7200</span>), <span class="string">"2:00"</span>)</span><br><span class="line"><span class="type">XCTAssertEqual</span>(format(second: <span class="number">39600</span> ), <span class="string">"11:00"</span>)</span><br></pre></td></tr></table></figure><h2 id="Use-mod"><a href="#Use-mod" class="headerlink" title="Use mod"></a>Use mod</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">format</span><span class="params">(minute: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> h = minute / <span class="number">60</span></span><br><span class="line">    <span class="keyword">let</span> m = minute % <span class="number">60</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\(h.padZero()):\(m.padZero())"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">padZero</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(format: <span class="string">"%02d"</span>, <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">XCTAssertEqual</span>(format(minute: <span class="number">90</span> ), <span class="string">"01:30"</span>)</span><br><span class="line"><span class="type">XCTAssertEqual</span>(format(minute: <span class="number">120</span>), <span class="string">"02:00"</span>)</span><br><span class="line"><span class="type">XCTAssertEqual</span>(format(minute: <span class="number">660</span> ), <span class="string">"11:00"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to cache URLSession response</title>
      <link href="/blog/How-to-cache-URLSession-response/"/>
      <url>/blog/How-to-cache-URLSession-response/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/339" target="_blank" rel="noopener">#339</a></strong></p><p>For simple cases, we don’t need to. Let’s use <a href="https://developer.apple.com/documentation/foundation/urlsessionconfiguration/1410148-urlcache" target="_blank" rel="noopener">urlCache</a></p><blockquote><p>The URL cache for providing cached responses to requests within the session.</p></blockquote><p><a href="https://developer.apple.com/documentation/foundation/url_loading_system/accessing_cached_data" target="_blank" rel="noopener">Accessing Cached Data</a></p><blockquote><p>The URL Loading System caches responses both in memory and on disk, improving performance and reducing network traffic.</p></blockquote><blockquote><p>The URLCache class is used for caching responses from network resources. Your app can directly access the shared cache instance by using the shared property of URLCache. Or, you can create your own caches for different purposes, setting distinct caches on your URLSessionConfiguration objects.</p></blockquote><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://nshipster.com/nsurlcache/" target="_blank" rel="noopener">URLCache</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use ext in gradle in Android</title>
      <link href="/blog/How-to-use-ext-in-gradle-in-Android/"/>
      <url>/blog/How-to-use-ext-in-gradle-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/338" target="_blank" rel="noopener">#338</a></strong></p><p>Gradle uses Groovy and it has <code>ext</code>, also known as <a href="https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html" target="_blank" rel="noopener">ExtraPropertiesExtension</a></p><blockquote><p>Additional, ad-hoc, properties for Gradle domain objects.</p></blockquote><blockquote><p>Extra properties extensions allow new properties to be added to existing domain objects. They act like maps, allowing the storage of arbitrary key/value pairs. All ExtensionAware Gradle domain objects intrinsically have an extension named “ext” of this type.</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">project.ext &#123;</span><br><span class="line">  myprop = <span class="string">"a"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> project.myprop == <span class="string">"a"</span></span><br><span class="line"><span class="keyword">assert</span> project.ext.myprop == <span class="string">"a"</span></span><br><span class="line"></span><br><span class="line">project.myprop = <span class="string">"b"</span></span><br><span class="line"><span class="keyword">assert</span> project.myprop == <span class="string">"b"</span></span><br><span class="line"><span class="keyword">assert</span> project.ext.myprop == <span class="string">"b"</span></span><br></pre></td></tr></table></figure><p>In root <code>build.gradle</code>, <code>ext</code> adds extra property to <code>rootProject</code> object. There we can access <code>rootProject.ext</code> or just <code>ext</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">  myLibraryVersion = <span class="string">'1.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In module <code>app/build.gradle</code>, <code>ext</code> adds extra property to <code>project</code> object. There we can access <code>project.ext</code> or just <code>ext</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">  myLibraryVersion = <span class="string">'1.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to do custom presentation with UIViewPropertyAnimator in iOS</title>
      <link href="/blog/How-to-do-custom-presentation-with-UIViewPropertyAnimator-in-iOS/"/>
      <url>/blog/How-to-do-custom-presentation-with-UIViewPropertyAnimator-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/337" target="_blank" rel="noopener">#337</a></strong></p><p>Normally we just present from any <code>UIViewController</code> in any <code>UINavigationController</code> in <code>UITabBarController</code> and it will present over tabbar</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">present(detailViewController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>If we have animation with <code>UIViewPropertyAnimator</code>, then we can implement <a href="https://developer.apple.com/documentation/uikit/uiviewcontrolleranimatedtransitioning" target="_blank" rel="noopener">UIViewControllerAnimatedTransitioning</a> and <a href="https://developer.apple.com/documentation/uikit/uiviewcontrolleranimatedtransitioning/1829434-interruptibleanimator" target="_blank" rel="noopener">interruptibleAnimator(using:)</a></p><blockquote><p>The methods in this protocol let you define an animator object, which creates the animations for transitioning a view controller on or off screen in a fixed amount of time. The animations you create using this protocol must not be interactive. To create interactive transitions, you must combine your animator object with another object that controls the timing of your animations.</p></blockquote><blockquote><p>Implement this method when you want to perform your transitions using an interruptible animator object, such as a UIViewPropertyAnimator object. You must return the same animator object for the duration of the transition.</p></blockquote><p>For more fine-grained control, we can have <a href="https://developer.apple.com/documentation/uikit/uipresentationcontroller" target="_blank" rel="noopener">UIPresentationController</a></p><blockquote><p>From the time a view controller is presented until the time it is dismissed, UIKit uses a presentation controller to manage various aspects of the presentation process for that view controller. The presentation controller can add its own animations on top of those provided by animator objects, it can respond to size changes, and it can manage other aspects of how the view controller is presented onscreen.</p></blockquote><p>A lazy approach is to present without animation and do animation after</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">present(detailViewController, animated: <span class="literal">false</span>, completion: &#123;</span><br><span class="line"><span class="keyword">let</span> animator = <span class="type">UIViewPropertyAnimator</span>()</span><br><span class="line">    animator.startAnimation()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If we don’t want to involve <code>UIViewController</code> then we can work on <code>UIView</code> level. This way we can animate hiding tab bar. Any <code>UIViewController</code> within <code>UITabBarController</code> has <code>tabBarController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animator = <span class="type">UIViewPropertyAnimator</span>()</span><br><span class="line">animator.addAnimations &#123;</span><br><span class="line">  <span class="keyword">self</span>.tabBarController?.tabBar.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">0</span>, y: tabbar.frame.height)</span><br><span class="line">&#125;</span><br><span class="line">animator.startAnimation()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to show dropdown in AppKit</title>
      <link href="/blog/How-to-show-dropdown-in-AppKit/"/>
      <url>/blog/How-to-show-dropdown-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/336" target="_blank" rel="noopener">#336</a></strong></p><p>Use <a href="https://developer.apple.com/documentation/appkit/nspopupbutton" target="_blank" rel="noopener">NSPopUpButton</a></p><p><code>var pullsDown: Bool</code></p><blockquote><p>A Boolean value indicating whether the button displays a pull-down or pop-up menu.</p></blockquote><p><code>func addItem(withTitle: String)</code><br>Adds an item with the specified title to the end of the menu.</p><p>Should disable <code>pullsDown</code> if we want to set title automatically and not scale button for title</p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MenuList/Articles/ManagingPopUpItems.html" target="_blank" rel="noopener">Managing Pop-Up Buttons and Pull-Down Lists</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to scan up to character in Swift</title>
      <link href="/blog/How-to-scan-up-to-character-in-Swift/"/>
      <url>/blog/How-to-scan-up-to-character-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/335" target="_blank" rel="noopener">#335</a></strong></p><p>This is useful when we want to get the first meaningful line in a big paragraph</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scanner = <span class="type">Scanner</span>(string: text)</span><br><span class="line"><span class="keyword">var</span> result: <span class="type">NSString?</span> = <span class="string">""</span></span><br><span class="line">scanner.scanUpTo(<span class="string">"\n"</span>, into: &amp;result)</span><br><span class="line"><span class="keyword">return</span> result <span class="keyword">as</span> <span class="type">String?</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use NSSecureCoding in Swift</title>
      <link href="/blog/How-to-use-NSSecureCoding-in-Swift/"/>
      <url>/blog/How-to-use-NSSecureCoding-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/334" target="_blank" rel="noopener">#334</a></strong></p><p><a href="https://developer.apple.com/documentation/foundation/nssecurecoding" target="_blank" rel="noopener">NSSecureCoding</a> has been around since iOS 6 and has had some API changes in iOS 12</p><blockquote><p>A protocol that enables encoding and decoding in a manner that is robust against object substitution attacks.</p></blockquote><p>The class must subclass from <code>NSObject</code> and conform to <code>NSSecureCoding</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Note</span>: <span class="title">NSObject</span>, <span class="title">NSSecureCoding</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> supportsSecureCoding: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(with aCoder: NSCoder)</span></span> &#123;</span><br><span class="line">        aCoder.encode(id, forKey: <span class="string">"id"</span>)</span><br><span class="line">        aCoder.encode(text, forKey: <span class="string">"text"</span>)</span><br><span class="line">        aCoder.encode(date, forKey: <span class="string">"date"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> id = aDecoder.decodeObject(forKey: <span class="string">"id"</span>) <span class="keyword">as</span>? <span class="type">String</span>,</span><br><span class="line">            <span class="keyword">let</span> text = aDecoder.decodeObject(forKey: <span class="string">"text"</span>) <span class="keyword">as</span>? <span class="type">String</span>,</span><br><span class="line">            <span class="keyword">let</span> date = aDecoder.decodeObject(forKey: <span class="string">"date"</span>) <span class="keyword">as</span>? <span class="type">Date</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.id = id</span><br><span class="line">        <span class="keyword">self</span>.text = text</span><br><span class="line">        <span class="keyword">self</span>.date = date</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">"untitled"</span></span><br><span class="line">    <span class="keyword">var</span> date: <span class="type">Date</span> = <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        id = <span class="type">UUID</span>().uuidString</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, we need to serialize to Data, then use <a href="https://github.com/onmyway133/EasyStash" target="_blank" rel="noopener">EasyStash</a> for easy persistency</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">try</span> <span class="type">NSKeyedArchiver</span>.archivedData(</span><br><span class="line">        withRootObject: <span class="keyword">self</span>.notes,</span><br><span class="line">        requiringSecureCoding: <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span> <span class="keyword">self</span>.storage.save(object: data, forKey: <span class="keyword">self</span>.key)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can use <code>unarchiveTopLevelObjectWithData</code> to unarchive array</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data: <span class="type">Data</span> = <span class="keyword">try</span> <span class="keyword">self</span>.storage.load(forKey: <span class="keyword">self</span>.key)</span><br><span class="line">    <span class="keyword">let</span> notes = <span class="keyword">try</span> <span class="type">NSKeyedUnarchiver</span>.unarchiveTopLevelObjectWithData(data) <span class="keyword">as</span>? [<span class="type">Note</span>]</span><br><span class="line">    <span class="comment">// notes is of type [Note]?</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to simplify pager interaction with Rx</title>
      <link href="/blog/How-to-simplify-pager-interaction-with-Rx/"/>
      <url>/blog/How-to-simplify-pager-interaction-with-Rx/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/333" target="_blank" rel="noopener">#333</a></strong></p><p>In a traditional pager with many pages of content, and a bottom navigation with previous and next button. Each page may have different content, and depending on each state, may block the next button.</p><p>The state of next button should state in real time depending on state in each page content, and when user moves back and forth between pages, the state of next button should be reflected as well.</p><p>We might have</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">BottomNavigationDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">bottomNavigationCanGoNext</span><span class="params">(currentIndex: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">bottomNavigationDidMoveTo</span><span class="params">(index: Int)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">PreferencePageDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">preferencePageDidSelect</span><span class="params">(itemCount: Int)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">FormPageDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">formPageDidCheck</span><span class="params">(valid: Bool)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">ConsentPageDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">consentPageDidAccept</span><span class="params">(agree: Bool)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The indirect communications between each page, bottom navigation and ViewController get complicated and out of hands very quickly.</p><p>This is a perfect problem for Rx to solve. If we look closely, the state of next button is a derivative of current index, how many items selected in preferences, valid form and agreement status.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BottomNavigation</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PreferencePage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> itemCount = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormPage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="type">PublishSubject</span>&lt;<span class="type">Bool</span>&gt;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsentPage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> agree = <span class="type">PublishSubject</span>&lt;<span class="type">Bool</span>&gt;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> canNext = <span class="type">Observable</span></span><br><span class="line">  .combineLatest(bottomNavigation.index, preferencePage.itemCount, formPage.valid, consentPage.agree)</span><br><span class="line">  .<span class="built_in">map</span>(&#123; (index, itemCount, valid, agree) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// Logic goes here to reduce, for example</span></span><br><span class="line">    <span class="keyword">switch</span> index &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> itemCount &gt; <span class="number">2</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> valid</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: <span class="type">Return</span> agree</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use moveItem in NSCollectionView in AppKit</title>
      <link href="/blog/How-to-use-moveItem-in-NSCollectionView-in-AppKit/"/>
      <url>/blog/How-to-use-moveItem-in-NSCollectionView-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/332" target="_blank" rel="noopener">#332</a></strong></p><p>From <a href="https://developer.apple.com/documentation/appkit/nscollectionview/1528159-moveitem" target="_blank" rel="noopener">moveItem(at:to:)</a></p><blockquote><p>Moves an item from one location to another in the collection view.</p></blockquote><blockquote><p>After rearranging items in your data source object, use this method to synchronize those changes with the collection view. Calling this method lets the collection view know that it must update its internal data structures and possibly update its visual appearance. You can move the item to a different section or to a new location in the same section. The collection view updates the layout as needed to account for the move, animating cells into position in response.</p></blockquote><blockquote><p>When inserting or deleting multiple sections and items, you can animate all of your changes at once using the performBatchUpdates(_:completionHandler:) method.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">notes.swapAt(index, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">collectionView.animator().moveItem(</span><br><span class="line">    at: index.toIndexPath(),</span><br><span class="line">    to: <span class="number">0</span>.toIndexPath()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>There may be unknown reasons or bug that make other cells stay in incorrect state. The fix is to reload the rest cells</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = <span class="type">Set</span>((<span class="number">1</span>..&lt;notes.<span class="built_in">count</span>).<span class="built_in">map</span>(&#123; $<span class="number">0</span>.toIndexPath() &#125;))</span><br><span class="line">collectionView.reloadItems(at: <span class="keyword">set</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to show dropdown from NSSegmentedControl in AppKit</title>
      <link href="/blog/How-to-show-dropdown-from-NSSegmentedControl-in-AppKit/"/>
      <url>/blog/How-to-show-dropdown-from-NSSegmentedControl-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/331" target="_blank" rel="noopener">#331</a></strong></p><p>From <a href="https://developer.apple.com/documentation/appkit/nssegmentedcontrol?language=objc" target="_blank" rel="noopener">NSSegmentedControl</a></p><blockquote><p>The features of a segmented control include the following:<br>A segment can have an image, text (label), menu, tooltip, and tag.<br>A segmented control can contain images or text, but not both.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> languageMenu = <span class="type">NSMenu</span>(title: <span class="string">""</span>)</span><br><span class="line"><span class="keyword">let</span> languages = [<span class="string">"Swift"</span>, <span class="string">"Javascript"</span>]</span><br><span class="line">languages.forEach &#123;</span><br><span class="line">    <span class="keyword">let</span> item = <span class="type">NSMenuItem</span>(title: $<span class="number">0</span>, action: #selector(handleSelectLanguage(<span class="number">_</span>:)), keyEquivalent: <span class="string">""</span>)</span><br><span class="line">    item.target = <span class="keyword">self</span></span><br><span class="line">    item.isEnabled = <span class="literal">true</span></span><br><span class="line">    languageMenu.addItem(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> themeMenu = <span class="type">NSMenu</span>(title: <span class="string">""</span>)</span><br><span class="line"><span class="keyword">let</span> themes = [<span class="string">"one dark"</span>, <span class="string">"one light"</span>]</span><br><span class="line">themes.forEach &#123;</span><br><span class="line">    <span class="keyword">let</span> item = <span class="type">NSMenuItem</span>(title: $<span class="number">0</span>, action: #selector(handleSelectLanguage(<span class="number">_</span>:)), keyEquivalent: <span class="string">""</span>)</span><br><span class="line">    item.target = <span class="keyword">self</span></span><br><span class="line">    item.isEnabled = <span class="literal">true</span></span><br><span class="line">    themeMenu.addItem(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">segment.segmentCount = <span class="number">2</span></span><br><span class="line">segment.selectedSegmentBezelColor = <span class="type">NSColor</span>.red</span><br><span class="line"></span><br><span class="line">segment.setLabel(<span class="string">"Language"</span>, forSegment: <span class="number">0</span>)</span><br><span class="line">segment.setLabel(<span class="string">"Theme"</span>, forSegment: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">segment.setMenu(languageMenu, forSegment: <span class="number">0</span>)</span><br><span class="line">segment.setMenu(themeMenu, forSegment: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">segment.showsMenuIndicator(forSegment: <span class="number">0</span>)</span><br><span class="line">segment.showsMenuIndicator(forSegment: <span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make scrollable NSTextView in AppKit</title>
      <link href="/blog/How-to-make-scrollable-NSTextView-in-AppKit/"/>
      <url>/blog/How-to-make-scrollable-NSTextView-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/330" target="_blank" rel="noopener">#330</a></strong></p><p>When adding <code>NSTextView</code> in xib, we see it is embedded under <code>NSClipView</code>. But if we try to use <code>NSClipView</code> to replicate what’s in the xib, it does not scroll. </p><p>To make it work, we can follow <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/TextUILayer/Tasks/TextInScrollView.html" target="_blank" rel="noopener">Putting an NSTextView Object in an NSScrollView</a> and <a href="https://github.com/onmyway133/blog/issues/173" target="_blank" rel="noopener">How to make scrollable vertical NSStackView</a> to make our <code>ScrollableInput</code></p><p>For easy Auto Layout, we use <a href="https://github.com/onmyway133/Anchors" target="_blank" rel="noopener">Anchors</a> for <code>UIScrollView</code>. </p><p>Things worth mentioned for vertical scrolling</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">textContainer.heightTracksTextView = <span class="literal">false</span></span><br><span class="line">textView.autoresizingMask = [.width]</span><br><span class="line">textView.isVerticallyResizable = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollableInput</span>: <span class="title">NSView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> scrollView = <span class="type">NSScrollView</span>()</span><br><span class="line">    <span class="keyword">let</span> textView = <span class="type">NSTextView</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame frameRect: <span class="type">NSRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frameRect)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> rect = <span class="type">CGRect</span>(</span><br><span class="line">            x: <span class="number">0</span>, y: <span class="number">0</span>,</span><br><span class="line">            width: <span class="number">0</span>, height: <span class="type">CGFloat</span>.greatestFiniteMagnitude</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> layoutManager = <span class="type">NSLayoutManager</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> textContainer = <span class="type">NSTextContainer</span>(size: rect.size)</span><br><span class="line">        layoutManager.addTextContainer(textContainer)</span><br><span class="line">        textView = <span class="type">NSTextView</span>(frame: rect, textContainer: textContainer)</span><br><span class="line">        textView.maxSize = <span class="type">NSSize</span>(width: <span class="number">0</span>, height: <span class="type">CGFloat</span>.greatestFiniteMagnitude)</span><br><span class="line"></span><br><span class="line">        textContainer.heightTracksTextView = <span class="literal">false</span></span><br><span class="line">        textContainer.widthTracksTextView = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        textView.isRichText = <span class="literal">false</span></span><br><span class="line">        textView.importsGraphics = <span class="literal">false</span></span><br><span class="line">        textView.isEditable = <span class="literal">true</span></span><br><span class="line">        textView.isSelectable = <span class="literal">true</span></span><br><span class="line">        textView.font = <span class="type">R</span>.font.text</span><br><span class="line">        textView.textColor = <span class="type">R</span>.color.text</span><br><span class="line">        textView.isVerticallyResizable = <span class="literal">true</span></span><br><span class="line">        textView.isHorizontallyResizable = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        addSubview(scrollView)</span><br><span class="line">        scrollView.hasVerticalScroller = <span class="literal">true</span></span><br><span class="line">        scrollView.drawsBackground = <span class="literal">false</span></span><br><span class="line">        scrollView.drawsBackground = <span class="literal">false</span></span><br><span class="line">        textView.drawsBackground = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        activate(</span><br><span class="line">            scrollView.anchor.edges</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        scrollView.documentView = textView</span><br><span class="line">        textView.autoresizingMask = [.width]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder decoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to handle keyboard for UITextField in scrolling UIStackView in iOS</title>
      <link href="/blog/How-to-handle-keyboard-for-UITextField-in-scrolling-UIStackView-in-iOS/"/>
      <url>/blog/How-to-handle-keyboard-for-UITextField-in-scrolling-UIStackView-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/329" target="_blank" rel="noopener">#329</a></strong></p><p>Firstly, to make UIStackView scrollable, embed it inside UIScrollView. Read <a href="https://github.com/onmyway133/blog/issues/324" target="_blank" rel="noopener">How to embed UIStackView inside UIScrollView in iOS</a></p><p>It’s best to listen to <code>keyboardWillChangeFrameNotification</code> as it contains frame changes for Keyboard in different situation like custom keyboard, languages.</p><blockquote><p>Posted immediately prior to a change in the keyboard’s frame.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyboardHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> scrollView: <span class="type">UIScrollView</span></span><br><span class="line">    <span class="keyword">let</span> stackView: <span class="type">UIStackView</span></span><br><span class="line">    <span class="keyword">var</span> observer: <span class="type">AnyObject?</span></span><br><span class="line">    <span class="keyword">var</span> keyboardHeightConstraint: <span class="type">NSLayoutConstraint!</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> frame: <span class="type">CGRect</span></span><br><span class="line">        <span class="keyword">let</span> duration: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">let</span> animationOptions: <span class="type">UIView</span>.<span class="type">AnimationOptions</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(scrollView: <span class="type">UIScrollView</span>, stackView: <span class="type">UIStackView</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.scrollView = scrollView</span><br><span class="line">        <span class="keyword">self</span>.stackView = stackView</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To make scrollView scroll beyond its <code>contentSize</code>, we can change its <code>contentInset.bottom</code>. Another way is to add a dummy view with certain height to <code>UIStackView</code> and alter its <code>NSLayoutConstraint</code> <code>constant</code></p><p>We can’t access <code>self</code> inside init, so it’s best to have setup function</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> space = <span class="type">UIView</span>()</span><br><span class="line">    keyboardHeightConstraint = space.heightAnchor.constraint(equalToConstant: <span class="number">0</span>)</span><br><span class="line">    <span class="type">NSLayoutConstraint</span>.on([keyboardHeightConstraint])</span><br><span class="line">    stackView.addArrangedSubview(spa</span><br><span class="line">    observer = <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(</span><br><span class="line">        forName: <span class="type">UIResponder</span>.keyboardWillChangeFrameNotification,</span><br><span class="line">        object: <span class="literal">nil</span>,</span><br><span class="line">        queue: .main,</span><br><span class="line">        using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] notification <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>?.handle(notification)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Convert <code>Notification</code> to a convenient <code>Info</code> struct</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(notification: Notification)</span></span> -&gt; <span class="type">Info?</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span></span><br><span class="line">        <span class="keyword">let</span> frameValue = notification.userInfo?[<span class="type">UIResponder</span>.keyboardFrameEndUserInfoKey] <span class="type">NSValue</span>,</span><br><span class="line">        <span class="keyword">let</span> durationotification.userInfo?[<span class="type">UIResponder</span>.keyboardAnimationDurationUserInfoKey] <span class="keyword">as</span>? <span class="type">NSNumber</span>,</span><br><span class="line">        <span class="keyword">let</span> raw = notification.userInfo?[<span class="type">UIResponder</span>.keyboardAnimationCurveUserInfoKey] <span class="type">NSNumber</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Info</span>(</span><br><span class="line">        frame: frameValue.cgRectValue,</span><br><span class="line">        duration: duration.doubleValue,</span><br><span class="line">        animationOptions: <span class="type">UIView</span>.<span class="type">AnimationOptions</span>(rawValue: raw.uintValue)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can compare with UIScreen to check if Keyboard is showing or hiding</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(<span class="number">_</span> notification: Notification)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> info = convert(notification: notification) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> isHiding = info.frame.origin.y == <span class="type">UIScreen</span>.main.bounds.height</span><br><span class="line">    keyboardHeightConstraint.constant = isHiding ? <span class="number">0</span> : info.frame.hei</span><br><span class="line">    <span class="type">UIView</span>.animate(</span><br><span class="line">        withDuration: info.duration,</span><br><span class="line">        delay: <span class="number">0</span>,</span><br><span class="line">        options: info.animationOptions,</span><br><span class="line">        animations: &#123;</span><br><span class="line">            <span class="keyword">self</span>.scrollView.layoutIfNeeded()</span><br><span class="line">            <span class="keyword">self</span>.moveTextFieldIfNeeded(info: info)</span><br><span class="line">    &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To move <code>UITextField</code> we can use <a href="https://developer.apple.com/documentation/uikit/uiscrollview/1619439-scrollrecttovisible" target="_blank" rel="noopener"><code>scrollRectToVisible(_:animated:)</code></a> but we have little control over how much we want to scroll</p><blockquote><p>This method scrolls the content view so that the area defined by rect is just visible inside the scroll view. If the area is already visible, the method does nothing.</p></blockquote><p>Another way is to check if keyboard overlaps <code>UITextField</code>. To do that we use <a href="https://developer.apple.com/documentation/uikit/uiview/1622504-convertrect" target="_blank" rel="noopener"><code>convertRect:toView:</code></a> with <code>nil</code> target so it uses window coordinates. Since keyboard frame is always relative to window, we have frames in same coordinate space.</p><blockquote><p>Converts a rectangle from the receiver’s coordinate system to that of another view.</p></blockquote><blockquote><p>rect: A rectangle specified in the local coordinate system (bounds) of the receiver.<br>view: The view that is the target of the conversion operation. If view is nil, this method instead converts to window base coordinates. Otherwise, both view and the receiver must belong to the same UIWindow object.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">moveTextFieldIfNeeded</span><span class="params">(info: Info)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> input = stackView.arrangedSubviews</span><br><span class="line">        .compactMap(&#123; $<span class="number">0</span> <span class="keyword">as</span>? <span class="type">UITextField</span> &#125;)</span><br><span class="line">        .first(<span class="keyword">where</span>: &#123; $<span class="number">0</span>.isFirstResponder &#125;)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> inputFrame = input.convert(input.bounds, to: <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> inputFrame.intersects(info.frame) &#123;</span><br><span class="line">        scrollView.setContentOffset(<span class="type">CGPoint</span>(x: <span class="number">0</span>, y: inputFrame.height), animated: <span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        scrollView.setContentOffset(.zero, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Move-up-the-entire-view"><a href="#Move-up-the-entire-view" class="headerlink" title="Move up the entire view"></a>Move up the entire view</h3><p>For simplicity, we can move up the entire view</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(info: Info)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> isHiding = info.frame.origin.y == <span class="type">UIScreen</span>.main.bounds.height</span><br><span class="line">    <span class="keyword">let</span> moveUp = <span class="type">CGAffineTransform</span>(translationX: <span class="number">0</span>, y: -info.frame.height)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (view.transform, isHiding) &#123;</span><br><span class="line">    <span class="keyword">case</span> (.identity, <span class="literal">false</span>):</span><br><span class="line">        view.transform = moveUp</span><br><span class="line">    <span class="keyword">case</span> (moveUp, <span class="literal">true</span>):</span><br><span class="line">        view.transform = .identity</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prefer-willShow-and-willHide"><a href="#Prefer-willShow-and-willHide" class="headerlink" title="Prefer willShow and willHide"></a>Prefer willShow and willHide</h3><p>There ‘s an edge case with the above switch on <code>view.transform</code> and <code>isHiding</code> with one time verification sms code, which make it into the correct <code>case</code> handling. It’s safe to just set view.transform depending on <code>show</code> with <code>willHide</code> and <code>willShow</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyboardHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> view: <span class="type">UIView</span></span><br><span class="line">    <span class="keyword">var</span> observerForWillShow: <span class="type">AnyObject?</span></span><br><span class="line">    <span class="keyword">var</span> observerForWillHide: <span class="type">AnyObject?</span></span><br><span class="line">    <span class="keyword">var</span> keyboardHeightConstraint: <span class="type">NSLayoutConstraint!</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> frame: <span class="type">CGRect</span></span><br><span class="line">        <span class="keyword">let</span> duration: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">let</span> animationOptions: <span class="type">UIView</span>.<span class="type">AnimationOptions</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>(view: <span class="type">UIView</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.view = view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        observerForWillShow = <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(</span><br><span class="line">            forName: <span class="type">UIResponder</span>.keyboardWillShowNotification,</span><br><span class="line">            object: <span class="literal">nil</span>,</span><br><span class="line">            queue: .main,</span><br><span class="line">            using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] notification <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>?.handle(notification, show: <span class="literal">true</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        observerForWillHide = <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(</span><br><span class="line">            forName: <span class="type">UIResponder</span>.keyboardWillHideNotification,</span><br><span class="line">            object: <span class="literal">nil</span>,</span><br><span class="line">            queue: .main,</span><br><span class="line">            using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] notification <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>?.handle(notification, show: <span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(<span class="number">_</span> notification: Notification, show: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> info = convert(notification: notification) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">UIView</span>.animate(</span><br><span class="line">            withDuration: info.duration,</span><br><span class="line">            delay: <span class="number">0</span>,</span><br><span class="line">            options: info.animationOptions,</span><br><span class="line">            animations: &#123;</span><br><span class="line"><span class="keyword">self</span>.move(info: info, show: show)</span><br><span class="line">        &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(info: Info, show: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> moveUp = <span class="type">CGAffineTransform</span>(translationX: <span class="number">0</span>, y: -info.frame.height)</span><br><span class="line">        <span class="keyword">if</span> show &#123;</span><br><span class="line">            view.transform = moveUp</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view.transform = .identity</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(notification: Notification)</span></span> -&gt; <span class="type">Info?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> frameValue = notification.userInfo?[<span class="type">UIResponder</span>.keyboardFrameEndUserInfoKey] <span class="keyword">as</span>? <span class="type">NSValue</span>,</span><br><span class="line">            <span class="keyword">let</span> duration = notification.userInfo?[<span class="type">UIResponder</span>.keyboardAnimationDurationUserInfoKey] <span class="keyword">as</span>? <span class="type">NSNumber</span>,</span><br><span class="line">            <span class="keyword">let</span> raw = notification.userInfo?[<span class="type">UIResponder</span>.keyboardAnimationCurveUserInfoKey] <span class="keyword">as</span>? <span class="type">NSNumber</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="type">Info</span>(</span><br><span class="line">            frame: frameValue.cgRectValue,</span><br><span class="line">            duration: duration.doubleValue,</span><br><span class="line">            animationOptions: <span class="type">UIView</span>.<span class="type">AnimationOptions</span>(rawValue: raw.uintValue)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://developer.apple.com/library/archive/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html#//apple_ref/doc/uid/TP40009542-CH5-SW16" target="_blank" rel="noopener">Managing the Keyboard</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make simple form validator in Swift</title>
      <link href="/blog/How-to-make-simple-form-validator-in-Swift/"/>
      <url>/blog/How-to-make-simple-form-validator-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/328" target="_blank" rel="noopener">#328</a></strong></p><p>Sometimes we want to validate forms with many fields, for example name, phone, email, and with different rules. If validation fails, we show error message.</p><p>We can make simple <code>Validator</code> and <code>Rule</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">validate</span><span class="params">(text: String, with rules: [Rule])</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rules.compactMap(&#123; $<span class="number">0</span>.check(text) &#125;).first</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">validate</span><span class="params">(input: InputView, with rules: [Rule])</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> message = validate(text: input.textField.text ?? <span class="string">""</span>, with: rules) <span class="keyword">else</span> &#123;</span><br><span class="line">            input.messageLabel.isHidden = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input.messageLabel.isHidden = <span class="literal">false</span></span><br><span class="line">        input.messageLabel.text = message</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rule</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Return nil if matches, error message otherwise</span></span><br><span class="line">    <span class="keyword">let</span> check: (<span class="type">String</span>) -&gt; <span class="type">String?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> notEmpty = <span class="type">Rule</span>(check: &#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="number">0</span>.isEmpty ? <span class="string">"Must not be empty"</span> : <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> validEmail = <span class="type">Rule</span>(check: &#123;</span><br><span class="line">        <span class="keyword">let</span> regex = #<span class="string">"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]&#123;2,64&#125;"</span>#</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"SELF MATCHES %@"</span>, regex)</span><br><span class="line">        <span class="keyword">return</span> predicate.evaluate(with: $<span class="number">0</span>) ? <span class="literal">nil</span> : <span class="string">"Must have valid email"</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> countryCode = <span class="type">Rule</span>(check: &#123;</span><br><span class="line">        <span class="keyword">let</span> regex = #<span class="string">"^\+\d+.*"</span>#</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"SELF MATCHES %@"</span>, regex)</span><br><span class="line">        <span class="keyword">return</span> predicate.evaluate(with: $<span class="number">0</span>) ? <span class="literal">nil</span> : <span class="string">"Must have prefix country code"</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can use very expressively</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = <span class="type">Validator</span>()</span><br><span class="line">validator.validate(input: inputView, with: [.notEmpty, .validEmail])</span><br></pre></td></tr></table></figure><p>Then a few tests to make sure it works</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidatorTests</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> validator = <span class="type">Validator</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testEmpty</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">XCTAssertNil</span>(validator.validate(text: <span class="string">"a"</span>, with: [.notEmpty]))</span><br><span class="line">        <span class="type">XCTAssertNotNil</span>(validator.validate(text: <span class="string">""</span>, with: [.notEmpty]))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testEmail</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">XCTAssertNil</span>(validator.validate(text: <span class="string">"onmyway133@gmail.com"</span>, with: [.validEmail]))</span><br><span class="line">        <span class="type">XCTAssertNotNil</span>(validator.validate(text: <span class="string">"onmyway133"</span>, with: [.validEmail]))</span><br><span class="line">        <span class="type">XCTAssertNotNil</span>(validator.validate(text: <span class="string">"onmyway133.com"</span>, with: [.validEmail]))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testCountryCode</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">XCTAssertNil</span>(validator.validate(text: <span class="string">"+47 11 222 333"</span>, with: [.countryCode]))</span><br><span class="line">        <span class="type">XCTAssertNotNil</span>(validator.validate(text: <span class="string">"11 222 333"</span>, with: [.countryCode]))</span><br><span class="line">        <span class="type">XCTAssertNotNil</span>(validator.validate(text: <span class="string">"47 11 222 333"</span>, with: [.countryCode]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to organise test files</title>
      <link href="/blog/How-to-organise-test-files/"/>
      <url>/blog/How-to-organise-test-files/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/327" target="_blank" rel="noopener">#327</a></strong></p><p>In terms of tests, we usually have files for unit test, UI test, integeration test and mock.</p><blockquote><p>Out of sight, out of mind.</p></blockquote><p>Unit tests are for checking specific functions and classes, it’s more convenient to browse them side by side with source file. For example in Javascript, Kotlin and Swift</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index.js</span><br><span class="line">index.test.js</span><br><span class="line">index.mock.js</span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocationManager.kt</span><br><span class="line">LocationManager.mock.kt</span><br><span class="line">LocationManager.test.kt</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BasketHandler</span>.swift</span><br><span class="line"><span class="type">BasketHandler</span>.mock.swift</span><br><span class="line"><span class="type">BasketHandler</span>.test.swift</span><br></pre></td></tr></table></figure><p>Integration tests check features or sub features, and may cover many source files, it’s better to place them in <code>feature</code> folders</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Features</span><br><span class="line">  - Cart</span><br><span class="line">    - Sources</span><br><span class="line">    - Tests</span><br><span class="line">      - Cart.test.swift</span><br><span class="line">      - Validator.test.swift</span><br><span class="line">  - Profile</span><br><span class="line">    - Sources</span><br><span class="line">    - Tests</span><br><span class="line">      - Updater.test.swift</span><br><span class="line">      - AvatarUploader.test.swift</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> swift </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to deal with weak in closure in Swift</title>
      <link href="/blog/How-to-deal-with-weak-in-closure-in-Swift/"/>
      <url>/blog/How-to-deal-with-weak-in-closure-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/326" target="_blank" rel="noopener">#326</a></strong></p><p>Traditionally, from Swift 4.2 we need <code>guard let self</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addButton.didTouch = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span>,</span><br><span class="line">        <span class="keyword">let</span> product = <span class="keyword">self</span>.purchasedProduct()</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.delegate?.productViewController(<span class="keyword">self</span>, didAdd: product)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is cumbersome, we can invent a higher order function to zip and unwrap the optionals</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">with</span>&lt;A, B&gt;<span class="params">(<span class="number">_</span> op1: A?, <span class="number">_</span> op2: B?, <span class="number">_</span> closure: <span class="params">(A, B)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> value1 = op1, <span class="keyword">let</span> value2 = op2 &#123;</span><br><span class="line">        closure(value1, value2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addButton.didTouch = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    with(<span class="keyword">self</span>, <span class="keyword">self</span>?.purchasedProduct()) &#123;</span><br><span class="line">        $<span class="number">0</span>.delegate?.productViewController($<span class="number">0</span>, didAdd: $<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make material UITextField with floating label in iOS</title>
      <link href="/blog/How-to-make-material-UITextField-with-floating-label-in-iOS/"/>
      <url>/blog/How-to-make-material-UITextField-with-floating-label-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/325" target="_blank" rel="noopener">#325</a></strong></p><ul><li>Use <code>UILabel</code> as placeholder and move it</li><li>When label is moved up, scale it down 80%. It means it has 10% padding on the left and right when shrinked, so <code>offsetX</code> for translation is 10%</li><li>Translation transform should happen before scale</li><li>Ideally we can animate font and color change using <code>CATextLayer</code>, but with <code>UILabel</code> we can use <code>UIView.transition</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MaterialInputView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> label: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UILabel</span>()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> textField: <span class="type">UITextField</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> textField = <span class="type">UITextField</span>()</span><br><span class="line">        textField.tintColor = <span class="type">R</span>.color.primary</span><br><span class="line">        textField.textColor = <span class="type">R</span>.color.lightText</span><br><span class="line">        textField.font = <span class="type">R</span>.customFont.medium(<span class="number">16</span>)</span><br><span class="line">        textField.autocapitalizationType = .<span class="keyword">none</span></span><br><span class="line">        textField.autocorrectionType = .no</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> textField</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> line: <span class="type">UIView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> line = <span class="type">UIView</span>()</span><br><span class="line">        line.backgroundColor = <span class="type">R</span>.color.primary</span><br><span class="line">        <span class="keyword">return</span> line</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Whether label should be moved to top</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isUp: <span class="type">Bool</span> = <span class="literal">false</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            styleLabel(isUp: isUp)</span><br><span class="line">            moveLabel(isUp: isUp)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line"></span><br><span class="line">        setup()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        addSubviews([textField, label, line])</span><br><span class="line">        textField.delegate = <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            textField.leftAnchor.constraint(equalTo: leftAnchor, constant: <span class="number">16</span>),</span><br><span class="line">            textField.rightAnchor.constraint(equalTo: rightAnchor, constant: -<span class="number">16</span>),</span><br><span class="line">            textField.topAnchor.constraint(equalTo: topAnchor, constant: <span class="number">16</span>),</span><br><span class="line"></span><br><span class="line">            label.leftAnchor.constraint(equalTo: textField.leftAnchor),</span><br><span class="line">            label.centerYAnchor.constraint(equalTo: textField.centerYAnchor),</span><br><span class="line"></span><br><span class="line">            line.leftAnchor.constraint(equalTo: textField.leftAnchor),</span><br><span class="line">            line.rightAnchor.constraint(equalTo: textField.rightAnchor),</span><br><span class="line">            line.topAnchor.constraint(equalTo: textField.bottomAnchor, constant: <span class="number">8</span>),</span><br><span class="line">            line.heightAnchor.constraint(equalToConstant: <span class="number">2</span>)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        styleLabel(isUp: <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">styleLabel</span><span class="params">(isUp: Bool)</span></span> &#123;</span><br><span class="line">        <span class="type">UIView</span>.transition(</span><br><span class="line">            with: label,</span><br><span class="line">            duration: <span class="number">0.15</span>,</span><br><span class="line">            options: .curveEaseInOut,</span><br><span class="line">            animations: &#123;</span><br><span class="line">                <span class="keyword">if</span> isUp &#123;</span><br><span class="line">                    <span class="keyword">self</span>.label.font = <span class="type">R</span>.customFont.regular(<span class="number">12</span>)</span><br><span class="line">                    <span class="keyword">self</span>.label.textColor = <span class="type">R</span>.color.primary</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">self</span>.label.font = <span class="type">R</span>.customFont.medium(<span class="number">16</span>)</span><br><span class="line">                    <span class="keyword">self</span>.label.textColor = <span class="type">R</span>.color.grayText</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            completion: <span class="literal">nil</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">moveLabel</span><span class="params">(isUp: Bool)</span></span> &#123;</span><br><span class="line">        <span class="type">UIView</span>.animate(</span><br><span class="line">            withDuration: <span class="number">0.15</span>,</span><br><span class="line">            delay: <span class="number">0</span>,</span><br><span class="line">            options: .curveEaseInOut,</span><br><span class="line">            animations: &#123;</span><br><span class="line">                <span class="keyword">if</span> isUp &#123;</span><br><span class="line">                    <span class="keyword">let</span> offsetX = <span class="keyword">self</span>.label.frame.width * <span class="number">0.1</span></span><br><span class="line">                    <span class="keyword">let</span> translation = <span class="type">CGAffineTransform</span>(translationX: -offsetX, y: -<span class="number">24</span>)</span><br><span class="line">                    <span class="keyword">let</span> scale = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">0.8</span>, y: <span class="number">0.8</span>)</span><br><span class="line">                    <span class="keyword">self</span>.label.transform = translation.concatenating(scale)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">self</span>.label.transform = .identity</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            completion: <span class="literal">nil</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MaterialInputView</span>: <span class="title">UITextFieldDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldDidBeginEditing</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !isUp &#123;</span><br><span class="line">            isUp = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldEndEditing</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> text = textField.text <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isUp &amp;&amp; text.isEmpty &#123;</span><br><span class="line">            isUp = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to embed UIStackView inside UIScrollView in iOS</title>
      <link href="/blog/How-to-embed-UIStackView-inside-UIScrollView-in-iOS/"/>
      <url>/blog/How-to-embed-UIStackView-inside-UIScrollView-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/324" target="_blank" rel="noopener">#324</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">view.addSubview(scrollView)</span><br><span class="line">scrollView.addSubview(stackView)</span><br><span class="line"></span><br><span class="line"><span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">    scrollView.pinEdges(view: view),</span><br><span class="line">    stackView.pinEdges(view: scrollView)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">    stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, multiplier: <span class="number">1.0</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to animate NSCollectionView changes</title>
      <link href="/blog/How-to-animate-NSCollectionView-changes/"/>
      <url>/blog/How-to-animate-NSCollectionView-changes/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/323" target="_blank" rel="noopener">#323</a></strong></p><p>Use proxy <code>animator()</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(item: index, section: <span class="number">0</span>)</span><br><span class="line">collectionView.animator().deleteItems(at: <span class="type">Set</span>(arrayLiteral: indexPath))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(item: <span class="number">0</span>, section: <span class="number">0</span>)</span><br><span class="line">collectionView.animator().insertItems(at: <span class="type">Set</span>(arrayLiteral: indexPath))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to handle right click in AppKit</title>
      <link href="/blog/How-to-handle-right-click-in-AppKit/"/>
      <url>/blog/How-to-handle-right-click-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/322" target="_blank" rel="noopener">#322</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> gr = <span class="type">NSClickGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(onPress(<span class="number">_</span>:)))</span><br><span class="line"></span><br><span class="line">gr.buttonMask = <span class="number">0x2</span></span><br><span class="line">gr.numberOfClicksRequired = <span class="number">1</span></span><br><span class="line">view.addGestureRecognizer(gr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to show context menu in NSCollectionView</title>
      <link href="/blog/How-to-show-context-menu-in-NSCollectionView/"/>
      <url>/blog/How-to-show-context-menu-in-NSCollectionView/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/321" target="_blank" rel="noopener">#321</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClickedCollectionView</span>: <span class="title">NSCollectionView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clickedIndex: <span class="type">Int?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">menu</span><span class="params">(<span class="keyword">for</span> event: NSEvent)</span></span> -&gt; <span class="type">NSMenu?</span> &#123;</span><br><span class="line">        clickedIndex = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> point = convert(event.locationInWindow, from: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;numberOfItems(inSection: <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> frame = frameForItem(at: index)</span><br><span class="line">            <span class="keyword">if</span> <span class="type">NSMouseInRect</span>(point, frame, isFlipped) &#123;</span><br><span class="line">                clickedIndex = index</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.menu(<span class="keyword">for</span>: event)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> menu = <span class="type">NSMenu</span>()</span><br><span class="line">menu.addItem(<span class="type">NSMenuItem</span>(title: <span class="string">"Delete"</span>, action: #selector(didSelectDelete(<span class="number">_</span>:)), keyEquivalent: <span class="string">""</span>))</span><br><span class="line">collectionView.menu = menu</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didSelectDelete</span><span class="params">(<span class="number">_</span> item: NSMenuItem)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span></span><br><span class="line">        <span class="keyword">let</span> index = collectionView.clickedIndex,</span><br><span class="line">        index &lt; notes.<span class="built_in">count</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(item: index, section: <span class="number">0</span>)</span><br><span class="line">    notes.remove(at: index)</span><br><span class="line">    collectionView.deleteItems(at: <span class="type">Set</span>(arrayLiteral: indexPath))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For NSCollectionView with more than 1 sections</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frame = layoutAttributesForItem(at: <span class="type">IndexPath</span>(item: index, section: <span class="number">0</span>))?.frame ?? .zero</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to customize NSTextView in AppKit</title>
      <link href="/blog/How-to-customize-NSTextView-in-AppKit/"/>
      <url>/blog/How-to-customize-NSTextView-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/320" target="_blank" rel="noopener">#320</a></strong></p><h2 id="Scrollable"><a href="#Scrollable" class="headerlink" title="Scrollable"></a>Scrollable</h2><ul><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/TextUILayer/Tasks/TextInScrollView.html" target="_blank" rel="noopener">Putting an NSTextView Object in an NSScrollView</a> </li><li>Use xib then load</li></ul><img width="1407" alt="textview" src="https://user-images.githubusercontent.com/2284279/59969303-800d8900-954a-11e9-90f9-07d63b7a64f2.png"><h2 id="Embed-image-or-NSTextAttachmentCellProtocol"><a href="#Embed-image-or-NSTextAttachmentCellProtocol" class="headerlink" title="Embed image or NSTextAttachmentCellProtocol"></a>Embed image or <code>NSTextAttachmentCellProtocol</code></h2><ul><li>Select TextView</li><li>Select <code>Rich Text</code> and <code>Graphics</code></li><li>Select Size Inspector -&gt; Resizable and tick both Horizontally and Vertically</li></ul><h2 id="Customize"><a href="#Customize" class="headerlink" title="Customize"></a>Customize</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">scrollView.drawsBackground = false</span><br><span class="line">textView.drawsBackground = false</span><br><span class="line">textView.string = &quot;What&apos;s on your mind?&quot;</span><br><span class="line">textView.delegate = self</span><br><span class="line">textView.selectedTextAttributes = [</span><br><span class="line">    NSAttributedString.Key.backgroundColor: NSColor(hex: &quot;414858&quot;),</span><br><span class="line">    NSAttributedString.Key.foregroundColor: NSColor(hex: &quot;ACB2BE&quot;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">extension MainView: NSTextViewDelegate &#123;</span><br><span class="line">    func textViewDidChangeSelection(_ notification: Notification) &#123;</span><br><span class="line">        // Change text color again after image dragging</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use custom font in AppKit</title>
      <link href="/blog/How-to-use-custom-font-in-AppKit/"/>
      <url>/blog/How-to-use-custom-font-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/319" target="_blank" rel="noopener">#319</a></strong></p><ul><li>Add fonts to targets</li><li>Declare in Info.plist</li></ul><p><a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/GeneralPurposeKeys.html#//apple_ref/doc/uid/TP40009253-SW8" target="_blank" rel="noopener">https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/GeneralPurposeKeys.html#//apple_ref/doc/uid/TP40009253-SW8</a></p><blockquote><p>ATSApplicationFontsPath (String - macOS) identifies the location of a font file or directory of fonts in the bundle’s Resources directory. If present, macOS activates the fonts at the specified path for use by the bundled app. The fonts are activated only for the bundled app and not for the system as a whole. The path itself should be specified as a relative directory of the bundle’s Resources directory. For example, if a directory of fonts was at the path /Applications/MyApp.app/Contents/Resources/Stuff/MyFonts/, you should specify the string Stuff/MyFonts/ for the value of this key.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>ATSApplicationFontsPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Reference by name</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSFont</span>(name: <span class="string">"FiraCode-Bold"</span>, size: <span class="number">14</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make custom controller for View in iOS</title>
      <link href="/blog/How-to-make-custom-controller-for-View-in-iOS/"/>
      <url>/blog/How-to-make-custom-controller-for-View-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/318" target="_blank" rel="noopener">#318</a></strong></p><p>I do UI in code, and usually separate between View and ViewController.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileView</span>: <span class="title">UIView</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.view = <span class="type">ProfileView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But in places where using UIViewController and manage their view controller containment hierarchy is not desired, then we can roll out a normal object to act as the controller.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> profileView: <span class="type">ProfileView</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">init</span>(profileView: <span class="type">ProfileView</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.profileView = profileView</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(profile: Profile)</span></span> &#123;</span><br><span class="line">    profileView.nameLabel.text = profile.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the name Controller sounds confusing with <code>UIViewController</code>, I usually use <code>Handler</code>, which contains other <code>Handler</code> to handle logic for view</p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A bit about Design</title>
      <link href="/blog/A-bit-about-Design/"/>
      <url>/blog/A-bit-about-Design/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/317" target="_blank" rel="noopener">#317</a></strong></p><ul><li><a href="https://medium.com/@nathangitter/why-your-app-looks-better-in-sketch-3a01b22c43d7" target="_blank" rel="noopener">Why Your App Looks Better in Sketch</a></li><li><a href="https://uxplanet.org/8-tips-for-dark-theme-design-8dfc2f8f7ab6" target="_blank" rel="noopener">8 Tips for Dark Theme Design</a></li></ul><h2 id="UX"><a href="#UX" class="headerlink" title="UX"></a>UX</h2><ul><li><a href="https://growth.design/case-studies/duolingo-user-retention/" target="_blank" rel="noopener">Duolingo User Retention</a></li><li><a href="https://brianlovin.com/design-details" target="_blank" rel="noopener">Design Details</a></li></ul><h2 id="Showcase"><a href="#Showcase" class="headerlink" title="Showcase"></a>Showcase</h2><ul><li><a href="https://saaspages.xyz/" target="_blank" rel="noopener">https://saaspages.xyz/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Understanding device and OS share for iOS and Android</title>
      <link href="/blog/Understanding-device-and-OS-share-for-iOS-and-Android/"/>
      <url>/blog/Understanding-device-and-OS-share-for-iOS-and-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/316" target="_blank" rel="noopener">#316</a></strong></p><ul><li><a href="https://medium.com/finn-no/browsers-and-devices-used-in-2018-b5c1a76f819a" target="_blank" rel="noopener">Browsers and devices used in 2018</a></li><li><a href="https://developer.apple.com/support/app-store/" target="_blank" rel="noopener">AppStore measurement</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make UIPanGestureRecognizer work with horizontal swipe in UICollectionView</title>
      <link href="/blog/How-to-make-UIPanGestureRecognizer-work-with-horizontal-swipe-in-UICollectionView/"/>
      <url>/blog/How-to-make-UIPanGestureRecognizer-work-with-horizontal-swipe-in-UICollectionView/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/315" target="_blank" rel="noopener">#315</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PanCollectionViewController</span>: <span class="title">UIGestureRecognizerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gestureRecognizerShouldBegin</span><span class="params">(<span class="number">_</span> gestureRecognizer: UIGestureRecognizer)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> velocity = panGR.velocity(<span class="keyword">in</span>: panGR.view)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(velocity.y) &gt; <span class="built_in">abs</span>(velocity.x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use media query in CSS</title>
      <link href="/blog/How-to-use-media-query-in-CSS/"/>
      <url>/blog/How-to-use-media-query-in-CSS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/314" target="_blank" rel="noopener">#314</a></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">60%</span>;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../images/wallpaper.png"</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: top right;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>What&#39;s new in iOS</title>
      <link href="/blog/What&#39;s-new-in-iOS/"/>
      <url>/blog/What&#39;s-new-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/313" target="_blank" rel="noopener">#313</a></strong></p><h2 id="iOS-10"><a href="#iOS-10" class="headerlink" title="iOS 10"></a>iOS 10</h2><p>➕<a href="https://developer.apple.com/documentation/usernotifications" target="_blank" rel="noopener">UserNotifications</a></p><blockquote><p>Push user-facing notifications to the user’s device from a server, or generate them locally from your app.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/uikit/uiviewpropertyanimator" target="_blank" rel="noopener">UIViewPropertyAnimator</a></p><blockquote><p>A class that animates changes to views and allows the dynamic modification of those animations.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/coredata/nspersistentcontainer" target="_blank" rel="noopener">NSPersistentContainer</a></p><blockquote><p>A container that encapsulates the Core Data stack in your app.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/uikit/uifeedbackgenerator" target="_blank" rel="noopener">UIFeedbackGenerator</a></p><blockquote><p>The abstract superclass for all feedback generators.</p></blockquote><h2 id="iOS-10-3"><a href="#iOS-10-3" class="headerlink" title="iOS 10.3"></a>iOS 10.3</h2><p>➕<a href="https://developer.apple.com/documentation/storekit/skstorereviewcontroller" target="_blank" rel="noopener">SKStoreReviewController</a></p><blockquote><p>An object that controls the process of requesting App Store ratings and reviews from users.</p></blockquote><h2 id="iOS-11"><a href="#iOS-11" class="headerlink" title="iOS 11"></a>iOS 11</h2><p>➕<a href="https://developer.apple.com/documentation/uikit/uiview/2891102-safearealayoutguide" target="_blank" rel="noopener">safeAreaLayoutGuide</a></p><blockquote><p>The layout guide representing the portion of your view that is unobscured by bars and other content.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/coreml" target="_blank" rel="noopener">CoreML</a></p><blockquote><p>Integrate machine learning models into your app.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/vision" target="_blank" rel="noopener">Vision</a></p><blockquote><p>Apply computer vision algorithms to perform a variety of tasks on input images and video.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/arkit" target="_blank" rel="noopener">ARKit</a></p><blockquote><p>Integrate iOS device camera and motion features to produce augmented reality experiences in your app or game.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/devicecheck" target="_blank" rel="noopener">DeviceCheck</a></p><blockquote><p>Access per-device, per-developer data that your associated server can use in its business logic.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/uikit/drag_and_drop" target="_blank" rel="noopener">Drag and Drop</a></p><blockquote><p>Bring drag and drop to your app by using interaction APIs with your views.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/corenfc" target="_blank" rel="noopener">CoreNFC</a></p><blockquote><p>Detect NFC tags and read messages that contain NDEF data.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/quartzcore/calayer/2877488-maskedcorners" target="_blank" rel="noopener">maskedCorners</a></p><blockquote><p>Animatable corner radius</p></blockquote><h2 id="iOS-12"><a href="#iOS-12" class="headerlink" title="iOS 12"></a>iOS 12</h2><p>➕<a href="https://developer.apple.com/documentation/authenticationservices" target="_blank" rel="noopener">AuthenticationServices</a></p><blockquote><p>Make it easy for users to log into apps and services.</p></blockquote><h2 id="iOS-13"><a href="#iOS-13" class="headerlink" title="iOS 13"></a>iOS 13</h2><p>➕<a href="https://developer.apple.com/documentation/swiftui" target="_blank" rel="noopener">SwiftUI</a></p><blockquote><p>Declare the user interface and behavior for your app on every platform.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/combine" target="_blank" rel="noopener">Combine</a></p><blockquote><p>Customize handling of asynchronous events by combining event-processing operators.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/cryptokit" target="_blank" rel="noopener">CryptoKit</a></p><blockquote><p>Perform cryptographic operations securely and efficiently.</p></blockquote><p>➕<a href="https://developer.apple.com/documentation/uikit/uisearchtextfield" target="_blank" rel="noopener">UISearchTextField</a></p><blockquote><p>Expose UISearchTextField on UISearchBar</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to avoid crash when closing NSWindow for agent macOS app</title>
      <link href="/blog/How-to-avoid-crash-when-closing-NSWindow-for-agent-macOS-app/"/>
      <url>/blog/How-to-avoid-crash-when-closing-NSWindow-for-agent-macOS-app/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/312" target="_blank" rel="noopener">#312</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosableWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.orderOut(<span class="type">NSApp</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> window = <span class="type">ClosableWindow</span>(</span><br><span class="line">    contentRect: rect,</span><br><span class="line">    styleMask: [.titled, .closable],</span><br><span class="line">    backing: .buffered,</span><br><span class="line">    <span class="keyword">defer</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.makeKeyAndOrderFront(<span class="type">NSApp</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to get cell at center during scroll in UICollectionView</title>
      <link href="/blog/How-to-get-cell-at-center-during-scroll-in-UICollectionView/"/>
      <url>/blog/How-to-get-cell-at-center-during-scroll-in-UICollectionView/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/311" target="_blank" rel="noopener">#311</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HorizontalUsersViewController</span>: <span class="title">UIScrollViewDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDecelerating</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> point = view.convert(collectionView.center, to: collectionView)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> indexPath = collectionView.indexPathForItem(at: point),</span><br><span class="line">            indexPath.item &lt; users.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> user = users[indexPath.item]</span><br><span class="line">        delegate?.didScrollTo(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to downsample image in iOS</title>
      <link href="/blog/How-to-downsample-image-in-iOS/"/>
      <url>/blog/How-to-downsample-image-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/310" target="_blank" rel="noopener">#310</a></strong></p><ul><li><a href="https://www.swiftjectivec.com/optimizing-images/" target="_blank" rel="noopener">https://www.swiftjectivec.com/optimizing-images/</a></li><li><a href="https://nshipster.com/image-resizing/" target="_blank" rel="noopener">https://nshipster.com/image-resizing/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to show location in Apple Maps and Google Maps app in iOS</title>
      <link href="/blog/How-to-show-location-in-Apple-Maps-and-Google-Maps-app-in-iOS/"/>
      <url>/blog/How-to-show-location-in-Apple-Maps-and-Google-Maps-app-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/309" target="_blank" rel="noopener">#309</a></strong></p><h2 id="Apple-Maps"><a href="#Apple-Maps" class="headerlink" title="Apple Maps"></a>Apple Maps</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> placemark = <span class="type">MKPlacemark</span>(coordinate: coordinate, addressDictionary: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> mapItem = <span class="type">MKMapItem</span>(placemark: placemark)</span><br><span class="line">mapItem.name = shop.name</span><br><span class="line">mapItem.openInMaps(launchOptions: [:])</span><br></pre></td></tr></table></figure><h2 id="Google-Maps"><a href="#Google-Maps" class="headerlink" title="Google Maps"></a>Google Maps</h2><ul><li><a href="https://developers.google.com/maps/documentation/urls/ios-urlscheme" target="_blank" rel="noopener">https://developers.google.com/maps/documentation/urls/ios-urlscheme</a></li><li>Use <code>q</code> to show pin</li></ul><p>Since iOS 9, we need to declare <code>LSApplicationQueriesSchemes</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSApplicationQueriesSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>comgooglemaps<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"comgooglemaps://"</span></span><br><span class="line">string += <span class="string">"?q=Food"</span></span><br><span class="line">string += <span class="string">"&amp;center=\(coordinate.latitude),\(coordinate.longitude)"</span></span><br><span class="line">string += <span class="string">"&amp;zoom=15"</span></span><br><span class="line"><span class="keyword">let</span> googleUrl = <span class="type">URL</span>(string: string)!</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="type">UIApplication</span>.shared.canOpenURL(<span class="type">URL</span>(string: <span class="string">"comgooglemaps://"</span>)!) &#123;</span><br><span class="line">    <span class="type">UIApplication</span>.shared.<span class="keyword">open</span>(googleUrl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make convenient touch handler for UIButton in iOS</title>
      <link href="/blog/How-to-make-convenient-touch-handler-for-UIButton-in-iOS/"/>
      <url>/blog/How-to-make-convenient-touch-handler-for-UIButton-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/308" target="_blank" rel="noopener">#308</a></strong></p><p>If you don’t want to use <a href="https://github.com/onmyway133/EasyClosure" target="_blank" rel="noopener">https://github.com/onmyway133/EasyClosure</a> yet, it’s easy to roll out a closure based <code>UIButton</code>. The cool thing about closure is it captures variables</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClosureButton</span>: <span class="title">UIButton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> didTouch: (() -&gt; <span class="type">Void</span>)?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line"></span><br><span class="line">        addTarget(<span class="keyword">self</span>, action: #selector(buttonTouched(<span class="number">_</span>:)), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">buttonTouched</span><span class="params">(<span class="number">_</span>: UIButton)</span></span> &#123;</span><br><span class="line">        didTouch?()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then in <code>cellForItem</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cell: <span class="type">UserCell</span> = collectionView.dequeue(<span class="keyword">for</span>: indexPath)!</span><br><span class="line">    <span class="keyword">let</span> user = users[indexPath.item]</span><br><span class="line">    cell.powerButton.didTouch = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>?.openPowerView(user)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this we can even forward touch event to another button</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forwardTouchEvent</span><span class="params">(button: ClosureButton)</span></span> &#123;</span><br><span class="line">    didTouch = &#123; [<span class="keyword">weak</span> button] <span class="keyword">in</span></span><br><span class="line">        button?.didTouch?()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to format distance in iOS</title>
      <link href="/blog/How-to-format-distance-in-iOS/"/>
      <url>/blog/How-to-format-distance-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/307" target="_blank" rel="noopener">#307</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> formatter = <span class="type">MKDistanceFormatter</span>()</span><br><span class="line">formatter.unitStyle = .abbreviated</span><br><span class="line">formatter.units = .metric</span><br><span class="line">distanceLabel.text = formatter.string(fromDistance: <span class="built_in">distance</span>) <span class="comment">// 700m, 1.7km</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to mock grpc model in Swift</title>
      <link href="/blog/How-to-mock-grpc-model-in-Swift/"/>
      <url>/blog/How-to-mock-grpc-model-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/306" target="_blank" rel="noopener">#306</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json: [<span class="type">String</span>: <span class="type">Any</span>] = [</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"123"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Thor"</span>,</span><br><span class="line">    <span class="string">"isInMarvel"</span>: <span class="literal">true</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = <span class="keyword">try</span> <span class="type">JSONSerialization</span>.data(withJSONObject: json, options: [])</span><br><span class="line"><span class="keyword">let</span> string = <span class="type">String</span>(data: data, encoding: .utf8)!</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">try</span> <span class="type">Hero</span>(jsonString: string)</span><br></pre></td></tr></table></figure><p>If we use <code>withValue</code> from <a href="https://github.com/onmyway133/blog/issues/354" target="_blank" rel="noopener">How to simplify struct mutating in Swift</a> then we can mock easily</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">mock</span><span class="params">()</span></span> -&gt; <span class="type">Hero</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> withValue(<span class="type">Hero</span>()) &#123;</span><br><span class="line">            $<span class="number">0</span>.id = <span class="string">"123"</span></span><br><span class="line">            $<span class="number">0</span>.name = <span class="string">"Thor"</span></span><br><span class="line">            $<span class="number">0</span>.isInMarvel = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Favorite WWDC 2019 sessions</title>
      <link href="/blog/Favorite-WWDC-2019-sessions/"/>
      <url>/blog/Favorite-WWDC-2019-sessions/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/305" target="_blank" rel="noopener">#305</a></strong></p><p><img src="https://user-images.githubusercontent.com/2284279/59388887-40d28180-8d6d-11e9-9a02-582ce19d6f81.jpeg" alt="w1"></p><p>This year I’m lucky enough to get the ticket to WWDC and I couldn’t be more satisfied. 5 conference days full of awesomeness, talks, labs and networking, all make WWDC special and memorial conference for every attendee.</p><p>As predicted by many, Marzipan (now officially called Project Catalyst) a technology that could allow iOS apps to be ported to macOS, would be the main topic for this year. But WWDC went more spectacular than that, with dark mode on iOS, independent watchOS apps, and SwiftUI being the star of the show. With over 150 sessions and extra videos, it can be a bit overwhelming to catch up, so I sum up 10 essential sessions to get started. It’s good to catch up with the latest technology, but be aware that frameworks and APIs come and get deprecated very often. It’s better to understand why they are introduced, how to learn the skills and mindset so we can apply them in our apps to delight user experience.</p><p>Firstly, a little tip to get the most of WWDC videos. Although you can watch on <a href="https://developer.apple.com/videos/wwdc2019" target="_blank" rel="noopener">Apple developer website</a>, there’s <a href="https://wwdc.io/" target="_blank" rel="noopener">WWDC for macOS app</a> that allows much more comfortable watching experience. There we can tweak playing speed, picture in picture view mode, favorite and download videos for offline watching. </p><p>Secondly, for those of you who want to search some texts in the talks, there is <a href="https://asciiwwdc.com/" target="_blank" rel="noopener">ASCIIwwdc</a> that provides full transcripts of all the talks.</p><h2 id="1-Platform-State-of-the-Union"><a href="#1-Platform-State-of-the-Union" class="headerlink" title="1. Platform State of the Union"></a>1. <a href="https://developer.apple.com/videos/play/wwdc2019/103/" target="_blank" rel="noopener">Platform State of the Union</a></h2><p>If you only have time for 1 video, this is it. Right after the <a href="https://developer.apple.com/videos/play/wwdc2019/101/" target="_blank" rel="noopener">Keynote</a>, Platform State of the Union is like keynote for developers as it highlights important development changes.</p><ul><li>macOS 10.15, iOS 13, watchOS 6 and tvOS 13: As usual we get version bumps on all major platforms, which brings lots of new features and enhancement. macOS 10.15 is caleld Catalina and there’s a whole new platform for iPad called iPadOS.</li><li>Security and Privacy: Adding to security enhancement from last year, this year shows how Apple really commits into this. There are one-time location permission, signing with Apple, security protocol for HomeKit, new crypto framework which marks MD5 as insecure. Also, apps that target kids can’t display ad or include analytics.</li><li>tvOS 13 gets multiple user support</li><li>watchOS 6 makes way for independent watch apps, which does not require accompanying iOS apps. There’s also dedicated watch appstore.</li><li>iOS 13 now can live in the dark, but dropping support for iPhone 5S, 6 and below. Also, there is ability to toggle language setting per app only.</li><li>iPadOS is a spinoff version of iOS for now, they look the same but they are expected to take different paths. It includes mouse support and requires iPad Air 2 and newer devices.</li><li>macOS 10.15 introduces a replacement of bash with zsh. It also supports SideCar which allows iPad as an external display. Last but not least, there is Project Catalyst that enables iPad apps to run on the mac.</li><li>Xcode 11 includes Swift 5.1 that can target latest SDKs. It brings a new look and feel with tons of features like minimap, Xcode preview, official support for Swift Package Manager, source control enhancement and test plan.</li></ul><h2 id="2-What’s-New-in-Swift"><a href="#2-What’s-New-in-Swift" class="headerlink" title="2. What’s New in Swift"></a>2. <a href="https://developer.apple.com/videos/play/wwdc2019/402/" target="_blank" rel="noopener">What’s New in Swift</a></h2><p>Although <a href="https://github.com/apple/swift" target="_blank" rel="noopener">Swift is developed in the open</a>, it’s easy to lose track of in tons of proposals and changes. Swift 5.1 brings lots of cool features that power SwiftUI and Combine, so it’s a prerequisite. </p><ul><li>Module stability: This looks unimportant but this may be the most key feature of Swift 5.1. Unlike ABI stability we get in Swift 5, module stability helps resolves differences at compile time. In other words, this ensures a Swift 5 library will work with the future Swift compilers.</li></ul><img width="682" alt="a1" src="https://user-images.githubusercontent.com/2284279/59390812-a8d79680-8d72-11e9-8503-1266788e9177.png"><ul><li>A single expression can be declared without return keyword</li><li>Function builder, with marker <code>@_functionBuilder</code> which works pretty much like function with receiver in Kotlin, allows for some very neat DSL syntax.</li><li>Property wrapper, a counterpart of Kotlin delegated property, allows property accessors to be used in a convenient way. Shipped with Swift 5.1, we can use that with <code>@propertyWrapper</code> annotation.</li><li>Opaque return type with <code>some</code> keyword remedies limitation of Swift protocol with Self or associcated types requirements.</li><li>Among other things, there are other cool features like universal <code>Self</code>, static subscripts, collection diffing and matching against optional.</li></ul><h2 id="3-Introducing-SwiftUI-Building-Your-First-App"><a href="#3-Introducing-SwiftUI-Building-Your-First-App" class="headerlink" title="3. Introducing SwiftUI: Building Your First App"></a>3. <a href="https://developer.apple.com/videos/play/wwdc2019/204/" target="_blank" rel="noopener">Introducing SwiftUI: Building Your First App</a></h2><p>Welcome to the spotlight of WWDC 2019, SwiftUI. It may be the most exciting announcement since Swift was introduced in 2014. SwiftUI is not just a new framework, it’s a complete paradigm shift from imperative programming with UIKit/AppKit to a declarative world. I was amazed by how quickly React and Flutter allows fast prototyping and developing, so I’m very happy Apple finally makes this available natively on all platforms.</p><img width="1063" alt="w2" src="https://user-images.githubusercontent.com/2284279/59391590-0a990000-8d75-11e9-90bd-3926f7fbc1b9.png"><p>The cool thing about SwiftUI is that it is expressive and has consistent syntax across platforms. So it is a learn once, write anywhere concept. Together with hot reloading of Xcode Preview, this ends the long debate among iOS community about whether to write UI in code or Storyboard, as the source of truth is now the concise code, but users are free to change any UI details via interactive Preview.</p><p>Not only SwiftUI handles consistent UI according to Apple design guideline, it also provides many features for free like accessibility, dark mode and other bookkeeping.</p><p>SwiftUI supports latest platform versions and no backward compatibility, so some of us have to wait 1 or 2 more years until iOS 13 is widely adopted. To learn more about SwiftUI, there are other advanced sesions like </p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2019/216/" target="_blank" rel="noopener">SwiftUI Essentials</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2019/237/" target="_blank" rel="noopener">Building Custom Views with SwiftUI</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2019/226/" target="_blank" rel="noopener">Data Flow Through SwiftUI</a> </li><li><a href="https://developer.apple.com/videos/play/wwdc2019/240/" target="_blank" rel="noopener">SwiftUI On All Devices</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2019/231/" target="_blank" rel="noopener">Integrating SwiftUI</a></li></ul><h2 id="4-Implementing-Dark-Mode-on-iOS"><a href="#4-Implementing-Dark-Mode-on-iOS" class="headerlink" title="4. Implementing Dark Mode on iOS"></a>4. <a href="https://developer.apple.com/videos/play/wwdc2019/214/" target="_blank" rel="noopener">Implementing Dark Mode on iOS</a></h2><p>As much as I was excited about Dark theme in Android Q, Dark Mode in iOS is something that eases my eyes. Some apps also support Dark theme by their owns, but with iOS 13, supporting Dark mode to our apps is not a daunting task. There are more vibrancy materials, system colors that adapts automatically to dark and light modes. We can also select images for each mode in Asset Catalog easily.</p><img width="1110" alt="w4" src="https://user-images.githubusercontent.com/2284279/59392111-c9a1eb00-8d76-11e9-8083-6ba6e9054410.png"><h2 id="5-Introducing-Combine-and-Advances-in-Foundation"><a href="#5-Introducing-Combine-and-Advances-in-Foundation" class="headerlink" title="5. Introducing Combine and Advances in Foundation"></a>5. <a href="https://developer.apple.com/videos/play/wwdc2019/711/" target="_blank" rel="noopener">Introducing Combine and Advances in Foundation</a></h2><p>Combine is a unified declarative framework for processing values over time. As a huge fan of Rx, Combine looks like home. It was thrilled to see this finnaly get supported official by Apple. This simplifying asyncrhonous programming a lot, also streamline other communication patterns like KVO and notification center.</p><img width="1159" alt="w5" src="https://user-images.githubusercontent.com/2284279/59392379-be02f400-8d77-11e9-8daa-923cbb20caa0.png"><p>Combine is the force the powers reactive nature in SwiftUI with <code>Binding</code> and <code>BindableObject</code>. There’s also lots of improvements to Foundation like collection diffing, new list and relative formatters, and notably Combine syntax for <code>URLSession</code>, which makes networking a breeze.</p><p>To learn more about Combine, there’s <a href="https://developer.apple.com/videos/play/wwdc2019/721/" target="_blank" rel="noopener">Combine in Practice</a> where we can learn more about error handling, schedule work and many operators on streams.</p><img width="1001" alt="w6" src="https://user-images.githubusercontent.com/2284279/59392558-55684700-8d78-11e9-8c52-27e2ecd18d89.png"><h2 id="6-Modernizing-Your-UI-for-iOS-13"><a href="#6-Modernizing-Your-UI-for-iOS-13" class="headerlink" title="6. Modernizing Your UI for iOS 13"></a>6. <a href="https://developer.apple.com/videos/play/wwdc2019/224/" target="_blank" rel="noopener">Modernizing Your UI for iOS 13</a></h2><p>Take a look at this talk to learn about new features in iOS 13 that we should be aware in our apps. Newly in iOS 13, we can take advantage of card style modal presentation that is very cumbersome to replicate ourselves. There’s also new <code>UISearchBarTextField</code> with advanced customizations for token and inputs. Lastly, the new <code>UIMenu</code> makes showing context menu trivial and make way for iPad apps to behave like native on the mac.</p><img width="996" alt="w8" src="https://user-images.githubusercontent.com/2284279/59392862-7c734880-8d79-11e9-9281-0c164b0876bb.png"><h2 id="7-Modern-Swift-API-Design"><a href="#7-Modern-Swift-API-Design" class="headerlink" title="7. Modern Swift API Design"></a>7. <a href="https://developer.apple.com/videos/play/wwdc2019/415/" target="_blank" rel="noopener">Modern Swift API Design</a></h2><p>If you’re developing iOS apps, chances are that you have already stumbled upon <a href="https://swift.org/documentation/api-design-guidelines/" target="_blank" rel="noopener">API Design Guidelines</a> which contains valuable guides to structuring our Swift code.</p><img width="933" alt="w7" src="https://user-images.githubusercontent.com/2284279/59392647-b263fd00-8d78-11e9-9c70-ec3d4686f98c.png"><p>This highlights my most favorite programming advice “Clarity at the point of use”, because things we declare are written only once, but read many many times, so we should make those concise and clear. There’s also mention of preferring generic over protocol which reminds me of protocol witness technique.</p><p>This talk details how Apple engineers themselves design Swift code in their RealityKit and SwiftUI frameworks.</p><h2 id="8-Optimizing-App-Launch"><a href="#8-Optimizing-App-Launch" class="headerlink" title="8. Optimizing App Launch"></a>8. <a href="https://developer.apple.com/videos/play/wwdc2019/423/" target="_blank" rel="noopener">Optimizing App Launch</a></h2><p>The launch time of your app can be decisive in user experience, it needs to be fast and do just the necessary things. With enhancements via shared and cached frameworks, apps now load faster on iOS 13. But there’s more thing we can do to improve this, thanks to the new App Launch profiler in Xcode 11, together with app launch time measurement in XCTests. The 3 words we can take away from this talk is minimize, prioritize, and optimize work at this critical launch time.</p><img width="887" alt="w9" src="https://user-images.githubusercontent.com/2284279/59392966-d96efe80-8d79-11e9-98ab-eecaaf363db2.png"><h2 id="9-Introducing-iPad-Apps-for-Mac"><a href="#9-Introducing-iPad-Apps-for-Mac" class="headerlink" title="9. Introducing iPad Apps for Mac"></a>9. <a href="https://developer.apple.com/videos/play/wwdc2019/205/" target="_blank" rel="noopener">Introducing iPad Apps for Mac</a></h2><p>Starting with iOS 13 with Project Catalyst, there’s a new target environment check called UIKitForMac, which allows iPad apps to target the mac while using the same code base. Most of the UI after porting have the correct look and feel like a native macOS app with many features provided for free like window management. There are, kind of obviously, some frameworks that are designed specifically for phone and tablet experience, can’t be supported in macOS.</p><img width="1147" alt="w11" src="https://user-images.githubusercontent.com/2284279/59393110-729e1500-8d7a-11e9-9ed8-f6b91ccd03f1.png"><p>There are other sesions like <a href="https://developer.apple.com/videos/play/wwdc2019/235/" target="_blank" rel="noopener">Taking iPad Apps for Mac to the Next Level</a> where we can learn more about this.</p><h2 id="10-Creating-Independent-Watch-Apps"><a href="#10-Creating-Independent-Watch-Apps" class="headerlink" title="10. Creating Independent Watch Apps"></a>10. <a href="https://developer.apple.com/videos/play/wwdc2019/208/" target="_blank" rel="noopener">Creating Independent Watch Apps</a></h2><img width="1088" alt="w13" src="https://user-images.githubusercontent.com/2284279/59393274-21daec00-8d7b-11e9-8ddf-0fd809b0570c.png"><p>watchOS finally gets its own Appstore and the ability to run independent watchOS apps without a companying iOS app. With the introduction of URLSession and streaming APIs for the watch, together with enhancements in push notifications, Apple sign in, debugging, this can’t be a better time to start developing for the watch.</p><hr><p>It is stunning to see how Apple comes up with so many cool announcements this year while keeping innovation and quality high. There are more sessions to explore, head over to <a href="https://developer.apple.com/videos/wwdc2019" target="_blank" rel="noopener">WWDC 2019 developer website</a> to learn more.</p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Support IP handover in rtpproxy for VoIP applications</title>
      <link href="/blog/Support-IP-handover-in-rtpproxy-for-VoIP-applications/"/>
      <url>/blog/Support-IP-handover-in-rtpproxy-for-VoIP-applications/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/304" target="_blank" rel="noopener">#304</a></strong></p><p>If you do <a href="https://github.com/onmyway133/blog/issues/284" target="_blank" rel="noopener">VoIP applications</a>, especially with open sources like pjsip, you may encounter <a href="https://www.kamailio.org/w/" target="_blank" rel="noopener">kamalio</a> and <a href="http://www.rtpproxy.org/" target="_blank" rel="noopener">rtpproxy</a> to serve SIP requests. Due to limitation of NAT traversals, rtpproxy is needed to work around NAT. All SIP handshake requests go through a proxy server, but rtpproxy can also relay voice, video or any RTP stream of data. When I played with rtpproxy, it was before version <a href="http://www.rtpproxy.org/post/v2release/" target="_blank" rel="noopener">2.0</a> and I need to handle IP handover. This refers to the scenario when user switches between different network, for example from Wifi to 4G and they get new IP. Normally this means ending in the SIP call, but the expectation is that we can retry and continue the call if possible for users.</p><p>That’s why I forked rtpproxy and add IP handover support. You can check the GitHub repo at <a href="https://github.com/onmyway133/rtpproxy" target="_blank" rel="noopener">rtpproxy</a>.</p><p>Use src_cnt to track the number of consecutive packets from different address. When this number exceeds THRESHOLD (10 for RTP and 2 for RTCP), I switch to this new address</p><p>This way</p><ul><li><p>Client can ALWAYS change IP when he switches from 3G to Wifi, or from this Wifi hotspot to another</p></li><li><p>There’s no chance for attack, unless attacker sends &gt; 10 (RTP THRESHOLD) packets in 20ms (supposed my client sends packets every 20ms)</p></li></ul><p>This idea is borrowed from <a href="http://www.pjsip.org/pjmedia/docs/html/group__PJMEDIA__CONFIG.htm" target="_blank" rel="noopener">http://www.pjsip.org/pjmedia/docs/html/group__PJMEDIA__CONFIG.htm</a></p><p>There is a macro PJMEDIA_RTP_NAT_PROBATION_CNT. Basically, it is</p><blockquote><p><em>“See if source address of RTP packet is different than the configured address, and switch RTP remote address to source packet address after several consecutive packets have been received.”</em></p></blockquote><p>Mobile clients now change IP frequently, from these hotspots to those. So if rtpproxy can support this feature, it would be nicer.</p><p>Take a look at <a href="https://github.com/onmyway133/rtpproxy/blob/master/rtpp_session.h" target="_blank" rel="noopener">https://github.com/onmyway133/rtpproxy/blob/master/rtpp_session.h</a></p><pre><code>// IP Handover Count how many consecutive different packets are received, 0 is for callee, 1 is for caller    unsigned int src_count[2];</code></pre><p>And how it actions in <a href="https://github.com/onmyway133/rtpproxy/blob/master/main.c" target="_blank" rel="noopener">https://github.com/onmyway133/rtpproxy/blob/master/main.c</a></p><pre><code>static voidrxmit_packets(struct cfg *cf, struct rtpp_session *sp, int ridx,  double dtime){    int ndrain, i, port;    struct rtp_packet *packet = NULL;/* Repeat since we may have several packets queued on the same socket */    for (ndrain = 0; ndrain &lt; 5; ndrain++) { if (packet != NULL)     rtp_packet_free(packet);packet = rtp_recv(sp-&gt;fds[ridx]); if (packet == NULL)     break; packet-&gt;laddr = sp-&gt;laddr[ridx]; packet-&gt;rport = sp-&gt;ports[ridx]; packet-&gt;rtime = dtime;i = 0; // IP Handover do not need canupdate // Use src_count if (sp-&gt;addr[ridx] != NULL) {     /* Check that the packet is authentic, drop if it isn&apos;t */     if (sp-&gt;asymmetric[ridx] == 0) {  /*  if (memcmp(sp-&gt;addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen) != 0) {      if (sp-&gt;canupdate[ridx] == 0) {   //   // Continue, since there could be good packets in   // queue.   //   continue;      }      // Signal that an address has to be updated      rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover Set i 1st ridx %d&quot;,ridx);      i = 1;  } else if (sp-&gt;canupdate[ridx] != 0 &amp;&amp;    sp-&gt;last_update[ridx] != 0 &amp;&amp;    dtime - sp-&gt;last_update[ridx] &gt; UPDATE_WINDOW)   {      sp-&gt;canupdate[ridx] = 0;      rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover Set canupdate to 0 1st ridx %d&quot;,ridx);  }  */  if (memcmp(sp-&gt;addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen) == 0) {    sp-&gt;src_count[ridx] = 0;  }   else {   sp-&gt;src_count[ridx]++;   // IP Handover RTCP packet sends at larger interval, so must use smaller THRESHOLD   // Check to see if port is odd or even   if(sp-&gt;ports[ridx] % 2 == 0) {    if(sp-&gt;src_count[ridx] &gt;= 10) {     i = 1;    }    }   else {    if(sp-&gt;src_count[ridx] &gt;= 2) {     i = 1;    }   }  }} else {  /*   * For asymmetric clients don&apos;t check   * source port since it may be different.   */  rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover We are in asymmetric ridx %d&quot;,ridx);  if (!ishostseq(sp-&gt;addr[ridx], sstosa(&amp;packet-&gt;raddr)))      /*       * Continue, since there could be good packets in       * queue.       */      continue;     }     sp-&gt;pcount[ridx]++; } else {     sp-&gt;pcount[ridx]++;     sp-&gt;addr[ridx] = malloc(packet-&gt;rlen);     if (sp-&gt;addr[ridx] == NULL) {  sp-&gt;pcount[3]++;  rtpp_log_write(RTPP_LOG_ERR, sp-&gt;log,    &quot;can&apos;t allocate memory for remote address - &quot;    &quot;removing session&quot;);  remove_session(cf, GET_RTP(sp));  /* Break, sp is invalid now */  break;     }     /* Signal that an address have to be updated. */     rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover Set i 2nd ridx %d&quot;,ridx);      i = 1; }/*  * Update recorded address if it&apos;s necessary. Set &quot;untrusted address&quot;  * flag in the session state, so that possible future address updates  * from that client won&apos;t get address changed immediately to some  * bogus one.  */ if (i != 0) {     sp-&gt;untrusted_addr[ridx] = 1;     memcpy(sp-&gt;addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen);     // IP Handover Do not use canupdate     // After update, reset src_count     /*     if (sp-&gt;prev_addr[ridx] == NULL || memcmp(sp-&gt;prev_addr[ridx],       &amp;packet-&gt;raddr, packet-&gt;rlen) != 0)      {         sp-&gt;canupdate[ridx] = 0;  if(sp-&gt;prev_addr[ridx] == NULL)  {     rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover prev_addr NULL ridx %d&quot;,ridx);   }  rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover Set canupdate to 0 2nd ridx %d&quot;,ridx);     }     */sp-&gt;src_count[ridx] = 0;port = ntohs(satosin(&amp;packet-&gt;raddr)-&gt;sin_port);rtpp_log_write(RTPP_LOG_INFO, sp-&gt;log,       &quot;%s&apos;s address filled in: %s:%d (%s)&quot;,       (ridx == 0) ? &quot;callee&quot; : &quot;caller&quot;,       addr2char(sstosa(&amp;packet-&gt;raddr)), port,       (sp-&gt;rtp == NULL) ? &quot;RTP&quot; : &quot;RTCP&quot;);/*      * Check if we have updated RTP while RTCP is still      * empty or contains address that differs from one we      * used when updating RTP. Try to guess RTCP if so,      * should be handy for non-NAT&apos;ed clients, and some      * NATed as well.      */     if (sp-&gt;rtcp != NULL &amp;&amp; (sp-&gt;rtcp-&gt;addr[ridx] == NULL ||       !ishostseq(sp-&gt;rtcp-&gt;addr[ridx], sstosa(&amp;packet-&gt;raddr)))) {  if (sp-&gt;rtcp-&gt;addr[ridx] == NULL) {      sp-&gt;rtcp-&gt;addr[ridx] = malloc(packet-&gt;rlen);      if (sp-&gt;rtcp-&gt;addr[ridx] == NULL) {   sp-&gt;pcount[3]++;   rtpp_log_write(RTPP_LOG_ERR, sp-&gt;log,     &quot;can&apos;t allocate memory for remote address - &quot;     &quot;removing session&quot;);   remove_session(cf, sp);   /* Break, sp is invalid now */   break;      }  }  memcpy(sp-&gt;rtcp-&gt;addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen);  satosin(sp-&gt;rtcp-&gt;addr[ridx])-&gt;sin_port = htons(port + 1);  /* Use guessed value as the only true one for asymmetric clients */  sp-&gt;rtcp-&gt;canupdate[ridx] = NOT(sp-&gt;rtcp-&gt;asymmetric[ridx]);  rtpp_log_write(RTPP_LOG_INFO, sp-&gt;log, &quot;guessing RTCP port &quot;    &quot;for %s to be %d&quot;,    (ridx == 0) ? &quot;callee&quot; : &quot;caller&quot;, port + 1);     } }if (sp-&gt;resizers[ridx].output_nsamples &gt; 0)     rtp_resizer_enqueue(&amp;sp-&gt;resizers[ridx], &amp;packet); if (packet != NULL)     send_packet(cf, sp, ridx, packet);    }if (packet != NULL) rtp_packet_free(packet);}</code></pre><p>Here are some useful resources that I read</p><ul><li><a href="http://stackoverflow.com/questions/18200089/how-does-rtpproxy-handle-handover" target="_blank" rel="noopener">http://stackoverflow.com/questions/18200089/how-does-rtpproxy-handle-handover</a></li><li><a href="http://lists.sip-router.org/pipermail/sr-users/2008-March/062795.html" target="_blank" rel="noopener">http://lists.sip-router.org/pipermail/sr-users/2008-March/062795.html</a></li><li><a href="http://sourceforge.net/p/sippy/rtpproxy/ci/c71201d897ee7c5620d88bb7d56412cd9dc3362a/tree//main.c?diff=5d030295ce90f2f6ff292b0d65bae1d4318db02a" target="_blank" rel="noopener">http://sourceforge.net/p/sippy/rtpproxy/ci/c71201d897ee7c5620d88bb7d56412cd9dc3362a/tree//main.c?diff=5d030295ce90f2f6ff292b0d65bae1d4318db02a</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to test drive view in iOS</title>
      <link href="/blog/How-to-test-drive-view-in-iOS/"/>
      <url>/blog/How-to-test-drive-view-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/303" target="_blank" rel="noopener">#303</a></strong></p><p>Instead of setting up custom framework and Playground, we can just display that specific view as root view controller</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">window.rootViewController = makeTestPlayground()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeTestPlayground</span><span class="params">()</span></span> -&gt; <span class="type">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="type">UserCell</span>()</span><br><span class="line">    content.nameLabel.text = <span class="string">"Thor"</span></span><br><span class="line">    content.streetLabel.text = <span class="string">"Asgard"</span></span><br><span class="line">    content.weaponLabel.text = <span class="string">"Hammer"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> viewController = <span class="type">UIViewController</span>()</span><br><span class="line">    viewController.view.backgroundColor = .white</span><br><span class="line">    viewController.view.addSubview(content)</span><br><span class="line"></span><br><span class="line">    <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">        content.centerXAnchor.constraint(equalTo: viewController.view.centerXAnchor),</span><br><span class="line">        content.centerYAnchor.constraint(equalTo: viewController.view.centerYAnchor),</span><br><span class="line">        content.widthAnchor.constraint(equalTo: viewController.view.widthAnchor, multiplier0.<span class="number">9</span>),</span><br><span class="line">        content.heightAnchor.constraint(equalToConstant: <span class="number">200</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> viewController</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make carousel layout for UICollectionView in iOS</title>
      <link href="/blog/How-to-make-carousel-layout-for-UICollectionView-in-iOS/"/>
      <url>/blog/How-to-make-carousel-layout-for-UICollectionView-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/302" target="_blank" rel="noopener">#302</a></strong></p><h3 id="Based-on-AnimatedCollectionViewLayout"><a href="#Based-on-AnimatedCollectionViewLayout" class="headerlink" title="Based on AnimatedCollectionViewLayout"></a>Based on <a href="https://github.com/KelvinJin/AnimatedCollectionViewLayout" target="_blank" rel="noopener">AnimatedCollectionViewLayout</a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CarouselLayout</span>: <span class="title">UICollectionViewFlowLayout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForElements</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; [<span class="type">UICollectionViewLayoutAttributes</span>]? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> attributes = <span class="keyword">super</span>.layoutAttributesForElements(<span class="keyword">in</span>: rect) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> collectionView = collectionView <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> attributes.<span class="built_in">map</span>(&#123; transform(collectionView: collectionView, attribute: $<span class="number">0</span>) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldInvalidateLayout</span><span class="params">(forBoundsChange newBounds: CGRect)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(collectionView: UICollectionView, attribute: UICollectionViewLayoutAttributes)</span></span> -&gt; <span class="type">UICollectionViewLayoutAttributes</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> a = attribute</span><br><span class="line">        <span class="keyword">let</span> width = collectionView.frame.size.width</span><br><span class="line">        <span class="keyword">let</span> itemOffset = a.center.x - collectionView.contentOffset.x</span><br><span class="line">        <span class="keyword">let</span> middleOffset = (itemOffset / width) - <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">        change(</span><br><span class="line">            width: collectionView.frame.size.width,</span><br><span class="line">            attribute: attribute,</span><br><span class="line">            middleOffset: middleOffset</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> attribute</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(width: CGFloat, attribute: UICollectionViewLayoutAttributes, middleOffset: CGFloat)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> alpha: <span class="type">CGFloat</span> = <span class="number">0.8</span></span><br><span class="line">        <span class="keyword">let</span> itemSpacing: <span class="type">CGFloat</span> = <span class="number">0.21</span></span><br><span class="line">        <span class="keyword">let</span> scale: <span class="type">CGFloat</span> = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> scaleFactor = scale - <span class="number">0.1</span> * <span class="built_in">abs</span>(middleOffset)</span><br><span class="line">        <span class="keyword">let</span> scaleTransform = <span class="type">CGAffineTransform</span>(scaleX: scaleFactor, y: scaleFactor)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> translationX = -(width * itemSpacing * middleOffset)</span><br><span class="line">        <span class="keyword">let</span> translationTransform = <span class="type">CGAffineTransform</span>(translationX: translationX, y: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        attribute.alpha = <span class="number">1.0</span> - <span class="built_in">abs</span>(middleOffset) + alpha</span><br><span class="line">        attribute.transform = translationTransform.concatenating(scaleTransform)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How to use</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> layout = <span class="type">CarouselLayout</span>()</span><br><span class="line"></span><br><span class="line">layout.scrollDirection = .horizontal</span><br><span class="line">layout.sectionInset = .zero</span><br><span class="line">layout.minimumInteritemSpacing = <span class="number">0</span></span><br><span class="line">layout.minimumLineSpacing = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>We can inset cell content and use <code>let scale: CGFloat = 1.0</code> to avoid scaling down center cell</p><h3 id="Based-on-CityCollectionViewFlowLayout"><a href="#Based-on-CityCollectionViewFlowLayout" class="headerlink" title="Based on CityCollectionViewFlowLayout"></a>Based on <a href="https://github.com/appcoda/Interactive-Animation/blob/master/CityGuide/Layout/CityCollectionViewFlowLayout.swift" target="_blank" rel="noopener">CityCollectionViewFlowLayout</a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CityCollectionViewFlowLayout</span>: <span class="title">UICollectionViewFlowLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> lastCollectionViewSize: <span class="type">CGSize</span> = <span class="type">CGSize</span>.zero</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> scaleOffset: <span class="type">CGFloat</span> = <span class="number">200</span></span><br><span class="line">    <span class="keyword">var</span> scaleFactor: <span class="type">CGFloat</span> = <span class="number">0.9</span></span><br><span class="line">    <span class="keyword">var</span> alphaFactor: <span class="type">CGFloat</span> = <span class="number">0.3</span></span><br><span class="line">    <span class="keyword">var</span> lineSpacing: <span class="type">CGFloat</span> = <span class="number">25.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder <span class="number">_</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(itemSize: <span class="type">CGSize</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.itemSize = itemSize</span><br><span class="line">        minimumLineSpacing = lineSpacing</span><br><span class="line">        scrollDirection = .horizontal</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setItemSize</span><span class="params">(itemSize: CGSize)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.itemSize = itemSize</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">invalidateLayout</span><span class="params">(with context: UICollectionViewLayoutInvalidationContext)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.invalidateLayout(with: context)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> collectionView = <span class="keyword">self</span>.collectionView <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> collectionView.bounds.size != lastCollectionViewSize &#123;</span><br><span class="line">            configureContentInset()</span><br><span class="line">            lastCollectionViewSize = collectionView.bounds.size</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">targetContentOffset</span><span class="params">(forProposedContentOffset proposedContentOffset: CGPoint, withScrollingVelocity velocity: CGPoint)</span></span> -&gt; <span class="type">CGPoint</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> collectionView = <span class="keyword">self</span>.collectionView <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> proposedContentOffset</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> proposedRect = <span class="type">CGRect</span>(x: proposedContentOffset.x, y: <span class="number">0</span>, width: collectionView.bounds.width, height: collectionView.bounds.height)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> layoutAttributes = <span class="keyword">self</span>.layoutAttributesForElements(<span class="keyword">in</span>: proposedRect) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> proposedContentOffset</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> candidateAttributes: <span class="type">UICollectionViewLayoutAttributes?</span></span><br><span class="line">        <span class="keyword">let</span> proposedContentOffsetCenterX = proposedContentOffset.x + collectionView.bounds.width / <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> attributes <span class="keyword">in</span> layoutAttributes &#123;</span><br><span class="line">            <span class="keyword">if</span> attributes.representedElementCategory != .cell &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> candidateAttributes == <span class="literal">nil</span> &#123;</span><br><span class="line">                candidateAttributes = attributes</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(attributes.center.x - proposedContentOffsetCenterX) &lt; <span class="built_in">abs</span>(candidateAttributes!.center.x - proposedContentOffsetCenterX) &#123;</span><br><span class="line">                candidateAttributes = attributes</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> aCandidateAttributes = candidateAttributes <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> proposedContentOffset</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> newOffsetX = aCandidateAttributes.center.x - collectionView.bounds.size.width / <span class="number">2</span></span><br><span class="line">        <span class="keyword">let</span> offset = newOffsetX - collectionView.contentOffset.x</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (velocity.x &lt; <span class="number">0</span> &amp;&amp; offset &gt; <span class="number">0</span>) || (velocity.x &gt; <span class="number">0</span> &amp;&amp; offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> pageWidth = itemSize.width + minimumLineSpacing</span><br><span class="line">            newOffsetX += velocity.x &gt; <span class="number">0</span> ? pageWidth : -pageWidth</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGPoint</span>(x: newOffsetX, y: proposedContentOffset.y)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldInvalidateLayout</span><span class="params">(forBoundsChange <span class="number">_</span>: CGRect)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForElements</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; [<span class="type">UICollectionViewLayoutAttributes</span>]? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> collectionView = <span class="keyword">self</span>.collectionView,</span><br><span class="line">            <span class="keyword">let</span> superAttributes = <span class="keyword">super</span>.layoutAttributesForElements(<span class="keyword">in</span>: rect) <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.layoutAttributesForElements(<span class="keyword">in</span>: rect)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> contentOffset = collectionView.contentOffset</span><br><span class="line">        <span class="keyword">let</span> size = collectionView.bounds.size</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> visibleRect = <span class="type">CGRect</span>(x: contentOffset.x, y: contentOffset.y, width: size.width, height: size.height)</span><br><span class="line">        <span class="keyword">let</span> visibleCenterX = visibleRect.midX</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">case</span> <span class="keyword">let</span> newAttributesArray <span class="keyword">as</span> [<span class="type">UICollectionViewLayoutAttributes</span>] = <span class="type">NSArray</span>(array: superAttributes, copyItems: <span class="literal">true</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newAttributesArray.forEach &#123;</span><br><span class="line">            <span class="keyword">let</span> distanceFromCenter = visibleCenterX - $<span class="number">0</span>.center.x</span><br><span class="line">            <span class="keyword">let</span> absDistanceFromCenter = <span class="built_in">min</span>(<span class="built_in">abs</span>(distanceFromCenter), <span class="keyword">self</span>.scaleOffset)</span><br><span class="line">            <span class="keyword">let</span> scale = absDistanceFromCenter * (<span class="keyword">self</span>.scaleFactor - <span class="number">1</span>) / <span class="keyword">self</span>.scaleOffset + <span class="number">1</span></span><br><span class="line">            $<span class="number">0</span>.transform3D = <span class="type">CATransform3DScale</span>(<span class="type">CATransform3DIdentity</span>, scale, scale, <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> alpha = absDistanceFromCenter * (<span class="keyword">self</span>.alphaFactor - <span class="number">1</span>) / <span class="keyword">self</span>.scaleOffset + <span class="number">1</span></span><br><span class="line">            $<span class="number">0</span>.alpha = alpha</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> newAttributesArray</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configureContentInset</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> collectionView = <span class="keyword">self</span>.collectionView <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> inset = collectionView.bounds.size.width / <span class="number">2</span> - itemSize.width / <span class="number">2</span></span><br><span class="line">        collectionView.contentInset = <span class="type">UIEdgeInsets</span>.<span class="keyword">init</span>(top: <span class="number">0</span>, <span class="keyword">left</span>: inset, bottom: <span class="number">0</span>, <span class="keyword">right</span>: inset)</span><br><span class="line">        collectionView.contentOffset = <span class="type">CGPoint</span>(x: -inset, y: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">resetContentInset</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> collectionView = <span class="keyword">self</span>.collectionView <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        collectionView.contentInset = <span class="type">UIEdgeInsets</span>.<span class="keyword">init</span>(top: <span class="number">0</span>, <span class="keyword">left</span>: <span class="number">0</span>, bottom: <span class="number">0</span>, <span class="keyword">right</span>: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make simple pan to dismiss view in iOS</title>
      <link href="/blog/How-to-make-simple-pan-to-dismiss-view-in-iOS/"/>
      <url>/blog/How-to-make-simple-pan-to-dismiss-view-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/301" target="_blank" rel="noopener">#301</a></strong></p><p>Make it more composable using <code>UIViewController</code> subclass and <code>ThroughView</code> to pass hit events to underlying views.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PanViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> animator = <span class="type">UIViewPropertyAnimator</span>(duration: <span class="number">0</span>, curve: .easeOut)</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> panGR = <span class="type">UIPanGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(handlePan(<span class="number">_</span>: )))</span><br><span class="line">    <span class="keyword">let</span> slideView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">let</span> gripView = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">var</span> options: <span class="type">Options</span> = <span class="type">Options</span>()</span><br><span class="line">    <span class="keyword">var</span> didHide: (() -&gt; <span class="type">Void</span>)?</span><br><span class="line">    <span class="keyword">let</span> pullDownVelocity: <span class="type">CGFloat</span> = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Options</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> contentView: <span class="type">UIView</span> = <span class="type">UIView</span>()</span><br><span class="line">        <span class="keyword">var</span> percentHeight: <span class="type">CGFloat</span> = <span class="number">0.24</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        view = <span class="type">ThroughView</span>()</span><br><span class="line">        view.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        setup()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        slideView.layer.cornerRadius = <span class="number">10</span></span><br><span class="line">        slideView.clipsToBounds = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        gripView.backgroundColor = <span class="type">UIColor</span>.yellow</span><br><span class="line">        gripView.layer.cornerRadius = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        view.addSubview(slideView)</span><br><span class="line">        slideView.addSubview(gripView)</span><br><span class="line">        slideView.addGestureRecognizer(panGR)</span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            slideView.leftAnchor.constraint(equalTo: view.leftAnchor),</span><br><span class="line">            slideView.rightAnchor.constraint(equalTo: view.rightAnchor),</span><br><span class="line">            slideView.heightAnchor.constraint(equalTo: view.heightAnchor),</span><br><span class="line">            slideView.topAnchor.constraint(equalTo: view.bottomAnchor)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            gripView.centerXAnchor.constraint(equalTo: slideView.centerXAnchor),</span><br><span class="line">            gripView.topAnchor.constraint(equalTo: slideView.topAnchor, constant: <span class="number">16</span>),</span><br><span class="line">            gripView.widthAnchor.constraint(equalToConstant: <span class="number">30</span>),</span><br><span class="line">            gripView.heightAnchor.constraint(equalToConstant: <span class="number">2</span>)</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(options: Options)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.options.contentView.removeFromSuperview()</span><br><span class="line">        slideView.insertSubview(options.contentView, at: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            options.contentView.leftAnchor.constraint(equalTo: slideView.leftAnchor),</span><br><span class="line">            options.contentView.rightAnchor.constraint(equalTo: slideView.rightAnchor),</span><br><span class="line">            options.contentView.topAnchor.constraint(equalTo: slideView.topAnchor),</span><br><span class="line">            options.contentView.heightAnchor.constraint(equalTo: slideView.heightAnchor, multiplier: options.percentHeight)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.options = options</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">handlePan</span><span class="params">(<span class="number">_</span> gr: UIPanGestureRecognizer)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> gr.state &#123;</span><br><span class="line">        <span class="keyword">case</span> .began:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .changed:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> .ended:</span><br><span class="line">            <span class="keyword">let</span> velocity = gr.velocity(<span class="keyword">in</span>: slideView)</span><br><span class="line">            <span class="keyword">if</span> velocity.y &gt; pullDownVelocity &#123;</span><br><span class="line">                hide()</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> parentView = view.superview <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        animator = <span class="keyword">self</span>.makeAnimator()</span><br><span class="line">        animator.addAnimations &#123;</span><br><span class="line">            <span class="keyword">self</span>.slideView.transform = <span class="type">CGAffineTransform</span>(</span><br><span class="line">                translationX: <span class="number">0</span>,</span><br><span class="line">                y: -parentView.bounds.height * <span class="keyword">self</span>.options.percentHeight - parentView.safeAreaInsets.bottom</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        animator.startAnimation()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hide</span><span class="params">()</span></span> &#123;</span><br><span class="line">        animator = <span class="keyword">self</span>.makeAnimator()</span><br><span class="line">        animator.addAnimations &#123;</span><br><span class="line">            <span class="keyword">self</span>.slideView.transform = <span class="type">CGAffineTransform</span>.identity</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        animator.addCompletion(&#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.didHide?()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        animator.startAnimation()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeAnimator</span><span class="params">()</span></span> -&gt; <span class="type">UIViewPropertyAnimator</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIViewPropertyAnimator</span>(duration: <span class="number">0.25</span>, dampingRatio: <span class="number">1.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThroughView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didMoveToSuperview</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didMoveToSuperview()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> superview = superview <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([pinEdges(view: superview)])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">point</span><span class="params">(inside point: CGPoint, with event: UIEvent?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> slideView = subviews.first <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slideView.hitTest(convert(point, to: slideView), with: event) != <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting started with WWDC 2019</title>
      <link href="/blog/Getting-started-with-WWDC-2019/"/>
      <url>/blog/Getting-started-with-WWDC-2019/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/300" target="_blank" rel="noopener">#300</a></strong></p><h2 id="WWDC"><a href="#WWDC" class="headerlink" title="WWDC"></a>WWDC</h2><ul><li><a href="https://ios-goodies.com/post/185370134786/week-2845-wwdc-special" target="_blank" rel="noopener">WWDC special</a></li><li><a href="https://wwdcbysundell.com/" target="_blank" rel="noopener">WWDC by Sundell</a></li><li><a href="https://nshipster.com/wwdc-2019/" target="_blank" rel="noopener">NSHipster WWDC 2019</a></li><li><a href="https://patrickbalestra.com/blog/2019/06/07/wwdc-2019-the-things-you-may-have-missed.html" target="_blank" rel="noopener">WWDC 2019 - The Things You May Have Missed</a></li><li><a href="https://wwdcbysundell.com/2019/essential-session-videos/" target="_blank" rel="noopener">7 essential WWDC session videos for iOS developers</a></li><li><a href="https://www.hackingwithswift.com/articles/190/the-best-wwdc-videos-of-all-time" target="_blank" rel="noopener">The 15 Best WWDC Videos of All Time</a></li><li><a href="https://github.com/Blackjacx/WWDC" target="_blank" rel="noopener">WWDC</a> Extracted gists</li><li><a href="https://github.com/onmyway133/blog/issues/305" target="_blank" rel="noopener">Favorite WWDC 2019 sessions</a></li></ul><h2 id="Swift-5-1"><a href="#Swift-5-1" class="headerlink" title="Swift 5.1"></a>Swift 5.1</h2><ul><li><a href="https://www.avanderlee.com/swift/property-wrappers/" target="_blank" rel="noopener">Property wrappers to remove boilerplate code in Swift</a></li><li><a href="https://swiftrocks.com/understanding-opaque-return-types-in-swift.html" target="_blank" rel="noopener">Understanding Opaque Return Types in Swift</a></li><li><a href="https://www.swiftbysundell.com/posts/the-swift-51-features-that-power-swiftuis-api" target="_blank" rel="noopener">The Swift 5.1 features that power SwiftUI’s API</a></li><li><a href="https://www.hackingwithswift.com/articles/182/whats-new-in-swift-5-1" target="_blank" rel="noopener">What’s new in Swift 5.1</a></li><li><a href="https://jeroenscode.com/swift-opaque-result-types/" target="_blank" rel="noopener">Swift Opaque Result Types</a></li><li><a href="https://github.com/guillermomuntaner/Burritos" target="_blank" rel="noopener">Burritos</a> A collection of Swift Property Wrappers</li><li><a href="https://medium.com/flawless-app-stories/how-can-property-wrappers-and-function-builders-be-leveraged-d43160de338f" target="_blank" rel="noopener">How can Property Wrappers and Function Builders be leveraged?</a></li></ul><h2 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h2><ul><li><a href="https://developer.apple.com/xcode/swiftui/" target="_blank" rel="noopener">SwiftUI</a></li><li><a href="https://github.com/Juanpe/About-SwiftUI" target="_blank" rel="noopener">About-SwiftUI</a></li><li><a href="https://www.hackingwithswift.com/quick-start/swiftui/" target="_blank" rel="noopener">Swift UI by example</a></li><li><a href="https://swiftrocks.com/inside-swiftui-compiler-magic.html" target="_blank" rel="noopener">Inside SwiftUI’s Declarative Syntax’s Compiler Magic</a></li><li><a href="https://wwdcbysundell.com/2019/swiftui-common-questions/" target="_blank" rel="noopener">Answers to the most common questions about SwiftUI</a></li><li><a href="https://www.raywenderlich.com/3715234-swiftui-getting-started" target="_blank" rel="noopener">SwiftUI: Getting Started</a></li><li><a href="https://github.com/SimpleBoilerplates/SwiftUI-Cheat-Sheet" target="_blank" rel="noopener">SwiftUI-Cheat-Sheet</a></li><li><a href="https://mecid.github.io/2019/06/12/understanding-property-wrappers-in-swiftui/" target="_blank" rel="noopener">Understanding Property Wrappers in SwiftUI</a></li><li><a href="https://github.com/Jinxiansen/SwiftUI" target="_blank" rel="noopener">SwiftUI</a> Framework Learning and Usage Guide</li><li><a href="https://github.com/unixzii/SwiftUI-2048" target="_blank" rel="noopener">SwiftUI-2048</a></li><li><a href="https://fuckingswiftui.com/" target="_blank" rel="noopener">Fucking SwiftUI</a></li><li><a href="https://github.com/anandabits/SwiftUI-Processing" target="_blank" rel="noopener">SwiftUI-Processing</a></li><li><a href="http://www.alwaysrightinstitute.com/swiftwebui/" target="_blank" rel="noopener">SwiftWebUI</a></li><li><a href="https://mecid.github.io/2019/06/19/building-forms-with-swiftui/" target="_blank" rel="noopener">Building forms with SwiftUI</a></li><li><a href="https://mecid.github.io/2019/06/26/animations-in-swiftui/" target="_blank" rel="noopener">Animations in SwiftUI</a></li><li><a href="https://www.youtube.com/playlist?list=PLDaHCLWmCcQLL-3YDxnPgG8VENNUiJ0Nv" target="_blank" rel="noopener">SwiftUI DesignCode</a></li></ul><p>Code</p><ul><li><a href="https://github.com/xtabbas/calculator-checklist" target="_blank" rel="noopener">https://github.com/xtabbas/calculator-checklist</a></li><li><a href="https://github.com/alfianlosari/SwiftUI-MovieDB" target="_blank" rel="noopener">https://github.com/alfianlosari/SwiftUI-MovieDB</a></li><li><a href="https://github.com/unixzii/SwiftUI-2048" target="_blank" rel="noopener">https://github.com/unixzii/SwiftUI-2048</a></li></ul><h2 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h2><ul><li><a href="https://medium.com/gett-engineering/rxswift-to-apples-combine-cheat-sheet-e9ce32b14c5b" target="_blank" rel="noopener">RxSwift to Apple’s Combine Cheat Sheet</a></li><li><a href="https://medium.com/flawless-app-stories/will-combine-kill-rxswift-64780a150d89" target="_blank" rel="noopener">Will Combine kill RxSwift?</a></li><li><a href="https://github.com/broadwaylamb/OpenCombine" target="_blank" rel="noopener">OpenCombine</a> Open-source implementation of Apple’s Combine framework for processing values over time.</li><li><a href="https://github.com/AvdLee/CombineSwiftPlayground" target="_blank" rel="noopener">CombineSwiftPlayground</a></li><li><a href="https://medium.com/snowdog-labs/combine-framework-in-action-part-2-63c7d652b32f" target="_blank" rel="noopener">Combine framework in action — Part 2</a></li><li><a href="https://heckj.github.io/swiftui-notes/" target="_blank" rel="noopener">Using Combine</a> 🚀 </li></ul><h2 id="Dark-Mode"><a href="#Dark-Mode" class="headerlink" title="Dark Mode"></a>Dark Mode</h2><ul><li><a href="https://www.fivestars.blog/code/ios-dark-mode-how-to.html" target="_blank" rel="noopener">How To Adopt Dark Mode In Your iOS App </a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to style NSButton in AppKit</title>
      <link href="/blog/How-to-style-NSButton-in-AppKit/"/>
      <url>/blog/How-to-style-NSButton-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/297" target="_blank" rel="noopener">#297</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> button = <span class="type">NSButton</span>()</span><br><span class="line">button.wantsLayer = <span class="literal">true</span></span><br><span class="line">button.isBordered = <span class="literal">false</span></span><br><span class="line">button.setButtonType(.momentaryChange)</span><br><span class="line">button.attributedTitle = <span class="type">NSAttributedString</span>(</span><br><span class="line">    string: <span class="string">"Click me"</span>,</span><br><span class="line">    attributes: [</span><br><span class="line">        <span class="type">NSAttributedString</span>.<span class="type">Key</span>.foregroundColor: <span class="type">NSColor</span>.white,</span><br><span class="line">        <span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: <span class="type">NSFont</span>.labelFont(ofSize: <span class="number">13</span>)</span><br><span class="line">    ]</span><br><span class="line">button.layer?.backgroundColor = <span class="type">NSColor</span>.orange.cgColor</span><br><span class="line">button.layer?.cornerRadius = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">activate(</span><br><span class="line">    button.anchor.height.<span class="built_in">equal</span>.to(<span class="number">32</span>),</span><br><span class="line">    button.anchor.width.<span class="built_in">equal</span>.to(<span class="number">100</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>To make it have native rounded rect</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">button.imageScaling = .scaleProportionallyDown</span><br><span class="line">button.setButtonType(.momentaryPushIn)</span><br><span class="line">button.bezelStyle = .rounded</span><br><span class="line">button.isBordered = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"><span class="keyword">import</span> Omnia</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSButton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">style</span><span class="params">(imageName: String)</span></span> &#123;</span><br><span class="line">        image = <span class="type">NSImage</span>(named: <span class="type">NSImage</span>.<span class="type">Name</span>(imageName))</span><br><span class="line">        isBordered = <span class="literal">false</span></span><br><span class="line">        imageScaling = .scaleProportionallyDown</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">styleAction</span><span class="params">(title: String)</span></span> &#123;</span><br><span class="line">        attributedTitle = <span class="type">NSAttributedString</span>(string: title, attributes: [</span><br><span class="line">            <span class="type">NSAttributedString</span>.<span class="type">Key</span>.foregroundColor: <span class="type">NSColor</span>(hex: <span class="string">"008B80"</span>),</span><br><span class="line">            <span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: <span class="type">NSFont</span>.boldSystemFont(ofSize: <span class="number">13</span>)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        isBordered = <span class="literal">false</span></span><br><span class="line">        setButtonType(.momentaryChange)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to debounce action in Flutter</title>
      <link href="/blog/How-to-debounce-action-in-Flutter/"/>
      <url>/blog/How-to-debounce-action-in-Flutter/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/293" target="_blank" rel="noopener">#293</a></strong></p><p>Answer <a href="https://stackoverflow.com/a/55119208/1418457" target="_blank" rel="noopener">https://stackoverflow.com/a/55119208/1418457</a></p><hr><p>This is useful to throttle TextField change event. You can make Debouncer class using Timer</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/foundation.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debouncer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> milliseconds;</span><br><span class="line">  VoidCallback action;</span><br><span class="line">  Timer _timer;</span><br><span class="line"></span><br><span class="line">  Debouncer(&#123; <span class="keyword">this</span>.milliseconds &#125;);</span><br><span class="line"></span><br><span class="line">  run(VoidCallback action) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_timer != <span class="keyword">null</span>) &#123;</span><br><span class="line">      _timer.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _timer = Timer(<span class="built_in">Duration</span>(milliseconds: milliseconds), action);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Declare and trigger</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> _debouncer = Debouncer(milliseconds: <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">onTextChange(<span class="built_in">String</span> text) &#123;</span><br><span class="line">  _debouncer.run(() =&gt; <span class="built_in">print</span>(text));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dart </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make tag selection view in React Native</title>
      <link href="/blog/How-to-make-tag-selection-view-in-React-Native/"/>
      <url>/blog/How-to-make-tag-selection-view-in-React-Native/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/271" target="_blank" rel="noopener">#271</a></strong></p><p>Original post <a href="https://hackernoon.com/how-to-make-tag-selection-view-in-react-native-b6f8b0adc891" target="_blank" rel="noopener">https://hackernoon.com/how-to-make-tag-selection-view-in-react-native-b6f8b0adc891</a></p><hr><p>Besides React style programming, <a href="https://github.com/facebook/yoga" target="_blank" rel="noopener">Yoga</a> is another cool feature of React Native. It is a cross-platform layout engine which implements Flexbox so we use the same layout code for both platforms.</p><p>As someone who uses Auto Layout in iOS and Constraint Layout in Android, I find Flexbox bit hard to use at first, but there are many tasks that Flexbox does very well, they are distribute elements in space and flow layout. In this post we will use Flexbox to build a tag selection view using just Javascript code. This is very easy to do so we don’t need to install extra dependencies.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*xLD0YbzaepgAuz7ED-lLGA.png" alt></p><p>Our tag view will support both multiple selection and exclusive selection. First, we need a custom Button .</p><h2 id="Button-with-Background"><a href="#Button-with-Background" class="headerlink" title="Button with Background"></a>Button with Background</h2><p><a href="https://facebook.github.io/react-native/docs/button" target="_blank" rel="noopener">Button</a> is of the basic elements in React Native, but it is somewhat limited if we want to have custom content inside the button, for example texts, images and background</p><pre><code>import { Button } from &apos;react-native&apos;...&lt;Button  onPress={onPressLearnMore}  title=&quot;Learn More&quot;  color=&quot;#841584&quot;  accessibilityLabel=&quot;Learn more about this purple button&quot;/&gt;</code></pre><h3 id="TouchableOpacity"><a href="#TouchableOpacity" class="headerlink" title="TouchableOpacity"></a><a href="https://facebook.github.io/react-native/docs/touchableopacity" target="_blank" rel="noopener">TouchableOpacity</a></h3><p>Luckily we have <a href="https://facebook.github.io/react-native/docs/touchableopacity" target="_blank" rel="noopener">TouchableOpacity</a>, which is a wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, dimming it.</p><p>To implement button in our tag view, we need to a button with background a check image. Create a file called BackgroundButton.js</p><pre><code>import React from &apos;react&apos;import { TouchableOpacity, View, Text, StyleSheet, Image } from &apos;react-native&apos;import R from &apos;res/R&apos;export default class BackgroundButton extends React.Component {  render() {    const styles = this.makeStyles()    return (      &lt;TouchableOpacity style={styles.touchable} onPress={this.props.onPress}&gt;        &lt;View style={styles.view}&gt;          {this.makeImageIfAny(styles)}          &lt;Text style={styles.text}&gt;{this.props.title}&lt;/Text&gt;        &lt;/View&gt;      &lt;/TouchableOpacity&gt;    )  }makeImageIfAny(styles) {    if (this.props.showImage) {      return &lt;Image style={styles.image} source={R.images.check} /&gt;    }  }makeStyles() {    return StyleSheet.create({      view: {        flexDirection: &apos;row&apos;,        borderRadius: 23,        borderColor: this.props.borderColor,        borderWidth: 2,        backgroundColor: this.props.backgroundColor,        height: 46,        alignItems: &apos;center&apos;,        justifyContent: &apos;center&apos;,        paddingLeft: 16,        paddingRight: 16      },      touchable: {        marginLeft: 4,        marginRight: 4,        marginBottom: 8      },      image: {        marginRight: 8      },      text: {        fontSize: 18,        textAlign: &apos;center&apos;,        color: this.props.textColor,        fontSize: 16      }    })  }}</code></pre><h3 id="Dynamic-styles"><a href="#Dynamic-styles" class="headerlink" title="Dynamic styles"></a>Dynamic styles</h3><p>Normally we use const styles = StyleSheet.create({}) but since we want our button to be configurable, we make styles into a function, so on every render we get a new styles with proper configurations. The properties we support are borderColor, textColor, backgroundColor and showImage</p><p>In the makeImageIfAny we only need to return Image if the view is selected. We don’t have the else case, so in if showImage is false, this returns undefined and React won’t render any element</p><pre><code>makeImageIfAny(styles) {  if (this.props.showImage) {    return &lt;Image style={styles.image} source={R.images.check} /&gt;  }}</code></pre><h3 id="padding-and-margin"><a href="#padding-and-margin" class="headerlink" title="padding and margin"></a>padding and margin</h3><p>To understand padding and margin, visit <a href="https://www.w3schools.com/css/css_boxmodel.asp" target="_blank" rel="noopener">CSS Box Model</a>. Basically padding means clearing an area around the content and padding is transparent, while margin means clearing an area outside the border and the margin also is transparent.</p><p><img src="https://cdn-images-1.medium.com/max/4572/1*A98Em4msrGqOAWSRq3Njjw.png" alt></p><p>Pay attention to styles . We have margin for touchable so that each tag button have a little margin outside each other.</p><pre><code>touchable: {  marginLeft: 4,  marginRight: 4,  marginBottom: 8}</code></pre><p>In the view we need flexDirection as row because React Native has flexDirection as column by default. And a row means we have Image and Text side by side horizontally inside the button. We also use alignItems and justifyContent to align elements centeredly on both main and cross axises. The padding is used to have some spaces between the inner text and the view.</p><pre><code>view: {  flexDirection: &apos;row&apos;,  height: 46,  alignItems: &apos;center&apos;,  justifyContent: &apos;center&apos;,  paddingLeft: 16,  paddingRight: 16}</code></pre><h2 id="Tag-View"><a href="#Tag-View" class="headerlink" title="Tag View"></a>Tag View</h2><p>Create a file called TagsView.js This is where we parse tags and show a bunch of BackgroundButton</p><pre><code>import React from &apos;react&apos;import { View, StyleSheet, Button } from &apos;react-native&apos;import R from &apos;res/R&apos;import BackgroundButton from &apos;library/components/BackgroundButton&apos;import addOrRemove from &apos;library/utils/addOrRemove&apos;export default class TagsView extends React.Component {  constructor(props) {    super(props)    this.state = {      selected: props.selected    }  }render() {    return (      &lt;View style={styles.container}&gt;        {this.makeButtons()}      &lt;/View&gt;    )  }onPress = (tag) =&gt; {    let selected    if (this.props.isExclusive) {      selected = [tag]    } else {      selected = addOrRemove(this.state.selected, tag)    }this.setState({      selected    })  }makeButtons() {    return this.props.all.map((tag, i) =&gt; {      const on = this.state.selected.includes(tag)      const backgroundColor = on ? R.colors.on.backgroundColor : R.colors.off.backgroundColor      const textColor = on ? R.colors.on.text : R.colors.off.text      const borderColor = on ? R.colors.on.border : R.colors.off.borderreturn (        &lt;BackgroundButton          backgroundColor={backgroundColor}          textColor={textColor}          borderColor={borderColor}          onPress={() =&gt; {            this.onPress(tag)          }}          key={i}          showImage={on}          title={tag} /&gt;      )    })  }}const styles = StyleSheet.create({  container: {    flex: 1,    flexDirection: &apos;row&apos;,    flexWrap: &apos;wrap&apos;,    padding: 20  }})</code></pre><p>We parse an array of tags to build BackgroundButton . We keep the selected array in state because this is mutated inside the TagsView component. If it is isExclusive then the new selected contains just the new selected tag. If it is multiple selection, then we add the new selected tag into the selected array.</p><p>The addOrRemove is a our homegrown utility function to add an item into an array if it does not exists, or remove if it exists, using the high orderfilter function.</p><pre><code>const addOrRemove = (array, item) =&gt; {  const exists = array.includes(item)if (exists) {    return array.filter((c) =&gt; { return c !== item })  } else {    const result = array    result.push(item)    return result  }}</code></pre><h3 id="Flex-wrap"><a href="#Flex-wrap" class="headerlink" title="Flex wrap"></a>Flex wrap</h3><p>Pay attention to styles</p><pre><code>const styles = StyleSheet.create({  container: {    flex: 1,    flexDirection: &apos;row&apos;,    flexWrap: &apos;wrap&apos;,    padding: 20  }})</code></pre><p>The hero here is flexWrap which specifies whether the flexible items should wrap or not. Take a look at <a href="https://www.w3schools.com/cssref/css3_pr_flex-wrap.asp" target="_blank" rel="noopener">CSS flex-wrap</a> property for other options. Since we have main axis as row , element will be wrapped to the next row if there are not enough space. That’s how we can achieve a beautiful tag view.</p><h3 id="Using-TagsView"><a href="#Using-TagsView" class="headerlink" title="Using TagsView"></a>Using TagsView</h3><p>Then consuming TagsView is as easy as declare it inside render</p><pre><code>const selected = [&apos;Swift&apos;, Kotlin]const tags = [&apos;Swift&apos;, &apos;Kotlin&apos;, &apos;C#&apos;, &apos;Haskell&apos;, &apos;Java&apos;]return (  &lt;TagsView    all={tags}    selected={selected}    isExclusive={false}  /&gt;)</code></pre><h3 id="Learning-Flexbox"><a href="#Learning-Flexbox" class="headerlink" title="Learning Flexbox"></a>Learning Flexbox</h3><p>Learning Flebox is crucial in using React and React Native effectively. The best places to learn it are <a href="https://www.w3schools.com/css/css3_flexbox.asp" target="_blank" rel="noopener">w3school CSS Flexbox</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" target="_blank" rel="noopener">Basic concepts of flexbox</a> by Mozzila.<br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" target="_blank" rel="noopener"><strong>Basic concepts of flexbox</strong><br><em>The Flexible Box Module, usually referred to as flexbox, was designed as a one-dimensional layout model, and as a…</em>developer.mozilla.org</a></p><p>There is a showcase of all possible Flexbox properties<br><a href="https://medium.com/@drorbiran/the-full-react-native-layout-cheat-sheet-a4147802405c" target="_blank" rel="noopener"><strong>The Full React Native Layout Cheat Sheet</strong><br><em>A simple visual guide with live examples for all major React Native layout properties</em>medium.com</a></p><p>Yoga has its own YogaKit published on CocoaPods, you can learn it with native code in iOS<br><a href="https://www.raywenderlich.com/530-yoga-tutorial-using-a-cross-platform-layout-engine" target="_blank" rel="noopener"><strong>Yoga Tutorial: Using a Cross-Platform Layout Engine</strong><br><em>Learn about Yoga, Facebook’s cross-platform layout engine that helps developers write more layout code in style akin to…</em>www.raywenderlich.com</a></p><p>And when we use flexbox, we should compose element instead of hardcoding values, for example we can use another View with justifyContent: flex-end to move a button down the screen. This follows flexbox style and prevent rigid code.<br><a href="https://medium.com/react-native-training/position-element-at-the-bottom-of-the-screen-using-flexbox-in-react-native-a00b3790ca42" target="_blank" rel="noopener"><strong>Position element at the bottom of the screen using Flexbox in React Native</strong><br><em>React Native uses Yoga to achieve Flexbox style layout, which helps us set up layout in a declarative and easy way.</em>medium.com</a></p><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>I hope you learn something useful in this post. For more information please consult the official guide <a href="https://facebook.github.io/react-native/docs/flexbox" target="_blank" rel="noopener">Layout with Flexbox</a> and <a href="https://facebook.github.io/react-native/docs/layout-props" target="_blank" rel="noopener">layout-props</a> for all the possible Flexbox properties.</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to add app icons and splash screens to a React Native app in staging and production</title>
      <link href="/blog/How-to-add-app-icons-and-splash-screens-to-a-React-Native-app-in-staging-and-production/"/>
      <url>/blog/How-to-add-app-icons-and-splash-screens-to-a-React-Native-app-in-staging-and-production/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/268" target="_blank" rel="noopener">#268</a></strong></p><p>Original post <a href="https://medium.freecodecamp.org/how-to-add-app-icons-and-splash-screens-to-a-react-native-app-in-staging-and-production-d1dab615e7c6" target="_blank" rel="noopener">https://medium.freecodecamp.org/how-to-add-app-icons-and-splash-screens-to-a-react-native-app-in-staging-and-production-d1dab615e7c6</a></p><hr><p>React Native was designed to be “learn once, write anywhere,” and it is usually used to build cross platform apps for iOS and Android. And for each app that we build, there are times we need to reuse the same code, build and tweak it a bit to make it work for different environments. For example, we might need multiple skins, themes, a free and paid version, or more often different staging and production environments.</p><p>And the task that we can’t avoid is adding app icons and splash screens to our apps.</p><p>In fact, to add a staging and production environment, and to add app icons, requires us to use Xcode and Android Studio, and we do it the same way we do with native iOS or Android projects.</p><p>Let’s call our app MyApp and bootstrap it with react-native init MyApp . There will of course, be tons of <a href="https://github.com/thekevinbrown/react-native-schemes-manager" target="_blank" rel="noopener">libraries</a> to help us with managing different environments.</p><p>In this post, we will do just like we did with native apps, so that we know the basic steps.</p><h2 id="Build-configuration-target-build-types-production-flavor-and-build-variant"><a href="#Build-configuration-target-build-types-production-flavor-and-build-variant" class="headerlink" title="Build configuration, target, build types, production flavor, and build variant"></a>Build configuration, target, build types, production flavor, and build variant</h2><p>There are some terminologies we needed to remember. In iOS, debug and releases are called <a href="https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Build_Settings.html" target="_blank" rel="noopener">build configurations</a>, and staging and production are called <a href="https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Targets.html" target="_blank" rel="noopener">targets</a>.</p><blockquote><h1 id="A-build-configuration-specifies-a-set-of-build-settings-used-to-build-a-target’s-product-in-a-particular-way-For-example-it-is-common-to-have-separate-build-configurations-for-debug-and-release-builds-of-a-product"><a href="#A-build-configuration-specifies-a-set-of-build-settings-used-to-build-a-target’s-product-in-a-particular-way-For-example-it-is-common-to-have-separate-build-configurations-for-debug-and-release-builds-of-a-product" class="headerlink" title="A build configuration specifies a set of build settings used to build a target’s product in a particular way. For example, it is common to have separate build configurations for debug and release builds of a product."></a>A build configuration specifies a set of build settings used to build a target’s product in a particular way. For example, it is common to have separate build configurations for debug and release builds of a product.</h1><h1 id="A-target-specifies-a-product-to-build-and-contains-the-instructions-for-building-the-product-from-a-set-of-files-in-a-project-or-work-space-A-target-defines-a-single-product-it-organizes-the-inputs-into-the-build-system-—-the-source-files-and-instructions-for-processing-those-source-files-—-required-to-build-that-product-Projects-can-contain-one-or-more-targets-each-of-which-produces-one-product"><a href="#A-target-specifies-a-product-to-build-and-contains-the-instructions-for-building-the-product-from-a-set-of-files-in-a-project-or-work-space-A-target-defines-a-single-product-it-organizes-the-inputs-into-the-build-system-—-the-source-files-and-instructions-for-processing-those-source-files-—-required-to-build-that-product-Projects-can-contain-one-or-more-targets-each-of-which-produces-one-product" class="headerlink" title="A target specifies a product to build and contains the instructions for building the product from a set of files in a project or work-space. A target defines a single product; it organizes the inputs into the build system — the source files and instructions for processing those source files — required to build that product. Projects can contain one or more targets, each of which produces one product"></a>A target specifies a product to build and contains the instructions for building the product from a set of files in a project or work-space. A target defines a single product; it organizes the inputs into the build system — the source files and instructions for processing those source files — required to build that product. Projects can contain one or more targets, each of which produces one product</h1></blockquote><p>In Android, debug and releases are called build types, and staging and production are called product flavors. Together they form <a href="https://developer.android.com/studio/build/build-variants" target="_blank" rel="noopener">build variants</a>.</p><blockquote><h1 id="For-example-a-“demo”-product-flavor-can-specify-different-features-and-device-requirements-such-as-custom-source-code-resources-and-minimum-API-levels-while-the-“debug”-build-type-applies-different-build-and-packaging-settings-such-as-debug-options-and-signing-keys-The-resulting-build-variant-is-the-“demoDebug”-version-of-your-app-and-it-includes-a-combination-of-the-configurations-and-resources-included-in-the-“demo”-product-flavor-“debug”-build-type-and-main-source-set"><a href="#For-example-a-“demo”-product-flavor-can-specify-different-features-and-device-requirements-such-as-custom-source-code-resources-and-minimum-API-levels-while-the-“debug”-build-type-applies-different-build-and-packaging-settings-such-as-debug-options-and-signing-keys-The-resulting-build-variant-is-the-“demoDebug”-version-of-your-app-and-it-includes-a-combination-of-the-configurations-and-resources-included-in-the-“demo”-product-flavor-“debug”-build-type-and-main-source-set" class="headerlink" title="For example, a “demo” product flavor can specify different features and device requirements, such as custom source code, resources, and minimum API levels, while the “debug” build type applies different build and packaging settings, such as debug options and signing keys. The resulting build variant is the “demoDebug” version of your app, and it includes a combination of the configurations and resources included in the “demo” product flavor, “debug” build type, and main/ source set."></a>For example, a “demo” <em>product flavor</em> can specify different features and device requirements, such as custom source code, resources, and minimum API levels, while the “debug” <em>build type</em> applies different build and packaging settings, such as debug options and signing keys. The resulting build variant is the “demoDebug” version of your app, and it includes a combination of the configurations and resources included in the “demo” product flavor, “debug” build type, and main/ source set.</h1></blockquote><h2 id="Staging-and-production-targets-in-iOS"><a href="#Staging-and-production-targets-in-iOS" class="headerlink" title="Staging and production targets in iOS"></a>Staging and production targets in iOS</h2><p>Open MyApp.xcodeproj inside ios using Xcode. Here is what we get after bootstrapping:</p><p><img src="https://cdn-images-1.medium.com/max/2004/1*HMMS0zLAfLU_bvli-IESBg.png" alt></p><p>React Native creates iOS and tvOS apps, and two test targets. In Xcode, a project can contain many targets, and each target means a unique product with its own build settings — Info.plist and app icons.</p><h3 id="Duplicate-target"><a href="#Duplicate-target" class="headerlink" title="Duplicate target"></a>Duplicate target</h3><p>If we don’t need the tvOS app, we can delete the MyApp-tvOS and MyApp-tvOSTests . Let’s use MyApp target as our production environment, and right click -&gt; Duplicate to make another target. Let’s call it MyApp Staging.</p><p><img src="https://cdn-images-1.medium.com/max/2694/1*T2RDoSaQRJv8GRGkphUkGw.png" alt></p><p>Each target must have unique bundle id. Change the bundle id of MyApp to com.onmyway133.MyApp and MyApp Staging to com.onmyway133.MyApp.Staging.</p><p><img src="https://cdn-images-1.medium.com/max/3720/1*I3qdG0cgDrwc1bep76ckcA.png" alt></p><h3 id="Info-plist"><a href="#Info-plist" class="headerlink" title="Info.plist"></a>Info.plist</h3><p>When we duplicate MyApp target , Xcode also duplicates Info.plist into MyApp copy-Info.plist for the staging target. Change it to a more meaningful name Info-Staging.plist and drag it to the MyApp group in Xcode to stay organised. After dragging, MyApp Staging target can’t find the plist, so click Choose Info.plist File and point to the Info-Staging.plist.</p><p><img src="https://cdn-images-1.medium.com/max/4732/1*_FYFXy6NDHhSm5XwOPFDmQ.png" alt></p><h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><p>Xcode also duplicates the scheme when we duplicate the target, so we get MyApp copy:</p><p><img src="https://cdn-images-1.medium.com/max/5158/1*DW9wbUJWU1P4gXymv1LT8g.png" alt></p><p>Click Manage Schemes in the scheme drop-down to open Scheme manager:</p><p><img src="https://cdn-images-1.medium.com/max/3208/1*-bjXILHt-Y88etVJDlmyFQ.png" alt></p><p>I usually delete the generated MyApp copy scheme, then I create a new scheme again for the MyApp Staging target. You need to make sure that the scheme is marked as Shared so that it is tracked into git.</p><p><img src="https://cdn-images-1.medium.com/max/3208/1*VTXk1T-j9W-Yd24uU7Wmqg.png" alt></p><p>For some reason, the staging scheme does not have all the things set up like the production scheme. You can run into issues like ‘React/RCTBundleURLProvider.h’ file not found or <a href="https://github.com/onmyway133/notes/issues/380" target="_blank" rel="noopener">RN: ‘React/RCTBridgeModule.h’ file not found</a> . It is because React target is not linked yet.</p><p>To solve it, we must disable Parallelise Build and add React target and move it above MyApp Staging.</p><p><img src="https://cdn-images-1.medium.com/max/3720/1*F7NF8BBg44H6AZHk_A7Jpg.png" alt></p><h3 id="Staging-and-production-product-flavors-in-Android"><a href="#Staging-and-production-product-flavors-in-Android" class="headerlink" title="Staging and production product flavors in Android"></a>Staging and production product flavors in Android</h3><p>Open the android folder in Android Studio. By default there are only debug and release build types:</p><p><img src="https://cdn-images-1.medium.com/max/3528/1*e362XxJHJpR0tn-ry86brA.png" alt></p><p>They are configured in the app module build.gradle:</p><pre><code>buildTypes {    release {        minifyEnabled enableProguardInReleaseBuilds        proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot;    }}</code></pre><p>First, let’s change application id to com.onmyway133.MyApp to match iOS. It is not required but I think it’s good to stay organised. Then create two product flavors for staging and production. For staging, let’s add .Staging to the application id.</p><p>From Android Studio 3, “all flavors must now belong to a named flavor dimension” — normally we just need default dimensions. Here is how it looks in build.gradle for our app module:</p><pre><code>android {    compileSdkVersion rootProject.ext.compileSdkVersion    buildToolsVersion rootProject.ext.buildToolsVersion    flavorDimensions &quot;default&quot;defaultConfig {        applicationId &quot;com.onmyway133.MyApp&quot;        minSdkVersion rootProject.ext.minSdkVersion        targetSdkVersion rootProject.ext.targetSdkVersion        versionCode 1        versionName &quot;1.0&quot;        ndk {            abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot;        }    }    splits {        abi {            reset()            enable enableSeparateBuildPerCPUArchitecture            universalApk false  // If true, also generate a universal APK            include &quot;armeabi-v7a&quot;, &quot;x86&quot;        }    }    buildTypes {        release {            minifyEnabled enableProguardInReleaseBuilds            proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot;        }    }productFlavors {        staging {            applicationIdSuffix &quot;.Staging&quot;        }        production {        }    }}</code></pre><p>Click Sync Now to let gradle do the syncing job. After that, we can see that we have four build variants:</p><p><img src="https://cdn-images-1.medium.com/max/5478/1*KxKqB-NdxtieuhFF-AUvwA.png" alt></p><h3 id="How-to-run-staging-and-production"><a href="#How-to-run-staging-and-production" class="headerlink" title="How to run staging and production"></a>How to run staging and production</h3><p>To run the Android app, we can specify a variant like react-native run-android — variant=productionDebug, but I prefer to go to Android Studio, select the variant, and run.</p><p>To run iOS app, we can specify the scheme like react-native run-ios — simulator=’iPhone X’ — scheme=”MyApp Staging” . As of react-native 0.57.0 this does not work. But it does not matter as I usually go to Xcode, select the scheme, and run.</p><h3 id="Add-app-icon-for-iOS"><a href="#Add-app-icon-for-iOS" class="headerlink" title="Add app icon for iOS"></a>Add app icon for iOS</h3><p>According to the <a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/" target="_blank" rel="noopener">Human Interface Guideline</a>, we need app icons of different sizes for different iOS versions, device resolutions, and situations (notification, settings, Spring Board). I’ve crafted a tool called <a href="https://github.com/onmyway133/IconGenerator" target="_blank" rel="noopener">IconGenerator</a>, which was previously mentioned in <a href="https://dev.to/sarthology/best-open-source-tools-for-developers--300f" target="_blank" rel="noopener">Best Open Source Tools For Developers</a>. Drag the icon that you want — I prefer those with 1024x1024 pixels for high resolution app icons — to the Icon Generator MacOS app.</p><p><img src="https://cdn-images-1.medium.com/max/2848/1*4uBuihDMn3nq3Y1NwVhJsA.png" alt></p><p>Click Generate and we get AppIcon.appiconset . This contains app icons of the required sizes that are ready to be used in Asset Catalog. Drag this to Asset Catalog in Xcode. That is for production.</p><p>For staging, it’s good practice to add a “Staging” banner so that testers know which is staging, and which is production. We can easily do this in Sketch.</p><p><img src="https://cdn-images-1.medium.com/max/4536/1*6uxkwnsGkDp0K12LXh_yiw.png" alt></p><p>Remember to set a background, so we don’t get a transparent background. For an app icon with transparent background, iOS shows the background as black which looks horrible.</p><p>After exporting the image, drag the staging icon to the IconGenerator the same way we did earlier. But this time, rename the generated appiconset to AppIcon-Staging.appiconset. Then drag this to Asset Catalog in Xcode.</p><p>For the staging target to use staging app icons, open MyApp Staging target and choose AppIcon-Staging as App Icon Source.</p><p><img src="https://cdn-images-1.medium.com/max/4908/1*oIGuaxyftwCD0_72Rnv9-g.png" alt></p><h3 id="Add-app-icon-for-Android"><a href="#Add-app-icon-for-Android" class="headerlink" title="Add app icon for Android"></a>Add app icon for Android</h3><p><img src="https://cdn-images-1.medium.com/max/6720/1*CS_tKOts1zz05PVJ5XEc9A.png" alt></p><p>I like to switch to Project view, as it is easier to change app icons. Click res -&gt; New -&gt; Image Asset to open Asset Studio. We can use the same app icons that we used in iOS:</p><p><img src="https://cdn-images-1.medium.com/max/4528/1*bzJZh1exxXGnrXw_j4AMgQ.png" alt></p><p>Android 8.0 (API level 26) introduced <a href="https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive" target="_blank" rel="noopener">Adaptive Icons</a> so we need to tweak the Resize slider to make sure our app icons look as nice as possible.</p><blockquote><h1 id="Android-8-0-API-level-26-introduces-adaptive-launcher-icons-which-can-display-a-variety-of-shapes-across-different-device-models-For-example-an-adaptive-launcher-icon-can-display-a-circular-shape-on-one-OEM-device-and-display-a-squircle-on-another-device-Each-device-OEM-provides-a-mask-which-the-system-then-uses-to-render-all-adaptive-icons-with-the-same-shape-Adaptive-launcher-icons-are-also-used-in-shortcuts-the-Settings-app-sharing-dialogs-and-the-overview-screen-—-Android-developers"><a href="#Android-8-0-API-level-26-introduces-adaptive-launcher-icons-which-can-display-a-variety-of-shapes-across-different-device-models-For-example-an-adaptive-launcher-icon-can-display-a-circular-shape-on-one-OEM-device-and-display-a-squircle-on-another-device-Each-device-OEM-provides-a-mask-which-the-system-then-uses-to-render-all-adaptive-icons-with-the-same-shape-Adaptive-launcher-icons-are-also-used-in-shortcuts-the-Settings-app-sharing-dialogs-and-the-overview-screen-—-Android-developers" class="headerlink" title="Android 8.0 (API level 26) introduces adaptive launcher icons, which can display a variety of shapes across different device models. For example, an adaptive launcher icon can display a circular shape on one OEM device, and display a squircle on another device. Each device OEM provides a mask, which the system then uses to render all adaptive icons with the same shape. Adaptive launcher icons are also used in shortcuts, the Settings app, sharing dialogs, and the overview screen. — Android developers"></a>Android 8.0 (API level 26) introduces adaptive launcher icons, which can display a variety of shapes across different device models. For example, an adaptive launcher icon can display a circular shape on one OEM device, and display a squircle on another device. Each device OEM provides a mask, which the system then uses to render all adaptive icons with the same shape. Adaptive launcher icons are also used in shortcuts, the Settings app, sharing dialogs, and the overview screen. — <a href="https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive" target="_blank" rel="noopener">Android developers</a></h1></blockquote><p>We are doing for production first, which means the main Res Directory. This step will replace the existing placeholder app icons generated by Android Studio when we bootstrapped React Native projects.</p><p><img src="https://cdn-images-1.medium.com/max/4528/1*kIYEWBrWMG_qOkY-LsWnxw.png" alt></p><p>Now that we have production app icons, let’s make staging app icons. Android manages code and assets via convention. Click on src -&gt; New -&gt; Directory and create a staging folder. Inside staging, create a folder called res . Anything we place in staging will replace the ones in main — this is called source sets.</p><p><img src="https://cdn-images-1.medium.com/max/3652/1*dAkYONFc86mHNXKnbPf2fA.png" alt></p><p>You can read more here: <a href="https://developer.android.com/studio/build/build-variants" target="_blank" rel="noopener">Build with source sets</a>.</p><blockquote><p>You can use source set directories to contain the code and resources you want packaged only with certain configurations. For example, if you are building the “demoDebug” build variant, which is the crossproduct of a “demo” product flavor and “debug” build type, Gradle looks at these directories, and gives them the following priority:<br>src/demoDebug/ <em>(build variant source set)</em><br>src/debug/ <em>(build type source set)</em><br>src/demo/ <em>(product flavor source set)</em><br>src/main/ <em>(main source set)</em></p></blockquote><p>Right click on staging/res -&gt; New -&gt; Image Asset to make app icons for staging. We also use the same staging app icons like in iOS, but this time we choose staging as Res Directory. This way Android Studio knows how to generate different ic_launcher and put them into staging.</p><p><img src="https://cdn-images-1.medium.com/max/4528/1*jKI8Erm57SGwZI2ylLaJ0w.png" alt></p><h3 id="Add-launch-screen-for-iOS"><a href="#Add-launch-screen-for-iOS" class="headerlink" title="Add launch screen for iOS"></a>Add launch screen for iOS</h3><p>The splash screen is called a [Launch Screen](<a href="http://Launch" target="_blank" rel="noopener">http://Launch</a> Screen) in iOS, and it is important.</p><blockquote><h1 id="A-launch-screen-appears-instantly-when-your-app-starts-up-The-launch-screen-is-quickly-replaced-with-the-first-screen-of-your-app-giving-the-impression-that-your-app-is-fast-and-responsive"><a href="#A-launch-screen-appears-instantly-when-your-app-starts-up-The-launch-screen-is-quickly-replaced-with-the-first-screen-of-your-app-giving-the-impression-that-your-app-is-fast-and-responsive" class="headerlink" title="A launch screen appears instantly when your app starts up. The launch screen is quickly replaced with the first screen of your app, giving the impression that your app is fast and responsive"></a>A launch screen appears instantly when your app starts up. The launch screen is quickly replaced with the first screen of your app, giving the impression that your app is fast and responsive</h1></blockquote><p>In the old days, we needed to use static launch images with different sizes for each device and orientation.</p><p><img src="https://cdn-images-1.medium.com/max/2912/1*gncLBHGa4ntt1a9NCLL_1g.png" alt></p><h3 id="Launch-Screen-storyboard"><a href="#Launch-Screen-storyboard" class="headerlink" title="Launch Screen storyboard"></a>Launch Screen storyboard</h3><p>For now the recommended way is to use Launch Screen storyboard . The iOS project from React Native comes with LaunchScreen.xib but xib is a thing of the past. Let’s delete it and create a file called Launch Screen.storyboard .</p><p>Right click on MyApp folder -&gt; New and chose Launch Screen, add it to both targets as usually we show the same splash screen for both staging and production.</p><p><img src="https://cdn-images-1.medium.com/max/5140/1*kfGNEVm_gJevBIziQ3iXbw.png" alt></p><p><img src="https://cdn-images-1.medium.com/max/2984/1*v0ZGfvbSFgljeW34PQsw7g.png" alt></p><h3 id="Image-Set"><a href="#Image-Set" class="headerlink" title="Image Set"></a>Image Set</h3><p>Open asset catalog, right click and select New Image Set . We can name it anything. This will be used in the Launch Screen.storyboard.</p><p><img src="https://cdn-images-1.medium.com/max/4496/1*WOAJ9Vr7fSqRSxwBwRb3qg.png" alt></p><p>Open Launch Screen.storyboard and add an UIImageView . If you are using Xcode 10, click the Library button in the upper right corner and choose Show Objects Library.</p><p><img src="https://cdn-images-1.medium.com/max/6720/1*I6hTPAW_L4fUbo8cTakXlg.png" alt></p><p>Set image for Image View, and make sure Content Mode is set to Aspect Filled, as this ensures that the image always covers the full screen (although it may be cropped). Then connect ImageView using constraints to the View, not the Safe Area. You do this by Control+drag from the Image View (splash) to the View.</p><p><img src="https://cdn-images-1.medium.com/max/5700/1*qdEg7IejnxG3Y0Uo1bpiCA.png" alt></p><h3 id="Constrains-without-margin"><a href="#Constrains-without-margin" class="headerlink" title="Constrains without margin"></a>Constrains without margin</h3><p>Click into each constraint and uncheck Relative to Margin. This makes our ImageView pin to the very edges of the view and with no margin at all.</p><p><img src="https://cdn-images-1.medium.com/max/6720/1*5AIBO-ZLXfiLGsk9P32nFw.png" alt></p><p>Now go to both targets and select Launch Screen.storyboard as Launch Screen File:</p><p><img src="https://cdn-images-1.medium.com/max/7168/1*SrrFr1lk7oIwc4QvdoJVxg.png" alt></p><p>On iOS, the launch screen is often cached, so you probably won’t see the changes. One way to avoid that is to delete the app and run it again.</p><h3 id="Add-a-launcher-theme-for-Android"><a href="#Add-a-launcher-theme-for-Android" class="headerlink" title="Add a launcher theme for Android"></a>Add a launcher theme for Android</h3><p>There are <a href="https://android.jlelse.eu/the-complete-android-splash-screen-guide-c7db82bce565" target="_blank" rel="noopener">several</a> <a href="https://android.jlelse.eu/right-way-to-create-splash-screen-on-android-e7f1709ba154" target="_blank" rel="noopener">ways</a> to add splash screen for Android, from using launcher themes, Splash Activity, and a timer. For me, a reasonable splash screen for Android should be a very minimal image.</p><p>As there are many Android devices with different ratios and resolutions, if you want to show a full screen splash image, it will probably not scale correctly for each device. This is just about UX.</p><p>For the splash screen, let’s use the launcher theme with splash_background.xml .</p><h3 id="Learn-about-Device-Metric"><a href="#Learn-about-Device-Metric" class="headerlink" title="Learn about Device Metric"></a>Learn about Device Metric</h3><p>There is no single splash image that suits all Android devices. A more logical approach is to create multiple splash images for all common resolutions in portrait and landscape. Or we can design a minimal splash image that works. You can find more info here: <a href="https://material.io/tools/devices/" target="_blank" rel="noopener">Device Metric</a>.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*VY5n-nyMet5xlgQyr_fWWw.png" alt></p><p><img src="https://cdn-images-1.medium.com/max/5940/1*491dzlEkHT3FvIuuLosGKg.png" alt></p><p>Here is how to add splash screen in 4 easy steps:</p><h3 id="Add-splash-image"><a href="#Add-splash-image" class="headerlink" title="Add splash image"></a>Add splash image</h3><p>We usually need a common splash screen for both staging and production. Drag an image into main/res/drawble . Android Studio seems to have a problem with recognising some jpg images for the splash screen, so it’s best to choose png images.</p><h3 id="Add-splash-background-xml"><a href="#Add-splash-background-xml" class="headerlink" title="Add splash_background.xml"></a>Add splash_background.xml</h3><p>Right click on drawable -&gt; New -&gt; Drawable resource file . Name it whatever you want — I choose splash_background.xml . Choose the root element as layer-list:</p><p><img src="https://cdn-images-1.medium.com/max/4170/1*rEa10WkfXx9VCBX_0sQK3A.png" alt></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*FwCOuThRAGCZSWvdhVrfCw.png" alt></p><p>A [Layer List](<a href="http://Layer" target="_blank" rel="noopener">http://Layer</a> List) means “a Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is drawn on top”. Here is how splash_background.xml looks like:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!-- The android:opacity=”opaque” line — this is critical in preventing a flash of black as your theme transitions. --&gt;&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:opacity=&quot;opaque&quot;&gt;    &lt;!-- The background color, preferably the same as your normal theme --&gt;    &lt;item android:drawable=&quot;@android:color/white&quot;/&gt;    &lt;!-- Your splash image --&gt;    &lt;item&gt;        &lt;bitmap            android:src=&quot;@drawable/iron_man&quot;            android:gravity=&quot;center&quot;/&gt;    &lt;/item&gt;&lt;/layer-list&gt;</code></pre><p>Note that we point to our splash image we added earlier with android:src=”@drawable/iron_man”.</p><h3 id="Declare-style"><a href="#Declare-style" class="headerlink" title="Declare style"></a>Declare style</h3><p>Open styles.xml and add SplashTheme:</p><pre><code>&lt;style name=&quot;SplashTheme&quot; parent=&quot;Theme.AppCompat.NoActionBar&quot;&gt;    &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/splash_background&lt;/item&gt;&lt;/style&gt;</code></pre><h3 id="Use-SplashTheme"><a href="#Use-SplashTheme" class="headerlink" title="Use SplashTheme"></a>Use SplashTheme</h3><p>Go to Manifest.xml and change the theme of the the launcher activity, which has category android:name=”android.intent.category.LAUNCHER” . Change it to android:theme=”@style/SplashTheme” . For React Native, the launcher activity is usually MainActivity . Here is how Manifest.xml looks:</p><pre><code>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    package=&quot;com.myapp&quot;&gt;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;    &lt;application      android:name=&quot;.MainApplication&quot;      android:label=&quot;@string/app_name&quot;      android:icon=&quot;@mipmap/ic_launcher&quot;      android:allowBackup=&quot;false&quot;      android:theme=&quot;@style/AppTheme&quot;&gt;      &lt;activity        android:name=&quot;.MainActivity&quot;        android:label=&quot;@string/app_name&quot;        android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize&quot;        android:theme=&quot;@style/SplashTheme&quot;        android:windowSoftInputMode=&quot;adjustResize&quot;&gt;        &lt;intent-filter&gt;            &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;        &lt;/intent-filter&gt;      &lt;/activity&gt;      &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>Run the app now and you should see the splash screen showing when the app starts.</p><h2 id="Managing-environment-configurations"><a href="#Managing-environment-configurations" class="headerlink" title="Managing environment configurations"></a>Managing environment configurations</h2><p>The differences between staging and production are just about app names, application ids, and app icons. We probably use different API keys, and backend URL for staging and production.</p><p>Right now the most popular library to handle these scenarios is <a href="https://github.com/luggit/react-native-config" target="_blank" rel="noopener">react-native-config</a>, which is said to “bring some 12 factor love to your mobile apps”. It requires lots of steps to get started, and I hope there is a less verbose solution.</p><h3 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h3><p>In this post, we touched Xcode and Android Studio more than Visual Studio Code, but this was inevitable. I hope this post was useful to you. Here are some more links to read more about this topic:</p><ul><li><a href="https://medium.com/@scottianstewart/react-native-add-app-icons-and-launch-screens-onto-ios-and-android-apps-3bfbc20b7d4c" target="_blank" rel="noopener">Add App Icons and Launch Screens to React Native Apps (iOS &amp; Android)</a></li><li><a href="https://medium.com/handlebar-labs/how-to-add-a-splash-screen-to-a-react-native-app-ios-and-android-30a3cec835ae" target="_blank" rel="noopener">How to Add a Splash Screen to a React Native App (iOS and Android)</a></li><li><a href="https://medium.com/differential/managing-configuration-in-react-native-cd2dfb5e6f7b" target="_blank" rel="noopener">Managing Configuration in React Native</a></li><li><a href="https://medium.com/@jacks205/adding-multiple-target-pipelines-for-react-native-apps-and-fastlane-circleci-deployment-pt-1-ae9590ae52f2" target="_blank" rel="noopener">Adding multiple target pipelines for React Native Apps (and Fastlane CircleCI deployment) pt. 1</a></li><li><a href="https://android.jlelse.eu/the-complete-android-splash-screen-guide-c7db82bce565" target="_blank" rel="noopener">The (Complete) Android Splash Screen Guide</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Make Linear Gradient View with Bridging in React Native</title>
      <link href="/blog/How-to-Make-Linear-Gradient-View-with-Bridging-in-React-Native/"/>
      <url>/blog/How-to-Make-Linear-Gradient-View-with-Bridging-in-React-Native/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/264" target="_blank" rel="noopener">#264</a></strong></p><p>Original post <a href="https://medium.com/react-native-training/react-native-bridging-how-to-make-linear-gradient-view-83c3805373b7" target="_blank" rel="noopener">https://medium.com/react-native-training/react-native-bridging-how-to-make-linear-gradient-view-83c3805373b7</a></p><hr><p>React Native lets us build mobile apps using only Javascript. It works by providing a common interface that talks to native iOS and Android components. There are enough essentials components to get started, but the cooler thing is that it is easy to build our own, hence we are not limited by React Native. In this post we will implement a linear gradient view, which is not supported by default in React Native, using native UI component, particularly CAGradientLayer in iOS and GradientDrawable in Android.</p><p>In Javascript there are hundreds of libraries for a single problem and you should check if you really need it or not. A search on Google for linear gradient shows a bunch of libraries, like <a href="https://github.com/react-native-community/react-native-linear-gradient" target="_blank" rel="noopener">react-native-linear-gradient</a>. The less <a href="https://medium.com/fantageek/what-is-create-react-native-app-9f3bc5a6c2a3" target="_blank" rel="noopener">dependencies</a> the better. Linear gradient is in fact very easy to build and we probably don’t need to add extra dependencies. Also <a href="https://dev.to/acro5piano/struggle-to-install-react-native-linear-gradient--2omm" target="_blank" rel="noopener">integrating</a> <a href="https://medium.com/react-native-training/fixing-react-native-issues-and-happy-deploy-to-bitrise-fabric-circleci-44da4ab1487b" target="_blank" rel="noopener">and</a> <a href="https://medium.com/react-native-training/firebase-sdk-with-firestore-for-react-native-apps-in-2018-aa89a67d6934" target="_blank" rel="noopener">following</a> <a href="https://medium.com/react-native-training/facebook-sdk-with-login-for-react-native-apps-in-2018-196601804f66" target="_blank" rel="noopener">updates</a> with 3rd libraries are painful, I would avoid that as much as possible.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*SZnOwVTr15PY7uHYqaeaXw.png" alt></p><h2 id="Native-UI-component-vs-Native-module"><a href="#Native-UI-component-vs-Native-module" class="headerlink" title="Native UI component vs Native module"></a>Native UI component vs Native module</h2><p>In React Native, there are native UI component and native module. React Native moves pretty fast so most of the articles will be outdated, it’s best to consult official documentation for the latest React Native version. This post will try to give you overview of the whole picture because for now the official guide seems not completed.</p><ul><li><p><a href="https://facebook.github.io/react-native/docs/native-modules-ios" target="_blank" rel="noopener">Native Modules in iOS</a></p></li><li><p><a href="https://facebook.github.io/react-native/docs/native-modules-android" target="_blank" rel="noopener">Native Modules in Android</a></p></li><li><p><a href="https://facebook.github.io/react-native/docs/native-components-ios" target="_blank" rel="noopener">Native UI Components in iOS</a></p></li><li><p><a href="https://facebook.github.io/react-native/docs/native-components-android" target="_blank" rel="noopener">Native UI Components in Android</a></p></li></ul><p>In simple explanation, native UI component is about making UIView in iOS or View in Android available as React.Component and used in render function in Javascript.</p><blockquote><p>There are tons of native UI widgets out there ready to be used in the latest apps — some of them are part of the platform, others are available as third-party libraries, and still more might be in use in your very own portfolio. React Native has several of the most critical platform components already wrapped, like ScrollView and TextInput, but not all of them, and certainly not ones you might have written yourself for a previous app.</p></blockquote><p>Native module is more general in that we make any native class available in Javascript.</p><blockquote><p>Sometimes an app needs access to platform API, and React Native doesn’t have a corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift or C++ code without having to reimplement it in JavaScript, or write some high performance, multi-threaded code such as for image processing, a database, or any number of advanced extensions.</p></blockquote><h2 id="View-Manager"><a href="#View-Manager" class="headerlink" title="View Manager"></a>View Manager</h2><p>To expose native UI views, we use the ViewManager as the bridge, it is RCTViewManager in iOS and SimpleViewManager in Android. Then inside this ViewManager we can just return our custom view. I see it’s good to use Objective C/Java for the ViewManager to match React Native classes, and the custom view we can use either Swift/Objective C in iOS and Kotlin/Java in Android.</p><p>I prefer to use Swift, but in this post to remove the overhead of introducing bridging header from Swift to Objective C, we use Objective C for simplicity. We also add the native source code directly into iOS and Android project, but in the future we can extract them easily to a React Native library.</p><p>For now let ‘s use the name RNGradientViewManager and RNGradientView to stay consistent between iOS and Android. The RN prefix is arbitrary, you can use any prefix you want, but here I use it to indicate that these classes are meant to be used in Javascript side in React Native.</p><h2 id="Implement-in-iOS"><a href="#Implement-in-iOS" class="headerlink" title="Implement in iOS"></a>Implement in iOS</h2><h3 id="Project-structure"><a href="#Project-structure" class="headerlink" title="Project structure"></a>Project structure</h3><p>Add these Objective-C classes to the projects, I usually place them inside NativeComponents folder</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*v9ecOYKhfHenOfFD_YyXjA.png" alt></p><blockquote><p>Native views are created and manipulated by subclasses of RCTViewManager. These subclasses are similar in function to view controllers, but are essentially singletons - only one instance of each is created by the bridge. They expose native views to the RCTUIManager, which delegates back to them to set and update the properties of the views as necessary. The RCTViewManagers are also typically the delegates for the views, sending events back to JavaScript via the bridge.</p></blockquote><h3 id="RNGradientViewManager"><a href="#RNGradientViewManager" class="headerlink" title="RNGradientViewManager"></a>RNGradientViewManager</h3><p>Create a RNGradientViewManager that inherits from RCTViewManager</p><p><strong>RNGradientViewManager.h</strong></p><pre><code>#import &lt;React/RCTViewManager.h&gt;@interface RNGradientViewManager : RCTViewManager@end</code></pre><p><strong>RNGradientViewManager.m</strong></p><pre><code>#import &quot;RNGradientViewManager.h&quot;#import &quot;RNGradientView.h&quot;[@implementation](http://twitter.com/implementation) RNGradientViewManagerRCT_EXPORT_MODULE()- (UIView *)view {  return [[RNGradientView alloc] init];}RCT_EXPORT_VIEW_PROPERTY(progress, NSNumber);RCT_EXPORT_VIEW_PROPERTY(cornerRadius, NSNumber);RCT_EXPORT_VIEW_PROPERTY(fromColor, UIColor);RCT_EXPORT_VIEW_PROPERTY(toColor, UIColor);[@end](http://twitter.com/end)</code></pre><p>In iOS we use macro RCT_EXPORT_MODULE() to automatically register the module with the bridge when it loads. The optional js_name argument will be used as the JS module name. If omitted, the JS module name will match the Objective-C class name.</p><pre><code>#define RCT_EXPORT_MODULE(js_name)</code></pre><p>The ViewManager, not the View, is the facade to the Javascript side, so we expose properties using RCT_EXPORT_VIEW_PROPERTY . Note that we do that inside @implementation RNGradientViewManager</p><p>Here we specify the types as NSNumber and UIColor , and later in Javascript we can just pass number and color hex string, and React Native can do the conversions for us. In older versions of React Native, we need processColor in Javascript or RCTConvert color in iOS side, but we don’t need to perform manual conversion now.</p><h3 id="RNGradientView"><a href="#RNGradientView" class="headerlink" title="RNGradientView"></a>RNGradientView</h3><p>In the Native UI component <a href="https://facebook.github.io/react-native/docs/native-components-ios" target="_blank" rel="noopener">example</a> for iOS, they use WKWebView but here we make a RNGradientView which subclasses from <a href="https://github.com/facebook/react-native/blob/master/React/Views/RCTView.h" target="_blank" rel="noopener">RCTView</a> to take advantage of many features of React Native views, and to avoid some problems we can get if using a normal UIView</p><p><strong>RNGradientView.h</strong></p><pre><code>#import &lt;UIKit/UIKit.h&gt;#import &lt;React/RCTView.h&gt;[@interface](http://twitter.com/interface) RNGradientView : RCTView[@end](http://twitter.com/end)</code></pre><p><strong>RNGradientView.m</strong></p><pre><code>#import &quot;RNGradientView.h&quot;#import &lt;UIKit/UIKit.h&gt;[@interface](http://twitter.com/interface) RNGradientView()[@property](http://twitter.com/property) CAGradientLayer *gradientLayer;[@property](http://twitter.com/property) UIColor *_fromColor;[@property](http://twitter.com/property) UIColor *_toColor;[@property](http://twitter.com/property) NSNumber *_progress;[@property](http://twitter.com/property) NSNumber *_cornerRadius;[@end](http://twitter.com/end)[@implementation](http://twitter.com/implementation) RNGradientView// MARK: - Init- (instancetype)initWithFrame:(CGRect)frame{  self = [super initWithFrame:frame];  if (self) {    self.gradientLayer = [self makeGradientLayer];    [self.layer addSublayer:self.gradientLayer];self._fromColor = [UIColor blackColor];    self._toColor = [UIColor whiteColor];    self._progress = [@0](http://twitter.com/0).5;[self update];  }  return self;}// MARK: - Life cycle- (void)layoutSubviews {  [super layoutSubviews];self.gradientLayer.frame = CGRectMake(    0, 0,    self.bounds.size.width*self._progress.floatValue,    self.bounds.size.height  );}// MARK: - Properties- (void)setFromColor:(UIColor *)color {  self._fromColor = color;  [self update];}- (void)setToColor:(UIColor *)color {  self._toColor = color;  [self update];}- (void)setProgress:(NSNumber *)progress {  self._progress = progress;  [self update];}- (void)setCornerRadius:(NSNumber *)cornerRadius {  self._cornerRadius = cornerRadius;  [self update];}// MARK: - Helper- (void)update {  self.gradientLayer.colors = @[    (id)self._fromColor.CGColor,    (id)self._toColor.CGColor  ];self.gradientLayer.cornerRadius = self._cornerRadius.floatValue;[self setNeedsLayout];}- (CAGradientLayer *)makeGradientLayer {  CAGradientLayer *gradientLayer = [CAGradientLayer layer];gradientLayer.masksToBounds = true;gradientLayer.startPoint = CGPointMake(0.0, 0.5);  gradientLayer.endPoint = CGPointMake(1.0, 0.5);  gradientLayer.anchorPoint = CGPointZero;return gradientLayer;}[@end](http://twitter.com/end)</code></pre><p>We can implement anything we want in this native view, in this case we use CAGradientLayer to get nicely displayed linear gradient. Since RNGradientViewManager exposes some properties like progress, cornerRadius, fromColor, toColor we need to implement some setters as they will be called by React Native when we update values in Javascript side. In the setter we call setNeedsLayout to tell the view to invalidate the layout, hence layoutSubviews will be called again.</p><h3 id="requireNativeComponent"><a href="#requireNativeComponent" class="headerlink" title="requireNativeComponent"></a>requireNativeComponent</h3><p>Open project in Visual Studio Code, add GradientView.js to src/nativeComponents . The folder name is arbitrary, but it’s good to stay organised.</p><pre><code>import { requireNativeComponent } from &apos;react-native&apos;module.exports = requireNativeComponent(&apos;RNGradientView&apos;, null)</code></pre><p>Here we use <a href="https://github.com/facebook/react-native/blob/master/Libraries/ReactNative/requireNativeComponent.js" target="_blank" rel="noopener">requireNativeComponent</a> to load our RNGradientView . We only need this one Javascript file for interacting with both iOS and Android. You can name the module as RNGradientView but I think the practice in Javascript is that we don’t use prefix, so we name just GradientView .</p><pre><code>const requireNativeComponent = (uiViewClassName: string): string =&gt;  createReactNativeComponentClass(uiViewClassName, () =&gt;    getNativeComponentAttributes(uiViewClassName),  );module.exports = requireNativeComponent;</code></pre><p>Before I tried to use export default for the native component, but this way the view is not rendered at all, even if I wrap it inside React.Component . It seems we must use module.exports for the native component to be properly loaded.</p><p>Now using it is as easy as declare the GradientView with JSX syntax</p><pre><code>import GradientView from &apos;nativeComponents/GradientView&apos;export default class Profile extends React.Component {  render() {    return (      &lt;SafeAreaView style={styles.container}&gt;        &lt;GradientView          style={styles.progress}          fromColor={R.colors.progress.from}          toColor={R.colors.progress.to}          cornerRadius={5.0}          progress={0.8} /&gt;    )  }}</code></pre><h2 id="Implement-in-Android"><a href="#Implement-in-Android" class="headerlink" title="Implement in Android"></a>Implement in Android</h2><h3 id="Project-structure-1"><a href="#Project-structure-1" class="headerlink" title="Project structure"></a>Project structure</h3><p>Add these Java classes to the projects, I usually place them inside nativeComponents folder</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*7v9qtfOAGPF2lqvWrrOysg.png" alt></p><h3 id="RNGradientManager"><a href="#RNGradientManager" class="headerlink" title="RNGradientManager"></a>RNGradientManager</h3><p>Create a RNGradientManager that extends SimpleViewManager<br><strong>RNGradientManager.java</strong></p><pre><code>package com.onmyway133.myApp.nativeComponents;import android.support.annotation.Nullable;import com.facebook.react.uimanager.SimpleViewManager;import com.facebook.react.uimanager.ThemedReactContext;import com.facebook.react.uimanager.annotations.ReactProp;public class RNGradientViewManager extends SimpleViewManager&lt;RNGradientView&gt; {    [@Override](http://twitter.com/Override)    public String getName() {        return &quot;RNGradientView&quot;;    }[@Override](http://twitter.com/Override)    protected RNGradientView createViewInstance(ThemedReactContext reactContext) {        return new RNGradientView(reactContext);    }// Properties[@ReactProp](http://twitter.com/ReactProp)(name = &quot;progress&quot;)    public void setProgress(RNGradientView view, [@Nullable](http://twitter.com/Nullable) float progress) {        view.setProgress(progress);    }[@ReactProp](http://twitter.com/ReactProp)(name = &quot;cornerRadius&quot;)    public void setCornerRadius(RNGradientView view, [@Nullable](http://twitter.com/Nullable) float cornerRadius) {        view.setCornerRadius(cornerRadius);    }[@ReactProp](http://twitter.com/ReactProp)(name = &quot;fromColor&quot;, customType = &quot;Color&quot;)    public void setFromColor(RNGradientView view, [@Nullable](http://twitter.com/Nullable) int color) {        view.setFromColor(color);    }[@ReactProp](http://twitter.com/ReactProp)(name = &quot;toColor&quot;, customType = &quot;Color&quot;)    public void setToColor(RNGradientView view, [@Nullable](http://twitter.com/Nullable) int color) {        view.setToColor(color);    }}</code></pre><p>We usually use <a href="https://developer.android.com/reference/android/graphics/Color" target="_blank" rel="noopener">Color</a> as android.graphics.Color , but for the GradientDrawable that we are going to use, it use color as ARGB integer. So it’s nifty that React Native deals with Color as int type. We also need to specify customType = “Color” as Color is something kinda custom.</p><h3 id="RNGradientView-1"><a href="#RNGradientView-1" class="headerlink" title="RNGradientView"></a>RNGradientView</h3><p>This is where we implement our view, we can do that in Kotlin if we like.</p><p><strong>RNGradientView.java</strong></p><pre><code>package com.onmyway133.myApp.nativeComponents;import android.content.Context;import android.graphics.drawable.GradientDrawable;import android.graphics.drawable.ScaleDrawable;import android.support.annotation.Nullable;import android.util.AttributeSet;import android.view.Gravity;import android.view.View;public class RNGradientView extends View {    float progress;    float cornerRadius;    int fromColor;    int toColor;    public RNGradientView(Context context) {        super(context);    }    public RNGradientView(Context context, @Nullable AttributeSet attrs) {        super(context, attrs);    }    public RNGradientView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    public RNGradientView(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {        super(context, attrs, defStyleAttr, defStyleRes);    }    // update    void update() {        GradientDrawable gradient = new GradientDrawable();        gradient.setColors(new int[] {            this.fromColor,            this.toColor        });         gradient.setOrientation(GradientDrawable.Orientation.*LEFT_RIGHT*);        gradient.setGradientType(GradientDrawable.*LINEAR_GRADIENT*);        gradient.setShape(GradientDrawable.*RECTANGLE*);        gradient.setCornerRadius(this.cornerRadius * 4);        ScaleDrawable scale = new ScaleDrawable(gradient, Gravity.*LEFT*, 1, -1);        scale.setLevel((int)(this.progress * 10000));        this.setBackground(scale);    }    // Getter &amp; setter    public void setProgress(float progress) {        this.progress = progress;        this.update();    }    public void setCornerRadius(float cornerRadius) {        this.cornerRadius = cornerRadius;        this.update();    }    public void setFromColor(int fromColor) {        this.fromColor = fromColor;        this.update();    }    public void setToColor(int toColor) {        this.toColor = toColor;        this.update();    }}</code></pre><p>Pay attention to the <a href="https://developer.android.com/reference/android/graphics/drawable/GradientDrawable.html#setColors(int[])" target="_blank" rel="noopener">setColors</a> as it use an array of int</p><blockquote><p>Sets the colors used to draw the gradient.<br>Each color is specified as an ARGB integer and the array must contain at least 2 colors.</p></blockquote><p>If we call setBackground with the GradientDrawable it will be stretched to fill the view. In our case we want to support progress which determines how long the gradient should show. To fix that we use <a href="https://developer.android.com/reference/android/graphics/drawable/ScaleDrawable" target="_blank" rel="noopener">ScaleDrawable</a> which is a Drawable that changes the size of another Drawable based on its current level value.</p><p>The same value for cornerRadius works in iOS, but for Android we need to use higher values, that’s why the multiplication in gradient.setCornerRadius(this.cornerRadius * 4)</p><h3 id="Shape-drawable"><a href="#Shape-drawable" class="headerlink" title="Shape drawable"></a>Shape drawable</h3><p>Another way to implement gradient is to use Shape Drawable with xml , it’s the equivalent of using xib in iOS. We can create something like gradient.xml and put that inside /res/drawable</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;[http://schemas.android.com/apk/res/android](http://schemas.android.com/apk/res/android)&quot;    android:shape=&quot;rectangle&quot;&gt;    &lt;gradient        android:startColor=&quot;#3B5998&quot;        android:endColor=&quot;#00000000&quot;        android:angle=&quot;45&quot;/&gt;    &lt;/shape&gt;</code></pre><p>For more information, you can read<br><a href="https://android.jlelse.eu/android-shape-drawables-tutorial-17fbece6fef5" target="_blank" rel="noopener"><strong>Android Shape Drawables Tutorial</strong><br><em>Have you ever wanted to reduce your Android application’s size or make it look more interesting? If yes, then you…</em>android.jlelse.eu</a></p><p>We can also use the class directly <a href="https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable" target="_blank" rel="noopener">ShapeDrawable</a> in code</p><blockquote><p>A Drawable object that draws primitive shapes. A ShapeDrawable takes a <a href="https://developer.android.com/reference/android/graphics/drawable/shapes/Shape.html" target="_blank" rel="noopener">Shape</a> object and manages its presence on the screen. If no Shape is given, then the ShapeDrawable will default to a <a href="https://developer.android.com/reference/android/graphics/drawable/shapes/RectShape.html" target="_blank" rel="noopener">RectShape</a>.<br>This object can be defined in an XML file with the <shape> element.</shape></p></blockquote><h3 id="GradientManagerPackage"><a href="#GradientManagerPackage" class="headerlink" title="GradientManagerPackage"></a>GradientManagerPackage</h3><p>In iOS we use RCT_EXPORT_MODULE to register the component, but in Android, things are done explicitly using Package . A package can register both native module and native UI component. In this case we deal with just UI component, so let’s return RNGradientManager in createViewManagers</p><p><strong>GradientManagerPackage.java</strong></p><pre><code>package com.onmyway133.myApp.nativeComponents;import com.facebook.react.ReactPackage;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.Arrays;import java.util.Collections;import java.util.List;public class RNGradientViewPackage implements ReactPackage {    [@Override](http://twitter.com/Override)    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) {        return Collections.emptyList();    }[@Override](http://twitter.com/Override)    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) {        return Arrays.&lt;ViewManager&gt;asList(            new RNGradientViewManager()        );    }}</code></pre><p>Then head over to MainApplication.java to declare our package</p><pre><code>[@Override](http://twitter.com/Override)protected List&lt;ReactPackage&gt; getPackages() {  return Arrays.&lt;ReactPackage&gt;asList(      new MainReactPackage(),      new RNGradientViewPackage()  );}</code></pre><p>That’s it for Android. We already have the GradientView.js written earlier, when running the app in Android, it will look up and load our RNGradientView</p><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>Hope you learn something about native UI component. In the post we only touch the surfaces on what native UI component can do, which is just passing configurations from Javascript to native. There are a lot more to discover, like event handling, thread, styles, custom types, please consult the official documentation for correct guidance.</p><ul><li><a href="https://facebook.github.io/react-native/docs/native-components-ios" target="_blank" rel="noopener">Native UI Components for iOS</a></li><li><a href="https://facebook.github.io/react-native/docs/native-components-android" target="_blank" rel="noopener">Native UI Components for Android</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to dismiss keyboard with react-navigation in React Native apps</title>
      <link href="/blog/How-to-dismiss-keyboard-with-react-navigation-in-React-Native-apps/"/>
      <url>/blog/How-to-dismiss-keyboard-with-react-navigation-in-React-Native-apps/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/263" target="_blank" rel="noopener">#263</a></strong></p><p>Original post <a href="https://medium.com/react-native-training/how-to-dismiss-keyboard-with-react-navigation-in-react-native-apps-4b987bbfdc48" target="_blank" rel="noopener">https://medium.com/react-native-training/how-to-dismiss-keyboard-with-react-navigation-in-react-native-apps-4b987bbfdc48</a></p><hr><p>Showing and dismiss keyboard seems like a trivial thing to do in mobile apps, but it can be tricky in automatically dismissing it when it comes together with react-navigation and modal presentation. At least that’s according to my initial assumption. This article aims to detail what I have learned about keyboard handling and how to avoid extra tap when dealing with TextInput There will also be lots of code spelunking, thanks to the all the libraries being open source. The version of React Native I’m using at the time of writing is 0.57.5</p><h2 id="The-built-in-TextInput-component"><a href="#The-built-in-TextInput-component" class="headerlink" title="The built in TextInput component"></a>The built in TextInput component</h2><p>React Native comes with a bunch of basic components, one of them is the <a href="https://facebook.github.io/react-native/docs/textinput" target="_blank" rel="noopener">TextInput</a> for inputting text into the app via a keyboard.</p><pre><code>import React, { Component } from &apos;react&apos;;import { AppRegistry, TextInput } from &apos;react-native&apos;;export default class UselessTextInput extends Component {  constructor(props) {    super(props);    this.state = { text: &apos;Useless Placeholder&apos; };  }render() {    return (      &lt;TextInput        style={{height: 40, borderColor: 'gray', borderWidth: 1}}        onChangeText={(text) =&gt; this.setState({text})}        value={this.state.text}      /&gt;    );  }}</code></pre><p>That’s it, whenever we click on the text input, keyboard appears allowing us to enter values. To dismiss the keyboard by pressing anywhere on the screen, the easy solution is to TouchableWithoutFeedback together with Keyboard . This is similar to having UITapGestureRecognizer in iOS UIView and calling view.endEditing</p><pre><code>import { Keyboard } from &apos;react-native&apos;Keyboard.dismiss()</code></pre><h2 id="TextInput-inside-ScrollView"><a href="#TextInput-inside-ScrollView" class="headerlink" title="TextInput inside ScrollView"></a>TextInput inside ScrollView</h2><p>Normally we should have some text inputs inside a scrolling component, in React Native that is mostly ScrollView to be able to handle long list of content and avoid keyboard. If TextInput is inside ScrollView then the way keyboard gets dismissed behaves a bit differently, and depends on <a href="https://facebook.github.io/react-native/docs/scrollview#keyboardshouldpersisttaps" target="_blank" rel="noopener">keyboardShouldPersistTaps</a></p><p>Determines when the keyboard should stay visible after a tap.</p><ul><li><p>‘never’ (the default), tapping outside of the focused text input when the keyboard is up dismisses the keyboard. When this happens, children won’t receive the tap.</p></li><li><p>‘always’, the keyboard will not dismiss automatically, and the scroll view will not catch taps, but children of the scroll view can catch taps.</p></li><li><p>‘handled’, the keyboard will not dismiss automatically when the tap was handled by a children, (or captured by an ancestor).</p></li></ul><p>The never mode should be the desired behaviour in most cases, clicking anywhere outside the focused text input should dismiss the keyboard.</p><p>In my app, there are some text inputs and an action button. The scenario is that users enter some infos and then press that button to register data. With the never mode, we have to press button twice, one for dismissing the keyboard, and two for the onPress of the Button . So the solution is to use always mode. This way the Button always gets the press event first.</p><pre><code>&lt;ScrollView keyboardShouldPersistTaps=&apos;always&apos; /&gt;</code></pre><h2 id="ScrollView-cares-about-keyboard"><a href="#ScrollView-cares-about-keyboard" class="headerlink" title="ScrollView cares about keyboard"></a>ScrollView cares about keyboard</h2><p>The native RCTScrollView class that power react native ScrollView has code to handle dismiss mode</p><pre><code>RCT_SET_AND_PRESERVE_OFFSET(setKeyboardDismissMode, keyboardDismissMode, UIScrollViewKeyboardDismissMode)</code></pre><p>The option that it chooses is UIScrollViewKeyboardDismissMode for <a href="https://developer.apple.com/documentation/uikit/uiscrollview/1619437-keyboarddismissmode" target="_blank" rel="noopener">keyboardDismissMode</a> property</p><blockquote><p>The manner in which the keyboard is dismissed when a drag begins in the scroll view.</p></blockquote><p>As you can see, the possible modes are onDrag and interactive . And react native exposes customization point for this via keyboardShouldPersistTaps</p><p><a href="https://developer.apple.com/documentation/uikit/uiscrollview/keyboarddismissmode/none" target="_blank" rel="noopener">case none</a> The keyboard does not get dismissed with a drag.</p><p><a href="https://developer.apple.com/documentation/uikit/uiscrollview/keyboarddismissmode/ondrag" target="_blank" rel="noopener">case onDrag</a> The keyboard is dismissed when a drag begins.</p><p><a href="https://developer.apple.com/documentation/uikit/uiscrollview/keyboarddismissmode/interactive" target="_blank" rel="noopener">case interactive</a> The keyboard follows the dragging touch offscreen, and can be pulled upward again to cancel the dismiss.</p><h2 id="ScrollView-inside-a-Modal"><a href="#ScrollView-inside-a-Modal" class="headerlink" title="ScrollView inside a Modal"></a>ScrollView inside a Modal</h2><p>But that does not work when ScrollView is inside <a href="https://facebook.github.io/react-native/docs/modal.html" target="_blank" rel="noopener">Modal</a> . By Modal I meant the <a href="https://facebook.github.io/react-native/docs/modal.html" target="_blank" rel="noopener">Modal</a> component in React Native. The only library that I use is react-navigation , and it supports <a href="https://reactnavigation.org/docs/en/modal.html" target="_blank" rel="noopener">Opening a full-screen modal</a> too, but they way we declare modal in react-navigation looks like stack and it is confusing, so I would rather not use it. I use Modal in react-native and that works pretty well.</p><p>So if we have TextInput inside ScrollView inside Modal then keyboardShouldPersistTaps does not work. Modal seems to be aware of parent ScrollView so we have to declare keyboardShouldPersistTaps=’always’ on every parent ScrollView . In React Native FlatList and SectionList uses ScrollView under the hood, so we need to be aware of all those ScrollView components.</p><h2 id="Spelunking-react-navigation"><a href="#Spelunking-react-navigation" class="headerlink" title="Spelunking react-navigation"></a>Spelunking react-navigation</h2><p>Since my app relies heavily on react-navigation , it’s good to have a deep understanding about its components so we make sure where the problem lies. I’ve written a bit about react-navigation structure below.<br><a href="https://codeburst.io/using-react-navigation-3-0-in-react-native-apps-38cd5020fbbe" target="_blank" rel="noopener"><strong>Using react-navigation 3.0 in React Native apps</strong><br><em>react-navigation is probably the only dependency I use in React Native apps. I’m happy with it so far, then version 3.0…</em>codeburst.io</a></p><p>Like every traditional mobile apps, my app consists of many stack navigators inside tab navigator. In iOS that means many UINavigationViewController inside UITabbarController . In react-navigation I use createMaterialTopTabNavigator inside createBottomTabNavigator</p><pre><code>import { createMaterialTopTabNavigator } from &apos;react-navigation&apos;import { createBottomTabNavigator, BottomTabBar } from &apos;react-navigation-tabs&apos;</code></pre><p>The screen I have keyboard issue is a Modal presented from the 2nd screen in one of the stack navigators, so let’s examine every possible ScrollView up the hierarchy. This process involves lots of code reading and this’s how I love open source.</p><p>First let’s start with <a href="https://github.com/react-navigation/react-navigation-tabs/blob/master/src/navigators/createBottomTabNavigator.js" target="_blank" rel="noopener">createBottomTabNavigator</a> which uses <a href="https://github.com/react-navigation/react-navigation-tabs/blob/master/src/utils/createTabNavigator.js" target="_blank" rel="noopener">createTabNavigator</a> together with its own TabNavigationView</p><pre><code>class TabNavigationView extends React.PureComponent&lt;Props, State&gt;export default createTabNavigator(TabNavigationView);</code></pre><p>Tab navigator has tab bar view below ScreenContainer , which is used to contain view. ScreenContainer is from <a href="https://github.com/kmagiera/react-native-screens" target="_blank" rel="noopener">react-native-screens</a> “This project aims to expose native navigation container components to React Native”. Below is how tab navigator works.</p><pre><code>render() {  const { navigation, renderScene, lazy } = this.props;  const { routes } = navigation.state;  const { loaded } = this.state  return (    &lt;View style={styles.container}&gt;      &lt;ScreenContainer style={styles.pages}&gt;        {routes.map((route, index) =&gt; {          if (lazy &amp;&amp; !loaded.includes(index)) {            // Don&apos;t render a screen if we&apos;ve never navigated to it            return null;          const isFocused = navigation.state.index === index          return (            &lt;ResourceSavingScene              key={route.key}              style={StyleSheet.absoluteFill}              isVisible={isFocused}            &gt;              {renderScene({ route })}            &lt;/ResourceSavingScene&gt;          );        })}      &lt;/ScreenContainer&gt;      {this._renderTabBar()}    &lt;/View&gt;  );}</code></pre><p>Tab bar is rendered using <a href="https://github.com/react-navigation/react-navigation-tabs/blob/master/src/views/BottomTabBar.js" target="_blank" rel="noopener">BottomTabBar</a> in _renderTabBar function. Looking at the code, the whole tab navigator has nothing to do with ScrollView .</p><p>So there is only <a href="https://github.com/react-navigation/react-navigation-tabs/blob/master/src/navigators/createMaterialTopTabNavigator.js" target="_blank" rel="noopener">createMaterialTopTabNavigator</a> left on the suspecting list. I use it in the app with swipeEnabled: true . And by looking at the imports, top tab navigator has</p><pre><code>import MaterialTopTabBar, {  type TabBarOptions,} from &apos;../views/MaterialTopTabBar&apos;;</code></pre><p><a href="https://github.com/react-navigation/react-navigation-tabs/blob/master/src/views/MaterialTopTabBar.js" target="_blank" rel="noopener">MaterialTopTabBar</a> has import from <a href="https://github.com/react-native-community/react-native-tab-view/blob/master/src/TabBar.js" target="_blank" rel="noopener">react-native-tab-view</a></p><pre><code>import { TabBar } from &apos;react-native-tab-view&apos;;</code></pre><p>which has ScrollView</p><pre><code>&lt;View style={styles.scroll}&gt;  &lt;Animated.ScrollView    horizontal    keyboardShouldPersistTaps=&quot;handled&quot;</code></pre><p>The property keyboardShouldPersistTaps was initial set to always , then set back to <a href="https://github.com/react-native-community/react-native-tab-view/commit/e00bd021158a9ca6ad6f1ad0578303f0fdedb9e6#diff-9c1d42ef76323a8c67bd25bccfea6132" target="_blank" rel="noopener">handled</a> to avoid the bug that we can’t press any button in tab bar while keyboard is open <a href="https://github.com/react-native-community/react-native-tab-view/issues/375" target="_blank" rel="noopener">https://github.com/react-native-community/react-native-tab-view/issues/375</a></p><p>But this TabBar has nothing with our problem, because it’s just for containing tab bar buttons.</p><h2 id="Swiping-in-createMaterialTopTabNavigator"><a href="#Swiping-in-createMaterialTopTabNavigator" class="headerlink" title="Swiping in createMaterialTopTabNavigator"></a>Swiping in createMaterialTopTabNavigator</h2><p>Taking another look at <a href="https://github.com/react-navigation/react-navigation-tabs/blob/master/src/navigators/createMaterialTopTabNavigator.js" target="_blank" rel="noopener">createMaterialTopTabNavigator</a> we see more imports from react-native-tab-view</p><pre><code>import { TabView, PagerPan } from &apos;react-native-tab-view&apos;;</code></pre><p>TabView has swipeEnabled passed in</p><pre><code>return (  &lt;TabView    {...rest}    navigationState={navigation.state}    animationEnabled={animationEnabled}    swipeEnabled={swipeEnabled}    onAnimationEnd={this._handleAnimationEnd}    onIndexChange={this._handleIndexChange}    onSwipeStart={this._handleSwipeStart}    renderPager={renderPager}    renderTabBar={this._renderTabBar}    renderScene={      /* $FlowFixMe */      this._renderScene    }  /&gt;);</code></pre><p>and it renders <a href="https://github.com/react-native-community/react-native-tab-view/blob/8b463fc31d/src/PagerDefault.js" target="_blank" rel="noopener">PagerDefault</a>, which in turn uses PagerScroll for iOS</p><pre><code>import { Platform } from &apos;react-native&apos;;let Pager;switch (Platform.OS) {  case &apos;android&apos;:    Pager = require(&apos;./PagerAndroid&apos;).default;    break;  case &apos;ios&apos;:    Pager = require(&apos;./PagerScroll&apos;).default;    break;  default:    Pager = require(&apos;./PagerPan&apos;).default;    break;}export default Pager;</code></pre><p>So <a href="https://github.com/react-native-community/react-native-tab-view/blob/8b463fc31d/src/PagerScroll.js" target="_blank" rel="noopener">PagerScroll</a> uses ScrollView to handle scrolling to match material style that user can scroll between pages, and it has keyboardShouldPersistTaps=”always” which should be correct.</p><pre><code>return (  &lt;ScrollView    horizontal    pagingEnabled    directionalLockEnabled    keyboardDismissMode=&quot;on-drag&quot;    keyboardShouldPersistTaps=&quot;always&quot;</code></pre><p>So nothing looks suspicious in react-navigation , which urges me to look at code from my project.</p><h2 id="Debugging-FlatList-SectionList-and-ScrollView"><a href="#Debugging-FlatList-SectionList-and-ScrollView" class="headerlink" title="Debugging FlatList, SectionList and ScrollView"></a>Debugging FlatList, SectionList and ScrollView</h2><p>Like I stated in the beginning of this article, the root problem is that we need to declare keyboardShouldPersistTaps for all parent ScrollView in the hierarchy. That means to look out for any FlatList, SectionList and ScrollView</p><p>Luckily, there is react-devtools that shows tree of all rendered components in react app, and that is also guided in <a href="https://facebook.github.io/react-native/docs/debugging.html" target="_blank" rel="noopener">Debugging</a> section of react native.</p><p>You can use <a href="https://github.com/facebook/react-devtools/tree/master/packages/react-devtools" target="_blank" rel="noopener">the standalone version of React Developer Tools</a> to debug the React component hierarchy. To use it, install the react-devtools package globally:</p><pre><code>npm install -g react-devtools</code></pre><p>So after searching I found out that there is a SectionList up the hierarchy that should have keyboardShouldPersistTaps=’always’ while it didn’t.</p><p><img src="https://cdn-images-1.medium.com/max/7168/1*RDNnY3yKYpgxdaXi4bGUTg.png" alt></p><p>Taking a thorough look at the code, I found out that the Modal is trigged from a SectionList item. We already know that triggering Modal in react native means that to embed that Modal inside the view hierarchy and control its visibility via a state. So in terms of view and component, that Modal is inside a SectionList . And for your interest, if you dive deep into react native code, SectionList in my case is just VirtualizedSectionList , which is VirtualizedList, which uses ScrollView</p><p>So after I declare keyboardShouldPersistTaps=’always’ in that SectionList , the problem is solved. User can now just enters some values in the text inputs, then press once on the submit button to submit data. The button now captures touch events first instead of scrollview.</p><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>The solution for this is fortunately simple as it involves fixing our code without having to alter react-navigation code. But it’s good to look at the library code to know what it does, and to trace where the problem originates. Thanks for following such long exploring and hope you learn something.</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to structure your project and manage static resources in React Native</title>
      <link href="/blog/How-to-structure-your-project-and-manage-static-resources-in-React-Native/"/>
      <url>/blog/How-to-structure-your-project-and-manage-static-resources-in-React-Native/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/256" target="_blank" rel="noopener">#256</a></strong></p><p>Original post <a href="https://medium.freecodecamp.org/how-to-structure-your-project-and-manage-static-resources-in-react-native-6f4cfc947d92" target="_blank" rel="noopener">https://medium.freecodecamp.org/how-to-structure-your-project-and-manage-static-resources-in-react-native-6f4cfc947d92</a></p><hr><p>React and React Native are just frameworks, and they do not dictate how we should structure our projects. It all depends on your personal taste and the project you’re working on.</p><p>In this post, we will go through how to structure a project and how to manage local assets. This of course is not written in stone, and you are free to apply only the pieces that suit you. Hope you learn something.</p><p>For a project bootstrapped with <a href="https://medium.com/fantageek/what-is-create-react-native-app-9f3bc5a6c2a3" target="_blank" rel="noopener">react-native init</a> , we get only the <a href="https://medium.com/fantageek/what-is-create-react-native-app-9f3bc5a6c2a3" target="_blank" rel="noopener">basic structure</a>.</p><p>There is the ios folder for Xcode projects, the android folder for Android projects, and an index.js and an App.js file for the React Native starting point.</p><pre><code>ios/android/index.jsApp.js</code></pre><p>As someone who has worked with native on both Windows Phone, iOS and Android, I find that structuring a project all comes down to separating files by <strong>type</strong> or <strong>feature</strong></p><h2 id="type-vs-feature"><a href="#type-vs-feature" class="headerlink" title="type vs feature"></a>type vs feature</h2><p>Separating by type means that we organise files by their type. If it is a component, there are container and presentational files. If it is Redux, there are action, reducer, and store files. If it is view, there are JavaScript, HTML, and CSS files.</p><h3 id="Group-by-type"><a href="#Group-by-type" class="headerlink" title="Group by type"></a>Group by type</h3><pre><code>redux  actions  store  reducerscomponents  container  presentationalview  javascript  html  css</code></pre><p>This way, we can see the type of each file, and easily run a script toward a certain file type. This is general for all projects, but it does not answer the question “what is this project about?” Is it news application? Is it a loyalty app? Is it about nutrition tracking?</p><p>Organising files by type is for a machine, not for a human. Many times we work on a feature, and finding files to fix in multiple directories is a hassle. It’s also a pain if we plan to make a framework out of our project, as files are spread across many places.</p><h3 id="Group-by-feature"><a href="#Group-by-feature" class="headerlink" title="Group by feature"></a>Group by feature</h3><p>A more reasonable solution is to organise files by feature. Files related to a feature should be placed together. And <a href="https://medium.com/@JeffLombardJr/organizing-tests-in-jest-17fc431ff850" target="_blank" rel="noopener">test files</a> should stay close to the source files. Check out <a href="https://medium.com/@JeffLombardJr/organizing-tests-in-jest-17fc431ff850" target="_blank" rel="noopener">this article</a> to learn more.</p><p>A feature can be related to login, sign up, onboarding, or a user’s profile. A feature can contain sub-features as long as they belong to the same flow. If we wanted to move the sub feature around, it would be easy, as all related files are already grouped together.</p><p>My typical project structure based on features looks like this:</p><pre><code>index.jsApp.jsios/android/src  screens    login      LoginScreen.js      LoginNavigator.js    onboarding      OnboardingNavigator          welcome         WelcomeScreen.js      term        TermScreen.js      notification        NotificationScreen.js    main      MainNavigator.js      news        NewsScreen.js      profile        ProfileScreen.js      search        SearchScreen.js  library    package.json    components      ImageButton.js      RoundImage.js    utils      moveToBottom.js      safeArea.js    networking      API.js      Auth.js  res    package.json    strings.js    colors.js    palette.js    fonts.js    images.js    images      logo@2x.png      logo@3x.png      button@2x.png      button@3x.pngscripts  images.js  clear.js</code></pre><p>Besides the traditional files App.js and index.js and the ios1 and android folders, I put all the source files inside the src folder. Inside src I have res for resources, library for common files used across features, and screens for a screen of content.</p><h3 id="As-few-dependencies-as-possible"><a href="#As-few-dependencies-as-possible" class="headerlink" title="As few dependencies as possible"></a>As few dependencies as possible</h3><p>Since React Native is heavily dependent on tons of dependencies, I try to be pretty aware when adding more. In my project I use just react-navigation for navigation. And I’m not a fan of redux as it adds unneeded complexity. Only add a dependency when you really need it, otherwise you are just setting yourself up for more trouble than value.</p><p>The thing I like about React is the components. A component is where we define view, style and behavior. React has inline style — it’s like using JavaScript to define script, HTML and CSS. This fits the feature approach we are aiming for. That’s why I don’t use <a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">styled-components</a>. Since styles are just JavaScript objects, we can just share comment styles in library .</p><h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><p>I like Android a lot, so I name src and res to match its folder conventions.</p><p>react-native init sets up babel for us. But for a typical JavaScript project, it’s good to organise files in the src folder. In my electron.js application <a href="https://github.com/onmyway133/IconGenerator/tree/master/src" target="_blank" rel="noopener">IconGenerator</a>, I put the source files inside the src folder. This not only helps in terms of organising, but also helps babel transpile the entire folder at once. Just a command and I have the files in src transpiled to dist in a blink.</p><pre><code>babel ./src --out-dir ./dist --copy-files</code></pre><h2 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h2><p>React is based around components. Yup. There are <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="noopener">container and presentational components</a>, but we can compose components to build more complex components. They usually end in showing in the full screen. It is called Page in Windows Phone, ViewController in iOS and Activity in Android. The React Native guide mentions <a href="https://facebook.github.io/react-native/docs/navigation" target="_blank" rel="noopener">screen</a> very often as something that covers the entire space:</p><blockquote><h1 id="Mobile-apps-are-rarely-made-up-of-a-single-screen-Managing-the-presentation-of-and-transition-between-multiple-screens-is-typically-handled-by-what-is-known-as-a-navigator"><a href="#Mobile-apps-are-rarely-made-up-of-a-single-screen-Managing-the-presentation-of-and-transition-between-multiple-screens-is-typically-handled-by-what-is-known-as-a-navigator" class="headerlink" title="Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator."></a>Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator.</h1></blockquote><h3 id="index-js-or-not"><a href="#index-js-or-not" class="headerlink" title="index.js or not?"></a>index.js or not?</h3><p>Each screen is considered the entry point for each feature. You can rename the LoginScreen.js to index.js by leveraging the Node <a href="https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8" target="_blank" rel="noopener">module</a> feature:</p><blockquote><p>Modules don’t have to be files. We can also create a find-me folder under node_modules and place an index.js file in there. The same require(‘find-me’) line will use that folder’s index.js file</p></blockquote><p>So instead of import LoginScreen from ‘./screens/LoginScreen’ , we can just do import LoginScreen from ‘./screens’.</p><p>Using index.js results in encapsulation and provides a public interface for the feature. This is all personal taste. I myself prefer explicit naming for a file, hence the name LoginScreen.js.</p><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p><a href="https://github.com/react-navigation/react-navigation" target="_blank" rel="noopener">react-navigation</a> seems to be the most popular choice for handling navigation in a React Native app. For a feature like onboarding, there are probably many screens managed by a stack navigation, so there is OnboardingNavigator .</p><p>You can think of Navigator as something that groups sub screens or features. Since we group by feature, it’s reasonable to place Navigator inside the feature folder. It basically looks like this:</p><pre><code>import { createStackNavigator } from &apos;react-navigation&apos;import Welcome from &apos;./Welcome&apos;import Term from &apos;./Term&apos;const routeConfig = {  Welcome: {    screen: Welcome  },  Term: {    screen: Term  }}const navigatorConfig = {  navigationOptions: {    header: null  }}export default OnboardingNavigator = createStackNavigator(routeConfig, navigatorConfig)</code></pre><h2 id="library"><a href="#library" class="headerlink" title="library"></a>library</h2><p>This is the most controversial part of structuring a project. If you don’t like the name library, you can name it utilities, common, citadel , whatever…</p><p>This is not meant for homeless files, but it is where we place common utilities and components that are used by many features. Things like atomic components, wrappers, quick fixes function, networking stuff, and login info are used a lot, and it’s hard to move them to a specific feature folder. Sometimes we just need to be practical and get the work done.</p><p>In React Native, we often need to implement a button with an image background in many screens. Here is a simple one that stays inside library/components/ImageButton.js . The components folder is for reusable components, sometimes called <a href="https://medium.com/joeydinardo/a-brief-look-at-atomic-components-39cbe71d38b5" target="_blank" rel="noopener">atomic components</a>. According to React naming conventions, the first letter should be uppercase.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; TouchableOpacity, View, Image, Text, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">import</span> images <span class="keyword">from</span> <span class="string">'res/images'</span></span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">'res/colors'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;TouchableOpacity style=&#123;styles.touchable&#125; onPress=&#123;<span class="keyword">this</span>.props.onPress&#125;&gt;</span><br><span class="line">                &lt;View style=&#123;styles.view&#125;&gt;</span><br><span class="line">                    &lt;Text style=&#123;styles.text&#125;&gt;&#123;<span class="keyword">this</span>.props.title&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>View&gt;</span><br><span class="line">                &lt;Image</span><br><span class="line">                    source=&#123;images.button&#125;</span><br><span class="line">                    style=&#123;styles.image&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/TouchableOpacity&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">    view: &#123;</span></span><br><span class="line"><span class="regexp">        position: 'absolute',</span></span><br><span class="line"><span class="regexp">        backgroundColor: 'transparent'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    image: &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    touchable: &#123;</span></span><br><span class="line"><span class="regexp">        alignItems: 'center',</span></span><br><span class="line"><span class="regexp">        justifyContent: 'center'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    text: &#123;</span></span><br><span class="line"><span class="regexp">        color: colors.button,</span></span><br><span class="line"><span class="regexp">        fontSize: 18,</span></span><br><span class="line"><span class="regexp">        textAlign: 'center'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><p>And if we want to place the button at the bottom, we use a utility function to prevent code duplication. Here is library/utils/moveToBottom.js:</p><pre><code>import React from &apos;react&apos;import { View, StyleSheet } from &apos;react-native&apos;function moveToBottom(component) {  return (    &lt;View style={styles.container}&gt;      {component}    &lt;/View&gt;  )}const styles = StyleSheet.create({  container: {    flex: 1,    justifyContent: &apos;flex-end&apos;,    marginBottom: 36  }})export default moveToBottom</code></pre><h3 id="Use-package-json-to-avoid-relative-path"><a href="#Use-package-json-to-avoid-relative-path" class="headerlink" title="Use package.json to avoid relative path"></a>Use package.json to avoid relative path</h3><p>Then somewhere in the src/screens/onboarding/term/Term.js , we can import by using relative paths:</p><pre><code>import moveToBottom from &apos;../../../../library/utils/move&apos;import ImageButton from &apos;../../../../library/components/ImageButton&apos;</code></pre><p>This is a big red flag in my eyes. It’s error prone, as we need to calculate how many .. we need to perform. And if we move feature around, all of the paths need to be recalculated.</p><p>Since library is meant to be used many places, it’s good to reference it as an absolute path. In JavaScript there are usually 1000 libraries to a single problem. A quick search on Google reveals tons of libraries to tackle this issue. But we don’t need another dependency as this is extremely easy to fix.</p><p>The solution is to turn library into a module so node can find it. Adding package.json to any folder makes it into a Node module . Add package.json inside the library folder with this simple content:</p><pre><code>{  &quot;name&quot;: &quot;library&quot;,  &quot;version&quot;: &quot;0.0.1&quot;}</code></pre><p>Now in Term.js we can easily import things from library because it is now a module:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; View, StyleSheet, Image, Text, Button &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">import</span> strings <span class="keyword">from</span> <span class="string">'res/strings'</span></span><br><span class="line"><span class="keyword">import</span> palette <span class="keyword">from</span> <span class="string">'res/palette'</span></span><br><span class="line"><span class="keyword">import</span> images <span class="keyword">from</span> <span class="string">'res/images'</span></span><br><span class="line"><span class="keyword">import</span> ImageButton <span class="keyword">from</span> <span class="string">'library/components/ImageButton'</span></span><br><span class="line"><span class="keyword">import</span> moveToBottom <span class="keyword">from</span> <span class="string">'library/utils/moveToBottom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Term</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;Text style=&#123;styles.heading&#125;&gt;&#123;strings.onboarding.term.heading.toUpperCase()&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    moveToBottom(</span></span><br><span class="line"><span class="regexp">                        &lt;ImageButton style=&#123;styles.button&#125; title=&#123;strings.onboarding.term.button.toUpperCase()&#125; /</span>&gt;</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">    container: &#123;</span></span><br><span class="line"><span class="regexp">        flex: 1,</span></span><br><span class="line"><span class="regexp">        alignItems: 'center'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    heading: &#123;</span></span><br><span class="line"><span class="regexp">        ...palette.heading, ...&#123;</span></span><br><span class="line"><span class="regexp">            marginTop: 72</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="res"><a href="#res" class="headerlink" title="res"></a>res</h2><p>You may wonder what res/colors, res/strings , res/images and res/fonts are in the above examples. Well, for front end projects, we usually have components and style them using fonts, localised strings, colors, images and styles. JavaScript is a very dynamic language, and it’s easy to use stringly types everywhere. We could have a bunch of #00B75D color across many files, or Fira as a fontFamily in many Text components. This is error-prone and hard to refactor.</p><p>Let’s encapsulate resource usage inside the res folder with safer objects. They look like the examples below:</p><p><strong>res/colors</strong></p><pre><code>const colors = {  title: &apos;#00B75D&apos;,  text: &apos;#0C222B&apos;,  button: &apos;#036675&apos;}export default colors</code></pre><p><strong>res/strings</strong></p><pre><code>const strings = {  onboarding: {    welcome: {      heading: &apos;Welcome&apos;,      text1: &quot;What you don&apos;t know is what you haven&apos;t learn&quot;,      text2: &apos;Visit my GitHub at [https://github.com/onmyway133&apos;](https://github.com/onmyway133&apos;),      button: &apos;Log in&apos;    },    term: {      heading: &apos;Terms and conditions&apos;,      button: &apos;Read&apos;    }  }}export default strings</code></pre><p><strong>res/fonts</strong></p><pre><code>const fonts = {  title: &apos;Arial&apos;,  text: &apos;SanFrancisco&apos;,  code: &apos;Fira&apos;}export default fonts</code></pre><p><strong>res/images</strong></p><pre><code>const images = {  button: require(&apos;./images/button.png&apos;),  logo: require(&apos;./images/logo.png&apos;),  placeholder: require(&apos;./images/placeholder.png&apos;)}export default images</code></pre><p>Like library , res files can be access from anywhere, so let’s make it a module . Add package.json to the res folder:</p><pre><code>{  &quot;name&quot;: &quot;res&quot;,  &quot;version&quot;: &quot;0.0.1&quot;}</code></pre><p>so we can access resource files like normal modules:</p><pre><code>import strings from &apos;res/strings&apos;import palette from &apos;res/palette&apos;import images from &apos;res/images&apos;</code></pre><h3 id="Group-colors-images-fonts-with-palette"><a href="#Group-colors-images-fonts-with-palette" class="headerlink" title="Group colors, images, fonts with palette"></a>Group colors, images, fonts with palette</h3><p>The design of the app should be consistent. Certain elements should have the same look and feel so they don’t confuse the user. For example, the heading Text should use one color, font, and font size. The Image component should use the same placeholder image. In React Native, we already use the name styles with const styles = StyleSheet.create({}) so let’s use the name palette.</p><p>Below is my simple palette. It defines common styles for heading and Text:</p><h3 id="res-palette"><a href="#res-palette" class="headerlink" title="res/palette"></a>res/palette</h3><pre><code>import colors from &apos;./colors&apos;const palette = {  heading: {    color: colors.title,    fontSize: 20,    textAlign: &apos;center&apos;  },  text: {    color: colors.text,    fontSize: 17,    textAlign: &apos;center&apos;  }}export default palette</code></pre><p>And then we can use them in our screen:</p><pre><code>const styles = StyleSheet.create({  container: {    flex: 1,    alignItems: &apos;center&apos;  },  heading: {...palette.heading, ...{    marginTop: 72  }}})</code></pre><p>Here we use the <a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener">object spread operator</a> to merge palette.heading and our custom style object. This means that we use the styles from palette.heading but also specify more properties.</p><p>If we were to reskin the app for multiple brands, we could have multiple palettes. This is a really powerful pattern.</p><h3 id="Generate-images"><a href="#Generate-images" class="headerlink" title="Generate images"></a>Generate images</h3><p>You can see that in /src/res/images.js we have properties for each image in the src/res/images folder:</p><pre><code>const images = {  button: require(&apos;./images/button.png&apos;),  logo: require(&apos;./images/logo.png&apos;),  placeholder: require(&apos;./images/placeholder.png&apos;)}export default images</code></pre><p>This is tedious to do manually, and we have to update if there’s changes in image naming convention. Instead, we can add a script to generate the images.js based on the images we have. Add a file at the root of the project /scripts/images.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imageFileNames = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> array = fs</span><br><span class="line">        .readdirSync(<span class="string">'src/res/images'</span>)</span><br><span class="line">        .filter(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> file.endsWith(<span class="string">'.png'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> file.replace(<span class="string">'[@2x](http://twitter.com/2x).png'</span>, <span class="string">''</span>).replace(<span class="string">'[@3x](http://twitter.com/3x).png'</span>, <span class="string">''</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> properties = imageFileNames()</span><br><span class="line">        .map(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>: require('./images/<span class="subst">$&#123;name&#125;</span>.png')`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .join(<span class="string">',\n  '</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> string = <span class="string">`const images = &#123;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;properties&#125;</span></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    export default images</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">    fs.writeFileSync(<span class="string">'src/res/images.js'</span>, string, <span class="string">'utf8'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">generate()</span><br></pre></td></tr></table></figure><p>The cool thing about Node is that we have access to the fs module, which is really good at file processing. Here we simply traverse through images, and update /src/res/images.js accordingly.</p><p>Whenever we add or change images, we can run:</p><pre><code>node scripts/images.js</code></pre><p>And we can also declare the script inside our main package.json :</p><pre><code>&quot;scripts&quot;: {  &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,  &quot;test&quot;: &quot;jest&quot;,  &quot;lint&quot;: &quot;eslint *.js **/*.js&quot;,  &quot;images&quot;: &quot;node scripts/images.js&quot;}</code></pre><p>Now we can just run npm run images and we get an up-to-date images.js resource file.</p><h3 id="How-about-custom-fonts"><a href="#How-about-custom-fonts" class="headerlink" title="How about custom fonts"></a>How about custom fonts</h3><p>React Native has some <a href="https://medium.com/react-native-training/list-of-available-react-native-fonts-ed78b48bd45e" target="_blank" rel="noopener">custom fonts</a> that may be good enough for your projects. You can also use custom fonts.</p><p>One thing to note is that Android uses the name of the font file, but iOS uses the full name. You can see the full name in Font Book app, or by inspecting in running app</p><pre><code>for (NSString* family in [UIFont familyNames]) {  NSLog(@&quot;%@&quot;, family);for (NSString* name in [UIFont fontNamesForFamilyName: family]) {    NSLog(@&quot;Family name:  %@&quot;, name);  }}</code></pre><p>For custom fonts to be registered in iOS, we need to declare UIAppFonts in Info.plist using the file name of the fonts, and for Android, the fonts need to be placed at app/src/main/assets/fonts .</p><p>It is good practice to name the font file the same as full name. React Native is said to dynamically load custom fonts, but in case you get “Unrecognized font family”, then simply add those fonts to target within Xcode.</p><p>Doing this by hand takes time, luckily we have <a href="https://github.com/rnpm/rnpm" target="_blank" rel="noopener">rnpm</a> that can help. First add all the fonts inside res/fonts folder. Then simply declare rnpm in package.json and run react-native link . This should declare UIAppFonts in iOS and move all the fonts into app/src/main/assets/fonts for Android.</p><pre><code>&quot;rnpm&quot;: {  &quot;assets&quot;: [    &quot;./src/res/fonts/&quot;  ]}</code></pre><p>Accessing fonts by name is error prone, we can create a script similar to what we have done with images to generate a safer accession. Add fonts.js to our scripts folder</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fontFileNames = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> array = fs</span><br><span class="line">        .readdirSync(<span class="string">'src/res/fonts'</span>)</span><br><span class="line">        .map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> file.replace(<span class="string">'.ttf'</span>, <span class="string">''</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> properties = fontFileNames()</span><br><span class="line">        .map(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> key = name.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>: '<span class="subst">$&#123;name&#125;</span>'`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .join(<span class="string">',\n  '</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> string = <span class="string">`const fonts = &#123;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;properties&#125;</span></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    export default fonts</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">    fs.writeFileSync(<span class="string">'src/res/fonts.js'</span>, string, <span class="string">'utf8'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">generate()</span><br></pre></td></tr></table></figure><p>Now you can use custom font via R namespace.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> R <span class="keyword">from</span> <span class="string">'res/R'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    text: &#123;</span><br><span class="line">        fontFamily: R.fonts.FireCodeNormal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="The-R-namespace"><a href="#The-R-namespace" class="headerlink" title="The R namespace"></a>The R namespace</h2><p>This step depends on personal taste, but I find it more organised if we introduce the R namespace, just like how Android does for assets with the generated <a href="https://stackoverflow.com/questions/9408544/what-is-r-class-in-android/9408589" target="_blank" rel="noopener">R class</a>.</p><blockquote><p>Once you externalize your app resources, you can access them using resource IDs that are generated in your project’s Rclass. This document shows you how to group your resources in your Android project and provide alternative resources for specific device configurations, and then access them from your app code or other XML files.</p></blockquote><p>This way, let’s make a file called R.js in src/res:</p><pre><code>import strings from &apos;./strings&apos;import images from &apos;./images&apos;import colors from &apos;./colors&apos;import palette from &apos;./palette&apos;const R = {  strings,  images,  colors,  palette}export default R</code></pre><p>And access it in the screen:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> R <span class="keyword">from</span> <span class="string">'res/R'</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;SafeAreaView style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;Image</span><br><span class="line">        style=&#123;styles.logo&#125;</span><br><span class="line">        source=&#123;R.images.logo&#125; /&gt;</span><br><span class="line">      &lt;Image</span><br><span class="line">        style=&#123;styles.image&#125;</span><br><span class="line">        source=&#123;R.images.placeholder&#125; /&gt;</span><br><span class="line">      &lt;Text style=&#123;styles.title&#125;&gt;&#123;R.strings.onboarding.welcome.title.toUpperCase()&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Replace strings with R.strings, colors with R.colors, and images with R.images. With the R annotation, it is clear that we are accessing static assets from the app bundle.</p><p>This also matches the Airbnb <a href="https://github.com/airbnb/javascript#naming--PascalCase-singleton" target="_blank" rel="noopener">convention</a> for singleton, as our R is now like a global constant.</p><blockquote><p><a href="https://github.com/airbnb/javascript#naming--PascalCase-singleton" target="_blank" rel="noopener">23.8</a> Use PascalCase when you export a constructor / class / singleton / function library / bare object.</p></blockquote><pre><code>const AirbnbStyleGuide = {  es6: {  },}export default AirbnbStyleGuide</code></pre><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>In this post, I’ve shown you how I think you should structure folders and files in a React Native project. We’ve also learned how to manage resources and access them in a safer manner. I hope you’ve found it useful. Here are some more resources to explore further:</p><ul><li><a href="https://medium.com/the-react-native-log/organizing-a-react-native-project-9514dfadaa0" target="_blank" rel="noopener">Organizing a React Native Project</a></li><li><a href="https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76" target="_blank" rel="noopener">Structuring projects and naming components in React</a></li><li><a href="https://alligator.io/react/index-js-public-interfaces/" target="_blank" rel="noopener">Using index.js for Fun and Public Interfaces</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to overlay view on another view in React Native</title>
      <link href="/blog/How-to-overlay-view-on-another-view-in-React-Native/"/>
      <url>/blog/How-to-overlay-view-on-another-view-in-React-Native/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/254" target="_blank" rel="noopener">#254</a></strong></p><p>Original post <a href="https://stackoverflow.com/a/54108708/1418457" target="_blank" rel="noopener">https://stackoverflow.com/a/54108708/1418457</a></p><hr><p>Make our own convenient OverlayContainer. The trick is to use <code>absolute</code> with <code>100%</code> size</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; View, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  behind: React.Component,</span><br><span class="line">  front: React.Component,</span><br><span class="line">  under: React.Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Show something on top of other</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">OverlayContainer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; behind, front, under &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;styles.center&#125;&gt;</span><br><span class="line">          &lt;View style=&#123;styles.behind&#125;&gt;</span><br><span class="line">            &#123;behind&#125;</span><br><span class="line">          &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">          &#123;front&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>View&gt;</span><br><span class="line">        &#123;under&#125;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">  container: &#123;</span></span><br><span class="line"><span class="regexp">    flex: 1,</span></span><br><span class="line"><span class="regexp">    alignItems: 'center',</span></span><br><span class="line"><span class="regexp">    height: 100,</span></span><br><span class="line"><span class="regexp">    justifyContent: 'center',</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  center: &#123;</span></span><br><span class="line"><span class="regexp">    width: '100%',</span></span><br><span class="line"><span class="regexp">    height: '100%',</span></span><br><span class="line"><span class="regexp">    alignItems: 'center',</span></span><br><span class="line"><span class="regexp">    justifyContent: 'center',</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  behind: &#123;</span></span><br><span class="line"><span class="regexp">    alignItems: 'center',</span></span><br><span class="line"><span class="regexp">    justifyContent: 'center',</span></span><br><span class="line"><span class="regexp">    position: 'absolute',</span></span><br><span class="line"><span class="regexp">    left: 0,</span></span><br><span class="line"><span class="regexp">    top: 0,</span></span><br><span class="line"><span class="regexp">    width: '100%',</span></span><br><span class="line"><span class="regexp">    height: '100%'</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to sort strings with number in Javascript</title>
      <link href="/blog/How-to-sort-strings-with-number-in-Javascript/"/>
      <url>/blog/How-to-sort-strings-with-number-in-Javascript/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/251" target="_blank" rel="noopener">#251</a></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> string = </span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">- Favorite WWDC 2017 sessions https://github.com/onmyway133/blog/issues/56</span></span><br><span class="line"><span class="string">- Favorite WWDC 2018 sessions https://github.com/onmyway133/blog/issues/245</span></span><br><span class="line"><span class="string">- How to do clustering with Google Maps in iOS https://github.com/onmyway133/blog/issues/191</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> lines = string</span><br><span class="line">        .split(<span class="string">'\n'</span>)</span><br><span class="line">        .filter(<span class="function">(<span class="params">line</span>) =&gt;</span> &#123; <span class="keyword">return</span> line.length &gt; <span class="number">0</span> &#125;)</span><br><span class="line">        .map(<span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> parts = line.trimEnd().split(<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">let</span> lastPart = parts[parts.length<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">let</span> number = lastPart.replace(<span class="string">'https://github.com/onmyway133/blog/issues/'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                line,</span><br><span class="line">                number: <span class="built_in">parseInt</span>(number)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">    lines.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (a.number &lt; b.number) ? <span class="number">-1</span> : <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> sortedString = lines</span><br><span class="line">        .map(<span class="function">(<span class="params">tuple</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> tuple.line</span><br><span class="line">        &#125;)</span><br><span class="line">        .join(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(sortedString)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then <code>node index.js</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Favorite WWDC 2018 sessions</title>
      <link href="/blog/Favorite-WWDC-2018-sessions/"/>
      <url>/blog/Favorite-WWDC-2018-sessions/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/245" target="_blank" rel="noopener">#245</a></strong></p><p>Original post <a href="https://medium.com/fantageek/my-favourite-wwdc-2018-sessions-363d3fc9c9d5" target="_blank" rel="noopener">https://medium.com/fantageek/my-favourite-wwdc-2018-sessions-363d3fc9c9d5</a></p><hr><h1 id="Favourite-WWDC-2018-sessions"><a href="#Favourite-WWDC-2018-sessions" class="headerlink" title="Favourite WWDC 2018 sessions"></a>Favourite WWDC 2018 sessions</h1><p>This year I failed the lottery ticket to WWDC, and I also missed the keynote live stream because I was <a href="https://twitter.com/onmyway133/status/1003584883116167169" target="_blank" rel="noopener">sailing</a> on the Christian Radich outside Oslo fjord that day. Luckily all the videos are available on <a href="https://developer.apple.com/videos/wwdc2018/" target="_blank" rel="noopener">Apple Developer site</a> very shortly, and we can watch them now on Chrome or the <a href="https://github.com/insidegui/WWDC" target="_blank" rel="noopener">unofficial WWDC</a> app on macOS. I recommend the <a href="https://github.com/insidegui/WWDC" target="_blank" rel="noopener">WWDC</a> macOS app as it allows to mark favourites and filter, also offers the ability to adjust play speed to 1.25 or 1.5 saves me some time watching.</p><p>This year WWDC focuses a lot on privacy, stability, and speed, which are all I wish, so many thanks to Apple engineers who made that happen, and the resit to install the so called <a href="https://twitter.com/bagelturf/status/1004444007424905216?s=21" target="_blank" rel="noopener">more stable iOS 12</a> is real. As an iOS engineers, I like to focus more about the necessary things to me, that is about the Swift programming language, new changes in Cocoa Touch, enhancements in Xcode and testing tricks. I also like to explore more <a href="https://medium.com/flawless-app-stories/detecting-avengers-superheroes-in-your-ios-app-with-ibm-watson-and-coreml-fe38e493a4d1" target="_blank" rel="noopener">about</a> <a href="https://medium.com/flawless-app-stories/machine-learning-in-ios-turi-create-and-coreml-5ddce0dc8e26" target="_blank" rel="noopener">machine</a> <a href="https://medium.com/flawless-app-stories/machine-learning-in-ios-azure-custom-vision-and-coreml-645e93f35eee" target="_blank" rel="noopener">learning</a> so I’m very glad that Apple is investing more into this technology with the introduction of Turi Create and Create ML.</p><p>To me, APIs come and get deprecated very often and it’s good to know them, but the most important thing is to invest in your programming, debugging and testing skill which you can apply in many other platforms.</p><p>Continued from last year <a href="https://medium.com/@onmyway133/my-favourite-wwdc-2017-sessions-a777fa5aabaf" target="_blank" rel="noopener">favourites</a> list, below are my favourite sessions with personal notes. Things are listed in no particular order. Hope you find it useful.</p><h3 id="Platforms-State-of-the-Union"><a href="#Platforms-State-of-the-Union" class="headerlink" title="Platforms State of the Union"></a><a href="https://developer.apple.com/videos/play/wwdc2018/102/" target="_blank" rel="noopener">Platforms State of the Union</a></h3><p>If you don’t have time, you should watch only this session. Platform State of the Union is like keynote for developers as it highlights important changes.</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*5zkWPlmZ9oYfY9-O.jpg" alt></p><ul><li><p>Privacy: Apple confirms on its commitment in privacy and security, also introduces password management feature and auto fill on iOS 12. Generating strong password, integrating with 3rd password management and quickly populating OTP field from SMS message have never been easier. <a href="https://support.apple.com/en-us/HT202491" target="_blank" rel="noopener">GateKeeper</a> gets some improvements as well and begins to require app to be notarised.</p></li><li><p>iOS 12: huge improvement in performance, Siri gets smarter with Shortcut support, group calling in FaceTime and grouped notification. Also for emoji fan, Memoji was introduced.</p></li><li><p>macOS 10.14 Mojave: more with Dark Mode. They demo mostly with Xcode in dark mode, which looks so cool. This year WWDC banner give hints about iOS and macOS cross-platform apps, which is partially true with <a href="https://www.imore.com/marzipan" target="_blank" rel="noopener">Marzipan</a>, a way to allow iOS apps to run on the mac.</p></li><li><p>Xcode 10: with improvements in code editing and source control changes bar indicator. Debugging with memory debug tool, LLDB performance enhancement and particular the new build system completely rewritten in Swift with parallel tasks are exciting news.</p></li><li><p>Swift 4.2: if you follow swift repo then <a href="https://github.com/ole/whats-new-in-swift-4-2" target="_blank" rel="noopener">Swift 4.2</a> may not be very surprising. There are also announcements for Swift 5 plan.</p></li><li><p>Machine Learning: is never hotter than this. This year we see huge investments in machine learning with Create ML, Turi Create, Natural Language frameworks, CoreML 2, new detection capabilities in Vision.</p></li><li><p>ARKit 2, watchOS 5, tvOS 12, AppStore Connect and AppStore Connect APIs are some other important news you don’t want to miss.</p></li></ul><h3 id="What’s-new-in-Swift"><a href="#What’s-new-in-Swift" class="headerlink" title="What’s new in Swift"></a><a href="https://developer.apple.com/videos/play/wwdc2018/401/" target="_blank" rel="noopener">What’s new in Swift</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*JQCScM5dRcK9dX-_.jpg" alt></p><p>Together with this session, I recommend you to read <a href="https://www.hackingwithswift.com/articles/77/whats-new-in-swift-4-2" target="_blank" rel="noopener">What’s new in Swift 4.2</a> summary which is very succinct. Besides improvement in complication and runtime, Swift 4.2 offers some new features: iterable enum case, synthesised Equatable and Hashable, handy functions for shuffling, random generating. To me, the need to explicitly handle Implicitly unwrapped optional is also a reasonable change.</p><h3 id="What’s-New-in-Cocoa-Touch"><a href="#What’s-New-in-Cocoa-Touch" class="headerlink" title="What’s New in Cocoa Touch"></a><a href="https://developer.apple.com/videos/play/wwdc2018/202/" target="_blank" rel="noopener">What’s New in Cocoa Touch</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*n1X4HddAZ-4ZHpaf.jpg" alt></p><p>This is a brief introduction to all changes coming to iOS 12, together with tips on how to be a good iOS citizen. Learn what can affect scrolling experience and prefetching technique, memory consumption and automatic backing stores, how to get the best from UIImage and UIImageView . <a href="https://developer.apple.com/videos/play/wwdc2018/220/" target="_blank" rel="noopener">AutoLayout</a> engine got a lot of performance improvement so it won’t bother you any more. To me the most satisfying is to get all the UIKit notifications and classes reorganised under nested types, which makes code reasoning very easy.</p><h3 id="Getting-the-Most-out-of-Playgrounds-in-Xcode"><a href="#Getting-the-Most-out-of-Playgrounds-in-Xcode" class="headerlink" title="Getting the Most out of Playgrounds in Xcode"></a><a href="https://developer.apple.com/videos/play/wwdc2018/402/" target="_blank" rel="noopener">Getting the Most out of Playgrounds in Xcode</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*cl4xdnHojOq-PNBc.jpg" alt></p><p>I’ve <a href="https://medium.com/flawless-app-stories/playground-driven-development-in-swift-cf167489fe7b" target="_blank" rel="noopener">written about Playground</a> before and I’m very glad that Apple also invests a lot in it. The way people can interact and train model [Create ML](<a href="http://Introducing" target="_blank" rel="noopener">http://Introducing</a> Create ML) in Playground is mesmerising. People may question how Playground works so well in session’s demos, but we can’t resist the new changes coming to Playground like Step by Step execution, markup rendering improvements and also how easy it is to consume custom frameworks. We can also now publish our own <a href="https://developer.apple.com/videos/play/wwdc2018/413/" target="_blank" rel="noopener">Playground through subscription</a>.</p><h3 id="What’s-New-in-Core-ML"><a href="#What’s-New-in-Core-ML" class="headerlink" title="What’s New in Core ML"></a><a href="https://developer.apple.com/videos/play/wwdc2018/708/" target="_blank" rel="noopener">What’s New in Core ML</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*1-xUL2gFr-Ys8WQT.jpg" alt></p><p>Apple starts the machine learning trend last year with the introduction of Core ML. We might be excited and frustrated at the same time as Core ML is powerful but there’s no way we can customise it. Now the <a href="https://developer.apple.com/videos/play/wwdc2018/708/" target="_blank" rel="noopener">2</a> <a href="https://developer.apple.com/videos/play/wwdc2018/709/" target="_blank" rel="noopener">parts</a> tell us how to implement custom layer and model, techniques to reduce model size like quantisation and flexible model. This makes the foundation for improvement in <a href="https://developer.apple.com/videos/play/wwdc2018/717/" target="_blank" rel="noopener">Vision</a> in object tracking and the debut of <a href="https://developer.apple.com/videos/play/wwdc2018/713/" target="_blank" rel="noopener">Natural Language</a> framework. Machine learning has never been easier.</p><h3 id="What’s-New-in-Testing"><a href="#What’s-New-in-Testing" class="headerlink" title="What’s New in Testing"></a><a href="https://developer.apple.com/videos/play/wwdc2018/403/" target="_blank" rel="noopener">What’s New in Testing</a></h3><p>I can’t miss any testing sessions as it is part of every day’s work. How can your program avoids regression bugs and ready for refactoring without any tests?</p><p>This session shows improvement in coverage and the introduction of xccov tool to help us build automation on top of coverage report. Parallel distributed testing in Xcode 10 can save us some time to have coffee. Another wonderful news is that tests have multiple order execution mode to avoid bugs due to implicit dependencies.</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*7Gw1utFOl4C3PKqV.jpg" alt></p><h3 id="Testing-Tips-amp-Tricks-🌟"><a href="#Testing-Tips-amp-Tricks-🌟" class="headerlink" title="Testing Tips &amp; Tricks 🌟"></a><a href="https://developer.apple.com/videos/play/wwdc2018/417/" target="_blank" rel="noopener">Testing Tips &amp; Tricks</a> 🌟</h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*OHjJdWEhHj7Fc4rq.jpg" alt></p><p>This is my most favourite. The session starts with a pyramid of tests with unit integration and end-to-end test analogy explanation, then to some very cool tips and tricks.</p><ul><li>Testing network request: I like the separation of APIRequest and APIRequestLoader with URLSession , dependency injection with default parameter and the customisation of URLProtocol in URLSessionConfiguration</li></ul><p><img src="https://cdn-images-1.medium.com/max/2066/1*xJzqnw37CZKFhhMwym2HHQ.png" alt></p><p><img src="https://cdn-images-1.medium.com/max/2684/1*VUxjS-DpOfee7d5zTA1vrg.png" alt></p><p><img src="https://cdn-images-1.medium.com/max/2326/1*rgRwQla_YK3ADRwxZ4xpkg.png" alt></p><ul><li>Testing notification: Notification is system wide and I try to avoid it as much as possible. This shows how to inject dependency with default parameter and use of own NotificationCenter instead of NotificationCenter.default to ease testing</li></ul><p><img src="https://cdn-images-1.medium.com/max/2602/1*mXiNRzit8VcFM4_GNM3ebg.png" alt></p><ul><li><p>Testing location: build abstraction with LocationProvider and LocationFetcher . How to use custom protocol and protocol for delegate to mock during test</p></li><li><p>Testing timer: how to use and mock RunLoop behaviour with Timer</p></li></ul><p><img src="https://cdn-images-1.medium.com/max/2000/1*obf6GcsXcHAbGFy-lUENNw.png" alt></p><h3 id="Advanced-Debugging-with-Xcode-and-LLDB"><a href="#Advanced-Debugging-with-Xcode-and-LLDB" class="headerlink" title="Advanced Debugging with Xcode and LLDB"></a><a href="https://developer.apple.com/videos/play/wwdc2018/412/" target="_blank" rel="noopener">Advanced Debugging with Xcode and LLDB</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*6c81NEXU7tKYPEbQ.jpg" alt></p><p>LLDB has been improved to enable to debugging reliability experience, issues with AST context corruption, Swift type resolution are now things in the past. We can review how to use some common LLDB commands with handy arguments, and how to use Xcode breakpoint to its best.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*ZtVpOaDnmt4VsDTHRiB6Ww.png" alt></p><h3 id="A-Tour-of-UICollectionView-🌟"><a href="#A-Tour-of-UICollectionView-🌟" class="headerlink" title="A Tour of UICollectionView 🌟"></a><a href="https://developer.apple.com/videos/play/wwdc2018/225/" target="_blank" rel="noopener">A Tour of UICollectionView</a> 🌟</h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*skJgSTHlTohIj_DT.jpg" alt></p><p>I begin to use UICollectionView more than UITableView , and it also has same code as NSCollectionView,which is more comfortable solution than the horrible NSTableView .</p><ul><li>Item size in UICollectionViewLayout : I often rely on UICollectionViewDelegateFlowLayout to specify item size but after watching this session, I feel like moving size related code to Layout object feels more like a good way to go</li></ul><p><img src="https://cdn-images-1.medium.com/max/2718/1*FS6OykJZ_zIPTzaWPPYk6g.png" alt></p><ul><li><p>Mosaic layout: This is not new, but good to watch again. You learn how to implement custom layout using cached layout attributes</p></li><li><p>Data Source update: I didn’t expect Apple mentions this, but it is a good lesson on how UICollectionView handles batch update. I ‘ve written about this before in my <a href="https://medium.com/flawless-app-stories/a-better-way-to-update-uicollectionview-data-in-swift-with-diff-framework-924db158db86" target="_blank" rel="noopener">A better way to update UICollectionView data in Swift with diff framework</a> and that post gets a lot of attractions. In this session we need to remember that *<em>ordering matters in data source update, but not in collection view update *</em>❗️❗️❗️</p></li></ul><p><img src="https://cdn-images-1.medium.com/max/2000/1*VMqhNo3bXxI-79e-r9iNvA.png" alt></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*KiWef6geZ3z0-jRaWNuqRg.png" alt></p><h3 id="Swift-Generics"><a href="#Swift-Generics" class="headerlink" title="Swift Generics"></a><a href="https://developer.apple.com/videos/play/wwdc2018/406/" target="_blank" rel="noopener">Swift Generics</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*KWRTeiOV8FBNK3Mu.jpg" alt></p><p>Generic was a core feature of Swift since the beginning, we all know that it helps us to implement generic code that can work with many types in a type safe manner. This session reminds that I ‘ve never learned enough, especially the reasonable design behind it.</p><p>The sessions showcases Collection protocol and its protocol inheritances: MutableCollection , BidirectionalCollection , RandomAccessCollection and how they can be combined to provide generic functionalities for conformers. The associatedtype requirement in each protocol, especially Index and Element, is very minimal and has enough constraints for the protocol to implement lots of necessary functionalities in its protocol extension, which is eye opening for me. I very like to read open source, so looking at the <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift" target="_blank" rel="noopener">source code</a> for such protocols helps me understand more.</p><p><img src="https://cdn-images-1.medium.com/max/2102/1*QIepiAZqK4QmX2IbLFKz0w.png" alt></p><p>The part about <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank" rel="noopener">Fisher Yates shuffle algorithm</a> details how we can come up with necessary protocol while still make them generic</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*actyrEg4E4qSFYu--K6uzA.png" alt></p><p>Pay attention to when they mention count and map , you can learn more how each concrete type can hook into the customisation point in protocol extension</p><p><img src="https://cdn-images-1.medium.com/max/2704/1*IG15tCSq49SqgvgJrXHDWw.png" alt></p><p>Finally learn the <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" target="_blank" rel="noopener">Liskov substitution principle</a> with protocol in class inheritance. You should also <a href="https://developer.apple.com/videos/play/wwdc2018/229/" target="_blank" rel="noopener">Using Collections Effectively</a> for how to utilise handy functions in Collection.</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*oIKcsw6-H37i2A1t.jpg" alt></p><h3 id="Data-You-Can-Trust"><a href="#Data-You-Can-Trust" class="headerlink" title="Data You Can Trust"></a><a href="https://developer.apple.com/videos/play/wwdc2018/222/" target="_blank" rel="noopener">Data You Can Trust</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*Iv80a99O1g6k-oO4.jpg" alt></p><p>Although Codable has a lot to offers in term of data integrity, this is good to know about to make sure the data you receive is actually the right data in correct format and structure. <a href="https://twitter.com/mgratzer/status/1003882651038683136" target="_blank" rel="noopener">CommonCrypto</a> is also part of new iOS SDK so you don’t need my <a href="https://github.com/onmyway133/Arcane" target="_blank" rel="noopener">Arcane</a> library to handle encryption and hashing in your apps.</p><h3 id="Embracing-Algorithms"><a href="#Embracing-Algorithms" class="headerlink" title="Embracing Algorithms"></a><a href="https://developer.apple.com/videos/play/wwdc2018/223/" target="_blank" rel="noopener">Embracing Algorithms</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*qocdXtZ8cCAJ0mKV.jpg" alt></p><p>This is the most pleasant to watch as it is like a conversation between the speaker and the imaginary manager Crusty. Here I learn how to be aware of algorithm complexity and also how to utilise built in Foundation functions which are already optimised for performance.</p><p>After this session I can’t help myself but going to Swift repo to read the <a href="https://github.com/apple/swift/blob/master/test/Prototypes/Algorithms.swift" target="_blank" rel="noopener">Algorithms.swift</a> file immediately.</p><h3 id="Image-and-Graphics-Best-Practices"><a href="#Image-and-Graphics-Best-Practices" class="headerlink" title="Image and Graphics Best Practices"></a><a href="https://developer.apple.com/videos/play/wwdc2018/219/" target="_blank" rel="noopener">Image and Graphics Best Practices</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*-qDMSLxL89PuOm-m.jpg" alt></p><p>Learn how image encoding and decoding works through data and image buffer and how that affects memory and performance. There are techniques like downsampling that can tackle this problem. This also recommends against using backing store, and instead, use UIImageView</p><p><img src="https://cdn-images-1.medium.com/max/2766/1*mt70wBlbwC9Kz18vXN5THQ.png" alt></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*uV9Ata-pPnb-US3WrI6Y_A.png" alt></p><h3 id="A-Guide-to-Turi-Create"><a href="#A-Guide-to-Turi-Create" class="headerlink" title="A Guide to Turi Create"></a><a href="https://developer.apple.com/videos/play/wwdc2018/712/" target="_blank" rel="noopener">A Guide to Turi Create</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/0*yWr3HKYpIslcV-Zz.jpg" alt></p><p>I’ve <a href="https://medium.com/flawless-app-stories/machine-learning-in-ios-turi-create-and-coreml-5ddce0dc8e26" target="_blank" rel="noopener">written about Turi Create</a> before, but it is just scratching the surface of the many tasks offered by Turi. This year Apple releases <a href="https://github.com/apple/turicreate/releases/tag/5.0b1" target="_blank" rel="noopener">Turi Create 5</a> with style transfer task, Vision Feature Print, GPU acceleration and recommender model improvements. I can’t wait to explore. And if you take a look at MLDataTable in Create ML framework, it looks like this has Turi ‘s SFrame under the hood.</p><p>That’s it. Thanks for reading. What are your favourite sessions this year? Please share in the comment section below</p>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to shake NSView in macOS</title>
      <link href="/blog/How-to-shake-NSView-in-macOS/"/>
      <url>/blog/How-to-shake-NSView-in-macOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/233" target="_blank" rel="noopener">#233</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> midX = box.layer?.position.x ?? <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> midY = box.layer?.position.y ?? <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animation = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"position"</span>)</span><br><span class="line">animation.duration = <span class="number">0.06</span></span><br><span class="line">animation.repeatCount = <span class="number">4</span></span><br><span class="line">animation.autoreverses = <span class="literal">true</span></span><br><span class="line">animation.fromValue = <span class="type">CGPoint</span>(x: midX - <span class="number">10</span>, y: midY)</span><br><span class="line">animation.toValue = <span class="type">CGPoint</span>(x: midX + <span class="number">10</span>, y: midY)</span><br><span class="line">box.layer?.add(animation, forKey: <span class="string">"position"</span>)</span><br></pre></td></tr></table></figure><p>And for iOS</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shake</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">16</span>, y: <span class="number">0</span>)</span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">0.4</span>, delay: <span class="number">0</span>, usingSpringWithDamping: <span class="number">0.2</span>, initialSpringVelocity: <span class="number">1</span>, options: .curveEaseInOut, animations: &#123;</span><br><span class="line">            <span class="keyword">self</span>.transform = <span class="type">CGAffineTransform</span>.identity</span><br><span class="line">        &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make simple search box in iOS</title>
      <link href="/blog/How-to-make-simple-search-box-in-iOS/"/>
      <url>/blog/How-to-make-simple-search-box-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/227" target="_blank" rel="noopener">#227</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchBox</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> textField: <span class="type">UITextField</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> textField = <span class="type">UITextField</span>()</span><br><span class="line">        <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(image: <span class="type">R</span>.image.search()!)</span><br><span class="line">        imageView.frame.size = <span class="type">CGSize</span>(width: <span class="number">20</span> + <span class="number">8</span>, height: <span class="number">20</span>)</span><br><span class="line">        imageView.contentMode = .scaleAspectFit</span><br><span class="line">        textField.leftView = imageView</span><br><span class="line">        textField.leftViewMode = .always</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> textField</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> filterButton: <span class="type">UIButton</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> button = <span class="type">UIButton</span>(type: .custom)</span><br><span class="line">        button.setImage(<span class="type">R</span>.image.<span class="built_in">filter</span>()!, <span class="keyword">for</span>: .normal)</span><br><span class="line">        button.imageEdgeInsets = <span class="type">UIEdgeInsets</span>(top: <span class="number">10</span>, <span class="keyword">left</span>: <span class="number">10</span>, bottom: <span class="number">10</span>, <span class="keyword">right</span>: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> button</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> backView: <span class="type">UIView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">UIView</span>()</span><br><span class="line">        view.backgroundColor = .white</span><br><span class="line">        view.layer.cornerRadius = <span class="number">10</span></span><br><span class="line">        view.layer.borderColor = <span class="type">R</span>.color.lightGray.cgColor</span><br><span class="line">        view.layer.borderWidth = <span class="number">0.5</span></span><br><span class="line">        view.layer.shadowOffset = <span class="type">CGSize</span>(width: <span class="number">1</span>, height: <span class="number">1</span>)</span><br><span class="line">        view.layer.shadowOpacity = <span class="number">0.8</span></span><br><span class="line">        view.layer.shadowColor = <span class="type">R</span>.color.lightGray.cgColor</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line"></span><br><span class="line">        setup()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        addSubviews([backView, textField, filterButton])</span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            filterButton.rightAnchor.constraint(equalTo: rightAnchor, constant: -<span class="number">8</span>),</span><br><span class="line">            filterButton.centerYAnchor.constraint(equalTo: centerYAnchor),</span><br><span class="line">            filterButton.heightAnchor.constraint(equalToConstant: <span class="number">44</span>),</span><br><span class="line">            filterButton.widthAnchor.constraint(equalToConstant: <span class="number">44</span>),</span><br><span class="line"></span><br><span class="line">            textField.centerYAnchor.constraint(equalTo: centerYAnchor),</span><br><span class="line">            textField.leftAnchor.constraint(equalTo: leftAnchor, constant: <span class="number">16</span>),</span><br><span class="line">            textField.rightAnchor.constraint(equalTo: filterButton.leftAnchor, constant: -<span class="number">8</span>)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on([</span><br><span class="line">            backView.pinEdges(view: <span class="keyword">self</span>, inset: <span class="type">UIEdgeInsets</span>(top: <span class="number">4</span>, <span class="keyword">left</span>: <span class="number">4</span>, bottom: -<span class="number">4</span>, <span class="keyword">right</span>: -<span class="number">4</span>))</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To apply padding to <code>leftView</code>, increase <code>width</code> and use <code>contentMode</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">imageView.frame.size = <span class="type">CGSize</span>(width: <span class="number">20</span> + <span class="number">8</span>, height: <span class="number">20</span>)</span><br><span class="line">imageView.contentMode = .scaleAspectFit</span><br></pre></td></tr></table></figure><p>To make image in button smaller, use <code>imageEdgeInsets</code> with all positive values<br>To have round and shadow, specify <code>shadowOpacity</code>, <code>cornerRadius</code>, <code>shadowOffset</code></p><img width="584" alt="searchbox" src="https://user-images.githubusercontent.com/2284279/57307753-6a045000-70e5-11e9-9f2d-db5835f5b21b.png">]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Stripe and Apple Pay in iOS</title>
      <link href="/blog/How-to-use-Stripe-and-Apple-Pay-in-iOS/"/>
      <url>/blog/How-to-use-Stripe-and-Apple-Pay-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/219" target="_blank" rel="noopener">#219</a></strong></p><ul><li><a href="https://stripe.com/docs/mobile/ios" target="_blank" rel="noopener">iOS Integration</a></li><li><a href="https://developer.apple.com/documentation/passkit/apple_pay/setting_up_apple_pay_requirements" target="_blank" rel="noopener">Setting Up Apple Pay Requirements</a></li><li><a href="https://stripe.com/docs/apple-pay" target="_blank" rel="noopener">Apple Pay</a></li></ul><h2 id="Show-basic-add-card-in-iOS"><a href="#Show-basic-add-card-in-iOS" class="headerlink" title="Show basic add card in iOS"></a>Show basic add card in iOS</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Stripe</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showPayment</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> addCardViewController = <span class="type">STPAddCardViewController</span>()</span><br><span class="line">        addCardViewController.delegate = <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">let</span> navigationController = <span class="type">UINavigationController</span>(rootViewController: addCardViewController)</span><br><span class="line"></span><br><span class="line">        present(navigationController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainController</span>: <span class="title">STPAddCardViewControllerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addCardViewControllerDidCancel</span><span class="params">(<span class="number">_</span> addCardViewController: STPAddCardViewController)</span></span> &#123;</span><br><span class="line">        dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addCardViewController</span><span class="params">(<span class="number">_</span> addCardViewController: STPAddCardViewController, didCreateToken token: STPToken, completion: @escaping STPErrorBlock)</span></span> &#123;</span><br><span class="line">        <span class="number">_</span> = token.tokenId</span><br><span class="line">        completion(<span class="literal">nil</span>)</span><br><span class="line">        dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Generate-ephemeral-key"><a href="#Generate-ephemeral-key" class="headerlink" title="Generate ephemeral key"></a>Generate ephemeral key</h2><p><a href="https://stripe.com/docs/mobile/ios/standard#ephemeral-key" target="_blank" rel="noopener">https://stripe.com/docs/mobile/ios/standard#ephemeral-key</a></p><blockquote><p>In order for our prebuilt UI elements to function, you’ll need to provide them with an ephemeral key, a short-lived API key with restricted API access. You can think of an ephemeral key as a session, authorizing the SDK to retrieve and update a specific Customer object for the duration of the session.</p></blockquote><h3 id="Backend-in-Go"><a href="#Backend-in-Go" class="headerlink" title="Backend in Go"></a>Backend in Go</h3><p><a href="https://github.com/stripe/stripe-go" target="_blank" rel="noopener">https://github.com/stripe/stripe-go</a></p><p>Need a secret key by going to <code>Stripe dashboard -&gt; Developers -&gt; API keys -&gt; Secret key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stripe.Key = &quot;sk_key&quot;</span><br></pre></td></tr></table></figure><p>Need customer id. We can manually create one in <code>Stripe dashboard -&gt; Customers</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"github.com/stripe/stripe-go"</span></span><br><span class="line">    <span class="string">"github.com/stripe/stripe-go/ephemeralkey"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">stripe.Key = <span class="string">"sk_test_mM2MkqO61n7vvbVRfeYmBgWm00Si2PtWab"</span></span><br><span class="line"></span><br><span class="line">http.HandleFunc(<span class="string">"/ephemeral_keys"</span>, generateEphemeralKey)</span><br><span class="line">  <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EphemeralKeysRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    ApiVersion <span class="keyword">string</span> <span class="string">`json:"api_version"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateEphemeralKey</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">customerId := <span class="string">"cus_Eys6aeP5xR89ab"</span></span><br><span class="line"></span><br><span class="line">decoder := json.NewDecoder(r.Body)</span><br><span class="line">    <span class="keyword">var</span> t EphemeralKeysRequest</span><br><span class="line">    err := decoder.Decode(&amp;t)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stripeVersion := t.ApiVersion</span><br><span class="line">    <span class="keyword">if</span> stripeVersion == <span class="string">""</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">"Stripe-Version not found\n"</span>)</span><br><span class="line">        w.WriteHeader(<span class="number">400</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    params := &amp;stripe.EphemeralKeyParams&#123;</span><br><span class="line">        Customer: stripe.String(customerId),</span><br><span class="line">        StripeVersion: stripe.String(stripeVersion),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    key, err := ephemeralkey.New(params)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">"Stripe bindings call failed, %v\n"</span>, err)</span><br><span class="line">        w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    w.Write(key.RawJSON)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iOS-client"><a href="#iOS-client" class="headerlink" title="iOS client"></a>iOS client</h3><p>Networking client uses <a href="https://github.com/onmyway133/blog/issues/222" target="_blank" rel="noopener">How to make simple networking client in Swift</a></p><p>Need an object that conforms to <code>STPCustomerEphemeralKeyProvider</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EphemeralKeyClient</span>: <span class="title">NSObject</span>, <span class="title">STPCustomerEphemeralKeyProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> client = <span class="type">NetworkClient</span>(baseUrl: <span class="type">URL</span>(string: <span class="string">"http://localhost:8080"</span>)!)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createCustomerKey</span><span class="params">(withAPIVersion apiVersion: String, completion: @escaping STPJSONResponseCompletionBlock)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> options = <span class="type">Options</span>()</span><br><span class="line">        options.httpMethod = .post</span><br><span class="line">        options.path = <span class="string">"ephemeral_keys"</span></span><br><span class="line">        options.parameters = [</span><br><span class="line">            <span class="string">"api_version"</span>: apiVersion</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        client.makeJson(options: options, completion: &#123; result <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> result &#123;</span><br><span class="line">            <span class="keyword">case</span> .success(<span class="keyword">let</span> json):</span><br><span class="line">                completion(json, <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                completion(<span class="literal">nil</span>, error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Setting up <code>STPCustomerContext</code> and <code>STPPaymentContext</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> client = <span class="type">EphemeralKeyClient</span>()</span><br><span class="line">    <span class="keyword">let</span> customerContext: <span class="type">STPCustomerContext</span></span><br><span class="line">    <span class="keyword">let</span> paymentContext: <span class="type">STPPaymentContext</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.customerContext = <span class="type">STPCustomerContext</span>(keyProvider: client)</span><br><span class="line">        <span class="keyword">self</span>.paymentContext = <span class="type">STPPaymentContext</span>(customerContext: customerContext)</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">        paymentContext.delegate = <span class="keyword">self</span></span><br><span class="line">        paymentContext.hostViewController = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">        paymentContext.presentShippingViewController()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Handle-charge"><a href="#Handle-charge" class="headerlink" title="Handle charge"></a>Handle charge</h2><p><a href="https://stripe.com/docs/charges" target="_blank" rel="noopener">https://stripe.com/docs/charges</a></p><h3 id="Backend-in-Go-1"><a href="#Backend-in-Go-1" class="headerlink" title="Backend in Go"></a>Backend in Go</h3><p>If we use <code>stripe_id</code> from card, which has the form of <code>card_xxx</code>, we need to include <code>customer</code> info</p><p>If we use <code>token</code>, which has the form <code>tok_xxx</code>, then no need for <code>customer</code> info</p><p>From <code>STPPaymentResult</code></p><blockquote><p>When you’re using <code>STPPaymentContext</code> to request your user’s payment details, this is the object that will be returned to your application when they’ve successfully made a payment. It currently just contains a <code>source</code>, but in the future will include any relevant metadata as well. You should pass <code>source.stripeID</code> to your server, and call the charge creation endpoint. This assumes you are charging a Customer, so you should specify the <code>customer</code> parameter to be that customer’s ID and the <code>source</code> parameter to the value returned here. For more information, see <a href="https://stripe.com/docs/api#create_charge" target="_blank" rel="noopener">https://stripe.com/docs/api#create_charge</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"github.com/stripe/stripe-go/charge"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">stripe.Key = <span class="string">"sk_test_mM2MkqO61n7vvbVRfeYmBgWm00Si2PtWab"</span></span><br><span class="line"></span><br><span class="line">http.HandleFunc(<span class="string">"/request_charge"</span>, handleCharge)</span><br><span class="line">  <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customerId = <span class="string">"cus_Eys6aeP5xR89ab"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PaymentResult <span class="keyword">struct</span> &#123;</span><br><span class="line">    StripeId <span class="keyword">string</span> <span class="string">`json:"stripe_id"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleCharge</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">decoder := json.NewDecoder(r.Body)</span><br><span class="line">    <span class="keyword">var</span> t PaymentResult</span><br><span class="line">    err := decoder.Decode(&amp;t)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params := &amp;stripe.ChargeParams&#123;</span><br><span class="line">        Amount:      stripe.Int64(<span class="number">150</span>),</span><br><span class="line">        Currency:    stripe.String(<span class="keyword">string</span>(stripe.CurrencyUSD)),</span><br><span class="line">Description: stripe.String(<span class="string">"Charge from my Go backend"</span>),</span><br><span class="line">Customer: stripe.String(customerId),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">params.SetSource(t.StripeId)</span><br><span class="line">    ch, err := charge.New(params)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Could not process payment: %v"</span>, err)</span><br><span class="line">fmt.Println(ch)</span><br><span class="line">w.WriteHeader(<span class="number">400</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(<span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iOS-client-1"><a href="#iOS-client-1" class="headerlink" title="iOS client"></a>iOS client</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> client = <span class="type">NetworkClient</span>(baseUrl: <span class="type">URL</span>(string: <span class="string">"http://192.168.210.219:8080"</span>)!)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestCharge</span><span class="params">(source: STPSourceProtocol, completion: @escaping <span class="params">(Result&lt;<span class="params">()</span></span></span></span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> options = <span class="type">Options</span>()</span><br><span class="line">        options.httpMethod = .post</span><br><span class="line">        options.path = <span class="string">"request_charge"</span></span><br><span class="line">        options.parameters = [</span><br><span class="line">            <span class="string">"stripe_id"</span>: source.stripeID</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        client.makeJson(options: options, completion: &#123; result <span class="keyword">in</span></span><br><span class="line">            completion(result.<span class="built_in">map</span>(&#123; <span class="number">_</span> <span class="keyword">in</span> () &#125;))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">paymentContext.requestPayment()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainController</span>: <span class="title">STPPaymentContextDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">paymentContext</span><span class="params">(<span class="number">_</span> paymentContext: STPPaymentContext, didCreatePaymentResult paymentResult: STPPaymentResult, completion: @escaping STPErrorBlock)</span></span> &#123;</span><br><span class="line">        client.requestCharge(source: paymentResult.source, completion: &#123; result <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> result &#123;</span><br><span class="line">            <span class="keyword">case</span> .success:</span><br><span class="line">                completion(<span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                completion(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Token-from-card"><a href="#Token-from-card" class="headerlink" title="Token from card"></a>Token from card</h2><p>Use <code>STPAPIClient.shared().createToken</code> to get token from card <a href="https://stripe.com/docs/mobile/ios/custom#collecting-card-details" target="_blank" rel="noopener">https://stripe.com/docs/mobile/ios/custom#collecting-card-details</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cardParams = <span class="type">STPCardParams</span>()</span><br><span class="line">cardParams.number = <span class="string">"4242424242424242"</span></span><br><span class="line">cardParams.expMonth = <span class="number">10</span></span><br><span class="line">cardParams.expYear = <span class="number">2021</span></span><br><span class="line">cardParams.cvc = <span class="string">"123"</span></span><br><span class="line"></span><br><span class="line"><span class="type">STPAPIClient</span>.shared().createToken(withCard: cardParams) &#123; (token: <span class="type">STPToken?</span>, error: <span class="type">Error?</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> token = token, error == <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Present error to user...</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    submitTokenToBackend(token, completion: &#123; (error: <span class="type">Error?</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">            <span class="comment">// Present error to user...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Continue with payment...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Payment-options-and-shipping-view-controllers"><a href="#Payment-options-and-shipping-view-controllers" class="headerlink" title="Payment options and shipping view controllers"></a>Payment options and shipping view controllers</h2><p>Instead of using <code>paymentContext</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paymentContext.pushShippingViewController()</span><br><span class="line">paymentContext.pushPaymentOptionsViewController()</span><br></pre></td></tr></table></figure><p>We can use view controllers <a href="https://stripe.com/docs/mobile/ios/custom#stppaymentoptionsviewcontroller" target="_blank" rel="noopener">https://stripe.com/docs/mobile/ios/custom#stppaymentoptionsviewcontroller</a> directly with <code>STPPaymentOptionsViewController</code> and <code>STPShippingAddressViewController</code>. Then implement <code>STPPaymentOptionsViewControllerDelegate</code> and <code>STPShippingAddressViewControllerDelegate</code></p><h2 id="Register-merchant-Id-and-Apple-Pay-certificate"><a href="#Register-merchant-Id-and-Apple-Pay-certificate" class="headerlink" title="Register merchant Id and Apple Pay certificate"></a>Register merchant Id and Apple Pay certificate</h2><p><a href="https://stripe.com/docs/apple-pay/apps" target="_blank" rel="noopener">https://stripe.com/docs/apple-pay/apps</a></p><p>Get Certificate signing request file from Stripe <a href="https://dashboard.stripe.com/account/apple_pay" target="_blank" rel="noopener">https://dashboard.stripe.com/account/apple_pay</a></p><p>We can’t register merchant id with Enterprise account</p><h2 id="Use-Apple-Pay"><a href="#Use-Apple-Pay" class="headerlink" title="Use Apple Pay"></a>Use Apple Pay</h2><h3 id="Go-backend"><a href="#Go-backend" class="headerlink" title="Go backend"></a>Go backend</h3><p>Use token</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ApplePayRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    Token <span class="keyword">string</span> <span class="string">`json:"token"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleChargeUsingApplePay</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">decoder := json.NewDecoder(r.Body)</span><br><span class="line">    <span class="keyword">var</span> t ApplePayRequest</span><br><span class="line">    err := decoder.Decode(&amp;t)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params := &amp;stripe.ChargeParams&#123;</span><br><span class="line">        Amount:      stripe.Int64(<span class="number">150</span>),</span><br><span class="line">        Currency:    stripe.String(<span class="keyword">string</span>(stripe.CurrencyUSD)),</span><br><span class="line">Description: stripe.String(<span class="string">"Charge from my Go backend for Apple Pay"</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">params.SetSource(t.Token)</span><br><span class="line">    ch, err := charge.New(params)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Could not process payment: %v"</span>, err)</span><br><span class="line">fmt.Println(ch)</span><br><span class="line">w.WriteHeader(<span class="number">400</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(<span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iOS-client-2"><a href="#iOS-client-2" class="headerlink" title="iOS client"></a>iOS client</h3><p>Update client to send <code>STPToken</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentClient</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> client = <span class="type">NetworkClient</span>(baseUrl: <span class="type">URL</span>(string: <span class="string">"localhost:8080"</span>)!)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestCharge</span><span class="params">(token: STPToken, completion: @escaping <span class="params">(Result&lt;<span class="params">()</span></span></span></span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> options = <span class="type">Options</span>()</span><br><span class="line">        options.httpMethod = .post</span><br><span class="line">        options.path = <span class="string">"request_charge_apple_pay"</span></span><br><span class="line">        options.parameters = [</span><br><span class="line">            <span class="string">"token"</span>: token.tokenId</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        client.make(options: options, completion: &#123; result <span class="keyword">in</span></span><br><span class="line">            completion(result.<span class="built_in">map</span>(&#123; <span class="number">_</span> <span class="keyword">in</span> () &#125;))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">useApplePay</span><span class="params">(payment: PKPayment, completion: @escaping <span class="params">(Result&lt;<span class="params">()</span></span></span></span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="type">STPAPIClient</span>.shared().createToken(with: payment, completion: &#123; (token: <span class="type">STPToken?</span>, error: <span class="type">Error?</span>) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> token = token, error == <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.requestCharge(token: token, completion: completion)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use <code>PKPaymentAuthorizationViewController</code>, not <code>PKPaymentAuthorizationController</code></p><p><a href="https://developer.apple.com/documentation/passkit/pkpaymentauthorizationcontroller" target="_blank" rel="noopener">https://developer.apple.com/documentation/passkit/pkpaymentauthorizationcontroller</a></p><blockquote><p>The PKPaymentAuthorizationController class performs the same role as the PKPaymentAuthorizationViewController class, but it does not depend on the UIKit framework. This means that the authorization controller can be used in places where a view controller cannot (for example, in watchOS apps or in SiriKit extensions).</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showApplePay</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> merchantId = <span class="string">"merchant.com.onmyway133.MyApp"</span></span><br><span class="line">        <span class="keyword">let</span> paymentRequest = <span class="type">Stripe</span>.paymentRequest(withMerchantIdentifier: merchantId, country: <span class="string">"US"</span>, currency: <span class="string">"USD"</span>)</span><br><span class="line">        paymentRequest.paymentSummaryItems = [</span><br><span class="line">            <span class="type">PKPaymentSummaryItem</span>(label: <span class="string">"Rubber duck"</span>, amount: <span class="number">1.5</span>)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="type">Stripe</span>.canSubmitPaymentRequest(paymentRequest) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">assertionFailure</span>()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> authorizationViewController = <span class="type">PKPaymentAuthorizationViewController</span>(paymentRequest: paymentRequest) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">assertionFailure</span>()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        authorizationViewController.delegate = <span class="keyword">self</span></span><br><span class="line">        innerNavigationController.present(authorizationViewController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainController</span>: <span class="title">PKPaymentAuthorizationViewControllerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">paymentAuthorizationViewControllerDidFinish</span><span class="params">(<span class="number">_</span> controller: PKPaymentAuthorizationViewController)</span></span> &#123;</span><br><span class="line">        controller.dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">paymentAuthorizationViewController</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> controller: PKPaymentAuthorizationViewController,</span></span></span><br><span class="line"><span class="function"><span class="params">        didAuthorizePayment payment: PKPayment,</span></span></span><br><span class="line"><span class="function"><span class="params">        handler completion: @escaping <span class="params">(PKPaymentAuthorizationResult)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"></span><br><span class="line">        client.useApplePay(payment: payment, completion: &#123; result <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> result &#123;</span><br><span class="line">            <span class="keyword">case</span> .success:</span><br><span class="line">                completion(.<span class="keyword">init</span>(status: .success, errors: <span class="literal">nil</span>))</span><br><span class="line">            <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                completion(.<span class="keyword">init</span>(status: .failure, errors: [error]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Showing-Apple-Pay-option"><a href="#Showing-Apple-Pay-option" class="headerlink" title="Showing Apple Pay option"></a>Showing Apple Pay option</h2><p>From <code>appleMerchantIdentifier</code></p><blockquote><p>The Apple Merchant Identifier to use during Apple Pay transactions. To create one of these, see our guide at <a href="https://stripe.com/docs/mobile/apple-pay" target="_blank" rel="noopener">https://stripe.com/docs/mobile/apple-pay</a> . You must set this to a valid identifier in order to automatically enable Apple Pay.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="type">Stripe</span>.deviceSupportsApplePay() &#123;</span><br><span class="line">    <span class="type">STPPaymentConfiguration</span>.shared().appleMerchantIdentifier = <span class="string">"merchant.com.onmyway133.MyApp"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">paymentContext.pushPaymentOptionsViewController()</span><br></pre></td></tr></table></figure><h2 id="requestPayment-not-showing-UI"><a href="#requestPayment-not-showing-UI" class="headerlink" title="requestPayment not showing UI"></a>requestPayment not showing UI</h2><p>From <code>requestPayment</code></p><blockquote><p>Requests payment from the user. This may need to present some supplemental UI to the user, in which case it will be presented on the payment context’s <code>hostViewController</code>. For instance, if they’ve selected Apple Pay as their payment method, calling this method will show the payment sheet. If the user has a card on file, this will use that without presenting any additional UI. After this is called, the <code>paymentContext:didCreatePaymentResult:completion:</code> and <code>paymentContext:didFinishWithStatus:error:</code> methods will be called on the context’s <code>delegate</code>.</p></blockquote><p>Use <code>STPPaymentOptionsViewController</code> to show cards and Apple Pay options</p><p>Code for <code>requestPayment</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)requestPayment &#123;</span><br><span class="line">    WEAK(<span class="keyword">self</span>);</span><br><span class="line">    [[[<span class="keyword">self</span>.didAppearPromise voidFlatMap:^STPPromise * _Nonnull&#123;</span><br><span class="line">        STRONG(<span class="keyword">self</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.loadingPromise;</span><br><span class="line">    &#125;] onSuccess:^(__unused STPPaymentOptionTuple *tuple) &#123;</span><br><span class="line">        STRONG(<span class="keyword">self</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.state != STPPaymentContextStateNone) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>.selectedPaymentOption) &#123;</span><br><span class="line">            [<span class="keyword">self</span> presentPaymentOptionsViewControllerWithNewState:STPPaymentContextStateRequestingPayment];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="keyword">self</span> requestPaymentShouldPresentShippingViewController]) &#123;</span><br><span class="line">            [<span class="keyword">self</span> presentShippingViewControllerWithNewState:STPPaymentContextStateRequestingPayment];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="keyword">self</span>.selectedPaymentOption isKindOfClass:[STPCard <span class="keyword">class</span>]] ||</span><br><span class="line">                 [<span class="keyword">self</span>.selectedPaymentOption isKindOfClass:[STPSource <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="keyword">self</span>.state = STPPaymentContextStateRequestingPayment;</span><br><span class="line">            STPPaymentResult *result = [[STPPaymentResult alloc] initWithSource:(<span class="keyword">id</span>&lt;STPSourceProtocol&gt;)<span class="keyword">self</span>.selectedPaymentOption];</span><br><span class="line">            [<span class="keyword">self</span>.delegate paymentContext:<span class="keyword">self</span> didCreatePaymentResult:result completion:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">                stpDispatchToMainThreadIfNecessary(^&#123;</span><br><span class="line">                    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                        [<span class="keyword">self</span> didFinishWithStatus:STPPaymentStatusError error:error];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        [<span class="keyword">self</span> didFinishWithStatus:STPPaymentStatusSuccess error:<span class="literal">nil</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="keyword">self</span>.selectedPaymentOption isKindOfClass:[STPApplePayPaymentOption <span class="keyword">class</span>]]) &#123;</span><br><span class="line">      <span class="comment">// ....</span></span><br></pre></td></tr></table></figure><h2 id="Payment-options"><a href="#Payment-options" class="headerlink" title="Payment options"></a>Payment options</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">paymentOptionsViewController</span><span class="params">(<span class="number">_</span> paymentOptionsViewController: STPPaymentOptionsViewController, didSelect paymentOption: STPPaymentOption)</span></span> &#123;</span><br><span class="line"><span class="comment">// No op</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After user selects payment option, the change is saved in dashboard <code>https://dashboard.stripe.com/test/customers</code>, but for card only. Select Apple Pay does not reflect change in web dashboard.</p><p>Apple pay option is added manually locally, from <code>STPCustomer+SourceTuple.m</code> 😲</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (STPPaymentOptionTuple *)filteredSourceTupleForUIWithConfiguration:(STPPaymentConfiguration *)configuration &#123;</span><br><span class="line">    <span class="keyword">id</span>&lt;STPPaymentOption&gt; _Nullable selectedMethod = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSMutableArray</span>&lt;<span class="keyword">id</span>&lt;STPPaymentOption&gt;&gt; *methods = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span>&lt;STPSourceProtocol&gt; customerSource <span class="keyword">in</span> <span class="keyword">self</span>.sources) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([customerSource isKindOfClass:[STPCard <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            STPCard *card = (STPCard *)customerSource;</span><br><span class="line">            [methods addObject:card];</span><br><span class="line">            <span class="keyword">if</span> ([card.stripeID isEqualToString:<span class="keyword">self</span>.defaultSource.stripeID]) &#123;</span><br><span class="line">                selectedMethod = card;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ([customerSource isKindOfClass:[STPSource <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            STPSource *source = (STPSource *)customerSource;</span><br><span class="line">            <span class="keyword">if</span> (source.type == STPSourceTypeCard</span><br><span class="line">                &amp;&amp; source.cardDetails != <span class="literal">nil</span>) &#123;</span><br><span class="line">                [methods addObject:source];</span><br><span class="line">                <span class="keyword">if</span> ([source.stripeID isEqualToString:<span class="keyword">self</span>.defaultSource.stripeID]) &#123;</span><br><span class="line">                    selectedMethod = source;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [STPPaymentOptionTuple tupleWithPaymentOptions:methods</span><br><span class="line">                                    selectedPaymentOption:selectedMethod</span><br><span class="line">                                        addApplePayOption:configuration.applePayEnabled];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>STPApplePayPaymentOption<code>is not available in</code>paymentContext.paymentOptions` immediately</p><h2 id="Change-selected-payment-option"><a href="#Change-selected-payment-option" class="headerlink" title="Change selected payment option"></a>Change selected payment option</h2><p>In <code>STPPaymentContext</code></p><p><code>setSelectedPaymentOption</code> is read only and trigger <code>paymentContextDidChange</code>, but it checks if <code>the new selected payment option</code> is equal to existing selected payment option</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setSelectedPaymentOption:(<span class="keyword">id</span>&lt;STPPaymentOption&gt;)selectedPaymentOption &#123;</span><br><span class="line">    <span class="keyword">if</span> (selectedPaymentOption &amp;&amp; ![<span class="keyword">self</span>.paymentOptions containsObject:selectedPaymentOption]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.paymentOptions = [<span class="keyword">self</span>.paymentOptions arrayByAddingObject:selectedPaymentOption];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (![_selectedPaymentOption isEqual:selectedPaymentOption]) &#123;</span><br><span class="line">        _selectedPaymentOption = selectedPaymentOption;</span><br><span class="line">        stpDispatchToMainThreadIfNecessary(^&#123;</span><br><span class="line">            [<span class="keyword">self</span>.delegate paymentContextDidChange:<span class="keyword">self</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is <code>retryLoading</code> which is called at <code>init</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)retryLoading &#123;</span><br><span class="line">    <span class="comment">// Clear any cached customer object before refetching</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.apiAdapter isKindOfClass:[STPCustomerContext <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        STPCustomerContext *customerContext = (STPCustomerContext *)<span class="keyword">self</span>.apiAdapter;</span><br><span class="line">        [customerContext clearCachedCustomer];</span><br><span class="line">    &#125;</span><br><span class="line">    WEAK(<span class="keyword">self</span>);</span><br><span class="line">    <span class="keyword">self</span>.loadingPromise = [[[STPPromise&lt;STPPaymentOptionTuple *&gt; new] onSuccess:^(STPPaymentOptionTuple *tuple) &#123;</span><br><span class="line">        STRONG(<span class="keyword">self</span>);</span><br><span class="line">        <span class="keyword">self</span>.paymentOptions = tuple.paymentOptions;</span><br><span class="line">        <span class="keyword">self</span>.selectedPaymentOption = tuple.selectedPaymentOption;</span><br><span class="line">    &#125;] onFailure:^(<span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">        STRONG(<span class="keyword">self</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.hostViewController) &#123;</span><br><span class="line">            [<span class="keyword">self</span>.didAppearPromise onSuccess:^(__unused <span class="keyword">id</span> value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.paymentOptionsViewController) &#123;</span><br><span class="line">                    [<span class="keyword">self</span> appropriatelyDismissPaymentOptionsViewController:<span class="keyword">self</span>.paymentOptionsViewController completion:^&#123;</span><br><span class="line">                        [<span class="keyword">self</span>.delegate paymentContext:<span class="keyword">self</span> didFailToLoadWithError:error];</span><br><span class="line">                    &#125;];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [<span class="keyword">self</span>.delegate paymentContext:<span class="keyword">self</span> didFailToLoadWithError:error];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span>.apiAdapter retrieveCustomer:^(STPCustomer * _Nullable customer, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        stpDispatchToMainThreadIfNecessary(^&#123;</span><br><span class="line">            STRONG(<span class="keyword">self</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                [<span class="keyword">self</span>.loadingPromise fail:error];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">self</span>.shippingAddress &amp;&amp; customer.shippingAddress) &#123;</span><br><span class="line">                <span class="keyword">self</span>.shippingAddress = customer.shippingAddress;</span><br><span class="line">                <span class="keyword">self</span>.shippingAddressNeedsVerification = <span class="literal">YES</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            STPPaymentOptionTuple *paymentTuple = [customer filteredSourceTupleForUIWithConfiguration:<span class="keyword">self</span>.configuration];</span><br><span class="line"></span><br><span class="line">            [<span class="keyword">self</span>.loadingPromise succeed:paymentTuple];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Which in turns call <code>STPCustomerEphemeralKeyProvider</code>. As stripe does not save Apple Pay option in dashboard, this method return list of card payment options, together with the default card as selected payment option 😲</p><p>Although the new <code>STPCard</code> has a different address, it is the exact same card with the same info, and the <code>isEqual</code> method of <code>STPCard</code> is</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)isEqualToCard:(<span class="keyword">nullable</span> STPCard *)other &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> == other) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!other || ![other isKindOfClass:<span class="keyword">self</span>.class]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.stripeID isEqualToString:other.stripeID];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I raised an issue <a href="https://github.com/stripe/stripe-ios/issues/1175" target="_blank" rel="noopener">How to change selected payment option?</a> hope it gets resolved soon 😢</p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Sonarqube in Swift projects</title>
      <link href="/blog/How-to-use-Sonarqube-in-Swift-projects/"/>
      <url>/blog/How-to-use-Sonarqube-in-Swift-projects/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/216" target="_blank" rel="noopener">#216</a></strong></p><h2 id="Install-Sonarqube"><a href="#Install-Sonarqube" class="headerlink" title="Install Sonarqube"></a>Install Sonarqube</h2><p><a href="https://docs.sonarqube.org/latest/setup/get-started-2-minutes/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/setup/get-started-2-minutes/</a></p><ul><li>Download Sonarqube for macOS <a href="https://www.sonarqube.org/downloads/" target="_blank" rel="noopener">https://www.sonarqube.org/downloads/</a></li><li>Put it in <code>~/sonarqube</code></li><li>Run localhost server <code>~/sonarqube/bin/macosx-universal-64/sonar.sh console</code></li><li>Login <code>http://localhost:9000</code> with <code>admin/admin</code></li><li>Create new project</li></ul><h2 id="Install-Sonar-scanner"><a href="#Install-Sonar-scanner" class="headerlink" title="Install Sonar scanner"></a>Install Sonar scanner</h2><p><a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="noopener">https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner</a></p><ul><li>Download for macOS 64 bit</li><li>Put it in <code>~/sonarscanner</code></li><li>export <code>PATH=$PATH:/Users/khoa/sonarscanner/bin</code></li><li>Go to project, create <code>sonar-project.properties</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># must be unique in a given SonarQube instance</span><br><span class="line">sonar.projectKey=my-app</span><br><span class="line"># this is the name and version displayed in the SonarQube UI. Was mandatory prior to SonarQube 6.1.</span><br><span class="line">sonar.projectName=My App</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line"> </span><br><span class="line"># Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on Windows.</span><br><span class="line"># This property is optional if sonar.modules is set. </span><br><span class="line">sonar.sources=.</span><br><span class="line"> </span><br><span class="line"># Encoding of the source code. Default is default system encoding</span><br><span class="line">#sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure><ul><li>Run <code>sonar-scanner</code></li></ul><h2 id="Install-swift-plugin"><a href="#Install-swift-plugin" class="headerlink" title="Install swift plugin"></a>Install swift plugin</h2><p><a href="https://github.com/Backelite/sonar-swift" target="_blank" rel="noopener">https://github.com/Backelite/sonar-swift</a></p><ul><li>Download jar file <a href="https://github.com/Backelite/sonar-swift/releases" target="_blank" rel="noopener">https://github.com/Backelite/sonar-swift/releases</a></li><li>Follow <a href="https://docs.sonarqube.org/latest/setup/install-plugin/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/setup/install-plugin/</a></li><li>Put jar file into <code>~/sonarqube/extensions/plugins</code></li><li>Restart server</li><li>Copy run-sonar-swift.sh <a href="https://github.com/Backelite/sonar-swift/blob/develop/sonar-swift-plugin/src/main/shell/run-sonar-swift.sh" target="_blank" rel="noopener">https://github.com/Backelite/sonar-swift/blob/develop/sonar-swift-plugin/src/main/shell/run-sonar-swift.sh</a> to project folder</li><li>Go to Quality Profile <a href="http://localhost:9000/profiles?language=swift" target="_blank" rel="noopener">http://localhost:9000/profiles?language=swift</a></li></ul><img width="979" alt="a" src="https://user-images.githubusercontent.com/2284279/56885533-ed320000-6a6c-11e9-8550-7b24487a0a45.png"><h2 id="Skip-some-tools"><a href="#Skip-some-tools" class="headerlink" title="Skip some tools"></a>Skip some tools</h2><p>Modify <code>run-sonar-swift.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vflag=&quot;&quot;</span><br><span class="line">nflag=&quot;&quot;</span><br><span class="line">unittests=&quot;on&quot;</span><br><span class="line">swiftlint=&quot;on&quot;</span><br><span class="line">tailor=&quot;off&quot;</span><br><span class="line">lizard=&quot;on&quot;</span><br><span class="line">oclint=&quot;off&quot;</span><br><span class="line">fauxpas=&quot;off&quot;</span><br><span class="line">sonarscanner=&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="Git-ignore"><a href="#Git-ignore" class="headerlink" title="Git ignore"></a>Git ignore</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.scannerwork/</span><br><span class="line">sonar-reports/</span><br><span class="line">compile_commands.json</span><br></pre></td></tr></table></figure><h2 id="run-sonar-swift-sh"><a href="#run-sonar-swift-sh" class="headerlink" title="run-sonar-swift.sh"></a>run-sonar-swift.sh</h2><ul><li>Update sonar-project.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sonar.swift.appScheme=MyApp Staging</span><br><span class="line">sonar.swift.project=MyApp.xcodeproj</span><br><span class="line">sonar.swift.workspace=MyApp.xcworkspace</span><br><span class="line">sonar.swift.simulator=platform=iOS Simulator,name=iPhone Xʀ</span><br></pre></td></tr></table></figure><ul><li>Run <code>chmod +x run-sonar-swift.sh</code></li><li>Run <code>./run-sonar-swift.sh</code></li></ul><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><h3 id="failed-with-error-code-64-https-github-com-Backelite-sonar-swift-issues-222"><a href="#failed-with-error-code-64-https-github-com-Backelite-sonar-swift-issues-222" class="headerlink" title="failed with error code: 64 https://github.com/Backelite/sonar-swift/issues/222"></a>failed with error code: 64 <a href="https://github.com/Backelite/sonar-swift/issues/222" target="_blank" rel="noopener">https://github.com/Backelite/sonar-swift/issues/222</a></h3><p>When run <code>./run-sonar-swift.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild: error: &apos;&apos;MyApp.xcodeproj&apos;&apos; does not exist.</span><br><span class="line">2019-04-29 12:10:17.486 defaults[4134:569992]</span><br><span class="line">Domain CFBundleShortVersionString does not exist</span><br><span class="line">.Extracting Xcode project informationxcodebuild: error: option &apos;Destination&apos; requires at least one parameter of the form &apos;key=value&apos;</span><br></pre></td></tr></table></figure><p>👉 Remove quotes in <code>sonar-project.properties</code><br>👉 Modify run-sonar-swift.sh, add these before <code>Check for mandatory parameters</code> section</p><p>Surround by double quotes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">projectFile=&quot;\&quot;$projectFile\&quot;&quot;</span><br><span class="line">workspaceFile=&quot;\&quot;$workspaceFile\&quot;&quot;</span><br><span class="line">appScheme=&quot;\&quot;$appScheme\&quot;&quot;</span><br><span class="line">destinationSimulator=&quot;\&quot;$destinationSimulator\&quot;&quot;</span><br></pre></td></tr></table></figure><p>😢 Does not work<br>👉 Need to create a scheme name without space</p><h3 id="Error-code-65"><a href="#Error-code-65" class="headerlink" title="Error code 65"></a>Error code 65</h3><p>👉Specify team in Xcode project</p><h3 id="destination"><a href="#destination" class="headerlink" title="destination"></a>destination</h3><p>Need double quotes</p><p><code>destinationSimulator=&quot;\&quot;$destinationSimulator\&quot;&quot;</code></p><p>Use equal sign <code>=</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-destination=&quot;$destinationSimulator&quot;</span><br></pre></td></tr></table></figure><p>instead of space ‘ ‘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-destination &quot;$destinationSimulator&quot;</span><br></pre></td></tr></table></figure><h3 id="Metric-‘files’-should-not-be-computed-by-a-Sensor"><a href="#Metric-‘files’-should-not-be-computed-by-a-Sensor" class="headerlink" title="Metric ‘files’ should not be computed by a Sensor"></a>Metric ‘files’ should not be computed by a Sensor</h3><p>When run <code>sonar-scanner</code> <a href="https://github.com/Backelite/sonar-swift/issues/212" target="_blank" rel="noopener">https://github.com/Backelite/sonar-swift/issues/212</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">11:01:14.406 INFO: Sensor JaCoCo XML Report Importer [jacoco]</span><br><span class="line">11:01:14.409 DEBUG: No reports found</span><br><span class="line">11:01:14.409 INFO: Sensor JaCoCo XML Report Importer [jacoco] (done) | time=3ms</span><br><span class="line">11:01:14.409 INFO: Sensor SwiftLint [backelitesonarswiftplugin]</span><br><span class="line">11:01:14.417 INFO: Sensor SwiftLint [backelitesonarswiftplugin] (done) | time=8ms</span><br><span class="line">11:01:14.417 INFO: Sensor Tailor [backelitesonarswiftplugin]</span><br><span class="line">11:01:14.418 INFO: Sensor Tailor [backelitesonarswiftplugin] (done) | time=1ms</span><br><span class="line">11:01:14.418 INFO: Sensor OCLint [backelitesonarswiftplugin]</span><br><span class="line">11:01:14.419 INFO: Sensor OCLint [backelitesonarswiftplugin] (done) | time=1ms</span><br><span class="line">11:01:14.419 INFO: Sensor FauxPas [backelitesonarswiftplugin]</span><br><span class="line">11:01:14.419 INFO: Sensor FauxPas [backelitesonarswiftplugin] (done) | time=0ms</span><br><span class="line">11:01:14.419 INFO: Sensor Swift Squid [backelitesonarswiftplugin]</span><br><span class="line">11:01:14.526 INFO: ------------------------------------------------------------------------</span><br><span class="line">11:01:14.526 INFO: EXECUTION FAILURE</span><br><span class="line">11:01:14.526 INFO: ------------------------------------------------------------------------</span><br><span class="line">11:01:14.527 INFO: Total time: 6.180s</span><br><span class="line">11:01:14.603 INFO: Final Memory: 25M/566M</span><br><span class="line">11:01:14.603 INFO: ------------------------------------------------------------------------</span><br><span class="line">11:01:14.603 ERROR: Error during SonarQube Scanner execution</span><br><span class="line">java.lang.UnsupportedOperationException: Metric &apos;files&apos; should not be computed by a Sensor</span><br><span class="line">at org.sonar.scanner.sensor.DefaultSensorStorage.saveMeasure(DefaultSensorStorage.java:168)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">👉Install maven https://maven.apache.org/download.cgi</span><br><span class="line">Edit `ObjectiveCSquidSensor.java` and `SwiftSquidSensor`, remove line with `CoreMetrics.FILES`</span><br><span class="line">Run `export PATH=$PATH:/Users/khoa/apache-maven/bin`</span><br><span class="line">Run `./build-and-deploy.sh`</span><br><span class="line">Or `~/apache-maven/bin/mvn clean install`</span><br><span class="line"></span><br><span class="line">🎉 Built jar is in `sonar-swift-plugin/target/backelite-sonar-swift-plugin-0.4.4.jar`, copy back to `extensions/plugins`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### How to enable SwiftLint as default profile 🤔</span><br><span class="line"></span><br><span class="line">👉 Need to close current Sonar tab and restart server</span><br><span class="line"></span><br><span class="line">### Testing failed: unable to attach DB</span><br><span class="line"></span><br><span class="line">Modify `run-sonar-swift.sh` to add `-UseModernBuildSystem=NO` to `buildCmd+=(-destination`</span><br><span class="line"></span><br><span class="line">### slather No coverage directory found</span><br><span class="line"></span><br><span class="line">Try running</span><br></pre></td></tr></table></figure><p>slather coverage –input-format profdata –cobertura-xml –output-directory sonar-reports –workspace MyApp.xcworkspace –scheme MyAppStaging MyApp.xcodeproj</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">👉 Enable coverage option in scheme -&gt; Test</span><br><span class="line"></span><br><span class="line">![](https://github.com/SlatherOrg/slather/raw/master/README_Images/test_scheme.png)</span><br><span class="line"></span><br><span class="line">Optional: declare `.slather.yml` file https://github.com/SlatherOrg/slather</span><br><span class="line"></span><br><span class="line">### Unable to execute SonarQube</span><br></pre></td></tr></table></figure><p>14:53:23.251 ERROR: Error during SonarQube Scanner execution<br>org.sonarsource.scanner.api.internal.ScannerException: Unable to execute SonarQube<br>    at org.sonarsource.scanner.api.internal.IsolatedLauncherFactory.lambda$createLauncher$0(IsolatedLauncherFactory.java:85)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">👉Start sonar server</span><br><span class="line"></span><br><span class="line">### LizardReportParser$SwiftFunction cannot be cast</span><br></pre></td></tr></table></figure><p>Error during SonarQube Scanner execution<br>java.lang.ClassCastException: com.backelite.sonarqube.swift.complexity.LizardReportParser$SwiftFunction cannot be cast to org.sonar.api.batch.fs.internal.DefaultInputComponent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">👉 Run [lizard](https://github.com/terryyin/lizard) manually</span><br></pre></td></tr></table></figure><p>lizard –xml sonar-reports/lizard-report.xml<br>```</p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to overload functions in Swift</title>
      <link href="/blog/How-to-overload-functions-in-Swift/"/>
      <url>/blog/How-to-overload-functions-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/211" target="_blank" rel="noopener">#211</a></strong></p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>Functions in Swift are distinguishable by</p><ul><li>parameter label</li><li>parameter type</li><li>return type</li></ul><p>so that these are all valid, and works for <code>subscript</code> as well</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return type</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mix of parameter type and return type</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(param: String)</span></span> -&gt; <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(param: String)</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(param: Int)</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(param: Int)</span></span> -&gt; <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">subscript</span>(param: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line">  <span class="keyword">subscript</span>(param: <span class="type">String</span>) -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  <span class="keyword">subscript</span>(param: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  <span class="keyword">subscript</span>(param: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// parameter label</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(int: Int)</span></span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(string: String)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// concrete type from generic</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(param: Array&lt;String&gt;)</span></span> -&gt; <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(param: Array&lt;Int&gt;)</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">subscript</span>(param: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;) -&gt; <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line">  <span class="keyword">subscript</span>(param: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;) -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When you specialize a generic type, like <code>Array&lt;Int&gt;</code>, you’re actually using a concrete type</p><p>Unfortunately, this does not work for NSObject subclass</p><blockquote><p>Method ‘get()’ with Objective-C selector ‘get’ conflicts with previous declaration with the same Objective-C selector</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Generic-function"><a href="#Generic-function" class="headerlink" title="Generic function"></a>Generic function</h2><p>We can overload generic functions as well</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span>&lt;T&gt;<span class="params">(t: T)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(string: String)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"String"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(int: Int)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Int"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to notarize macOS app</title>
      <link href="/blog/How-to-notarize-macOS-app/"/>
      <url>/blog/How-to-notarize-macOS-app/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/203" target="_blank" rel="noopener">#203</a></strong></p><h2 id="New-Notarization-Requirements"><a href="#New-Notarization-Requirements" class="headerlink" title="New Notarization Requirements"></a>New Notarization Requirements</h2><p><a href="https://developer.apple.com/news/?id=04102019a" target="_blank" rel="noopener">https://developer.apple.com/news/?id=04102019a</a></p><blockquote><p>With the public release of macOS 10.14.5, we require that all developers creating a Developer ID certificate for the first time notarize their apps, and that all new and updated kernel extensions be notarized as well</p></blockquote><h2 id="Signing-Your-Apps-for-Gatekeeper"><a href="#Signing-Your-Apps-for-Gatekeeper" class="headerlink" title="Signing Your Apps for Gatekeeper"></a>Signing Your Apps for Gatekeeper</h2><p><a href="https://developer.apple.com/developer-id/" target="_blank" rel="noopener">https://developer.apple.com/developer-id/</a></p><blockquote><p>Unpublished Software. It’s easy to get unpublished software notarized with the Export process or xcodebuild. Custom build workflows are supported by the xcrun altool command line tool for uploading, and you can use xcrun stapler to attach the ticket to the package.</p></blockquote><blockquote><p>Published Software. To submit software you’ve already published, upload it using the xcrun altool command line tool. Several file types are supported, including .zip, .pkg, and .dmg, so you can upload the same package you already distribute to users.</p></blockquote><h2 id="Notarizing-Your-App-Before-Distribution"><a href="#Notarizing-Your-App-Before-Distribution" class="headerlink" title="Notarizing Your App Before Distribution"></a>Notarizing Your App Before Distribution</h2><p><a href="https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution" target="_blank" rel="noopener">https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution</a></p><p><img src="https://docs-assets.developer.apple.com/published/a857ce6120/e02fdecf-0018-46d8-a750-c0719d21e326.png" alt></p><blockquote><p>When you click Next, Xcode uploads your archive to the notary service. When the upload is complete, the notary service begins the scanning process, which usually takes less than an hour. While the notary service scans your software, you can continue to prepare your archive for distribution. For example, you can export the archive and perform any final testing that you require prior to making your software available to customers.</p></blockquote><blockquote><p>When the notarization process finishes, Xcode downloads the ticket and staples it to your archive. At that point, export your archive again to receive a distributable version of your software that includes the notary ticket.</p></blockquote><h2 id="Upload-a-macOS-app-to-be-notarized"><a href="#Upload-a-macOS-app-to-be-notarized" class="headerlink" title="Upload a macOS app to be notarized"></a>Upload a macOS app to be notarized</h2><p><a href="https://help.apple.com/xcode/mac/current/#/dev88332a81e" target="_blank" rel="noopener">https://help.apple.com/xcode/mac/current/#/dev88332a81e</a></p><p><img src="https://help.apple.com/xcode/mac/current/en.lproj/Art/ao_exportdeveloperid.png" alt></p><blockquote><p>First, upload your macOS app to Apple to be notarized. If the upload fails, view the upload logs to find the problem. For example, you must enable hardened runtime (macOS) before you upload the app. Otherwise, check the notarization status and when the status is “Ready for distribution”, export the app for distribution.</p></blockquote><h2 id="Distribute-outside-the-Mac-App-Store-macOS"><a href="#Distribute-outside-the-Mac-App-Store-macOS" class="headerlink" title="Distribute outside the Mac App Store (macOS)"></a>Distribute outside the Mac App Store (macOS)</h2><p><a href="https://help.apple.com/xcode/mac/current/#/dev033e997ca" target="_blank" rel="noopener">https://help.apple.com/xcode/mac/current/#/dev033e997ca</a></p><blockquote><p>In some cases, you may want to distribute an app outside of the Mac App Store. Because the app won’t be distributed by Apple, assure users that you are a trusted developer by signing your app with a Developer ID certificate. Users gain additional assurance if your Developer ID-signed app is also notarized by Apple.</p></blockquote><blockquote><p>On macOS, if your app isn’t downloaded from the Mac App Store or signed with a Developer ID certificate, it won’t launch unless the user completely disables Gatekeeper. Users have the option of enabling or disabling identified developers in System Preferences.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to check file under Library in macOS</title>
      <link href="/blog/How-to-check-file-under-Library-in-macOS/"/>
      <url>/blog/How-to-check-file-under-Library-in-macOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/200" target="_blank" rel="noopener">#200</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> home = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.applicationScriptsDirectory, .userDomainMask, <span class="literal">true</span>).first!</span><br><span class="line"><span class="keyword">let</span> path = home.appending(<span class="string">".XcodeWayExtensions/XcodeWayScript.scpt"</span>)</span><br><span class="line"><span class="keyword">let</span> exists = <span class="type">FileManager</span>.<span class="keyword">default</span>.fileExists(atPath: path)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to parse json in Go</title>
      <link href="/blog/How-to-parse-json-in-Go/"/>
      <url>/blog/How-to-parse-json-in-Go/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/199" target="_blank" rel="noopener">#199</a></strong></p><h2 id="Unmarshal-using-encoding-json"><a href="#Unmarshal-using-encoding-json" class="headerlink" title="Unmarshal using encoding/json"></a>Unmarshal using encoding/json</h2><ul><li>property in struct needs to be first letter capitalized</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyJsonObject <span class="keyword">struct</span> &#123;</span><br><span class="line">Id <span class="keyword">string</span> <span class="string">`json:"id"`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyJsonArray <span class="keyword">struct</span> &#123;</span><br><span class="line">Data []MyJsonObject <span class="string">`json:"data"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FetchJson</span><span class="params">()</span></span> &#123;</span><br><span class="line">url := <span class="string">"https://myapp.com/json"</span></span><br><span class="line">client := http.Client&#123;</span><br><span class="line">Timeout: time.Second * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request, requestError := http.NewRequest(http.MethodGet, url, <span class="literal">nil</span>)</span><br><span class="line">request.Header.Set(<span class="string">"User-Agent"</span>, <span class="string">"myapp"</span>)</span><br><span class="line">response, responseError := client.Do(request)</span><br><span class="line">body, readError := ioutil.ReadAll(response.Body)</span><br><span class="line"> </span><br><span class="line">fmt.Println(requestError, responseError, readError)</span><br><span class="line"></span><br><span class="line">myJsonArray := MyJsonArray&#123;&#125;</span><br><span class="line">marshalError := json.Unmarshal(body, &amp;myJsonArray)</span><br><span class="line">fmt.Println(jsonResponse, marshalError)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>And how to map to another struct<br><a href="https://gobyexample.com/collection-functions" target="_blank" rel="noopener">https://gobyexample.com/collection-functions</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Map</span><span class="params">(vs []JsonStop, f <span class="keyword">func</span>(JsonStop)</span> *<span class="title">api</span>.<span class="title">Stop</span>) []*<span class="title">api</span>.<span class="title">Stop</span></span> &#123;</span><br><span class="line">    vsm := <span class="built_in">make</span>([]*api.Stop, <span class="built_in">len</span>(vs))</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> vs &#123;</span><br><span class="line">        vsm[i] = f(v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vsm</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stops := Map(jsonResponse.Data, <span class="function"><span class="keyword">func</span><span class="params">(jsonStop JsonStop)</span> *<span class="title">api</span>.<span class="title">Stop</span></span> &#123;</span><br><span class="line">stop := api.Stop&#123;</span><br><span class="line">Id: jsonStop.Id, </span><br><span class="line">Name: jsonStop.Name,</span><br><span class="line">Address: jsonStop.Address,</span><br><span class="line">Lat: jsonStop.Lat,</span><br><span class="line">Long: jsonStop.Long&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;stop</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="json-to-protobuf"><a href="#json-to-protobuf" class="headerlink" title="json to protobuf"></a>json to protobuf</h2><ul><li>Use <a href="https://godoc.org/github.com/golang/protobuf/jsonpb" target="_blank" rel="noopener">https://godoc.org/github.com/golang/protobuf/jsonpb</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to resolve deep json object in Dart</title>
      <link href="/blog/How-to-resolve-deep-json-object-in-Dart/"/>
      <url>/blog/How-to-resolve-deep-json-object-in-Dart/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/198" target="_blank" rel="noopener">#198</a></strong></p><p>If we are not on the edge with GRPC and Protocol Buffer, then most likely we are going to deal with Restful and JSON. In one of my <a href="https://speakerdeck.com/onmyway133/getting-started-with-flutter" target="_blank" rel="noopener">Flutter</a> apps I needed to consume JSON</p><h2 id="JSON-and-serialization"><a href="#JSON-and-serialization" class="headerlink" title="JSON and serialization"></a>JSON and serialization</h2><p>The guide at <a href="https://flutter.dev/docs/development/data-and-backend/json" target="_blank" rel="noopener">https://flutter.dev/docs/development/data-and-backend/json</a> is definitely the way to go.</p><p>Currently there are 2 ways. One is to manually use <code>dart:convert</code> package </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="keyword">dynamic</span>&gt; user = jsonDecode(jsonString);</span><br></pre></td></tr></table></figure><p>The other way is to use <a href="https://pub.dartlang.org/packages/json_serializable" target="_blank" rel="noopener">json_serializable</a> to generate parsing code</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:json_annotation/json_annotation.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// This allows the `User` class to access private members in</span></span><br><span class="line"><span class="comment">/// the generated file. The value for this is *.g.dart, where</span></span><br><span class="line"><span class="comment">/// the star denotes the source file name.</span></span><br><span class="line"><span class="keyword">part</span> <span class="string">'user.g.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// An annotation for the code generator to know that this class needs the</span></span><br><span class="line"><span class="comment">/// JSON serialization logic to be generated.</span></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  User(<span class="keyword">this</span>.name, <span class="keyword">this</span>.email);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> email;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A necessary factory constructor for creating a new User instance</span></span><br><span class="line">  <span class="comment">/// from a map. Pass the map to the generated `_$UserFromJson()` constructor.</span></span><br><span class="line">  <span class="comment">/// The constructor is named after the source class, in this case User.</span></span><br><span class="line">  <span class="keyword">factory</span> User.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="keyword">dynamic</span>&gt; json) =&gt; _$UserFromJson(json);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// `toJson` is the convention for a class to declare support for serialization</span></span><br><span class="line">  <span class="comment">/// to JSON. The implementation simply calls the private, generated</span></span><br><span class="line">  <span class="comment">/// helper method `_$UserToJson`.</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="keyword">dynamic</span>&gt; toJson() =&gt; _$UserToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="json-resolve"><a href="#json-resolve" class="headerlink" title="json_resolve"></a>json_resolve</h2><p>The problem with manual approach is that it involves lot of boilerplate code, especially when accessing property inside deeply nested json. The problem with code generation approach is that it does not always fit our need and may lack of customization.</p><p>Therefore I created <a href="https://github.com/onmyway133/json_resolve" target="_blank" rel="noopener">json_resolve</a> which allows us to access json using keypath, with type checking and safety in mind. The code is small, simple to reason and tested.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> byProperty = resolve(json: json, path: <span class="string">"movie"</span>, defaultValue: <span class="string">"error"</span>);</span><br><span class="line">expect(byProperty, <span class="string">"isFun"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> byInt = resolve(json: json, path: <span class="string">"earth"</span>, defaultValue: <span class="number">0</span>);</span><br><span class="line">expect(byInt, <span class="number">199999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> byIndex = resolve(json: json, path: <span class="string">"dc.2.name"</span>, defaultValue: <span class="string">"error"</span>);</span><br><span class="line">expect(byIndex, <span class="string">"Wonder Woman"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> byIndexThenProperty = resolve(json: json, path: <span class="string">"marvel.0.appear.1.title"</span>, defaultValue: <span class="string">"error"</span>);</span><br><span class="line">expect(byIndexThenProperty, <span class="string">"The Dark World"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dart </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to generate grpc protobuf files</title>
      <link href="/blog/How-to-generate-grpc-protobuf-files/"/>
      <url>/blog/How-to-generate-grpc-protobuf-files/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/197" target="_blank" rel="noopener">#197</a></strong></p><h2 id="protoc"><a href="#protoc" class="headerlink" title="protoc"></a>protoc</h2><p><a href="https://grpc.io/docs/quickstart/go.html" target="_blank" rel="noopener">https://grpc.io/docs/quickstart/go.html</a></p><blockquote><p>Install the protoc compiler that is used to generate gRPC service code. The simplest way to do this is to download pre-compiled binaries for your platform(protoc-<version>-<platform>.zip) from here: <a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">https://github.com/google/protobuf/releases</a></platform></version></p></blockquote><blockquote><p>Unzip this file.<br>Update the environment variable PATH to include the path to the protoc binary file.</p></blockquote><h2 id="Go-protoc-plugin"><a href="#Go-protoc-plugin" class="headerlink" title="Go protoc plugin"></a>Go protoc plugin</h2><p><a href="https://github.com/golang/protobuf" target="_blank" rel="noopener">https://github.com/golang/protobuf</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="Swift-protoc-plugin"><a href="#Swift-protoc-plugin" class="headerlink" title="Swift protoc plugin"></a>Swift protoc plugin</h2><p><a href="https://github.com/grpc/grpc-swift" target="_blank" rel="noopener">https://github.com/grpc/grpc-swift</a></p><blockquote><p>The recommended way to use Swift gRPC is to first define an API using the<br><a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">Protocol Buffer</a><br>language and then use the<br><a href="https://github.com/google/protobuf" target="_blank" rel="noopener">Protocol Buffer Compiler</a><br>and the <a href="https://github.com/apple/swift-protobuf" target="_blank" rel="noopener">Swift Protobuf</a><br>and <a href="https://github.com/grpc/grpc-swift" target="_blank" rel="noopener">Swift gRPC</a> plugins to<br>generate the necessary support code.</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/grpc/grpc-swift.git</span><br><span class="line"><span class="built_in">cd</span> grpc-swift</span><br><span class="line">make</span><br><span class="line">sudo cp protoc-gen-swift protoc-gen-swiftgrpc /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><h2 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --swift_out=MyApp/Api --swiftgrpc_out=Client=<span class="literal">true</span>,Server=<span class="literal">false</span>:MyApp/Api --go_out=plugins=grpc:server/api api.proto</span><br></pre></td></tr></table></figure><p>In case we need to cd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd MyApp/Library/Models/Proto</span><br><span class="line"></span><br><span class="line">protoc --swift_out=../Generated --swiftgrpc_out=Client=true,Server=false:../Generated api.proto</span><br></pre></td></tr></table></figure><h3 id="Empty"><a href="#Empty" class="headerlink" title="Empty"></a>Empty</h3><p>If remote import is needed, then the workaround is to download the that proto locally, for example empty.proto <a href="https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/empty.proto" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/empty.proto</a></p><p>Inside SwiftProtobuf pod, there is generated <code>empty.pb.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Google_Protobuf_Empty</span> </span>&#123;</span><br><span class="line">  <span class="comment">// SwiftProtobuf.Message conformance is added in an extension below. See the</span></span><br><span class="line">  <span class="comment">// `Message` and `Message+*Additions` files in the SwiftProtobuf library for</span></span><br><span class="line">  <span class="comment">// methods supported on all messages.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> unknownFields = <span class="type">SwiftProtobuf</span>.<span class="type">UnknownStorage</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To consume, we can </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftProtobuf</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> empty = <span class="type">Google_Protobuf_Empty</span>()</span><br></pre></td></tr></table></figure><h3 id="oneof-mode"><a href="#oneof-mode" class="headerlink" title="oneof mode"></a>oneof mode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">message Person &#123;</span><br><span class="line">  oneof mode &#123;</span><br><span class="line">    Human human = 1;</span><br><span class="line">    Superman superman = 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Cannot convert value of type ‘Server_Person.OneOf_Mode’ to expected argument type ‘Server_Human’</p></blockquote><p>Need to assign the mode</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="type">Person</span>()</span><br><span class="line">person.mode = <span class="type">Person</span>.<span class="type">OneOf_Mode</span>.<span class="type">Human</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to cache CocoaPods</title>
      <link href="/blog/How-to-cache-CocoaPods/"/>
      <url>/blog/How-to-cache-CocoaPods/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/196" target="_blank" rel="noopener">#196</a></strong></p><h2 id="CocoaPods-vs-Carthage"><a href="#CocoaPods-vs-Carthage" class="headerlink" title="CocoaPods vs Carthage"></a>CocoaPods vs Carthage</h2><ul><li><a href="https://shashikantjagtap.net/carthage-cocoapods-question/" target="_blank" rel="noopener">Carthage or CocoaPods: That is the question</a></li></ul><blockquote><p>CocoaPods will build and compile our frameworks every time whenever you are doing the clean build or run pod install or pod update for the project.</p></blockquote><h2 id="Cache-Carthage"><a href="#Cache-Carthage" class="headerlink" title="Cache Carthage"></a>Cache Carthage</h2><ul><li><a href="https://medium.com/@rajatvig/speeding-up-carthage-for-ios-applications-50e8d0a197e1" target="_blank" rel="noopener">Speeding up Carthage for iOS Applications</a></li><li><a href="https://medium.com/getpulse/improving-the-xcode-project-build-times-with-carthage-296deec9ebb4" target="_blank" rel="noopener">Faster builds in Xcode with Carthage</a></li></ul><h2 id="Cache-CocoaPods"><a href="#Cache-CocoaPods" class="headerlink" title="Cache CocoaPods"></a>Cache CocoaPods</h2><ul><li><a href="https://blog.takescoop.com/improve-ios-ci-build-time-with-cocoapods-caching-4a049ee45e63" target="_blank" rel="noopener">Improve iOS CI build times with CocoaPods caching</a> 👍 </li><li><a href="https://stackoverflow.com/questions/41891333/any-way-to-clean-only-current-xcode-project-but-not-cocoapods-dependencies" target="_blank" rel="noopener">Any way to clean only current Xcode project but not Cocoapods dependencies?</a></li><li><a href="https://guides.cocoapods.org/plugins/pre-compiling-dependencies.html" target="_blank" rel="noopener">Pre-compiling dependencies</a></li><li><a href="https://github.com/leavez/cocoapods-binary" target="_blank" rel="noopener">cocoapods-binary</a> 🚀 </li></ul><blockquote><p>It will compile the source code of pods during the pod install process, and make CocoaPods use them. Which pod should be compiled is controlled by the flag in Podfile.</p></blockquote><h2 id="Xcode-10-new-build-system"><a href="#Xcode-10-new-build-system" class="headerlink" title="Xcode 10 new build system"></a>Xcode 10 new build system</h2><ul><li><a href="https://www.ralfebert.de/ios/blog/cocoapods-clean-input-output-files/" target="_blank" rel="noopener">CocoaPods and the new Xcode build system</a></li><li><a href="https://forums.developer.apple.com/thread/108729" target="_blank" rel="noopener">Xcode 10 - Clean (missing) vs Clean Build Folder</a></li></ul><h2 id="Understanding-framework"><a href="#Understanding-framework" class="headerlink" title="Understanding framework"></a>Understanding framework</h2><ul><li><a href="https://www.bignerdranch.com/blog/it-looks-like-you-are-trying-to-use-a-framework/" target="_blank" rel="noopener">It Looks Like You Are Trying to Use a Framework</a> 🚀 </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to build a networking in Swift</title>
      <link href="/blog/How-to-build-a-networking-in-Swift/"/>
      <url>/blog/How-to-build-a-networking-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/195" target="_blank" rel="noopener">#195</a></strong></p><h2 id="Miami"><a href="#Miami" class="headerlink" title="Miami"></a>Miami</h2><ul><li><a href="https://github.com/onmyway133/Miami" target="_blank" rel="noopener">https://github.com/onmyway133/Miami</a> </li><li>Future based builders</li><li>Should not wrap system API</li><li><code>URLSession</code> offer tons of thing that it’s hard to use with wrappers like Alamofire</li></ul><h2 id="Parameter-encoding-is-confusing"><a href="#Parameter-encoding-is-confusing" class="headerlink" title="Parameter encoding is confusing"></a>Parameter encoding is confusing</h2><p>-<a href="https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#parameter-encoding" target="_blank" rel="noopener">https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#parameter-encoding</a></p><h2 id="Query-and-body-builder"><a href="#Query-and-body-builder" class="headerlink" title="Query and body builder"></a>Query and body builder</h2><ul><li><a href="https://dev.to/sidthesloth92/understanding-html-form-encoding-url-encoded-and-multipart-forms-3lpa" target="_blank" rel="noopener">Understanding HTML Form Encoding: URL Encoded and Multipart Forms</a></li><li><a href="https://stackoverflow.com/questions/14551194/how-are-parameters-sent-in-an-http-post-request" target="_blank" rel="noopener">https://stackoverflow.com/questions/14551194/how-are-parameters-sent-in-an-http-post-request</a></li><li><a href="https://stackoverflow.com/questions/1617058/ok-to-skip-slash-before-query-string" target="_blank" rel="noopener">https://stackoverflow.com/questions/1617058/ok-to-skip-slash-before-query-string</a></li><li><a href="https://stackoverflow.com/questions/3508338/what-is-the-boundary-in-multipart-form-data" target="_blank" rel="noopener">https://stackoverflow.com/questions/3508338/what-is-the-boundary-in-multipart-form-data</a></li><li><a href="https://github.com/onmyway133/blog/issues/193" target="_blank" rel="noopener">How to construct URL with URLComponents and appendPathComponent in Swift</a></li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li><a href="https://github.com/onmyway133/blog/issues/115" target="_blank" rel="noopener">Case sensitivity in HTTP</a></li></ul><h2 id="Lazy-execution"><a href="#Lazy-execution" class="headerlink" title="Lazy execution"></a>Lazy execution</h2><ul><li>Promise <a href="https://github.com/onmyway133/Then" target="_blank" rel="noopener">https://github.com/onmyway133/Then</a></li><li>Signal and Future <a href="https://github.com/onmyway133/archives/tree/master/Signal" target="_blank" rel="noopener">https://github.com/onmyway133/archives/tree/master/Signal</a></li></ul><h2 id="Catch-error"><a href="#Catch-error" class="headerlink" title="Catch error"></a>Catch error</h2><ul><li><a href="https://github.com/onmyway133/blog/issues/192" target="_blank" rel="noopener">How to catch error in ApolloClient</a></li></ul><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><ul><li><a href="https://github.com/onmyway133/blog/issues/194" target="_blank" rel="noopener">How to cancel DispatchWorkItem and NSOperation</a></li><li><a href="https://swiftrocks.com/understanding-dispatchqueues.html" target="_blank" rel="noopener">Understanding DispatchQueues</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to cancel DispatchWorkItem and NSOperation</title>
      <link href="/blog/How-to-cancel-DispatchWorkItem-and-NSOperation/"/>
      <url>/blog/How-to-cancel-DispatchWorkItem-and-NSOperation/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/194" target="_blank" rel="noopener">#194</a></strong></p><h3 id="DispatchWorkItem"><a href="#DispatchWorkItem" class="headerlink" title="DispatchWorkItem"></a><code>DispatchWorkItem</code></h3><ul><li><a href="https://stackoverflow.com/questions/48844169/swift-ios-dispatchworkitem-is-still-running-even-though-its-getting-cancelled" target="_blank" rel="noopener">https://stackoverflow.com/questions/48844169/swift-ios-dispatchworkitem-is-still-running-even-though-its-getting-cancelled</a></li><li><a href="https://stackoverflow.com/questions/29492707/how-to-stop-cancel-suspend-resume-tasks-on-gcd-queue" target="_blank" rel="noopener">https://stackoverflow.com/questions/29492707/how-to-stop-cancel-suspend-resume-tasks-on-gcd-queue</a></li></ul><h3 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a><code>NSOperation</code></h3><ul><li><a href="https://developer.apple.com/documentation/foundation/nsoperation/1411672-cancel?language=objc" target="_blank" rel="noopener">https://developer.apple.com/documentation/foundation/nsoperation/1411672-cancel?language=objc</a></li></ul><h3 id="Grand-Central-Dispatch-vs-NSOperation"><a href="#Grand-Central-Dispatch-vs-NSOperation" class="headerlink" title="Grand Central Dispatch vs NSOperation"></a>Grand Central Dispatch vs NSOperation</h3><ul><li><a href="https://stackoverflow.com/questions/43226434/2017-swift-3-1-gcd-vs-nsoperation" target="_blank" rel="noopener">https://stackoverflow.com/questions/43226434/2017-swift-3-1-gcd-vs-nsoperation</a></li><li><a href="https://medium.com/@johnsundell/a-deep-dive-into-grand-central-dispatch-in-swift-dead7f6e1ca7" target="_blank" rel="noopener">https://medium.com/@johnsundell/a-deep-dive-into-grand-central-dispatch-in-swift-dead7f6e1ca7</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to construct URL with URLComponents and appendPathComponent in Swift</title>
      <link href="/blog/How-to-construct-URL-with-URLComponents-and-appendPathComponent-in-Swift/"/>
      <url>/blog/How-to-construct-URL-with-URLComponents-and-appendPathComponent-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/193" target="_blank" rel="noopener">#193</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> components = <span class="type">URLComponents</span>(string: <span class="string">"https://google.com/"</span>)</span><br><span class="line">components?.path = <span class="string">"abc/"</span></span><br><span class="line">components?.url</span><br></pre></td></tr></table></figure><p>-&gt; nil</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> components = <span class="type">URLComponents</span>(string: <span class="string">"https://google.com/"</span>)</span><br><span class="line">components?.path = <span class="string">"/abc/"</span></span><br><span class="line">components?.url</span><br><span class="line">components?.queryItems = [<span class="type">URLQueryItem</span>(name: <span class="string">"q"</span>, value: <span class="string">"pokemon"</span>)]</span><br></pre></td></tr></table></figure><p>-&gt; <code>https://google.com/abc/?q=pokemon</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="type">URL</span>(string: <span class="string">"https://google.com/"</span>)</span><br><span class="line">url?.appendPathComponent(<span class="string">"/abc?q=pokemon"</span>)</span><br><span class="line">url</span><br></pre></td></tr></table></figure><p>-&gt; <code>https://google.com//abc%3Fq=pokemon</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to catch error in ApolloClient</title>
      <link href="/blog/How-to-catch-error-in-ApolloClient/"/>
      <url>/blog/How-to-catch-error-in-ApolloClient/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/192" target="_blank" rel="noopener">#192</a></strong></p><p>Read <a href="https://www.apollographql.com/docs/react/features/error-handling" target="_blank" rel="noopener">https://www.apollographql.com/docs/react/features/error-handling</a><br>How to catch actual error <a href="https://github.com/apollographql/apollo-client/issues/4016" target="_blank" rel="noopener">https://github.com/apollographql/apollo-client/issues/4016</a> 🤔 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'apollo-link'</span></span><br><span class="line"><span class="keyword">import</span> ApolloClient <span class="keyword">from</span> <span class="string">'apollo-boost'</span></span><br><span class="line"><span class="keyword">import</span> Token <span class="keyword">from</span> <span class="string">'library/models/Token'</span></span><br><span class="line"><span class="keyword">import</span> TokenService <span class="keyword">from</span> <span class="string">'./TokenService'</span></span><br><span class="line"><span class="keyword">import</span> &#123; TokenRefreshException &#125; <span class="keyword">from</span> <span class="string">'library/utils/Exception'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  uri: <span class="string">'https://www.myapp.no/api/'</span>,</span><br><span class="line">  request: <span class="keyword">async</span> (operation) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="keyword">await</span> TokenService.loadToken()</span><br><span class="line">    updateOperation(operation, token)</span><br><span class="line">  &#125;,</span><br><span class="line">  onError: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ApolloClient error'</span>, error)</span><br><span class="line">    <span class="keyword">if</span> (isAuthError(error)) &#123;</span><br><span class="line">      <span class="keyword">return</span> handleAuthError(error)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> error.forward(error.operation)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  fetchOptions: &#123;</span><br><span class="line">    mode: <span class="string">'no-cors'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isValidErrorCode = <span class="function">(<span class="params">statusCode</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (statusCode) === <span class="string">'undefined'</span> || statusCode === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isAuthError = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'client error'</span>, error)</span><br><span class="line">  <span class="keyword">if</span> (error.networkError) &#123;</span><br><span class="line">    <span class="keyword">return</span> error.networkError.statusCode === <span class="number">401</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleAuthError = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span><br><span class="line">    TokenService.refreshToken()</span><br><span class="line">      .then(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">        updateOperation(error.operation, token)</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> subscriber = &#123;</span><br><span class="line">          next: observer.next.bind(observer),</span><br><span class="line">          error: observer.error.bind(observer),</span><br><span class="line">          complete: observer.complete.bind(observer)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error.forward(error.operation).subscribe(subscriber)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        observer.error(e)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateOperation = <span class="function">(<span class="params">operation, token: Token</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tokenHeader = <span class="string">`<span class="subst">$&#123;token.token_type&#125;</span> <span class="subst">$&#123;token.access_token&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">  operation.setContext(<span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        authorization: tokenHeader,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to do clustering with Google Maps in iOS</title>
      <link href="/blog/How-to-do-clustering-with-Google-Maps-in-iOS/"/>
      <url>/blog/How-to-do-clustering-with-Google-Maps-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/191" target="_blank" rel="noopener">#191</a></strong></p><h2 id="Basic-with-Google-Maps"><a href="#Basic-with-Google-Maps" class="headerlink" title="Basic with Google Maps"></a>Basic with Google Maps</h2><p>Add to Podfile <code>pod &#39;GoogleMaps&#39;</code></p><p>Add a custom marker</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> GoogleMaps</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StopMarker</span>: <span class="title">GMSMarker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stop: <span class="type">Stop</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(stop: <span class="type">Stop</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.stop = stop</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.title = stop.name</span><br><span class="line">        <span class="keyword">self</span>.position = stop.toCoordinate()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">30</span>, height: <span class="number">30</span>))</span><br><span class="line">        imageView.layer.cornerRadius = <span class="number">15</span></span><br><span class="line">        imageView.image = <span class="type">UIImage</span>(named: <span class="string">"pin"</span>)</span><br><span class="line">        <span class="keyword">self</span>.iconView = imageView</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Show markers</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(stops: [Stop])</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.stops = stops</span><br><span class="line">    stops</span><br><span class="line">        .<span class="built_in">map</span>(&#123; <span class="type">StopMarker</span>(stop: $<span class="number">0</span>) &#125;)</span><br><span class="line">        .forEach &#123;</span><br><span class="line">            $<span class="number">0</span>.<span class="built_in">map</span> = mapView</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Assigning <code>$0.map = mapView</code> means telling <code>GMSMapView</code> to start rendering markers</p><p>Handle tap</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">GMSMapViewDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(<span class="number">_</span> mapView: GMSMapView, didTap marker: GMSMarker)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        zoomIn(coordinate: marker.position)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(<span class="number">_</span> mapView: GMSMapView, didTapInfoWindowOf marker: GMSMarker)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> stopMarker = marker <span class="keyword">as</span>? <span class="type">StopMarker</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> detailViewController = <span class="type">StopDetailViewController</span>(stop: stopMarker.stop)</span><br><span class="line">        presentPanModal(detailViewController)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h2><p>Add google-maps-ios-utils manually by following <a href="https://github.com/googlemaps/google-maps-ios-utils/blob/master/Swift.md" target="_blank" rel="noopener">https://github.com/googlemaps/google-maps-ios-utils/blob/master/Swift.md</a></p><p>Otherwise, with CocoaPods, we get error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] The &apos;Pods-MyApp&apos; target has transitive dependencies that include static binaries: (/Users/khoa/Projects/MyApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.framework, /Users/khoa/Projects/MyApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.framework, and /Users/khoa/Projects/MyApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMapsCore.framework)</span><br></pre></td></tr></table></figure><p>Add <code>ClusterItem</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClusterItem</span>: <span class="title">NSObject</span>, <span class="title">GMUClusterItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> position: <span class="type">CLLocationCoordinate2D</span></span><br><span class="line">    <span class="keyword">let</span> stop: <span class="type">Stop</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(stop: <span class="type">Stop</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.stop = stop</span><br><span class="line">        <span class="keyword">self</span>.position = stop.toCoordinate()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set up cluster manager</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iconGenerator = <span class="type">GMUDefaultClusterIconGenerator</span>()</span><br><span class="line"><span class="keyword">let</span> algorithm = <span class="type">GMUNonHierarchicalDistanceBasedAlgorithm</span>()</span><br><span class="line"><span class="keyword">let</span> renderer = <span class="type">GMUDefaultClusterRenderer</span>(mapView: mapView, clusterIconGenerator: iconGenerator)</span><br><span class="line">renderer.delegate = <span class="keyword">self</span></span><br><span class="line">clusterManager = <span class="type">GMUClusterManager</span>(<span class="built_in">map</span>: mapView, algorithm: algorithm, renderer: renderer)</span><br><span class="line">clusterManager.setDelegate(<span class="keyword">self</span>, mapDelegate: <span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><p>Default algorithm <code>GMUNonHierarchicalDistanceBasedAlgorithm</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A simple clustering algorithm with O(nlog n) performance. Resulting clusters are not</span><br><span class="line">* hierarchical.</span><br><span class="line">* High level algorithm:</span><br><span class="line">* 1. Iterate over items in the order they were added (candidate clusters).</span><br><span class="line">* 2. Create a cluster with the center of the item.</span><br><span class="line">* 3. Add all items that are within a certain distance to the cluster.</span><br><span class="line">* 4. Move any items out of an existing cluster if they are closer to another cluster.</span><br><span class="line">* 5. Remove those items from the list of candidate clusters.</span><br><span class="line">* Clusters have the center of the first element (not the centroid of the items within it).</span><br></pre></td></tr></table></figure><p>Make <code>ClusterItem</code> and add to <code>clusterManager</code>. In the end, call <code>clusterManager.cluster()</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(stops: [Stop])</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.stops = stops</span><br><span class="line">    stops</span><br><span class="line">        .<span class="built_in">map</span>(&#123; <span class="type">StopMarker</span>(stop: $<span class="number">0</span>) &#125;)</span><br><span class="line">        .forEach &#123;</span><br><span class="line">            <span class="keyword">let</span> item = <span class="type">ClusterItem</span>(stop: $<span class="number">0</span>.stop)</span><br><span class="line">            clusterManager.add(item)</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    clusterManager.cluster()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By default, clusterManager uses renderer to render default pin marker. Implement <code>GMUClusterRendererDelegate</code> to use our custom <code>StopMarker</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">GMUClusterRendererDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">renderer</span><span class="params">(<span class="number">_</span> renderer: GMUClusterRenderer, markerFor object: <span class="keyword">Any</span>)</span></span> -&gt; <span class="type">GMSMarker?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> object &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> clusterItem <span class="keyword">as</span> <span class="type">ClusterItem</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">StopMarker</span>(stop: clusterItem.stop)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally handle tapping on cluster and cluster item</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">GMUClusterManagerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clusterManager</span><span class="params">(<span class="number">_</span> clusterManager: GMUClusterManager, didTap cluster: GMUCluster)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"tap cluster"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clusterManager</span><span class="params">(<span class="number">_</span> clusterManager: GMUClusterManager, didTap clusterItem: GMUClusterItem)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"tap cluster item"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to handle file picker in React</title>
      <link href="/blog/How-to-handle-file-picker-in-React/"/>
      <url>/blog/How-to-handle-file-picker-in-React/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/190" target="_blank" rel="noopener">#190</a></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  &lt;Button color=<span class="string">"inherit"</span> onClick=&#123;<span class="keyword">this</span>.onImagePress&#125; &gt;Image&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input ref="fileInput" type="file" id="myFile" multiple accept="image/</span>*<span class="string">" style=&#123;&#123;display: 'none'&#125;&#125; onChange=&#123;this.handleFiles&#125;&gt;&lt;/input&gt;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">onImagePress = () =&gt; &#123;</span></span><br><span class="line"><span class="string">  const fileInput = this.refs.fileInput</span></span><br><span class="line"><span class="string">  fileInput.click()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">handleFiles = (e) =&gt; &#123;</span></span><br><span class="line"><span class="string">  e.persist()</span></span><br><span class="line"><span class="string">  const file = e.target.files[0]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OSS</title>
      <link href="/blog/OSS/"/>
      <url>/blog/OSS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/189" target="_blank" rel="noopener">#189</a></strong></p><ul><li><a href="https://github.com/digipost/ios" target="_blank" rel="noopener">https://github.com/digipost/ios</a></li><li><a href="https://github.com/wwdc/2019" target="_blank" rel="noopener">https://github.com/wwdc/2019</a></li><li><a href="https://github.com/google/science-journal-ios" target="_blank" rel="noopener">https://github.com/google/science-journal-ios</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to fix ApiException  10 in Flutter for Android</title>
      <link href="/blog/How-to-fix-ApiException-10-in-Flutter-for-Android/"/>
      <url>/blog/How-to-fix-ApiException-10-in-Flutter-for-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/188" target="_blank" rel="noopener">#188</a></strong></p><p>Get error <code>com.google.android.gms.common.api.ApiException: 10</code> with <code>google_sign_in</code> package.</p><p>Read <a href="https://developers.google.com/android/guides/client-auth" target="_blank" rel="noopener">https://developers.google.com/android/guides/client-auth</a></p><blockquote><p>Certain Google Play services (such as Google Sign-in and App Invites) require you to provide the SHA-1 of your signing certificate so we can create an OAuth2 client and API key for your app</p></blockquote><p>console.developers.google.com/apis/credentials</p><p>Credentials -&gt; OAuth client id<br>If we specify SHA1 in firebase, then <code>console.developers.google.com</code> will generate an Android oauth for us</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore &#123;keystore_name&#125; -<span class="built_in">alias</span> &#123;alias_name&#125;</span><br></pre></td></tr></table></figure><p>Use correct keystore for debug and release</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Add your own signing config for the release build.</span></span><br><span class="line">            <span class="comment">// Signing with the debug keys for now, so `flutter run --release` works.</span></span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            signingConfig signingConfigs.debug</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> dart </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to get Google account photo in Flutter</title>
      <link href="/blog/How-to-get-Google-account-photo-in-Flutter/"/>
      <url>/blog/How-to-get-Google-account-photo-in-Flutter/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/187" target="_blank" rel="noopener">#187</a></strong></p><p>If you use Flutter, then you can access it via <code>people.googleapis.com</code> endpoint, code uses <code>google_sign_in</code> library</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:google_sign_in/google_sign_in.dart'</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; getPhotoUrl(GoogleSignInAccount account, <span class="built_in">String</span> userId) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// final authentication = await account.authentication;</span></span><br><span class="line">  <span class="keyword">final</span> url = <span class="string">'https://people.googleapis.com/v1/people/<span class="subst">$&#123;userId&#125;</span>?personFields=photos'</span>;</span><br><span class="line">  <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(</span><br><span class="line">    url,</span><br><span class="line">    headers: <span class="keyword">await</span> account.authHeaders</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> data = json.decode(response.body);</span><br><span class="line">  <span class="keyword">return</span> data[<span class="string">'photos'</span>].first[<span class="string">'url'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You will get something like</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  resourceName: people/<span class="number">998812322529259873423</span>, </span><br><span class="line">  etag: %EgQBAzcabcQBAgUH, </span><br><span class="line">  photos: [&#123;<span class="attr">metadata</span>: &#123;<span class="attr">primary</span>: <span class="literal">true</span>, <span class="attr">source</span>: &#123;<span class="attr">type</span>: PROFILE, <span class="attr">id</span>: <span class="number">107721622529987673423</span>&#125;&#125;, </span><br><span class="line">  url: https:<span class="comment">//lh3.googleusercontent.com/a-/abcdefmB2p1VWxLsNT9WSV0yqwuwo6o2Ba21sh_ra7CnrZ=s100&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>where url is an accessible image url.</p>]]></content>
      
      
      
        <tags>
            
            <tag> dart </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting activity name through HKWorkoutActivityType in HealthKit</title>
      <link href="/blog/Getting-activity-name-through-HKWorkoutActivityType-in-HealthKit/"/>
      <url>/blog/Getting-activity-name-through-HKWorkoutActivityType-in-HealthKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/186" target="_blank" rel="noopener">#186</a></strong></p><p>After fetching workouts with HKObjectType.workoutType() , we get <a href="https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype" target="_blank" rel="noopener">HKWorkoutActivityType</a> , which is an enum enum HKWorkoutActivityType : <a href="https://developer.apple.com/documentation/swift/uint" target="_blank" rel="noopener">UInt</a> . As of Swift 4.2, there are no way to get enum case as String because this enum has type UInt .</p><p>Though there will be some manual involved, we can build a generator to get all the enum case names. Here we will write code to generate code, and use that generated code to examine all the values.</p><p>Execute this Swift code in our iOS app</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeCode</span><span class="params">(string: String)</span></span> &#123;</span><br><span class="line">   <span class="keyword">let</span> pattern = “<span class="keyword">case</span> \\w*”</span><br><span class="line">   <span class="keyword">let</span> range = <span class="type">NSMakeRange</span>(<span class="number">0</span>, string.<span class="built_in">count</span>-<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">let</span> regex = <span class="keyword">try</span>! <span class="type">NSRegularExpression</span>(pattern: pattern, options: [])</span><br><span class="line">   regex</span><br><span class="line">   .matches(<span class="keyword">in</span>: string, options: [], range: range)</span><br><span class="line">   .forEach(&#123; result <span class="keyword">in</span></span><br><span class="line">   <span class="keyword">let</span> start = string.index(string.startIndex, offsetBy: result.range.lowerBound)</span><br><span class="line">   <span class="keyword">let</span> end = string.index(string.startIndex, offsetBy: result.range.upperBound)</span><br><span class="line">   <span class="keyword">let</span> substring = <span class="type">String</span>(string[start…end])</span><br><span class="line">   <span class="keyword">let</span> name = substring</span><br><span class="line">   .replacingOccurrences(of: “<span class="keyword">case</span>”, with: “”)</span><br><span class="line">   .replacingOccurrences(of: “ “, with: “”)</span><br><span class="line">   .replacingOccurrences(of: “\n”, with: “”</span><br><span class="line">  <span class="built_in">print</span>(“dictionary[<span class="type">HKWorkoutActivityType</span>.\(name).rawValue] = \”\(name)\””)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>Where string is all the cases from <a href="https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype" target="_blank" rel="noopener">HKWorkoutActivityType</a>, for example</p><p><a href="https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/archery" target="_blank" rel="noopener">case archery</a><br>The constant for shooting archery.</p><p><a href="https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/bowling" target="_blank" rel="noopener">case bowling</a><br>The constant for bowling</p><p><a href="https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/fencing" target="_blank" rel="noopener">case fencing</a><br>The constant for fencing.</p><p><a href="https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/gymnastics" target="_blank" rel="noopener">case gymnastics</a><br>Performing gymnastics.</p><p><a href="https://developer.apple.com/documentation/healthkit/hkworkoutactivitytype/trackandfield" target="_blank" rel="noopener">case trackAndField</a><br>Participating in track and field events, including shot put, javelin, pole vaulting, and related sports.</p><p>What the code does is to use regular expression to examine all the names after case , and build our code</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dictionary[<span class="type">HKWorkoutActivityType</span>.americanFootball.rawValue] = “americanFootball”</span><br><span class="line">dictionary[<span class="type">HKWorkoutActivityType</span>.archery.rawValue] = “archery”</span><br><span class="line">dictionary[<span class="type">HKWorkoutActivityType</span>.australianFootball.rawValue] = “australianFootball”</span><br><span class="line">dictionary[<span class="type">HKWorkoutActivityType</span>.badminton.rawValue] = “badminton”</span><br><span class="line">dictionary[<span class="type">HKWorkoutActivityType</span>.baseball.rawValue] = “baseball”</span><br></pre></td></tr></table></figure><p>The above generated code with dictionary contains rawValue as key and the enum case name as value .</p><p>Later when we get any HKWorkoutActivityType , we can compare with this dictionary to find the actual name. This is better than hardcode activity name with numbers because those rawValue are just implementation detail</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Curry in Swift and Javascript</title>
      <link href="/blog/Curry-in-Swift-and-Javascript/"/>
      <url>/blog/Curry-in-Swift-and-Javascript/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/185" target="_blank" rel="noopener">#185</a></strong></p><p>You may encounter curry in everyday code without knowing it. Here is a bit of my reflections on curry and how to apply it in Javascript and Swift.</p><h2 id="Taking-one-parameter-in-Haskell"><a href="#Taking-one-parameter-in-Haskell" class="headerlink" title="Taking one parameter in Haskell"></a>Taking one parameter in Haskell</h2><p>In Haskell, all function officially takes only 1 parameter. Function with many parameters are just curried, which means they will be partially applied. Calling sum 1 just returns a function with 1 parameter, then 2is passed into this function. The following 2 function calls are the same.</p><pre><code>ghci&gt; sum 1 23 ghci&gt; (max 1) 23</code></pre><p>I tend to think of curried function or partially applied function as something that carry dependencies at each application step. Each curried function can be assigned to variable or pass around, or as returned value.</p><h2 id="Curry-in-Swift-for-predicate"><a href="#Curry-in-Swift-for-predicate" class="headerlink" title="Curry in Swift for predicate"></a>Curry in Swift for predicate</h2><p>When I was trying to make my own <a href="https://github.com/onmyway133/archives/tree/master/Signal" target="_blank" rel="noopener">Signal</a> library, I have</p><iframe src="https://medium.com/media/f61aae80ae0b6410d6844dbfd961d01e" frameborder="0"></iframe><p>and Event</p><iframe src="https://medium.com/media/4a05bf4ba2a71d096c2ef87a3cd57ec8" frameborder="0"></iframe><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>Then there should be a filter for Signal. The idea of filter is that we should update signal if the Event is Next with right filtered value</p><pre><code>public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt;{    let signal = Signal&lt;T&gt;()    subscribe { result in        switch(result) {        case let .Success(value):            if f(value) {                signal.update(result)            }        case let .Error(error): signal.update(.Error(error))        }    }    return signal}</code></pre><h3 id="2-parameters"><a href="#2-parameters" class="headerlink" title="2 parameters"></a>2 parameters</h3><p>But having Event as another monad, I think it should be more encapsulated if that switching logic gets moved into the Event. Here the filter takes 2 params</p><p>Event.swift</p><pre><code>func filter(f: T -&gt; Bool, callback: (Event&lt;T&gt; -&gt; Void)) {        switch self {        case let .Next(value) where f(value):            callback(self)        case .Failed:            callback(self)        default:            break    }}</code></pre><p>Signal.swift</p><pre><code>public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt; {    let signal = Signal&lt;T&gt;()    subscribe { event in        event.filter(f, callback: signal.update)    }    return signal}</code></pre><h3 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h3><p>With currying, we can make filter a more abstract function, and defer the decision to pass the callback param. It is a little carried away but I find it helpful this way</p><p>Now filter accepts 1 param, and it returns a function that takes callback as its param</p><p>Event.swift</p><pre><code>func filter(f: T -&gt; Bool) -&gt; ((Event&lt;T&gt; -&gt; Void) -&gt; Void) {        return { g in            switch self {            case let .Next(value) where f(value):                g(self)            case .Failed:                g(self)            default:                break            }        }    }</code></pre><p>Signal.swift</p><pre><code>public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt; {        let signal = Signal&lt;T&gt;()        subscribe { event in            event.filter(f)(signal.update)        }        return signal    }</code></pre><h3 id="Curry-syntax-in-Swift-2-and-above"><a href="#Curry-syntax-in-Swift-2-and-above" class="headerlink" title="Curry syntax in Swift 2 and above"></a>Curry syntax in Swift 2 and above</h3><p>Swift 2 supports curry syntax function</p><pre><code>func sum(a: Int)(b: Int) -&gt; Int {    return a + b}let sumWith5 = sum(5)let result = sumWith5(b: 10)</code></pre><p>Unfortunately, the syntactic sugar for declaring curry has been dropped since Swift 3. You may want to find out in <a href="http://ericasadun.com/2015/12/18/bidding-farewell-to-currying/" target="_blank" rel="noopener">Bidding farewell to currying</a>. But it’s not a big deal as we can easily create curry function. It is just a function that returns another function.</p><h2 id="Using-curry-for-partial-application-in-UIKit"><a href="#Using-curry-for-partial-application-in-UIKit" class="headerlink" title="Using curry for partial application in UIKit"></a>Using curry for partial application in UIKit</h2><p>I used this curry technique in my Xkcd app. See <a href="https://github.com/onmyway133/Xkcd/blob/master/Source/Feature/Main/MainController.swift" target="_blank" rel="noopener">MainController.swift</a>. MainController is vanilla UITabBarController with ComicsController and FavoriteController , all embedded in UINavigationViewController .</p><p>The feature is that when a comic is selected, a comic detail screen should be pushed on top of the navigation stack. For example in <a href="https://github.com/onmyway133/Xkcd/blob/master/Source/Feature/Comics/ComicsContoller.swift#L20" target="_blank" rel="noopener">ComicsController</a></p><pre><code>/// Called when a comic is selected  var selectComic: ((Comic) -&gt; Void)?</code></pre><p>All ComicsController needs to know is to call that selectComic closure with the chosen Comic, and someone should know how to handle that selection. Back to the <a href="https://github.com/onmyway133/Xkcd/blob/master/Source/Feature/Main/MainController.swift" target="_blank" rel="noopener">handleFlow</a> function inside MainController.</p><pre><code>private func handleFlow() {  typealias Function = (UINavigationController) -&gt; (Comic) -&gt; Void  let selectComic: Function = { [weak self] navigationController in    return { (comic: Comic) in      guard let self = self else {        return      }  let detailController = self.makeDetail(comic: comic)      navigationController.pushViewController(detailController, animated: true)    }  }  comicsController.selectComic = selectComic(comicNavigationController)  favoriteController.selectComic = selectComic(favoriteNavigationController)}</code></pre><p>I declared Function as typealias to explicitly state the curry function that we are going to build</p><pre><code>typealias Function = (UINavigationController) -&gt; (Comic) -&gt; Void</code></pre><p>We build selectComic as curried function, that takes UINavigationViewController and returns a function that takes Comic and returns Void . This way when we partially apply selectComic with the a navigationController , we get another function that has navigationController as dependency, and ready to be assigned to selectComic property in comicsController .</p><h2 id="Curry-promised-function-in-Javascript"><a href="#Curry-promised-function-in-Javascript" class="headerlink" title="Curry promised function in Javascript"></a>Curry promised function in Javascript</h2><p>I like to work with Promise and async/await in Javascript. It allows chainable style and easy to reason about. So when working with callbacks in Javascript, for example callback from native modules in React Native, I tend to convert them into Promise.</p><p>For example when working with HealthKit, we need to expose a native modules around it</p><pre><code>// [@flow](http://twitter.com/flow)import { NativeModules } from &apos;react-native&apos;type HealthManagerType = {  checkAuthorisation: ((string) =&gt; void)) =&gt; void,  authorise: ((boolean) =&gt; void)) =&gt; void,  readWorkout: (Date, Date, () =&gt; void)) =&gt; void,  readDailySummary: (Date, Date, () =&gt; void)) =&gt; void,  readMeasurement: (Date, Date, () =&gt; void)) =&gt; void}const HealthManager: HealthManagerType = NativeModules.HealthManagerexport default HealthManager</code></pre><p>We can build a toPromise function that can convert a function with callback into Promise</p><pre><code>// [@flow](http://twitter.com/flow)const toPromise = (f: (any) =&gt; void) =&gt; {  return new Promise&lt;any&gt;((resolve, reject) =&gt; {    try {      f((result) =&gt; {        resolve(result)      })    } catch (e) {      reject(e)    }  })}export default toPromise</code></pre><p>However, as you can see in the signature, it only works with a callback of type (any) =&gt; void In other words, this callback must have exactly 1 parameter, because a Promise can either returns a value or throws an error.</p><p>To remedy this, we can build a curry function that can turns function with either 1, 2, 3 parameters into curried function. Thanks to the dynamic nature of Javascript, we have</p><pre><code>// [@flow](http://twitter.com/flow)function curry0(f: () =&gt; void) {  return f()}function curry1(f: (any) =&gt; void) {  return (p1: any) =&gt; {    return f(p1)  }}function curry2(f: (any, any) =&gt; void) {  return (p1: any) =&gt; {    return (p2: any) =&gt; {      return f(p1, p2)    }  }}function curry3(f: (any, any, any) =&gt; void) {  return (p1: any) =&gt; {    return (p2: any) =&gt; {      return (p3: any) =&gt; {        return f(p1, p2, p3)      }    }  }}export default {  curry0,  curry1,  curry2,  curry3}</code></pre><p>So with a function that have 3 parameters, we can use curry3 to partially apply the first 2 parameters. Then we have a function that accepts just a callback, and this is turned into Promise via toPromise</p><pre><code>const readWorkout = curry.curry3(HealthManager.readWorkout)(DateUtils.startDate))(DateUtils.endDate))const workouts = await toPromise(readWorkout)</code></pre><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>Here are some of my favorite posts to read more about curry</p><ul><li><p><a href="http://learnyouahaskell.com/higher-order-functions" target="_blank" rel="noopener">Higher order functions</a></p></li><li><p><a href="https://robots.thoughtbot.com/introduction-to-function-currying-in-swift" target="_blank" rel="noopener">Introduction to Function Currying in Swift</a></p></li><li><p><a href="http://www.russbishop.net/swift-function-currying" target="_blank" rel="noopener">Swift Function Currying</a></p></li><li><p><a href="https://medium.com/@kevincennis/currying-in-javascript-c66080543528" target="_blank" rel="noopener">Currying in JavaScript</a>: I like how he uses memory and slice to gradually build more generic curry function</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to fix SSLPeerUnverifiedException in Android</title>
      <link href="/blog/How-to-fix-SSLPeerUnverifiedException-in-Android/"/>
      <url>/blog/How-to-fix-SSLPeerUnverifiedException-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/184" target="_blank" rel="noopener">#184</a></strong></p><p>Get error <code>javax.net.ssl.SSLPeerUnverifiedException: No peer certificate</code> in Android API 16 to API 19</p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>Read about HTTPS and SSL <a href="https://developer.android.com/training/articles/security-ssl" target="_blank" rel="noopener">https://developer.android.com/training/articles/security-ssl</a><br>Check backend TLS <a href="https://www.ssllabs.com/index.html" target="_blank" rel="noopener">https://www.ssllabs.com/index.html</a><br>TLS by default in Android P <a href="https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html" target="_blank" rel="noopener">https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html</a></p><h2 id="TLS-version"><a href="#TLS-version" class="headerlink" title="TLS version"></a>TLS version</h2><p>Read <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket.html" target="_blank" rel="noopener">https://developer.android.com/reference/javax/net/ssl/SSLSocket.html</a></p><blockquote><p>This class extends Sockets and provides secure socket using protocols such as the “Secure Sockets Layer” (SSL) or IETF “Transport Layer Security” (TLS) protocols.</p></blockquote><img width="903" alt="ssl" src="https://user-images.githubusercontent.com/2284279/54885644-d6e9c080-4e7e-11e9-9f50-0d5a72b76202.png"><p>TLS 1.1 and 1.2 are supported from API 16, but not enabled by default until API 20.</p><h2 id="Install-TLS-1-2-when-needed"><a href="#Install-TLS-1-2-when-needed" class="headerlink" title="Install TLS 1.2 when needed"></a>Install TLS 1.2 when needed</h2><p>Read <a href="https://medium.com/tech-quizlet/working-with-tls-1-2-on-android-4-4-and-lower-f4f5205629a" target="_blank" rel="noopener">https://medium.com/tech-quizlet/working-with-tls-1-2-on-android-4-4-and-lower-f4f5205629a</a></p><blockquote><p>The first thing we realized was that despite documentation suggesting otherwise, not all devices on Android 4.1+ actually support TLS 1.2. Even though it is likely due to device manufacturers not fully following the official Android specs, we had to do what we could to ensure this would work for our users.</p></blockquote><blockquote><p>Luckily, Google Play Services provides a way to do this. The solution is to use ProviderInstaller from Google Play Services to try to update the device to support the latest and greatest security protocols.</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Context.<span class="title">installTls12</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      ProviderInstaller.installIfNeeded(<span class="keyword">this</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e: GooglePlayServicesRepairableException) &#123;</span><br><span class="line">      <span class="comment">// Prompt the user to install/update/enable Google Play services.</span></span><br><span class="line">      GoogleApiAvailability.getInstance()</span><br><span class="line">          .showErrorNotification(<span class="keyword">this</span>, e.connectionStatusCode)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e: GooglePlayServicesNotAvailableException) &#123;</span><br><span class="line">      <span class="comment">// Indicates a non-recoverable error: let the user know.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Does not seem to work, as the root problem was that TLS was not enabled</p><h2 id="Try-normal-HttpsUrlConnection"><a href="#Try-normal-HttpsUrlConnection" class="headerlink" title="Try normal HttpsUrlConnection"></a>Try normal HttpsUrlConnection</h2><p>If we use any networking library and suspect it is the cause, then try using normal HttpsUrlConnection to check.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHttpRequestTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>,<span class="title">Integer</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</span><br><span class="line">        String my_url = params[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(my_url);</span><br><span class="line">            HttpsURLConnection httpURLConnection = (HttpsURLConnection) url.openConnection();</span><br><span class="line">            httpURLConnection.setSSLSocketFactory(<span class="keyword">new</span> MyFactory());</span><br><span class="line">            <span class="comment">// setting the  Request Method Type</span></span><br><span class="line">            httpURLConnection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">            <span class="comment">// adding the headers for request</span></span><br><span class="line">            httpURLConnection.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String result = readStream(httpURLConnection.getInputStream());</span><br><span class="line">            Log.e(<span class="string">"HttpsURLConnection"</span>, <span class="string">"data"</span> + result.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Log.e(<span class="string">"HttpsURLConnection "</span>, <span class="string">"error"</span> + e.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readStream</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is, Charset.forName(<span class="string">"US-ASCII"</span>)));</span><br><span class="line">        StringBuilder total = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            total.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFactory</span> <span class="keyword">extends</span> <span class="title">SSLSocketFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> javax.net.ssl.SSLSocketFactory internalSSLSocketFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFactory</span><span class="params">()</span> <span class="keyword">throws</span> KeyManagementException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        SSLContext context = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">        context.init(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        internalSSLSocketFactory = context.getSocketFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getDefaultCipherSuites() &#123;</span><br><span class="line">        <span class="keyword">return</span> internalSSLSocketFactory.getDefaultCipherSuites();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getSupportedCipherSuites() &#123;</span><br><span class="line">        <span class="keyword">return</span> internalSSLSocketFactory.getSupportedCipherSuites();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enableTLSOnSocket(internalSSLSocketFactory.createSocket());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(Socket s, String host, <span class="keyword">int</span> port, <span class="keyword">boolean</span> autoClose)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enableTLSOnSocket(internalSSLSocketFactory.createSocket(s, host, port, autoClose));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(String host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException, UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(String host, <span class="keyword">int</span> port, InetAddress localHost, <span class="keyword">int</span> localPort)</span> <span class="keyword">throws</span> IOException, UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port, localHost, localPort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(InetAddress host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(InetAddress address, <span class="keyword">int</span> port, InetAddress localAddress, <span class="keyword">int</span> localPort)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enableTLSOnSocket(internalSSLSocketFactory.createSocket(address, port, localAddress, localPort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Socket <span class="title">enableTLSOnSocket</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(socket != <span class="keyword">null</span> &amp;&amp; (socket <span class="keyword">instanceof</span> SSLSocket)) &#123;</span><br><span class="line">            ((SSLSocket)socket).setEnabledProtocols(<span class="keyword">new</span> String[] &#123;<span class="string">"TLSv1.1"</span>, <span class="string">"TLSv1.2"</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The key is <code>setEnabledProtocols</code>. Then use</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"https://www.myserver.com/data"</span></span><br><span class="line"><span class="keyword">new</span> MyHttpRequestTask().execute(url);</span><br></pre></td></tr></table></figure><h2 id="Use-custom-SSLSocketFactory-in-some-networking-libraries"><a href="#Use-custom-SSLSocketFactory-in-some-networking-libraries" class="headerlink" title="Use custom SSLSocketFactory in some networking libraries"></a>Use custom SSLSocketFactory in some networking libraries</h2><p>If our custom <code>MyFactory</code> works for <code>HttpsUrlConnection</code>, then the problem lies in some 3rd party networking libraries.</p><p>Read <a href="https://blog.dev-area.net/2015/08/13/android-4-1-enable-tls-1-1-and-tls-1-2/" target="_blank" rel="noopener">https://blog.dev-area.net/2015/08/13/android-4-1-enable-tls-1-1-and-tls-1-2/</a></p><blockquote><p>The Android documentation for SSLSocket says that TLS 1.1 and TLS 1.2 is supported within android starting API level 16+ (Android 4.1, Jelly Bean). But it is by default disabled but starting with API level 20+ (Android 4.4 for watch, Kitkat Watch and Android 5.0 for phone, Lollipop) they are enabled. But it is very hard to find any documentation about how to enable it for phones running 4.1 for example.</p></blockquote><blockquote><p>The first thing you need to do is to make sure that your minimum required API level is 16 to have the following code working in your project.</p></blockquote><blockquote><p>To enable TLS 1.1 and 1.2 you need to create a custom SSLSocketFactory that is going to proxy all calls to a default  SSLSocketFactory implementation. In addition to that do we have to override all createSocket methods and callsetEnabledProtocols on the returned SSLSocket to enable TLS 1.1 and TLS 1.2. For an example implementation just follow the link below.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFactory</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">http</span>.<span class="title">conn</span>.<span class="title">ssl</span>.<span class="title">SSLSocketFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KeyStore <span class="title">getKeyStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KeyStore trustStore = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">            trustStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> trustStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SSLSocketFactory internalSSLSocketFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFactory</span><span class="params">(KeyStore truststore)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(truststore);</span><br><span class="line">        SSLContext context = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">        context.init(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        internalSSLSocketFactory = context.getSocketFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enableTLSOnSocket(internalSSLSocketFactory.createSocket());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(Socket socket, String host, <span class="keyword">int</span> port, <span class="keyword">boolean</span> autoClose)</span> <span class="keyword">throws</span> IOException, UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enableTLSOnSocket(internalSSLSocketFactory.createSocket(socket, host, port, autoClose));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Socket <span class="title">enableTLSOnSocket</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(socket != <span class="keyword">null</span> &amp;&amp; (socket <span class="keyword">instanceof</span> SSLSocket)) &#123;</span><br><span class="line">            ((SSLSocket)socket).setEnabledProtocols(<span class="keyword">new</span> String[] &#123;<span class="string">"TLSv1.1"</span>, <span class="string">"TLSv1.2"</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then maybe use it in a library, for example the ancient AsyncHttpClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asyncHttpClient = <span class="keyword">new</span> AsyncHttpClient();</span><br><span class="line">asyncHttpClient.setTimeout(HTTP_GET_TIMEOUT);</span><br><span class="line">asyncHttpClient.setSSLSocketFactory(<span class="keyword">new</span> MyFactory(MyFactory.getKeyStore()));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to zoom in double in MapKit</title>
      <link href="/blog/How-to-zoom-in-double-in-MapKit/"/>
      <url>/blog/How-to-zoom-in-double-in-MapKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/183" target="_blank" rel="noopener">#183</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zoomInDouble</span><span class="params">(coordinate: CLLocationCoordinate2D)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> region = mapView.region</span><br><span class="line">    <span class="keyword">let</span> zoomInRegion = <span class="type">MKCoordinateRegion</span>(</span><br><span class="line">        center: coordinate,</span><br><span class="line">        span: <span class="type">MKCoordinateSpan</span>(</span><br><span class="line">            latitudeDelta: region.span.latitudeDelta * <span class="number">0.5</span>,</span><br><span class="line">            longitudeDelta: region.span.longitudeDelta * <span class="number">0.5</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    mapView.setRegion(zoomInRegion, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to select cluster annotation in MapKit</title>
      <link href="/blog/How-to-select-cluster-annotation-in-MapKit/"/>
      <url>/blog/How-to-select-cluster-annotation-in-MapKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/182" target="_blank" rel="noopener">#182</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(<span class="number">_</span> mapView: MKMapView, didSelect view: MKAnnotationView)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> coordinate = view.annotation?.coordinate <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (view.annotation <span class="keyword">is</span> <span class="type">MKClusterAnnotation</span>) &#123;</span><br><span class="line">        zoomInDouble(coordinate: coordinate)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to cluster annotations in MapKit in iOS 11</title>
      <link href="/blog/How-to-cluster-annotations-in-MapKit-in-iOS-11/"/>
      <url>/blog/How-to-cluster-annotations-in-MapKit-in-iOS-11/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/181" target="_blank" rel="noopener">#181</a></strong></p><p><a href="https://developer.apple.com/documentation/mapkit/mkannotationview/decluttering_a_map_with_mapkit_annotation_clustering" target="_blank" rel="noopener">https://developer.apple.com/documentation/mapkit/mkannotationview/decluttering_a_map_with_mapkit_annotation_clustering</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationView</span>: <span class="title">MKMarkerAnnotationView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(annotation: <span class="type">MKAnnotation?</span>, reuseIdentifier: <span class="type">String?</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(annotation: annotation, reuseIdentifier: reuseIdentifier)</span><br><span class="line">        </span><br><span class="line">        clusteringIdentifier = <span class="type">String</span>(describing: <span class="type">ClusterView</span>.<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClusterView</span>: <span class="title">MKAnnotationView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(annotation: <span class="type">MKAnnotation?</span>, reuseIdentifier: <span class="type">String?</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(annotation: annotation, reuseIdentifier: reuseIdentifier)</span><br><span class="line">        displayPriority = .defaultHigh</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForDisplay</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.prepareForDisplay()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> annotation = annotation <span class="keyword">as</span>? <span class="type">MKClusterAnnotation</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">count</span> = annotation.memberAnnotations.<span class="built_in">count</span></span><br><span class="line">        image = <span class="keyword">self</span>.image(annotation: annotation, <span class="built_in">count</span>: <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">image</span><span class="params">(annotation: MKClusterAnnotation, <span class="built_in">count</span>: Int)</span></span> -&gt; <span class="type">UIImage?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> renderer = <span class="type">UIGraphicsImageRenderer</span>(size: <span class="type">CGSize</span>(width: <span class="number">40.0</span>, height: <span class="number">40.0</span>))</span><br><span class="line">        image = renderer.image &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="type">UIColor</span>.purple.setFill()</span><br><span class="line">            <span class="type">UIBezierPath</span>(ovalIn: <span class="type">CGRect</span>(x: <span class="number">0.0</span>, y: <span class="number">0.0</span>, width: <span class="number">40.0</span>, height: <span class="number">40.0</span>)).fill()</span><br><span class="line">            <span class="keyword">let</span> attributes: [<span class="type">NSAttributedString</span>.<span class="type">Key</span>: <span class="type">Any</span>] = [</span><br><span class="line">                <span class="type">NSAttributedString</span>.<span class="type">Key</span>.foregroundColor: <span class="type">UIColor</span>.white,</span><br><span class="line">                <span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: <span class="type">UIFont</span>.boldSystemFont(ofSize: <span class="number">20.0</span>)</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> text = <span class="string">"\(count)"</span></span><br><span class="line">            <span class="keyword">let</span> size = text.size(withAttributes: attributes)</span><br><span class="line">            <span class="keyword">let</span> rect = <span class="type">CGRect</span>(x: <span class="number">20</span> - size.width / <span class="number">2</span>, y: <span class="number">20</span> - size.height / <span class="number">2</span>, width: size.width, height: size.height)</span><br><span class="line">            text.draw(<span class="keyword">in</span>: rect, withAttributes: attributes)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapView.register(<span class="type">ClusterView</span>.<span class="keyword">self</span>, forAnnotationViewWithReuseIdentifier: <span class="type">String</span>(describing: <span class="type">ClusterView</span>.<span class="keyword">self</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Understanding CanvasRenderingContext2D and UIBezierPath</title>
      <link href="/blog/Understanding-CanvasRenderingContext2D-and-UIBezierPath/"/>
      <url>/blog/Understanding-CanvasRenderingContext2D-and-UIBezierPath/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/180" target="_blank" rel="noopener">#180</a></strong></p><h2 id="CanvasRenderingContext2D"><a href="#CanvasRenderingContext2D" class="headerlink" title="CanvasRenderingContext2D"></a>CanvasRenderingContext2D</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo</a></p><blockquote><p>The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic Bézier curve to the current sub-path. It requires three points: the first two are control points and the third one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the Bézier curve.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);</span><br></pre></td></tr></table></figure><p>Where order is control point 1, control point 2 and end point</p><h2 id="UIBezierPath"><a href="#UIBezierPath" class="headerlink" title="UIBezierPath"></a>UIBezierPath</h2><p><a href="https://developer.apple.com/documentation/uikit/uibezierpath/1624357-addcurve" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uibezierpath/1624357-addcurve</a></p><blockquote><p>Appends a cubic Bézier curve to the receiver’s path.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addCurve(to:controlPoint1:controlPoint2:)</span><br></pre></td></tr></table></figure><p>The same for <code>void ctx.quadraticCurveTo(cpx, cpy, x, y);</code> and <code>addQuadCurve(to:controlPoint:)</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to get properties of JSValue in JavascriptCore</title>
      <link href="/blog/How-to-get-properties-of-JSValue-in-JavascriptCore/"/>
      <url>/blog/How-to-get-properties-of-JSValue-in-JavascriptCore/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/179" target="_blank" rel="noopener">#179</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rough = context.objectForKeyedSubscript(<span class="string">"myObject"</span>)</span><br><span class="line">myObject.toDictionary()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to run ffmpeg in macOS app</title>
      <link href="/blog/How-to-run-ffmpeg-in-macOS-app/"/>
      <url>/blog/How-to-run-ffmpeg-in-macOS-app/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/178" target="_blank" rel="noopener">#178</a></strong></p><p>Install ffmpeg, which installs ffprobe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure><p>Find location of installed ffmpeg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ffmpeg</span><br></pre></td></tr></table></figure><p>Add all executables to project</p><p>Get error</p><blockquote><p>unable to obtain file audio codec with ffprobe</p></blockquote><p>Run in verbose mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -v</span><br></pre></td></tr></table></figure><p>Get</p><blockquote><p>[debug] Encodings: locale US-ASCII, fs utf-8, out None, pref US-ASCII<br>[debug] Python version 2.7.10 (CPython) - Darwin-18.2.0-x86_64-i386-64bit<br>[debug] exe versions: ffmpeg present, ffprobe present</p></blockquote><p>Run version of ffprobe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe --version</span><br></pre></td></tr></table></figure><p>Get dylb not found</p><blockquote><p>dyld: Library not loaded: /usr/local/Cellar/ffmpeg/4.1.1/lib/libavdevice.58.dylib</p></blockquote><p>Similar issue <a href="https://techglimpse.com/ffprobe-command-error-linux-solution/" target="_blank" rel="noopener">https://techglimpse.com/ffprobe-command-error-linux-solution/</a><br>Read dylib path <a href="https://stackoverflow.com/questions/23777191/dyld-library-not-loaded-when-trying-to-run-fortran-executable-from-objective-c" target="_blank" rel="noopener">https://stackoverflow.com/questions/23777191/dyld-library-not-loaded-when-trying-to-run-fortran-executable-from-objective-c</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to get path to resource in running macOS app</title>
      <link href="/blog/How-to-get-path-to-resource-in-running-macOS-app/"/>
      <url>/blog/How-to-get-path-to-resource-in-running-macOS-app/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/177" target="_blank" rel="noopener">#177</a></strong></p><p>This is useful to refer to another executable in a running executable in <code>Process</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bundle</span>.main.path(forResource: <span class="string">"ffmpeg"</span>, ofType: <span class="string">""</span>)!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to run executable in macOS</title>
      <link href="/blog/How-to-run-executable-in-macOS/"/>
      <url>/blog/How-to-run-executable-in-macOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/176" target="_blank" rel="noopener">#176</a></strong></p><p>Enable executable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x executable</span><br></pre></td></tr></table></figure><p>Add executable file to target<br>Use <code>Process</code> with correct <code>launchPad</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TaskDelegate</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">task</span><span class="params">(task: Task, didOutput string: String)</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">taskDidComplete</span><span class="params">(task: Task)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">TaskDelegate?</span></span><br><span class="line">  <span class="keyword">let</span> process = <span class="type">Process</span>()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(arguments: [String])</span></span> &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.background.async &#123;</span><br><span class="line">      <span class="keyword">let</span> launchPath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"executable"</span>, ofType: <span class="string">""</span>)!</span><br><span class="line">      <span class="keyword">self</span>.run(launchPath: launchPath, arguments: arguments)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.background.async &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">self</span>.process.isRunning &#123;</span><br><span class="line">        <span class="keyword">self</span>.process.terminate()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MARK: - Helper</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(launchPath: String, arguments: [String])</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> process = <span class="type">Process</span>()</span><br><span class="line">    process.launchPath = launchPath</span><br><span class="line">    process.arguments = arguments</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> stdOut = <span class="type">Pipe</span>()</span><br><span class="line">    process.standardOutput = stdOut</span><br><span class="line">    <span class="keyword">let</span> stdErr = <span class="type">Pipe</span>()</span><br><span class="line">    process.standardError = stdErr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> handler =  &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (file: <span class="type">FileHandle!</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">let</span> data = file.availableData</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> output = <span class="type">NSString</span>(data: data, encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8.rawValue) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span>,</span><br><span class="line">        <span class="keyword">let</span> string = output.components(separatedBy: <span class="string">"\n"</span>).first <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        strongSelf.delegate?.task(task: strongSelf, didOutput: string)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stdErr.fileHandleForReading.readabilityHandler = handler</span><br><span class="line">    stdOut.fileHandleForReading.readabilityHandler = handler</span><br><span class="line"></span><br><span class="line">    process.terminationHandler = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (task: <span class="type">Process?</span>) -&gt; () <span class="keyword">in</span></span><br><span class="line">      stdErr.fileHandleForReading.readabilityHandler = <span class="literal">nil</span></span><br><span class="line">      stdOut.fileHandleForReading.readabilityHandler = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        strongSelf.delegate?.taskDidComplete(task: strongSelf)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    process.launch()</span><br><span class="line">    process.waitUntilExit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to print current directory using Process in macOS</title>
      <link href="/blog/How-to-print-current-directory-using-Process-in-macOS/"/>
      <url>/blog/How-to-print-current-directory-using-Process-in-macOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/175" target="_blank" rel="noopener">#175</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> process = <span class="type">Process</span>()</span><br><span class="line">process.launchPath = <span class="string">"/bin/pwd"</span></span><br><span class="line">process.arguments = []</span><br></pre></td></tr></table></figure><p>Should be the same as <code>FileManager.default.currentDirectoryPath</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to change NSTextField backgroundColor in NSPopover</title>
      <link href="/blog/How-to-change-NSTextField-backgroundColor-in-NSPopover/"/>
      <url>/blog/How-to-change-NSTextField-backgroundColor-in-NSPopover/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/174" target="_blank" rel="noopener">#174</a></strong></p><p>Disable vibrancy mode of NSPopover</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> popover = <span class="type">NSPopover</span>()</span><br><span class="line">popover.appearance = <span class="type">NSAppearance</span>(named: <span class="type">NSAppearance</span>.<span class="type">Name</span>.aqua)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make scrollable vertical NSStackView</title>
      <link href="/blog/How-to-make-scrollable-vertical-NSStackView/"/>
      <url>/blog/How-to-make-scrollable-vertical-NSStackView/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/173" target="_blank" rel="noopener">#173</a></strong></p><p><a href="https://stackoverflow.com/questions/10016475/create-nsscrollview-programmatically-in-an-nsview-cocoa/55219153#55219153" target="_blank" rel="noopener">https://stackoverflow.com/questions/10016475/create-nsscrollview-programmatically-in-an-nsview-cocoa/55219153#55219153</a></p><p>You might need to flip <code>NSClipView</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FlippedClipView</span>: <span class="title">NSClipView</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> isFlipped: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">  setupScrollView()</span><br><span class="line">  setupStackView()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupScrollView</span><span class="params">()</span></span> &#123;</span><br><span class="line">  view.addSubview(scrollView)</span><br><span class="line">  scrollView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">  scrollView.hasVerticalScroller = <span class="literal">true</span></span><br><span class="line">  scrollView.drawsBackground = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">    scrollView.leftAnchor.constraint(equalTo: view.leftAnchor),</span><br><span class="line">    scrollView.rightAnchor.constraint(equalTo: view.rightAnchor),</span><br><span class="line">    scrollView.topAnchor.constraint(equalTo: view.topAnchor),</span><br><span class="line">    scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -<span class="number">30</span>),</span><br><span class="line"></span><br><span class="line">    scrollView.heightAnchor.constraint(equalToConstant: <span class="number">400</span>)</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> clipView = <span class="type">FlippedClipView</span>()</span><br><span class="line">  clipView.drawsBackground = <span class="literal">false</span></span><br><span class="line">  scrollView.contentView = clipView</span><br><span class="line">  clipView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">  <span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">    clipView.leftAnchor.constraint(equalTo: scrollView.leftAnchor),</span><br><span class="line">    clipView.rightAnchor.constraint(equalTo: scrollView.rightAnchor),</span><br><span class="line">    clipView.topAnchor.constraint(equalTo: scrollView.topAnchor),</span><br><span class="line">    clipView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor)</span><br><span class="line">  ]</span><br><span class="line">  scrollView.documentView = stackView</span><br><span class="line"></span><br><span class="line">  stackView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">  <span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">    stackView.leftAnchor.constraint(equalTo: clipView.leftAnchor),</span><br><span class="line">    stackView.topAnchor.constraint(equalTo: clipView.topAnchor),</span><br><span class="line">    stackView.rightAnchor.constraint(equalTo: clipView.rightAnchor),</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> No need for bottomAnchor</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupStackView</span><span class="params">()</span></span> &#123;</span><br><span class="line">  stackView.orientation = .vertical</span><br><span class="line">  stackView.edgeInsets = <span class="type">NSEdgeInsets</span>(top: <span class="number">16</span>, <span class="keyword">left</span>: <span class="number">16</span>, bottom: <span class="number">16</span>, <span class="keyword">right</span>: <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">  <span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">    myRowView.heightAnchor.constraint(equalToConstant: <span class="number">40</span>)</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">  myRowView.onPress = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>?.doSomething()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stackView.addArrangedSubview(myRowView)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make view take up full width in vertical NSStackView</title>
      <link href="/blog/How-to-make-view-take-up-full-width-in-vertical-NSStackView/"/>
      <url>/blog/How-to-make-view-take-up-full-width-in-vertical-NSStackView/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/172" target="_blank" rel="noopener">#172</a></strong></p><p><a href="https://stackoverflow.com/questions/51644692/nsstackview-subviews-not-resizing-sub-stack-views/55220837#55220837" target="_blank" rel="noopener">https://stackoverflow.com/questions/51644692/nsstackview-subviews-not-resizing-sub-stack-views/55220837#55220837</a></p><p>If you want child view inside vertical NSStackView to fill its parent width, then <code>reduce contentCompressionResistancePriority</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">myChildView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">myChildView.setContentCompressionResistancePriority(</span><br><span class="line">  <span class="type">NSLayoutConstraint</span>.<span class="type">Priority</span>(rawValue: <span class="number">1</span>),</span><br><span class="line">  <span class="keyword">for</span>: .horizontal</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">  myChildView.heightAnchor.constraint(equalToConstant: <span class="number">50</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="type">NSAnimationContext</span>.runAnimationGroup(&#123;context <span class="keyword">in</span></span><br><span class="line">  context.duration = <span class="number">0.25</span></span><br><span class="line">  context.allowsImplicitAnimation = <span class="literal">true</span></span><br><span class="line">  stackView.insertArrangedSubview(myChildView, at: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  view.layoutSubtreeIfNeeded()</span><br><span class="line">&#125;, completionHandler: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to load top level view from xib in macOS</title>
      <link href="/blog/How-to-load-top-level-view-from-xib-in-macOS/"/>
      <url>/blog/How-to-load-top-level-view-from-xib-in-macOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/171" target="_blank" rel="noopener">#171</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> views: <span class="type">NSArray?</span></span><br><span class="line"><span class="type">NSNib</span>(nibNamed: <span class="type">NSNib</span>.<span class="type">Name</span>(<span class="string">"ProfileView"</span>), bundle: <span class="literal">nil</span>)?.instantiate(withOwner: <span class="literal">nil</span>, topLevelObjects: &amp;views)</span><br><span class="line"><span class="keyword">let</span> profileView = views!.compactMap(&#123; $<span class="number">0</span> <span class="keyword">as</span>? <span class="type">ProfileView</span> &#125;).first!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to fix MethodError - undefined method `real_path` with CocoaPods?</title>
      <link href="/blog/How-to-fix-MethodError-undefined-method-real_path-with-CocoaPods/"/>
      <url>/blog/How-to-fix-MethodError-undefined-method-real_path-with-CocoaPods/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/170" target="_blank" rel="noopener">#170</a></strong></p><p><img src="https://user-images.githubusercontent.com/2284279/53346190-d3622880-3916-11e9-9028-ad0a6a37b277.jpg" alt="abc"></p><p>I’m using cocoapods 1.6.0.beta.2 in a React Native apps and it has been working fine. The pods that I need is <code>Firebase</code> and <code>FacebookSDK</code>. Today after pod install, I got error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoMethodError - undefined method `real_path&apos; for nil:NilClass</span><br></pre></td></tr></table></figure><p>I then tried running <code>pod deintegrate</code> to start from scratch, but that command fails as well.</p><p>My next try is with <code>cocoapods 1.6.0</code> and <code>cocoapods 1.6.1</code> but the problem still persists.</p><p><code>undefined method</code> in Ruby means that we are calling a method on an object that is nil. I like to track down problems via reading code, but this error is very vague.</p><p>Looking thorough at the log, I see CocoaPods has done fetching dependencies, but fails at the integration step, so it must be something wrong with my project file.</p><p>Then I trace back commits to <code>project.pbxproj</code> to see if there’s anything wrong. It turns out that there was a commit that accidentally removes <code>Pods-MyApp Staging.release.xcconfig</code> from project. That also comes with removal of</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baseConfigurationReference = B7FC69316CC27F11022F8A82 /* Pods-MyApp Staging.release.xcconfig */;</span><br></pre></td></tr></table></figure><h2 id="CocoaPods-uses-xcconfig"><a href="#CocoaPods-uses-xcconfig" class="headerlink" title="CocoaPods uses xcconfig"></a>CocoaPods uses xcconfig</h2><p>As you know, CocoaPods uses <code>xcconfig</code> files to declare pod related information like  <code>FRAMEWORK_SEARCH_PATHS</code>, <code>OTHER_LDFLAGS</code> and other variables like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PODS_BUILD_DIR = $&#123;BUILD_DIR&#125;</span><br><span class="line">PODS_CONFIGURATION_BUILD_DIR = $&#123;PODS_BUILD_DIR&#125;/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)</span><br><span class="line">PODS_PODFILE_DIR_PATH = $&#123;SRCROOT&#125;/.</span><br><span class="line">PODS_ROOT = $&#123;SRCROOT&#125;/Pods</span><br></pre></td></tr></table></figure><p>And for a normal <code>pod install</code>, CocoaPods adds some <code>xcconfig</code> files to your project, and the path is <code>Pods/Target Support Files/Pods-DeepDiffDemo</code>. There will always be <code>debug.xcconfig</code> and <code>release.xcconfig</code> for each of your project target.</p><img width="1678" alt="xcconfig" src="https://user-images.githubusercontent.com/2284279/53345363-0dcac600-3915-11e9-975f-e6a7207912d0.png"><p>If your project MyApp has a production target called <code>MyApp Production</code> and <code>MyApp Staging</code>, then you should have these files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pods-MyApp Staging.debug.xcconfig</span><br><span class="line">Pods-MyApp Staging.release.xcconfig</span><br><span class="line">Pods-MyApp Production.debug.xcconfig</span><br><span class="line">Pods-MyApp Production.release.xcconfig</span><br></pre></td></tr></table></figure><p>These are added to projects but not checked to any targets. Just like plist, you don’t need to add xcconfig files to target.</p><p>If you go to project Info page, you will see that these xcconfig files are selected</p><img width="824" alt="project" src="https://user-images.githubusercontent.com/2284279/53345592-93e70c80-3915-11e9-9826-3d1b9f30b900.png"><h2 id="Missing-xcconfig"><a href="#Missing-xcconfig" class="headerlink" title="Missing xcconfig"></a>Missing xcconfig</h2><p>In my case, <code>Pods-MyApp Staging.release.xcconfig</code> was somehow missing from project, hence all pod commands fail.</p><p>The fix is to re-add that file and select that xcconfig in project Info page</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Testimonial</title>
      <link href="/blog/Testimonial/"/>
      <url>/blog/Testimonial/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/169" target="_blank" rel="noopener">#169</a></strong></p><p><a href="https://medium.com/@kylpo/wow-i-learned-so-much-from-this-article-thank-you-595f29077633" target="_blank" rel="noopener">https://medium.com/@kylpo/wow-i-learned-so-much-from-this-article-thank-you-595f29077633</a></p><img width="534" alt="xcode" src="https://user-images.githubusercontent.com/2284279/50170685-ca3e5500-02f0-11e9-81fe-86aa08207735.png"><p><a href="https://stackoverflow.com/questions/34990175/test-target-x-encountered-an-error-early-unexpected-exit-operation-never-finis/36343395?noredirect=1#comment94467666_36343395" target="_blank" rel="noopener">https://stackoverflow.com/questions/34990175/test-target-x-encountered-an-error-early-unexpected-exit-operation-never-finis/36343395?noredirect=1#comment94467666_36343395</a></p><img width="690" alt="test" src="https://user-images.githubusercontent.com/2284279/50170737-e5a96000-02f0-11e9-8608-ee434869e232.png"><p><a href="https://github.com/onmyway133/notes/issues/2" target="_blank" rel="noopener">https://github.com/onmyway133/notes/issues/2</a></p><img width="581" alt="rotation" src="https://user-images.githubusercontent.com/2284279/50170776-feb21100-02f0-11e9-9bd0-e88703c84abf.png"><p><a href="https://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects/26034755#26034755" target="_blank" rel="noopener">https://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects/26034755#26034755</a></p><img width="695" alt="example" src="https://user-images.githubusercontent.com/2284279/50208156-c0f4cd00-0370-11e9-8926-05cf66f39bc5.png"><p><a href="https://stackoverflow.com/a/46122458/1418457" target="_blank" rel="noopener">https://stackoverflow.com/a/46122458/1418457</a></p><img width="719" alt="push" src="https://user-images.githubusercontent.com/2284279/52259951-ad072980-2924-11e9-8756-ada74e1f739e.png">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Questions</title>
      <link href="/blog/Questions/"/>
      <url>/blog/Questions/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/168" target="_blank" rel="noopener">#168</a></strong></p><ul><li><a href="https://dev.to/onmyway133/what-is-the-difference-between-a-front-end-dev-from-stanford-and-from-bootcamp--5c10" target="_blank" rel="noopener">What is the difference between a front end dev from Stanford and from bootcamp?</a></li><li><a href="https://news.ycombinator.com/item?id=13857327" target="_blank" rel="noopener">Ask HN: What if there is no inheritance?</a></li><li><a href="https://www.quora.com/What-if-there-is-no-inheritance-so-that-everybody-has-the-same-start-does-that-make-life-fairer" target="_blank" rel="noopener">What if there is no inheritance, so that everybody has the same start, does that make life fairer?</a></li><li><a href="https://dev.to/onmyway133/is-it-true-that-programming-is-easy-to-do-3l51" target="_blank" rel="noopener">Is it true that programming is easy to do?</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Understanding weak and strong in Objective C</title>
      <link href="/blog/Understanding-weak-and-strong-in-Objective-C/"/>
      <url>/blog/Understanding-weak-and-strong-in-Objective-C/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/164" target="_blank" rel="noopener">#164</a></strong></p><p>From my own blog post <a href="https://github.com/Fantageek/fantageek.github.io/blob/source/source/_posts/2014-06-27-understanding-weak-self-and-strong-self.markdown" target="_blank" rel="noopener">https://github.com/Fantageek/fantageek.github.io/blob/source/source/_posts/2014-06-27-understanding-weak-self-and-strong-self.markdown</a></p><hr><p>Blocks are wonderful. To avoid retain cycle you often see the weakSelf - strongSelf dance like this</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> __typeof__(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">        __typeof__(<span class="keyword">self</span>) strongSelf = weakSelf;</span><br><span class="line">        [strongSelf doSomething];</span><br><span class="line">        [strongSelf doSomethingElse];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="When-block-is-created"><a href="#When-block-is-created" class="headerlink" title="When block is created"></a>When block is created</h2><h4 id="Block-is-object-when-it-is-copied"><a href="#Block-is-object-when-it-is-copied" class="headerlink" title="Block is object when it is copied"></a>Block is object when it is copied</h4><p>Blocks are created on the stack and will go away when their stack frame returns. While on the stack, a block has no effect on the storage or lifetime of anything it accesses.</p><p>If blocks need to exist after the stack frame returns, they can be copied to the heap and this action is an explicit operation. This way, a block will gain reference-counting as all objects in Cocoa. When they are copied, they take their captured scope with them, retaining any objects they refer</p><h4 id="Blocks-can-capture-values-from-the-enclosing-scope"><a href="#Blocks-can-capture-values-from-the-enclosing-scope" class="headerlink" title="Blocks can capture values from the enclosing scope"></a>Blocks can capture values from the enclosing scope</h4><p>As well as containing executable code, a block also has the ability to capture state from its enclosing scope. Note that block captures the variable along with its decorators (i.e. weak qualifier),</p><p>=&gt; This explains why you need to declare self as __weak</p><h2 id="When-block-is-executed"><a href="#When-block-is-executed" class="headerlink" title="When block is executed"></a>When block is executed</h2><p>When block is executed, it is possible for weakSelf to be non-nil for the first method (doSomething), but not for the second (doSomethingElse)</p><p>You may think, at first, this is a trick to use self inside the block avoiding the retain cycle warning. This is not the case. The strong reference to self is created at block execution time while using self in the block is evaluated at block declaration time, thus retaining the object.</p><p>For best practice, however, you should create a strong reference of your object using the weak one. This won’t create a retain cycle either as the strong pointer within the block will only exist until the block completes (it’s only scope is the block itself).</p><p>=&gt; This explains why you need to declare another __strong self</p><h2 id="More-explanation"><a href="#More-explanation" class="headerlink" title="More explanation"></a>More explanation</h2><p>This is my answer to reader Nikita</p><ol><li><p>As many people point out, “Blocks are created on the stack and will go away when their stack frame returns. While on the stack, a block has no effect on the storage or lifetime of anything it accesses.”<br>Even if block (declared on the stack) increase reference count to all the object it accesses, this would be useless, because this block will be discard when function returns</p></li><li><p>When block are copied (You see that people usually declare property (copy) for block), it will increase reference count to all the objects it accesses.</p></li></ol><p>Why? because block are mean to be executed at a later time, so it need to keep strong reference to all the object it access. Block can be executed MANY TIMES, so IT WON’T RELEASE self AFTER this ran.</p><p>When you nil out the block, it will be dealloc, hence it will decrease the reference count to all the objects it access.</p><p>AFNetworking nil out the block after it is called, so you don’t have to use weakself inside block <a href="http://www.fantageek.com/1376/afnetworking-gotcha-2/" target="_blank" rel="noopener">http://www.fantageek.com/1376/afnetworking-gotcha-2/</a></p><ol><li>So there are cases when you don’t have to use weakself inside block<br>a. Make sure the block is not copied, you simply declare and run it<br>b. Make sure the block is nil out after it is called</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://dhoerl.wordpress.com/2013/04/23/i-finally-figured-out-weakself-and-strongself/" target="_blank" rel="noopener">I finally figured out weakSelf and strongSelf</a></li><li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html" target="_blank" rel="noopener">Working with Blocks</a></li><li><a href="http://albertodebortoli.github.io/blog/2013/08/03/objective-c-blocks-caveat/" target="_blank" rel="noopener">Objective-C Blocks Caveat</a></li><li><a href="http://albertodebortoli.github.io/blog/2013/04/21/objective-c-blocks-under-the-hood/" target="_blank" rel="noopener">Objective-C Blocks Under the Hood</a></li><li><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/" target="_blank" rel="noopener">A look inside blocks: Episode 1</a></li><li><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/" target="_blank" rel="noopener">A look inside blocks: Episode 2</a></li><li><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/" target="_blank" rel="noopener">A look inside blocks: Episode 3</a></li><li><a href="http://nilsou.com/blog/2013/08/21/objective-c-blocks-syntax/" target="_blank" rel="noopener">From C Declarators to Objective-C Blocks Syntax</a></li><li><a href="http://arigrant.com/blog/2014/1/18/the-syntax-of-objective-c-blocks" target="_blank" rel="noopener">The Syntax of Objective-C Blocks</a></li><li><a href="http://stackoverflow.com/a/17105368/1418457" target="_blank" rel="noopener">Referring to weak self inside a nested block</a></li><li><a href="http://blackpixel.com/blog/2014/03/capturing-myself.html" target="_blank" rel="noopener">Capturing My(self)</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Interesting, how did you managed to plug GitHub issues into the dev.to platform</title>
      <link href="/blog/Interesting-how-did-you-managed-to-plug-GitHub-issues-into-the-dev.to-platform/"/>
      <url>/blog/Interesting-how-did-you-managed-to-plug-GitHub-issues-into-the-dev.to-platform/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/163" target="_blank" rel="noopener">#163</a></strong></p><p>I’ve found your post <a href="https://dev.to/onmyway133/changing-electron-app-icon" target="_blank" rel="noopener">https://dev.to/onmyway133/changing-electron-app-icon</a> and fist thought there is some static site generator which uses GitHub’s issues as a datasource.</p><p>Am I right?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Trying IBM Watson</title>
      <link href="/blog/Trying-IBM-Watson/"/>
      <url>/blog/Trying-IBM-Watson/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/162" target="_blank" rel="noopener">#162</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Request and Task</title>
      <link href="/blog/Request-and-Task/"/>
      <url>/blog/Request-and-Task/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/161" target="_blank" rel="noopener">#161</a></strong></p><p><a href="https://developer.apple.com/documentation/foundation/urlsession" target="_blank" rel="noopener">https://developer.apple.com/documentation/foundation/urlsession</a><br><a href="https://developer.apple.com/documentation/speech" target="_blank" rel="noopener">https://developer.apple.com/documentation/speech</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Colocate test files</title>
      <link href="/blog/Learning-from-Open-Source-Colocate-test-files/"/>
      <url>/blog/Learning-from-Open-Source-Colocate-test-files/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/160" target="_blank" rel="noopener">#160</a></strong></p><ul><li><a href="https://kickstarter.engineering/why-you-should-co-locate-your-xcode-tests-c69f79211411" target="_blank" rel="noopener">Why you should co-locate your Xcode tests</a></li><li>Files</li></ul><p><a href="https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/ViewModels/RootViewModel.swift" target="_blank" rel="noopener">https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/ViewModels/RootViewModel.swift</a><br><a href="https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/ViewModels/RootViewModelTests.swift" target="_blank" rel="noopener">https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/ViewModels/RootViewModelTests.swift</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ARKit and CoreLocation</title>
      <link href="/blog/ARKit-and-CoreLocation/"/>
      <url>/blog/ARKit-and-CoreLocation/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/159" target="_blank" rel="noopener">#159</a></strong></p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Using CircleCI 2.0</title>
      <link href="/blog/Using-CircleCI-2.0/"/>
      <url>/blog/Using-CircleCI-2.0/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/158" target="_blank" rel="noopener">#158</a></strong></p><p>We ‘ve been using CircleCI for many of our open source projects. Since the end of last year 2017, version 2.0 began to come out, and we think it’s good time to try it now together with <a href="https://swift.org/blog/swift-4-1-released/" target="_blank" rel="noopener">Swift 4.1</a> and <a href="https://developer.apple.com/news/?id=01242018d" target="_blank" rel="noopener">Xcode 9.3</a></p><p>The problem with <a href="https://circleci.com/docs/2.0/" target="_blank" rel="noopener">version 2.0</a> is it’s so powerful and has lots of cool new features like jobs and workflows, but that requires going to documentation for how to <a href="https://circleci.com/docs/2.0/migrating-from-1-2/" target="_blank" rel="noopener">migrate</a> configuration file, especially <a href="https://circleci.com/docs/2.0/migrating-from-1-2/#search-and-replace-deprecated-20-keys" target="_blank" rel="noopener">Search and Replace Deprecated 2.0 Keys</a></p><h3 id="Creating-config-yml"><a href="#Creating-config-yml" class="headerlink" title="Creating config.yml"></a>Creating <code>config.yml</code></h3><p>The first thing is to create a new <code>config.yml</code> inside folder <code>.circleci</code></p><blockquote><p>Copy your existing circle.yml file into a new directory called .circleci at the root of your project repository.</p></blockquote><p>Next is to declare version and jobs</p><blockquote><p>Add version: 2 to the top of the .circleci/config.yml file.</p></blockquote><h3 id="Checking-xcodebuild"><a href="#Checking-xcodebuild" class="headerlink" title="Checking xcodebuild"></a>Checking <code>xcodebuild</code></h3><p>For simple cases, we just use <code>xcodebuild</code> to build and test the project, so it’s good to try it locally to avoid lots of trial commits to trigger CircleCI. You can take a look at this PR <a href="https://github.com/hyperoslo/Cheers/pull/20" target="_blank" rel="noopener">https://github.com/hyperoslo/Cheers/pull/20</a></p><p>Before our configuration file for version 1.0 looks like this</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">set</span> -o pipefail &amp;&amp; xcodebuild -project Cheers.xcodeproj -scheme <span class="string">"Cheers-iOS"</span> -sdk iphonesimulator -destination <span class="string">'platform=iOS Simulator,name=iPhone 8,OS=11.0'</span> -enableCodeCoverage YES <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Now we should put <code>pipefail</code> inside <code>shell</code>, follow <a href="https://github.com/CircleCI-Public/circleci-demo-ios/blob/master/.circleci/config.yml" target="_blank" rel="noopener">https://github.com/CircleCI-Public/circleci-demo-ios/blob/master/.circleci/config.yml</a></p><blockquote><p>shell: /bin/bash –login -o pipefail</p></blockquote><p>Now is the actual trying <code>xcodebuild</code>, after many failures due to <code>destination</code> param</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild: error: Unable to find a destination matching the provided destination specifier:</span><br><span class="line">&#123; platform:iOS Simulator, OS:11.3 &#125;</span><br><span class="line"></span><br><span class="line">Missing required device specifier option.</span><br><span class="line">The device type “iOS Simulator” requires that either “name” or “id” be specified.</span><br><span class="line">Please supply either “name” or “id”.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild: error: option &apos;Destination&apos; requires at least one parameter of the form &apos;key=value&apos;</span><br></pre></td></tr></table></figure><p>I found this to work, run this in the same folder as your <code>xcodeproj</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -project Cheers.xcodeproj -scheme <span class="string">"Cheers-iOS"</span> -sdk iphonesimulator -destination <span class="string">"platform=iOS Simulator,OS=11.3,name=iPhone X"</span> -enableCodeCoverage YES <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="Adding-workflow"><a href="#Adding-workflow" class="headerlink" title="Adding workflow"></a>Adding workflow</h3><p>Version 2.0 introduces <a href="https://circleci.com/docs/2.0/workflows/" target="_blank" rel="noopener">workflow</a> which helps organising jobs</p><blockquote><p>A workflow is a set of rules for defining a collection of jobs and their run order. Workflows support complex job orchestration using a simple set of configuration keys to help you resolve failures sooner.</p></blockquote><p>For our simple use cases, we add this workflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">workflows:</span><br><span class="line">  version: 2</span><br><span class="line">  build-and-test:</span><br><span class="line">    jobs:</span><br><span class="line">      - build-and-test</span><br></pre></td></tr></table></figure><p>Then the final looks like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: 2</span><br><span class="line">jobs:</span><br><span class="line">  build-and-test:</span><br><span class="line">    macos:</span><br><span class="line">      xcode: &quot;9.3.0&quot;</span><br><span class="line">    shell: /bin/bash --login -o pipefail</span><br><span class="line">    steps:</span><br><span class="line">      - checkout</span><br><span class="line">      - run: xcodebuild -project Cheers.xcodeproj -scheme &quot;Cheers-iOS&quot; -sdk iphonesimulator -destination &quot;platform=iOS Simulator,OS=11.3,name=iPhone X&quot; -enableCodeCoverage YES test</span><br><span class="line"></span><br><span class="line">workflows:</span><br><span class="line">  version: 2</span><br><span class="line">  primary:</span><br><span class="line">    jobs:</span><br><span class="line">      build-and-test</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jitter buffer in VoIP</title>
      <link href="/blog/Jitter-buffer-in-VoIP/"/>
      <url>/blog/Jitter-buffer-in-VoIP/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/157" target="_blank" rel="noopener">#157</a></strong></p><p>This post was from long time ago when I did <a href="http://pjsip.org/" target="_blank" rel="noopener">pjsip</a></p><hr><p>A jitter buffer temporarily stores arriving packets in order to minimize delay variations. If packets arrive too late then they are discarded. A jitter buffer may be mis-configured and be either too large or too small.  </p><h3 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h3><p>If a jitter buffer is too small then an excessive number of packets may be discarded, which can lead to call quality degradation. </p><p>Lower settings cause less delay in the meeting, but meetings with lower settings are more susceptible to jitter effects caused by network congestion. Less data is buffered, increasing the likelihood that delayed or lost packets will produce a jitter effect in the media stream.</p><p>If a jitter buffer is too large then the additional delay can lead to conversational difficulty.</p><p>Higher settings are more effective at reducing jitter effects. With higher settings, more data is buffered, which allows more time for delayed packets to arrive at the client. However, higher settings also result in more delay (or latency) in the meeting. A user who is speaking will not be heard immediately by the other meeting participants. The delay in the meeting increases with the amount of time that data is held in the buffer.</p><h3 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h3><p>A typical jitter buffer configuration is 30mS to 50mS in size. In the case of   an adaptive jitter buffer then the maximum size may be set to 100-200mS. Note that if the jitter buffer size exceeds 100mS then the additional delay introduced can lead to conversational difficulty.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><p><a href="http://publib.boulder.ibm.com/infocenter/sametime/v7r5m1/index.jsp?topic=/com.ibm.help.sametime.admin.doc/st_adm_avserv_audframepacket_t.html" target="_blank" rel="noopener">lib.boulder.ibm.com/infocenter/sametime</a>  </p></li><li><p><a href="http://www.voiptroubleshooter.com/problems/jitterbuffer.html" target="_blank" rel="noopener">http://www.voiptroubleshooter.com</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Some Windows Phone 7 development tips</title>
      <link href="/blog/Some-Windows-Phone-7-development-tips/"/>
      <url>/blog/Some-Windows-Phone-7-development-tips/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/156" target="_blank" rel="noopener">#156</a></strong></p><p>This post was from long time ago when I did Windows Phone 7</p><hr><p>Welcome back, today I will start writing all stuff, all the secret I ‘ve revealed when developing for Windows Phone 7.  </p><ol><li><p>When setting <code>UIElement</code>‘s <code>Visibility</code> to <code>Collapsed</code>, the OS set its <code>Height</code> to 0. So if you need to have a Height of 0, simply set <code>Height=&quot;0&quot;</code>, which is faster in term of show time.  </p></li><li><p>When clearing data source, <code>ListBox</code> which uses <code>VirtualizingStackPanel</code> does not rememeber its last view, whereas <code>StackPanel</code> does  </p></li><li><p><code>ListBox</code> which is inside <code>ScrollViewer</code> will lose its UI virtualization, even if you use <code>VirtualizingStackPanel</code>  </p></li><li><p>Using <code>GestureListener</code> incorrectly will cause other <code>UIElement</code> to not work, i.e <code>Slider</code>, …  </p></li><li><p><code>AdControl</code>, <code>ContextMenu</code> may be a source of memory leak.  </p></li><li><p>Panorama control still enable swiping when there is only 1 <code>PanoramaItem</code>, whereas <code>Pivot</code> does not.  </p></li><li><p>Pivot control will load the current <code>PivotItem</code>, as well as its direct left and right <code>PivotItem</code>.  </p></li><li><p>Sometimes SIP keyboard does not show up, check your phone for physical keyboard problem.  </p></li><li><p>There is no way to rate a Song for 3rd app  </p></li><li><p>When emulator rendering has overlap issue, the workaround is to set <code>LayoutRoot</code> ‘s <code>Background</code> to a solid color  </p></li><li><p>Supposed you’re using <code>ObservableCollection</code> bindSource as binding source for <code>ListBox</code>. When adding items to bindSource quickly, <code>ListBox</code> seems to suppress creating <code>ListBoxItem</code> until all items are added. It is <a href="http://blogs.msdn.com/b/rohantha/archive/2010/09/12/silverlight-wp7-list-scroll-with-items-as-image-description-from-web-bing-image-search.aspx" target="_blank" rel="noopener">advised to add items in batch</a>  </p></li><li><p><code>WebBrowser</code> control does not have scroll bar  </p></li><li><p>Using <code>StoryBoard</code> when ever possible, because all of its animation is done in Compositor Thread, which leverages GPU  </p></li><li><p>Use <code>ProgressIndicator</code> for best performance and UX familiarity  </p></li><li><p>Collapse unimportant <code>UIElement</code> to decrease load time, and show them when Page is completely loaded.  </p></li><li><p>Always unsubscribe to event source that  can continue to run when the Page is navigated from, because that may cause memory leak. Examples are timer, <code>BackgroundAudioPlayer.PlayeStateChanged</code>, …  </p></li><li><p>Using file is much faster than Local Database  </p></li><li><p>Remember the limit 260 characters of query string  </p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to calculate packet size in VoIP</title>
      <link href="/blog/How-to-calculate-packet-size-in-VoIP/"/>
      <url>/blog/How-to-calculate-packet-size-in-VoIP/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/155" target="_blank" rel="noopener">#155</a></strong></p><p>As you have probably observed in your studies, there is a determined method for calculating VoIP packet sizes. The packet size depends on many different variables, so there is no great answer for an “average” packet size – average depends on the environment. Just as an example, if you currently have VoIP running within a LAN and want to provision a new WAN so you can use VoIP to another site, knowing how big your VoIP packets are on the LAN won’t help. See below for a VoIP packet size calculation for a typical LAN, which will get you started.</p><h3 id="Packet-size"><a href="#Packet-size" class="headerlink" title="Packet size"></a>Packet size</h3><p>The general formula for VoIP packet size is this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Frame overhead + Encapsulation overhead + IP overhead + Voice payload.</span><br></pre></td></tr></table></figure><p>Let’s say the packet is going across our LAN, so right now the frame overhead is 18 Bytes, for Ethernet II. (This size would change later if the packet crosses a trunk with 802.1Q tagging or ISL encapsulation, or is destined for the WAN, where a different link layer framing will probably be in use.)</p><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>Encapsulation overhead would include things like IPSec tunnels for security. Suppose we are not encapsulating this voice packet, so there is no overhead here.</p><p>“IP overhead” has overhead occurring at layer 3 and above, so for SIP phones this means IP (20 Bytes), UDP (8 Bytes), and RTP (12 Bytes). This is a total of 40 Bytes of IP overhead.</p><p>Lastly, you must calculate the size of the actual voice payload. Suppose we use the G.711 codec, which gives us a codec bandwidth of 64kbps. Also suppose our phones have a packetisation period of 20ms (meaning 20ms worth of voice goes into every packet). With these two numbers, we can figure out the size of the voice payload. Since one second of voice contains 64 kilobits of data (“64 kbps”), it is easy to calculate how many bits</p><p>Find the amount of Bytes per payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">64000 bits * .02 seconds = 1280 bits of voice per payload  </span><br><span class="line">1280 bits / 8 bits per byte = 160 Bytes of voice per payload</span><br></pre></td></tr></table></figure><p>The total overhead is 58 Bytes (18 + 40)<br>The total VoIP packet size is 218 Bytes (160 + 58 )</p><p>In the interest of full disclosure, it is easy to get a bit rate per second from here; just convert 218 Bytes into bits and multiply by the packetization rate (which is the inverse of your packetization period, in this case 50 packets per second). The bit rate for ONE stream of this voice is 87.2kbps… we hope the user isn’t just talking to himself, so double that for an actual phone conversation.</p><p>There are lots of other little things, like VAD and various header compressions, that you may need to factor into these calculations as well. As you can see, any one of these many things being off will give you a different answer, so knowing how to go about the entire process is important.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="www.techexams.net">www.techexams.net</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UITableViewCell and Model</title>
      <link href="/blog/UITableViewCell-and-Model/"/>
      <url>/blog/UITableViewCell-and-Model/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/154" target="_blank" rel="noopener">#154</a></strong></p><p>The most common UI element in iOS is <code>UITableView</code>, and the most common task is to display the UITableViewCell using the model.</p><p>Although the title specifies UITableViewCell, but the problem involves other views (UICollectionView, custom view, …) as well</p><p>There are many debates about this, so here I want to make a summary, all in my opinion</p><h3 id="It-started-with"><a href="#It-started-with" class="headerlink" title="It started with"></a>It started with</h3><p><a href="http://inessential.com/2012/12/31/uitableviewcell_is_not_a_controller" target="_blank" rel="noopener">UITableViewCell Is Not a Controller</a><br>This article follows strict MVC and states we should not pass model object to cell and let cell manipulate directly on the model. He shows several examples that point out this job is not suitable for the cell. Instead this job should be done on the Controller (UIViewController, UITableViewDataSource, …)</p><h3 id="Category-for-simple-case"><a href="#Category-for-simple-case" class="headerlink" title="Category for simple case"></a>Category for simple case</h3><p><a href="http://www.sebastianrehnby.com/blog/2013/01/01/skinnier-controllers-using-view-categories/" target="_blank" rel="noopener">Skinnier Controllers Using View Categories</a><br>This article states that we should keep ViewController skinnier by transfering the job (mapping model object to cell) to the cell category</p><h3 id="Using-subclassing"><a href="#Using-subclassing" class="headerlink" title="Using subclassing"></a>Using subclassing</h3><p><a href="http://corporationunknown.com/blog/2013/01/01/uitableviewcell-is-not-a-controller-but/" target="_blank" rel="noopener">UITableViewCell Is Not a Controller, But…</a><br>This articles explains the beauty of subclassing to take advantage of Polymorphism. In the theming example he gives, we see that Controller ‘s job now is to select the correct cell subclass, and the subclass ‘s job is to know how to use the model<br>“When a UITableViewCell subclass accepts a model object parameter and updates its constituent subviews as I have described, it is behaving as a data transformer, not a controller”</p><h3 id="Model-Presenter"><a href="#Model-Presenter" class="headerlink" title="Model Presenter"></a>Model Presenter</h3><p><a href="https://medium.com/ios-apprentice/model-view-controller-presenter-8bb4149fa5ef" target="_blank" rel="noopener">Model View Controller Presenter</a><br>This article shows that using subclassing and category will have duplication implementation when you have more cells and models. After several optimizations, he finally gets to the Model Presenter, which is the center object who knows how to represent the model in different view.<br>“This is an object that knows how to represent every aspect of a certain model”</p><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p><a href="http://cocoamanifest.net/articles/2013/10/mvc-mvvm-frp-and-building-bridges.html" target="_blank" rel="noopener">MVC, MVVM, FRP, And Building Bridges</a><br>This article explains MVVM but it touches our problem directly. The problem with cell and model actually is</p><ol><li>How to map the model to the cell</li><li>Who will do this job? The cell, Controller or another Model Mapping object ?</li></ol><p>The ViewModel is actually who does this work, which is to transform the model to something the view can easily use</p><p>“A table view data source is none of these things. It’s purely a layer between the table view and the model. The model defines lists of things, but the table view data source transform those lists into sections and rows. It also returns the actual table view cells, but that’s not what I’m focusing on here. The key is its role as a middle-tier data transformer.”</p><h3 id="Do-we-access-the-cell-‘s-subviews"><a href="#Do-we-access-the-cell-‘s-subviews" class="headerlink" title="Do we access the cell ‘s subviews"></a>Do we access the cell ‘s subviews</h3><p><a href="http://inessential.com/2013/01/02/paul_on_uitableviewcell" target="_blank" rel="noopener">Paul on UITableViewCell</a><br>Brent follows with another post explaining how cell ‘s subviews should not be accessed outside of the cell</p><h3 id="Data-Source"><a href="#Data-Source" class="headerlink" title="Data Source"></a>Data Source</h3><p><a href="http://www.objc.io/issue-1/table-views.html" target="_blank" rel="noopener">Clean table view code</a><br>This article deals with Bridging the Gap Between Model Objects and Cells.<br>“At some point we have to hand over the data we want to display into the view layer. Since we still want to maintain a clear separation between the model and the view, we often offload this task to the table view’s data source. This kind of code clutters the data source with specific knowledge about the design of the cell. We are better off factoring this out into a category of the cell class”</p><p>This together with <a href="http://www.objc.io/issue-1/lighter-view-controllers.html" target="_blank" rel="noopener">Lighter View Controllers</a> shows a practical example that deals with most cases</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="http://cocoamanifest.net/articles/2013/01/should-uitableviewcells-know-about-model-objects.html" target="_blank" rel="noopener">Should UITableViewCells Know About Model Objects?</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Netcut and ARP</title>
      <link href="/blog/Netcut-and-ARP/"/>
      <url>/blog/Netcut-and-ARP/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/153" target="_blank" rel="noopener">#153</a></strong></p><p>Bad people can use <a href="http://www.arcai.com/netcut/" target="_blank" rel="noopener">Netcut</a> to limit other ‘s internet access in same network</p><h3 id="How-does-Netcut-work"><a href="#How-does-Netcut-work" class="headerlink" title="How does Netcut work"></a>How does Netcut work</h3><p>Netcut uses attacking technique called ARP Spoofing.</p><p>ARP (Address Resolution Protocol) is a link layer procotol, it is used for resolving network layer address (IP) into link layer address (MAC).  </p><p>When we want to send IP packet to another host (a computer in the same LAN, or the Gateway), we must know the destination IP address. In order for the packet to reach the destination, the destination IP address must be converted to the corresponding MAC address, so the transmission can be processed in the data link layer. To setup this mapping IP-MAC in the ARP table, we must first send ARP request as broadcast one to the LAN. In the happy case, the one with the IP in the ARP request will reply us with his MAC address.</p><p>Unfortunately, ARP is a stateless protocol. This means we continue to accept ARP replies and overwrite the old ones, even they have not expired yet. Worse, ARP does not define any authentication method to check whether the replies come from the trusted one (the one we want to receive the replies). These offer chances for the attacker to perform ARP Spoofing.</p><h3 id="The-theory-behind-ARP-Spoofing"><a href="#The-theory-behind-ARP-Spoofing" class="headerlink" title="The theory behind ARP Spoofing"></a>The theory behind ARP Spoofing</h3><p>From the machine in the LAN, the attacker associate his MAC address and IP address of the target host (usually the Gateway), so that any traffic sent to that target host will come to the attacker. Here the attacker can decide whether to modify the packet, send or not.</p><h3 id="There-are-3-types-of-ARP-Spoofing"><a href="#There-are-3-types-of-ARP-Spoofing" class="headerlink" title="There are 3 types of ARP Spoofing"></a>There are 3 types of ARP Spoofing</h3><ol><li>Spoof the host computer  </li><li>Spoof the Gateway  </li><li>Spoof both the host computer and the Gateway</li></ol><h3 id="To-see-the-ARP-table"><a href="#To-see-the-ARP-table" class="headerlink" title="To see the ARP table"></a>To see the ARP table</h3><p>Open Command line (Windows) or Terminal (Mac OSX), and type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><p>This will list the MAC address associated with a specific IP. Note that some mappings maybe wrong due to ARP Spoofing</p><h3 id="How-to-prevent-against-this"><a href="#How-to-prevent-against-this" class="headerlink" title="How to prevent against this ?"></a>How to prevent against this ?</h3><p>To prevent spoofing our computer, we can use softwares (search for Anti Netcut, Anti ARP spoofing, …) or set the static ARP ourselves. In fact, those softwares are based on setting static ARP. This way we set the static mapping IP-MAC for a specific host (computer or Gateway), and the OS definitely ignores all ARP replies for that IP.</p><p>Example of static ARP mapping associated with the Gateway, performed on the computer host</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.1 B4-B3-62-7C-CE-55</span><br></pre></td></tr></table></figure><p>Here 192.168.1.1 and B4-B3-62-7C-CE-55 are the Gateway’s IP and MAC address</p><p>To prevent spoofing the Gateway, we must set static ARP on that Gateway. Go to the Gateway/Router interface, in its ARP setting, fill in the mapping IP-MAC for a specific host  </p><p>Look for that Gateway manual or the related guide on how to perform this. This is devices dependent-method, but the theory remains the same.</p><p>Example of static ARP mapping associated with the computer host, performed on the Gateway</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.2 64-70-02-B2-9B-E1</span><br></pre></td></tr></table></figure><p>Here 192.168.1.2 and 64-70-02-B2-9B-E1 are the machine host ‘s IP and MAC address. The machine host can be any computer in the LAN</p><h3 id="How-to-set-static-ARP"><a href="#How-to-set-static-ARP" class="headerlink" title="How to set static ARP"></a>How to set static ARP</h3><p>Proposed that  </p><p>192.168.1.1 The destination host ‘s IP  </p><p>B4-B3-62-7C-CE-55 The destination host ‘s MAC  </p><p>Local Area Connection Our network interface name</p><p>Open Terminal (Mac OSX)</p><p>To delete specific mapping</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arp -d 192.168.1.1</span><br></pre></td></tr></table></figure><p>To set specific mapping</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arp -s 192.168.1.1 B4-B3-62-7C-CE-55</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="http://en.wikipedia.org/wiki/ARP_spoofing" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/ARP_spoofing</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Make your own sliding menu on Android tutorial – Part 2</title>
      <link href="/blog/Make-your-own-sliding-menu-on-Android-tutorial-Part-2/"/>
      <url>/blog/Make-your-own-sliding-menu-on-Android-tutorial-Part-2/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/152" target="_blank" rel="noopener">#152</a></strong></p><p>This is the part 2 of the tutorial. If you forget, here is the link to <a href="https://github.com/onmyway133/blog/issues/151" target="_blank" rel="noopener">part 1</a>.</p><p>Link to <a href="https://github.com/onmyway133/slidingmenu" target="_blank" rel="noopener">Github</a></p><p>In the first part, we learn about the idea, the structure of the project and how MainActivity uses the MainLayout. Now we learn how to actually implement the MainLayout</p><h2 id="DISPLAY-MENU-AND-CONTENT-VIEW"><a href="#DISPLAY-MENU-AND-CONTENT-VIEW" class="headerlink" title="DISPLAY MENU AND CONTENT VIEW"></a>DISPLAY MENU AND CONTENT VIEW</h2><p>First we have MainLayout as a subclass of LinearLayout</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span></span></span><br></pre></td></tr></table></figure><p>We then need declare the constructors</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>and override some useful methods</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttachedToWindow();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get our 2 child View</span></span><br><span class="line">        menu = <span class="keyword">this</span>.getChildAt(<span class="number">0</span>);</span><br><span class="line">        content = <span class="keyword">this</span>.getChildAt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initially hide the menu</span></span><br><span class="line">        menu.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>onAttachedToWindow() is called when MainLayout is attached to window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before onDraw. Here we set child views to our view and content variable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu = <span class="keyword">this</span>.getChildAt(<span class="number">0</span>);</span><br><span class="line">content = <span class="keyword">this</span>.getChildAt(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>and initially hide the menu. Note that View.GONE tells the view to not take up space in the layout</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu.setVisibility(View.GONE);</span><br></pre></td></tr></table></figure><p>In onMeasure(), we compute menuRightMargin, this variable is the amount of right space the menu should not occupy. In this case, we want the menu to take up 90% amount of the screen width. onMeasure() is called to ask all children to measure themselves and compute the measurement of this layout based on the children</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">       menuRightMargin = mainLayoutWidth * <span class="number">10</span> / <span class="number">100</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Finally, we need to override onLayout(), this is called from layout when this view should assign a size and position to each of its children. This is where we position the menu and content view.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// True if MainLayout 's size and position has changed</span></span><br><span class="line">        <span class="comment">// If true, calculate child views size</span></span><br><span class="line">        <span class="keyword">if</span>(changed) &#123;</span><br><span class="line">            <span class="comment">// Note: LayoutParams are used by views to tell their parents how they want to be laid out</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// content View occupies the full height and width</span></span><br><span class="line">            LayoutParams contentLayoutParams = (LayoutParams)content.getLayoutParams();</span><br><span class="line">            contentLayoutParams.height = <span class="keyword">this</span>.getHeight();</span><br><span class="line">            contentLayoutParams.width = <span class="keyword">this</span>.getWidth();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// menu View occupies the full height, but certain width</span></span><br><span class="line">            LayoutParams menuLayoutParams = (LayoutParams)menu.getLayoutParams();</span><br><span class="line">            menuLayoutParams.height = <span class="keyword">this</span>.getHeight();</span><br><span class="line">            menuLayoutParams.width = <span class="keyword">this</span>.getWidth() - menuRightMargin;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Layout the child views</span></span><br><span class="line">        menu.layout(left, top, right - menuRightMargin, bottom);</span><br><span class="line">        content.layout(left + contentXOffset, top, right + contentXOffset, bottom);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Note for the use of the contentXOffset variable.  It is the content that is moving, not the menu. So contentXOffset is used to translate the content horizontally when it is moving</p><h2 id="ADDING-ANIMATION"><a href="#ADDING-ANIMATION" class="headerlink" title="ADDING ANIMATION"></a>ADDING ANIMATION</h2><p>So the main idea of sliding menu is to change contentXOffset and call offsetLeftAndRight for the content to move the content. But for the content ‘s new position to survive, we need to actually layout it on onLayout(), as shown in previous code snippet For more information, see <a href="http://sentinelweb.co.uk/offsetleftandright-not-preserving-after-a-layout/" target="_blank" rel="noopener">Flyin menu using offsetLeftAndRight not preserving after a layout</a></p><p>To better control sliding state, we declare MenuState enumeration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> MenuState &#123;</span><br><span class="line">        HIDING,</span><br><span class="line">        HIDDEN,</span><br><span class="line">        SHOWING,</span><br><span class="line">        SHOWN,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>HIDDEN state is when menu is fully hidden, and SHOWN state is when menu is fully shown. HIDDING state is when menu is about to hide, and SHOWING state is when menu is about to show. Initially currentMenuState is set to HIDDEN so that the menu won’t show up on first launch.</p><p>The main method of our MainLayout is toggleMenu, which, as it name implied, allow us to toggle menu</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggleMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing if sliding is in progress</span></span><br><span class="line">        <span class="keyword">if</span>(currentMenuState == MenuState.HIDING || currentMenuState == MenuState.SHOWING)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(currentMenuState) &#123;</span><br><span class="line">        <span class="keyword">case</span> HIDDEN:</span><br><span class="line">            currentMenuState = MenuState.SHOWING;</span><br><span class="line">            menu.setVisibility(View.VISIBLE);</span><br><span class="line">            menuScroller.startScroll(<span class="number">0</span>, <span class="number">0</span>, menu.getLayoutParams().width,</span><br><span class="line">                    <span class="number">0</span>, SLIDING_DURATION);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SHOWN:</span><br><span class="line">            currentMenuState = MenuState.HIDING;</span><br><span class="line">            menuScroller.startScroll(contentXOffset, <span class="number">0</span>, -contentXOffset,</span><br><span class="line">                    <span class="number">0</span>, SLIDING_DURATION);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Begin querying</span></span><br><span class="line">        menuHandler.postDelayed(menuRunnable, QUERY_INTERVAL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Invalite this whole MainLayout, causing onLayout() to be called</span></span><br><span class="line">        <span class="keyword">this</span>.invalidate();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Here we use a Scroller to faciliate sliding animation. Note that Scroller does not perform any visual effect, it is just a base for us to track animation by querying the Scroller’s methods. Bills has a good answer on SO <a href="http://stackoverflow.com/questions/5495855/android-scroller-animation/6219382#6219382" target="_blank" rel="noopener">Android: Scroller Animation?</a></p><p>The Scroller uses a custom Interpolator to make the sliding more natural. It moves faster in the end. The formula is here</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interpolator(t) = (t-<span class="number">1</span>)<span class="number">5</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>If the menu is in HIDDEN state, we set its visibility to VISIBLE and start scrolling.  Here the content is moving horizontally, so we scroll from left edge to menu width. Note that menu takes up only 90% of the screen width.</p><p>If the menu is in SHOWN state, we start scrolling from the content ‘s current x position to the left edge.</p><p>The 3rd parameter to the startScroll() method is the distance we want to scroll, a negative sign indicates that we want to scroll from right to left.</p><p>You can tweak SLIDING_DURATION and QUERY_INTERVAL to your desire. SLIDING_DURATION is the duration of the scrolling. QUERY_INTERVAL is how often we perform querying the Scroller for information. I set it to 16ms so that we have an fps of about 60, which is too high :D</p><p>Here the querying is achieved via calling adjustContentPosition() in MenuRunnable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Begin querying</span></span><br><span class="line">menuHandler.postDelayed(menuRunnable, QUERY_INTERVAL);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Query Scroller</span></span><br><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> isScrolling = menuScroller.computeScrollOffset();</span><br><span class="line">            adjustContentPosition(isScrolling);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Here we call computeScrollOffset to check if the scrolling is finished or not</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustContentPosition</span><span class="params">(<span class="keyword">boolean</span> isScrolling)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> scrollerXOffset = menuScroller.getCurrX();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Log.d("MainLayout.java adjustContentPosition()", "scrollerOffset " + scrollerOffset);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Translate content View accordingly</span></span><br><span class="line">        content.offsetLeftAndRight(scrollerXOffset - contentXOffset);</span><br><span class="line"></span><br><span class="line">        contentXOffset = scrollerXOffset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Invalite this whole MainLayout, causing onLayout() to be called</span></span><br><span class="line">        <span class="keyword">this</span>.invalidate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if animation is in progress</span></span><br><span class="line">        <span class="keyword">if</span> (isScrolling)</span><br><span class="line">            menuHandler.postDelayed(menuRunnable, QUERY_INTERVAL);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">this</span>.onMenuSlidingComplete();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>We base on getCurrX to update out contentXOffset and translate content view. Remember to call invalidate() everytime the content position is changed. We continue moving the content view until scrolling is finished</p><p>Finally, in onMenuSlidingComplete(), we set the currentMenuState accordingly</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onMenuSlidingComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (currentMenuState) &#123;</span><br><span class="line">        <span class="keyword">case</span> SHOWING:</span><br><span class="line">            currentMenuState = MenuState.SHOWN;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> HIDING:</span><br><span class="line">            currentMenuState = MenuState.HIDDEN;</span><br><span class="line">            menu.setVisibility(View.GONE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="HANDLING-GESTURE"><a href="#HANDLING-GESTURE" class="headerlink" title="HANDLING GESTURE"></a>HANDLING GESTURE</h2><p>To support gesture, we first attach OnTouchListener to the content view. We do this in onMeasure()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">content.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> MainLayout.<span class="keyword">this</span>.onContentTouch(v, event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>And in onContentTouch() we handle the ACTION_DOWN, ACTION_MOVE and ACTION_UP to allow dragging the content view</p><p>Please note that we use getRawX() instead of getX() for consistent behavior. More information see PeyloW ‘s answer here <a href="http://stackoverflow.com/questions/1410885/how-do-i-know-if-a-motionevent-is-relative-or-absolute" target="_blank" rel="noopener">How do I know if a MotionEvent is relative or absolute?</a></p><p>Here I use curX and diffX to track previous position and how the difference in distance. When user is dragging, we continuously update the content view ‘s position. Please also prevent user from dragging beyond the left edge and right margin border</p><p>When the user release his/her finger, we base on lastDiffX to decide if the menu should show or hide.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onContentTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing if sliding is in progress</span></span><br><span class="line">        <span class="keyword">if</span>(currentMenuState == MenuState.HIDING || currentMenuState == MenuState.SHOWING)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getRawX returns X touch point corresponding to screen</span></span><br><span class="line">        <span class="comment">// getX sometimes returns screen X, sometimes returns content View X</span></span><br><span class="line">        <span class="keyword">int</span> curX = (<span class="keyword">int</span>)event.getRawX();</span><br><span class="line">        <span class="keyword">int</span> diffX = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">//Log.d("MainLayout.java onContentTouch()", "Down x " + curX);</span></span><br><span class="line"></span><br><span class="line">            prevX = curX;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">//Log.d("MainLayout.java onContentTouch()", "Move x " + curX);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set menu to Visible when user start dragging the content View</span></span><br><span class="line">            <span class="keyword">if</span>(!isDragging) &#123;</span><br><span class="line">                isDragging = <span class="keyword">true</span>;</span><br><span class="line">                menu.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// How far we have moved since the last position</span></span><br><span class="line">            diffX = curX - prevX;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Prevent user from dragging beyond border</span></span><br><span class="line">            <span class="keyword">if</span>(contentXOffset + diffX &lt;= <span class="number">0</span>) &#123;                 <span class="comment">// Don't allow dragging beyond left border                 // Use diffX will make content cross the border, so only translate by -contentXOffset                 diffX = -contentXOffset;             &#125; else if(contentXOffset + diffX &gt; mainLayoutWidth - menuRightMargin) &#123;</span></span><br><span class="line">                <span class="comment">// Don't allow dragging beyond menu width</span></span><br><span class="line">                diffX = mainLayoutWidth - menuRightMargin - contentXOffset;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Translate content View accordingly</span></span><br><span class="line">            content.offsetLeftAndRight(diffX);</span><br><span class="line"></span><br><span class="line">            contentXOffset += diffX;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invalite this whole MainLayout, causing onLayout() to be called</span></span><br><span class="line">            <span class="keyword">this</span>.invalidate();</span><br><span class="line"></span><br><span class="line">            prevX = curX;</span><br><span class="line">            lastDiffX = diffX;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="comment">//Log.d("MainLayout.java onContentTouch()", "Up x " + curX);</span></span><br><span class="line"></span><br><span class="line">            Log.d(<span class="string">"MainLayout.java onContentTouch()"</span>, <span class="string">"Up lastDiffX "</span> + lastDiffX);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start scrolling</span></span><br><span class="line">            <span class="comment">// Remember that when content has a chance to cross left border, lastDiffX is set to 0</span></span><br><span class="line">            <span class="keyword">if</span>(lastDiffX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// User wants to show menu</span></span><br><span class="line">                currentMenuState = MenuState.SHOWING;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// No need to set to Visible, because we have set to Visible in ACTION_MOVE</span></span><br><span class="line">                <span class="comment">//menu.setVisibility(View.VISIBLE);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//Log.d("MainLayout.java onContentTouch()", "Up contentXOffset " + contentXOffset);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Start scrolling from contentXOffset</span></span><br><span class="line">                menuScroller.startScroll(contentXOffset, <span class="number">0</span>, menu.getLayoutParams().width - contentXOffset,</span><br><span class="line">                        <span class="number">0</span>, SLIDING_DURATION);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(lastDiffX &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// User wants to hide menu</span></span><br><span class="line">                currentMenuState = MenuState.HIDING;</span><br><span class="line">                menuScroller.startScroll(contentXOffset, <span class="number">0</span>, -contentXOffset,</span><br><span class="line">                        <span class="number">0</span>, SLIDING_DURATION);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Begin querying</span></span><br><span class="line">            menuHandler.postDelayed(menuRunnable, QUERY_INTERVAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invalite this whole MainLayout, causing onLayout() to be called</span></span><br><span class="line">            <span class="keyword">this</span>.invalidate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Done dragging</span></span><br><span class="line">            isDragging = <span class="keyword">false</span>;</span><br><span class="line">            prevX = <span class="number">0</span>;</span><br><span class="line">            lastDiffX = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make your own sliding menu on Android tutorial - Part 1</title>
      <link href="/blog/Make-your-own-sliding-menu-on-Android-tutorial-Part-1/"/>
      <url>/blog/Make-your-own-sliding-menu-on-Android-tutorial-Part-1/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/151" target="_blank" rel="noopener">#151</a></strong></p><p>This post was from long time ago when I did Android</p><hr><p>I can’t deny that Facebook is so amazing, they made trends and people want to follow. That is the case of the sliding menu.</p><p>Searching many threads on SO, like these <a href="http://stackoverflow.com/questions/16735398/create-android-sliding-menu-like-facebook-gmail" target="_blank" rel="noopener">create android Sliding Menu like Facebook,gmail</a>, <a href="http://stackoverflow.com/questions/16983794/android-sliding-menu-similar-to-the-one-on-facebook" target="_blank" rel="noopener">Android sliding menu similar to the one on facebook</a>, <a href="http://stackoverflow.com/questions/15264567/android-sliding-menu-with-sub-menu" target="_blank" rel="noopener">Android - Sliding menu with sub menu</a> … they will mostly introduce you to some good sliding menu libraries, like this <a href="https://github.com/jfeinstein10/SlidingMenu" target="_blank" rel="noopener">SlidingMenu</a> and some <a href="http://www.michenux.net/android-sliding-menu-part-1-657.html" target="_blank" rel="noopener">tutorials</a> on how to use it. And of course, not forget to mention the <a href="http://developer.android.com/design/patterns/navigation-drawer.html" target="_blank" rel="noopener">Navigation Drawer</a> that shipped with the Android SDK</p><p>If you are a do-it-yourself guy like me, then here is the tutorial for you. It is mostly based on the following Youtube videos and guides</p><a id="more"></a><ol><li><p><a href="http://www.youtube.com/watch?v=YeR7McJIltk" target="_blank" rel="noopener">Creating a Slide-In Menu in Android - Part 1: Showing the menu</a></p></li><li><p><a href="http://www.youtube.com/watch?v=UYPmRhiUMOI" target="_blank" rel="noopener">Creating a Slide-In Menu in Adnroid - Part 2: Adding animation</a></p></li><li><p><a href="http://cyrilmottier.com/2012/05/22/the-making-of-prixing-fly-in-app-menu-part-1/" target="_blank" rel="noopener">The Making of Prixing #1: Fly-in App Menu</a></p></li><li><p><a href="http://cyrilmottier.com/2012/05/29/the-making-of-prixing-2-swiping-the-fly-in-app-menu/" target="_blank" rel="noopener">The Making of Prixing #2: Swiping the Fly-in App Menu</a></p></li><li><p><a href="http://cyrilmottier.com/2012/06/08/the-making-of-prixing-3-polishing-the-sliding-app-menu/" target="_blank" rel="noopener">The Making of Prixing #3: Polishing the Sliding App Menu</a></p></li></ol><h2 id="WHAT-WILL-WE-ACHIEVE"><a href="#WHAT-WILL-WE-ACHIEVE" class="headerlink" title="WHAT WILL WE ACHIEVE"></a>WHAT WILL WE ACHIEVE</h2><p>The final result of this tutorial will look like this.</p><p><img src="https://user-images.githubusercontent.com/2284279/36728041-b2bb3bc8-1bbf-11e8-88ba-81fb37ecf07d.png" alt="sliding_menu_showcase"></p><p>User will then be able to get the menu by touching the Menu button, or just by dragging.</p><p>The menu contains a list of Android UI controls and when selected, the main content view will shows the according screen.</p><p>The source code is available on <a href="https://github.com/onmyway133/SlidingMenu" target="_blank" rel="noopener">Github</a></p><h2 id="THE-IDEA"><a href="#THE-IDEA" class="headerlink" title="THE IDEA"></a>THE IDEA</h2><p>A sliding menu app typically has 2 views : the menu view (the green rectangle) and the content view (the red rectangle)</p><p><img src="https://user-images.githubusercontent.com/2284279/36728055-bd0fcd3c-1bbf-11e8-8aab-bd07e13d2ae5.png" alt="sliding-menu-idea"></p><p>We have many ways to implement the sliding effect, all depend on your intention</p><ol><li><p>Let the menu view hold still, while moving the content view. The content view usually sits on top of the menu view and cover the entire screen</p></li><li><p>Opposite of 1. Let the content view hold still, while moving the  menu view. The menu usually sits on top of the content view and occupy some amount of space, so that user can touch and drag it</p></li><li><p>The same as 2.  but when the menu is moving, the content is moving, too.</p></li></ol><p>When the menu is shown, we should disable interacting with the content view.</p><p>The 1st solution is what we will do in this tutorial. It’s much the same with Facebook sliding menu</p><h2 id="OVERVIEW-OF-THE-PROJECT"><a href="#OVERVIEW-OF-THE-PROJECT" class="headerlink" title="OVERVIEW OF THE PROJECT"></a>OVERVIEW OF THE PROJECT</h2><p>For better understanding, you should take a look at the project to see how things are organized</p><p><strong>/src/com.entropy.slidingmenu2</strong></p><p>MainActivity.java : this should be your first screen. It contains the MainLayout and handle ListView click event to display the right content</p><p><strong>/src/com.entropy.slidingmenu2.fragment</strong></p><p>FragmentMain.java : the default content view</p><p>FragmentButton.java : show one button on the content view</p><p>The content view is really simple since it’s just for demo. I use Fragment so we can easily change the content view according to the ListView item selected</p><p><strong>/src/com.entropy.slidingmenu2.layout</strong></p><p>MainLayout.java : the most important part of this tutorial. For ease and reusability, it’s best to create a custom LinearLayout. This will be used to position the menu and content views appropriately and handle sliding effect</p><p><strong>/res/layout</strong></p><p>activity.main: represent the visual structure for MainLayout</p><p>fragment_main: represent the content view</p><h2 id="THE-PREPARATION"><a href="#THE-PREPARATION" class="headerlink" title="THE PREPARATION"></a>THE PREPARATION</h2><p>I list here the required knowledge just for reference</p><ol><li><p><a href="http://developer.android.com/training/basics/fragments/index.html" target="_blank" rel="noopener">Fragment</a> : used to show the content view</p></li><li><p><a href="http://developer.android.com/tools/support-library/index.html" target="_blank" rel="noopener">Support library </a>: we use v4 in this tutorial to support Fragment for older devices</p></li><li><p><a href="http://developer.android.com/training/custom-views/index.html" target="_blank" rel="noopener">Custom layout</a> : our MainLayout is a custom layout</p></li><li><p><a href="http://developer.android.com/reference/android/widget/Scroller.html" target="_blank" rel="noopener">Scroller </a>: to facilitate the sliding animation</p></li><li><p><a href="http://developer.android.com/training/gestures/detector.html" target="_blank" rel="noopener">Gesture</a> : to allow drag and drop</p></li></ol><p>Without further ado, let’s get started</p><h2 id="DESIGNING-activity-main-xml"><a href="#DESIGNING-activity-main-xml" class="headerlink" title="DESIGNING activity_main.xml"></a>DESIGNING activity_main.xml</h2><p>The activity_main.xml represents the content of our custom layout. Since its a custom layout, we must declare like this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.entropy.slidingmenu2.layout.MainLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span> &gt;</span><br></pre></td></tr></table></figure><p>Inside it are the 2 LinearLayout. Both are declared with attributes but the final display will be decided by the code :)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:layout_width="match_parent"</span><br><span class="line">android:layout_height="match_parent"</span><br></pre></td></tr></table></figure><p>The first is for the menu, which holds a ListView</p><p>The second is for the content, which holds the simulated action bar ^^ and the FrameLayout. The FrameLayout is where fragments will show up</p><h2 id="WORKING-WITH-MainActivity-java"><a href="#WORKING-WITH-MainActivity-java" class="headerlink" title="WORKING WITH MainActivity.java"></a>WORKING WITH MainActivity.java</h2><p>The MainActivity is the default activity, it contains our MainLayout and handle menu item selection</p><ol><li>In the onCreate() method, we do the following</li></ol><p>Inflate the MainLayout and its as the contentView for our activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainLayout = (MainLayout)<span class="keyword">this</span>.getLayoutInflater().inflate(R.layout.activity_main, <span class="keyword">null</span>);</span><br><span class="line">setContentView(mainLayout);</span><br></pre></td></tr></table></figure><p>Init the ListView for the menu</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lvMenuItems = getResources().getStringArray(R.array.menu_items);</span><br><span class="line">        lvMenu = (ListView) findViewById(R.id.activity_main_menu_listview);</span><br><span class="line">        lvMenu.setAdapter(<span class="keyword">new</span> ArrayAdapter(<span class="keyword">this</span>,</span><br><span class="line">                android.R.layout.simple_list_item_1, lvMenuItems));</span><br><span class="line">        lvMenu.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                onMenuItemClick(parent, view, position, id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>Init the menu button</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">btMenu = (Button) findViewById(R.id.activity_main_content_button_menu);</span><br><span class="line">        btMenu.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Show/hide the menu</span></span><br><span class="line">                toggleMenu(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>Display FragmentMain as the initial Fragment for our content view</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager fm = MainActivity.<span class="keyword">this</span>.getSupportFragmentManager();</span><br><span class="line">FragmentTransaction ft = fm.beginTransaction();</span><br><span class="line"></span><br><span class="line">FragmentMain fragment = <span class="keyword">new</span> FragmentMain();</span><br><span class="line">ft.add(R.id.activity_main_content_fragment, fragment);</span><br><span class="line">ft.commit();</span><br></pre></td></tr></table></figure><ol start="2"><li><p>The toggleMenu() is a utility method to toggle the menu, it will calls MainLayout ‘s toggleMenu() method. We ‘ll talk about this later</p></li><li><p>onMenuItemClick() is used to handle menu item selection. What it does is to create the according Fragment and replace it with the current one</p></li><li><p>Handle the Back button. If the menu is shown, we should hide it, or we can quit the app</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mainLayout.isMenuShown()) &#123;</span><br><span class="line">            mainLayout.toggleMenu();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Let’s continue to <a href="https://github.com/onmyway133/blog/issues/152" target="_blank" rel="noopener">part 2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some interesting repositories</title>
      <link href="/blog/Some-interesting-repositories/"/>
      <url>/blog/Some-interesting-repositories/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/150" target="_blank" rel="noopener">#150</a></strong></p><h3 id="Cool"><a href="#Cool" class="headerlink" title="Cool"></a>Cool</h3><ul><li><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">https://github.com/GoogleChrome/puppeteer</a></li></ul><h3 id="🙄"><a href="#🙄" class="headerlink" title="🙄"></a>🙄</h3><ul><li><a href="https://github.com/kelseyhightower/nocode" target="_blank" rel="noopener">https://github.com/kelseyhightower/nocode</a></li><li><a href="https://github.com/jackdclark/five" target="_blank" rel="noopener">https://github.com/jackdclark/five</a></li><li><a href="https://github.com/auchenberg/volkswagen" target="_blank" rel="noopener">https://github.com/auchenberg/volkswagen</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dealing with updated pod in BuddyBuild</title>
      <link href="/blog/Dealing-with-updated-pod-in-BuddyBuild/"/>
      <url>/blog/Dealing-with-updated-pod-in-BuddyBuild/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/149" target="_blank" rel="noopener">#149</a></strong></p><p>We’re using BuddyBuild as our CI. Today one of our dependencies gets a sweat update <a href="https://github.com/hyperoslo/BarcodeScanner/releases/tag/4.1.1" target="_blank" rel="noopener">https://github.com/hyperoslo/BarcodeScanner/releases/tag/4.1.1</a>. So we <code>pod update BarcodeScanner</code> in one of our projects that depends on it. All is fine when running locally. So I make a Pull Request and wait for the build to kick off in BuddyBuild.</p><p>For some reason, BuddyBuild can’t pick up the right version of Cocoapods, hence can’t update the new pods.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[!] The version of CocoaPods used to generate the lockfile (1.3.1) is higher than the version of the current executable (1.1.1). Incompatibility issues may arise.</span><br><span class="line"></span><br><span class="line">=== CocoaPods ===</span><br><span class="line">104</span><br><span class="line">    Switching CocoaPods version to 1.1.1</span><br><span class="line">105</span><br><span class="line">    Using Command Line: gem cleanup &quot;cocoapods&quot;</span><br><span class="line">106</span><br><span class="line">    Using Command Line: gem uninstall &quot;cocoapods&quot; --all --executables --force</span><br><span class="line">107</span><br><span class="line">    Using Command Line: gem install &quot;cocoapods&quot; --no-rdoc --no-ri --version &quot;1.1.1&quot;</span><br><span class="line">108</span><br><span class="line">    Unpacking caches - cocoapods pod specs</span><br><span class="line">109</span><br><span class="line">    Using Command Line: pod install --no-repo-update</span><br><span class="line">110</span><br><span class="line">    Analyzing dependencies</span><br><span class="line">111</span><br><span class="line">    Pre-downloading: `Tailor` from `https://github.com/zenangst/Tailor`, tag `3.0.0`</span><br><span class="line">112</span><br><span class="line">    [!] Unable to satisfy the following requirements:</span><br><span class="line">113</span><br><span class="line">    - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`</span><br><span class="line">114</span><br><span class="line">    - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`</span><br><span class="line">115</span><br><span class="line">    - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`</span><br><span class="line">116</span><br><span class="line">    - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`</span><br><span class="line">117</span><br><span class="line">    - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`</span><br><span class="line">118</span><br><span class="line">    - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`</span><br><span class="line">119</span><br><span class="line">    - `BarcodeScanner (= 4.1.1)` required by `Podfile.lock`</span><br><span class="line">120</span><br><span class="line">    None of your spec sources contain a spec satisfying the dependencies: `BarcodeScanner (~&gt; 4.0), BarcodeScanner (= 4.1.1)`.</span><br><span class="line">121</span><br><span class="line">    You have either:</span><br><span class="line">122</span><br><span class="line">     * out-of-date source repos which you can update with `pod repo update`.</span><br><span class="line">123</span><br><span class="line">     * mistyped the name or version.</span><br><span class="line">124</span><br><span class="line">     * not added the source repo that hosts the Podspec to your Podfile.</span><br><span class="line">125</span><br><span class="line">    Note: as of CocoaPods 1.0, `pod repo update` does not happen on `pod install` by default.</span><br></pre></td></tr></table></figure><h3 id="Trying-script"><a href="#Trying-script" class="headerlink" title="Trying script"></a>Trying script</h3><p>So I thought I could run some custom script to force BuddyBuild to update the pods. Start with <a href="https://docs.buddybuild.com/builds/custom_build_steps.html" target="_blank" rel="noopener">https://docs.buddybuild.com/builds/custom_build_steps.html</a></p><p>I commit the file <code>buddybuild_postclone.sh</code> with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"> </span><br><span class="line">pod repo update</span><br><span class="line">pod update BarcodeScanner</span><br></pre></td></tr></table></figure><p>Didn’t work. I then update the script with </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"> </span><br><span class="line">pod repo remove master</span><br><span class="line">pod setup</span><br><span class="line">pod install</span><br></pre></td></tr></table></figure><p>Didn’t work. Taking a closer look at the log. I see</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Switching CocoaPods version to 1.1.1</span><br></pre></td></tr></table></figure><p>It seems BuddyBuild is using cocoapods 1.1.1. Mine is 1.4.0.</p><h3 id="Specifying-cocoapods-version"><a href="#Specifying-cocoapods-version" class="headerlink" title="Specifying cocoapods version"></a>Specifying cocoapods version</h3><p>So I need to specify the correct cocoapods version to make sure I and BuddyBuild are on the same page</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install bundler</span><br><span class="line">bundler init</span><br></pre></td></tr></table></figure><p>And in my <code>Gemfile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># frozen_string_literal: true</span><br><span class="line"></span><br><span class="line">source &quot;https://rubygems.org&quot;</span><br><span class="line"></span><br><span class="line">git_source(:github) &#123;|repo_name| &quot;https://github.com/#&#123;repo_name&#125;&quot; &#125;</span><br><span class="line"></span><br><span class="line">gem &quot;cocoapods&quot;, &apos;~&gt; 1.0&apos;</span><br></pre></td></tr></table></figure><p>Then run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundler install</span><br></pre></td></tr></table></figure><p>And check <code>Gemfile.lock</code> to make sure everything is OK</p><h3 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h3><p>Commit the changes, and now BuddyBuild is picking up the right cocoapods version, hence using the new pods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">=== CocoaPods ===</span><br><span class="line">45</span><br><span class="line">    Switching CocoaPods version to 1.4.0</span><br><span class="line">46</span><br><span class="line">    Using Command Line: gem cleanup &quot;cocoapods&quot;</span><br><span class="line">47</span><br><span class="line">    Using Command Line: gem uninstall &quot;cocoapods&quot; --all --executables --force</span><br><span class="line">48</span><br><span class="line">    Using Command Line: gem install &quot;cocoapods&quot; --no-rdoc --no-ri --version &quot;1.4.0&quot;</span><br><span class="line">49</span><br><span class="line">    Unpacking caches - cocoapods pod specs</span><br><span class="line">50</span><br><span class="line">    Using Command Line: pod install --no-repo-update</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Generic Factory</title>
      <link href="/blog/Learning-from-Open-Source-Generic-Factory/"/>
      <url>/blog/Learning-from-Open-Source-Generic-Factory/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/148" target="_blank" rel="noopener">#148</a></strong></p><p>From <a href="https://github.com/devxoul/Pure/blob/master/Sources/Pure/FactoryModule.swift" target="_blank" rel="noopener">https://github.com/devxoul/Pure/blob/master/Sources/Pure/FactoryModule.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">FactoryModule</span>: <span class="title">Module</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A factory for `Self`.</span></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Factory</span> = <span class="type">Pure</span>.<span class="type">Factory</span>&lt;<span class="type">Self</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Creates an instance of a module with a dependency and a payload.</span></span><br><span class="line">  <span class="keyword">init</span>(dependency: <span class="type">Dependency</span>, payload: <span class="type">Payload</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From <a href="https://github.com/devxoul/Pure/blob/master/Sources/Pure/Factory.swift" target="_blank" rel="noopener">https://github.com/devxoul/Pure/blob/master/Sources/Pure/Factory.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span>&lt;<span class="title">Module</span>: <span class="title">FactoryModule</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> dependencyClosure: () -&gt; <span class="type">Module</span>.<span class="type">Dependency</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A static dependency of a module.</span></span><br><span class="line">  <span class="keyword">open</span> <span class="keyword">var</span> dependency: <span class="type">Module</span>.<span class="type">Dependency</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dependencyClosure()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Creates an instance of `Factory`.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - parameter dependency: A static dependency which should be resolved in a composition root.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(dependency: <span class="meta">@autoclosure</span> @escaping () -&gt; <span class="type">Module</span>.<span class="type">Dependency</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.dependencyClosure = dependency</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Creates an instance of a module with a runtime parameter.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - parameter payload: A runtime parameter which is required to construct a module.</span></span><br><span class="line">  <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(payload: Module.Payload)</span></span> -&gt; <span class="type">Module</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Module</span>.<span class="keyword">init</span>(dependency: <span class="keyword">self</span>.dependency, payload: payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From <a href="https://github.com/devxoul/Pure/blob/master/Tests/PureTests/PureSpec.swift#L72" target="_blank" rel="noopener">https://github.com/devxoul/Pure/blob/master/Tests/PureTests/PureSpec.swift#L72</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> factory = <span class="type">FactoryFixture</span>&lt;<span class="type">Dependency</span>, <span class="type">Payload</span>&gt;.<span class="type">Factory</span>(dependency: .<span class="keyword">init</span>(</span><br><span class="line">  networking: <span class="string">"Networking A"</span></span><br><span class="line">))</span><br><span class="line"><span class="keyword">let</span> instance = factory.create(payload: .<span class="keyword">init</span>(id: <span class="number">100</span>))</span><br><span class="line">expect(instance.dependency.networking) == <span class="string">"Networking A"</span></span><br><span class="line">expect(instance.payload.id) == <span class="number">100</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Using camelCase for abbreviations</title>
      <link href="/blog/Using-camelCase-for-abbreviations/"/>
      <url>/blog/Using-camelCase-for-abbreviations/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/147" target="_blank" rel="noopener">#147</a></strong></p><p>Each language and platform has its own coding style guide. This goes true when it comes to abbreviations. I’ve had some debates about whether to use <code>JSON</code>  or <code>Json</code>, <code>URL</code> or <code>Url</code>, <code>HTTP</code> or <code>Http</code>. </p><p>I personally prefer camelCase, so I’m very happy to see that Kotlin is on my side. See <a href="https://android.github.io/kotlin-guides/style.html#camel-case" target="_blank" rel="noopener">Kotlin Style guide</a>, I think this guide should be applied in other languages, such as Swift 😛 </p><blockquote><p>Sometimes there is more than one reasonable way to convert an English phrase into camel case, such as when acronyms or unusual constructs like “IPv6” or “iOS” are present. To improve predictability, use the following scheme.</p></blockquote><blockquote><p>Beginning with the prose form of the name:</p></blockquote><blockquote><ol><li>Convert the phrase to plain ASCII and remove any apostrophes. For example, “Müller’s algorithm” might become “Muellers algorithm”.</li></ol></blockquote><blockquote><ol start="2"><li>Divide this result into words, splitting on spaces and any remaining punctuation (typically hyphens).</li></ol></blockquote><blockquote><p>Recommended: if any word already has a conventional camel-case appearance in common usage, split this into its constituent parts (e.g., “AdWords” becomes “ad words”). Note that a word such as “iOS” is not really in camel case per se; it defies any convention, so this recommendation does not apply.</p></blockquote><blockquote><ol start="3"><li>Now lowercase everything (including acronyms), then uppercase only the first character of:</li></ol></blockquote><blockquote><p>…each word, to yield pascal case, or</p></blockquote><blockquote><p>…each word except the first, to yield camel case</p></blockquote><blockquote><ol start="4"><li>Finally, join all the words into a single identifier.</li></ol></blockquote><blockquote><p>Note that the casing of the original words is almost entirely disregarded.</p></blockquote><table><thead><tr><th>Prose form</th><th>Correct</th><th>Incorrect</th></tr></thead><tbody><tr><td>“XML Http Request”</td><td>XmlHttpRequest</td><td>XMLHTTPRequest</td></tr><tr><td>“new customer ID”</td><td>newCustomerId</td><td>newCustomerID</td></tr><tr><td>“inner stopwatch”</td><td>innerStopwatch</td><td>innerStopWatch</td></tr><tr><td>“supports IPv6 on iOS”</td><td>supportsIpv6OnIos</td><td>supportsIPv6OnIOS</td></tr><tr><td>“YouTube importer”</td><td>YouTubeImporterYoutubeImporter*</td><td></td></tr></tbody></table><p>About <code>iOS</code> or <code>IOS</code>, I think I would go with <code>IOS</code>. I think <a href="https://facebook.github.io/react-native/docs/navigation.html#navigatorios" target="_blank" rel="noopener">React Native</a> thinks so too</p><blockquote><p>NavigatorIOS looks and feels just like UINavigationController, because it is actually built on top of it.</p></blockquote><h3 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h3><ul><li><a href="https://softwareengineering.stackexchange.com/questions/186277/should-the-variable-be-named-id-or-id" target="_blank" rel="noopener">https://softwareengineering.stackexchange.com/questions/186277/should-the-variable-be-named-id-or-id</a></li><li><a href="https://swift.org/documentation/api-design-guidelines/#promote-clear-usage" target="_blank" rel="noopener">https://swift.org/documentation/api-design-guidelines/#promote-clear-usage</a></li><li><a href="https://github.com/raywenderlich/swift-style-guide#naming" target="_blank" rel="noopener">https://github.com/raywenderlich/swift-style-guide#naming</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning sine</title>
      <link href="/blog/Learning-sine/"/>
      <url>/blog/Learning-sine/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/146" target="_blank" rel="noopener">#146</a></strong></p><p>To be written …</p><p>Old math equations become useful today 😍 </p><ul><li><code>v = 1 - x</code></li><li>From <a href="https://www.desmos.com/calculator" target="_blank" rel="noopener">https://www.desmos.com/calculator</a></li></ul><p><img src="https://user-images.githubusercontent.com/2284279/35440591-576ec272-02a0-11e8-9e2a-b9749ad0db88.png" alt="sine"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to fix Uncaught Error Cannot find module react</title>
      <link href="/blog/How-to-fix-Uncaught-Error-Cannot-find-module-react/"/>
      <url>/blog/How-to-fix-Uncaught-Error-Cannot-find-module-react/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/145" target="_blank" rel="noopener">#145</a></strong></p><p>This is my story through dealing with many dependencies when trying to package an electron app. Thanks to my friend <a href="https://github.com/timkurvers" target="_blank" rel="noopener">https://github.com/timkurvers</a> for helping me out ❤️  This is like a note for my future self</p><h3 id="Fixing-event"><a href="#Fixing-event" class="headerlink" title="Fixing event"></a>Fixing event</h3><p>The other I got an issue <a href="https://github.com/onmyway133/PushNotifications/issues/3" target="_blank" rel="noopener">https://github.com/onmyway133/PushNotifications/issues/3</a> that reports there’s something wrong with production environment. The problem is that I used <a href="http://www.material-ui.com/#/components/radio-button" target="_blank" rel="noopener">RadioButton</a> and its <code>onChange</code> callback takes 2 parameters instead of 1.</p><h3 id="Trying-packaging"><a href="#Trying-packaging" class="headerlink" title="Trying packaging"></a>Trying packaging</h3><p>After the fix, I bump version in <code>package.json</code> and run <code>yarn release</code>. To my surprise, the built app was just blank. I tried <code>win.toggleDevTools()</code> to see what’s going on. I can’t use shortcut to open the dev tool any more in production, but there are tools <a href="https://github.com/sindresorhus/electron-debug" target="_blank" rel="noopener">https://github.com/sindresorhus/electron-debug</a>. </p><p>The console says that it can’t find the module ‘react’. I then submitted an issue <a href="https://github.com/electron-userland/electron-packager/issues/787" target="_blank" rel="noopener">https://github.com/electron-userland/electron-packager/issues/787</a></p><blockquote><p>Uncaught Error: Cannot find module ‘react’</p></blockquote><p>My environment</p><ul><li>Node v8.4.0</li><li>npm 5.3.0</li><li>yarn 1.3.2</li><li>macOS 10.13.2</li></ul><h3 id="Inspecting-with-debug-mode"><a href="#Inspecting-with-debug-mode" class="headerlink" title="Inspecting with debug mode"></a>Inspecting with debug mode</h3><p>I then need to run in debug mode to see what’s really happening</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=electron-packager npm run release</span><br></pre></td></tr></table></figure><p>The log says something about <code>npm</code></p><blockquote><p>Command failed: npm prune –production</p></blockquote><p>Digging a little, I found that this is quite a common issue</p><ul><li><a href="https://github.com/electron-userland/electron-packager/issues/686" target="_blank" rel="noopener">https://github.com/electron-userland/electron-packager/issues/686</a></li><li><a href="https://github.com/npm/npm/issues/17781" target="_blank" rel="noopener">https://github.com/npm/npm/issues/17781</a></li></ul><p>I think the issue may be because of I changed from <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a> to <a href="https://github.com/nodenv/nodenv" target="_blank" rel="noopener">https://github.com/nodenv/nodenv</a></p><h3 id="Updating-nodenv"><a href="#Updating-nodenv" class="headerlink" title="Updating nodenv"></a>Updating nodenv</h3><p>The latest stable version of <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> is 8.9.4. To enable <code>nodenv</code> to see it, we need</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade node-build</span><br></pre></td></tr></table></figure><p>Run the following so that you actually see the 8.9.4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodenv install --list</span><br></pre></td></tr></table></figure><h3 id="Updating-node-js"><a href="#Updating-node-js" class="headerlink" title="Updating node.js"></a>Updating node.js</h3><p>Install version 8.9.4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nodenv install 8.9.4</span><br><span class="line">nodenv global 8.9.4</span><br><span class="line">nodenv rehash</span><br></pre></td></tr></table></figure><h3 id="Updating-npm"><a href="#Updating-npm" class="headerlink" title="Updating npm"></a>Updating npm</h3><p>Run the following to update <code>npm</code> to 5.6.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g np</span><br></pre></td></tr></table></figure><h3 id="Installing-dependencies-from-scratch"><a href="#Installing-dependencies-from-scratch" class="headerlink" title="Installing dependencies from scratch"></a>Installing dependencies from scratch</h3><p>Clear old <code>node_modules</code> and <code>package-lock.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm -rf package-lock.json</span><br></pre></td></tr></table></figure><p>Then install again</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="Packaging"><a href="#Packaging" class="headerlink" title="Packaging"></a>Packaging</h3><p>The final step is to package the app again</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn release</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use standalone UINavigationBar in iOS</title>
      <link href="/blog/How-to-use-standalone-UINavigationBar-in-iOS/"/>
      <url>/blog/How-to-use-standalone-UINavigationBar-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/144" target="_blank" rel="noopener">#144</a></strong></p><p>There are times we want the same <code>UIViewController</code> to look good when it’s presented modally or pushed from <code>UINavigationController</code> stack. Take a look at BarcodeScanner and the PR <a href="https://github.com/hyperoslo/BarcodeScanner/pull/82" target="_blank" rel="noopener">https://github.com/hyperoslo/BarcodeScanner/pull/82</a></p><p>When it is presented, we need a header view so that we can show a title and a close button. We can create a custom <code>HeaderView</code> that inherits from <code>UIView</code> or either embed it in a <code>UINavigationController</code> before presenting.</p><p>If we go with the controller being embedded in <code>UINavigationController</code> approach, it will collide with the other <code>UINavigationController</code> when it is pushed.</p><p>If we go with custom <code>HeaderView</code>, then we need to layout the view so that it looks good on both portrait and landscape, and on iPhone X that as <code>safeAreaLayoutGuide</code>.</p><h2 id="Using-standalone-UINavigationBar"><a href="#Using-standalone-UINavigationBar" class="headerlink" title="Using standalone UINavigationBar"></a>Using standalone UINavigationBar</h2><p>Since <code>UINavigationController</code> uses <code>UINavigationBar</code> under the hood, which uses <code>UINavigationItem</code> info to present the content. We can imitate this behavior by using a standalone <code>UINavigationBar</code>. See <a href="https://developer.apple.com/documentation/uikit/uinavigationbar" target="_blank" rel="noopener">Adding Content to a Standalone Navigation Bar</a></p><blockquote><p>In the vast majority of scenarios you will use a navigation bar as part of a navigation controller. However, there are situations for which you might want to use the navigation bar UI and implement your own approach to content navigation. In these situations, you can use a standalone navigation bar.</p></blockquote><blockquote><p>A navigation bar manages a stack of UINavigationItem objects</p></blockquote><p>The beauty is that our standalone <code>UINavigationBar</code> and that of <code>UINavigationController</code> are the same, use the same <code>UINavigationItem</code> and no manual layout are needed</p><h3 id="Declare-UINavigationItem"><a href="#Declare-UINavigationItem" class="headerlink" title="Declare UINavigationItem"></a>Declare <code>UINavigationItem</code></h3><p>We can just set properties like we did with a normal <code>navigationItem</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> standaloneItem = <span class="type">UINavigationItem</span>()</span><br><span class="line">standaloneItem.leftBarButtonItem = <span class="type">UIBarButtonItem</span>(customView: closeButton)</span><br><span class="line">standaloneItem.titleView = <span class="type">UILabel</span>()</span><br></pre></td></tr></table></figure><h3 id="Adding-UINavigationBar"><a href="#Adding-UINavigationBar" class="headerlink" title="Adding UINavigationBar"></a>Adding <code>UINavigationBar</code></h3><p>Customise your bar, then declare layout constraints. You only need to pin left, right, and top. Note that you need to implement <code>UINavigationBarDelegate</code> to attach bar to status bar, so that it appears good on iPhone X too</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> navigationBar = <span class="type">UINavigationBar</span>()</span><br><span class="line">navigationBar.isTranslucent = <span class="literal">false</span></span><br><span class="line">navigationBar.delegate = <span class="keyword">self</span></span><br><span class="line">navigationBar.backgroundColor = .white</span><br><span class="line">navigationBar.items = [standaloneItem]</span><br><span class="line"> </span><br><span class="line">navigationBar.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">navigationBar.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = <span class="literal">true</span></span><br><span class="line">navigationBar.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">11</span>, *) &#123;</span><br><span class="line">  navigationBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor).isActive = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  navigationBar.topAnchor.constraint(equalTo: view.topAnchor).isActive = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BarcodeScannerController</span>: <span class="title">UINavigationBarDelegate</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">position</span><span class="params">(<span class="keyword">for</span> bar: UIBarPositioning)</span></span> -&gt; <span class="type">UIBarPosition</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> .topAttached</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inside-UINavigationController"><a href="#Inside-UINavigationController" class="headerlink" title="Inside UINavigationController"></a>Inside <code>UINavigationController</code></h3><p>When this <code>UIViewController</code> is pushed from a <code>UINavigationController</code> stack, we just need to hide our standalone <code>navigationBar</code>. If we prefer the default back button, we don’t need to set <code>leftBarButtonItem</code></p><p>On iOS 10, you need to call <code>sizeToFit</code> for any items in <code>UINavigationItem</code> for it to get actual size</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> navigationController != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> label = <span class="type">HeaderElement</span>.makeLabel()</span><br><span class="line">      label.sizeToFit()</span><br><span class="line">      navigationItem.titleView = label</span><br><span class="line">    navigationBar.isHidden = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    navigationBar.isHidden = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to deal with animation in UITests in iOS</title>
      <link href="/blog/How-to-deal-with-animation-in-UITests-in-iOS/"/>
      <url>/blog/How-to-deal-with-animation-in-UITests-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/143" target="_blank" rel="noopener">#143</a></strong></p><p>Today I was writing tests and get this error related to <code>app idle</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t =    23.06s         Assertion Failure: &lt;unknown&gt;:0: Failed to scroll to visible (by AX action) Button, 0x6000003827d0, traits: 8858370049, label: &apos;cart&apos;, error: Error -25204 performing AXAction 2003 on element &lt;XCAccessibilityElement: 0x7fc391a2bd60&gt; pid: 91461, elementOrHash.elementID: 140658975676048.128</span><br></pre></td></tr></table></figure><p>It turns out that the project uses a HUD that is performing some progress animation. Even it was being called <code>HUD.hide()</code>, the problem still exists. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t =    31.55s     Wait for no.example.MyApp to idle</span><br><span class="line"> t =    91.69s         App animations complete notification not received, will attempt to continue.</span><br><span class="line"> t =    91.70s Tap Target Application 0x6040002a1260</span><br><span class="line"> t =    91.70s     Wait for no.example.MyApp to id</span><br></pre></td></tr></table></figure><p>No matter how I call <code>sleep,</code>wait`, still the problem</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sleep(<span class="number">10</span>)</span><br><span class="line">app.tap()</span><br><span class="line"><span class="number">_</span> = checkoutButton.waitForExistence(timeout: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>The fix is to disable animation. Start with setting argument when running tests</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.launchArguments.append(<span class="string">"--UITests"</span>)</span><br><span class="line">app.launch</span><br></pre></td></tr></table></figure><p>Then in <code>AppDelegate</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="type">CommandLine</span>.arguments.<span class="built_in">contains</span>(<span class="string">"--UITests"</span>) &#123;</span><br><span class="line">    <span class="type">UIView</span>.setAnimationsEnabled(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Building Simulator</title>
      <link href="/blog/Building-Simulator/"/>
      <url>/blog/Building-Simulator/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/142" target="_blank" rel="noopener">#142</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Building GitHub Changelog Maker</title>
      <link href="/blog/Building-GitHub-Changelog-Maker/"/>
      <url>/blog/Building-GitHub-Changelog-Maker/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/141" target="_blank" rel="noopener">#141</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to generate QR code in AppKit</title>
      <link href="/blog/How-to-generate-QR-code-in-AppKit/"/>
      <url>/blog/How-to-generate-QR-code-in-AppKit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/140" target="_blank" rel="noopener">#140</a></strong></p><p>I need to generate QR code in <a href="https://github.com/onmyway133/AddressGenerator" target="_blank" rel="noopener">https://github.com/onmyway133/AddressGenerator</a>. Fortunately with <code>CoreImage</code> filter, it is very easy. Code is in Swift 4</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeGenerator</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(string: String, size: CGSize)</span></span> -&gt; <span class="type">NSImage?</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> data = string.data(using: .utf8) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Filter</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="built_in">filter</span> = <span class="type">CIFilter</span>(name: <span class="string">"CIQRCodeGenerator"</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">filter</span>.setValue(data, forKey: <span class="string">"inputMessage"</span>)</span><br><span class="line">    <span class="built_in">filter</span>.setValue(<span class="string">"Q"</span>, forKey: <span class="string">"inputCorrectionLevel"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CIImage</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> ciImage = <span class="built_in">filter</span>.outputImage <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NSImage</span></span><br><span class="line">    <span class="keyword">let</span> rep = <span class="type">NSCIImageRep</span>(ciImage: ciImage)</span><br><span class="line">    <span class="keyword">let</span> image = <span class="type">NSImage</span>(size: rep.size)</span><br><span class="line">    image.addRepresentation(rep)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scale</span></span><br><span class="line">    <span class="keyword">let</span> finalImage = <span class="type">NSImage</span>(size: size)</span><br><span class="line">    finalImage.lockFocus()</span><br><span class="line">    <span class="type">NSGraphicsContext</span>.current?.imageInterpolation = .<span class="keyword">none</span></span><br><span class="line">    image.draw(<span class="keyword">in</span>: <span class="type">NSRect</span>(origin: .zero, size: size))</span><br><span class="line">    finalImage.unlockFocus()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> finalImage</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use Function Literals with Receiver in Kotlin</title>
      <link href="/blog/How-to-use-Function-Literals-with-Receiver-in-Kotlin/"/>
      <url>/blog/How-to-use-Function-Literals-with-Receiver-in-Kotlin/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/139" target="_blank" rel="noopener">#139</a></strong></p><p>From <a href="https://kotlinlang.org/docs/reference/lambdas.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/lambdas.html</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTML</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">body</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">html</span><span class="params">(<span class="keyword">init</span>: <span class="type">HTML</span>.() -&gt; <span class="type">Unit</span>)</span></span>: HTML &#123;</span><br><span class="line">    <span class="keyword">val</span> html = HTML()  <span class="comment">// create the receiver object</span></span><br><span class="line">    html.<span class="keyword">init</span>()        <span class="comment">// pass the receiver object to the lambda</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html &#123;       <span class="comment">// lambda with receiver begins here</span></span><br><span class="line">    body()   <span class="comment">// calling a method on the receiver object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt" target="_blank" rel="noopener">https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">apply</span><span class="params">(block: <span class="type">T</span>.() -&gt; <span class="type">Unit</span>)</span></span>: T &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    block()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> person = Person().apply &#123;</span><br><span class="line">  name = <span class="string">"Superman"</span></span><br><span class="line">  age = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From <a href="https://academy.realm.io/posts/kau-jake-wharton-testing-robots/" target="_blank" rel="noopener">https://academy.realm.io/posts/kau-jake-wharton-testing-robots/</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">payment</span><span class="params">(func: <span class="type">PaymentRobot</span>.() -&gt; <span class="type">Unit</span>)</span></span> = PaymentRobot().apply &#123; func() &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentRobot</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">amount</span><span class="params">(amount: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">recipient</span><span class="params">(recipient: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="title">send</span><span class="params">(func: <span class="type">ResultRobot</span>.() -&gt; <span class="type">Unit</span>)</span></span>: ResultRobot &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> ResultRobot().apply &#123; func() &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultRobot</span> </span>&#123;</span><br><span class="line">func isSuccess() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payment &#123;</span><br><span class="line">amount(<span class="number">4200</span>)</span><br><span class="line">recipient(<span class="symbol">superman@</span>google.com)</span><br><span class="line">&#125; send &#123;</span><br><span class="line">isSuccess()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use R.swift in UITest in iOS</title>
      <link href="/blog/How-to-use-R.swift-in-UITest-in-iOS/"/>
      <url>/blog/How-to-use-R.swift-in-UITest-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/138" target="_blank" rel="noopener">#138</a></strong></p><p>Here is how to use <a href="https://github.com/mac-cain13/R.swift" target="_blank" rel="noopener">R.swift</a> in UITest target</p><ul><li>Add <code>Localizable.strings</code> to UITest target</li><li>Declare pod</li></ul><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target <span class="string">'MyAppUITests'</span> <span class="keyword">do</span></span><br><span class="line">  pod <span class="string">'R.swift'</span>, <span class="string">'~&gt; 4.0'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>In UITest target settings, add <code>$(FRAMEWORK_SEARCH_PATHS)</code> to Runpath Search Path</li><li>Add <code>R.generated.swift</code> to UITest target</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hiding back button in navigation bar in iOS</title>
      <link href="/blog/Hiding-back-button-in-navigation-bar-in-iOS/"/>
      <url>/blog/Hiding-back-button-in-navigation-bar-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/137" target="_blank" rel="noopener">#137</a></strong></p><p>Use a custom <code>NavigationController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavigationController</span>: <span class="title">UINavigationController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    navigationBar.tintColor = .white</span><br><span class="line">    navigationBar.barStyle = .black</span><br><span class="line">    navigationBar.isTranslucent = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">pushViewController</span><span class="params">(<span class="number">_</span> viewController: UIViewController, animated: Bool)</span></span> &#123;</span><br><span class="line">    viewController.navigationItem.backBarButtonItem =</span><br><span class="line">      <span class="type">UIBarButtonItem</span>(title: <span class="string">""</span>, style: .plain, target: <span class="literal">nil</span>, action: <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">super</span>.pushViewController(viewController, animated: animated)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Some Swift tips</title>
      <link href="/blog/Some-Swift-tips/"/>
      <url>/blog/Some-Swift-tips/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/136" target="_blank" rel="noopener">#136</a></strong></p><h3 id="Adding-final"><a href="#Adding-final" class="headerlink" title="Adding final"></a>Adding final</h3><ul><li><a href="https://gist.github.com/krzysztofzablocki/8c9a6c428cf5fcf19effca223a5548cd" target="_blank" rel="noopener">https://gist.github.com/krzysztofzablocki/8c9a6c428cf5fcf19effca223a5548cd</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Making Deferred in Kotlin</title>
      <link href="/blog/Learning-from-Open-Source-Making-Deferred-in-Kotlin/"/>
      <url>/blog/Learning-from-Open-Source-Making-Deferred-in-Kotlin/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/135" target="_blank" rel="noopener">#135</a></strong></p><p>From <a href="https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter/blob/master/src/main/java/com/jakewharton/retrofit2/adapter/kotlin/coroutines/experimental/CoroutineCallAdapterFactory.kt#L86" target="_blank" rel="noopener">https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter/blob/master/src/main/java/com/jakewharton/retrofit2/adapter/kotlin/coroutines/experimental/CoroutineCallAdapterFactory.kt#L86</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">adapt</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;)</span></span>: Deferred&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> deferred = CompletableDeferred&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">  deferred.invokeOnCompletion &#123;</span><br><span class="line">    <span class="keyword">if</span> (deferred.isCancelled) &#123;</span><br><span class="line">      call.cancel()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  call.enqueue(<span class="keyword">object</span> : Callback&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">      deferred.completeExceptionally(t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;, response: <span class="type">Response</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.isSuccessful) &#123;</span><br><span class="line">        deferred.complete(response.body()!!)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        deferred.completeExceptionally(HttpException(response))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> deferred</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Using dylib in macOS applications</title>
      <link href="/blog/Learning-from-Open-Source-Using-dylib-in-macOS-applications/"/>
      <url>/blog/Learning-from-Open-Source-Using-dylib-in-macOS-applications/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/134" target="_blank" rel="noopener">#134</a></strong></p><ul><li><a href="https://github.com/mortenjust/androidtool-mac" target="_blank" rel="noopener">https://github.com/mortenjust/androidtool-mac</a></li><li><a href="https://github.com/mortenjust/droptogif" target="_blank" rel="noopener">https://github.com/mortenjust/droptogif</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Using dlopen in iOS</title>
      <link href="/blog/Using-dlopen-in-iOS/"/>
      <url>/blog/Using-dlopen-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/133" target="_blank" rel="noopener">#133</a></strong></p><p>With <code>dlopen</code> we can make uses of some private frameworks. It will be fun</p><p>From <a href="http://blog.zats.io/2017/12/27/iPhone-X-home-button/" target="_blank" rel="noopener">iPhone X home button</a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// somewhere in viewDidLoad</span></span><br><span class="line">dlopen([binaryPath cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>], RTLD_NOW);</span><br><span class="line"><span class="built_in">UIView</span> *<span class="keyword">const</span> view = [[<span class="built_in">NSClassFromString</span>(<span class="string">@"SBHomeGrabberView"</span>) alloc] init];</span><br><span class="line">[view sizeToFit];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:view];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Hit testing with UIWindow</title>
      <link href="/blog/Learning-from-Open-Source-Hit-testing-with-UIWindow/"/>
      <url>/blog/Learning-from-Open-Source-Hit-testing-with-UIWindow/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/132" target="_blank" rel="noopener">#132</a></strong></p><p>From <a href="https://github.com/Flipboard/FLEX/blob/master/Classes/ExplorerInterface/FLEXWindow.m" target="_blank" rel="noopener">https://github.com/Flipboard/FLEX/blob/master/Classes/ExplorerInterface/FLEXWindow.m</a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">        <span class="comment">// Some apps have windows at UIWindowLevelStatusBar + n.</span></span><br><span class="line">        <span class="comment">// If we make the window level too high, we block out UIAlertViews.</span></span><br><span class="line">        <span class="comment">// There's a balance between staying above the app's windows and staying below alerts.</span></span><br><span class="line">        <span class="comment">// UIWindowLevelStatusBar + 100 seems to hit that balance.</span></span><br><span class="line">        <span class="keyword">self</span>.windowLevel = <span class="built_in">UIWindowLevelStatusBar</span> + <span class="number">100.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)pointInside:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">BOOL</span> pointInside = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.eventDelegate shouldHandleTouchAtPoint:point]) &#123;</span><br><span class="line">        pointInside = [<span class="keyword">super</span> pointInside:point withEvent:event];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pointInside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From <a href="https://github.com/Flipboard/FLEX/blob/master/Classes/ExplorerInterface/FLEXExplorerViewController.m" target="_blank" rel="noopener">https://github.com/Flipboard/FLEX/blob/master/Classes/ExplorerInterface/FLEXExplorerViewController.m</a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)shouldReceiveTouchAtWindowPoint:(<span class="built_in">CGPoint</span>)pointInWindowCoordinates</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">BOOL</span> shouldReceiveTouch = <span class="literal">NO</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGPoint</span> pointInLocalCoordinates = [<span class="keyword">self</span>.view convertPoint:pointInWindowCoordinates fromView:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Always if it's on the toolbar</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(<span class="keyword">self</span>.explorerToolbar.frame, pointInLocalCoordinates)) &#123;</span><br><span class="line">        shouldReceiveTouch = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Always if we're in selection mode</span></span><br><span class="line">    <span class="keyword">if</span> (!shouldReceiveTouch &amp;&amp; <span class="keyword">self</span>.currentMode == FLEXExplorerModeSelect) &#123;</span><br><span class="line">        shouldReceiveTouch = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Always in move mode too</span></span><br><span class="line">    <span class="keyword">if</span> (!shouldReceiveTouch &amp;&amp; <span class="keyword">self</span>.currentMode == FLEXExplorerModeMove) &#123;</span><br><span class="line">        shouldReceiveTouch = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Always if we have a modal presented</span></span><br><span class="line">    <span class="keyword">if</span> (!shouldReceiveTouch &amp;&amp; <span class="keyword">self</span>.presentedViewController) &#123;</span><br><span class="line">        shouldReceiveTouch = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> shouldReceiveTouch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make NSCollectionView programatically in Swift</title>
      <link href="/blog/How-to-make-NSCollectionView-programatically-in-Swift/"/>
      <url>/blog/How-to-make-NSCollectionView-programatically-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/131" target="_blank" rel="noopener">#131</a></strong></p><p>Here’s how to create <code>NSCollectionView</code> programatically. We need to embed it inside <code>NScrollView</code> for scrolling to work. Code is in Swift 4</p><h3 id="NSCollectionView"><a href="#NSCollectionView" class="headerlink" title="NSCollectionView"></a>NSCollectionView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> layout = <span class="type">NSCollectionViewFlowLayout</span>()</span><br><span class="line">layout.minimumLineSpacing = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">collectionView = <span class="type">NSCollectionView</span>()</span><br><span class="line">collectionView.dataSource = <span class="keyword">self</span></span><br><span class="line">collectionView.delegate = <span class="keyword">self</span></span><br><span class="line">collectionView.collectionViewLayout = layout</span><br><span class="line">collectionView.allowsMultipleSelection = <span class="literal">false</span></span><br><span class="line">collectionView.backgroundColors = [.clear]</span><br><span class="line">collectionView.isSelectable = <span class="literal">true</span></span><br><span class="line">collectionView.register(</span><br><span class="line">  <span class="type">Cell</span>.<span class="keyword">self</span>,</span><br><span class="line">  forItemWithIdentifier: <span class="type">NSUserInterfaceItemIdentifier</span>(rawValue: <span class="string">"Cell"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="NScrollView"><a href="#NScrollView" class="headerlink" title="NScrollView"></a>NScrollView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrollView = <span class="type">NSScrollView</span>()</span><br><span class="line">scrollView.documentView = collectionView</span><br><span class="line">view.addSubview(scrollView)</span><br></pre></td></tr></table></figure><h3 id="NSCollectionViewItem"><a href="#NSCollectionViewItem" class="headerlink" title="NSCollectionViewItem"></a>NSCollectionViewItem</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span>: <span class="title">NSCollectionViewItem</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> label = <span class="type">Label</span>()</span><br><span class="line">  <span class="keyword">let</span> myImageView = <span class="type">NSImageView</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.view = <span class="type">NSView</span>()</span><br><span class="line">    <span class="keyword">self</span>.view.wantsLayer = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSCollectionViewDataSource"><a href="#NSCollectionViewDataSource" class="headerlink" title="NSCollectionViewDataSource"></a>NSCollectionViewDataSource</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: NSCollectionView, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> coins.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: NSCollectionView, itemForRepresentedObjectAt indexPath: IndexPath)</span></span> -&gt; <span class="type">NSCollectionViewItem</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> cell = collectionView.makeItem(</span><br><span class="line">    withIdentifier: <span class="type">NSUserInterfaceItemIdentifier</span>(rawValue: <span class="string">"Cell"</span>),</span><br><span class="line">    <span class="keyword">for</span>: indexPath</span><br><span class="line">  ) <span class="keyword">as</span>! <span class="type">Cell</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> coin = coins[indexPath.item]</span><br><span class="line"></span><br><span class="line">  cell.label.stringValue = coin.name</span><br><span class="line">  cell.coinImageView.image =</span><br><span class="line">    <span class="type">NSImage</span>(named: <span class="type">NSImage</span>.<span class="type">Name</span>(rawValue: <span class="string">"USD"</span>))</span><br><span class="line">    ?? <span class="type">NSImage</span>(named: <span class="type">NSImage</span>.<span class="type">Name</span>(rawValue: <span class="string">"Others"</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSCollectionViewDelegateFlowLayout"><a href="#NSCollectionViewDelegateFlowLayout" class="headerlink" title="NSCollectionViewDelegateFlowLayout"></a>NSCollectionViewDelegateFlowLayout</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: NSCollectionView, didSelectItemsAt indexPaths: Set&lt;IndexPath&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> indexPath = indexPaths.first,</span><br><span class="line">    <span class="keyword">let</span> cell = collectionView.item(at: indexPath) <span class="keyword">as</span>? <span class="type">Cell</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: NSCollectionView, didDeselectItemsAt indexPaths: Set&lt;IndexPath&gt;)</span></span> &#123;</span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> indexPath = indexPaths.first,</span><br><span class="line">    <span class="keyword">let</span> cell = collectionView.item(at: indexPath) <span class="keyword">as</span>? <span class="type">Cell</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: NSCollectionView, layout collectionViewLayout: NSCollectionViewLayout, sizeForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">NSSize</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="type">NSSize</span>(</span><br><span class="line">    width: collectionView.frame.size.width,</span><br><span class="line">    height: <span class="number">40</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnsafePointer in Swift</title>
      <link href="/blog/UnsafePointer-in-Swift/"/>
      <url>/blog/UnsafePointer-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/130" target="_blank" rel="noopener">#130</a></strong></p><p>Code is in Swift 4</p><h3 id="Constructing-UnsafeMutablePointer"><a href="#Constructing-UnsafeMutablePointer" class="headerlink" title="Constructing UnsafeMutablePointer"></a>Constructing UnsafeMutablePointer</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> byteCount = <span class="number">32</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">UInt8</span>&gt;.allocate(capacity: byteCount)</span><br></pre></td></tr></table></figure><h3 id="Data-to-UnsafePointer"><a href="#Data-to-UnsafePointer" class="headerlink" title="Data to UnsafePointer"></a>Data to UnsafePointer</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">toPointer</span><span class="params">()</span></span> -&gt; <span class="type">UnsafePointer</span>&lt;<span class="type">UInt8</span>&gt;? &#123;</span><br><span class="line">    <span class="keyword">let</span> buffer = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">UInt8</span>&gt;.allocate(capacity: <span class="built_in">count</span>)</span><br><span class="line">    <span class="keyword">let</span> stream = <span class="type">OutputStream</span>(toBuffer: buffer, capacity: <span class="built_in">count</span>)</span><br><span class="line"></span><br><span class="line">    stream.<span class="keyword">open</span>()</span><br><span class="line">    withUnsafeBytes(&#123; (p: <span class="type">UnsafePointer</span>&lt;<span class="type">UInt8</span>&gt;) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">      stream.write(p, maxLength: <span class="built_in">count</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    stream.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">UnsafePointer</span>&lt;<span class="type">UInt8</span>&gt;(buffer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UnsafePointer-to-Data"><a href="#UnsafePointer-to-Data" class="headerlink" title="UnsafePointer to Data"></a>UnsafePointer to Data</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UnsafePointer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">toData</span><span class="params">()</span></span> -&gt; <span class="type">Data</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Data</span>(bytes: <span class="type">UnsafeRawPointer</span>(<span class="keyword">self</span>), <span class="built_in">count</span>: <span class="number">32</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dealing-with-C-API"><a href="#Dealing-with-C-API" class="headerlink" title="Dealing with C API"></a>Dealing with C API</h3><p>This is how to do keccak hash using C API from <a href="https://github.com/ethereum/ethash/blob/master/src/libethash/sha3.c" target="_blank" rel="noopener">https://github.com/ethereum/ethash/blob/master/src/libethash/sha3.c</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeccakHash</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">hash</span><span class="params">(data: Data)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Data</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> dataPointer = data.toPointer() <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="type">InteralError</span>.invalid</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> byteCount = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">UInt8</span>&gt;.allocate(capacity: byteCount)</span><br><span class="line">    sha3_256(result, byteCount, dataPointer, data.<span class="built_in">count</span>)</span><br><span class="line">    <span class="keyword">return</span> result.toData()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li>See <a href="https://github.com/onmyway133/Reindeers/blob/master/Sources/Extensions.swift" target="_blank" rel="noopener">https://github.com/onmyway133/Reindeers/blob/master/Sources/Extensions.swift</a></li><li><a href="https://oleb.net/blog/2017/12/importing-c-library-into-swift/" target="_blank" rel="noopener"><br>How to import a C library in Swift using the Swift Package Manager</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Building Lyrics</title>
      <link href="/blog/Building-Lyrics/"/>
      <url>/blog/Building-Lyrics/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/129" target="_blank" rel="noopener">#129</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Building SketchAction</title>
      <link href="/blog/Building-SketchAction/"/>
      <url>/blog/Building-SketchAction/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/128" target="_blank" rel="noopener">#128</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Building XcodeColorSense</title>
      <link href="/blog/Building-XcodeColorSense/"/>
      <url>/blog/Building-XcodeColorSense/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/127" target="_blank" rel="noopener">#127</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Building XcodeWay</title>
      <link href="/blog/Building-XcodeWay/"/>
      <url>/blog/Building-XcodeWay/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/126" target="_blank" rel="noopener">#126</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Building Xmas</title>
      <link href="/blog/Building-Xmas/"/>
      <url>/blog/Building-Xmas/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/125" target="_blank" rel="noopener">#125</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to prevent UIVisualEffectView crash</title>
      <link href="/blog/How-to-prevent-UIVisualEffectView-crash/"/>
      <url>/blog/How-to-prevent-UIVisualEffectView-crash/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/124" target="_blank" rel="noopener">#124</a></strong></p><p>We all know that there’s a potential crash with <code>UIVisualEffectView</code> on iOS 11. The fix is to not add sub views directly to <code>UIVisualEffectView</code>, but to its <code>contentView</code>. So we should change</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">effectView.addSubview(button)</span><br></pre></td></tr></table></figure><p>to </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">effectView.contentView.addubView(button)</span><br></pre></td></tr></table></figure><p>Here we don’t need to perform iOS version check, because <code>effectView.contentView</code> works for any iOS versions.</p><h3 id="Potential-cases-for-crashes"><a href="#Potential-cases-for-crashes" class="headerlink" title="Potential cases for crashes"></a>Potential cases for crashes</h3><p>Here are some cases you can potentially cause the crashes</p><p><strong><em>Strange namings</em></strong></p><p>Normally we name our <code>UIVisualEffectView</code> as <code>blurView</code>, <code>effectView</code>. But there’s times we name it differently like <code>navigationView</code>, <code>containerView</code>, <code>boxView</code>, … This way we may completely forget that it’s a <code>UIVisualEffectView</code> 🙀 </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">containerView.addSubview(button)</span><br><span class="line">boxView.insertSubview(label, at: <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong><em>Custom loadView</em></strong></p><p>Sometimes it’s convenient to have our <code>UIViewController &#39;s view</code> as a whole blur view, so that all things inside have a nice blur effect background</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverlayController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> blurView = <span class="type">UIVisualEffectView</span>(effect: <span class="type">UIBlurEffect</span>(style: .dark))</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.loadView()</span><br><span class="line">    <span class="keyword">self</span>.view = blurView</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    view.addSubview(button)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By setting our <code>blurView</code> as <code>view</code> in <code>loadView</code>, we have no idea afterwards that <code>view</code> is actually a <code>UIVisualEffectView</code> 🙀 </p><p><strong><em>Inheritance</em></strong></p><p>What happen if we have another <code>UIViewController</code> that inherits from our <code>OverlayController</code>, all it knows about <code>view</code> is <code>UIView</code>, it does not know that it is a disguising <code>UIVisualEffectView</code> 🙀 </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClocksController</span>: <span class="title">OverlayController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    view.addSubview(timeLabel)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Superclass type</em></strong></p><p>Sometimes declare our things but with protocol or superclass types. Consumers of our API have no clue to know that it is <code>UIVisualEffectView</code> 🙀 </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view: <span class="type">UIView</span> = <span class="type">UIVisualEffectView</span>(effect: <span class="type">UIBlurEffect</span>(style: .dark))</span><br></pre></td></tr></table></figure><p>Here it appears to us that <code>view</code> is of type <code>UIView</code></p><p><strong><em>Legacy codebase</em></strong></p><p>Now imagine you ‘ve handled a legacy codebase to deal with. Perform finding and replacing all those things related to <code>UIVisualEffectView</code> is very hard task. Especially since we tend to write less tests for UI</p><h3 id="Making-it-impossible-to-crash"><a href="#Making-it-impossible-to-crash" class="headerlink" title="Making it impossible to crash"></a>Making it impossible to crash</h3><p>I like concept like <a href="https://wiki.haskell.org/Phantom_type" target="_blank" rel="noopener">Phantom type</a> to limit interface. Here we’re not using type but a wrapper </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BlurView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> effectView: <span class="type">UIVisualEffectView</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(style: <span class="type">UIBlurEffectStyle</span>, backgroundColor: <span class="type">UIColor?</span> = <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.effectView = <span class="type">UIVisualEffectView</span>(effect: <span class="type">UIBlurEffect</span>(style: style))</span><br><span class="line">    <span class="keyword">self</span>.effectView.backgroundColor = backgroundColor</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: .zero)</span><br><span class="line">    insertSubview(effectView, at: <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">addSubview</span><span class="params">(<span class="number">_</span> view: UIView)</span></span> &#123;</span><br><span class="line">    effectView.contentView.addSubview(view)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line"></span><br><span class="line">    effectView.frame = bounds</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we override <code>addSubview</code> to always add views to <code>effectView.contentView</code>. In the <code>init</code> method, we need to call <code>insertSubview</code> instead because of our overriden <code>addSubview</code></p><p>Now <code>BlurView</code> has a blur effect thanks to is underlying <code>UIVisualEffectView</code>, but expose only <code>addSubview</code> because of its <code>UIView</code> interface. This way it is impossible to cause crashes 😎 </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blurView = <span class="type">BlurView</span>(style: .dark)</span><br><span class="line">blurView.addSubview(button(</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Understanding suspend function in Kotlin Coroutine in Android</title>
      <link href="/blog/Understanding-suspend-function-in-Kotlin-Coroutine-in-Android/"/>
      <url>/blog/Understanding-suspend-function-in-Kotlin-Coroutine-in-Android/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/123" target="_blank" rel="noopener">#123</a></strong></p><h2 id="Getting-to-know-Coroutine"><a href="#Getting-to-know-Coroutine" class="headerlink" title="Getting to know Coroutine"></a>Getting to know Coroutine</h2><p>From <a href="https://kotlinlang.org/docs/reference/coroutines.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/coroutines.html</a></p><blockquote><p>To continue the analogy, await() can be a suspending function (hence also callable from within an async {} block) that suspends a coroutine until some computation is done and returns its result:</p></blockquote><p>From <a href="https://kotlinlang.org/docs/tutorials/coroutines-basic-jvm.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/tutorials/coroutines-basic-jvm.html</a></p><blockquote><p>We are using the delay() function that’s like Thread.sleep(), but better: it doesn’t block a thread, but only suspends the coroutine itself. The thread is returned to the pool while the coroutine is waiting, and when the waiting is done, the coroutine resumes on a free thread in the pool.</p></blockquote><blockquote><p>await() can not be called outside a coroutine, because it needs to suspend until the computation finishes, and only coroutines can suspend in a non-blocking way</p></blockquote><h2 id="What-does-suspend-function-mean-in-Kotlin-Coroutine-🤔"><a href="#What-does-suspend-function-mean-in-Kotlin-Coroutine-🤔" class="headerlink" title="What does suspend function mean in Kotlin Coroutine 🤔"></a>What does suspend function mean in Kotlin Coroutine 🤔</h2><p><a href="https://stackoverflow.com/questions/47871868/what-does-suspend-function-mean-in-kotlin-coroutine" target="_blank" rel="noopener">https://stackoverflow.com/questions/47871868/what-does-suspend-function-mean-in-kotlin-coroutine</a></p><p>I’m reading Kotlin Coroutine and know that it is based on suspend function. But what does suspend mean?</p><p>Coroutine or function gets suspended?</p><p>From <a href="https://kotlinlang.org/docs/reference/coroutines.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/coroutines.html</a></p><p>Basically, coroutines are computations that can be suspended without blocking a thread</p><p>I heard people often say “suspend function”. But I think it is the coroutine who gets suspended because it is waiting for the function to finished? “suspend” usually means “cease operation”, in this case the coroutine is idle.</p><p>Should we say the coroutine is suspended ?</p><p>Which coroutine gets suspended?</p><p>From <a href="https://kotlinlang.org/docs/reference/coroutines.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/reference/coroutines.html</a></p><p>To continue the analogy, await() can be a suspending function (hence also callable from within an async {} block) that suspends a coroutine until some computation is done and returns its result:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">async &#123; <span class="comment">// Here I call it the outer async coroutine</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Here I call computation the inner coroutine</span></span><br><span class="line">    <span class="keyword">val</span> result = computation.await()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🤔 It says “that suspends a coroutine until some computation is done”, but coroutine is like a lightweight thread. So if the coroutine is suspended, how can the computation is done ?</p><p>We see await is called on computation, so it might be async that returns Deferred, which means it can start another coroutine</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">computation</span><span class="params">()</span></span>: Deferred&lt;<span class="built_in">Boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> async &#123;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🤔 The quote say that suspends a coroutine. Does it mean suspend the outer async coroutine, or suspend the inner computation coroutine?</p><p>Does suspend mean that while outer async coroutine is waiting (await) for the inner computation coroutine to finish, it (the outer async coroutine) idles (hence the name suspend) and returns thread to the thread pool, and when the child computation coroutine finishes, it (the outer async coroutine) wakes up, takes another thread from the pool and continues?</p><p>The reason I mention the thread is because of <a href="https://kotlinlang.org/docs/tutorials/coroutines-basic-jvm.html" target="_blank" rel="noopener">https://kotlinlang.org/docs/tutorials/coroutines-basic-jvm.html</a></p><p>The thread is returned to the pool while the coroutine is waiting, and when the waiting is done, the coroutine resumes on a free thread in the pool</p><h2 id="Understanding-async"><a href="#Understanding-async" class="headerlink" title="Understanding async"></a>Understanding async</h2><p>From <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md" target="_blank" rel="noopener">https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md</a></p><blockquote><p>Conceptually, async is just like launch. It starts a separate coroutine which is a light-weight thread that works concurrently with all the other coroutines. The difference is that launch returns a Job and does not carry any resulting value, while async returns a Deferred – a light-weight non-blocking future that represents a promise to provide a result later. You can use .await() on a deferred value to get its eventual result, but Deferred is also a Job, so you can cancel it if needed.</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">        <span class="keyword">val</span> one = async &#123; doSomethingUsefulOne() &#125;</span><br><span class="line">        <span class="keyword">val</span> two = async &#123; doSomethingUsefulTwo() &#125;</span><br><span class="line">        println(<span class="string">"The answer is <span class="subst">$&#123;one.await() + two.await()&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"Completed in <span class="variable">$time</span> ms"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>There is a laziness option to async using an optional start parameter with a value of CoroutineStart.LAZY. It starts coroutine only when its result is needed by some await or if a start function is invoked. Run the following example that differs from the previous one only by this option:</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">        <span class="keyword">val</span> one = async(start = CoroutineStart.LAZY) &#123; doSomethingUsefulOne() &#125;</span><br><span class="line">        <span class="keyword">val</span> two = async(start = CoroutineStart.LAZY) &#123; doSomethingUsefulTwo() &#125;</span><br><span class="line">        println(<span class="string">"The answer is <span class="subst">$&#123;one.await() + two.await()&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"Completed in <span class="variable">$time</span> ms"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="What-is-the-difference-between-launch-join-and-async-await-in-Kotlin-coroutines"><a href="#What-is-the-difference-between-launch-join-and-async-await-in-Kotlin-coroutines" class="headerlink" title="What is the difference between launch/join and async/await in Kotlin coroutines"></a>What is the difference between launch/join and async/await in Kotlin coroutines</h2><p><a href="https://stackoverflow.com/a/48079738/1418457" target="_blank" rel="noopener">https://stackoverflow.com/a/48079738/1418457</a></p><p>I find this guide <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md" target="_blank" rel="noopener">https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md</a> to be useful. I will quote the essential parts</p><p>🦄 coroutine</p><p>Essentially, coroutines are light-weight threads.</p><p>So you can think of coroutine as something that manages thread in a very efficient way.</p><p>🐤 launch</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    launch &#123; <span class="comment">// launch new coroutine in background and continue</span></span><br><span class="line">        delay(<span class="number">1000L</span>) <span class="comment">// non-blocking delay for 1 second (default time unit is ms)</span></span><br><span class="line">        println(<span class="string">"World!"</span>) <span class="comment">// print after delay</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"Hello,"</span>) <span class="comment">// main thread continues while coroutine is delayed</span></span><br><span class="line">    Thread.sleep(<span class="number">2000L</span>) <span class="comment">// block main thread for 2 seconds to keep JVM alive</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So launch starts a background thread, does something, and returns a token immediately as Job. You can call join on this Job to block until this launch thread completes</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> job = launch &#123; <span class="comment">// launch new coroutine and keep a reference to its Job</span></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">"World!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"Hello,"</span>)</span><br><span class="line">    job.join() <span class="comment">// wait until child coroutine completes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🦆 async</p><p>Conceptually, async is just like launch. It starts a separate coroutine which is a light-weight thread that works concurrently with all the other coroutines. The difference is that launch returns a Job and does not carry any resulting value, while async returns a Deferred – a light-weight non-blocking future that represents a promise to provide a result later.</p><p>So async starts a background thread, does something, and returns a token immediately as Deferred.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">        <span class="keyword">val</span> one = async &#123; doSomethingUsefulOne() &#125;</span><br><span class="line">        <span class="keyword">val</span> two = async &#123; doSomethingUsefulTwo() &#125;</span><br><span class="line">        println(<span class="string">"The answer is <span class="subst">$&#123;one.await() + two.await()&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"Completed in <span class="variable">$time</span> ms"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can use .await() on a deferred value to get its eventual result, but Deferred is also a Job, so you can cancel it if needed.</p><p>So Deferred is actually a Job. See <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/-deferred/index.html" target="_blank" rel="noopener">https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/-deferred/index.html</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Deferred</span>&lt;<span class="type">out T</span>&gt; : <span class="type">Job </span></span>(source)</span><br></pre></td></tr></table></figure><p>🦋 async is eager by default</p><p>There is a laziness option to async using an optional start parameter with a value of CoroutineStart.LAZY. It starts coroutine only when its result is needed by some await or if a start function is invoked.</p><h2 id="Understand-Kotlin-Coroutines-on-Android-Google-I-O’19"><a href="#Understand-Kotlin-Coroutines-on-Android-Google-I-O’19" class="headerlink" title="Understand Kotlin Coroutines on Android (Google I/O’19)"></a>Understand Kotlin Coroutines on Android (Google I/O’19)</h2><p><a href="https://www.youtube.com/watch?v=BOHK_w09pVA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=BOHK_w09pVA</a></p><img width="1176" alt="cor" src="https://user-images.githubusercontent.com/2284279/57587873-6836f400-750c-11e9-9944-2c00b8d83a87.png">]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hashable and Set in Swift</title>
      <link href="/blog/Hashable-and-Set-in-Swift/"/>
      <url>/blog/Hashable-and-Set-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/122" target="_blank" rel="noopener">#122</a></strong></p><p>From <a href="https://developer.apple.com/documentation/swift/set" target="_blank" rel="noopener">Set</a></p><blockquote><p>You can create a set with any element type that conforms to the Hashable protocol. By default, most types in the standard library are hashable, including strings, numeric and Boolean types, enumeration cases without associated values, and even sets themselves.</p></blockquote><p>From <a href="https://developer.apple.com/documentation/swift/hashable" target="_blank" rel="noopener">Hashable</a></p><blockquote><p>The Hashable protocol inherits from the Equatable protocol, so you must also add an equal-to operator (==) function for your custom type.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Hashable</span> : <span class="title">Equatable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The hash value.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// Hash values are not guaranteed to be equal across different executions of</span></span><br><span class="line">    <span class="comment">/// your program. Do not save hash values to use during a future execution.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> hashValue: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://useyourloaf.com/blog/swift-hashable/" target="_blank" rel="noopener">https://useyourloaf.com/blog/swift-hashable/</a></li><li><a href="http://kelan.io/2015/swift-hashable-for-sets/" target="_blank" rel="noopener">http://kelan.io/2015/swift-hashable-for-sets/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Generic declaration in Swift</title>
      <link href="/blog/Generic-declaration-in-Swift/"/>
      <url>/blog/Generic-declaration-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/121" target="_blank" rel="noopener">#121</a></strong></p><p>These are different</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiffService</span>&lt;<span class="title">T</span>: <span class="title">MKAnnotation</span> &amp; <span class="title">Equatable</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiffService</span>&lt;<span class="title">T</span>: <span class="title">MKAnnotation</span>, <span class="title">Equatable</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A taste of MVVM and Reactive paradigm</title>
      <link href="/blog/A-taste-of-MVVM-and-Reactive-paradigm/"/>
      <url>/blog/A-taste-of-MVVM-and-Reactive-paradigm/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/120" target="_blank" rel="noopener">#120</a></strong></p><p>Original post <a href="https://medium.com/flawless-app-stories/a-taste-of-mvvm-and-reactive-paradigm-5288a819cca1" target="_blank" rel="noopener">https://medium.com/flawless-app-stories/a-taste-of-mvvm-and-reactive-paradigm-5288a819cca1</a></p><hr><h2 id="A-taste-of-MVVM-and-Reactive-paradigm"><a href="#A-taste-of-MVVM-and-Reactive-paradigm" class="headerlink" title="A taste of MVVM and Reactive paradigm"></a>A taste of MVVM and Reactive paradigm</h2><p>I like Swift, like many other object oriented programming languages. Swift allows you to represent real world objects that have some characteristics and can perform some action.</p><p>I tend to think of an app as a world where each object is a person. They work and communicate. If a person can’t do the work alone, he needs to ask for help. Take a project, for example, if the manager has to do all of the work by himself, he will go crazy. So there is a need to organise and delegate tasks, and for many persons to collaborate on the project: designer, tester, scrum master, developer. After the task is done, the manager needs to be informed.</p><p>This may not a good example. But at least you get the importance of communication and delegation in OOP. I was very intrigued by the word “architecture” when I started iOS programming. But after doing for a while, it all comes down to identifying and splitting responsibilities. This article tells a bit about MVC and simple <a href="https://refactoring.com/catalog/extractClass.html" target="_blank" rel="noopener">Extract Class</a>refactoring to MVVM, and how to go further with Rx. You are free to create your own architecture, but whatever you do, consistence is key as to not confuse or surprise your teammates.</p><h2 id="Model-View-Controller"><a href="#Model-View-Controller" class="headerlink" title="Model View Controller"></a>Model View Controller</h2><p>Take a look at the architecture you know the best, MVC, short for Model View Controller. You always get one when you create a new iOS project. View is where you present your data, using UIView, UIButton, UILabel. Model is just a fancy word for data. It can be your entity, data from networking, object from database, or from cache. The controller is the thing that mediates between the model and the view.</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*ETgFfqjBaD8SdQBd.png" alt></p><h2 id="UIViewController-is-the-center-of-the-universe"><a href="#UIViewController-is-the-center-of-the-universe" class="headerlink" title="UIViewController is the center of the universe"></a>UIViewController is the center of the universe</h2><p>The problem with ViewController is that it tends to be huge. Apple puts it as the center of the universe, where it has lots of properties and responsibilities. There are many things that you can only do with a UIViewController. Things like interacting with storyboard, managing the view, configuring view rotation, state restoration. UIViewController is designed with lots of hooks for you to override and customize.</p><p>Take a look at the many sections in UIViewController <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller" target="_blank" rel="noopener">documentation</a>, you can’t do the following without a UIViewController.</p><pre><code>func viewDidLoad()var preferredStatusBarStyle: UIStatusBarStyle { get }UITableViewDataSourcevar presentationController: UIPresentationController? { get }func childViewControllerForScreenEdgesDeferringSystemGestures() -&gt; UIViewController?func didMove(toParentViewController parent: UIViewController?)var systemMinimumLayoutMargins: NSDirectionalEdgeInsetsvar edgesForExtendedLayout: UIRectEdgevar previewActionItems: [UIPreviewActionItem]var navigationItem: UINavigationItemvar shouldAutorotate: Bool</code></pre><p>As your app grows, we need to add more code for other logic. Such as networking, data source, handling multiple delegates, presenting child view controllers. We can, of course, put all the stuff on the view controller, but that results in big view controller and improvement in your scrolling skill. This is where you lose the big picture of responsibilities because all stuff stays in the mega view controller. You tend to introduce code duplication and bugs are hard to fix because they are all over the places.</p><p>The same goes with Page in Windows Phone or Activity in Android. They are intended for a screen or partial screen of functionality. There are certain actions that can only be done through them like <a href="https://msdn.microsoft.com/en-us/library/system.windows.controls.page.onnavigatedto%28v=vs.105%29.aspx" target="_blank" rel="noopener">Page.OnNavigatedTo</a>, <a href="https://developer.android.com/guide/components/activities/activity-lifecycle#oncreate" target="_blank" rel="noopener">Activity.onCreate</a>.</p><p><img src="https://cdn-images-1.medium.com/max/3000/0*FegPo70Zxmid6brv.png" alt></p><h2 id="The-buzzwords-of-architecture"><a href="#The-buzzwords-of-architecture" class="headerlink" title="The buzzwords of architecture"></a>The buzzwords of architecture</h2><p>What do you do when the ViewController is doing a lot? You offset the work to other components. By the way, if you want another object to do the user input handling, you can use the Presenter. If the Presenter is doing too much, then it can offset the business logic to the Interactor. Also, there are more buzzwords that can be used.</p><pre><code>let buzzWords = [  &quot;Model&quot;, &quot;View&quot;, &quot;Controller&quot;, &quot;Entity&quot;, &quot;Router&quot;, &quot;Clean&quot;, &quot;Reactive&quot;,   &quot;Presenter&quot;, &quot;Interactor&quot;, &quot;Megatron&quot;, &quot;Coordinator&quot;, &quot;Flow&quot;, &quot;Manager&quot;]let architecture = buzzWords.shuffled().takeRandom()let acronym = architecture.makeAcronym()</code></pre><p><img src="https://cdn-images-1.medium.com/max/2000/0*N785wG7eDrflu_OT.jpeg" alt></p><p>After all the buzzwords are assembled, we get an architecture. There are <a href="https://github.com/onmyway133/fantastic-ios-architecture" target="_blank" rel="noopener">many</a> of them, ranging from simple extract class refactoring, embracing MVC or taking inspiration from Clean Code, Rx, EventBus or Redux. The choice depends on project, and some teams prefer one architecture over the other.</p><h2 id="The-pragmatic-programmer"><a href="#The-pragmatic-programmer" class="headerlink" title="The pragmatic programmer"></a>The pragmatic programmer</h2><p>People have different opinion about what is good architecture. For me, it is about clear separation of concern, good communication pattern and being comfortable to use. Each component in the architecture should be identifiable and have a specific role. The communication must be clear so that we know which object is talking to each other. This together with good dependency injection will make testing easier.</p><p>Things that sound good in theory may not work well in practice. Separated domain objects are cool, protocol extensions are cool, multiple layers of abstraction are cool. But too many of them can be a problem.</p><p>If you read enough about design patterns, you know they all come down to these simple principles:</p><ul><li><p>Encapsulate what varies: identify the aspects of your application that vary and separate them from what stays the same.</p></li><li><p>Program to an interface, not an implementation</p></li><li><p>Prefer composition over inheritance</p></li></ul><p>If there’s one thing we should master, it’s <strong>composition</strong>. The key is to identify responsibility and compose them in a reasonable and consistent way. Consult with your team mates on what suits the most. Always writing code with the thought that you will also be the future maintainer. Then you will write it differently.</p><h2 id="Don’t-fight-against-the-system"><a href="#Don’t-fight-against-the-system" class="headerlink" title="Don’t fight against the system"></a>Don’t fight against the system</h2><p>Some architectures introduce completely new paradigm. Some of them are cumbersome that there people write scripts to generate boiler plate code. It’s good that there are many approaches to a problem. But for me sometimes it feels they are fighting the system. Some tasks are made easy while some trivial tasks become extremely hard. We should not constrain ourselves to one architecture simply because it are trendy. Be pragmatic, not dogmatic.</p><p>In iOS, we should embrace MVC. UIViewController is not meant for a full screen of content. They can contain and be composed to split the functionalities. We can use <a href="http://khanlou.com/2015/10/coordinators-redux/" target="_blank" rel="noopener">Coordinator</a> and <a href="https://github.com/onmyway133/blog/issues/106" target="_blank" rel="noopener">FlowController</a> to manage dependencies and handle flow. <a href="https://www.swiftbysundell.com/posts/custom-container-view-controllers-in-swift" target="_blank" rel="noopener">Container</a>for state transition, embedded logic <a href="https://www.swiftbysundell.com/posts/logic-controllers-in-swift" target="_blank" rel="noopener">controller</a>, <a href="https://davedelong.com/blog/2017/11/06/a-better-mvc-part-3-fixing-massive-view-controller/" target="_blank" rel="noopener">part</a> of full screen content. This embracing ViewController approach play nicely with MVC in iOS and is my preferable way of doing.</p><h2 id="Model-View-ViewModel"><a href="#Model-View-ViewModel" class="headerlink" title="Model View ViewModel"></a>Model View ViewModel</h2><p><img src="https://cdn-images-1.medium.com/max/2000/0*oRX6izHOCsHdhDoW.png" alt></p><p>Another good-enough way is to offload some of the tasks to another object, let’s call it ViewModel. The name does not matter, you can name it Reactor, Maestro, Dinosaur. The important thing is your team get an agreed name. ViewModel takes some tasks from the ViewController and reports when it’s done. There are <a href="https://www.objc.io/issues/7-foundation/communication-patterns/" target="_blank" rel="noopener">communication patterns</a> in Cocoa Touch such as delegate, closures to use.</p><p>ViewModel is self-contained, has no reference to UIKit, and has just input and output. We can put <a href="https://ashfurrow.com/blog/mvvm-is-exceptionally-ok/" target="_blank" rel="noopener">a lot of things</a> into ViewModel like calculation, formatting, networking, business logic. Also, if you don’t like the ViewModel to become massive, you surely need to create some dedicated objects. ViewModel is the first step to get a slim ViewController.</p><h2 id="Synchronously"><a href="#Synchronously" class="headerlink" title="Synchronously"></a>Synchronously</h2><p>Below is a very simple ViewModel, which formats data based on User model. This is done synchronously.</p><pre><code>class ProfileController: UIViewController {  override func viewDidLoad() {    super.viewDidLoad()    let viewModel = ViewModel(user: user)    nameLabel.text = viewModel.name    birthdayLabel.text = viewModel.birthdayString    salaryLabel.text = viewModel.salary    piLabel.text = viewModel.millionthDigitOfPi  }}</code></pre><h2 id="Asynchronously"><a href="#Asynchronously" class="headerlink" title="Asynchronously"></a>Asynchronously</h2><p>We work with asynchronous API all the time. What if we want to show the user’s number of Facebook friends? For this to work we need to call Facebook API and this operation takes time. The ViewModel can report back via closure.</p><pre><code>viewModel.getFacebookFriends { friends in  self.friendCountLabel.text = &quot;\(friends.count)&quot;}</code></pre><p>Internally, the ViewModel may offload the task to a dedicated Facebook API client object.</p><pre><code>class ViewModel {  func getFacebookFriends(completion: [User] -&gt; Void) {    let client = APIClient()    client.getFacebookFriends(for: user) { friends in      DispatchQueue.main.async {        completion(friends)      }    }  }}</code></pre><h2 id="Jetpack-in-Android"><a href="#Jetpack-in-Android" class="headerlink" title="Jetpack in Android"></a>Jetpack in Android</h2><p><img src="https://cdn-images-1.medium.com/max/2000/0*ORC4mswaenJBZOwP.png" alt></p><p>Google introduced Android Architecture Component, now part of Jetpack, at Google IO 2017. It has ViewModel and LiveData, which is also a type of MVVM applied in Android. ViewModel survives through configuration changes, and notify results in terms of LiveData for Activity to consume.</p><pre><code>class MyActivity : AppCompatActivity() {    override fun onCreate(savedInstanceState: Bundle?, persistentState: PersistableBundle?) {        super.onCreate(savedInstanceState, persistentState)        val model = ViewModelProviders.of(this).get(MyViewModel::class.java)        model.getUsers().observe(this, { users -&gt;            // update UI        })    }}</code></pre><p>This is one of the reason I like ViewModel. If we follow ViewModel like this, then code structures between iOS and Android become similar. There should be no need for some random Javascript cross platform solutions. You learn the concept once, and apply it on both iOS and Android. I learn ViewModel, RxSwift on iOS and feel right at home when I work with RxJava and RxBinding on Android. The Kickstarter project also proves that this works well in their <a href="https://github.com/kickstarter/ios-oss" target="_blank" rel="noopener">iOS</a> and <a href="https://github.com/kickstarter/android-oss" target="_blank" rel="noopener">Android</a> apps.</p><h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><p>To encapsulate the closure, we can create a class called Binding, which can notify one or multiple listeners. It takes advantage of didSet, and the observable property becomes clear.</p><pre><code>class Binding&lt;T&gt; {  var value: T {    didSet {      listener?(value)    }  }  private var listener: ((T) -&gt; Void)?  init(value: T) {    self.value = value  }  func bind(_ closure: @escaping (T) -&gt; Void) {    closure(value)    listener = closure  }}</code></pre><p>Here is how to use it inside ViewModel:</p><pre><code>class ViewModel {  let friends = Binding&lt;[User]&gt;(value: [])  init() {    getFacebookFriends {      friends.value = $0    }  }  func getFacebookFriends(completion: ([User]) -&gt; Void) {      // Do the work  }}</code></pre><p>When ever friends are fetched, or changed, the ViewController is updated accordingly. This is called reaction to changes.</p><pre><code>override func viewDidLoad() {  super.viewDidLoad()  viewModel.friends.bind { friends in    self.friendsCountLabel.text = &quot;\(friends.count)&quot;  }}</code></pre><p>You often see MVVM introduction with reactive frameworks, and it is for a reason. They offer many chaining operators and make reactive programming easier and more declarative.</p><h2 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h2><p>Perhaps the most common reactive framework in Swift is <a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="noopener">RxSwift</a>. The thing I like about it is that it follows <a href="http://reactivex.io/" target="_blank" rel="noopener">ReactiveX</a> pattern. So you will feel more familiar if you already use <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a>, <a href="https://github.com/ReactiveX/rxjs" target="_blank" rel="noopener">RxJs</a>, or <a href="https://github.com/ReactiveX/RxKotlin" target="_blank" rel="noopener">RxKotlin</a>.</p><h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><p><img src="https://cdn-images-1.medium.com/max/2000/0*GXJMWsuz8LvgkEXb.png" alt></p><p>RxSwift unifies sync and async operations through Observable. This is how you make one.</p><pre><code>class ViewModel {  let friends: Observable&lt;[User]&gt;  init() {    let client = APIClient()    friends = Observable&lt;[User]&gt;.create({ subscriber in      client.getFacebookFriends(completion: { friends in        subscriber.onNext(friends)        subscriber.onCompleted()      })      return Disposables.create()    })  }}</code></pre><p>The power of RxSwift lies in its numerous operators, which help you chain Observables. Here you can call 2 network requests, wait for both of them to finish, then sum up the friends. This is very streamlined and saves you lots of time. Here you can just subscribe to the Observable, it will be triggered when the request completes:</p><pre><code>override func viewDidLoad() {  super.viewDidLoad()  viewModel.friends.subscribe(onNext: { friends in    self.friendsCountLabel.text = &quot;\(friends.count)&quot;  })}</code></pre><h2 id="Input-and-output"><a href="#Input-and-output" class="headerlink" title="Input and output"></a>Input and output</h2><p>One thing that is nice about ViewModel and Rx is that we can separate input and output using Observable, which gives a clear interface. Read more at <a href="https://github.com/onmyway133/blog/issues/87" target="_blank" rel="noopener">Learning from Open Source: Input and output container</a>.</p><p>Below it is clear that we fetch is an input, and friends is the viable output.</p><pre><code>class ViewModel {  class Input {    let fetch = PublishSubject&lt;()&gt;()  }  class Output {    let friends: Driver&lt;[User]&gt;  }  let apiClient: APIClient  let input: Input  let output: Output  init(apiClient: APIClient) {    self.apiClient = apiClient    // Connect input and output  }}class ProfileViewController: BaseViewController&lt;ProfileView&gt; {  let viewModel: ProfileViewModelType  init(viewModel: ProfileViewModelType) {    self.viewModel = viewModel  }  override func viewDidLoad() {    super.viewDidLoad()    // Input    viewModel.input.fetch.onNext(())    // Output    viewModel.output.friends.subscribe(onNext: { friends in      self.friendsCountLabel.text = &quot;\(friends.count)&quot;    })  }}</code></pre><h2 id="How-reactive-works"><a href="#How-reactive-works" class="headerlink" title="How reactive works"></a>How reactive works</h2><p>If you feel like Rx, it’s good to get an understanding of them after using some frameworks for a while. There are some concepts like Signal, SignalProducer, Observable, Promise, Future, Task, Job, Launcher, Async and some people can have a very distinction about them. Here I simply call it Signal, which is something that can signal values.</p><h2 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h2><p>Signal and its <a href="https://en.wikipedia.org/wiki/Result_type" target="_blank" rel="noopener">Result</a> are just <a href="https://en.wikipedia.org/wiki/Monad_%28functional_programming%29" target="_blank" rel="noopener">monads</a>, which are thing that can be mapped and chained.</p><p>Signal makes use of deferred execution callback closures. It can be pushed or pulled. Which is just how the Signal updates its value and the order the callbacks are called.</p><p>Execution callback closure means that we pass a function to another function. And the passed in function will get called when appropriated.</p><h2 id="Sync-vs-Async"><a href="#Sync-vs-Async" class="headerlink" title="Sync vs Async"></a>Sync vs Async</h2><p>Monad can be in either sync or async mode. Sync is easier to understand, but async is somewhat you’re already familiar and used in practice.</p><p>Basically,</p><ul><li><p>Sync: you get the returned value right away via return</p></li><li><p>Async: you get the returned value via callback block</p></li></ul><p>Here is an example of simple sync and async free functions:</p><pre><code>// Syncfunc sum(a: Int, b: Int) -&gt; Int {    return a + b}// Asyncfunc sum(a: Int, b: Int, completion: Int -&gt; Void) {    // Assumed it is a very long task to get the result    let result = a + b    completion(result)}</code></pre><p>And how sync and async apply to Result type. Notice the async version, we get the transformed value in a completion closure instead of immediate return from function.</p><pre><code>enum Result&lt;T&gt; {  case value(value: T)  case failure(error: Error)  // Sync  public func map&lt;U&gt;(f: (T) -&gt; U) -&gt; Result&lt;U&gt; {    switch self {    case let .value(value):      return .value(value: f(value))    case let .failure(error):      return .failure(error: error)    }  }  // Async  public func map&lt;U&gt;(f: @escaping ((T), (U) -&gt; Void) -&gt; Void) -&gt; (((Result&lt;U&gt;) -&gt; Void) -&gt; Void) {    return { g in   // g: Result&lt;U&gt; -&gt; Void      switch self {      case let .value(value):        f(value) { transformedValue in  // transformedValue: U          g(.value(value: transformedValue))        }      case let .failure(error):        g(.failure(error: error))      }    }  }}</code></pre><h2 id="Push-Signal"><a href="#Push-Signal" class="headerlink" title="Push Signal"></a>Push Signal</h2><p>Given a chained signals like this:</p><p>A -(map)-&gt; B -(flatMap)-&gt; C -(flatMap)-&gt; D -(subscribe)</p><p>Push Signal, means that when the source signal A is sent an event, it propagates that event via callbacks. PushSignal is similar to PublishSubject in RxSwift.</p><ul><li><p>Triggered by sending event to the source signal.</p></li><li><p>We must keep A as it keeps the others around</p></li><li><p>We subscribe the last D</p></li><li><p>We send event to the first A</p></li><li><p>A ‘s callback gets called, it it in turn calls callback of B with the result of A ‘s map, then B ‘s callback calls C ‘s callback with the result of B‘s flatMap, and so on.</p></li></ul><p>It is similar to <a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promise A+</a>, you can see my Swift implementation of Promise A+ <a href="https://github.com/onmyway133/Then/blob/master/Pod/Classes/Promise.swift" target="_blank" rel="noopener">in my Then framework</a>. For now, here is the Swift 4 implementation of a simple PushSignal.</p><pre><code>public final class PushSignal&lt;T&gt; {  var event: Result&lt;T&gt;?  var callbacks: [(Result&lt;T&gt;) -&gt; Void] = []  let lockQueue = DispatchQueue(label: &quot;Serial Queue&quot;)  func notify() {    guard let event = event else {      return    }    callbacks.forEach { callback in      callback(event)    }  }  func update(event: Result&lt;T&gt;) {    lockQueue.sync {      self.event = event    }    notify()  }  public func subscribe(f: @escaping (Result&lt;T&gt;) -&gt; Void) -&gt; Signal&lt;T&gt; {    // Callback    if let event = event {      f(event)    }    callbacks.append(f)    return self  }  public func map&lt;U&gt;(f: @escaping (T) -&gt; U) -&gt; Signal&lt;U&gt; {    let signal = Signal&lt;U&gt;()    _ = subscribe { event in      signal.update(event: event.map(f: f))    }    return signal  }}</code></pre><p>Below is how a PushSignal is used to transform a chain from string to its length, you should see 4, the length of the string “test” printed.</p><pre><code>let signal = PushSignal&lt;String&gt;()_ = signal.map { value in  return value.count}.subscribe { event in  if case let .value(value) = event {    print(value)  } else {    print(&quot;error&quot;)  }}signal.update(event: .value(value: &quot;test&quot;))</code></pre><h2 id="Pull-Signal"><a href="#Pull-Signal" class="headerlink" title="Pull Signal"></a>Pull Signal</h2><p>Given a chained signals like this:</p><p>A -(map)-&gt; B -(flatMap)-&gt; C -(flatMap)-&gt; D -(subscribe)</p><p>Pull Signal, sometimes called Future, means when we subscribe to the final signal D, it causes the previous signals to action:</p><ul><li><p>Triggered by subscribing to the final signal D;</p></li><li><p>We must keep D as it keeps the others around;</p></li><li><p>We subscribe the last D;</p></li><li><p>D ‘s operation runs, and it cause C ‘s operation to runs, … then A ‘s operation runs. It is in A that the task is performed (like fetching network, retrieving database, file access, heavy computation, …) to get the result, and A ‘s completion gets called. Then A’s completion calls B ‘s completion with the result mapped by B ‘s map, … all the way to the subscriber ‘s completion block.</p></li></ul><p>Here is a Swift 4 implementation of PullSignal. PullSignal is similar to Observablein RxSwift and SignalProducer in ReactiveSwift.</p><pre><code>public struct PullSignal&lt;T&gt; {  let operation: ((Result&lt;T&gt;) -&gt; Void) -&gt; Void  public init(operation: @escaping ((Result&lt;T&gt;) -&gt; Void) -&gt; Void) {    self.operation = operation  }  public func start(completion: (Result&lt;T&gt;) -&gt; Void) {    operation() { event in      completion(event)    }  }  public func map&lt;U&gt;(f: @escaping (T) -&gt; U) -&gt; PullSignal&lt;U&gt; {    return PullSignal&lt;U&gt; { completion in      self.start { event in        completion(event.map(f: f))      }    }  }}</code></pre><p>The chain is inactive until you call start at the last signal in the chain, which triggers operation flow all over to the first signal. Run this snippet and you should see 4, the length of the string “test” printed on the console.</p><pre><code>let signal = PullSignal&lt;String&gt; { completion in  // There should be some long running operation here  completion(Result.value(value: &quot;test&quot;))}signal.map { value in  value.count}.start { event in  if case let .value(value) = event {    print(value)  } else {    print(&quot;error&quot;)  }}</code></pre><p>I hope those snippets are simple enough to help you understand how signal works under the hood, and how to differentiate hot and cold signals. To get a fully working Signal framework, you need to implement more operations. Such as retry, rebounce, throttle, queue, flatten, filter, delay, combine and add support for UIKit like RxCocoa does. Find out how to implement in my <a href="https://github.com/onmyway133/archives/tree/master/Signal/Pod/Classes" target="_blank" rel="noopener">Signal</a> repo.</p><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>Architecture is a very opinionated topic. Hopefully this article gives you some ideas to add into your decision points. MVC is dominant in iOS, MVVM is a good friend and Rx is a powerful tool. Here are some more interesting readings:</p><ul><li><a href="https://ashfurrow.com/blog/mvvm-is-exceptionally-ok/" target="_blank" rel="noopener">MVVM is Exceptionally OK</a></li><li><a href="https://academy.realm.io/posts/krzysztof-zablocki-mDevCamp-ios-architecture-mvvm-mvc-viper/" target="_blank" rel="noopener">Good iOS Application Architecture: MVVM vs. MVC vs. VIPER</a></li><li><a href="https://www.youtube.com/watch?v=YWVzCd5FYbs" target="_blank" rel="noopener">A Better MVC</a></li><li><a href="https://blog.uptech.team/taming-great-complexity-mvvm-coordinators-and-rxswift-8daf8a76e7fd" target="_blank" rel="noopener">Taming Great Complexity: MVVM, Coordinators and RxSwift</a></li><li><a href="http://blogs.microsoft.co.il/bnaya/2010/03/13/rx-for-beginners-part-9-hot-vs-cold-observable/" target="_blank" rel="noopener">Rx — for beginners (part 9): Hot Vs. Cold observable</a></li><li><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/HotAndColdObservables.md" target="_blank" rel="noopener">Hot and Cold Observables</a></li><li><a href="https://stackoverflow.com/questions/17082255/when-to-use-ienumerable-vs-iobservable" target="_blank" rel="noopener">When to use IEnumerable vs IObservable?</a></li><li><a href="https://www.youtube.com/watch?v=AcDaWe3S75c" target="_blank" rel="noopener">Functional Reactive Programming without Black Magic</a></li><li><a href="https://www.youtube.com/watch?v=mbd6g7NfR-8" target="_blank" rel="noopener">Swift Sync and Async Error Handling</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Collection Update</title>
      <link href="/blog/Collection-Update/"/>
      <url>/blog/Collection-Update/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/119" target="_blank" rel="noopener">#119</a></strong></p><p>This is about collection update, how to provide correct IndexPath and a simple diffing algorithm</p><ul><li>Excerpt from my talk at CocoaHeads, Oslo <a href="https://www.meetup.com/CocoaHeads-Oslo/events/244892347/" target="_blank" rel="noopener">https://www.meetup.com/CocoaHeads-Oslo/events/244892347/</a></li><li>Slide <a href="https://speakerdeck.com/onmyway133/collection-update" target="_blank" rel="noopener">https://speakerdeck.com/onmyway133/collection-update</a></li></ul><h2 id="CollectionView"><a href="#CollectionView" class="headerlink" title="CollectionView"></a>CollectionView</h2><p>It’s hard to imagine of any apps that don’t use Table View or CollectionView. And by CollectionView, I actually mean UICollectionView 😉  . Most of the time, we show something with response from backend, then potentially update and insert new items as data changed.</p><p><img src="https://user-images.githubusercontent.com/2284279/34838146-55461fbc-f6fd-11e7-928f-b5461a51893f.png" alt="collectionview"></p><p>We can totally call <code>reloadData</code> to reflect the changes, but an animation is better here as it gives user better understanding of what’s going on, and to not surprise them. </p><p>This talks about <code>UICollectionView</code>, but <code>UITableView</code> behaves the same</p><h2 id="Drag-and-Drop"><a href="#Drag-and-Drop" class="headerlink" title="Drag and Drop"></a>Drag and Drop</h2><p>Let’s imagine an app where user are allowed to customise their experience by moving items from one collection to another.</p><p>You can take a look at the example <a href="https://github.com/onmyway133/CollectionUpdateExample/tree/master/DragAndDrop" target="_blank" rel="noopener">DragAndDrop</a> which is using the new <a href="https://developer.apple.com/ios/drag-and-drop/" target="_blank" rel="noopener">drag and drop API</a> in iOS 11.</p><p><img src="https://user-images.githubusercontent.com/2284279/33726942-d084fa74-db76-11e7-95e0-6580f4c5fc9d.png" alt="ipad"></p><p>You must ensure that your data is changed before calling update methods on <code>UICollectionView</code>. And then we call <code>deleteItems</code> and <code>insertItems</code> to reflect data changes. <code>UICollectionView</code> performs a nice animation for you</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, performDropWith coordinator: UICollectionViewDropCoordinator)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> destinationIndexPath = coordinator.destinationIndexPath</span><br><span class="line">  <span class="keyword">let</span> sourceIndexPath = coordinator.items.last?.dragItem.localObject <span class="keyword">as</span>! <span class="type">IndexPath</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove</span></span><br><span class="line">  sourceItems.remove(at: sourceIndexPath.item)</span><br><span class="line">  sourceCollectionView.deleteItems(at: [sourceIndexPath])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert</span></span><br><span class="line">  destinationItems.insert(draggedItem, at: destinationIndexPath.item)</span><br><span class="line">  destinationCollectionView.insertItems(at: [destinationIndexPath])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NSInternalInconsistencyException"><a href="#NSInternalInconsistencyException" class="headerlink" title="NSInternalInconsistencyException"></a>NSInternalInconsistencyException</h2><p>If you have large number of items with many insertions and deletions from backend response, you need to calculate the correct IndexPath to call, which are not easy thing. Most the time you will get the following crashes</p><blockquote><p>Terminating app due to uncaught exception ‘NSInternalInconsistencyException’,<br>reason: ‘Invalid update: invalid number of items in section 0.<br>The number of items contained in an existing section after the update (213)<br>must be equal to the number of items contained in that section before<br>the update (154), plus or minus the number of items inserted or<br>deleted from that section (40 inserted, 0 deleted) and plus<br>or minus the number of items moved into or out of<br>that section (0 moved in, 0 moved out).’</p></blockquote><p>In my experience it happened randomly because everyone has different data. Although the message is very descriptive, it may take a while to figure it out.</p><h2 id="Game-of-IndexPath"><a href="#Game-of-IndexPath" class="headerlink" title="Game of IndexPath"></a>Game of IndexPath</h2><p>Let’s refine our knowledge of <code>IndexPath</code> by going through some examples. With a collection of 6 items, we perform some update operations and figure out what <code>IndexPath</code> should be. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>]</span><br></pre></td></tr></table></figure><p>Take a look at my example here <a href="https://github.com/onmyway133/CollectionUpdateExample/tree/master/CollectionUpdateExample" target="_blank" rel="noopener">CollectionUpdateExample</a>, there are many more examples</p><div align="center"><img src="https://user-images.githubusercontent.com/2284279/33727113-647cfe34-db77-11e7-8533-4dd84657e718.png" height="400"><img src="https://user-images.githubusercontent.com/2284279/33727115-6499e350-db77-11e7-8030-971bd9a29040.png" height="400"></div><h2 id="index-vs-offset"><a href="#index-vs-offset" class="headerlink" title="index vs offset"></a>index vs offset</h2><p>Before we go any further, I just want to mention that, by <code>index</code> I actually mean <code>offset from the start</code>. If you take a look at the <a href="https://developer.apple.com/documentation/swift/array/1687832-enumerated" target="_blank" rel="noopener">enumerated</a> function, it suggests the name as <code>offset</code> instead of <code>index</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Array</span>(<span class="number">0</span>..&lt;<span class="number">10</span>).enumerated().forEach &#123; (offset, element) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <a href="https://en.wikipedia.org/wiki/Zero-based_numbering" target="_blank" rel="noopener">zero based numbering</a> could shed some light on this matter</p><blockquote><p>Particularly in C, where arrays are closely tied to pointer arithmetic, this makes for a simpler implementation: the subscript refers to an offset from the starting position of an array, so the first element has an offset of zero.</p></blockquote><h3 id="1-Insert-3-items-at-the-end"><a href="#1-Insert-3-items-at-the-end" class="headerlink" title="1.  Insert 3 items at the end"></a>1.  Insert 3 items at the end</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">items.append(contentsOf: [<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// a, b, c, d, e, f, g, h, i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexPaths = <span class="type">Array</span>(<span class="number">6</span>...<span class="number">8</span>).<span class="built_in">map</span> &#123; <span class="type">IndexPath</span>(item: $<span class="number">0</span>, section: <span class="number">0</span>) &#125;</span><br><span class="line">collectionView.insertItems(at: indexPaths)</span><br></pre></td></tr></table></figure><h3 id="2-Delete-3-items-at-the-end"><a href="#2-Delete-3-items-at-the-end" class="headerlink" title="2. Delete 3 items at the end"></a>2. Delete 3 items at the end</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">items.removeLast()</span><br><span class="line">items.removeLast()</span><br><span class="line">items.removeLast()</span><br><span class="line"></span><br><span class="line"><span class="comment">// a, b, c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexPaths = <span class="type">Array</span>(<span class="number">3</span>...<span class="number">5</span>).<span class="built_in">map</span> &#123; <span class="type">IndexPath</span>(item: $<span class="number">0</span>, section: <span class="number">0</span>) &#125;</span><br><span class="line">collectionView.deleteItems(at: indexPaths)</span><br></pre></td></tr></table></figure><h3 id="3-Update-item-at-index-2"><a href="#3-Update-item-at-index-2" class="headerlink" title="3. Update item at index 2"></a>3. Update item at index 2</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">items[<span class="number">2</span>] = <span class="string">"👻"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a, b, 👻, d, e, f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(item: <span class="number">2</span>, section: <span class="number">0</span>)</span><br><span class="line">collectionView.reloadItems(at: [indexPath])</span><br></pre></td></tr></table></figure><h3 id="4-Move-item-“c”-to-the-end"><a href="#4-Move-item-“c”-to-the-end" class="headerlink" title="4. Move item “c” to the end"></a>4. Move item “c” to the end</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">items.remove(at: <span class="number">2</span>)</span><br><span class="line">items.append(<span class="string">"c"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a, b, d, e, f, c</span></span><br><span class="line"></span><br><span class="line">collectionView.moveItem(</span><br><span class="line">  at: <span class="type">IndexPath</span>(item: <span class="number">2</span>, section: <span class="number">0</span>),</span><br><span class="line">  to: <span class="type">IndexPath</span>(item: <span class="number">5</span>, section :<span class="number">0</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="5-Delete-3-items-at-the-beginning-then-insert-3-items-at-the-end"><a href="#5-Delete-3-items-at-the-beginning-then-insert-3-items-at-the-end" class="headerlink" title="5. Delete 3 items at the beginning, then insert 3 items at the end"></a>5. Delete 3 items at the beginning, then insert 3 items at the end</h3><p>With multiple different operations, we should use <a href="https://developer.apple.com/documentation/uikit/uicollectionview/1618045-performbatchupdates" target="_blank" rel="noopener">performBatchUpdates</a></p><blockquote><p>You can use this method in cases where you want to make multiple changes to the collection view in one single animated operation, as opposed to in several separate animations. You might use this method to insert, delete, reload, or move cells or use it to change the layout parameters associated with one or more cells</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">items.removeFirst()</span><br><span class="line">items.removeFirst()</span><br><span class="line">items.removeFirst()</span><br><span class="line"></span><br><span class="line">items.append(contentsOf: [<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// d, e, f, g, h, i</span></span><br><span class="line"></span><br><span class="line">collectionView.performBatchUpdates(&#123;</span><br><span class="line">  <span class="keyword">let</span> deleteIndexPaths = <span class="type">Array</span>(<span class="number">0</span>...<span class="number">2</span>).<span class="built_in">map</span> &#123; <span class="type">IndexPath</span>(item: $<span class="number">0</span>, section: <span class="number">0</span>) &#125;</span><br><span class="line">  collectionView.deleteItems(at: deleteIndexPaths)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> insertIndexPaths = <span class="type">Array</span>(<span class="number">3</span>...<span class="number">5</span>).<span class="built_in">map</span> &#123; <span class="type">IndexPath</span>(item: $<span class="number">0</span>, section: <span class="number">0</span>) &#125;</span><br><span class="line">  collectionView.insertItems(at: insertIndexPaths)</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="6-Insert-3-items-at-the-end-then-delete-3-items-beginning"><a href="#6-Insert-3-items-at-the-end-then-delete-3-items-beginning" class="headerlink" title="6. Insert 3 items at the end, then delete 3 items beginning"></a>6. Insert 3 items at the end, then delete 3 items beginning</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">items.append(contentsOf: [<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>])</span><br><span class="line"></span><br><span class="line">items.removeFirst()</span><br><span class="line">items.removeFirst()</span><br><span class="line">items.removeFirst()</span><br><span class="line"></span><br><span class="line"><span class="comment">// d, e, f, g, h, i</span></span><br><span class="line"></span><br><span class="line">collectionView.performBatchUpdates(&#123;</span><br><span class="line">  <span class="keyword">let</span> insertIndexPaths = <span class="type">Array</span>(<span class="number">6</span>...<span class="number">8</span>).<span class="built_in">map</span> &#123; <span class="type">IndexPath</span>(item: $<span class="number">0</span>, section: <span class="number">0</span>) &#125;</span><br><span class="line">  collectionView.insertItems(at: insertIndexPaths)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> deleteIndexPaths = <span class="type">Array</span>(<span class="number">0</span>...<span class="number">2</span>).<span class="built_in">map</span> &#123; <span class="type">IndexPath</span>(item: $<span class="number">0</span>, section: <span class="number">0</span>) &#125;</span><br><span class="line">  collectionView.deleteItems(at: deleteIndexPaths)</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h2 id="🙀"><a href="#🙀" class="headerlink" title="🙀"></a>🙀</h2><p>If you run the example 6, you will get a crash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Terminating app due to uncaught exception </span><br><span class="line">&apos;NSInternalInconsistencyException&apos;, </span><br><span class="line">reason: &apos;attempt to insert item 6 into section 0, </span><br><span class="line">but there are only 6 items in section 0 after the update&apos;</span><br></pre></td></tr></table></figure><h2 id="performBatchUpdates"><a href="#performBatchUpdates" class="headerlink" title="performBatchUpdates"></a>performBatchUpdates</h2><p>It is because the way <code>performBatchUpdates</code> works. If you take a look at the <a href="https://developer.apple.com/documentation/uikit/uicollectionview/1618045-performbatchupdates" target="_blank" rel="noopener">documentation</a></p><blockquote><p>Deletes are processed before inserts in batch operations. This means the indexes for the deletions are processed relative to the indexes of the collection view’s state before the batch operation, and the indexes for the insertions are processed relative to the indexes of the state after all the deletions in the batch operation.</p></blockquote><p>No matter how we call insert or delete, <code>performBatchUpdates</code> always performs deletions first. So we need to call <code>deleteItems</code> and <code>insertItems</code> as if the deletions occur first.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">items.append(contentsOf: [<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>])</span><br><span class="line"></span><br><span class="line">items.removeFirst()</span><br><span class="line">items.removeFirst()</span><br><span class="line">items.removeFirst()</span><br><span class="line"></span><br><span class="line"><span class="comment">// d, e, f, g, h, i</span></span><br><span class="line"></span><br><span class="line">collectionView.performBatchUpdates(&#123;</span><br><span class="line">  <span class="keyword">let</span> deleteIndexPaths = <span class="type">Array</span>(<span class="number">0</span>...<span class="number">2</span>).<span class="built_in">map</span> &#123; <span class="type">IndexPath</span>(item: $<span class="number">0</span>, section: <span class="number">0</span>) &#125;</span><br><span class="line">  collectionView.deleteItems(at: deleteIndexPaths)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> insertIndexPaths = <span class="type">Array</span>(<span class="number">3</span>...<span class="number">5</span>).<span class="built_in">map</span> &#123; <span class="type">IndexPath</span>(item: $<span class="number">0</span>, section: <span class="number">0</span>) &#125;</span><br><span class="line">  collectionView.insertItems(at: insertIndexPaths)</span><br><span class="line">&#125;, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><p>There are many operations on <code>UICollectionView</code>, and there are operations to update whole section as well. Take a look <a href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/TableView_iPhone/ManageInsertDeleteRow/ManageInsertDeleteRow.html" target="_blank" rel="noopener">Ordering of Operations and Index Paths</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insertItems(at indexPaths: [<span class="type">IndexPath</span>])</span><br><span class="line">deleteItems(at indexPaths: [<span class="type">IndexPath</span>])</span><br><span class="line">reloadItems(at indexPaths: [<span class="type">IndexPath</span>])</span><br><span class="line">moveItem(at indexPath: <span class="type">IndexPath</span>, to newIndexPath: <span class="type">IndexPath</span>)</span><br><span class="line">performBatchUpdates(<span class="number">_</span> updates, completion)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insertSections(<span class="number">_</span> sections: <span class="type">IndexSet</span>)</span><br><span class="line">deleteSections(<span class="number">_</span> sections: <span class="type">IndexSet</span>)</span><br><span class="line">reloadSections(<span class="number">_</span> sections: <span class="type">IndexSet</span>)</span><br><span class="line">moveSection(<span class="number">_</span> section: <span class="type">Int</span>, toSection newSection: <span class="type">Int</span>)</span><br></pre></td></tr></table></figure><p><img src="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/TableView_iPhone/Art/batch_insert_delete.jpg" alt="inline"></p><h2 id="Edit-distance"><a href="#Edit-distance" class="headerlink" title="Edit distance"></a>Edit distance</h2><p>Doing these calculations by hand is quite tedious and error prone. We can build our own abstraction using some algorithms. The naive one is <a href="https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm" target="_blank" rel="noopener">Wagner–Fischer algorithm</a> which uses <a href="https://en.wikipedia.org/wiki/Dynamic_programming" target="_blank" rel="noopener">Dynamic Programming</a> to tell the edit distance between two strings of characters.</p><p>Edit distance means the number of steps needed to change from one string to another. String is just a collection of characters, so we can generalise this concept to make it work for any collection of items. Instead of comparing character, we require items to conform to <code>Equatable</code></p><h2 id="“kit”-gt-“kat”"><a href="#“kit”-gt-“kat”" class="headerlink" title="“kit” -&gt; “kat”"></a>“kit” -&gt; “kat”</h2><p>How can we transform form the word “kit” to “kat”? What kinds of operations do we nede to perform? You may tell “just change the i to a”, but this trivial example helps you understand the algorithm. Let’s get started.</p><p><img src="https://user-images.githubusercontent.com/2284279/33278613-5dc25c70-d39c-11e7-8a5c-2e8e6946ae36.jpg" alt="inline"></p><h3 id="Deletions"><a href="#Deletions" class="headerlink" title="Deletions"></a>Deletions</h3><p>If we go from “kit” to an empty string “”, we need 3 deletions </p><p><img src="https://user-images.githubusercontent.com/2284279/33243688-2bade616-d2eb-11e7-8463-f913695818ef.png" alt="inline"></p><p>“k” -&gt; “”  👉 1 deletion<br>“ki” -&gt; “” 👉 2 deletions<br>“kit” -&gt; “” 👉    3 deletions</p><h3 id="Insertions"><a href="#Insertions" class="headerlink" title="Insertions"></a>Insertions</h3><p>If we go from an empty string “” to “kat”, we need 3 insertions</p><p><img src="https://user-images.githubusercontent.com/2284279/33243726-c078ee3a-d2eb-11e7-918f-8bba30be0c0e.png" alt="inline"></p><p>“” -&gt; “k”  👉    1 insertion<br>“” -&gt; “ka”  👉    2 insertions<br>“” -&gt; “kat”  👉    3 insertions</p><h3 id="If-equal-take-value-from-the-top-left"><a href="#If-equal-take-value-from-the-top-left" class="headerlink" title="If equal, take value from the top left"></a>If equal, take value from the top left</h3><p>You can think of the algorithm as if we go from source string, to empty string, to destination string. We try to find the minimum steps to update. Going horizontally means insertions, vertically means deletions and diagonally means substitutions</p><p>This way we can build our matrix, iterate from row to row, column by column. First, the letter “k” from source collection is the same with letter “k” from destination collection, we simply take value from the top left, which is 0 substituion</p><p><img src="https://user-images.githubusercontent.com/2284279/33243911-9f1e87d8-d2ee-11e7-8dde-bb2f02593eca.png" alt="inline"></p><h3 id="If-not-equal"><a href="#If-not-equal" class="headerlink" title="If not equal"></a>If not equal</h3><p>We continue with the next letter from the destination collection. Here “k” and “a” are not the same. We take minimum value from left, top, top left. Then increase by one</p><p><img src="https://user-images.githubusercontent.com/2284279/33243912-9f371230-d2ee-11e7-8386-85ed3f9f4bcf.png" alt="inline"></p><p>Here we take value from left, which is horizontally, so we increase by 1 insertion</p><h3 id="“k”-gt-“kat”-👉-2-insertions"><a href="#“k”-gt-“kat”-👉-2-insertions" class="headerlink" title="“k” -&gt; “kat” 👉 2 insertions"></a>“k” -&gt; “kat” 👉 2 insertions</h3><p>Continue, they are not the same, so we take value from left horizontally. Here you can see it kind makes sense, as to go from “k” to “kat”, we need 2 insertions, which is to insert letters “a” and “t”</p><p><img src="https://user-images.githubusercontent.com/2284279/33243913-9f4ed1ea-d2ee-11e7-9fae-71693ec1844d.png" alt="inline"></p><h3 id="The-bottom-right-value"><a href="#The-bottom-right-value" class="headerlink" title="The bottom right value"></a>The bottom right value</h3><p>Continue with the next row, and next row until we  got to the bottom right value, which gives you the edit distance. Here 1 substitution means that we need to perform 1 substitution to go from “kit” to “kat”, which is update “i” with “a’</p><p><img src="https://user-images.githubusercontent.com/2284279/35505204-a7b5f0f6-04e5-11e8-8124-4e8868f2ea8d.png" alt="final"></p><p>You can easily see that we need to update index 1. But how do we know that it is index 1 🤔 </p><h2 id="Edit-steps"><a href="#Edit-steps" class="headerlink" title="Edit steps"></a>Edit steps</h2><p>In each step, we need to associate the index of item in source and destination collection. You can take a look at my implementation <a href="https://github.com/onmyway133/DeepDiff" target="_blank" rel="noopener">DeepDiff</a></p><p><img src="https://github.com/onmyway133/DeepDiff/raw/master/Screenshots/collection.gif" alt="inline"></p><h2 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h2><p>We iterate through the matrix, with <code>m</code> and <code>n</code> are the length of source and destination collection respectively, we can see that the complexity of this algorithm is 0(mn).</p><p>Also the performance greatly depends on the size of the collection and how complex the item is. The more complex and how deep you want to perform <code>Equatable</code> can greatly affect your performance.</p><h2 id="Improving-performance"><a href="#Improving-performance" class="headerlink" title="Improving performance"></a>Improving performance</h2><p>The section <a href="https://github.com/onmyway133/DeepDiff#how-does-it-work" target="_blank" rel="noopener">How does it work</a> shows several ways we can improve performance.</p><p>Firstly, instead of building a matrix, which costs memory <code>m*n</code>, we can just use temporary arrays as holder. </p><p>Secondly, to quickly compare 2 items, we can use <code>Hashable</code>, as 2 identical items will always have the same hash.</p><h2 id="More-performance"><a href="#More-performance" class="headerlink" title="More performance"></a>More performance</h2><p>If you want better performance, then algorithms with linear complexity may be interested to you. Take a look at <a href="https://github.com/onmyway133/blog/issues/99" target="_blank" rel="noopener">Diff algorithm</a></p><ul><li><a href="http://documents.scribd.com/docs/10ro9oowpo1h81pgh1as.pdf" target="_blank" rel="noopener">Heckel</a></li><li><a href="https://publications.mpi-cbg.de/Wu_1990_6334.pdf" target="_blank" rel="noopener">Wu</a></li><li><a href="http://www.xmailserver.org/diff2.pdf" target="_blank" rel="noopener">Myers</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Commit as another user on GitHub</title>
      <link href="/blog/Commit-as-another-user-on-GitHub/"/>
      <url>/blog/Commit-as-another-user-on-GitHub/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/118" target="_blank" rel="noopener">#118</a></strong></p><p>GitHub identifies users by email, so you can totally commit using someone ‘s email. This is how to configure in SourceTree</p><p><img src="https://user-images.githubusercontent.com/2284279/33725599-e8fb350e-db72-11e7-959a-4d8eca6f5a9a.png" alt="sourcetree"></p><ul><li><a href="https://help.github.com/articles/signing-commits-using-gpg/" target="_blank" rel="noopener">https://help.github.com/articles/signing-commits-using-gpg/</a></li><li><a href="https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/" target="_blank" rel="noopener">https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Badge in GitHub</title>
      <link href="/blog/Badge-in-GitHub/"/>
      <url>/blog/Badge-in-GitHub/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/117" target="_blank" rel="noopener">#117</a></strong></p><p>GitHub is so awesome. It is where people around the world collaborate with each other.<br>It is more awesome to show more about you in your GitHub profile. How about a badge? a welcome text?<br>It is doable with organization. GitHub takes time and name of the organiazations you joined to determined how it displays on your profile</p><p>This used to be what shown on my GitHub profile <a href="https://github.com/onmyway133" target="_blank" rel="noopener">https://github.com/onmyway133</a></p><p><img src="https://user-images.githubusercontent.com/2284279/33725489-8d4994a8-db72-11e7-9dd8-e5cfc83a0975.png" alt="1_61enfsc61onicous7vdwkw"></p><p>For me, I display the text “Hello World”, so I have to create organizations for “h”, “e”, “l”, “l”, “o”, “w”, “o”, “r”, “l”, “d”<br>To ensure the order, you can name your organization like “org-h”, “org-he”, “org-hel”, “org-hell”, “org-hello”, … and you must join the organization in the correct order<br>I create another GitHub account called <a href="https://github.com/fantabot" target="_blank" rel="noopener">https://github.com/fantabot</a> to manage my organizations<br>Your imaginary is your limit. May your code continue to compile :grin:</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Best places to learn iOS development</title>
      <link href="/blog/Best-places-to-learn-iOS-development/"/>
      <url>/blog/Best-places-to-learn-iOS-development/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/116" target="_blank" rel="noopener">#116</a></strong></p><p>Also published here <a href="https://medium.com/@onmyway133/best-places-to-learn-ios-development-85ebebe890cf" target="_blank" rel="noopener">https://medium.com/@onmyway133/best-places-to-learn-ios-development-85ebebe890cf</a></p><hr><p>It’s good to be software engineers, when you get paid to do what you like best. The good thing about software development is it ‘s changing fast, and challenging. This is also the not good thing, when you need to continuously learn and adapt to keep up with the trends.<br>This is for those who have been iOS developers for some time. If you have a lot of free time to spend, then congratulations. If you do not, you know the luxury of free time, then it’s time to learn wisely, by selecting only the good resources. But where should I learn from?</p><p>Welcome to the technology age, where there are tons to things to keep track of, iOS releases, SDK, 3rd frameworks, build tools, patterns, … Here are my list that I tend to open very often. It is opinionated and date aware. If it was several years ago, then <a href="http://nshipster.com/" target="_blank" rel="noopener">http://nshipster.com/</a>, <a href="https://www.objc.io/" target="_blank" rel="noopener">https://www.objc.io/</a> should be in the top of the list.</p><p>I like to keep track of stuff, via my lists <a href="https://github.com/onmyway133/fantastic-ios" target="_blank" rel="noopener">https://github.com/onmyway133/fantastic-ios</a>, <a href="https://github.com/onmyway133/fantastic-ios-architecture" target="_blank" rel="noopener">https://github.com/onmyway133/fantastic-ios-architecture</a>, <a href="https://github.com/onmyway133/fantastic-ios-animation" target="_blank" rel="noopener">https://github.com/onmyway133/fantastic-ios-animation</a>. Also you should use services like <a href="https://feedly.com/" target="_blank" rel="noopener">https://feedly.com/</a> to organise your subscription feed.</p><p>The point of this is for continuous learning, so it should be succinct. There is no particular order.</p><ol><li><p>Raywenderlich (<a href="https://www.raywenderlich.com/" target="_blank" rel="noopener">https://www.raywenderlich.com/</a>)<br>This is probably one of the most visited site for learning iOS development. All the tutorials are well designed and easy to follow. If you can, you can subscribe to videos <a href="https://videos.raywenderlich.com/courses" target="_blank" rel="noopener">https://videos.raywenderlich.com/courses</a>. I myself find watching video much more relaxing. And the team is reviving its Podcast <a href="https://www.raywenderlich.com/rwpodcast" target="_blank" rel="noopener">https://www.raywenderlich.com/rwpodcast</a> which I really recommend</p></li><li><p>Swift Talk (<a href="https://talk.objc.io/" target="_blank" rel="noopener">https://talk.objc.io/</a>)<br>The people behind objc.io started their swift talks last year. I’m a fan of clean code, so these talks are really helpful when they show how to organise and write code. Also, they have awesome guests from some companies too.</p></li><li><p>NSScreencast (<a href="http://nsscreencast.com/episodes" target="_blank" rel="noopener">http://nsscreencast.com/episodes</a>)<br>If you have less time, then this is great option. These covers many aspects of the iOS SDKs, and the videos are weekly.</p></li><li><p>Swift By Sundell (<a href="https://www.swiftbysundell.com/" target="_blank" rel="noopener">https://www.swiftbysundell.com/</a>)<br>I actually learn a lot from reading John ‘s blog. He shows various tips on iOS programming and the Swift language. Also his podcast is a must subscribe <a href="https://www.swiftbysundell.com/podcast/" target="_blank" rel="noopener">https://www.swiftbysundell.com/podcast/</a>. I’ve listened to many podcasts, but I like this best.</p></li><li><p>AppCoda (<a href="https://www.appcoda.com/" target="_blank" rel="noopener">https://www.appcoda.com/</a>)<br>I like this because the content is short, and focused. I can easily follow and grasp the gist immediately. And it has large collection of various contents.</p></li><li><p>Use Your Loaf (<a href="https://useyourloaf.com/" target="_blank" rel="noopener">https://useyourloaf.com/</a>)<br>This has updated posts for every new SDK features. Also, the content is short and to the points. It’s like wikipedia for iOS development.</p></li><li><p>iOS Goodies (<a href="http://ios-goodies.com/" target="_blank" rel="noopener">http://ios-goodies.com/</a>)<br>The number of newsletters now is like stars on the sky. Among them I like iOS Goodies the best. It is driven by community <a href="https://github.com/iOS-Goodies/iOS-Goodies" target="_blank" rel="noopener">https://github.com/iOS-Goodies/iOS-Goodies</a> and contains lots of new awesome stuff each week.</p></li><li><p>Erica Sadun (<a href="http://ericasadun.com/" target="_blank" rel="noopener">http://ericasadun.com/</a>)<br>This is a bit advanced where it discusses Swift languages. But it’s good to read if you want to get yourself to know more about hidden language features.</p></li><li><p>Swifting (<a href="https://swifting.io/" target="_blank" rel="noopener">https://swifting.io/</a>)<br>I just discovered this recently, but I kinda like the blog. The number of posts are growing, and those are good reads about iOS SDKs.</p></li><li><p>Khanlou (<a href="http://khanlou.com/" target="_blank" rel="noopener">http://khanlou.com/</a>)<br>I learn many good patterns and clean code from reading this blog. He suggests many ideas on refactoring code. Really recommend.</p></li><li><p>Ole Begemann (<a href="https://oleb.net/blog/" target="_blank" rel="noopener">https://oleb.net/blog/</a>)<br>This has been in my favorite list for a long time. Although this is a bit advanced, it is good to dive deep into Swift.</p></li><li><p>Krzysztof Zabłocki (<a href="http://merowing.info/post/" target="_blank" rel="noopener">http://merowing.info/post/</a>)<br>This is my favorite, too. This shows many practical advices for iOS development. He also talks about build tool that I really like.</p></li><li><p>Realm News (<a href="https://academy.realm.io/" target="_blank" rel="noopener">https://academy.realm.io/</a>)<br>Realm collects a huge collection of iOS videos from conferences and meet ups, and it has transcripts too. It’s more than enough to fill your free time.</p></li><li><p>Big Nerd Ranch (<a href="https://www.bignerdranch.com/blog/" target="_blank" rel="noopener">https://www.bignerdranch.com/blog/</a>)<br>This has posts in both iOS and Android. But I really like the contents, very good.</p></li><li><p>Cocoa with Love (<a href="http://www.cocoawithlove.com/" target="_blank" rel="noopener">http://www.cocoawithlove.com/</a>)<br>This is very advanced, and suitable for hardcore fans. I feel small when reading the posts.</p></li><li><p>Atomic Spin (<a href="https://spin.atomicobject.com/" target="_blank" rel="noopener">https://spin.atomicobject.com/</a>)<br>I really enjoy reading blog posts from Atomic Object. There are posts for many platforms, and about life, so you need to filter for iOS development.</p></li><li><p>Raizlabs (<a href="https://www.raizlabs.com/dev/" target="_blank" rel="noopener">https://www.raizlabs.com/dev/</a>)<br>This has very good articles about iOS. Highly recommend.</p></li><li><p>Invasive Code (<a href="https://www.invasivecode.com/weblog/" target="_blank" rel="noopener">https://www.invasivecode.com/weblog/</a>)<br>This has topics for many iOS features. All the contents are good and succinct.</p></li><li><p>Think and Build (<a href="http://www.thinkandbuild.it/" target="_blank" rel="noopener">http://www.thinkandbuild.it/</a>)<br>I like posts about animation and replicating app features. This has all of them.</p></li><li><p>Little Bites of Cocoa (<a href="https://littlebitesofcocoa.com/" target="_blank" rel="noopener">https://littlebitesofcocoa.com/</a>)<br>This has a series of small tips, on how to use iOS SDKs and other 3rd frameworks. Good to know.</p></li><li><p>Samwize (<a href="http://samwize.com/" target="_blank" rel="noopener">http://samwize.com/</a>)<br>All the posts are good, short and to the points. Really like this.</p></li></ol><p>I think that’s enough. Feel free to share and suggest other awesome blogs that I might miss. Also, it’s good to contribute back to community by writing your blog posts. You will learn a lot by sharing.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Case sensitivity in HTTP</title>
      <link href="/blog/Case-sensitivity-in-HTTP/"/>
      <url>/blog/Case-sensitivity-in-HTTP/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/115" target="_blank" rel="noopener">#115</a></strong></p><h2 id="Is-URL-case-sensitive"><a href="#Is-URL-case-sensitive" class="headerlink" title="Is URL case sensitive ?"></a>Is URL case sensitive ?</h2><p>According to <a href="https://www.w3.org/TR/WD-html40-970708/htmlweb.html" target="_blank" rel="noopener">HTML and URLs </a></p><blockquote><p>URLs in general are case-sensitive (with the exception of machine names). There may be URLs, or parts of URLs, where case doesn’t matter, but identifying these may not be easy. Users should always consider that URLs are case-sensitive.</p></blockquote><h2 id="Is-header-case-sensitive"><a href="#Is-header-case-sensitive" class="headerlink" title="Is header case sensitive?"></a>Is header case sensitive?</h2><p>According to <a href="https://tools.ietf.org/html/rfc7230#section-3.2" target="_blank" rel="noopener">RFC 7230</a></p><blockquote><p>Each header field consists of a case-insensitive field name followed by a colon (“:”), optional leading whitespace, the field value, and optional trailing whitespace.</p></blockquote><h2 id="Is-method-case-sensitive"><a href="#Is-method-case-sensitive" class="headerlink" title="Is method case sensitive?"></a>Is method case sensitive?</h2><p>Using <code>URLSession</code>, mostly we will get <code>200</code> with <code>request.httpMethod = &quot;GET&quot;</code> and <code>400</code> with <code>request.httpMethod = &quot;get&quot;</code>. Generally speaking, you should use some popular wrappers <a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="noopener">Alamofire</a> or <a href="https://github.com/hyperoslo/Malibu" target="_blank" rel="noopener">Malibu</a> as they are mature enough. Spend your precious time solving more important problems instead.</p><p>According to <a href="https://tools.ietf.org/html/rfc7231#page-24" target="_blank" rel="noopener">RFC 7231</a></p><blockquote><p>The method token is case-sensitive because it might be used as a gateway to object-based systems with case-sensitive method names.</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Understanding let, apply, with, run in Kotlin</title>
      <link href="/blog/Understanding-let-apply-with-run-in-Kotlin/"/>
      <url>/blog/Understanding-let-apply-with-run-in-Kotlin/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/114" target="_blank" rel="noopener">#114</a></strong></p><p>Picture worths thousand words. Code worths thousand pictures. I don’t understand much until I take a look at <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt" target="_blank" rel="noopener">Standard.kt</a> in Kotlin standard library.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls the specified function [block] with `this` value as its receiver and returns `this` value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">apply</span><span class="params">(block: <span class="type">T</span>.() -&gt; <span class="type">Unit</span>)</span></span>: T &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    block()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls the specified function [block] with `this` value as its argument and returns its result.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">let</span><span class="params">(block: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> block(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>apply</code> returns T  and accepts a block of type <code>T.() -&gt; Unit</code>. This is called <a href="https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver" target="_blank" rel="noopener">Function Literals with Receiver</a></li></ul><blockquote><p>Kotlin provides the ability to call a function literal with a specified receiver object. Inside the body of the function literal, you can call methods on that receiver object without any additional qualifiers. This is similar to extension functions, which allow you to access members of the receiver object inside the body of the function</p></blockquote><ul><li><code>let</code> returns R and accepts a block of type <code>T -&gt; R</code>. Inside the block, you can access <code>it</code> which is <a href="https://kotlinlang.org/docs/reference/lambdas.html#it-implicit-name-of-a-single-parameter" target="_blank" rel="noopener">it: implicit name of a single parameter</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Using Playground with CocoaPods</title>
      <link href="/blog/Using-Playground-with-CocoaPods/"/>
      <url>/blog/Using-Playground-with-CocoaPods/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/113" target="_blank" rel="noopener">#113</a></strong></p><p>This is a follow up from my post <a href="https://github.com/onmyway133/blog/issues/94" target="_blank" rel="noopener">Learning from Open Source: Using Playground</a> on how to actually add a playground to your production project.</p><p>The idea is simple: create a framework so that Playground can access the code. This demo an iOS project with CocoaPods. See the demo <a href="https://github.com/onmyway133/UsingPlayground" target="_blank" rel="noopener">https://github.com/onmyway133/UsingPlayground</a></p><p>This is also my question to this question <a href="https://stackoverflow.com/questions/47589855/how-to-expose-your-project-code-to-a-xcode-playground-when-using-cocoapods/47595120#47595120" target="_blank" rel="noopener">https://stackoverflow.com/questions/47589855/how-to-expose-your-project-code-to-a-xcode-playground-when-using-cocoapods/47595120#47595120</a></p><h3 id="1-Add-a-pod"><a href="#1-Add-a-pod" class="headerlink" title="1. Add a pod"></a>1. Add a pod</h3><p>Create a new project called <code>UsingPlayground</code>. Create a <code>Podfile</code> with a pod <a href="https://github.com/hyperoslo/Cheers" target="_blank" rel="noopener">Cheers</a> because we want something fun 😄 </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'9.0'</span></span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">pod <span class="string">'Cheers'</span></span><br><span class="line"></span><br><span class="line">target <span class="string">'UsingPlayground'</span></span><br></pre></td></tr></table></figure><h3 id="2-Use-the-pod-in-your-project"><a href="#2-Use-the-pod-in-your-project" class="headerlink" title="2. Use the pod in your project"></a>2. Use the pod in your project</h3><p>This is very straightforward. Just to make sure the pod work</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Cheers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cheerView = <span class="type">CheerView</span>()</span><br><span class="line">    view.addSubview(cheerView)</span><br><span class="line">    cheerView.frame = view.bounds</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure</span></span><br><span class="line">    cheerView.config.particle = .confetti</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start</span></span><br><span class="line">    cheerView.start()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Build and run the project to enjoy a very fascinating confetti 🎊 </p><h3 id="3-Add-a-CocoaTouch-framework"><a href="#3-Add-a-CocoaTouch-framework" class="headerlink" title="3. Add a CocoaTouch framework"></a>3. Add a CocoaTouch framework</h3><p>In your workspace, select the <code>UsingPlayground</code> project, add new CocoaTouch framework. Let’s call it <code>AppFramework</code>. </p><p><img src="https://user-images.githubusercontent.com/2284279/33485759-e6a9779a-d6a7-11e7-850d-05aceec69e37.png" alt="framework"></p><p>Then add source files to this framework. For now, just check file <code>ViewController.swift</code> add add it to the <code>AppFramework</code> target too.</p><p><img src="https://user-images.githubusercontent.com/2284279/33485764-e9ebf3f6-d6a7-11e7-8b61-b97c3a8774aa.png" alt="targets"></p><h3 id="4-Public"><a href="#4-Public" class="headerlink" title="4. Public"></a>4. Public</h3><p>Swift types and methods are internal by default. So in order for them to be visible in the Playground, we need to declare them as public.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class ViewController: UIViewController &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Add-pod-to-AppFramework"><a href="#5-Add-pod-to-AppFramework" class="headerlink" title="5. Add pod to AppFramework"></a>5. Add pod to AppFramework</h3><p>In order for AppFramework to use our pods, we need to add those pods into framework target as well. Add <code>target &#39;AppFramework&#39;</code> to your Podfile</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'9.0'</span></span><br><span class="line"></span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">pod <span class="string">'Cheers'</span></span><br><span class="line"></span><br><span class="line">target <span class="string">'UsingPlayground'</span></span><br><span class="line">target <span class="string">'AppFramework'</span></span><br></pre></td></tr></table></figure><p>Now run <code>pod install</code> again. In some rare cases, you need to run <code>pod deintegrate</code> and <code>pod install</code> to start from a clean slate</p><h3 id="6-Add-a-Playground"><a href="#6-Add-a-Playground" class="headerlink" title="6. Add a Playground"></a>6. Add a Playground</h3><p>Add a Playground and drag that to our workspace. Let’s call it <code>MyPlayground</code></p><p><img src="https://user-images.githubusercontent.com/2284279/33485907-6a88a4a0-d6a8-11e7-8f03-dec00122601d.png" alt="play"></p><h3 id="6-Enjoy"><a href="#6-Enjoy" class="headerlink" title="6. Enjoy"></a>6. Enjoy</h3><p>Now edit our <code>MyPlayground</code>. You can import frameworks from pod and our <code>AppFramework</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Cheers</span><br><span class="line"><span class="keyword">import</span> AppFramework</span><br><span class="line"><span class="keyword">import</span> PlaygroundSupport</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cheerView = <span class="type">CheerView</span>()</span><br><span class="line">cheerView.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">50</span>, width: <span class="number">200</span>, height: <span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure</span></span><br><span class="line">cheerView.config.particle = .confetti</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start</span></span><br><span class="line">cheerView.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myController = <span class="type">ViewController</span>()</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView = myController.view</span><br></pre></td></tr></table></figure><p>Remember to toggle Editor Mode so you can see Playground result</p><p><img src="https://user-images.githubusercontent.com/2284279/33485980-b221c1ac-d6a8-11e7-9214-15dbbc123380.png" alt="enjoy"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Using assembly</title>
      <link href="/blog/Using-assembly/"/>
      <url>/blog/Using-assembly/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/112" target="_blank" rel="noopener">#112</a></strong></p><p>I’m very fascinated when people use assembly to perform investigation, that’s just mind blowing 💥 . Here are some of the favorite use cases</p><ul><li><a href="https://objective-see.com/blog/blog_0x24.html" target="_blank" rel="noopener">Why blank Gets You Root</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Talks</title>
      <link href="/blog/Talks/"/>
      <url>/blog/Talks/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/111" target="_blank" rel="noopener">#111</a></strong></p><p>Please visit <a href="https://onmyway133.github.io/speaking">https://onmyway133.github.io/speaking</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>URL Routing with Compass</title>
      <link href="/blog/URL-Routing-with-Compass/"/>
      <url>/blog/URL-Routing-with-Compass/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/110" target="_blank" rel="noopener">#110</a></strong></p><p>Medium version <a href="https://medium.com/@onmyway133/url-routing-with-compass-d59c0061e7e2" target="_blank" rel="noopener">https://medium.com/@onmyway133/url-routing-with-compass-d59c0061e7e2</a></p><hr><p>Apps often have many screens, and <code>UIViewController</code> works well as the basis for a screen, together with presentation and navigation APIs. Things are fine until you get lost in the forest of flows, and code becomes hard to maintain. </p><p>One way to avoid this is the <code>central URL routing</code> approach. Think of it as a network router that handles and resolves all routing requests. This way, the code becomes declarative and decoupled, so that the list component does not need to know what it’s presenting. URL routing also makes logging and tracking easy along with ease of handling external requests such as deep linking. </p><p>There are various frameworks that perform URL routing. In this tutorial you’ll use <a href="https://github.com/hyperoslo/Compass" target="_blank" rel="noopener">Compass</a> for its simplicity. You’ll refactor an existing app, which is a simplified Instagram app named <code>PhotoFeed</code>. When you’ve finished this tutorial, you’ll know how to declare and use routers with Compass and handle deep linking. </p><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>Download the <a href="https://github.com/onmyway133/PhotoFeed/tree/start" target="_blank" rel="noopener">starter project</a> and unzip it. Go to the <code>PhotoFeed</code> folder and run <code>pod install</code> to install the particular dependencies for this project. Open <code>PhotoFeed.xcworkspace</code> and run the project. Tap <code>Login</code> to go to the Instagram login page and enter your Instagram credentials, then have a look around the app. </p><p><img src="https://user-images.githubusercontent.com/2284279/33277373-a808bf8a-d398-11e7-9b27-9ddc4549ffdc.png" alt="artboard"></p><p>The main app is made of a <code>UITabBarController</code> that shows the feed, the currently logged-in user profile and a menu. This is a typical <code>Model View Controller</code> project where <code>UIViewController</code> handles <code>Cell</code> delegates and takes responsibility for the navigation. For simplicity, all view controllers inherit from <code>TableController</code> and <code>CollectionController</code> that know how to manage list of a particular model and cell. All models conform to the new Swift 4 <code>Codable</code> protocol.</p><h2 id="Registering-Your-App-on-Instagram"><a href="#Registering-Your-App-on-Instagram" class="headerlink" title="Registering Your App on Instagram"></a>Registering Your App on Instagram</h2><p>In order to use the Instagram API, you’ll need to register your app at <a href="https://www.instagram.com/developer/" target="_blank" rel="noopener">Instagram Developer</a>. After obtaining your <em>client id</em>, switch back to the project. Go to <code>APIClient.swift</code> and modify your <code>clientId</code>. </p><p><img src="https://user-images.githubusercontent.com/2284279/33277396-b40a3bec-d398-11e7-9f1d-3033870e0738.png" alt="artboard 2"></p><p><strong>Note</strong>: The project comes with a default app with limited permissions. The app can’t access following or follower APIs, and you can only see your own posts and comments</p><h1 id="Compass-101"><a href="#Compass-101" class="headerlink" title="Compass 101"></a>Compass 101</h1><p>The concept of Compass is very simple: you have a set of routes and central place for handling these routes. Think of a route as a navigation request to a specific screen within the app. The idea behind URL routing is borrowed from the modern web server. When user enters a URL into the browser, such as <code>https://flawlessapp.io/category/ios</code>, that request is sent from the browser to the web server. The server parses the URL and returns the requested content, such as HTML or JSON. Most web server frameworks have URL routing support, including <a href="https://expressjs.com/en/guide/routing.html" target="_blank" rel="noopener">ASP.NET</a>, <a href="https://expressjs.com/en/guide/routing.html" target="_blank" rel="noopener">Express.js</a>, and others. For example, here is how you handle a URL route in express.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/api/category/:categoryTag'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> page = getCategoryPageFor(req.params.categoryTag)</span><br><span class="line">  res.send(page)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Users or apps request a specific URL that express an intent about what should be returned or displayed. But instead of returning web pages, Compass constructs screens in terms of <code>UIViewController</code> and presents them.</p><h2 id="Route-Patterns"><a href="#Route-Patterns" class="headerlink" title="Route Patterns"></a>Route Patterns</h2><p>This is how you declare a routing schema in Compass:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Navigator</span>.routes = [<span class="string">"profile:&#123;userId&#125;"</span>, <span class="string">"post:&#123;postId&#125;"</span>, <span class="string">"logout"</span>]</span><br></pre></td></tr></table></figure><p>This is simply as array of patterns you register on the <code>Navigator</code>. This is the central place where you define all your routes. Since they are in one place, all your navigations are kept in one place and can easily be understood. Looking at the example above, <code>{userId}, {postId}</code> are placeholders that will be resolved to actual parameters. For example with <code>post:BYOkwgXnwr3</code>, you get <code>userId</code> of <code>BYOkwgXnwr3</code>. Compass also performs pattern matching, in that <code>post:BYOkwgXnwr3</code> matches <code>post:{postId}</code>, not <code>comment:{postId}</code>, <code>blogpost:{postId}</code>, …This will become to make sense in following sections. </p><h2 id="The-Navigator"><a href="#The-Navigator" class="headerlink" title="The Navigator"></a>The Navigator</h2><p>The <code>Navigator</code> is a the central place for routes registration, navigating and handling.</p><p><img src="https://user-images.githubusercontent.com/2284279/33277861-1855fa40-d39a-11e7-8449-0d10608d2501.png" alt="artboard 3"></p><p> The next step is to trigger a routing request. You can do that via the <code>Navigator</code>. For example, this is how you do  in the feed to request opening a specific post:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Navigator</span>.navigate(urn: <span class="string">"post:BYOkwgXnwr3"</span>)</span><br></pre></td></tr></table></figure><p>Compass uses the user-friendly <code>urn</code>, short for <a href="https://no.wikipedia.org/wiki/Uniform_Resource_Name" target="_blank" rel="noopener">Uniform Resource Name</a> to make itwork seamlessly with <a href="https://en.wikipedia.org/wiki/Mobile_deep_linking" target="_blank" rel="noopener">Deep Linking</a>. This <code>urn</code> matches the routing schema <code>post:{postId}</code>. Compass uses <code>{param}</code> as the special token to identifier the parameter and <code>:</code> as the delimiter. You can change the delimiter to something else by configuring <code>Navigator.delimiter</code>. You have learned how to register routes and navigate in Compass. Next, you will learn how to customize the handling code to your need.</p><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><p><code>Navigator</code> parses and works with <code>Location</code> under the hood. Given the <code>URN</code> of <code>post:BYOkwgXnwr3</code>, you get a <code>Location</code> where <code>path</code> is the route pattern, and <code>arguments</code> contain the resolved parameters.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">"post:&#123;postId&#125;"</span></span><br><span class="line">arguments = [</span><br><span class="line">  <span class="string">"postId"</span>: <span class="string">"BYOkwgXnwr3"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>To actually perform the navigation, you assign a closure that takes a <code>Location</code> to <code>Navigator.handle</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Navigator</span>.handle = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] location <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> `<span class="keyword">self</span>` = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arguments = location.arguments</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> location.path &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"post:&#123;postId&#125;"</span>:</span><br><span class="line">      <span class="keyword">let</span> postController = <span class="type">PostController</span>(postId: postID)</span><br><span class="line">      <span class="keyword">self</span>.rootController.pushViewController(postController, animated: <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>let</code>self<code>= self</code> dance is to ensure <code>self</code> isn’t released by the time this closure is executed. If it is released, the routing it’s about to perform is likely invalid, and you return without doing anything instead. You should typically do the above  in the components that own the root controller, such as <code>AppDelegate</code> as seen above.  That’s the basic of Compass. Astute readers may have noticed that it does not scale, as the number of <code>switch</code> statements will grow as the number of routes and endpoints increase in your app. This is where the <code>Routable</code> protocol comes in.  Anything conforming to <code>Routable</code> knows how to handle a specific route. Apps may have many modular sections, and each section may have a set of routes. Compass handles these scenario by using a composite <code>Routable</code> named <code>Router</code> that groups them . You can have a router for a pre-login module, a post-login module, premium features module, and so on. </p><p><img src="https://user-images.githubusercontent.com/2284279/33277894-2eff78de-d39a-11e7-8554-bf064b621921.png" alt="untitled 2 2017-08-30 09-53-58"></p><p>In the next section, you’ll change PhotoFeed to use <code>Router</code> and <code>Routable</code>.</p><h1 id="Router-to-the-Rescue"><a href="#Router-to-the-Rescue" class="headerlink" title="Router to the Rescue"></a>Router to the Rescue</h1><p>The first step is to include Compass in your project. Using <code>CocoaPods</code>, this is an easy task. Edit the <code>Podfile</code> with the project and type <code>pod &#39;Compass&#39;, &#39;~&gt; 5.0&#39;</code> just before the <code>end</code> statement. Then open Terminal and execute the following:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>The version of Compass used in this tutorial is <code>5.1.0</code>.</p><h2 id="Registering-a-Router"><a href="#Registering-a-Router" class="headerlink" title="Registering a Router"></a>Registering a Router</h2><p><img src="https://user-images.githubusercontent.com/2284279/33277916-3da628f6-d39a-11e7-9652-b45ea4a935fd.png" alt="untitled 2 2017-08-30 10-04-50"></p><p>To start, you’ll create a simple router to handle all post-login routes. Open <em>AppDelegate.swift</em>, and import Compass at the top of the file:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Compass</span><br></pre></td></tr></table></figure><p>Next, add the following router declaration under the <code>var mainController: MainController?</code> declaration:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postLoginRouter = <span class="type">Router</span>()</span><br></pre></td></tr></table></figure><p>Then declare a function called <code>setupRouting</code>, you ‘ll do this in an extension to separate the routing setup from the main code in <code>AppDelegate</code>. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">setupRouting</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// [1] Register scheme</span></span><br><span class="line">    <span class="type">Navigator</span>.scheme = <span class="string">"photofeed"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// [2] Configure routes for Router</span></span><br><span class="line">    postLoginRouter.routes = [:]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [3] Register routes you 'd like to support</span></span><br><span class="line">    <span class="type">Navigator</span>.routes = <span class="type">Array</span>(postLoginRouter.routes.keys)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [4] Do the handling</span></span><br><span class="line">    <span class="type">Navigator</span>.handle = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] location <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> selectedController = <span class="keyword">self</span>?.mainController?.selectedViewController <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// [5] Choose the current visible controller</span></span><br><span class="line">      <span class="keyword">let</span> currentController = (selectedController <span class="keyword">as</span>? <span class="type">UINavigationController</span>)?.topViewController</span><br><span class="line">        ?? selectedController</span><br><span class="line"></span><br><span class="line">      <span class="comment">// [6] Navigate</span></span><br><span class="line">      <span class="keyword">self</span>?.postLoginRouter.navigate(to: location, from: currentController)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here’s what you do in the above method:</p><ol><li>Declare a scheme for Compass to work. This is your application URL scheme. This shines when you wish to support deep linking .</li><li>Register all the routes in your app. <code>Router</code> accepts a mapping of route and <code>Routable</code> conformers. This is empty for now, but you will add several routes in a moment.</li><li>A <code>Navigator</code> can manage multiple routers. In this case, you only register one router.</li><li>This is where you supply the handling closure. <code>Navigator</code> uses this to handle a resolved location request.</li><li>Screens in one modular section originate from one root or parent view controller. In order to show something from the route, you should try to push or present it from the selected most-visible view controller. In this project, the root is a <code>UITabBarController</code>, so you try to get the top controller from the current selected navigation. The selection of <code>current controller</code> depends on the module and your app use cases, so Compass let you decide it.  If you use the side menu drawer, then you can just change the selected view controller.</li><li>Finally, since <code>Router</code> is a composite <code>Routable</code>, you dispatch to it the <code>Location</code>.</li></ol><p><img src="https://user-images.githubusercontent.com/2284279/33277961-531e6342-d39a-11e7-9199-158a469a3709.png" alt="main storyboard 2017-08-30 10-37-16"></p><p>Finally, you need to call this newly added function. Add the following line right above <code>window?.makeKeyAndVisible()</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setupRouting()</span><br></pre></td></tr></table></figure><p>Build and run. Nothing seems to work yet! To make things happen, you’ll need to add all the route handlers. You’ll do this in the next section.</p><h2 id="Implementing-the-Route-Handlers"><a href="#Implementing-the-Route-Handlers" class="headerlink" title="Implementing the Route Handlers"></a>Implementing the Route Handlers</h2><p>First, create a new file and name it <code>Routers.swift</code>. This is where you’ll declare all of your route handlers. At the beginning of the file, add <code>import Compass</code>. Compass declares a simple protocol — <code>Routable</code> — that decides what to do with a given <code>Location</code> request from a <code>Current Controller</code>. If a request can’t be handled, it will throw with <code>RouteError</code>. Its implementation looks like this: </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Routable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">navigate</span><span class="params">(to location: Location, from currentController: CurrentController)</span></span> <span class="keyword">throws</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s an incredibly simple protocol. Any routes you create only need to implement that single method. Now create your first handler to deal with user info request. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserRoute</span>: <span class="title">Routable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">navigate</span><span class="params">(to location: Location, from currentController: CurrentController)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="comment">// [1] Examine arguments</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> userId = location.arguments[<span class="string">"userId"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [2] Create the controller</span></span><br><span class="line">    <span class="keyword">let</span> controller = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>).instantiateViewController(withIdentifier: <span class="string">"UserController"</span>) <span class="keyword">as</span>! <span class="type">UserController</span></span><br><span class="line">    controller.userId = userId</span><br><span class="line">    currentController.navigationController?.pushViewController(controller, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is called when you touch the post author on the feed. Here’s what’s happening:</p><ol><li><code>UserRoute</code> deals with <code>user:{userId} urn</code>, so <code>location.arguments[&quot;userId&quot;]</code> should contain the correct <code>userId</code> to inject into <code>UserController</code>.</li><li>This app uses storyboards to make the UI, so get the correct view controller based on its identifier. Remember tha <code>currentController</code> is the current visible controller in the navigation stack. So you ask for its <code>UINavigationController</code> to push a new view controller.</li></ol><p>Right below this router, add one more route for the screen shown when the user wants to see who likes a particular post:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LikesRoute</span>: <span class="title">Routable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">navigate</span><span class="params">(to location: Location, from currentController: CurrentController)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> mediaId = location.arguments[<span class="string">"mediaId"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> controller = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>).instantiateViewController(withIdentifier: <span class="string">"LikesController"</span>) <span class="keyword">as</span>! <span class="type">LikesController</span></span><br><span class="line">    controller.mediaId = mediaId</span><br><span class="line">    currentController.navigationController?.pushViewController(controller, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-remaining-Route"><a href="#The-remaining-Route" class="headerlink" title="The remaining Route"></a>The remaining Route</h3><p>Now it’s your turn to write the other route handlers: <code>CommentsRoute, FollowingRoute, FollowerRoute</code>. See if you can figure it out first, you can find the solution below. Here’s what you should have:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CommentsRoute</span>: <span class="title">Routable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">navigate</span><span class="params">(to location: Location, from currentController: CurrentController)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> mediaId = location.arguments[<span class="string">"mediaId"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> controller = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>).instantiateViewController(withIdentifier: <span class="string">"CommentsController"</span>) <span class="keyword">as</span>! <span class="type">CommentsController</span></span><br><span class="line">    controller.mediaId = mediaId</span><br><span class="line">    currentController.navigationController?.pushViewController(controller, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FollowingRoute</span>: <span class="title">Routable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">navigate</span><span class="params">(to location: Location, from currentController: CurrentController)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> userId = location.arguments[<span class="string">"userId"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> controller = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>).instantiateViewController(withIdentifier: <span class="string">"FollowingController"</span>) <span class="keyword">as</span>! <span class="type">FollowingController</span></span><br><span class="line">    controller.userId = userId</span><br><span class="line">    currentController.navigationController?.pushViewController(controller, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FollowerRoute</span>: <span class="title">Routable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">navigate</span><span class="params">(to location: Location, from currentController: CurrentController)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> userId = location.arguments[<span class="string">"userId"</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> controller = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>).instantiateViewController(withIdentifier: <span class="string">"FollowerController"</span>) <span class="keyword">as</span>! <span class="type">FollowerController</span></span><br><span class="line">    controller.userId = userId</span><br><span class="line">    currentController.navigationController?.pushViewController(controller, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-LogoutRoute"><a href="#The-LogoutRoute" class="headerlink" title="The LogoutRoute"></a>The LogoutRoute</h3><p>There is one more route to add: the one you’ll use for logout. <code>LogoutRoute</code> is quite tricky, as it usually involves changing the current root view controller. Who knows this better than the app delegate? Open <em>AppDelegate.swift</em> and add the following code at the very bottom:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LogoutRoute</span>: <span class="title">Routable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">navigate</span><span class="params">(to location: Location, from currentController: CurrentController)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="type">APIClient</span>.shared.accessToken = <span class="literal">nil</span></span><br><span class="line">    (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>).showLogin()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that you’ve implemented all of the route handlers, you will have to tell <code>Navigator</code> which route is used for which URN. Still in <em>AppDelegate.swift</em>, find <code>postLoginRouter.routes = [:]</code> and replace it with the following:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postLoginRouter.routes = [</span><br><span class="line">  <span class="string">"user:&#123;userId&#125;"</span>: <span class="type">UserRoute</span>(),</span><br><span class="line">  <span class="string">"comments:&#123;mediaId&#125;"</span>: <span class="type">CommentsRoute</span>(),</span><br><span class="line">  <span class="string">"likes:&#123;mediaId&#125;"</span>: <span class="type">LikesRoute</span>(),</span><br><span class="line">  <span class="string">"following:&#123;userId&#125;"</span>: <span class="type">FollowingRoute</span>(),</span><br><span class="line">  <span class="string">"follower:&#123;userId&#125;"</span>: <span class="type">FollowerRoute</span>(),</span><br><span class="line">  <span class="string">"logout"</span>: <span class="type">LogoutRoute</span>()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Build the app and everything should compile. Now all that’s left is to actually <em>all</em> all of the code you’ve written!</p><h2 id="Refactoring-Time"><a href="#Refactoring-Time" class="headerlink" title="Refactoring Time"></a>Refactoring Time</h2><p>It’s time to refactor all the code in <code>UIViewController</code> by replacing all the navigation code with your new routing instructions. Start by freeing the <code>FeedController</code> from the unnecessary tasks of navigation. Open <em>FeedController.swift</em> and add the following import to the top of the file:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Compass</span><br></pre></td></tr></table></figure><p>Next, look for <code>// MARK: - MediaCellDelegate</code> and replace the three <code>MediaCell</code> delegate methods with the following:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mediaCell</span><span class="params">(<span class="number">_</span> cell: MediaCell, didViewLikes mediaId: String)</span></span> &#123;</span><br><span class="line">  <span class="keyword">try</span>? <span class="type">Navigator</span>.navigate(urn: <span class="string">"likes:\(mediaId)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mediaCell</span><span class="params">(<span class="number">_</span> cell: MediaCell, didViewComments mediaId: String)</span></span> &#123;</span><br><span class="line">  <span class="keyword">try</span>? <span class="type">Navigator</span>.navigate(urn: <span class="string">"comments:\(mediaId)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mediaCell</span><span class="params">(<span class="number">_</span> cell: MediaCell, didSelectUserName userId: String)</span></span> &#123;</span><br><span class="line">  <span class="keyword">try</span>? <span class="type">Navigator</span>.navigate(urn: <span class="string">"user:\(userId)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For these three cases, you simply want to navigate to another screen. Therefore, all you need to do is tell the <code>Navigator</code> where you want to go. For simplicity, you use <code>try?</code> to deal with any code that throws. Build and run the app. Search for your favorite post in the feed, and tap on the author, the post comments or likes to go to the target screen. The app behaves the same as it did before, but the code is now clean and declarative. Now do the same with <em>UserController.swift</em>. Add the following import to the top of the file:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Compass</span><br></pre></td></tr></table></figure><p>Replace the code after <code>// MARK: - UserViewDelegate</code> with the following:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userView</span><span class="params">(<span class="number">_</span> view: UserView, didViewFollower userId: String)</span></span> &#123;</span><br><span class="line">  <span class="keyword">try</span>? <span class="type">Navigator</span>.navigate(urn: <span class="string">"follower:\(userId)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userView</span><span class="params">(<span class="number">_</span> view: UserView, didViewFollowing userId: String)</span></span> &#123;</span><br><span class="line">  <span class="keyword">try</span>? <span class="type">Navigator</span>.navigate(urn: <span class="string">"following:\(userId)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Your task now is to refactor with the last route <code>LogoutRoute</code>. Open <em>MenuController.swift</em> and add the following to the top:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Compass</span><br></pre></td></tr></table></figure><p>Remove the <code>logout</code> method altogether. Find the following:</p><figure class="highlight plain"><figcaption><span>indexPath.section </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  logout()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…and replace it with:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> indexPath.section == <span class="type">Section</span>.account.rawValue, indexPath.row == <span class="number">0</span> &#123;</span><br><span class="line">  <span class="keyword">try</span>? <span class="type">Navigator</span>.navigate(urn: <span class="string">"logout"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Build and run the app, navigate to the menu and tap <em>Logout</em>. You should be taken to the login screen.</p><h1 id="Handling-Deep-Linking"><a href="#Handling-Deep-Linking" class="headerlink" title="Handling Deep Linking"></a>Handling Deep Linking</h1><p><a href="https://en.wikipedia.org/wiki/Mobile_deep_linking" target="_blank" rel="noopener">Deep linking</a> allows your apps to be opened via a predefined URN. The system identifies each app via its <a href="https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html" target="_blank" rel="noopener">URL scheme</a>. For web pages, the scheme is usually <code>http</code>, <code>https</code>. For <em>Instagram</em> it is, quite handily, <code>instagram</code>. Use cases for this are inter-app navigation and app advertisements. For examples, the Messenger app uses this to open the user profile in the Facebook app, and Twitter uses this to open the App Store to install another app from an advertisement. In order for user to be redirected back to PhotoFeed, you need to specify a custom URL scheme for your app. Remember where you declared <code>Navigator.scheme = &quot;photofeed&quot;</code>? PhotoFeed just so happens to conform to this URL scheme, so deep links already worked — and you didn’t even know it! Build and run the app, then switch to Safari. Type <code>photofeed://</code> in the address bar, then tap Go. That will trigger your app to open. The app opens, but PhotoFeed doesn’t parse any parameters in the URL to go anywhere useful. Time to change that! Your app responds to the URL scheme opening by implementing a <code>UIApplicationDelegate</code> method. Add the following after <code>setupRouting</code> in <code>AppDelegate.swift</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> app: UIApplication, <span class="keyword">open</span> url: URL, options: [UIApplicationOpenURLOptionsKey : <span class="keyword">Any</span>] = [:])</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">try</span>? <span class="type">Navigator</span>.navigate(url: url)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Navigator</code> parses and handles this for you. Build and run again. Go to Safari app, type <code>photofeed://user:self</code> and tap Go. Photofeed will open and show the currently logged in users’ profile. Because you already had <code>UserRoute</code>, the requested URL was handled gracefully. Your app may already be presenting a particular screen when a routing request comes, but you’ve anticipated this by resetting the navigation controller or presentation stack to show the requested screen. This simple solution works for most cases. Again, it’s recommended you pick the topmost visible view controller as the current controller in <code>Navigator.handle</code>.</p><p><img src="https://user-images.githubusercontent.com/2284279/33277990-709ae7c4-d39a-11e7-99b2-27acb7a1c5d0.png" alt="artboard 5"></p><p>Deep linking is usually considered external navigation, in that the routing requests come from outside your app. Thanks to the central routing system that you developed, the code to handle external and internal routing requests is very much the same and involves no code duplication at all.</p><h1 id="Routing-with-Push-Notifications"><a href="#Routing-with-Push-Notifications" class="headerlink" title="Routing with Push Notifications"></a>Routing with Push Notifications</h1><p>Push notifications help engage users with your app. You may have received messages like “Hey, checkout today ‘s most popular stories” on <em>Medium</em>, “Your friend has a birthday today” on Facebook, … and when you tap those banners, you are taken straight to that particular screen. How cool is that? This is achievable with your URL routing approach. Imagine users tapping a push notification banner saying “You’re a celebrity on PhotoFeed — check out your profile now!” and being sent directly to their profile screen. To accomplish this, you simply have to embed the URN info into the push payload and handle that in your app.</p><h2 id="Setting-up"><a href="#Setting-up" class="headerlink" title="Setting up"></a>Setting up</h2><p>To start, you’ll need to specify your bundle ID. Go to <code>Target Settings\General</code> to change your bundle ID as push notification requires a unique bundle ID to work. Your project uses <code>com.fantageek.PhotoFeed</code> by default.</p><p><img src="https://user-images.githubusercontent.com/2284279/33278026-8e1fe01a-d39a-11e7-982f-854ab7056aca.png" alt="step1_bundleid"> </p><p>Next, you’ll need to register your <em>App ID</em>. Go to <a href="https://developer.apple.com/account/ios/certificate" target="_blank" rel="noopener">Member Center</a> and register your App ID. Remember your <em>Team ID</em>, as you will need it in the final step. Also tick the <em>Push Notification</em> checkbox under <em>Application Services</em>. </p><p><img src="https://user-images.githubusercontent.com/2284279/33278038-94947866-d39a-11e7-9386-8fffcd5bf9cf.png" alt="step1_appid"></p><p>Now you’ll need to generate your <em>Authentication Key</em>. Apple provides <a href="https://developer.apple.com/news/?id=09222016a" target="_blank" rel="noopener">Token Authentication</a> as a new authentication mechanism for push notifications. The token is easy to generate, works for all your apps, and mostly, it never expires. Still in <a href="https://developer.apple.com/account/ios/authkey/" target="_blank" rel="noopener">Member Center</a>, create a new <em>Key</em> and download it as a <code>.p8</code> file. Remember your <em>Key ID</em> as you will need it in the final step. </p><p><img src="https://user-images.githubusercontent.com/2284279/33278050-9bb3ccc8-d39a-11e7-99b8-076138e5b559.png" alt="step2_key"></p><p>Next up: enabling push notification capability. Back in Xcode, go to <code>Target Settings\Capabilities</code> and enable <em>Push Notifications</em>, which will add <code>PhotoFeed.entitlements</code> to your project. </p><p><img src="https://user-images.githubusercontent.com/2284279/33278054-a21dde8c-d39a-11e7-907b-b1ec620050b4.png" alt="step3_capability"></p><p>The next step is to register for push notifications. Open <code>MainController.swift</code> and add the following import to the top of <em>MainController.swift</em>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UserNotifications</span><br></pre></td></tr></table></figure><p>You want to enable push notification only after login, so <code>MainController</code> is the perfect place. <a href="https://developer.apple.com/documentation/usernotifications" target="_blank" rel="noopener">UserNotifications</a> is recommended for app targeting iOS 10 and above.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [1] Register to get device token for remote notifications</span></span><br><span class="line">  <span class="type">UIApplication</span>.shared.registerForRemoteNotifications()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [2] Register to handle push notification UI</span></span><br><span class="line">  <span class="keyword">let</span> options: <span class="type">UNAuthorizationOptions</span> = [.alert, .sound, .badge]</span><br><span class="line">  <span class="type">UNUserNotificationCenter</span>.current().requestAuthorization(options: options) &#123; (granted, error) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(error <span class="keyword">as</span> <span class="type">Any</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The permission dialog is shown once, so make sure you accept it. It’s time to handle the device token. Open <code>AppDelegate.swift</code>, and add the following to the end of <code>extension AppDelegate</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)</span></span> &#123;</span><br><span class="line">  <span class="comment">// [1] Parse to token string</span></span><br><span class="line">  <span class="keyword">let</span> token = deviceToken.<span class="built_in">map</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>(format: <span class="string">"%02.2hhx"</span>, $<span class="number">0</span>)</span><br><span class="line">  &#125;.joined()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [2] Log it</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Your device token is \(token)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is where you get device token if your app successfully connects to APNs. Normally, you would send this device token to the backend so they can organize , but in this tutorial we just log it. It is required in the tool to be able to target a particular device.</p><h2 id="Handling-payload"><a href="#Handling-payload" class="headerlink" title="Handling payload"></a>Handling payload</h2><p>Open <code>AppDelegate.swift</code> and add the following to th end of <code>extension AppDelegate</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : <span class="keyword">Any</span>], fetchCompletionHandler completionHandler: @escaping <span class="params">(UIBackgroundFetchResult)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="comment">// [1] Always call the completion handler</span></span><br><span class="line">  <span class="keyword">defer</span> &#123;</span><br><span class="line">    completionHandler(.newData)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [2] Convert into JSON dictionary</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> json = userInfo <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">Any</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [3] Parse to aps</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> aps = json[<span class="string">"aps"</span>] <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">Any</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [4] Parse to urn</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> urn = aps[<span class="string">"urn"</span>] <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>? <span class="type">Navigator</span>.navigate(urn: urn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This method is called when your app receives push notification payload and is running. The above code is relatively straightforward: it first tries to parse the <code>urn</code> information from the payload, then tells <code>Navigator</code> to do the job . Build and run the app on the device, since push notifications won’t work on the simulator. Log in to the app if prompted. Once on the main screen, grant push notification permissions to the app in order to receive alerts. You should see the <code>device token</code> logged to your Xcode console. </p><div align="center"><img src="https://user-images.githubusercontent.com/2284279/33278064-abbe6592-d39a-11e7-81cd-b3affc3ee4b6.PNG" height="500"></div><h2 id="Testing-Push-Notifications"><a href="#Testing-Push-Notifications" class="headerlink" title="Testing Push Notifications"></a>Testing Push Notifications</h2><p>In this tutorial, you’ll use a tool called <a href="https://github.com/onmyway133/PushNotifications" target="_blank" rel="noopener">PushNotifications</a> to help you easily create push notifications for your app. Download the tool <code>PushNotifications</code> from <a href="https://github.com/onmyway133/PushNotifications/releases" target="_blank" rel="noopener">here</a>. This tool sends payloads directly to APNs.</p><p><img src="https://user-images.githubusercontent.com/2284279/33278070-b3094632-d39a-11e7-81f6-62f1ed04130b.png" alt="step4_test"></p><p>Choose <code>iOS\Token</code> to use <code>Token Authentication</code>, you get that by creating and downloading your <code>Key</code> from <a href="https://developer.apple.com/account/ios/authkey/" target="_blank" rel="noopener">Certificates, Identifiers &amp; Profiles</a>. Browse for the <code>.p8</code> auth key file that you downloaded earlier. Enter <code>Team ID</code>, you can check it by going to <a href="https://developer.apple.com/account/#/membership" target="_blank" rel="noopener">Membership Details</a> Enter <code>Key ID</code>, this is the ID associated with the <code>Key</code> from the first step. Enter <code>Bundle ID</code> and <code>device token</code>. Paste the following into as. It is a traditional payload associated with the URN.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"aps"</span>:&#123;</span><br><span class="line">      <span class="attr">"alert"</span>:<span class="string">"You become a celebrity on PhotoFeed, checkout your profile now"</span>,</span><br><span class="line">      <span class="attr">"urn"</span>: <span class="string">"user:self"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since you’re debugging with Xcode, select <code>Sandbox</code> as environment.</p><div align="center"><img src="https://user-images.githubusercontent.com/2284279/33278079-baef3ece-d39a-11e7-8818-56b54ed01a1d.PNG" height="500"></div><p>Tap <code>Send</code> now. If your app is in the background, an alert will appear. Tapping it will take you to your app and show you your user profile. Bravo! You just implemented deep linking in push notification, thanks again to the URL routing.</p><h1 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h1><p>Here is the <a href="https://github.com/onmyway133/PhotoFeed/tree/finish" target="_blank" rel="noopener">final project</a> with all the code from this tutorial. You now understand central routing patterns, have mastered Compass and even refactored a real-world app. However, there is no silver bullet that works well for all apps. You need to understand your requirements and adjust accordingly. If you want to learn more about other navigation patterns, here are a few suggestions: </p><ul><li><a href="http://khanlou.com/2015/10/coordinators-redux/" target="_blank" rel="noopener">Coordinator</a></li><li><a href="http://albertodebortoli.com/blog/2014/09/03/flow-controllers-on-ios-for-a-better-navigation-control/" target="_blank" rel="noopener">Flow controller</a></li><li><a href="https://www.objc.io/issues/13-architecture/viper/" target="_blank" rel="noopener">Routing in VIPER</a></li></ul><p>Remember, it’s not only about the code, but also about the user experience that your app provides. So please make sure you conform to the guidelines <a href="https://developer.apple.com/ios/human-interface-guidelines/interaction/navigation" target="_blank" rel="noopener">Navigation in Human Interface Guidelines iOS</a>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BuddyBuild and gradle.properties</title>
      <link href="/blog/BuddyBuild-and-gradle.properties/"/>
      <url>/blog/BuddyBuild-and-gradle.properties/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/109" target="_blank" rel="noopener">#109</a></strong></p><p>People advise against storing keys inside <code>build.gradles</code>. We should store them on 1Password and populate our <code>gradle.properties</code>, so don’t track this file in git. Here is <code>.gitignore</code> file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*.iml</span><br><span class="line"></span><br><span class="line">/build</span><br><span class="line">/gradle.properties</span><br><span class="line">/local.properties</span><br><span class="line"></span><br><span class="line">.gradle</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure><p>There are several ways to help <code>BuddyBuild</code> know about our <code>gradle.properties</code></p><h2 id="1-Using-Environment-variables"><a href="#1-Using-Environment-variables" class="headerlink" title="1. Using Environment variables"></a>1. Using Environment variables</h2><p>But when configuring the project on <code>BuddyBuild</code>, it complains about key not found. The solution is to use <code>Environment variables</code></p><p><img src="https://user-images.githubusercontent.com/2284279/33169496-36f92542-d045-11e7-8435-9a1f5d5dd24d.png" alt="key"></p><p>Then in your <code>build.gradle</code>, you can </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buildConfigField &apos;String&apos;, &apos;MY_KEY&apos;, System.getenv(&quot;MY_KEY&quot;) ?: MY_KEY</span><br></pre></td></tr></table></figure><p>This is because gradle does not know about environment variables. The <code>System.getenv(&quot;MY_KEY&quot;)</code> is for BuddyBuild, and the default <code>MY_KEY</code> is for <code>gradle.properties</code>. </p><p>Next is to remove this duplication. We can use Groovy <a href="http://docs.groovy-lang.org/latest/html/api/groovy/lang/Binding.html" target="_blank" rel="noopener">Binding</a>. <code>build.gradle</code> does the import <code>import groovy.lang.Binding</code> automatically for us</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String environmentKey(variable) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Object <span class="string">var :</span> binding.variables) &#123;</span><br><span class="line">        <span class="keyword">if</span> (var.value == variable) &#123;</span><br><span class="line">            <span class="keyword">return</span> System.getenv(var.key) ?: variable</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buildConfigField &apos;String&apos;, &apos;MY_KEY&apos;, environmentKey(MY_KEY)</span><br></pre></td></tr></table></figure><h2 id="2-Using-Secured-File-👍"><a href="#2-Using-Secured-File-👍" class="headerlink" title="2. Using Secured File 👍"></a>2. Using Secured File 👍</h2><p>BuddyBuild allows us to define Secured File, here we can upload our <code>gradle.properties</code></p><p><img src="https://user-images.githubusercontent.com/2284279/33172691-69e83392-d051-11e7-87a9-6c1afc4b544e.png" alt="secure files"></p><p>And we can use <a href="https://docs.buddybuild.com/builds/custom_build_steps.html#prebuild" target="_blank" rel="noopener">Prebuild script</a> to copy this secured file to our project. BuddyBuild suggests using <code>buddybuild_prebuild.sh</code> but then build fails in <code>Build file &#39;/tmp/sandbox/workspace/app/build.gradle&#39;</code></p><p>So, create a script called <code>buddybuild_postclone.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">cp <span class="variable">$BUDDYBUILD_SECURE_FILES</span>/gradle.properties <span class="variable">$BUDDYBUILD_WORKSPACE</span>/gradle.properties</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Communication between Fragment and Activity</title>
      <link href="/blog/Communication-between-Fragment-and-Activity/"/>
      <url>/blog/Communication-between-Fragment-and-Activity/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/108" target="_blank" rel="noopener">#108</a></strong></p><p>There’s always need for communication, right 😉 Suppose we have <code>OnboardingActivity</code> that has several <code>OnboardingFragment</code>. Each <code>Fragment</code> has a <code>startButton</code> telling that the onboarding flow has finished, and only the last <code>Fragment</code> shows this button.</p><p>Here are several ways you can do that</p><h2 id="1-EventBus-🙄"><a href="#1-EventBus-🙄" class="headerlink" title="1. EventBus 🙄"></a>1. EventBus 🙄</h2><p>Nearly all articles I found propose this <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a>, but I personally don’t like this idea because components are loosely coupled, every component and broadcast can listen to event from a singleton, which makes it very hard to reason when the project scales</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">OnboardingFinishEvent</span></span>()</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingActivity</span>: <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart()</span><br><span class="line"></span><br><span class="line">        EventBus.getDefault().register(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">super</span>.onStop()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Subscribe(threadMode = ThreadMode.MAIN)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onOnboardingFinishEvent</span><span class="params">(event: <span class="type">OnboardingFinishEvent</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// finish</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingFragment</span>: <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line"></span><br><span class="line">        startButton.onClick &#123;</span><br><span class="line">            EventBus.getDefault().post(OnboardingFinishEvent())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Read more</p><ul><li><a href="https://gunhansancar.com/ease-communication-between-activities-fragments-services/" target="_blank" rel="noopener">https://gunhansancar.com/ease-communication-between-activities-fragments-services/</a></li></ul><h2 id="2-Otto-🙄"><a href="#2-Otto-🙄" class="headerlink" title="2. Otto 🙄"></a>2. Otto 🙄</h2><p>This <a href="https://github.com/square/otto" target="_blank" rel="noopener">https://github.com/square/otto</a> was deprecated in favor of RxJava and RxAndroid</p><h2 id="3-RxJava-🙄"><a href="#3-RxJava-🙄" class="headerlink" title="3. RxJava 🙄"></a>3. RxJava 🙄</h2><p>We can use simple <code>PublishSubject</code> to create our own <a href="https://android.jlelse.eu/super-simple-event-bus-with-rxjava-and-kotlin-f1f969b21003" target="_blank" rel="noopener">RxBus</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.reactivex.Observable</span><br><span class="line"><span class="keyword">import</span> io.reactivex.subjects.PublishSubject</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use object so we have a singleton instance</span></span><br><span class="line"><span class="keyword">object</span> RxBus &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> publisher = PublishSubject.create&lt;Any&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">publish</span><span class="params">(event: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">        publisher.onNext(event)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Listen should return an Observable and not the publisher</span></span><br><span class="line">    <span class="comment">// Using ofType we filter only events that match that class type</span></span><br><span class="line">    fun &lt;T&gt; listen(eventType: Class&lt;T&gt;): Observable&lt;T&gt; = publisher.ofType(eventType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OnboardingFragment.kt</span></span><br><span class="line">startButton.onClick &#123;</span><br><span class="line">    RxBus.publish(OnboardingFinishEvent())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OnboardingActivity.kt</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        </span><br><span class="line">    RxBus.listen(OnboardingFinishEvent::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>).<span class="title">subscribe</span></span>(&#123;</span><br><span class="line">        <span class="comment">// finish</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Interface"><a href="#4-Interface" class="headerlink" title="4. Interface"></a>4. Interface</h2><p>This is advised here <a href="https://developer.android.com/training/basics/fragments/communicating.html#DefineInterface" target="_blank" rel="noopener">Communicating with Other Fragments</a>. Basically you define an interface <code>OnboardingFragmentDelegate</code> that whoever conforms to that, can be informed by the <code>Fragment</code> of events. This is similar to <code>Delegate</code> pattern in iOS 😉 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OnboardingFragmentDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onboardingFragmentDidClickStartButton</span><span class="params">(fragment: <span class="type">OnboardingFragment</span>)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingFragment</span>: <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> delegate: OnboardingFragmentDelegate? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAttach</span><span class="params">(context: <span class="type">Context</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">is</span> OnboardingFragmentDelegate) &#123;</span><br><span class="line">            delegate = context</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line"></span><br><span class="line">        startButton.onClick &#123;</span><br><span class="line">            delegate?.onboardingFragmentDidClickStartButton(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingActivity</span>: <span class="type">AppCompatActivity</span></span>(), OnboardingFragmentDelegate &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onboardingFragmentDidClickStartButton</span><span class="params">(fragment: <span class="type">OnboardingFragment</span>)</span></span> &#123;</span><br><span class="line">        onboardingService.hasShown = <span class="literal">true</span></span><br><span class="line">        startActivity&lt;LoginActivity&gt;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-ViewModel"><a href="#5-ViewModel" class="headerlink" title="5. ViewModel"></a>5. ViewModel</h2><p>We can learn from <a href="https://developer.android.com/topic/libraries/architecture/viewmodel.html" target="_blank" rel="noopener">Share data between fragments</a> to to communication between Fragment and Activity, by using a shared <code>ViewModel</code> that is scoped to the activity. This is a bit overkill</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingSharedViewModel</span>: <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="keyword">val</span> finish = MutableLiveData&lt;<span class="built_in">Unit</span>&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingActivity</span>: <span class="type">AppCompatActivity</span></span>(), OnboardingFragmentDelegate &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="keyword">val</span> viewModel = ViewModelProviders.of(<span class="keyword">this</span>).<span class="keyword">get</span>(OnboardingSharedViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">        viewModel.finish.observe(<span class="keyword">this</span>, Observer &#123;</span><br><span class="line">            startActivity&lt;LoginActivity&gt;()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that we need to call <code>ViewModelProviders.of(activity)</code> to get the same <code>ViewModel</code> with the <code>activity</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingFragment</span>: <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> viewModel = ViewModelProviders.of(activity).<span class="keyword">get</span>(OnboardingSharedViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        startButton.onClick(&#123;</span><br><span class="line">            viewModel.finish.value = <span class="built_in">Unit</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Lambda"><a href="#7-Lambda" class="headerlink" title="7. Lambda"></a>7. Lambda</h2><p>Create a lambda in <code>Fragment</code>, then set it on <code>onAttachFragment</code>. It does not work for now as there is no <code>OnboardingFragment</code> in <code>onAttachFragment</code> 😢 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingFragment</span>: <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> didClickStartButton: (() -&gt; <span class="built_in">Unit</span>)? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line"></span><br><span class="line">        startButton.onClick &#123;</span><br><span class="line">            didClickStartButton?.invoke()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingActivity</span>: <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAttachFragment</span><span class="params">(fragment: <span class="type">Fragment</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttachFragment(fragment)</span><br><span class="line"></span><br><span class="line">        (fragment <span class="keyword">as</span>? OnboardingFragment).let &#123;</span><br><span class="line">            it?.didClickStartButton = &#123;</span><br><span class="line">                <span class="comment">// finish</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Listener-in-Bundle-🙄"><a href="#8-Listener-in-Bundle-🙄" class="headerlink" title="8. Listener in Bundle 🙄"></a>8. Listener in Bundle 🙄</h2><p>Read more</p><ul><li><a href="https://medium.com/groupon-eng/from-fragments-to-activity-the-lambda-way-32c768c72aa9" target="_blank" rel="noopener">https://medium.com/groupon-eng/from-fragments-to-activity-the-lambda-way-32c768c72aa9</a></li><li><a href="https://medium.com/mindorks/how-to-communicate-between-fragments-and-activity-using-viewmodel-ca733233a51c" target="_blank" rel="noopener">How to communicate between fragments and activity using ViewModel</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Testing UIApplication in framework</title>
      <link href="/blog/Testing-UIApplication-in-framework/"/>
      <url>/blog/Testing-UIApplication-in-framework/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/107" target="_blank" rel="noopener">#107</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Coordinator and FlowController</title>
      <link href="/blog/Coordinator-and-FlowController/"/>
      <url>/blog/Coordinator-and-FlowController/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/106" target="_blank" rel="noopener">#106</a></strong></p><p>Every new architecture that comes out, either <a href="https://github.com/onmyway133/fantastic-ios-architecture" target="_blank" rel="noopener">iOS</a> or <a href="https://github.com/onmyway133/fantastic-android-architecture" target="_blank" rel="noopener">Android</a>, makes me very excited. I’m always looking for ways to structure apps in a better way. But after some times, I see that we’re too creative in creating architecture, aka constraint, that is too far away from the platform that we’re building. I often think “If we’re going too far from the system, then it’s very hard to go back”</p><p>I like things that embrace the system. One of them is <a href="http://khanlou.com/2015/10/coordinators-redux/" target="_blank" rel="noopener">Coordinator</a> which helps in encapsulation and navigation. Thanks to my friend <a href="https://github.com/vadymmarkov/" target="_blank" rel="noopener">Vadym</a> for showing me <code>Coordinator</code> in action.</p><p>The below screenshot from @khanlou ‘s <a href="https://www.youtube.com/watch?v=a1g3k3NObkE" target="_blank" rel="noopener">talk</a> at CocoaHeads Stockholm clearly says many things about <code>Coordinator</code></p><div align="center"><img src="https://user-images.githubusercontent.com/2284279/32828592-d03ad9a0-c9ef-11e7-8759-cb0292d668df.png"><br></div><p>But after reading <a href="https://davedelong.com/blog/2017/11/06/a-better-mvc-part-3-fixing-massive-view-controller/" target="_blank" rel="noopener">A Better MVC</a>, I think we can leverage view controller containment to do navigation using <code>UIViewController</code> only.</p><p>Since I tend to call view controllers as <code>LoginController, ProfileController, ...</code> and the term <code>flow</code> to group those related screens, what should we call a <code>Coordinator</code> that inherits from <code>UIViewController</code> 🤔 Let’s call it <code>FlowController</code> 😎 . </p><p>The name is not that important, but the concept is simple. <code>FlowController</code> was also inspired by this <a href="http://albertodebortoli.com/blog/2014/09/03/flow-controllers-on-ios-for-a-better-navigation-control/" target="_blank" rel="noopener">Flow Controllers on iOS for a Better Navigation Control</a> back in 2014. The idea is from awesome iOS people, this is just a sum up from my experience 😇 </p><p>So <code>FlowController</code> can just a <code>UIViewController</code> friendly version of <code>Coordinator</code>. Let see how <code>FlowController</code> fits better into <code>MVC</code></p><blockquote class="twitter-tweet" data-lang="no"><p lang="en" dir="ltr">«UIViewController is the center of the universe.»<br><br>— <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@onmyway133</a></p>&mdash; Elvis Nuñez (@3lvis) <a href="https://twitter.com/3lvis/status/916234962357153792?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">6. oktober 2017</a></blockquote><h2 id="1-FlowController-and-AppDelegate"><a href="#1-FlowController-and-AppDelegate" class="headerlink" title="1. FlowController and AppDelegate"></a>1. FlowController and AppDelegate</h2><p>Your application starts from <code>AppDelegate</code>, in that you setup <code>UIWindow</code>. So we should follow the same “top down” approach for <code>FlowController</code>, starting with <code>AppFlowController</code>. You can construct all dependencies that your app need for <code>AppFlowController</code>, so that it can pass to other child <code>FlowController</code>.</p><p><code>AppDelegate</code> is also considered <a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot/" target="_blank" rel="noopener">Composition Root</a></p><p>Here is how to declare <code>AppFlowController</code> in <code>AppDelegate</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DependencyContainer</span>: <span class="title">AuthServiceContainer</span>, <span class="title">PhoneServiceContainer</span>, <span class="title">NetworkingServiceContainer</span>,</span></span><br><span class="line"><span class="class">  <span class="title">LocationServiceContainer</span>, <span class="title">MapServiceContainer</span>, <span class="title">HealthServiceContainer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> authService: <span class="type">AuthServiceProtocol</span></span><br><span class="line">  <span class="keyword">let</span> phoneService: <span class="type">PhoneService</span></span><br><span class="line">  <span class="keyword">let</span> networkingService: <span class="type">NetworkingService</span></span><br><span class="line">  <span class="keyword">let</span> locationService: <span class="type">LocationService</span></span><br><span class="line">  <span class="keyword">let</span> mapService: <span class="type">MapService</span></span><br><span class="line">  <span class="keyword">let</span> healthService: <span class="type">HealthService</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">()</span></span> -&gt; <span class="type">DependencyContainer</span> &#123;</span><br><span class="line">    <span class="comment">// Configure and make DependencyContainer here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line">  <span class="keyword">var</span> appFlowController: <span class="type">AppFlowController!</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">                   didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    appFlowController = <span class="type">AppFlowController</span>(</span><br><span class="line">      dependencyContainer: <span class="type">DependencyContainer</span>.make()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">    window?.rootViewController = appFlowController</span><br><span class="line">    window?.makeKeyAndVisible()</span><br><span class="line"></span><br><span class="line">    appFlowController.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are some hypothetical <code>FlowController</code> that you may encounter</p><ul><li>AppFlowController: manages UIWindow and check whether to show onboarding, login or main depending on authentication state<ul><li>OnboardingFlowController: manages <code>UIPageViewController</code> and maybe ask for some permissions</li><li>LoginFlowController: manages <code>UINavigationController</code> to show login, sms verification, forget password, and optionally start <code>SignUpFlowController</code></li><li>MainFlowController: manages <code>UITabBarController</code> with each tab serving main features<ul><li>FeedFlowController: show feed with list of items</li><li>ProfileFlowController: show profile</li><li>SettingsFlowController: show settings, and maybe call logout, this will delegates up the <code>FlowController</code> chain.</li></ul></li></ul></li></ul><p>The cool thing about <code>FlowController</code> is it makes your code very self contained, and grouped by features. So it’s easy to move all related things to its own package if you like.</p><h2 id="2-FlowController-as-container-view-controller"><a href="#2-FlowController-as-container-view-controller" class="headerlink" title="2. FlowController as container view controller"></a>2. FlowController as container view controller</h2><blockquote><p>In general, a view controller should manage either sequence or UI, but not both.</p></blockquote><p>Basically, <code>FlowController</code> is just a container view controller to solve the <code>sequence</code>, based on a simple concept called <code>composition</code>. It manages many child view controllers in its flow. Let’ say we have a <code>ProductFlowController</code> that groups together flow related to displaying products, <code>ProductListController</code>, <code>ProductDetailController</code>, <code>ProductAuthorController</code>, <code>ProductMapController</code>, … Each can delegate to the <code>ProductFlowController</code> to express its intent, like <code>ProductListController</code> can delegate to say “product did tap”, so that <code>ProductFlowController</code> can construct and present the next screen in the flow, based on the embedded <code>UINavigationController</code> inside it.</p><p>Normally, a <code>FlowController</code> just displays 1 child <code>FlowController</code> at a time, so normally we can just update its frame</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppFlowController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line"></span><br><span class="line">    childViewControllers.first?.view.frame = view.bounds</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-FlowController-as-dependency-container"><a href="#3-FlowController-as-dependency-container" class="headerlink" title="3. FlowController as dependency container"></a>3. FlowController as dependency container</h2><p>Each view controller inside the flow can have different dependencies, so it’s not fair if the first view controller needs to carry all the stuff just to be able to pass down to the next view controllers. Here are some dependencies</p><ul><li>ProductListController: ProductNetworkingService</li><li>ProductDetailController: ProductNetworkingService, ImageDowloaderService, ProductEditService</li><li>ProductAuthorController: AuthorNetworkingService, ImageDowloaderService</li><li>ProductMapController: LocationService, MapService</li></ul><p>Instead the <code>FlowController</code> can carry all the dependencies needed for that whole flow, so it can pass down to the view controller if needed.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProductDependencyContainer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> productNetworkingService: <span class="type">ProductNetworkingService</span></span><br><span class="line">  <span class="keyword">let</span> imageDownloaderService: <span class="type">ImageDownloaderService</span></span><br><span class="line">  <span class="keyword">let</span> productEditService: <span class="type">ProductEditService</span></span><br><span class="line">  <span class="keyword">let</span> authorNetworkingService: <span class="type">AuthorNetworkingService</span></span><br><span class="line">  <span class="keyword">let</span> locationService: <span class="type">LocationService</span></span><br><span class="line">  <span class="keyword">let</span> mapService: <span class="type">MapService</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductFlowController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dependencyContainer: <span class="type">ProductDependencyContainer</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(dependencyContainer: <span class="type">ProductDependencyContainer</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.dependencyContainer = dependencyContainer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ProductFlowController</span>: <span class="title">ProductListControllerDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">productListController</span><span class="params">(<span class="number">_</span> controller: ProductListController, didSelect product: Product)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> productDetailController = <span class="type">ProductDetailController</span>(</span><br><span class="line">      productNetworkingService: dependencyContainer.productNetworkingService,</span><br><span class="line">      productEditService: dependencyContainer.productEditService,</span><br><span class="line">      imageDownloaderService: dependencyContainer.imageDownloaderService</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    productDetailController.delegate = <span class="keyword">self</span></span><br><span class="line">    embeddedNavigationController.pushViewController(productDetailController, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are some ways that you can use to pass dependencies into <code>FlowController</code></p><ul><li><a href="http://merowing.info/2017/04/using-protocol-compositon-for-dependency-injection/" target="_blank" rel="noopener">Using protocol compositon for dependency injection</a></li><li><a href="https://www.swiftbysundell.com/posts/dependency-injection-using-factories-in-swift" target="_blank" rel="noopener">Dependency injection using factories in Swift</a></li></ul><h2 id="4-Adding-or-removing-child-FlowController"><a href="#4-Adding-or-removing-child-FlowController" class="headerlink" title="4. Adding or removing child FlowController"></a>4. Adding or removing child FlowController</h2><p><strong>Coordinator</strong></p><p>With <code>Coordinator</code>, you need to keep an array of child <code>Coordinators</code>, and maybe use address (<code>===</code> operator) to identify them</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> children: [<span class="type">Coordinator</span>] = []</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(child: Coordinator)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> !children.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; $<span class="number">0</span> === child &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    children.append(child)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(child: Coordinator)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> index = children.index(<span class="keyword">where</span>: &#123; $<span class="number">0</span> === child &#125;) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    children.remove(at: index)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">removeAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">    children.removeAll()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FlowController</strong></p><p>With <code>FlowController</code>, since it is <code>UIViewController</code> subclass, it has <code>viewControllers</code> to hold all those child <code>FlowController</code>. Just add these extensions to simplify your adding or removing of child <code>UIViewController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(childController: UIViewController)</span></span> &#123;</span><br><span class="line">    addChildViewController(childController)</span><br><span class="line">    view.addSubview(childController.view)</span><br><span class="line">    childController.didMove(toParentViewController: <span class="keyword">self</span>)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(childController: UIViewController)</span></span> &#123;</span><br><span class="line">    childController.willMove(toParentViewController: <span class="literal">nil</span>)</span><br><span class="line">    childController.view.removeFromSuperview()</span><br><span class="line">    childController.removeFromParentViewController()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And see in action how <code>AppFlowController</code> work with adding</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppFlowController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> authService.isAuthenticated &#123;</span><br><span class="line">      startMain()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      startLogin()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">startLogin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> loginFlowController = <span class="type">LoginFlowController</span>(</span><br><span class="line">    loginFlowController.delegate = <span class="keyword">self</span></span><br><span class="line">    add(childController: loginFlowController)</span><br><span class="line">    loginFlowController.start()</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">startMain</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> mainFlowController = <span class="type">MainFlowController</span>()</span><br><span class="line">    mainFlowController.delegate = <span class="keyword">self</span></span><br><span class="line">    add(childController: mainFlowController)</span><br><span class="line">    mainFlowController.start()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and with removing when the child <code>FlowController</code> finishes</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppFlowController</span>: <span class="title">LoginFlowControllerDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">loginFlowControllerDidFinish</span><span class="params">(<span class="number">_</span> flowController: LoginFlowController)</span></span> &#123;</span><br><span class="line">    remove(childController: flowController)</span><br><span class="line">    startMain()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-AppFlowController-does-not-need-to-know-about-UIWindow"><a href="#5-AppFlowController-does-not-need-to-know-about-UIWindow" class="headerlink" title="5. AppFlowController does not need to know about UIWindow"></a>5. AppFlowController does not need to know about UIWindow</h2><p><strong>Coordinator</strong></p><p>Usually you have an <code>AppCoordinator</code>, which is held by <code>AppDelegate</code>, as the root of your <code>Coordinator</code> chain. Based on login status, it will determine which <code>LoginController</code> or <code>MainController</code> will be set as the <code>rootViewController</code>, in order to do that, it needs to be injected a <code>UIWindow</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">appCoordinator = <span class="type">AppCoordinator</span>(window: window!)</span><br><span class="line">appCoordinator.start()</span><br><span class="line">window?.makeKeyAndVisible()</span><br></pre></td></tr></table></figure><p>You can guess that in the <code>start</code> method of <code>AppCoordinator</code>, it must set <code>rootViewController</code> before <code>window?.makeKeyAndVisible()</code> is called.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppCoordinator</span>: <span class="title">Coordinator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> window: <span class="type">UIWindow</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">init</span>(window: <span class="type">UIWindow</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.window = window</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> dependencyContainer.authService.isAuthenticated &#123;</span><br><span class="line">      startMain()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      startLogin()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FlowController</strong></p><p>But with <code>AppFlowController</code>, you can treat it like a normal <code>UIViewController</code>, so just setting it as the <code>rootViewController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appFlowController = <span class="type">AppFlowController</span>(</span><br><span class="line">window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">window?.rootViewController = appFlowController</span><br><span class="line">window?.makeKeyAndVisible()</span><br><span class="line"></span><br><span class="line">appFlowController.start()</span><br></pre></td></tr></table></figure><h2 id="6-LoginFlowController-can-manage-its-own-flow"><a href="#6-LoginFlowController-can-manage-its-own-flow" class="headerlink" title="6. LoginFlowController can manage its own flow"></a>6. LoginFlowController can manage its own flow</h2><p>Supposed we have login flow based on <code>UINavigationController</code> that can display <code>LoginController</code>, <code>ForgetPasswordController</code>, <code>SignUpController</code></p><p><strong>Coordinator</strong></p><p>What should we do in the <code>start</code> method of <code>LoginCoordinator</code>? Construct the initial controller <code>LoginController</code> and set it as the <code>rootViewController</code> of the <code>UINavigationController</code>? <code>LoginCoordinator</code> can create this embedded <code>UINavigationController</code> internally, but then it is not attached to the <code>rootViewController</code> of <code>UIWindow</code>, because <code>UIWindow</code> is kept privately inside the parent <code>AppCoordinator</code>.</p><p>We can pass <code>UIWindow</code> to <code>LoginCoordinator</code> but then it knows too much. One way is to construct <code>UINavigationController</code> from <code>AppCoordinator</code> and pass that to <code>LoginCoordinator</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppCoordinator</span>: <span class="title">Coordinator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> window: <span class="type">UIWindow</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">startLogin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> navigationController = <span class="type">UINavigationController</span>()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> loginCoordinator = <span class="type">LoginCoordinator</span>(navigationController: navigationController)</span><br><span class="line"> </span><br><span class="line">    loginCoordinator.delegate = <span class="keyword">self</span></span><br><span class="line">    add(child: loginCoordinator)</span><br><span class="line">    window.rootViewController = navigationController</span><br><span class="line">    loginCoordinator.start()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginCoordinator</span>: <span class="title">Coordinator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> navigationController: <span class="type">UINavigationController</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">init</span>(navigationController: <span class="type">UINavigationController</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.navigationController = navigationController</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> loginController = <span class="type">LoginController</span>(dependencyContainer: dependencyContainer)</span><br><span class="line">    loginController.delegate = <span class="keyword">self</span></span><br><span class="line"> </span><br><span class="line">    navigationController.viewControllers = [loginController]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FlowController</strong></p><p><code>LoginFlowController</code> leverages <code>container view controller</code> so it fits nicely with the way <code>UIKit</code> works. Here <code>AppFlowController</code> can just add <code>LoginFlowController</code> and <code>LoginFlowController</code> can just create its own <code>embeddedNavigationController</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppFlowController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">startLogin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> loginFlowController = <span class="type">LoginFlowController</span>(</span><br><span class="line">      dependencyContainer: dependencyContainer</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    loginFlowController.delegate = <span class="keyword">self</span></span><br><span class="line">    add(childController: loginFlowController)</span><br><span class="line">    loginFlowController.start()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFlowController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> dependencyContainer: <span class="type">DependencyContainer</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> embeddedNavigationController: <span class="type">UINavigationController!</span></span><br><span class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">LoginFlowControllerDelegate?</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(dependencyContainer: <span class="type">DependencyContainer</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.dependencyContainer = dependencyContainer</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    embeddedNavigationController = <span class="type">UINavigationController</span>()</span><br><span class="line">    add(childController: embeddedNavigationController)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> loginController = <span class="type">LoginController</span>(dependencyContainer: dependencyContainer)</span><br><span class="line">    loginController.delegate = <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">    embeddedNavigationController.viewControllers = [loginController]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-FlowController-and-responder-chain"><a href="#7-FlowController-and-responder-chain" class="headerlink" title="7. FlowController and responder chain"></a>7. FlowController and responder chain</h2><p><strong>Coordinator</strong></p><p>Sometimes we want a quick way to bubble up message to parent <code>Coordinator</code>, one way to do that is to replicate <code>UIResponder</code> chain using <code>associated object</code> and protocol extensions, like <a href="http://aplus.rs/2017/highly-maintainable-app-architecture/" target="_blank" rel="noopener">Inter-connect with Coordinator</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">AssociatedKeys</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">var</span> <span class="type">ParentCoordinator</span> = <span class="string">"ParentCoordinator"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> parentCoordinator: <span class="type">Any?</span> &#123;</span><br><span class="line"><span class="keyword">get</span> &#123;</span><br><span class="line"><span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.<span class="type">ParentCoordinator</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> &#123;</span><br><span class="line">objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.<span class="type">ParentCoordinator</span>, newValue, .<span class="type">OBJC_ASSOCIATION_ASSIGN</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>&lt;<span class="title">T</span>: <span class="title">UIViewController</span>&gt;: <span class="title">UIResponder</span>, <span class="title">Coordinating</span> </span>&#123;</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> parent: <span class="type">Coordinating?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">open</span> <span class="keyword">var</span> coordinatingResponder: <span class="type">UIResponder?</span> &#123;</span><br><span class="line"><span class="keyword">return</span> parent <span class="keyword">as</span>? <span class="type">UIResponder</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FlowController</strong></p><p>Since <code>FlowController</code> is <code>UIViewController</code>, which inherits from <code>UIResponder</code>, responder chain happens out of the box</p><blockquote><p>Responder objects—that is, instances of UIResponder—constitute the event-handling backbone of a UIKit app. Many key objects are also responders, including the UIApplication object, UIViewController objects, and all UIView objects (which includes UIWindow). As events occur, UIKit dispatches them to your app’s responder objects for handling.</p></blockquote><h2 id="8-FlowController-and-trait-collection"><a href="#8-FlowController-and-trait-collection" class="headerlink" title="8. FlowController and trait collection"></a>8. FlowController and trait collection</h2><p><strong>FlowController</strong></p><p>I very much like how <a href="https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS.playground/Sources/playgroundController.swift#L43" target="_blank" rel="noopener">Kickstarter</a> uses trait collection in testing. Well, since <code>FlowController</code> is a parent view controller, we can just override its trait collection, and that will affect the size classes of all view controllers inside that flow.</p><p>As in <a href="https://davedelong.com/blog/2017/11/06/a-better-mvc-part-2-fixing-encapsulation/" target="_blank" rel="noopener">A Better MVC, Part 2: Fixing Encapsulation</a></p><blockquote><p>The huge advantage of this approach is that system features come free. Trait collection propagation is free. View lifecycle callbacks are free. Safe area layout margins are generally free. The responder chain and preferred UI state callbacks are free. And future additions to UIViewController are also free.</p></blockquote><p>From <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621406-setoverridetraitcollection" target="_blank" rel="noopener">setOverrideTraitCollection</a></p><blockquote><p>When implementing a custom container view controller, you can use this method to change the traits of any embedded child view controllers to something more appropriate for your layout. Making such a change alters other view controller behaviors associated with that child</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trait = <span class="type">UITraitCollection</span>(traitsFrom: [</span><br><span class="line">  .<span class="keyword">init</span>(horizontalSizeClass: .compact),</span><br><span class="line">  .<span class="keyword">init</span>(verticalSizeClass: .regular),</span><br><span class="line">  .<span class="keyword">init</span>(userInterfaceIdiom: .phone)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">appFlowController.setOverrideTraitCollection(trait, forChildViewController: loginFlowController)</span><br></pre></td></tr></table></figure><h2 id="9-FlowController-and-back-button"><a href="#9-FlowController-and-back-button" class="headerlink" title="9. FlowController and back button"></a>9. FlowController and back button</h2><p><strong>Coordinator</strong></p><p>One problem with <code>UINavigationController</code> is that clicking on the default <code>back button</code> pops the view controller out of the navigation stack, so <code>Coordinator</code> is not aware of that. With <code>Coordinator</code> you needs to keep <code>Coordinator</code> and <code>UIViewController</code> in sync, add try to hook up <code>UINavigationControllerDelegate</code> in order to clean up. Like in <a href="http://khanlou.com/2017/05/back-buttons-and-coordinators/" target="_blank" rel="noopener">Back Buttons and Coordinators</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Coordinator</span>: <span class="title">UINavigationControllerDelegate</span> </span>&#123;    </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">navigationController</span><span class="params">(navigationController: UINavigationController,</span></span></span><br><span class="line"><span class="function"><span class="params">didShowViewController viewController: UIViewController, animated: Bool)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ensure the view controller is popping</span></span><br><span class="line"><span class="keyword">guard</span></span><br><span class="line">  <span class="keyword">let</span> fromViewController = navigationController.transitionCoordinator?.viewController(forKey: .from),</span><br><span class="line">  !navigationController.viewControllers.<span class="built_in">contains</span>(fromViewController) <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// and it's the right type</span></span><br><span class="line"><span class="keyword">if</span> fromViewController <span class="keyword">is</span> <span class="type">FirstViewControllerInCoordinator</span>) &#123;</span><br><span class="line"><span class="comment">//deallocate the relevant coordinator</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or creating a class called <code>NavigationController</code> that inside manages a list of child coordinators. Like in <a href="http://irace.me/navigation-coordinators" target="_blank" rel="noopener">Navigation coordinators</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NavigationController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="comment">// MARK: - Inputs</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> rootViewController: <span class="type">UIViewController</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// MARK: - Mutable state</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> viewControllersToChildCoordinators: [<span class="type">UIViewController</span>: <span class="type">Coordinator</span>] = [:]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MARK: - Lazy views</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> childNavigationController: <span class="type">UINavigationController</span> =</span><br><span class="line">      <span class="type">UINavigationController</span>(rootViewController: <span class="keyword">self</span>.rootViewController)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MARK: - Initialization</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(rootViewController: <span class="type">UIViewController</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.rootViewController = rootViewController</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FlowController</strong></p><p>Since <code>FlowController</code> is just plain <code>UIViewController</code>, you don’t need to manually manage child <code>FlowController</code>. The child <code>FlowController</code> is gone when you pop or dismiss. If we want to listen to <code>UINavigationController</code> events, we can just handle that inside the <code>FlowController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFlowController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> dependencyContainer: <span class="type">DependencyContainer</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> embeddedNavigationController: <span class="type">UINavigationController!</span></span><br><span class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">LoginFlowControllerDelegate?</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(dependencyContainer: <span class="type">DependencyContainer</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.dependencyContainer = dependencyContainer</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    embeddedNavigationController = <span class="type">UINavigationController</span>()</span><br><span class="line">    embeddedNavigationController.delegate = <span class="keyword">self</span></span><br><span class="line">    add(childController: embeddedNavigationController)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LoginFlowController</span>: <span class="title">UINavigationControllerDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">navigationController</span><span class="params">(<span class="number">_</span> navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-FlowController-and-callback"><a href="#10-FlowController-and-callback" class="headerlink" title="10. FlowController and callback"></a>10. FlowController and callback</h2><p>We can use <code>delegate</code> pattern to notify <code>FlowController</code> to show another view controller in the flow</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ProductFlowController</span>: <span class="title">ProductListControllerDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">productListController</span><span class="params">(<span class="number">_</span> controller: ProductListController, didSelect product: Product)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> productDetailController = <span class="type">ProductDetailController</span>(</span><br><span class="line">      productNetworkingService: dependencyContainer.productNetworkingService,</span><br><span class="line">      productEditService: dependencyContainer.productEditService,</span><br><span class="line">      imageDownloaderService: dependencyContainer.imageDownloaderService</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    productDetailController.delegate = <span class="keyword">self</span></span><br><span class="line">    embeddedNavigationController.pushViewController(productDetailController, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another approach is to use <code>closure</code> as callback, as proposed by <a href="https://twitter.com/merowing_/status/930755494502981632" target="_blank" rel="noopener">@merowing_</a>, and also in his post <a href="http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/" target="_blank" rel="noopener">Improve your iOS Architecture with FlowControllers</a></p><blockquote><p>Using closures as triggers rather than delegate allows for more readable and specialized implementation, and multiple contexts</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFlowController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> productListController = <span class="type">ProductListController</span>(</span><br><span class="line">      productNetworkingService: dependencyContainer.productNetworkingService</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    productListController.didSelectProduct = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] product <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>?.showDetail(<span class="keyword">for</span>: product)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    embeddedNavigationController.viewControllers = [productListController]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-FlowController-and-deep-linking"><a href="#11-FlowController-and-deep-linking" class="headerlink" title="11. FlowController and deep linking"></a>11. FlowController and deep linking</h2><p>TBD. In the mean while, here are some readings about the UX</p><ul><li><a href="https://developer.android.com/design/patterns/navigation.html" target="_blank" rel="noopener">Navigation with Back and Up</a></li><li><a href="https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/1649518-usernotificationcenter" target="_blank" rel="noopener">UserNotification</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Please reconsidering your choice of libraries</title>
      <link href="/blog/Please-reconsidering-your-choice-of-libraries/"/>
      <url>/blog/Please-reconsidering-your-choice-of-libraries/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/105" target="_blank" rel="noopener">#105</a></strong></p><p>Are you willing to take vaccines you don’t know about?</p><p>I like open source. I ‘ve made some and contributed to some. I also use other people ‘s open source libraries and <a href="https://github.com/onmyway133/blog/issues?utf8=%E2%9C%93&q=Learning%20from%20Open%20Source" target="_blank" rel="noopener">learn</a> a lot from them 😇 </p><p>Open source can help us build better, faster and maybe more <a href="https://github.com/onmyway133/blog/issues/85" target="_blank" rel="noopener">performant</a> software by basing on other people ‘s hard work. We can also collaborate and make it better. But it’s also a double edges sword if you’re not judging carefully. </p><h3 id="Putting-a-little-bit-more-dedication"><a href="#Putting-a-little-bit-more-dedication" class="headerlink" title="Putting a little bit more dedication"></a>Putting a little bit more dedication</h3><p>You can skip this post if your project is just for fun, and you don’t care about future maintenance. If you’re making client or product projects, you should care and put a little more dedication into it. The company and your teammates trust you to do the good work. </p><p>I’ve admitted that I ‘ve done <code>node.js</code> and <code>electron.js</code>. The choice is because it’s just a utility that I want to make quickly, and there ‘s many <code>node.js</code> packages that I can use immediately. I have little experience in <code>node.js</code>, so I accept the risk do get the work done. But if you’re experienced developer in your platform, and it’s your important project, then it’s a different story 💥 </p><p>I’m kind of experimental person, so I always want to try new things. But I also learn the hard way to not over engineer, and to live as close to the system as possible. I just read <a href="http://aplus.rs/2017/much-ado-about-ios-app-architecture/" target="_blank" rel="noopener">Much ado about iOS app architecture</a> and I agree with most of the points, that we shouldn’t fight the SDK and replace system frameworks.</p><p>To me, using 3rd libraries is like giving your life to someone else ‘s hands, that you can’t make any decision for your future. Please don’t just <code>pod install</code> and consider it done 🙏 </p><h3 id="What-about-the-stars"><a href="#What-about-the-stars" class="headerlink" title="What about the stars"></a>What about the stars</h3><p>People tend to follow those that have lots of followers, and to star a project with lots of stars. Don’t trust the stars. It means nearly nothing. The star is just the result of some marketing effort. Being featured or not in a newsletter can make 1k stars difference. Just because it was featured in a newsletter does not necessarily mean that it is good 😬 </p><p>You should judge it yourself by checking how good the source code is, how many documentation are available, and whether there is unit tests or not. The author is just human, so he can’t help maintain the library forever. You’re taking a big risk if you don’t have good picture of the library.</p><p>The system, especially iOS, changes very often. There are some libraries that try to “replicate” system APIs or perform type checking for every possible types. It can be that the author pick the most common use cases, or just trying to provide a cleaner APIs to the user. But if things change, will that author be willing to fix that? Will you be stuck there and making another issue asking for help? We’re making life better, not traps for everyone to fall into 🙀 </p><p>Here I don’t try to blame anyone, “you is not your work”. I just say that you should check it more thoroughly. You can consult your colleagues and discuss if it’s good to integrate. Most of the time, pulling a huge library just for some tiny syntactic sugar does not worth it</p><details>   <summary>I just put some random links here and you can determine if you like or not</summary><ul><li><a href="https://github.com/radex/SwiftyUserDefaults/blob/master/Sources/SwiftyUserDefaults.swift#L145" target="_blank" rel="noopener">https://github.com/radex/SwiftyUserDefaults/blob/master/Sources/SwiftyUserDefaults.swift#L145</a><ul><li><a href="https://github.com/jiecao-fm/SwiftTheme/blob/master/Source/UIKit%2BTheme.swift#L183" target="_blank" rel="noopener">https://github.com/jiecao-fm/SwiftTheme/blob/master/Source/UIKit%2BTheme.swift#L183</a></li><li><a href="https://github.com/erichoracek/Motif/blob/7ec2dfce45cd93cb5ae22f4f512a41a499138fd5/Examples/ButtonsExample/ThemeThemeSymbols.m#L10" target="_blank" rel="noopener">https://github.com/erichoracek/Motif/blob/7ec2dfce45cd93cb5ae22f4f512a41a499138fd5/Examples/ButtonsExample/ThemeThemeSymbols.m#L10</a></li><li><a href="https://github.com/vhesener/Closures/blob/master/Xcode/Closures/Source/UITableView.swift#L251" target="_blank" rel="noopener">https://github.com/vhesener/Closures/blob/master/Xcode/Closures/Source/UITableView.swift#L251</a></li><li><a href="https://github.com/Draveness/DKNightVersion/blob/master/DKNightVersion/UIKit/UITableView%2BNight.m#L29" target="_blank" rel="noopener">https://github.com/Draveness/DKNightVersion/blob/master/DKNightVersion/UIKit/UITableView%2BNight.m#L29</a></li><li><a href="https://github.com/tombenner/nui/blob/master/NUI/Core/NUISwizzler.m#L15" target="_blank" rel="noopener">https://github.com/tombenner/nui/blob/master/NUI/Core/NUISwizzler.m#L15</a></li><li><a href="https://github.com/square/SuperDelegate/blob/master/Sources/SuperDelegate%2BLocalNotifications.swift#L53" target="_blank" rel="noopener">https://github.com/square/SuperDelegate/blob/master/Sources/SuperDelegate%2BLocalNotifications.swift#L53</a></li><li><a href="https://github.com/orta/ARAnalytics/blob/master/ARDSL.m#L113" target="_blank" rel="noopener">https://github.com/orta/ARAnalytics/blob/master/ARDSL.m#L113</a></li><li><a href="https://github.com/SnapKit/SnapKit/blob/develop/Source/ConstraintMakerRelatable.swift#L43" target="_blank" rel="noopener">https://github.com/SnapKit/SnapKit/blob/develop/Source/ConstraintMakerRelatable.swift#L43</a>  </li><li><a href="https://github.com/saoudrizwan/DynamicJSON/blob/master/Sources/DynamicJSON.swift#L54" target="_blank" rel="noopener">https://github.com/saoudrizwan/DynamicJSON/blob/master/Sources/DynamicJSON.swift#L54</a></li></ul></li></ul></details><h3 id="Please"><a href="#Please" class="headerlink" title="Please"></a>Please</h3><p>Would you take a very big risk for so little return ? Always implement and imagine that you will be the next maintainer for the project, then you will act differently.</p><p>So the next time, please reconsider your choice of libraries. Take 1 step back and analyse a bit ❤️ </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make generic extension with associatedtype protocol in Swift</title>
      <link href="/blog/How-to-make-generic-extension-with-associatedtype-protocol-in-Swift/"/>
      <url>/blog/How-to-make-generic-extension-with-associatedtype-protocol-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/104" target="_blank" rel="noopener">#104</a></strong></p><p>I like extensions, and I like to group them under 1 common property to easily access. This also makes it clear that these all belong to the same feature and not to confuse with Apple properties.</p><h3 id="Grouping-all-related-extensions"><a href="#Grouping-all-related-extensions" class="headerlink" title="Grouping all related extensions"></a>Grouping all related extensions</h3><p>This is how I do it in <a href="https://github.com/onmyway133/Anchors" target="_blank" rel="noopener">Anchor</a> and <a href="https://github.com/onmyway133/On" target="_blank" rel="noopener">On</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">activate(</span><br><span class="line">  a.anchor.top.<span class="keyword">left</span>,</span><br><span class="line">  b.anchor.top.<span class="keyword">right</span>,</span><br><span class="line">  <span class="built_in">c</span>.anchor.bottom.<span class="keyword">left</span>,</span><br><span class="line">  d.anchor.bottom.<span class="keyword">right</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">textField.on.text &#123; text <span class="keyword">in</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"textField text has changed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">textField.on.didEndEditing &#123; text <span class="keyword">in</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"texField has ended editing"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generic-extension"><a href="#Generic-extension" class="headerlink" title="Generic extension"></a>Generic extension</h3><p>For <code>On</code>, it is a bit tricky as it needs to adapt to different <code>NSObject</code> subclasses. And to make auto completion work, meaning that each type of subclass gets its own function hint, we need to use generic and <code>associatedtype</code> protocol.</p><p>You can take a look at <a href="https://github.com/onmyway133/On/blob/master/Sources/Shared/Core/Container.swift" target="_blank" rel="noopener">Container</a> and <a href="https://github.com/onmyway133/On/blob/master/Sources/Shared/Core/OnAware.swift" target="_blank" rel="noopener">OnAware</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span>&lt;<span class="title">Host</span>: <span class="title">AnyObject</span>&gt;: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unowned</span> <span class="keyword">let</span> host: <span class="type">Host</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(host: <span class="type">Host</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.host = host</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">OnAware</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">OnAwareHostType</span>: <span class="type">AnyObject</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> on: <span class="type">Container</span>&lt;<span class="type">OnAwareHostType</span>&gt; &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RxCocoa"><a href="#RxCocoa" class="headerlink" title="RxCocoa"></a>RxCocoa</h3><p><a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="noopener">RxSwift</a> has its <code>RxCocoa</code> that does this trick too, so that you can just declare</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button.rx.tap</span><br><span class="line">textField.rx.text</span><br><span class="line">alertAction.rx.isEnabled</span><br></pre></td></tr></table></figure><p>The power lies in the struct <a href="https://github.com/ReactiveX/RxSwift/blob/0b66f666ba6955a51cba1ad530311b030fa4db9c/RxSwift/Reactive.swift" target="_blank" rel="noopener">Reactive</a> and <code>ReactiveCompatible</code> protocol</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Reactive</span>&lt;<span class="title">Base</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/// Base object to extend.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> base: <span class="type">Base</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Creates extensions with base object.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - parameter base: Base object.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.base = base</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ReactiveCompatible</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Extended type</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">CompatibleType</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Reactive extensions.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">CompatibleType</span>&gt;.<span class="type">Type</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Reactive extensions.</span></span><br><span class="line">    <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">CompatibleType</span>&gt; &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ReactiveCompatible</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Reactive extensions.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">Self</span>&gt;.<span class="type">Type</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Reactive</span>&lt;<span class="type">Self</span>&gt;.<span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="comment">// this enables using Reactive to "mutate" base type</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Reactive extensions.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Reactive</span>(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="comment">// this enables using Reactive to "mutate" base object</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here <a href="https://github.com/ReactiveX/RxSwift/blob/master/RxCocoa/iOS/UIButton%2BRx.swift" target="_blank" rel="noopener">UIButton+Rx</a> you can see how it can be applied to <code>UIButton</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UIButton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Reactive wrapper for `TouchUpInside` control event.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> tap: <span class="type">ControlEvent</span>&lt;<span class="type">Void</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> controlEvent(.touchUpInside)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make simple Binding in MVVM in iOS</title>
      <link href="/blog/How-to-make-simple-Binding-in-MVVM-in-iOS/"/>
      <url>/blog/How-to-make-simple-Binding-in-MVVM-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/103" target="_blank" rel="noopener">#103</a></strong></p><p>If you use <code>MVVM</code> or any other kinds of helper classes, then there’s need to report back the result to the caller. In simple cases, without asynchronous chaining, <code>RxSwift</code> is a bit overkill, you can just implement your own <code>Binding</code>. Basically, it is just observer pattern, or closure in its simplest form.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Binding</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value: <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123;</span><br><span class="line">      listener?(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> listener: ((<span class="type">T</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(value: <span class="type">T</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.value = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">bind</span><span class="params">(<span class="number">_</span> closure: @escaping <span class="params">(T)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    closure(value)</span><br><span class="line">    listener = closure</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then you can declare it like</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> friends = <span class="type">Binding</span>&lt;[<span class="type">User</span>]&gt;(value: [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    getFacebookFriends &#123;</span><br><span class="line">      friends.value = $<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">getFacebookFriends</span><span class="params">(completion: <span class="params">([User])</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="comment">// Do the work</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, this is how you listen to the result via callback</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">  viewModel.friends.bind &#123; friends <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>.friendsCountLabel.text = <span class="string">"\(friends.count)"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use custom UINavigationBar in iOS</title>
      <link href="/blog/How-to-use-custom-UINavigationBar-in-iOS/"/>
      <url>/blog/How-to-use-custom-UINavigationBar-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/102" target="_blank" rel="noopener">#102</a></strong></p><p>Today I was reading the project in <a href="https://www.raywenderlich.com/147162/iglistkit-tutorial-better-uicollectionviews" target="_blank" rel="noopener">IGListKit Tutorial: Better UICollectionViews</a>, I encounter something I often overlook</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nav = <span class="type">UINavigationController</span>(navigationBarClass: <span class="type">CustomNavigationBar</span>.<span class="keyword">self</span>, toolbarClass: <span class="literal">nil</span>)</span><br><span class="line">nav.pushViewController(<span class="type">FeedViewController</span>(), animated: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>So we can provide custom <code>navigationBarClass</code> and <code>toolbarClass</code> for <code>UINavigationController</code>. This <a href="https://github.com/remirobert/RRMaterialNavigationBar" target="_blank" rel="noopener">RRMaterialNavigationBar</a> also has cool implementation of a material <code>UINavigationBar</code>.</p><p>Together with <code>UINavigationBarDelegate</code> we can do some cool things</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>It&#39;s good to have a CI</title>
      <link href="/blog/It&#39;s-good-to-have-a-CI/"/>
      <url>/blog/It&#39;s-good-to-have-a-CI/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/101" target="_blank" rel="noopener">#101</a></strong></p><p>I have Unit tests and UI tests pass on my simulator and device, locally. But when I make the build on Buddybuild, it fails with the reason <code>Activity cannot be used after its scope has completed</code>. People seem to have <a href="https://forums.developer.apple.com/thread/87463" target="_blank" rel="noopener">the</a> <a href="https://stackoverflow.com/questions/46318833/how-can-i-avoid-nsinternalinconsistencyexception-when-tapping-on-ui-elements-wit" target="_blank" rel="noopener">same</a> issue too.</p><p>Taking a look at the log in Buddybuild </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> t =     8.89s     Staging: UIStatusBarWindow</span><br><span class="line">t =     8.95s     Staging: (CoreFoundation) Sending Updated Preferences to System CFPrefsD</span><br><span class="line">t =     8.95s     Staging: Setup BuddybuildSDK</span><br><span class="line">t =     8.98s     Staging: [BuddyBuildSDK] In app store - Instant Replay Disabled</span><br><span class="line">t =     8.98s     Staging: Setting up the remote notifications for UI Tests video recording</span><br><span class="line">t =     9.07s     CL: CLLocationManager</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Client] &#123;&quot;msg&quot;:&quot;CLLocationManager&quot;, &quot;event&quot;:activity, &quot;_cmd&quot;:initWithEffectiveBundleIdentifier:bundle:, &quot;self&quot;:&quot;0x600000205140&quot;, &quot;identifier&quot;:(null), &quot;bundle&quot;:(null)&#125;</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Core] &#123;&quot;msg&quot;:&quot;state transition&quot;, &quot;event&quot;:state_transition, &quot;state&quot;:LocationManager, &quot;id&quot;:&quot;0x600000205140&quot;, &quot;property&quot;:init, &quot;new&quot;:&apos;00 00 00 00 00 00 F0 BF 00 00 00 00 00 00 F0 BF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 3F 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00&apos;&#125;</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Core] &#123;&quot;msg&quot;:&quot;state transition&quot;, &quot;event&quot;:state_transition, &quot;state&quot;:LocationManager, &quot;id&quot;:&quot;0x600000205140&quot;, &quot;property&quot;:lifecycle, &quot;old&quot;:&quot;0x0&quot;, &quot;new&quot;:&quot;0x6040000ddd50&quot;&#125;</span><br><span class="line">t =     9.07s     CL: _CLClientCreateWithBundleIdentifierAndPath</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Client] &#123;&quot;msg&quot;:&quot;_CLClientCreateWithBundleIdentifierAndPath&quot;, &quot;event&quot;:activity, &quot;effectiveBundleIdentifier&quot;:(null), &quot;effectiveBundlePath&quot;:(null)&#125;</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Client] &#123;&quot;msg&quot;:&quot;client allocated&quot;, &quot;client&quot;:&quot;0x7f84c64e0990&quot;&#125;</span><br><span class="line">t =     9.07s     CL: _CLClientCreateConnection</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Client] &#123;&quot;msg&quot;:&quot;_CLClientCreateConnection&quot;, &quot;event&quot;:activity, &quot;client&quot;:&quot;0x7f84c64e0990&quot;&#125;</span><br><span class="line">t =     9.07s     CL: Sending cached messages to daemon</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Client] &#123;&quot;msg&quot;:&quot;Sending cached messages to daemon&quot;, &quot;event&quot;:activity&#125;</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Client] #Warning No cached registration message</span><br><span class="line">t =     9.07s     Staging: (CoreLocation) [com.apple.locationd.Core.Core] &#123;&quot;msg&quot;:&quot;state transition&quot;, &quot;event&quot;:state_transition, &quot;state&quot;:LocationManager, &quot;id&quot;:&quot;0x600000205140&quot;, &quot;property&quot;:pausesLocationUpdatesAutomatically, &quot;old&quot;:0, &quot;new&quot;:1&#125;</span><br><span class="line">t =     9.10s     CL: CLLocationManager</span><br><span class="line">t =     9.11s     Staging: (CoreLocation) [com.apple.locationd.Core.Client] &#123;&quot;msg&quot;:&quot;CLLocationManager&quot;, &quot;event&quot;:activity, &quot;_cmd&quot;:setDelegate:, &quot;self&quot;:&quot;0x600000205140&quot;, &quot;delegate&quot;:&quot;0x60400028bef0&quot;&#125;</span><br><span class="line">t =     9.12s     error: unexpectedly found nil while unwrapping an Optional value</span><br><span class="line">t =     9.12s             Unable to monitor event loop</span><br><span class="line">t =    10.13s Tap &quot;Onboarding.Continue&quot; Button</span><br><span class="line">t =    10.13s     Wait for no.hyper.MyApp-Staging to idle</span><br><span class="line">t =    10.16s     Find the &quot;Onboarding.Continue&quot; Button</span><br><span class="line">t =    11.28s         Assertion Failure: &lt;unknown&gt;:0: no.hyper.MyApp-Staging crashed in MyApp_Staging.AppDelegate.(makeDependencyContainer in _5D394B3D7D393F9C3C550E61780517BB)() -&gt; MyApp_Staging.DependencyContainer</span><br><span class="line">t =    11.33s Wait for com.apple.springboard to idle</span><br></pre></td></tr></table></figure><p>Did you see <code>unexpectedly found nil while unwrapping an Optional value</code>?  It crashed in <code>CLLocationManager</code>. It is because when location changes, <code>CLLocationManager</code> needs to report it via <code>didUpdateLocations</code> function, but we haven’t implemented it. Strangely that it didn’t happen when testing locally.</p><p>The proposed fix is to implement a dummy method with no operation</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didUpdateLocations locations: [CLLocation])</span></span> &#123;</span><br><span class="line">  <span class="comment">// No op</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But it is not the solution. It appears that <code>BuddyBuild</code> is doing some hacks with how <code>push notification</code> and <code>UIWindow</code>, hence causing the issue.  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Why native?</title>
      <link href="/blog/Why-native/"/>
      <url>/blog/Why-native/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/100" target="_blank" rel="noopener">#100</a></strong></p><p>For now, I still believe in native. Here are some interesting links</p><ul><li><a href="https://android.jlelse.eu/why-we-are-not-cross-platform-developers-fd7ef70e976d" target="_blank" rel="noopener">Why we are not cross-platform developers</a></li><li><a href="https://arielelkin.github.io/articles/why-im-not-a-react-native-developer.html" target="_blank" rel="noopener">Why I’m not a React Native Developer</a></li><li><a href="https://2016.mobileera.rocks/schedule/#session-203" target="_blank" rel="noopener">We are ditching Xamarin. Why?</a></li><li><a href="https://en.wikipedia.org/wiki/Leaky_abstraction" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Leaky_abstraction</a></li><li><a href="https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5" target="_blank" rel="noopener">I’m harvesting credit card numbers and passwords from your site. Here’s how.</a></li><li><a href="https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/" target="_blank" rel="noopener">How one developer just broke Node, Babel and thousands of projects in 11 lines of JavaScript</a></li></ul><p>React Native</p><ul><li><a href="https://medium.com/snipe-gg/should-you-use-react-native-to-build-your-startups-mobile-app-c0baf9f4d9ad" target="_blank" rel="noopener">https://medium.com/snipe-gg/should-you-use-react-native-to-build-your-startups-mobile-app-c0baf9f4d9ad</a></li><li><a href="https://blog.discordapp.com/using-react-native-one-year-later-91fd5e949933" target="_blank" rel="noopener">https://blog.discordapp.com/using-react-native-one-year-later-91fd5e949933</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Diff algorithm</title>
      <link href="/blog/Diff-algorithm/"/>
      <url>/blog/Diff-algorithm/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/99" target="_blank" rel="noopener">#99</a></strong></p><p>I’ve been searching for efficient ways to diff collections, here are some interesting papers that I find</p><p><strong>Myers</strong> </p><ul><li><a href="http://www.xmailserver.org/diff2.pdf" target="_blank" rel="noopener">An O(ND) Difference Algorithm and Its Variations</a></li><li><a href="https://github.com/wokalski/Diff.swift" target="_blank" rel="noopener">https://github.com/wokalski/Diff.swift</a></li><li><a href="https://github.com/kpdecker/jsdiff" target="_blank" rel="noopener">https://github.com/kpdecker/jsdiff</a></li><li><a href="https://github.com/raywenderlich/swift-algorithm-club/pull/693/files" target="_blank" rel="noopener">https://github.com/raywenderlich/swift-algorithm-club/pull/693/files</a></li></ul><p><strong>Wu</strong> </p><ul><li><a href="https://publications.mpi-cbg.de/Wu_1990_6334.pdf" target="_blank" rel="noopener">An O(NP) Sequence Comparison Algorithm</a></li><li><a href="https://github.com/kazuhiro4949/EditDistance" target="_blank" rel="noopener">https://github.com/kazuhiro4949/EditDistance</a></li><li><a href="https://github.com/cubicdaiya/onp" target="_blank" rel="noopener">https://github.com/cubicdaiya/onp</a></li><li><a href="https://github.com/hattya/go.diff/blob/master/diff.go" target="_blank" rel="noopener">https://github.com/hattya/go.diff/blob/master/diff.go</a></li><li><a href="https://gist.github.com/tociyuki/acedd33ca4913f1ab8e9" target="_blank" rel="noopener">https://gist.github.com/tociyuki/acedd33ca4913f1ab8e9</a></li><li><a href="http://t2y.hatenablog.jp/entry/20090802/1249146010" target="_blank" rel="noopener">http://t2y.hatenablog.jp/entry/20090802/1249146010</a></li></ul><p><strong>Wagner–Fischer</strong></p><ul><li><a href="https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm</a>)</li><li><a href="http://davedelong.tumblr.com/post/134367865668/edit-distance-and-edit-steps" target="_blank" rel="noopener">http://davedelong.tumblr.com/post/134367865668/edit-distance-and-edit-steps</a></li><li><a href="https://github.com/osteslag/Changeset" target="_blank" rel="noopener">https://github.com/osteslag/Changeset</a></li><li><a href="https://github.com/onmyway133/DeepDiff" target="_blank" rel="noopener">https://github.com/onmyway133/DeepDiff</a></li></ul><p><strong>Common Longest Subsequence</strong></p><ul><li><a href="https://en.wikipedia.org/wiki/Longest_common_subsequence_problem" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Longest_common_subsequence_problem</a></li><li><a href="https://github.com/jflinter/Dwifft" target="_blank" rel="noopener">https://github.com/jflinter/Dwifft</a></li><li><a href="https://github.com/Frugghi/SwiftLCS" target="_blank" rel="noopener">https://github.com/Frugghi/SwiftLCS</a></li></ul><p><strong>Heckel</strong></p><ul><li><a href="http://documents.scribd.com/docs/10ro9oowpo1h81pgh1as.pdf" target="_blank" rel="noopener">http://documents.scribd.com/docs/10ro9oowpo1h81pgh1as.pdf</a></li><li><a href="https://dl.acm.org/citation.cfm?id=359467" target="_blank" rel="noopener">A technique for isolating differences between files</a></li><li><a href="https://github.com/mcudich/HeckelDiff" target="_blank" rel="noopener">https://github.com/mcudich/HeckelDiff</a></li><li><a href="https://github.com/Instagram/IGListKit/blob/40625f8ff960cc1fd73400bf57a7a367470d1ef3/Source/Common/IGListDiff.mm" target="_blank" rel="noopener">IGListDiff</a></li><li><a href="https://github.com/andre-alves/PHDiff" target="_blank" rel="noopener">https://github.com/andre-alves/PHDiff</a></li><li><a href="https://gist.github.com/ndarville/3166060" target="_blank" rel="noopener">https://gist.github.com/ndarville/3166060</a></li><li><a href="https://github.com/myndzi/heckel-diff" target="_blank" rel="noopener">https://github.com/myndzi/heckel-diff</a></li><li><a href="https://johnresig.com/projects/javascript-diff-algorithm/" target="_blank" rel="noopener">https://johnresig.com/projects/javascript-diff-algorithm/</a></li><li><a href="https://stackoverflow.com/questions/42755035/difficulty-understanding-paul-heckels-diff-algorithm" target="_blank" rel="noopener">https://stackoverflow.com/questions/42755035/difficulty-understanding-paul-heckels-diff-algorithm</a></li><li><a href="https://github.com/RACCommunity/FlexibleDiff/blob/diffing/FlexibleDiff/Changeset.swift" target="_blank" rel="noopener">https://github.com/RACCommunity/FlexibleDiff/blob/diffing/FlexibleDiff/Changeset.swift</a></li><li><a href="https://github.com/onmyway133/DeepDiff" target="_blank" rel="noopener">https://github.com/onmyway133/DeepDiff</a></li><li><a href="https://github.com/ra1028/DifferenceKit" target="_blank" rel="noopener">https://github.com/ra1028/DifferenceKit</a></li></ul><p><strong>Hunt-Szymanski</strong></p><ul><li><a href="http://www.imada.sdu.dk/~rolf/Edu/DM823/E16/HuntSzymanski.pdf" target="_blank" rel="noopener">The Hunt-Szymanski Algorithm for LCS</a></li></ul><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="http://wiki.c2.com/?DiffAlgorithm" target="_blank" rel="noopener">http://wiki.c2.com/?DiffAlgorithm</a></li><li><a href="https://stackoverflow.com/questions/9065536/text-comparison-algorithm" target="_blank" rel="noopener">https://stackoverflow.com/questions/9065536/text-comparison-algorithm</a></li><li><a href="https://neil.fraser.name/writing/diff/" target="_blank" rel="noopener">https://neil.fraser.name/writing/diff/</a></li><li><a href="https://github.com/davedelong/SE-0240" target="_blank" rel="noopener">https://github.com/davedelong/SE-0240</a></li><li><a href="https://forums.swift.org/t/se-0240-ordered-collection-diffing/19514" target="_blank" rel="noopener">https://forums.swift.org/t/se-0240-ordered-collection-diffing/19514</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use safeAreaLayoutGuide in iOS 10</title>
      <link href="/blog/How-to-use-safeAreaLayoutGuide-in-iOS-10/"/>
      <url>/blog/How-to-use-safeAreaLayoutGuide-in-iOS-10/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/98" target="_blank" rel="noopener">#98</a></strong></p><p>The <a href="https://developer.apple.com/documentation/uikit/uiview/2891102-safearealayoutguide" target="_blank" rel="noopener">safeAreaLayoutGuide</a> was introduced in iOS 11. And it is advised to stop using <code>topLayoutGuide</code> <code>bottomLayoutGuide</code> as these are deprecated.</p><p>To use <code>safeAreaLayoutGuide</code>, you need to do iOS version check</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">  headerView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: <span class="number">20</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  headerView.topAnchor.constraint(equalTo: view.topAnchor, constant: <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Maybe we can introduce a common property that can be used across many iOS versions, let’s call it <code>compatibleSafeAreaLayoutGuide</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Use safeAreaLayoutGuide on iOS 11+, otherwise default to dummy layout guide</span></span><br><span class="line">  <span class="keyword">var</span> compatibleSafeAreaLayoutGuide: <span class="type">UILayoutGuide</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> #available(iOS <span class="number">11</span>, *) &#123;</span><br><span class="line">      <span class="keyword">return</span> safeAreaLayoutGuide</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> layoutGuide = <span class="keyword">self</span>.associatedLayoutGuide &#123;</span><br><span class="line">        <span class="keyword">return</span> layoutGuide</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> layoutGuide = <span class="type">UILayoutGuide</span>()</span><br><span class="line">        <span class="type">Constraint</span>.on(</span><br><span class="line">          layoutGuide.topAnchor.constraint(equalTo: topAnchor),</span><br><span class="line">          layoutGuide.bottomAnchor.constraint(equalTo: bottomAnchor),</span><br><span class="line">          layoutGuide.leftAnchor.constraint(equalTo: leftAnchor),</span><br><span class="line">          layoutGuide.rightAnchor.constraint(equalTo: rightAnchor)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.associatedLayoutGuide = layoutGuide</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> layoutGuide</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">AssociatedKeys</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> layoutGuide = <span class="string">"layoutGuide"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fileprivate</span> <span class="keyword">var</span> associatedLayoutGuide: <span class="type">UILayoutGuide?</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.layoutGuide) <span class="keyword">as</span>? <span class="type">UILayoutGuide</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> newValue = newValue &#123;</span><br><span class="line">        objc_setAssociatedObject(</span><br><span class="line">          <span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.layoutGuide,</span><br><span class="line">          newValue <span class="keyword">as</span> <span class="type">UILayoutGuide?</span>,</span><br><span class="line">         .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This way we can simply do</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headerView.topAnchor.constraint(equalTo: view.compatibleSafeAreaLayoutGuide.topAnchor, constant: <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://useyourloaf.com/blog/safe-area-layout-guide/" target="_blank" rel="noopener">https://useyourloaf.com/blog/safe-area-layout-guide/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Using Coordinator</title>
      <link href="/blog/Learning-from-Open-Source-Using-Coordinator/"/>
      <url>/blog/Learning-from-Open-Source-Using-Coordinator/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/97" target="_blank" rel="noopener">#97</a></strong></p><p>The <a href="http://khanlou.com/2015/10/coordinators-redux/" target="_blank" rel="noopener">Coordinator</a> pattern can be useful to manage dependencies and handle navigation for your view controllers. It can be seen from <a href="https://github.com/backchannel/BackchannelSDK-iOS" target="_blank" rel="noopener">BackchannelSDK-iOS</a>, take a look at <a href="https://github.com/backchannel/BackchannelSDK-iOS/blob/611de61611a9609d708920e2b602b2edbcc26b20/Source/Authentication/BAKCreateProfileCoordinator.m" target="_blank" rel="noopener">BAKCreateProfileCoordinator</a> for example</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BAKCreateProfileCoordinator</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithUser:(BAKUser *)user navigationController:(<span class="built_in">UINavigationController</span> *)navigationController configuration:(BAKRemoteConfiguration *)configuration &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    _navigationController = navigationController;</span><br><span class="line">    _user = user;</span><br><span class="line">    _profileViewController = [[BAKProfileFormViewController alloc] init];</span><br><span class="line">    [<span class="keyword">self</span> configureProfileForm];</span><br><span class="line">    _configuration = configuration;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)start &#123;</span><br><span class="line">    [<span class="keyword">self</span>.profileViewController updateDisplayName:<span class="keyword">self</span>.user.displayName];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:<span class="keyword">self</span>.profileViewController animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)profileViewControllerDidTapAvatarButton:(BAKProfileFormViewController *)profileViewController &#123;</span><br><span class="line">    BAKChooseImageCoordinator *imageChooser = [[BAKChooseImageCoordinator alloc] initWithViewController:<span class="keyword">self</span>.navigationController];</span><br><span class="line">    imageChooser.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.childCoordinators addObject:imageChooser];</span><br><span class="line">    [imageChooser start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)imageChooserDidCancel:(BAKChooseImageCoordinator *)imageChooser &#123;</span><br><span class="line">    [<span class="keyword">self</span>.childCoordinators removeObject:imageChooser];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Look how it holds <code>navigationController</code> as root element to do navigation, and how it manages <code>childCoordinators</code></p><p><img src="https://user-images.githubusercontent.com/2284279/32437135-a56f3294-c2e6-11e7-8a65-801d542fed4e.png" alt="coordinator"></p><h3 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h3><ul><li><a href="https://www.youtube.com/watch?v=a1g3k3NObkE" target="_blank" rel="noopener">Coordinators – Soroush Khanlou</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Managing dependencies</title>
      <link href="/blog/Learning-from-Open-Source-Managing-dependencies/"/>
      <url>/blog/Learning-from-Open-Source-Managing-dependencies/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/96" target="_blank" rel="noopener">#96</a></strong></p><p>Another cool thing about <a href="https://github.com/kickstarter/ios-oss" target="_blank" rel="noopener">ios-oss</a> is how it manages dependencies. Usually you have a lot of dependencies, and it’s good to keep them in one place, and inject it to the objects that need.</p><p>The <a href="https://github.com/kickstarter/ios-oss/blob/master/Library/Environment.swift" target="_blank" rel="noopener">Environment</a> is simply a struct that holds all dependencies throughout the app</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> A collection of **all** global variables and singletons that the app wants access to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Environment</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// A type that exposes endpoints for fetching Kickstarter data.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> apiService: <span class="type">ServiceType</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// The amount of time to delay API requests by. Used primarily for testing. Default value is `0.0`.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> apiDelayInterval: <span class="type">DispatchTimeInterval</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A type that exposes how to extract a still image from an AVAsset.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> assetImageGeneratorType: <span class="type">AssetImageGeneratorType</span>.<span class="type">Type</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// A type that stores a cached dictionary.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> cache: <span class="type">KSCache</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then there’s global object called <a href="https://github.com/kickstarter/ios-oss/blob/master/Library/AppEnvironment.swift" target="_blank" rel="noopener">AppEnvironment</a> that manages all these <code>Environment</code> in a stack</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">AppEnvironment</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   A global stack of environments.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">fileprivate</span> <span class="keyword">static</span> <span class="keyword">var</span> stack: [<span class="type">Environment</span>] = [<span class="type">Environment</span>()]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   Invoke when an access token has been acquired and you want to log the user in. Replaces the current</span></span><br><span class="line"><span class="comment">   environment with a new one that has the authenticated api service and current user model.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   - parameter envelope: An access token envelope with the api access token and user.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(<span class="number">_</span> envelope: AccessTokenEnvelope)</span></span> &#123;</span><br><span class="line">    replaceCurrentEnvironment(</span><br><span class="line">      apiService: current.apiService.login(<span class="type">OauthToken</span>(token: envelope.accessToken)),</span><br><span class="line">      currentUser: envelope.user,</span><br><span class="line">      koala: current.koala |&gt; <span class="type">Koala</span>.lens.loggedInUser .~ envelope.user</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   Invoke when we have acquired a fresh current user and you want to replace the current environment's</span></span><br><span class="line"><span class="comment">   current user with the fresh one.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   - parameter user: A user model.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">updateCurrentUser</span><span class="params">(<span class="number">_</span> user: User)</span></span> &#123;</span><br><span class="line">    replaceCurrentEnvironment(</span><br><span class="line">      currentUser: user,</span><br><span class="line">      koala: current.koala |&gt; <span class="type">Koala</span>.lens.loggedInUser .~ user</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">updateConfig</span><span class="params">(<span class="number">_</span> config: Config)</span></span> &#123;</span><br><span class="line">    replaceCurrentEnvironment(</span><br><span class="line">      config: config,</span><br><span class="line">      koala: <span class="type">AppEnvironment</span>.current.koala |&gt; <span class="type">Koala</span>.lens.config .~ config</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Invoke when you want to end the user's session.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">logout</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> storage = <span class="type">AppEnvironment</span>.current.cookieStorage</span><br><span class="line">    storage.cookies?.forEach(storage.deleteCookie)</span><br><span class="line"></span><br><span class="line">    replaceCurrentEnvironment(</span><br><span class="line">      apiService: <span class="type">AppEnvironment</span>.current.apiService.logout(),</span><br><span class="line">      cache: type(of: <span class="type">AppEnvironment</span>.current.cache).<span class="keyword">init</span>(),</span><br><span class="line">      currentUser: <span class="literal">nil</span>,</span><br><span class="line">      koala: current.koala |&gt; <span class="type">Koala</span>.lens.loggedInUser .~ <span class="literal">nil</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The most recent environment on the stack.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> current: <span class="type">Environment!</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stack.last</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then whenever there’s event that triggers dependencies update, we call it like </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.viewModel.outputs.logIntoEnvironment</span><br><span class="line">  .observeValues &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] accessTokenEnv <span class="keyword">in</span></span><br><span class="line">    <span class="type">AppEnvironment</span>.login(accessTokenEnv)</span><br><span class="line">    <span class="keyword">self</span>?.viewModel.inputs.environmentLoggedIn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The cool thing about <code>Environment</code> is that we can store and retrieve them</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns the last saved environment from user defaults.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">fromStorage</span><span class="params">(ubiquitousStore: KeyValueStoreType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 userDefaults: KeyValueStoreType)</span></span> -&gt; <span class="type">Environment</span> &#123;</span><br><span class="line">  <span class="comment">// retrieval</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And we can mock in tests</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AppEnvironment</span>.replaceCurrentEnvironment(</span><br><span class="line">  apiService: <span class="type">MockService</span>(</span><br><span class="line">    fetchDiscoveryResponse: .template |&gt; <span class="type">DiscoveryEnvelope</span>.lens.projects .~ [</span><br><span class="line">      .todayByScottThrift,</span><br><span class="line">      .cosmicSurgery,</span><br><span class="line">      .anomalisa</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to debug iOS apps</title>
      <link href="/blog/How-to-debug-iOS-apps/"/>
      <url>/blog/How-to-debug-iOS-apps/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/95" target="_blank" rel="noopener">#95</a></strong></p><p>Hi, here are some projects to help us debugging apps easier</p><ul><li><a href="https://github.com/krzysztofzablocki/LifetimeTracker" target="_blank" rel="noopener">https://github.com/krzysztofzablocki/LifetimeTracker</a></li><li><a href="https://github.com/fastred/DeallocationChecker" target="_blank" rel="noopener">https://github.com/fastred/DeallocationChecker</a></li><li><a href="https://github.com/Flipboard/FLEX" target="_blank" rel="noopener">https://github.com/Flipboard/FLEX</a></li><li><a href="https://github.com/facebook/flipper" target="_blank" rel="noopener">https://github.com/facebook/flipper</a></li><li><a href="https://github.com/wojteklu/Watchdog" target="_blank" rel="noopener">https://github.com/wojteklu/Watchdog</a></li><li><a href="https://github.com/yagiz/Bagel" target="_blank" rel="noopener">https://github.com/yagiz/Bagel</a></li><li><a href="https://github.com/isavynskyi/LayoutInspector" target="_blank" rel="noopener">https://github.com/isavynskyi/LayoutInspector</a></li><li><a href="https://github.com/kasketis/netfox" target="_blank" rel="noopener">https://github.com/kasketis/netfox</a></li><li><a href="https://github.com/meitu/MTHawkeye" target="_blank" rel="noopener">https://github.com/meitu/MTHawkeye</a></li><li><a href="https://github.com/indragiek/InAppViewDebugger" target="_blank" rel="noopener">https://github.com/indragiek/InAppViewDebugger</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Using Playground</title>
      <link href="/blog/Learning-from-Open-Source-Using-Playground/"/>
      <url>/blog/Learning-from-Open-Source-Using-Playground/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/94" target="_blank" rel="noopener">#94</a></strong></p><p>One thing I like about <a href="https://github.com/kickstarter/ios-oss" target="_blank" rel="noopener">kickstarter-ios</a> is how they use <code>Playground</code> to quickly protoyping views.</p><blockquote><p>We use Swift Playgrounds for iterative development and styling. Most major screens in the app get a corresponding playground where we can see a wide variety of devices, languages and data in real time. </p></blockquote><p>This way we don’t need <a href="http://johnholdsworth.com/injection.html" target="_blank" rel="noopener">Injection</a> or using React Native anymore. Take a look at all the pages <a href="https://github.com/kickstarter/ios-oss/tree/master/Kickstarter-iOS.playground/Pages" target="_blank" rel="noopener">https://github.com/kickstarter/ios-oss/tree/master/Kickstarter-iOS.playground/Pages</a></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://talk.objc.io/episodes/S01E51-playground-driven-development-at-kickstarter" target="_blank" rel="noopener">Playground-Driven Development at Kickstarter</a></li><li><a href="https://www.youtube.com/watch?v=DrdxSNG-_DE" target="_blank" rel="noopener">FrenchKit 2017 - Playground Driven Development</a></li><li><a href="https://www.youtube.com/watch?v=A0VaIKK2ijM" target="_blank" rel="noopener">Finding Happiness in Functional Programming</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Indenting Swift code</title>
      <link href="/blog/Indenting-Swift-code/"/>
      <url>/blog/Indenting-Swift-code/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/93" target="_blank" rel="noopener">#93</a></strong></p><p>Hi, here is how I indent my code. Let me know what you think 😉 </p><h4 id="Using-2-spaces-indentation"><a href="#Using-2-spaces-indentation" class="headerlink" title="Using 2 spaces indentation"></a>Using 2 spaces indentation</h4><p>When possible, configure your editor to use <code>2 spaces</code> for <code>tab size</code>. You will love it ❤️ </p><p><img src="https://user-images.githubusercontent.com/2284279/31818654-56a24868-b599-11e7-858e-86137f1cbb16.png" alt="spaces"></p><h4 id="Move-first-parameter-to-new-line"><a href="#Move-first-parameter-to-new-line" class="headerlink" title="Move first parameter to new line"></a>Move first parameter to new line</h4><p>If there are many parameters, move the first parameter to a new line, and align the other parameters. Remember that the last parenthesis <code>)</code> should align to the function call</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> event = <span class="type">NSAppleEventDescriptor</span>(</span><br><span class="line">  eventClass: <span class="type">UInt32</span>(kASAppleScriptSuite),</span><br><span class="line">  eventID: <span class="type">UInt32</span>(kASSubroutineEvent),</span><br><span class="line">  targetDescriptor: target,</span><br><span class="line">  returnID: <span class="type">Int16</span>(kAutoGenerateReturnID),</span><br><span class="line">  transactionID: <span class="type">Int32</span>(kAnyTransactionID)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>You can do the same for function declaration</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="number">_</span> collectionView: UICollectionView,</span></span></span><br><span class="line"><span class="function"><span class="params">  viewForSupplementaryElementOfKind kind: String,</span></span></span><br><span class="line"><span class="function"><span class="params">  at indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionReusableView</span> &#123;</span><br><span class="line">  <span class="comment">// your code goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Shouldn’t-use-trailing-closure-if-there-are-more-than-2-closures"><a href="#Shouldn’t-use-trailing-closure-if-there-are-more-than-2-closures" class="headerlink" title="Shouldn’t use trailing closure if there are more than 2 closures"></a>Shouldn’t use trailing closure if there are more than 2 closures</h4><p>Here is how to use <code>UIView.animate</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(</span><br><span class="line">  withDuration: <span class="number">5</span>,</span><br><span class="line">  delay: <span class="number">5</span>,</span><br><span class="line">  usingSpringWithDamping: <span class="number">1</span>,</span><br><span class="line">  initialSpringVelocity: <span class="number">1</span>,</span><br><span class="line">  options: .curveEaseIn,</span><br><span class="line">  animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.tableView.alpha = <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  completion: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>.view.isHidden = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Here is how to use <code>RxSwift subscribe</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">friendsObservable.subscribe(</span><br><span class="line">  onNext: &#123; friends <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">  &#125;, </span><br><span class="line">  onError: &#123; error <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">  &#125;, </span><br><span class="line">  onCompleted: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;, </span><br><span class="line">  onDisposed: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="Shouldn’t-use-trailing-closure-when-chaining-methods"><a href="#Shouldn’t-use-trailing-closure-when-chaining-methods" class="headerlink" title="Shouldn’t use trailing closure when chaining methods"></a>Shouldn’t use trailing closure when chaining methods</h4><p>Also, the next method call should start on same line</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> results = items.<span class="built_in">map</span>(&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">String</span>($<span class="number">0</span>)</span><br><span class="line">&#125;).flatMap(&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Int</span>($<span class="number">0</span>)</span><br><span class="line">&#125;).<span class="built_in">filter</span>(&#123;</span><br><span class="line">  <span class="keyword">return</span> $<span class="number">0</span> &gt; <span class="number">2</span></span><br><span class="line">&#125;).sorted()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Testing keychain in iOS</title>
      <link href="/blog/Testing-keychain-in-iOS/"/>
      <url>/blog/Testing-keychain-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/92" target="_blank" rel="noopener">#92</a></strong></p><p>Today I was upgrading <a href="https://github.com/hyperoslo/Keychains" target="_blank" rel="noopener">Keychain</a> to swift 4, and take this opportunity to fix the test. The tests pass on macOS, but on iOS, I get <code>-25300</code> error for</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> status = <span class="type">SecItemCopyMatching</span>(query <span class="keyword">as</span> <span class="type">CFDictionary</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>It is because there is no Keychain entitlement for test target. But this is a framework, how can I add entitlement 🤔 The solution is to use a <a href="https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/05-running_tests.html" target="_blank" rel="noopener">Test Host</a> to host the <code>XCTest</code> tests. See my <a href="https://github.com/hyperoslo/Keychains/pull/14" target="_blank" rel="noopener">pull request</a></p><p><strong>Create test host target</strong></p><p><img src="https://user-images.githubusercontent.com/2284279/31816541-059750f6-b591-11e7-9348-4119d07e57ca.png" alt="target"></p><p>First create an iOS app to act as a test host, you can name it <code>TestHost_iOS</code></p><p><strong>Enable Keychain capability</strong></p><p>Then enable Keychain capability to let Xcode automatically create an entitlement file for you. Note that you can just enter the <code>Keychain group</code>. You don’t need go to <code>Apple Developer dashboard</code> to configure anything </p><p><img src="https://user-images.githubusercontent.com/2284279/31816756-ce3155c0-b591-11e7-916e-8ebc06e9a847.png" alt="keychain"></p><p><strong>Specify Test Host</strong></p><p>Then in you test target, specify <code>Test Host</code> by using <code>$(BUILT_PRODUCTS_DIR)/TestHost_iOS.app/TestHost_iOS</code></p><p><img src="https://user-images.githubusercontent.com/2284279/31816646-68d8c7c6-b591-11e7-8ae8-e04d52e41e09.png" alt="test host"></p><p>Now run your test again, it should pass 🎉 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning from Open Source  Making macOS app in code</title>
      <link href="/blog/Learning-from-Open-Source-Making-macOS-app-in-code/"/>
      <url>/blog/Learning-from-Open-Source-Making-macOS-app-in-code/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/91" target="_blank" rel="noopener">#91</a></strong></p><p>I’m familiar with the whole app structure that Xcode gives me when I’m creating new macOS project, together with Storyboard. The other day I was reading <a href="https://github.com/sindresorhus/touch-bar-simulator" target="_blank" rel="noopener">touch-bar-simulator</a> and see how it declares app using only code. See this <a href="https://github.com/sindresorhus/touch-bar-simulator/blob/master/Touch%20Bar%20Simulator/main.swift" target="_blank" rel="noopener">main.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="type">NSApplication</span>.shared</span><br><span class="line"><span class="keyword">let</span> delegate = <span class="type">AppDelegate</span>()</span><br><span class="line">app.delegate = delegate</span><br><span class="line">app.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">NSApplicationDelegate</span>, <span class="title">NSWindowDelegate</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> controller = <span class="type">IDETouchBarSimulatorHostWindowController</span>.simulatorHostWindowController()!</span><br><span class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> window: <span class="type">NSWindow</span> = <span class="keyword">self</span>.controller.window!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Designing for iPhone X</title>
      <link href="/blog/Designing-for-iPhone-X/"/>
      <url>/blog/Designing-for-iPhone-X/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/90" target="_blank" rel="noopener">#90</a></strong></p><ul><li><a href="http://blog.maxrudberg.com/post/166045445103/ui-design-for-iphone-x-top-elements-and-the-notch" target="_blank" rel="noopener">http://blog.maxrudberg.com/post/166045445103/ui-design-for-iphone-x-top-elements-and-the-notch</a></li><li><a href="https://designcode.io/ios11-iphone-x" target="_blank" rel="noopener">https://designcode.io/ios11-iphone-x</a></li><li><a href="https://medium.muz.li/ui-design-tips-for-iphone-x-2652b2b248ce" target="_blank" rel="noopener">https://medium.muz.li/ui-design-tips-for-iphone-x-2652b2b248ce</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>String manipulation in Apple Script</title>
      <link href="/blog/String-manipulation-in-Apple-Script/"/>
      <url>/blog/String-manipulation-in-Apple-Script/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/89" target="_blank" rel="noopener">#89</a></strong></p><p>Today I find that <code>AppleScript</code> allows us to import <code>Foundation</code>, with that we have lots of power, including <code>NSString</code>. See <a href="https://github.com/onmyway133/XcodeWay/blob/master/XcodeWayExtensions/Script/XcodeWayScript.scpt" target="_blank" rel="noopener">my script</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use scripting additions</span><br><span class="line">use framework &quot;Foundation&quot;</span><br><span class="line">property NSString : a reference to current application&apos;s NSString</span><br></pre></td></tr></table></figure><p>Here is how I can remove last path component from a string</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">on myRemoveLastPath(myPath)</span><br><span class="line">  set myString to NSString&apos;s stringWithString:myPath</span><br><span class="line">  set removedLastPathString to myString&apos;s stringByDeletingLastPathComponent</span><br><span class="line">  removedLastPathString as text</span><br><span class="line">end myRemoveLastPath</span><br></pre></td></tr></table></figure><p>You need to cast to <code>NSString</code> with <code>NSString&#39;s stringWithString:</code> and cast back to Apple Script string with <code>as text</code>. The <code>&#39;s</code> is how you can invoke functions.</p><p>One more thing is that we can support parameters to function, like this <a href="http://applehelpwriter.com/2016/09/06/applescript-remove-characters-from-a-string/" target="_blank" rel="noopener">script</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">on remove:remove_string fromString:source_string</span><br><span class="line">  set s_String to NSString&apos;s stringWithString:source_string</span><br><span class="line">  set r_String to NSString&apos;s stringWithString:remove_string</span><br><span class="line">  return s_String&apos;s stringByReplacingOccurrencesOfString:r_String withString:&quot;&quot;</span><br><span class="line">end remove:fromString:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to call function inside Apple Script</title>
      <link href="/blog/How-to-call-function-inside-Apple-Script/"/>
      <url>/blog/How-to-call-function-inside-Apple-Script/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/88" target="_blank" rel="noopener">#88</a></strong></p><p>I ‘ve been using <a href="https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html" target="_blank" rel="noopener">Apple Script</a> to for my Finder extension <a href="https://github.com/onmyway133/FinderGo" target="_blank" rel="noopener">FinderGo</a>. Because of <a href="https://www.objc.io/issues/14-mac/sandbox-scripting/" target="_blank" rel="noopener">sandboxing</a>, all scripts must lie inside <code>Application Scripts</code> folder.</p><p>Today, I was rewriting my Xcode extension <a href="https://github.com/onmyway133/XcodeWay" target="_blank" rel="noopener">XcodeWay</a>. Before Xcode 8, we could use Xcode plugin and all kinds of magic to make our dreams come true <a href="https://github.com/onmyway133/XcodeWay/blob/1.0/XcodeWay/Helper/FTGEnvironmentManager.m#L50" target="_blank" rel="noopener">https://github.com/onmyway133/XcodeWay/blob/1.0/XcodeWay/Helper/FTGEnvironmentManager.m#L50</a>. But then it does not work since Xcode Source Editor Extension was introduced. So I rewrote XcodeWay as an extension <a href="https://github.com/onmyway133/XcodeWay/releases/tag/1.1.0" target="_blank" rel="noopener">https://github.com/onmyway133/XcodeWay/releases/tag/1.1.0</a></p><p>Extension must run inside sandbox. If you switch <code>App Sandbox</code> in your <code>XcodeWayExtensions.entitlements</code> to <code>NO</code>, it won’t load. So sandbox restricts me a lot in what kinds of things I want to do. And under Xcode 9, I can’t use <code>NSWorkspace</code> to open <code>Finder</code>.</p><p>So I think I could use <code>Apple Script</code> too, and it worked like a charm. The only restriction is code reuse, since I only know how to run an entire script. One way is to import other Apple scripts <a href="https://stackoverflow.com/questions/2606136/import-applescript-methods-in-another-applescript" target="_blank" rel="noopener">https://stackoverflow.com/questions/2606136/import-applescript-methods-in-another-applescript</a> but I think I will write all the functions inside 1 script, and find out how to call specific function.</p><p>By function, I also mean handler, procedure. I come across this snippet <a href="https://github.com/chockenberry/Scriptinator/blob/master/Scriptinator/AppDelegate.m" target="_blank" rel="noopener">Scriptinator</a> that pretty much inspires me, thanks to open source.</p><p>So here is my <a href="https://github.com/onmyway133/XcodeWay/blob/master/XcodeWayExtensions/Script/XcodeWayScript.scpt" target="_blank" rel="noopener">script</a> that contains lots of functions . And here is <a href="https://github.com/onmyway133/XcodeWay/blob/master/XcodeWayExtensions/Helper/ScriptRunner.swift#L28" target="_blank" rel="noopener">ScriptRunner</a> that explains how to build <code>NSAppleEventDescriptor</code>. Note that you need to <code>import Carbon</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Carbon</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eventDescriptior</span><span class="params">(functionName: String)</span></span> -&gt; <span class="type">NSAppleEventDescriptor</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> psn = <span class="type">ProcessSerialNumber</span>(highLongOfPSN: <span class="number">0</span>, lowLongOfPSN: <span class="type">UInt32</span>(kCurrentProcess))</span><br><span class="line">  <span class="keyword">let</span> target = <span class="type">NSAppleEventDescriptor</span>(</span><br><span class="line">    descriptorType: typeProcessSerialNumber,</span><br><span class="line">    bytes: &amp;psn,</span><br><span class="line">    length: <span class="type">MemoryLayout</span>&lt;<span class="type">ProcessSerialNumber</span>&gt;.size</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> event = <span class="type">NSAppleEventDescriptor</span>(</span><br><span class="line">    eventClass: <span class="type">UInt32</span>(kASAppleScriptSuite),</span><br><span class="line">    eventID: <span class="type">UInt32</span>(kASSubroutineEvent),</span><br><span class="line">    targetDescriptor: target,</span><br><span class="line">    returnID: <span class="type">Int16</span>(kAutoGenerateReturnID),</span><br><span class="line">    transactionID: <span class="type">Int32</span>(kAnyTransactionID)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> function = <span class="type">NSAppleEventDescriptor</span>(string: functionName)</span><br><span class="line">  event.setParam(function, forKeyword: <span class="type">AEKeyword</span>(keyASSubroutineName))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> event</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use Input and output container in Swift</title>
      <link href="/blog/How-to-use-Input-and-output-container-in-Swift/"/>
      <url>/blog/How-to-use-Input-and-output-container-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/87" target="_blank" rel="noopener">#87</a></strong></p><p>This is a very nifty trick from <a href="https://github.com/kickstarter/ios-oss" target="_blank" rel="noopener">ios-oss</a> which was built around MVVM pattern. It uses protocol to define input and output, and a container protocol to contain them. Take <a href="https://github.com/kickstarter/ios-oss/blob/1f5643f6a769995ccd1bb3826699745e64597ab7/Library/ViewModels/LoginViewModel.swift" target="_blank" rel="noopener">https://github.com/kickstarter/ios-oss/blob/1f5643f6a769995ccd1bb3826699745e64597ab7/Library/ViewModels/LoginViewModel.swift</a> for example</p><pre><code class="swift"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LoginViewModelInputs</span> </span>{}<span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LoginViewModelOutputs</span> </span>{}<span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LoginViewModelType</span> </span>{  <span class="keyword">var</span> inputs: <span class="type">LoginViewModelInputs</span> { <span class="keyword">get</span> }  <span class="keyword">var</span> outputs: <span class="type">LoginViewModelOutputs</span> { <span class="keyword">get</span> }}<span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginViewModel</span>: <span class="title">LoginViewModelType</span>, <span class="title">LoginViewModelInputs</span>, <span class="title">LoginViewModelOutputs</span> </span>{  <span class="keyword">public</span> <span class="keyword">var</span> inputs: <span class="type">LoginViewModelInputs</span> { <span class="keyword">return</span> <span class="keyword">self</span> }  <span class="keyword">public</span> <span class="keyword">var</span> outputs: <span class="type">LoginViewModelOutputs</span> { <span class="keyword">return</span> <span class="keyword">self</span> }}</code></pre><p>Look how <code>LoginViewModel</code> conforms to 3 protocols. And when you access its <code>input</code> or <code>output</code> properties, you are constrained to only <code>LoginViewModelInputs</code> and <code>LoginViewModelOutputs</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Fixing login hanging in macOS High Sierra</title>
      <link href="/blog/Fixing-login-hanging-in-macOS-High-Sierra/"/>
      <url>/blog/Fixing-login-hanging-in-macOS-High-Sierra/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/86" target="_blank" rel="noopener">#86</a></strong></p><p>Today I met a strange problem. After I enter my password, the progress bar runs to the end, and it is stuck there forever. No matter how many times I try to restart.</p><p>I finally need to go to <a href="https://support.apple.com/el-gr/HT201314" target="_blank" rel="noopener">Recovery mode</a> by pressing <code>Cmd+R</code> at start up. I then select <code>Get Help Online</code> to open Safari. Strangely enough I wasn’t connected to Internet</p><p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/macos/highsierra/macos-high-sierra-recovery-mode-reinstall.jpg" alt></p><p>After select the wifi icon on the status bar to connect internet, I then restart and can login again. It seems that macOS is checking for something before allowing user to login</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>What about performance?</title>
      <link href="/blog/What-about-performance/"/>
      <url>/blog/What-about-performance/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/85" target="_blank" rel="noopener">#85</a></strong></p><p>That’s the question I hear often when people are introduced to a new framework. It’s a valid concern. But it seems to me that they ask this just for fun. To my surprise, most people just don’t care, and the frameworks with the most stars often perform the worst.</p><p>Now take a look back at performance. Here are some benchmarks </p><p>From <a href="https://github.com/ibireme/YYModel" target="_blank" rel="noopener">https://github.com/ibireme/YYModel</a>, compare different JSON mappers for ObjC</p><p><img src="https://camo.githubusercontent.com/73e6774154cfe8652b61f62e8ea32cac48969033/68747470733a2f2f7261772e6769746875622e636f6d2f69626972656d652f59594d6f64656c2f6d61737465722f42656e63686d61726b2f526573756c742e706e67" alt></p><p>From <a href="https://github.com/bwhiteley/JSONShootout" target="_blank" rel="noopener">https://github.com/bwhiteley/JSONShootout</a>, compare different JSON mappers for Swift</p><p><img src="https://raw.githubusercontent.com/bwhiteley/JSONShootout/master/images/performance.png" alt></p><p>From <a href="https://github.com/onmyway133/DeepDiff#among-different-frameworks" target="_blank" rel="noopener">https://github.com/onmyway133/DeepDiff#among-different-frameworks</a>, compare different diffing frameworks</p><p><img src="https://github.com/onmyway133/DeepDiff/raw/master/Screenshots/benchmark3d.png" alt></p><p><strong><em>I use it because it has many stars</em></strong></p><p>Take a look at the stars, the ones with the most stars often perform the slowest 🙀 </p><p> I don’t say that more stars mean better. I don’t believe in stars. Stars may just be a result of your marketing effort. The same framework, without any code change, but after featured in some newsletters, gets additional thousand stars. The code remains the same, so what do stars really tell here?</p><p>I’m not talking about closed source. I like open source. When deciding an open source framework, there are many factors. It can be issues and pull requests that indicate how the community care about it. It can be good code and good tests, that make it easy to maintain. It can be good documentation, that says how much dedication the developers have put in. </p><p>And here’s the fact, when you see a project with many stars, you tend to star it too 😉 for the sake of bookmarking. Stars mean little, but they give us some ideas on how popular a project is.</p><p><strong><em>I just need to get work done</em></strong></p><p>OK.</p><p><strong><em>What about performance?</em></strong></p><p>Honestly, do you really care?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dear SDK developers</title>
      <link href="/blog/Dear-SDK-developers/"/>
      <url>/blog/Dear-SDK-developers/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/84" target="_blank" rel="noopener">#84</a></strong></p><p>Dear SDK developers,</p><ul><li><strong><em>Please don’t do swizzling</em></strong>. Give us instructions on where to call your APIs instead of doing unnecessary swizzling. You’re making it for developers to use, and they know how to write code. Most of the time, you don’t know how to do swizzling right ⚠️ </li><li><strong><em>Please don’t use configuration file</em></strong>. If possible, please consider configuration via pure code, instead of the plist file that is more exposable in the app bundle.</li><li><strong><em>Please don’t make assumption about the app</em></strong>. Your assumptions about the app the SDK is going to be integrated are not always correct. Every app has its own use case and view hierarchy.</li><li><strong><em>Please provide proper releases</em></strong>. Tag and make releases for new changes in the SDK. If there are major changes, there should be migration guide and affect of that to older apps. Also, please write proper change logs, either in release notes or change log file. </li><li><strong><em>Please don’t leave us with a dump header file</em></strong>. Please add documentations to all the functions.</li><li><strong><em>Please improve the README</em></strong>. To avoid all the guessing, please improve the README with detail instructions.</li><li><strong><em>Please include a sample demo project</em></strong>. When making a demo project, you possible have chances to deal with potential problems. And developers have a clue on which steps they might be missing.</li><li><strong><em>Please open source it</em></strong>. You’re selling your service, not the code. By open sourcing it, the code is clear to everybody, and they might help you with bug fixing and suggestion.</li></ul><p>To be honest, I was very scared when asked to integrate the SDK with poor documentation and closed source. It’s like playing the guessing and praying game.</p><p>If the service is not important to you, and you’re doing it for fun, then you can ignore these requests. But if you’re serious about it, then please consider doing. We know you can do better 💪  </p><p>Thanks ❤️ </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to migrate Codable object in Swift</title>
      <link href="/blog/How-to-migrate-Codable-object-in-Swift/"/>
      <url>/blog/How-to-migrate-Codable-object-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/83" target="_blank" rel="noopener">#83</a></strong></p><p>As of swift 4 migration, we updated <a href="https://github.com/hyperoslo/Cache" target="_blank" rel="noopener">Cache</a> to fully take advantage of Codable. It works for most cases, as we should usually declare our entity as typed safe object instead of array or json dictionary. And by conforming to <code>Codable</code>, it is easily encoded and decoded to and from json data. And persisting them to <code>Cache</code> is as easy as eating cookie.</p><p>The other day, I saw someone asking on how to migrate if the model changes <a href="https://github.com/hyperoslo/Cache/issues/153" target="_blank" rel="noopener">https://github.com/hyperoslo/Cache/issues/153</a>, and he likes the way <code>Realm</code> does <a href="https://realm.io/docs/swift/latest/#migrations" target="_blank" rel="noopener">https://realm.io/docs/swift/latest/#migrations</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Realm</span>.<span class="type">Configuration</span>.defaultConfiguration = <span class="type">Realm</span>.<span class="type">Configuration</span>(</span><br><span class="line">  schemaVersion: <span class="number">1</span>,</span><br><span class="line">  migrationBlock: &#123; migration, oldSchemaVersion <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">if</span> (oldSchemaVersion &lt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// The enumerateObjects(ofType:_:) method iterates</span></span><br><span class="line">          <span class="comment">// over every Person object stored in the Realm file</span></span><br><span class="line">          migration.enumerateObjects(ofType: <span class="type">Person</span>.className()) &#123; oldObject, newObject <span class="keyword">in</span></span><br><span class="line">              <span class="comment">// combine name fields into a single field</span></span><br><span class="line">              <span class="keyword">let</span> firstName = oldObject![<span class="string">"firstName"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">              <span class="keyword">let</span> lastName = oldObject![<span class="string">"lastName"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">              newObject![<span class="string">"fullName"</span>] = <span class="string">"\(firstName) \(lastName)"</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>I think we can rely on <code>Codable</code> to the migration. FYI, here is the PR <a href="https://github.com/hyperoslo/Cache/pull/154" target="_blank" rel="noopener">https://github.com/hyperoslo/Cache/pull/154</a></p><h3 id="Class-name-change"><a href="#Class-name-change" class="headerlink" title="Class name change"></a>Class name change</h3><p>I see <code>Codable</code> is based on json, and the importance of json is its data structure, not the class name. So if you change the class name, it still works. </p><p>First, we save model of type <code>Person</code>, later we load model of type <code>Alien</code>. It works because the structure stays the same</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> firstName: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> lastName: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Alien</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> firstName: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> lastName: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="type">Person</span>(firstName: <span class="string">"John"</span>, lastName: <span class="string">"Snow"</span>)</span><br><span class="line"><span class="keyword">try</span>! storage.setObject(person, forKey: <span class="string">"person"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// As long as it has same properties, it works too</span></span><br><span class="line"><span class="keyword">let</span> cachedObject = <span class="keyword">try</span>! storage.object(ofType: <span class="type">Alien</span>.<span class="keyword">self</span>, forKey: <span class="string">"person"</span>)</span><br><span class="line"><span class="type">XCTAssertEqual</span>(cachedObject.firstName, <span class="string">"John"</span>)</span><br></pre></td></tr></table></figure><h3 id="Property-change"><a href="#Property-change" class="headerlink" title="Property change"></a>Property change</h3><p>If the property changes, then you need to do a little work of migration. </p><p>First, we save model of type <code>Person1</code>, it has just <code>fullName</code>. Later we change the model to <code>Person2</code> with some new properties. To do the migration, we need to load model with old <code>Person1</code> first, then construct a new model <code>Person2</code> based on this <code>Person1</code>. Finally, save that to <code>Cache</code> with the same key.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person1</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> fullName: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person2</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> firstName: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> lastName: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Firstly, save object of type Person1</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="type">Person1</span>(fullName: <span class="string">"John Snow"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>! storage.setObject(person, forKey: <span class="string">"person"</span>)</span><br><span class="line"><span class="type">XCTAssertNil</span>(<span class="keyword">try</span>? storage.object(ofType: <span class="type">Person2</span>.<span class="keyword">self</span>, forKey: <span class="string">"person"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Later, convert to Person2, do the migration, then overwrite</span></span><br><span class="line"><span class="keyword">let</span> tempPerson = <span class="keyword">try</span>! storage.object(ofType: <span class="type">Person1</span>.<span class="keyword">self</span>, forKey: <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">let</span> parts = tempPerson.fullName.<span class="built_in">split</span>(separator: <span class="string">" "</span>)</span><br><span class="line"><span class="keyword">let</span> migratedPerson = <span class="type">Person2</span>(firstName: <span class="type">String</span>(parts[<span class="number">0</span>]), lastName: <span class="type">String</span>(parts[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">try</span>! storage.setObject(migratedPerson, forKey: <span class="string">"person"</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">XCTAssertEqual</span>(</span><br><span class="line">  <span class="keyword">try</span>! storage.object(ofType: <span class="type">Person2</span>.<span class="keyword">self</span>, forKey: <span class="string">"person"</span>).firstName,</span><br><span class="line">  <span class="string">"John"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to handle alert in UITests in iOS</title>
      <link href="/blog/How-to-handle-alert-in-UITests-in-iOS/"/>
      <url>/blog/How-to-handle-alert-in-UITests-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/82" target="_blank" rel="noopener">#82</a></strong></p><p>Usually in an app, you have the onboarding with steps that require push notification and location permission to be turned on. And you want to automate these steps via <code>UITests</code></p><p>Firstly, you need to add <code>interruption handler</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">addUIInterruptionMonitor(withDescription: <span class="string">"Alert"</span>) &#123;</span><br><span class="line">    element <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="comment">// Push Notification</span></span><br><span class="line">      <span class="keyword">let</span> button = element.buttons[<span class="string">"Allow"</span>]</span><br><span class="line">      <span class="keyword">let</span> title = element.staticTexts[<span class="string">"“MyAwesomeApp” Would Like to Send You Notifications"</span>]</span><br><span class="line">      <span class="keyword">if</span> title.exists &amp;&amp; button.exists &#123;</span><br><span class="line">        button.tap()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="comment">// Location</span></span><br><span class="line">      <span class="keyword">let</span> button = element.buttons[<span class="string">"Only While Using the App"</span>]</span><br><span class="line">      <span class="keyword">if</span> button.exists &#123;</span><br><span class="line">        button.tap()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then you need to call <code>tap</code> on <code>XCUIApplication</code> to make the app responsive</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">turnOnPushNotificationButton.tap()</span><br><span class="line">tap()</span><br></pre></td></tr></table></figure><p>Sometimes the alert handling is slow and you get <code>Did not receive view did disappear notification within 2.0s</code>. Well, the workaround is to wait for the element on next onboarding step to appear. Starting with Xcode 9, you can use <code>waitForExistence</code>.</p><p>This is how you can go to last step after user has enabled push notification</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> label = staticTexts[<span class="string">"Congratulation. You've granted us permission. Now enjoy the app."</span>]</span><br><span class="line"><span class="number">_</span> = label.waitForExistence(timeout: <span class="number">5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to integrate library via custom podspec</title>
      <link href="/blog/How-to-integrate-library-via-custom-podspec/"/>
      <url>/blog/How-to-integrate-library-via-custom-podspec/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/81" target="_blank" rel="noopener">#81</a></strong></p><p>Today I am about to integrate a library that does not support Cocoapods yet. It would be cumbersome to do it manually, because you have to configure <code>xcconfig</code>, <code>framework search path</code>, <code>assets</code>, and these steps are not well documented.</p><p>You can do this with custom podspec. In my case, I need to install <a href="https://bitbucket.org/fluxloop/pinch.installpackage/wiki/Home" target="_blank" rel="noopener">PinchSDK</a>. First, declare a <code>PinchSDK.podspec</code> in your project folder.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">  s.name             = <span class="string">"PinchSDK"</span></span><br><span class="line">  s.version          = <span class="string">"1.9.14"</span></span><br><span class="line">  s.summary          = <span class="string">"Pinch samler dessuten inn data hver gang en mobilapplikasjon oppdager en Pinch-beacon."</span></span><br><span class="line">  s.homepage         = <span class="string">"https://bitbucket.org/fluxloop/pinch.installpackage"</span></span><br><span class="line">  s.source           = &#123; <span class="symbol">:http</span> =&gt; <span class="string">"https://bitbucket.org/fluxloop/pinch.installpackage/raw/master/iOS/PinchSDK.zip"</span> &#125;</span><br><span class="line">  s.authors = <span class="string">'Fluxloop'</span></span><br><span class="line">  s.license = &#123; <span class="symbol">type:</span> <span class="string">'MIT'</span> &#125;</span><br><span class="line">  s.platform     = <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line">  s.requires_arc = <span class="literal">true</span></span><br><span class="line">  s.resource = <span class="string">'PinchSDK/Pinch.bundle'</span></span><br><span class="line">  s.vendored_frameworks = <span class="string">'PinchSDK/PinchLibrary.framework'</span></span><br><span class="line">  s.xcconfig = &#123; <span class="string">'OTHER_LDFLAGS'</span>: <span class="string">'-ObjC'</span> &#125;</span><br><span class="line">  s.public_header_files = <span class="string">'PinchSDK/PinchLibrary.framework/Headers/PinchLibrary.h'</span></span><br><span class="line">  s.source_files = <span class="string">'PinchSDK/PinchLibrary.framework/Headers/PinchLibrary.h'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Then, in your <code>Podfile</code>, you can point to this <code>podspec</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'PinchSDK'</span>, <span class="symbol">podspec:</span> <span class="string">'PinchSDK.podspec'</span></span><br></pre></td></tr></table></figure><p>Finally, since this PinchSDK uses <code>objc</code>, you need to declare it in your <code>bridging header</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;PinchLibrary/PinchLibrary.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>Now, just <code>pod install</code> and you’re done 🎉 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to handle Swift version with Cocoapods</title>
      <link href="/blog/How-to-handle-Swift-version-with-Cocoapods/"/>
      <url>/blog/How-to-handle-Swift-version-with-Cocoapods/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/80" target="_blank" rel="noopener">#80</a></strong></p><p>Today I was migrating <a href="http://github.com/hyperoslo/Imaginary" target="_blank" rel="noopener">Imaginary</a> to Swift 4. But I get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- ERROR | [OSX] xcodebuild: Returned an unsuccessful exit code.</span><br><span class="line">- ERROR | [OSX] xcodebuild:  Cache/Source/Mac/NSImage+Extensions.swift:32:64: error: &apos;png&apos; has been renamed to &apos;PNG&apos;</span><br><span class="line">- NOTE  | [OSX] xcodebuild:  AppKit.NSBitmapImageRep:57:27: note: &apos;png&apos; was introduced in Swift 4</span><br><span class="line">- ERROR | [OSX] xcodebuild:  Cache/Source/Mac/NSImage+Extensions.swift:32:71: error: &apos;jpeg&apos; has been renamed to &apos;JPEG&apos;</span><br><span class="line">- NOTE  | [OSX] xcodebuild:  AppKit.NSBitmapImageRep:52:27: note: &apos;jpeg&apos; was introduced in Swift 4</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/2284279/30799522-68280de0-a1dd-11e7-8494-e2938ba070e2.png" alt="swift4 png"></p><p>The project is configured to use <code>Swift 4</code> and its dependency Cache correctly uses <code>.png</code> and <code>.jpeg</code> <a href="https://github.com/hyperoslo/Cache/blob/master/Source/Mac/NSImage%2BExtensions.swift" target="_blank" rel="noopener">https://github.com/hyperoslo/Cache/blob/master/Source/Mac/NSImage%2BExtensions.swift</a></p><p>Why is that 🤔 </p><p>It turns out that the <code>.swift-version</code> is still showing <code>3.0</code>. Change it to <code>4.0</code> fixes the issue. The <code>.swift-version</code> is a hint to specify which Swift version should be used for a pod <a href="https://github.com/CocoaPods/CocoaPods/pull/5841" target="_blank" rel="noopener">https://github.com/CocoaPods/CocoaPods/pull/5841</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ikigai</title>
      <link href="/blog/Ikigai/"/>
      <url>/blog/Ikigai/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/79" target="_blank" rel="noopener">#79</a></strong></p><p>I really like the concept of <a href="https://en.wikipedia.org/wiki/Ikigai" target="_blank" rel="noopener">Ikigai</a></p><blockquote><p>Ikigai (生き甲斐, pronounced [ikiɡai]) is a Japanese concept that means “a reason for being.” It is similar to the French phrase Raison d’être. Everyone, according to Japanese culture, has an ikigai. Finding it requires a deep and often lengthy search of self. Such a search is important to the cultural belief that discovering one’s ikigai brings satisfaction and meaning to life.[1]</p></blockquote><blockquote><p>The term ikigai compounds two Japanese words: iki (wikt:生き) meaning “life; alive” and kai (甲斐) “(an) effect; (a) result; (a) fruit; (a) worth; (a) use; (a) benefit; (no, little) avail” (sequentially voiced as gai) “a reason for living [being alive]; a meaning for [to] life; what [something that] makes life worth living; a raison d’etre”.[3]</p></blockquote><p><img src="https://assets.weforum.org/editor/tyvToPYsyaZXtaFiUISw-P6abde6j84YSh5o3tXq81c.jpg" alt></p><h3 id="About-college-degree"><a href="#About-college-degree" class="headerlink" title="About college degree"></a>About college degree</h3><ul><li><a href="https://www.youtube.com/watch?v=e8QY0NDWqzk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=e8QY0NDWqzk</a></li><li>What you learn is more important</li><li>Surrounded with smart people</li><li>Safe way</li><li>College degree is nothing. But without that, you’re no thing. </li><li>Visa</li></ul><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://www.ted.com/talks/dan_buettner_how_to_live_to_be_100" target="_blank" rel="noopener">Dan Buettnet - How to live to be 100+</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Reading list</title>
      <link href="/blog/Reading-list/"/>
      <url>/blog/Reading-list/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/78" target="_blank" rel="noopener">#78</a></strong></p><p>These are my favorite books, screencasts, languages, tech and services that I have been exploring</p><h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><h4 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h4><ul><li><input checked disabled type="checkbox"> <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="noopener">Clean Code: A Handbook of Agile Software Craftsmanship</a></li><li><input checked disabled type="checkbox"> <a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X" target="_blank" rel="noopener">The Pragmatic Programmer: From Journeyman to Master</a></li><li><input checked disabled type="checkbox"> <a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670" target="_blank" rel="noopener">Code Complete: A Practical Handbook of Software Construction, Second Edition 2nd Edition</a></li><li><input checked disabled type="checkbox"> <a href="http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073" target="_blank" rel="noopener">The Clean Coder: A Code of Conduct for Professional Programmers</a></li><li><input checked disabled type="checkbox"> <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672" target="_blank" rel="noopener">Refactoring: Improving the Design of Existing Code</a></li><li><input checked disabled type="checkbox"> <a href="http://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258" target="_blank" rel="noopener">Agile Principles, Patterns, and Practices in C#</a></li><li><input checked disabled type="checkbox"> <a href="http://www.amazon.com/Refactoring-Patterns-Joshua-Kerievsky/dp/0321213351" target="_blank" rel="noopener">Refactoring to Patterns</a></li><li><input checked disabled type="checkbox"> <a href="https://www.amazon.com/Art-Unit-Testing-examples/dp/1617290890" target="_blank" rel="noopener">The Art of Unit Testing: with examples in C#</a></li><li><input checked disabled type="checkbox"> <a href="https://www.amazon.co.uk/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164" target="_blank" rel="noopener">Clean Architecture: A Craftsman’s Guide to Software Structure and Design </a></li><li><input checked disabled type="checkbox"> <a href="https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124" target="_blank" rel="noopener">Head First Design Patterns</a></li><li><input disabled type="checkbox"> <a href="https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164" target="_blank" rel="noopener">Clean Architecture: A Craftsman’s Guide to Software Structure and Design</a></li><li><a href="https://www.amazon.com/Living-Code-First-Developers-Innovators/dp/1942878826/" target="_blank" rel="noopener">Living by the Code</a></li></ul><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul><li><input checked disabled type="checkbox"> <a href="https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997" target="_blank" rel="noopener">Effective Java (3rd Edition) </a></li></ul><h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h4><ul><li><input checked disabled type="checkbox"> <a href="https://eloquentjavascript.net/" target="_blank" rel="noopener">Eloquent Javascript</a></li><li><input checked disabled type="checkbox"> <a href="https://github.com/MostlyAdequate/mostly-adequate-guide" target="_blank" rel="noopener">Mostly adequate guide to Functional Programming in Javascript</a></li></ul><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><ul><li><input checked disabled type="checkbox"> <a href="http://www.effectiveobjectivec.com/" target="_blank" rel="noopener">Effective Objective-C 2.0</a></li><li><input checked disabled type="checkbox"> <a href="https://www.objc.io/books/advanced-swift/" target="_blank" rel="noopener">Advanced Swift</a></li><li><input disabled type="checkbox"> <a href="https://store.raywenderlich.com/products/design-patterns-by-tutorials" target="_blank" rel="noopener">Design Patterns by Tutorials</a></li><li><input disabled type="checkbox"> <a href="https://www.objc.io/books/app-architecture/" target="_blank" rel="noopener">App Architecture</a></li></ul><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><ul><li><input checked disabled type="checkbox"> <a href="http://learnyouahaskell.com/" target="_blank" rel="noopener">Learn you a Haskell for great good</a></li></ul><h4 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h4><ul><li><input checked disabled type="checkbox"> <a href="https://www.amazon.com/Smart-Gets-Things-Done-Technical/dp/1590598385" target="_blank" rel="noopener">Smart and Gets Things Done: Joel Spolsky’s Concise Guide to Finding the Best Technical Talent</a></li><li><input disabled type="checkbox"> <a href="https://www.amazon.com/Power-Habit-What-Life-Business/dp/081298160X" target="_blank" rel="noopener">The Power of Habit: Why We Do What We Do in Life and Business</a></li><li><input checked disabled type="checkbox"> <a href="https://www.kokev.in/hired-fast" target="_blank" rel="noopener">Hired fast</a></li><li><input checked disabled type="checkbox"> <a href="https://www.amazon.com/Never-Eat-Alone-Expanded-Updated/dp/0385346654" target="_blank" rel="noopener">Never Eat Alone</a></li><li><input disabled type="checkbox"> <a href="http://www.abramsbooks.com/product/shape-of-ideas_9781419723179/" target="_blank" rel="noopener">The shape of ideas</a></li><li><input disabled type="checkbox"> <a href="https://www.amazon.ca/Good-They-Cant-Ignore-You/dp/1455509124" target="_blank" rel="noopener">So Good They Can’t Ignore You: Why Skills Trump Passion in the Quest for Work You Love</a></li></ul><h2 id="Screencasts"><a href="#Screencasts" class="headerlink" title="Screencasts"></a>Screencasts</h2><ul><li><input checked disabled type="checkbox"> <a href="https://www.pointfree.co/" target="_blank" rel="noopener">Pointfree</a></li><li><input checked disabled type="checkbox"> <a href="https://cleancoders.com/" target="_blank" rel="noopener">Clean coders</a></li><li><input disabled type="checkbox"> <a href="https://basecodefieldguide.com/" target="_blank" rel="noopener">BaseCode</a></li><li><input checked disabled type="checkbox"> <a href="https://www.destroyallsoftware.com/screencasts" target="_blank" rel="noopener">Destroy All Software</a></li><li><input disabled type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLkOyNuxGl9jx02vhWRCSPwbcSRvV9wWh1" target="_blank" rel="noopener">Can it be done in React Native?</a></li></ul><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><ul><li><input checked disabled type="checkbox"> <a href="https://www.pointfree.co/blog" target="_blank" rel="noopener">Pointfree</a></li><li><input checked disabled type="checkbox"> <a href="https://nshipster.com/" target="_blank" rel="noopener">NSHipster</a></li><li><input checked disabled type="checkbox"> <a href="https://www.objc.io/blog/" target="_blank" rel="noopener">Objc.io</a></li><li><input checked disabled type="checkbox"> <a href="https://www.swiftbysundell.com/" target="_blank" rel="noopener">Swift by Sundell</a></li><li><input checked disabled type="checkbox"> <a href="http://khanlou.com/" target="_blank" rel="noopener">Khanlou</a></li><li><input checked disabled type="checkbox"> <a href="https://oleb.net/" target="_blank" rel="noopener">Ole Begemann</a></li><li><input checked disabled type="checkbox"> <a href="https://matt.diephouse.com/" target="_blank" rel="noopener">Matt Diephouse</a></li><li><input checked disabled type="checkbox"> <a href="https://overreacted.io/" target="_blank" rel="noopener">Overreacted</a></li><li><input checked disabled type="checkbox"> <a href="https://www.kode24.no/" target="_blank" rel="noopener">kode24</a></li><li><input checked disabled type="checkbox"> <a href="https://sandofsky.com/" target="_blank" rel="noopener">Ben Sandofsky</a></li></ul><h2 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h2><ul><li><input checked disabled type="checkbox"> C</li><li><input checked disabled type="checkbox"> C++</li><li><input checked disabled type="checkbox"> Objective C</li><li><input checked disabled type="checkbox"> Swift</li><li><input checked disabled type="checkbox"> C#</li><li><input checked disabled type="checkbox"> Java</li><li><input checked disabled type="checkbox"> Kotlin</li><li><input checked disabled type="checkbox"> Javascript</li><li><input checked disabled type="checkbox"> Applescript</li><li><input checked disabled type="checkbox"> Dart</li><li><input checked disabled type="checkbox"> Go</li><li><input checked disabled type="checkbox"> Haskell</li></ul><h2 id="Tech-amp-Service"><a href="#Tech-amp-Service" class="headerlink" title="Tech &amp; Service"></a>Tech &amp; Service</h2><ul><li><input checked disabled type="checkbox"> iOS, macOS</li><li><input disabled type="checkbox"> tvOS, watchOS</li><li><input checked disabled type="checkbox"> react.js</li><li><input checked disabled type="checkbox"> electron.js</li><li><input checked disabled type="checkbox"> Android</li><li><input checked disabled type="checkbox"> Flutter</li><li><input checked disabled type="checkbox"> React Native</li><li><input checked disabled type="checkbox"> Chrome extension</li><li><input checked disabled type="checkbox"> Sketch plugin</li><li><input checked disabled type="checkbox"> Xcode extension</li><li><input checked disabled type="checkbox"> Slack bot</li><li><input checked disabled type="checkbox"> Windows Phone</li><li><input checked disabled type="checkbox"> Windows Mobile 6</li><li><input checked disabled type="checkbox"> Symbian</li><li><input checked disabled type="checkbox"> J2ME</li><li><input checked disabled type="checkbox"> Windows Metro</li><li><input checked disabled type="checkbox"> ASP.NET</li><li><input checked disabled type="checkbox"> XNA</li><li><input checked disabled type="checkbox"> Unity</li><li><input checked disabled type="checkbox"> node.js</li><li><input disabled type="checkbox"> Docker</li><li><input disabled type="checkbox"> Kubernetes</li><li><input disabled type="checkbox"> Heroku</li><li><input disabled type="checkbox"> Google Cloud</li><li><input checked disabled type="checkbox"> Firebase</li><li><input checked disabled type="checkbox"> TravisCI, CircleCI, Bitrise, BuddyBuild, Jenkins</li><li><input checked disabled type="checkbox"> GitHub, Bitbucket</li><li><input checked disabled type="checkbox"> JIRA, Pivotal, Trello</li><li><input checked disabled type="checkbox"> Sketch</li><li><input checked disabled type="checkbox"> GRPC</li><li><input checked disabled type="checkbox"> Protobuf</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>What if there is no inheritance?</title>
      <link href="/blog/What-if-there-is-no-inheritance/"/>
      <url>/blog/What-if-there-is-no-inheritance/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/77" target="_blank" rel="noopener">#77</a></strong></p><p>My question </p><blockquote><p>What if there is no inheritance, so that everybody has the same start, does that make life fairer?</p></blockquote><ul><li>Hacker News <a href="https://news.ycombinator.com/item?id=13857327" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=13857327</a></li><li>Quora <a href="https://www.quora.com/What-if-there-is-no-inheritance-so-that-everybody-has-the-same-start-does-that-make-life-fairer" target="_blank" rel="noopener">https://www.quora.com/What-if-there-is-no-inheritance-so-that-everybody-has-the-same-start-does-that-make-life-fairer</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ad Hominem</title>
      <link href="/blog/Ad-Hominem/"/>
      <url>/blog/Ad-Hominem/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/76" target="_blank" rel="noopener">#76</a></strong></p><p>I use <a href="https://twitter.com/" target="_blank" rel="noopener">Twitter</a> a lot, mostly to follow people I like. They tweet cool things about tech and life. I learned a lot.</p><blockquote><p>Please don’t show me the evil sides of the world ~ Michael Learn To Rock - How Many Hours</p></blockquote><p>But there’s also bad side of the story. I see many retweets of people saying bad things about others, mostly in form of <a href="https://www.logicallyfallacious.com/tools/lp/Bo/LogicalFallacies/1/Ad-Hominem-Abusive" target="_blank" rel="noopener">Ad Hominem</a></p><blockquote><p>Attacking the person making the argument, rather than the argument itself, when the attack on the person is completely irrelevant to the argument the person is making.</p></blockquote><p>From <a href="http://wiki.c2.com/?AdHominem" target="_blank" rel="noopener">Ad Hominem on c2.com</a></p><blockquote><p>An argumentum ad hominem is any kind of argument that criticizes an idea by pointing something out about the people who hold the idea rather than directly addressing the merits of the idea. ‘’Ad hominem’’ is Latin for “directed toward the man (as opposed to the issue at hand)”. An alternative expression is “playing the man and not the ball”.</p></blockquote><p>Most of these people have the <a href="https://support.twitter.com/groups/31-twitter-basics/topics/111-features/articles/119135-about-verified-accounts" target="_blank" rel="noopener">Twitter verified badge</a>. They complain that they have so many followers while they themselves follow hundreds of thousands. They say bad things about others’ hair style and appearance while actively supporting equality. They argue who owns the original gif. They follow one person just to be the first to insult them.</p><blockquote><p>The blue verified badge  on Twitter lets people know that an account of public interest is authentic.</p></blockquote><blockquote><p>Blowing out someone else’s candle doesn’t make yours shine any brighter ~ Anonymous</p></blockquote><p>The only thing I can do is <code>I don&#39;t like this tweet</code> 😞</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sync and async code in Swift</title>
      <link href="/blog/Sync-and-async-code-in-Swift/"/>
      <url>/blog/Sync-and-async-code-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/75" target="_blank" rel="noopener">#75</a></strong></p><p>We should use <code>DispatchQueue</code> to build thread safe code. The idea is to prevent two <code>read and write</code> from happening at the same time from 2 different threads, which cause data corruption and unexpected behaviors. Note that you should try to avoid deadlock <a href="https://stackoverflow.com/questions/15381209/how-do-i-create-a-deadlock-in-grand-central-dispatch" target="_blank" rel="noopener">https://stackoverflow.com/questions/15381209/how-do-i-create-a-deadlock-in-grand-central-dispatch</a></p><h2 id="All-sync"><a href="#All-sync" class="headerlink" title="All sync"></a>All sync</h2><p>Use <code>try catch</code>, together with <code>serial queue</code>. Use <code>sync</code> function to block current queue.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(id: String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">User</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> user: <span class="type">User!</span></span><br><span class="line">  <span class="keyword">try</span> serialQueue.sync &#123;</span><br><span class="line">    user = <span class="keyword">try</span> storage.getUser(id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setUser</span><span class="params">(<span class="number">_</span> user: User)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> serialQueue.sync &#123;</span><br><span class="line">    <span class="keyword">try</span> storage.setUser(user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="All-async"><a href="#All-async" class="headerlink" title="All async"></a>All async</h2><p>Use <code>Result</code>, toget with <code>serial queue</code>. Use <code>async</code> function to return to current queue.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> value(<span class="type">T</span>)</span><br><span class="line">  <span class="keyword">case</span> error(<span class="type">Error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(id: String, completion: <span class="params">(Result&lt;User&gt;)</span></span></span> - <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> serialQueue.async &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      user = <span class="keyword">try</span> storage.getUser(id)</span><br><span class="line">      completion(.value(user))</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      completion(.error(error))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setUser</span><span class="params">(<span class="number">_</span> user: User, completion: <span class="params">(Result&lt;<span class="params">()</span></span></span></span>&gt;) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> serialQueue.async &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> storage.setUser(user)</span><br><span class="line">      completion(.value(())</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      completion(.error(error))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sync-read-async-write"><a href="#Sync-read-async-write" class="headerlink" title="Sync read, async write"></a>Sync read, async write</h2><p>Use <code>try catch</code> for read, <code>Result</code> for write, together with <code>concurrent queue</code>. Use <code>sync</code> function for read to block current thread, while using <code>async</code> function with <code>barrier</code> flag for write to return to current queue. This is good for when multiple reads is preferred when there is no write. When write with <code>barrier</code> comes into the queue, other operations must wait.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(id: String)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">User</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> user: <span class="type">User!</span></span><br><span class="line">  <span class="keyword">try</span> concurrentQueue.sync &#123;</span><br><span class="line">    user = <span class="keyword">try</span> storage.getUser(id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setUser</span><span class="params">(<span class="number">_</span> user: User, completion: <span class="params">(Result&lt;<span class="params">()</span></span></span></span>&gt;) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> concurrentQueue.async(flags: .barrier) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> storage.setUser(user)</span><br><span class="line">      completion(.value(())</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      completion(.error(error))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Testing-for-asynchrony"><a href="#Testing-for-asynchrony" class="headerlink" title="Testing for asynchrony"></a>Testing for asynchrony</h2><p>Before we could use <a href="https://developer.apple.com/documentation/dispatch/1453050-dispatch_apply" target="_blank" rel="noopener">dispatch_apply</a> to submits a block to a dispatch queue for multiple invocations. Starting with Swift, the equivalence is <a href="https://developer.apple.com/documentation/dispatch/dispatchqueue/2016088-concurrentperform" target="_blank" rel="noopener">concurrentPerform</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DispatchQueue</span>.concurrentPerform(iterations: <span class="number">1000</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> last = array.last ?? <span class="number">0</span></span><br><span class="line">    array.append(last + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://basememara.com/creating-thread-safe-arrays-in-swift/" target="_blank" rel="noopener">http://basememara.com/creating-thread-safe-arrays-in-swift/</a></li><li><a href="https://oleb.net/blog/2013/07/parallelize-for-loops-gcd-dispatch_apply/" target="_blank" rel="noopener">https://oleb.net/blog/2013/07/parallelize-for-loops-gcd-dispatch_apply/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to check generic type in Swift</title>
      <link href="/blog/How-to-check-generic-type-in-Swift/"/>
      <url>/blog/How-to-check-generic-type-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/74" target="_blank" rel="noopener">#74</a></strong></p><p>When dealing with generic, you shouldn’t care about the types. But if you need, you can</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">isPrimitive</span>&lt;T&gt;<span class="params">(type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> primitives: [<span class="type">Any</span>.<span class="type">Type</span>] = [</span><br><span class="line">    <span class="type">Bool</span>.<span class="keyword">self</span>, [<span class="type">Bool</span>].<span class="keyword">self</span>,</span><br><span class="line">    <span class="type">String</span>.<span class="keyword">self</span>, [<span class="type">String</span>].<span class="keyword">self</span>,</span><br><span class="line">    <span class="type">Int</span>.<span class="keyword">self</span>, [<span class="type">Int</span>].<span class="keyword">self</span>,</span><br><span class="line">    <span class="type">Float</span>.<span class="keyword">self</span>, [<span class="type">Float</span>].<span class="keyword">self</span>,</span><br><span class="line">    <span class="type">Double</span>.<span class="keyword">self</span>, [<span class="type">Double</span>].<span class="keyword">self</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> primitives.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; $<span class="number">0</span>.<span class="keyword">self</span> == type.<span class="keyword">self</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use Given When Then in Swift tests</title>
      <link href="/blog/How-to-use-Given-When-Then-in-Swift-tests/"/>
      <url>/blog/How-to-use-Given-When-Then-in-Swift-tests/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/73" target="_blank" rel="noopener">#73</a></strong></p><h3 id="Spec"><a href="#Spec" class="headerlink" title="Spec"></a>Spec</h3><p>Using <code>spec</code> testing framework like <a href="https://github.com/Quick/Quick" target="_blank" rel="noopener">Quick</a> is nice, which enables <code>BDD</code> style.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"the 'Documentation' directory"</span>) &#123;</span><br><span class="line">  it(<span class="string">"has everything you need to get started"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sections = <span class="type">Directory</span>(<span class="string">"Documentation"</span>).sections</span><br><span class="line">    expect(sections).to(contain(<span class="string">"Organized Tests with Quick Examples and Example Groups"</span>))</span><br><span class="line">    expect(sections).to(contain(<span class="string">"Installing Quick"</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context(<span class="string">"if it doesn't have what you're looking for"</span>) &#123;</span><br><span class="line">    it(<span class="string">"needs to be updated"</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> you = <span class="type">You</span>(awesome: <span class="literal">true</span>)</span><br><span class="line">      expect&#123;you.submittedAnIssue&#125;.toEventually(beTruthy())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But in case you don’t want additional frameworks, and want to live closer to Apple SDKs as much as possible, here are few tips.</p><h3 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h3><p>This is from the book that I really like <a href="http://artofunittesting.com/" target="_blank" rel="noopener">The Art of Unit Testing</a>. If you don’t mind the underscore, you can follow <a href="http://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html" target="_blank" rel="noopener">UnitOfWork_StateUnderTest_ExpectedBehavior</a> structure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func testSum_NegativeNumberAs1stParam_ExceptionThrown()</span><br><span class="line">func testSum_NegativeNumberAs2ndParam_ExceptionThrown()</span><br><span class="line">func testSum_simpleValues_Calculated()</span><br></pre></td></tr></table></figure><h3 id="Given-When-Then"><a href="#Given-When-Then" class="headerlink" title="Given When Then"></a>Given When Then</h3><p>This is from BDD, and practised a lot in <a href="https://github.com/cucumber/cucumber/wiki/Given-When-Then" target="_blank" rel="noopener">Cucumber</a>. You can read more on <a href="https://martinfowler.com/bliki/GivenWhenThen.html" target="_blank" rel="noopener">https://martinfowler.com/bliki/GivenWhenThen.html</a>.</p><p>First, add some more extensions to <code>XCTestCase</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">given</span><span class="params">(<span class="number">_</span> description: String, closure: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> closure()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">when</span><span class="params">(<span class="number">_</span> description: String, closure: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> closure()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">then</span><span class="params">(<span class="number">_</span> description: String, closure: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> closure()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, in order to test, just follow <code>given when then</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testRemoveObject</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> given(<span class="string">"set to storage"</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> storage.setObject(testObject, forKey: key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> when(<span class="string">"remove object from storage"</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> storage.removeObject(forKey: key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> then(<span class="string">"there is no object in memory"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> memoryObject = <span class="keyword">try</span>? storage.memoryCache.object(forKey: key) <span class="keyword">as</span> <span class="type">User</span></span><br><span class="line">    <span class="type">XCTAssertNil</span>(memoryObject)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> then(<span class="string">"there is no object on disk"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> diskObject = <span class="keyword">try</span>? storage.diskCache.object(forKey: key) <span class="keyword">as</span> <span class="type">User</span></span><br><span class="line">    <span class="type">XCTAssertNil</span>(diskObject)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I find this more interesting than comments. All are code and descriptive. It can also be developed further to throw the <code>description</code> text.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Understanding Instance property vs parameter in Swift</title>
      <link href="/blog/Understanding-Instance-property-vs-parameter-in-Swift/"/>
      <url>/blog/Understanding-Instance-property-vs-parameter-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/72" target="_blank" rel="noopener">#72</a></strong></p><p>The other day I was refactor my code. I have</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainController</span>: <span class="title">TabBarViewDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">buttonDidPress</span> <span class="title">index</span>: <span class="title">Int</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> initialIndex = tabBarView.selectedIndex</span><br><span class="line">    <span class="keyword">let</span> wholeAppContentView = updateWholeAppContentView()</span><br><span class="line">    view.addSubview(wholeAppContentView)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The delegate method does not look right, as it’s hard to tell between required delegate method, or just instance method. Also it lacks a subject. I like this post <a href="https://mattgemmell.com/api-design/" target="_blank" rel="noopener">API Design</a>, you can read section <code>Rule 19: Always say who’s talking</code></p><blockquote><p>This is a simple rule, and an equally simple mistake to make. In your delegate methods, always pass the sender as a parameter. Always. Even for singletons. Even for things you cannot conceive would ever be used more than once simultaneously. No exceptions.</p></blockquote><p>So I refactor the delegate, and conform to it.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainController</span>: <span class="title">TabBarViewDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">tabBarView</span><span class="params">(<span class="number">_</span> view: TabBarView, buttonDidPress index: Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> initialIndex = tabBarView.selectedIndex</span><br><span class="line">    <span class="keyword">let</span> wholeAppContentView = updateWholeAppContentView()</span><br><span class="line">    view.addSubview(wholeAppContentView) <span class="comment">// This is the culprit ⚠️</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Even with just 1 line change in <code>MainController.swift</code>, the whole UI breaks, as all the views were added to the tab bar. Strange 😡 .</p><p>It didn’t take long until I remember that <code>parameter</code> takes precedence over <code>instance property</code> if they have same name. So in this case, the compiler, without warning, assume you’re dealing with <code>view</code> from <code>TabBarView</code> ⚠️ </p><p>That’s why you often use <code>self</code> to disambiguate. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span>: <span class="title">Codable</span>, <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> firstName: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> lastName: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.firstName = firstName</span><br><span class="line">    <span class="keyword">self</span>.lastName = lastName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Back to our code. The workaround is to specify <code>self</code> to specify <code>view</code> of <code>MainController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.view.addSubview(wholeAppContentView)</span><br></pre></td></tr></table></figure><p>Well, you may say, who should add view again in case of tab bar changes 😬  This is a bad example, but the lesson is  learned 😇 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to push to GitHub gist</title>
      <link href="/blog/How-to-push-to-GitHub-gist/"/>
      <url>/blog/How-to-push-to-GitHub-gist/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/71" target="_blank" rel="noopener">#71</a></strong></p><h3 id="Creating-a-new-gist"><a href="#Creating-a-new-gist" class="headerlink" title="Creating a new gist"></a>Creating a new gist</h3><ul><li>Go to <a href="https://gist.github.com/" target="_blank" rel="noopener">https://gist.github.com/</a> and create a new gist</li><li>Note that you need to include <code>filename</code> + <code>extension</code> to enable automatic language markup</li><li>Click <code>Add file</code> to add more files</li></ul><h3 id="Cloning-the-gist"><a href="#Cloning-the-gist" class="headerlink" title="Cloning the gist"></a>Cloning the gist</h3><ul><li>If you’ve enabled <code>2 factor authentication</code>, you need to use <code>personal acccess token</code> with <code>https</code>, or use <code>ssh</code>. </li></ul><blockquote><p>If you have enabled two-factor authentication, or if you are accessing an organization that uses SAML single sign-on, you must provide a personal access token instead of entering your password for HTTPS Git.</p><ul><li>You should enable <code>2 factor authentication</code>. Read more <a href="https://help.github.com/articles/https-cloning-errors/#provide-access-token-if-2fa-enabled" target="_blank" rel="noopener">https://help.github.com/articles/https-cloning-errors/#provide-access-token-if-2fa-enabled</a></li><li>For example with my gist <a href="https://gist.github.com/onmyway133/c486939f82fc4d3a8ed4be21538fdd32" target="_blank" rel="noopener">https://gist.github.com/onmyway133/c486939f82fc4d3a8ed4be21538fdd32</a> the <code>ssh url</code> is <code>git@gist.github.com:c486939f82fc4d3a8ed4be21538fdd32.git</code></li><li>Run git commands as normal</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gist.github.com:c486939f82fc4d3a8ed4be21538fdd32.git</span><br><span class="line">git clone</span><br></pre></td></tr></table></figure><ul><li>You have branch <code>master</code> by default</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="Ignoring-directories"><a href="#Ignoring-directories" class="headerlink" title="Ignoring directories"></a>Ignoring directories</h3><blockquote><p>remote: Gist does not support directories.</p></blockquote><ul><li>In my cases I’m using node, so I need to ignore <code>node_modules</code> directory</li><li>Also need to untrack if necessary </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached -r .</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to observe object deinit in Swift</title>
      <link href="/blog/How-to-observe-object-deinit-in-Swift/"/>
      <url>/blog/How-to-observe-object-deinit-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/70" target="_blank" rel="noopener">#70</a></strong></p><ul><li>Today I was browsing through  <a href="https://github.com/zendesk/Suas-iOS" target="_blank" rel="noopener">Suas-iOS</a> and the <code>subscription</code> links to life cycle of another object</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscription.linkLifeCycleTo(object: <span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><p>It observes the <code>deinit</code> of another job, interesting approach 👍 , take a look in <a href="https://github.com/zendesk/Suas-iOS/blob/master/Sources/StoreDeinitCallback.swift" target="_blank" rel="noopener">https://github.com/zendesk/Suas-iOS/blob/master/Sources/StoreDeinitCallback.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deinitCallbackKey = <span class="string">"DEINITCALLBACK_SUAS"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Registartion</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Suas</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">onObjectDeinit</span><span class="params">(forObject object: NSObject,</span></span></span><br><span class="line"><span class="function"><span class="params">                             callbackId: String,</span></span></span><br><span class="line"><span class="function"><span class="params">                             callback: @escaping <span class="params">()</span></span></span> -&gt; ()) &#123;</span><br><span class="line">    <span class="keyword">let</span> rem = deinitCallback(forObject: object)</span><br><span class="line">    rem.callbacks.append(callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">deinitCallback</span><span class="params">(forObject object: NSObject)</span></span> -&gt; <span class="type">DeinitCallback</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> deinitCallback = objc_getAssociatedObject(object, &amp;deinitCallbackKey) <span class="keyword">as</span>? <span class="type">DeinitCallback</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> deinitCallback</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> rem = <span class="type">DeinitCallback</span>()</span><br><span class="line">      objc_setAssociatedObject(object, &amp;deinitCallbackKey, rem, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">      <span class="keyword">return</span> rem</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">DeinitCallback</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> callbacks: [() -&gt; ()] = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">deinit</span> &#123;</span><br><span class="line">    callbacks.forEach(&#123; $<span class="number">0</span>() &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to deal with NODE_MODULE_VERSION in electron</title>
      <link href="/blog/How-to-deal-with-NODE_MODULE_VERSION-in-electron/"/>
      <url>/blog/How-to-deal-with-NODE_MODULE_VERSION-in-electron/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/69" target="_blank" rel="noopener">#69</a></strong></p><h3 id="NODE-MODULE-VERSION"><a href="#NODE-MODULE-VERSION" class="headerlink" title="NODE_MODULE_VERSION"></a>NODE_MODULE_VERSION</h3><p>Today I was trying to install <a href="https://github.com/lovell/sharp" target="_blank" rel="noopener">sharp</a> with <code>yarn add sharp</code> to work in my electron app, but I get the following error</p><blockquote><p>Uncaught Error: The module ‘/Users/khoa/MyElectronApp/node_modules/sharp/build/Release/sharp.node’<br>was compiled against a different Node.js version using<br>NODE_MODULE_VERSION 57. This version of Node.js requires<br>NODE_MODULE_VERSION 54. Please try re-compiling or re-installing<br>the module</p></blockquote><h3 id="Native-node-module"><a href="#Native-node-module" class="headerlink" title="Native node module"></a>Native node module</h3><p>Searching a bit, it was because <code>sharp</code> is a <a href="https://nodejs.org/api/addons.html" target="_blank" rel="noopener">native node module</a> which uses <a href="https://github.com/jcupitt/libvips" target="_blank" rel="noopener">libvips</a> under the hood</p><blockquote><p>Node.js Addons are dynamically-linked shared objects, written in C++, that can be loaded into Node.js using the require() function, and used just as if they were an ordinary Node.js module. They are used primarily to provide an interface between JavaScript running in Node.js and C/C++ libraries.</p></blockquote><p>More on how to build native node module can be found here <a href="https://blog.risingstack.com/writing-native-node-js-modules/" target="_blank" rel="noopener">https://blog.risingstack.com/writing-native-node-js-modules/</a></p><h3 id="Node-version"><a href="#Node-version" class="headerlink" title="Node version"></a>Node version</h3><p>I’m using <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> to manage node version, and <code>nvm list</code> shows <code>8.4.0</code> as the latest node version I’m using. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v6.10.1</span><br><span class="line">v7.8.0</span><br><span class="line">v7.9.0</span><br><span class="line">v8.0.0</span><br><span class="line">-&gt; v8.4.0</span><br><span class="line">system</span><br></pre></td></tr></table></figure><p>Searching on <a href="https://nodejs.org/en/download/releases/" target="_blank" rel="noopener">Node releases</a>  reveals that Node 8.4.0 has <code>NODE_MODULE_VERSION</code> of 57, so that is the node version npm uses to compile <code>sharp</code></p><p>However, I can’t seem to find the <code>NODE_MODULE_VERSION</code> 54 that <code>sharp</code> is using. I tried node <code>8.0.0</code> which is believed to have <code>NODE_MODULE_VERSION</code> 54 but it didn’t work</p><h3 id="Electron-version"><a href="#Electron-version" class="headerlink" title="Electron version"></a>Electron version</h3><p>As the time of this post, <code>electron</code> is at version <code>7.9.0</code>, you can check here <a href="https://github.com/electron/electron/blob/master/.node-version" target="_blank" rel="noopener">https://github.com/electron/electron/blob/master/.node-version</a> or by running <code>process.versions</code> in  Javascript console</p><h3 id="Using-electron-rebuild"><a href="#Using-electron-rebuild" class="headerlink" title="Using electron-rebuild"></a>Using electron-rebuild</h3><p>So after I read this <a href="https://electron.atom.io/docs/tutorial/using-native-node-modules/" target="_blank" rel="noopener">Using Native Node Modules</a>, I install <code>electron-rebuilder</code> to recompile <code>sharp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add electron-rebuild --dev</span><br><span class="line">yarn add sharp</span><br><span class="line">./node_modules/.bin/electron-rebuild</span><br></pre></td></tr></table></figure><p>It works now 🎉 </p><h3 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h3><ul><li><a href="https://blog.risingstack.com/writing-native-node-js-modules/" target="_blank" rel="noopener">https://blog.risingstack.com/writing-native-node-js-modules/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Norsk</title>
      <link href="/blog/Norsk/"/>
      <url>/blog/Norsk/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/68" target="_blank" rel="noopener">#68</a></strong></p><h2 id="Ordbok"><a href="#Ordbok" class="headerlink" title="Ordbok"></a>Ordbok</h2><ul><li><a href="http://lexin.udir.no/?mode=main-page&sub-mode=search&dict=nbo-maxi&ui-lang=NBO" target="_blank" rel="noopener">lexin</a></li></ul><h2 id="Bok"><a href="#Bok" class="headerlink" title="Bok"></a>Bok</h2><ul><li><a href="https://mernorsk.portfolio.no/" target="_blank" rel="noopener">https://mernorsk.portfolio.no/</a></li><li><a href="https://norskna.portfolio.no/" target="_blank" rel="noopener">https://norskna.portfolio.no/</a></li><li><a href="http://praktisknorsk.cappelendamm.no/" target="_blank" rel="noopener">http://praktisknorsk.cappelendamm.no/</a></li><li><a href="https://steinpastein.cappelendamm.no/" target="_blank" rel="noopener">https://steinpastein.cappelendamm.no/</a></li><li><a href="http://ord.cappelendamm.no/" target="_blank" rel="noopener">http://ord.cappelendamm.no/</a></li><li><a href="http://www.herborvi.cappelendamm.no/" target="_blank" rel="noopener">http://www.herborvi.cappelendamm.no/</a></li><li><a href="https://klartdet.portfolio.no/" target="_blank" rel="noopener">https://klartdet.portfolio.no/</a></li><li><a href="http://jobbisikte.cappelendamm.no/" target="_blank" rel="noopener">http://jobbisikte.cappelendamm.no/</a></li></ul><h2 id="Informasjon"><a href="#Informasjon" class="headerlink" title="Informasjon"></a>Informasjon</h2><ul><li><a href="https://www.kompetansenorge.no/" target="_blank" rel="noopener">https://www.kompetansenorge.no/</a></li></ul><h2 id="Kurs"><a href="#Kurs" class="headerlink" title="Kurs"></a>Kurs</h2><ul><li><a href="https://www.ntnu.edu/now/8/grammar" target="_blank" rel="noopener">Norwegian on the web</a></li><li><a href="https://www.ntnu.edu/now2" target="_blank" rel="noopener">Norwegian on the web 2</a></li><li><a href="https://www.youtube.com/playlist?list=PLScRewPs3_dz5hB1VvEbHmKV0rLcjM25e" target="_blank" rel="noopener">Norsk i bruk</a></li><li><a href="https://www.youtube.com/channel/UCbrUYR892qBNQyY3DEqfTBg" target="_blank" rel="noopener">Norsklærer Karense</a></li></ul><h2 id="Lesning"><a href="#Lesning" class="headerlink" title="Lesning"></a>Lesning</h2><ul><li><a href="http://www.klartale.no/" target="_blank" rel="noopener">http://www.klartale.no/</a></li><li><a href="http://grammatikk.com/" target="_blank" rel="noopener">http://grammatikk.com/</a></li><li><a href="http://www.nyinorge.no/no/" target="_blank" rel="noopener">http://www.nyinorge.no/no/</a></li><li><a href="http://www.samfunnskunnskap.no/?lang=no" target="_blank" rel="noopener">http://www.samfunnskunnskap.no/?lang=no</a></li><li><a href="http://www.norgeshistorie.no/" target="_blank" rel="noopener">http://www.norgeshistorie.no/</a></li></ul><h2 id="Prove"><a href="#Prove" class="headerlink" title="Prøve"></a>Prøve</h2><ul><li><a href="https://www.kompetansenorge.no/norskprove/" target="_blank" rel="noopener">https://www.kompetansenorge.no/norskprove/</a></li><li><a href="https://enovate.no/voxdemo/norsk/" target="_blank" rel="noopener">https://enovate.no/voxdemo/norsk/</a> 🚀 </li><li><a href="https://udeoslovo.pameldingssystem.no/samfo-100" target="_blank" rel="noopener">https://udeoslovo.pameldingssystem.no/samfo-100</a></li></ul><h2 id="Bilder"><a href="#Bilder" class="headerlink" title="Bilder"></a>Bilder</h2><ul><li><a href="http://clu.uni.no/bildetema-html5/bildetema.html?version=norwegian&languages=eng,nob,nno&language=nob&prev_language=nob&page=6&title=Bildetema%20html5-versjon&language_selector=simple&subpage=1&prev_page=overview" target="_blank" rel="noopener">Bilder tema</a></li></ul><h2 id="Lytting"><a href="#Lytting" class="headerlink" title="Lytting"></a>Lytting</h2><ul><li><a href="https://radio.nrk.no/" target="_blank" rel="noopener">https://radio.nrk.no/</a> 🚀 </li><li><a href="http://www.klartale.no/klartale-podcast" target="_blank" rel="noopener">http://www.klartale.no/klartale-podcast</a></li><li><a href="https://shifter.no/kategori/podcast/" target="_blank" rel="noopener">https://shifter.no/kategori/podcast/</a></li></ul><h2 id="Se-pa"><a href="#Se-pa" class="headerlink" title="Se på"></a>Se på</h2><ul><li><a href="http://kunnskapsfilm.no/series/" target="_blank" rel="noopener">http://kunnskapsfilm.no/series/</a></li><li><a href="https://tv.nrk.no/serie/folkeopplysningen/KMTE50009315/sesong-3/episode-5" target="_blank" rel="noopener">https://tv.nrk.no/serie/folkeopplysningen/KMTE50009315/sesong-3/episode-5</a></li><li><a href="http://tv.nrksuper.no/" target="_blank" rel="noopener">NRK Super</a></li><li><a href="https://www.nrk.no/skole/" target="_blank" rel="noopener">NRK Skole</a> 🚀 🚀 </li><li><a href="http://tekstlab.uio.no/igin/" target="_blank" rel="noopener">http://tekstlab.uio.no/igin/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to support copy paste in electron</title>
      <link href="/blog/How-to-support-copy-paste-in-electron/"/>
      <url>/blog/How-to-support-copy-paste-in-electron/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/67" target="_blank" rel="noopener">#67</a></strong></p><p>After running <code>electron-packager</code>, the app does not accept copy, paste anymore. This is because the release build does not have menu with key binding to the clipboard by default. We can solve this by manually declaring the menu</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> Menu = <span class="built_in">require</span>(<span class="string">'electron'</span>).Menu</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  createWindow()</span><br><span class="line">  createMenu()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> application = &#123;</span><br><span class="line">    label: <span class="string">"Application"</span>,</span><br><span class="line">    submenu: [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"About Application"</span>,</span><br><span class="line">        selector: <span class="string">"orderFrontStandardAboutPanel:"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">"separator"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"Quit"</span>,</span><br><span class="line">        accelerator: <span class="string">"Command+Q"</span>,</span><br><span class="line">        click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          app.quit()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> edit = &#123;</span><br><span class="line">    label: <span class="string">"Edit"</span>,</span><br><span class="line">    submenu: [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"Undo"</span>,</span><br><span class="line">        accelerator: <span class="string">"CmdOrCtrl+Z"</span>,</span><br><span class="line">        selector: <span class="string">"undo:"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"Redo"</span>,</span><br><span class="line">        accelerator: <span class="string">"Shift+CmdOrCtrl+Z"</span>,</span><br><span class="line">        selector: <span class="string">"redo:"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">"separator"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"Cut"</span>,</span><br><span class="line">        accelerator: <span class="string">"CmdOrCtrl+X"</span>,</span><br><span class="line">        selector: <span class="string">"cut:"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"Copy"</span>,</span><br><span class="line">        accelerator: <span class="string">"CmdOrCtrl+C"</span>,</span><br><span class="line">        selector: <span class="string">"copy:"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"Paste"</span>,</span><br><span class="line">        accelerator: <span class="string">"CmdOrCtrl+V"</span>,</span><br><span class="line">        selector: <span class="string">"paste:"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">"Select All"</span>,</span><br><span class="line">        accelerator: <span class="string">"CmdOrCtrl+A"</span>,</span><br><span class="line">        selector: <span class="string">"selectAll:"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> template = [</span><br><span class="line">    application,</span><br><span class="line">    edit</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  Menu.setApplicationMenu(Menu.buildFromTemplate(template))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://pracucci.com/atom-electron-enable-copy-and-paste.html" target="_blank" rel="noopener">Electron - Enable copy and paste</a></li><li><a href="https://github.com/electron/electron/issues/2591" target="_blank" rel="noopener">Paste into input field doesn’t work after packaging up app</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to change app icon in electron</title>
      <link href="/blog/How-to-change-app-icon-in-electron/"/>
      <url>/blog/How-to-change-app-icon-in-electron/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/66" target="_blank" rel="noopener">#66</a></strong></p><h3 id="Generate-icns"><a href="#Generate-icns" class="headerlink" title="Generate icns"></a>Generate icns</h3><ul><li>Generate <code>.iconset</code></li><li>Run <code>iconutil -c icns &quot;Icon.iconset&quot;</code>. Note that icon names must be first letter lowsercased, and use <code>_</code> instead of <code>-</code></li></ul><p><img src="https://user-images.githubusercontent.com/2284279/29305228-da1a8560-8197-11e7-8826-6a278157abf2.png" alt="icns"></p><h3 id="Use-icns"><a href="#Use-icns" class="headerlink" title="Use icns"></a>Use icns</h3><ul><li>In <code>main.js</code>, specify <code>icon</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">  width: <span class="number">800</span>, </span><br><span class="line">  height: <span class="number">600</span>,</span><br><span class="line">  icon: __dirname +  <span class="string">'/Icon/Icon.icns'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You can also use helper url methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iconUrl = url.format(&#123;</span><br><span class="line">  pathname: path.join(__dirname, <span class="string">'Icon/Icon.icns'</span>),</span><br><span class="line">  protocol: <span class="string">'file:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="If-app-icon-is-not-updated"><a href="#If-app-icon-is-not-updated" class="headerlink" title="If app icon is not updated"></a>If app icon is not updated</h3><ul><li>I get a problem that electron always shows default app icon. I tried using <code>png</code>, <code>NativeImage</code>, different icon sizes but still the problem. When I use <code>electron-packager</code> to make release build, the icon shows correctly, so it must be because of Electron caching or somehow 😠 </li><li>Go to <code>node_modules -&gt; electron -&gt; dist</code>, right click on <code>Electron</code>, choose <code>View Info</code></li><li>Drag another <code>icns</code> into the icon on the top left</li></ul><p><img src="https://user-images.githubusercontent.com/2284279/29305340-83c8d058-8198-11e7-8057-742f904e2c1c.png" alt="info"></p><h3 id="Release-with-electron-packager"><a href="#Release-with-electron-packager" class="headerlink" title="Release with electron-packager"></a>Release with <code>electron-packager</code></h3><ul><li><code>icon</code> must be specified with <code>__dirname</code> (we already did) for <code>electron-packager</code> to pick up correct icons</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Another layer of abstraction</title>
      <link href="/blog/Another-layer-of-abstraction/"/>
      <url>/blog/Another-layer-of-abstraction/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/65" target="_blank" rel="noopener">#65</a></strong></p><p><a href="https://sandofsky.com/blog/third-party-libraries.html" target="_blank" rel="noopener">https://sandofsky.com/blog/third-party-libraries.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to do implement notification in iOS with Firebase</title>
      <link href="/blog/How-to-do-implement-notification-in-iOS-with-Firebase/"/>
      <url>/blog/How-to-do-implement-notification-in-iOS-with-Firebase/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/64" target="_blank" rel="noopener">#64</a></strong></p><p>Note: This applies to Firebase 4.0.4</p><h2 id="Preparing-push-notification-certificate"><a href="#Preparing-push-notification-certificate" class="headerlink" title="Preparing push notification certificate"></a>Preparing push notification certificate</h2><p>Go to <a href="https://developer.apple.com/account/ios/certificate/distribution/create" target="_blank" rel="noopener">Member Center</a> -&gt; <code>Certificates</code> -&gt; <code>Production</code></p><h3 id="Certificate"><a href="#Certificate" class="headerlink" title="Certificate"></a>Certificate</h3><p>You can now use 1 certificate for both sandbox and production environment<br><img src="https://user-images.githubusercontent.com/2284279/29111626-5617e09c-7ceb-11e7-9f56-c1f9ceab3cd1.png" alt="push"></p><h3 id="Auth-Key"><a href="#Auth-Key" class="headerlink" title="Auth Key"></a>Auth Key</h3><ul><li>If you like to use <a href="https://developer.apple.com/account/ios/authkey/create" target="_blank" rel="noopener">Auth Key</a>, read <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html#//apple_ref/doc/uid/TP40008194-CH11-SW3" target="_blank" rel="noopener">Provider Authentication Tokens</a></li></ul><h2 id="Configure-push-notification"><a href="#Configure-push-notification" class="headerlink" title="Configure push notification"></a>Configure push notification</h2><ul><li>Go to <a href="https://console.firebase.google.com/" target="_blank" rel="noopener">Firebase Console</a> -&gt; <code>Settings</code> -&gt; <code>Project Settings</code> -&gt; <code>Cloud Messaging</code> -&gt; <code>iOS app configuration</code><ul><li>If you use certificate, use just 1 <code>Apple Push Notification service SSL</code> for both fields</li><li>If you use Authenticate Key, fill in <code>APNS auth key</code></li></ul></li></ul><p><img src="https://user-images.githubusercontent.com/2284279/29111784-f0dfcbe4-7ceb-11e7-8aff-db1a50ea3ee5.png" alt="firebase"></p><h2 id="Adding-pod"><a href="#Adding-pod" class="headerlink" title="Adding pod"></a>Adding pod</h2><p>In your <code>Podfile</code>, declare</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'Firebase/Core'</span></span><br><span class="line">pod <span class="string">'Firebase/Messaging'</span></span><br></pre></td></tr></table></figure><h2 id="Disabling-app-delegate-swizzling"><a href="#Disabling-app-delegate-swizzling" class="headerlink" title="Disabling app delegate swizzling"></a>Disabling app delegate swizzling</h2><ul><li>Read <a href="https://firebase.google.com/docs/cloud-messaging/ios/client" target="_blank" rel="noopener">Method swizzling in Firebase Cloud Messaging</a></li><li>You should say NO to swizzling. Do this in your <code>Info.plist</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>FirebaseAppDelegateProxyEnabled<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Read more on <code>Messaging.messaging().apnsToken</code></p><blockquote><p>This property is used to set the APNS Token received by the application delegate.<br>FIRMessaging uses method swizzling to ensure the APNS token is set automatically. However, if you have disabled swizzling by setting <code>FirebaseAppDelegateProxyEnabled</code> to <code>NO</code> in your app’s Info.plist, you should manually set the APNS token in your application delegate’s -application:didRegisterForRemoteNotificationsWithDeviceToken: method.<br>If you would like to set the type of the APNS token, rather than relying on automatic detection, see: -setAPNSToken:type:.</p></blockquote><h2 id="Configuring-Firebase"><a href="#Configuring-Firebase" class="headerlink" title="Configuring Firebase"></a>Configuring Firebase</h2><p>You can and should configure Firebase in code</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Firebase</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> options = <span class="type">FirebaseOptions</span>(googleAppID: <span class="string">""</span>, gcmSenderID: <span class="string">""</span>)</span><br><span class="line">options.bundleID = <span class="string">""</span></span><br><span class="line">options.apiKey = <span class="string">""</span></span><br><span class="line">options.projectID = <span class="string">""</span></span><br><span class="line">options.clientID = <span class="string">""</span></span><br><span class="line"><span class="type">FirebaseApp</span>.configure(options: options)</span><br></pre></td></tr></table></figure><h2 id="Handling-device-token"><a href="#Handling-device-token" class="headerlink" title="Handling device token"></a>Handling device token</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Firebase</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)</span></span> &#123;</span><br><span class="line">  <span class="type">Messaging</span>.messaging().apnsToken = deviceToken</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Getting-FCM-token"><a href="#Getting-FCM-token" class="headerlink" title="Getting FCM token"></a>Getting FCM token</h2><h3 id="Retrieving-FCM-token"><a href="#Retrieving-FCM-token" class="headerlink" title="Retrieving FCM token"></a>Retrieving FCM token</h3><p>Read <a href="https://firebase.google.com/docs/cloud-messaging/ios/first-message" target="_blank" rel="noopener">Access the registration token</a></p><blockquote><p>By default, the FCM SDK generates a registration token for the client app instance on initial startup of your app. Similar to the APNs device token, this token allows you to target notification messages to this particular instance of the app.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Messaging</span>.messaging().fcmToken</span><br></pre></td></tr></table></figure><h3 id="Observing-for-FCM-token-change"><a href="#Observing-for-FCM-token-change" class="headerlink" title="Observing for FCM token change"></a>Observing for FCM token change</h3><p>Read <a href="https://firebase.google.com/docs/cloud-messaging/ios/first-message#access_the_registration_token" target="_blank" rel="noopener">Monitor token generation</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Messaging</span>.messaging().delegate = <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - MessagingDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">messaging</span><span class="params">(<span class="number">_</span> messaging: Messaging, didRefreshRegistrationToken fcmToken: String)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(fcmToken)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use JSON Codable in Swift 4</title>
      <link href="/blog/How-to-use-JSON-Codable-in-Swift-4/"/>
      <url>/blog/How-to-use-JSON-Codable-in-Swift-4/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/63" target="_blank" rel="noopener">#63</a></strong></p><p><code>Codable</code> in Swift 4 changes the game. It deprecates lots of existing JSON libraries.</p><h2 id="Generic-model"><a href="#Generic-model" class="headerlink" title="Generic model"></a>Generic model</h2><p>API responses is usually in form of an object container with a key. Then it will be either nested array or object. We can deal with it by introducing a <code>data holder</code>. Take a look <a href="https://github.com/onmyway133/PhotoFeed/blob/finish/PhotoFeed/Models/DataHolder.swift" target="_blank" rel="noopener">DataHolder</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"comment_id"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"comment_id"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListHolder</span>&lt;<span class="title">T</span>: <span class="title">Codable</span>&gt;: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> list = <span class="string">"data"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> list: [<span class="type">T</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OneHolder</span>&lt;<span class="title">T</span>: <span class="title">Codable</span>&gt;: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> one = <span class="string">"data"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> one: <span class="type">T</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>then with <code>Alamofire</code>, we can just parse to data holder</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadComments</span><span class="params">(mediaId: String, completion: @escaping <span class="params">([Comment])</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  request(<span class="string">"https://api.instagram.com/v1/media/\(mediaId)/comments"</span>,</span><br><span class="line">    parameters: parameters)</span><br><span class="line">  .responseData(completionHandler: &#123; (response) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data = response.result.value &#123;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> holder = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">ListHolder</span>&lt;<span class="type">Comment</span>&gt;.<span class="keyword">self</span>, from: data)</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">          completion(holder.list)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="http://benscheirman.com/2017/06/ultimate-guide-to-json-parsing-with-swift-4/" target="_blank" rel="noopener">http://benscheirman.com/2017/06/ultimate-guide-to-json-parsing-with-swift-4/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning flexbox</title>
      <link href="/blog/Learning-flexbox/"/>
      <url>/blog/Learning-flexbox/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/62" target="_blank" rel="noopener">#62</a></strong></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>body height <a href="https://www.kirupa.com/html5/make_body_take_up_full_browser_height.htm" target="_blank" rel="noopener">https://www.kirupa.com/html5/make_body_take_up_full_browser_height.htm</a></li></ul><h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><ul><li>Properties of flex <a href="https://codepen.io/enxaneta/full/adLPwv" target="_blank" rel="noopener">https://codepen.io/enxaneta/full/adLPwv</a></li><li>Visual guide to flexbox <a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties" target="_blank" rel="noopener">https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties</a></li><li>align-items vs align-content <a href="https://stackoverflow.com/questions/27539262/whats-the-difference-between-align-content-and-align-items" target="_blank" rel="noopener">https://stackoverflow.com/questions/27539262/whats-the-difference-between-align-content-and-align-items</a></li><li>align-items vs justify-content <a href="https://stackoverflow.com/questions/35049262/difference-between-justify-content-vs-align-items" target="_blank" rel="noopener">https://stackoverflow.com/questions/35049262/difference-between-justify-content-vs-align-items</a></li><li>multiple line <a href="https://stackoverflow.com/questions/41789278/first-child-full-width-in-flexbox" target="_blank" rel="noopener">https://stackoverflow.com/questions/41789278/first-child-full-width-in-flexbox</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>When to use hamburger menu in iOS</title>
      <link href="/blog/When-to-use-hamburger-menu-in-iOS/"/>
      <url>/blog/When-to-use-hamburger-menu-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/61" target="_blank" rel="noopener">#61</a></strong></p><p>You can read everywhere that hamburger is mostly not recommended. Every navigation structure has their use cases, and for hamburger, I find these posts to have their points</p><ul><li>As a secondary navigation <a href="http://babich.biz/hamburger-good-ux/" target="_blank" rel="noopener">http://babich.biz/hamburger-good-ux/</a></li><li>When it does not interfere with the existing navigation <a href="http://www.ios-coding.com/blog/2015/11/01/maintaining-viewdeck/" target="_blank" rel="noopener">http://www.ios-coding.com/blog/2015/11/01/maintaining-viewdeck/</a></li><li>Slack app <a href="https://slack.com/downloads/ios" target="_blank" rel="noopener">https://slack.com/downloads/ios</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to deal with windows-1252 encoding in Node</title>
      <link href="/blog/How-to-deal-with-windows-1252-encoding-in-Node/"/>
      <url>/blog/How-to-deal-with-windows-1252-encoding-in-Node/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/60" target="_blank" rel="noopener">#60</a></strong></p><p>Today I use <a href="https://github.com/bitinn/node-fetch" target="_blank" rel="noopener">node-fetch</a> and <a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="noopener">cheerio</a> to fetch a webpage. It looks good in Chrome and Sublime Text when it displays <a href="https://www.w3schools.com/html/html_entities.asp" target="_blank" rel="noopener">html entities</a> like <code>&amp;#7901</code></p><p>However, it does not render correctly in iTerm, Terminal and Visual Studio Code. It just shows <a href="http://www.fileformat.info/info/unicode/char/0fffd/index.htm" target="_blank" rel="noopener">fffd</a></p><p>I think the problem is because of my code, so I change to <a href="https://github.com/request/request" target="_blank" rel="noopener">request</a> and try to play with different options in cheerio but still the problem.</p><p>It didn’t take me long to figure it out that the format of the html is <code>windows-1252</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=windows-1252"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So I need to use <a href="https://github.com/mathiasbynens/windows-1252" target="_blank" rel="noopener">windows-1252</a>, <a href="https://github.com/ForbesLindesay/legacy-encoding" target="_blank" rel="noopener">legacy-encoding</a>, <a href="https://github.com/ashtuchkin/iconv-lite" target="_blank" rel="noopener">iconv-lite</a></p><p>FYI</p><ul><li><a href="https://stackoverflow.com/questions/31834790/node-js-how-to-http-get-and-decode-encode-response-in-custom-format" target="_blank" rel="noopener">https://stackoverflow.com/questions/31834790/node-js-how-to-http-get-and-decode-encode-response-in-custom-format</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pixel and point</title>
      <link href="/blog/Pixel-and-point/"/>
      <url>/blog/Pixel-and-point/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/59" target="_blank" rel="noopener">#59</a></strong></p><p>TL;DR: Don’t use <code>nativeScale</code> and <code>nativeBounds</code>, unless you’re doing some very low level stuff</p><h3 id="What-is-point-and-pixel"><a href="#What-is-point-and-pixel" class="headerlink" title="What is point and pixel"></a>What is point and pixel</h3><p>From <a href="https://developer.apple.com/library/content/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html" target="_blank" rel="noopener">https://developer.apple.com/library/content/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html</a></p><blockquote><p>In iOS there is a distinction between the coordinates you specify in your drawing code and the pixels of the underlying device</p></blockquote><blockquote><p>The purpose of using points (and the logical coordinate system) is to provide a consistent size of output that is device independent. For most purposes, the actual size of a point is irrelevant. The goal of points is to provide a relatively consistent scale that you can use in your code to specify the size and position of views and rendered content</p></blockquote><blockquote><p>On a standard-resolution screen, the scale factor is typically 1.0. On a high-resolution screen, the scale factor is typically 2.0</p></blockquote><h3 id="How-about-scale-and-nativeScale"><a href="#How-about-scale-and-nativeScale" class="headerlink" title="How about scale and nativeScale"></a>How about <code>scale</code> and <code>nativeScale</code></h3><p>From <a href="https://developer.apple.com/documentation/uikit/uiscreen" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uiscreen</a></p><ul><li>var bounds: CGRect: The bounding rectangle of the screen, measured in <strong>points</strong>.</li><li>var nativeBounds: CGRect: The bounding rectangle of the physical screen, measured in <strong>pixels</strong>.</li><li>var scale: CGFloat: The natural scale factor associated with the <strong>screen</strong>.</li><li>var nativeScale: CGFloat: The native scale factor for the <strong>physical screen</strong>.</li></ul><h3 id="The-scale-factor-and-display-mode"><a href="#The-scale-factor-and-display-mode" class="headerlink" title="The scale factor and display mode"></a>The scale factor and display mode</h3><p>See this for a whole list of devices and their scale factors <a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions" target="_blank" rel="noopener">https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions</a></p><p>The iPhone 6 and 6+ introduced <strong>display mode</strong> <a href="https://www.cnet.com/how-to/explaining-display-zoom-on-iphone-6-and-6-plus/" target="_blank" rel="noopener">https://www.cnet.com/how-to/explaining-display-zoom-on-iphone-6-and-6-plus/</a></p><p>You can see that currently the iPhone 6+, 6s+, 7+ phones have scale factor of 2.88 in zoomed mode, and 2.6 in standard mode</p><p>You can also see that in zoomed mode, iPhone 6 has the same <strong>logical size</strong> as the iPhone 5</p><h3 id="Simulator-vs-device"><a href="#Simulator-vs-device" class="headerlink" title="Simulator vs device"></a>Simulator vs device</h3><p>This is to show you the differences in <code>nativeScale</code> in simulators and devices in <strong>zoomed mode</strong>, hence differences in <code>nativeBounds</code>.</p><p>iPhone 6+ simulator</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po <span class="type">UIScreen</span>.main.scale</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">(lldb) po <span class="type">UIScreen</span>.main.bounds</span><br><span class="line">▿ (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">414.0</span>, <span class="number">736.0</span>)</span><br><span class="line">  ▿ origin : (<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">    - x : <span class="number">0.0</span></span><br><span class="line">    - y : <span class="number">0.0</span></span><br><span class="line">  ▿ size : (<span class="number">414.0</span>, <span class="number">736.0</span>)</span><br><span class="line">    - width : <span class="number">414.0</span></span><br><span class="line">    - height : <span class="number">736.0</span></span><br><span class="line"></span><br><span class="line">(lldb) po <span class="type">UIScreen</span>.main.nativeScale</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">(lldb) po <span class="type">UIScreen</span>.main.nativeBounds</span><br><span class="line">▿ (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1242.0</span>, <span class="number">2208.0</span>)</span><br><span class="line">  ▿ origin : (<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">    - x : <span class="number">0.0</span></span><br><span class="line">    - y : <span class="number">0.0</span></span><br><span class="line">  ▿ size : (<span class="number">1242.0</span>, <span class="number">2208.0</span>)</span><br><span class="line">    - width : <span class="number">1242.0</span></span><br><span class="line">    - height : <span class="number">2208.0</span></span><br></pre></td></tr></table></figure><p>iPhone 6+ device</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po <span class="type">UIScreen</span>.main.scale</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">(lldb) po <span class="type">UIScreen</span>.main.bounds</span><br><span class="line">▿ (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">375.0</span>, <span class="number">667.0</span>)</span><br><span class="line">  ▿ origin : (<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">    - x : <span class="number">0.0</span></span><br><span class="line">    - y : <span class="number">0.0</span></span><br><span class="line">  ▿ size : (<span class="number">375.0</span>, <span class="number">667.0</span>)</span><br><span class="line">    - width : <span class="number">375.0</span></span><br><span class="line">    - height : <span class="number">667.0</span></span><br><span class="line"></span><br><span class="line">(lldb) po <span class="type">UIScreen</span>.main.nativeScale</span><br><span class="line"><span class="number">2.88</span></span><br><span class="line"></span><br><span class="line">(lldb) po <span class="type">UIScreen</span>.main.nativeBounds</span><br><span class="line">▿ (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1080.0</span>, <span class="number">1920.0</span>)</span><br><span class="line">  ▿ origin : (<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">    - x : <span class="number">0.0</span></span><br><span class="line">    - y : <span class="number">0.0</span></span><br><span class="line">  ▿ size : (<span class="number">1080.0</span>, <span class="number">1920.0</span>)</span><br><span class="line">    - width : <span class="number">1080.0</span></span><br><span class="line">    - height : <span class="number">1920.0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optional of optional in Swift</title>
      <link href="/blog/Optional-of-optional-in-Swift/"/>
      <url>/blog/Optional-of-optional-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/58" target="_blank" rel="noopener">#58</a></strong></p><p>Do you know that an optional can itself contain an optional, that contains another optional? In that case, we need to unwrap multiple times</p><p><img src="https://user-images.githubusercontent.com/2284279/27117791-83128f50-50d8-11e7-93dd-604ed704e890.png" alt="optionals"></p><p>You mostly see it when you try to access <code>window</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> window = <span class="type">UIApplication</span>.shared.delegate?.window <span class="comment">// UIWindow??</span></span><br></pre></td></tr></table></figure><p>It is because <code>delegate</code> can be nil, and its <code>window</code> can be nil too.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window??.backgroundColor = .yellow</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Package node.js application</title>
      <link href="/blog/Package-node.js-application/"/>
      <url>/blog/Package-node.js-application/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/57" target="_blank" rel="noopener">#57</a></strong></p><p>I like <code>node.js</code> because it has many cool packages. I wish the same goes for macOS. Fortunately, the below solutions provide a way to package <code>node.js</code> modules and use them inside macOS applications. It can be slow, but you save time by using existing <code>node.js</code> modules. Let’s give it a try. </p><ul><li><a href="https://github.com/zeit/pkg" target="_blank" rel="noopener">pkg</a> Package your Node.js project into an executable 🚀 </li><li><a href="https://github.com/nexe/nexe" target="_blank" rel="noopener">nexe</a> create a single executable out of your node.js apps</li><li><a href="https://github.com/igorklopov/enclose" target="_blank" rel="noopener">enclose js</a> Compile your Node.js project into an executable <a href="http://enclosejs.com" target="_blank" rel="noopener">http://enclosejs.com</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Favorite WWDC 2017 sessions</title>
      <link href="/blog/Favorite-WWDC-2017-sessions/"/>
      <url>/blog/Favorite-WWDC-2017-sessions/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/56" target="_blank" rel="noopener">#56</a></strong></p><ul><li>Source <a href="https://developer.apple.com/videos/wwdc2017/" target="_blank" rel="noopener">WWDC 2017</a></li></ul><ol><li><a href="https://developer.apple.com/videos/play/wwdc2017/703/" target="_blank" rel="noopener">Introducing Core ML</a></li></ol><ul><li>Core ML<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1572/1572_wide_250x141_2x.jpg" alt></li></ul><ol start="2"><li><a href="https://developer.apple.com/videos/play/wwdc2017/602/" target="_blank" rel="noopener">Introducing ARKit: Augmented Reality for iOS</a></li></ol><ul><li>ARKit<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1662/1662_wide_250x141_2x.jpg" alt></li></ul><ol start="3"><li><a href="https://developer.apple.com/videos/play/wwdc2017/402/" target="_blank" rel="noopener">What’s New in Swift</a></li></ol><ul><li>String</li><li>Generic</li><li>Codable<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1673/1673_wide_250x141_2x.jpg" alt></li></ul><ol start="4"><li><a href="https://developer.apple.com/videos/play/wwdc2017/230/" target="_blank" rel="noopener">Advanced Animations with UIKit</a></li></ol><ul><li>Multiple animation</li><li>Interactive animation<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1557/1557_wide_250x141_2x.jpg" alt></li></ul><ol start="5"><li><a href="https://developer.apple.com/videos/play/wwdc2017/208/" target="_blank" rel="noopener">Natural Language Processing and your Apps</a></li></ol><ul><li>NSLinguisticTagger<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1543/1543_wide_250x141_2x.jpg" alt></li></ul><ol start="6"><li><a href="https://developer.apple.com/videos/play/wwdc2017/201/" target="_blank" rel="noopener">What’s New in Cocoa Touch</a></li></ol><ul><li>Large title</li><li>Drag and drop</li><li>File management</li><li>Safe area<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1548/1548_wide_250x141_2x.jpg" alt></li></ul><ol start="7"><li><a href="https://developer.apple.com/videos/play/wwdc2017/212/" target="_blank" rel="noopener">What’s New in Foundation</a></li></ol><ul><li>KeyPath</li><li>Observe</li><li>Codable<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1620/1620_wide_250x141_2x.jpg" alt></li></ul><ol start="8"><li><a href="https://developer.apple.com/videos/play/wwdc2017/404/" target="_blank" rel="noopener">Debugging with Xcode 9</a></li></ol><ul><li>Wireless debugging</li><li>View controller debugging<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1681/1681_wide_250x141_2x.jpg" alt></li></ul><ol start="9"><li><a href="https://developer.apple.com/videos/play/wwdc2017/710/" target="_blank" rel="noopener">Core ML in depth</a></li></ol><ul><li>Model</li><li>Core ML tools<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1573/1573_wide_250x141_2x.jpg" alt></li></ul><ol start="10"><li><a href="https://developer.apple.com/videos/play/wwdc2017/506/" target="_blank" rel="noopener">Vision Framework: Building on Core ML</a></li></ol><ul><li>Detection</li><li>Track<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1618/1618_wide_250x141_2x.jpg" alt></li></ul><ol start="11"><li><a href="https://developer.apple.com/videos/play/wwdc2017/409/" target="_blank" rel="noopener">What’s New in Testing</a></li></ol><ul><li>Parallel testing</li><li>Wait</li><li>Screenshot</li><li>Multiple app scenario<br><img src="https://devimages-cdn.apple.com/wwdc-services/images/7/1677/1677_wide_250x141_2x.jpg" alt></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to implement a tracker in Swift</title>
      <link href="/blog/How-to-implement-a-tracker-in-Swift/"/>
      <url>/blog/How-to-implement-a-tracker-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/55" target="_blank" rel="noopener">#55</a></strong></p><p>I’m trying to implement a tracker, so the idea is that it can inject <code>subscription</code> upon method calls. It is best suit for logging, analytics, and it leverages <code>RxCocoa</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">track(<span class="type">ListController</span>.<span class="keyword">self</span>) &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">track(<span class="type">ListController</span>.<span class="keyword">self</span>, selector: #selector(<span class="type">ListController</span>.hello)) &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">track(<span class="type">DetailController</span>.<span class="keyword">self</span>) &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-code"><a href="#The-code" class="headerlink" title="The code"></a>The code</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> RxSwift</span><br><span class="line"><span class="keyword">import</span> RxCocoa</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapping: [<span class="type">String</span>: [<span class="type">Item</span>]] = [:]</span><br><span class="line"><span class="keyword">var</span> hasSwizzled = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> bag = <span class="type">DisposeBag</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">track</span>&lt;T: UIViewController&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, selector: Selector? = <span class="literal">nil</span>, block: @escaping <span class="params">(T)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> typeName = <span class="type">NSStringFromClass</span>(type)</span><br><span class="line">  <span class="keyword">if</span> !hasSwizzled &#123;</span><br><span class="line">    <span class="keyword">let</span> original = #selector(<span class="type">UIViewController</span>.viewDidLoad)</span><br><span class="line">    <span class="keyword">let</span> swizled = #selector(<span class="type">UIViewController</span>.trackers_viewDidLoad)</span><br><span class="line">    swizzle(kClass: <span class="type">UIViewController</span>.<span class="keyword">self</span>, originalSelector: original, swizzledSelector: swizled)</span><br><span class="line">    hasSwizzled = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> selector = selector ?? #selector(<span class="type">UIViewController</span>.viewDidAppear(<span class="number">_</span>:))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> item = <span class="type">Item</span>(selector: selector, block: &#123; (controller) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> controller = controller <span class="keyword">as</span>? <span class="type">T</span> &#123;</span><br><span class="line">      block(controller)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">var</span> items = mapping[typeName] &#123;</span><br><span class="line">    items.append(item)</span><br><span class="line">    mapping[typeName] = items</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mapping[typeName] = [item]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> selector: <span class="type">Selector</span></span><br><span class="line">  <span class="keyword">let</span> block: (<span class="type">UIViewController</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(selector: <span class="type">Selector</span>, block: @escaping (<span class="type">UIViewController</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.selector = selector</span><br><span class="line">    <span class="keyword">self</span>.block = block</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">trackers_viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    trackers_viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> typeName = <span class="type">NSStringFromClass</span>(type(of: <span class="keyword">self</span>))</span><br><span class="line">    <span class="keyword">let</span> items = mapping[typeName]</span><br><span class="line">    items?.forEach(&#123; (item) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span></span><br><span class="line">        .rx</span><br><span class="line">        .sentMessage(item.selector)</span><br><span class="line">        .subscribe(onNext: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">          item.block(<span class="keyword">self</span>)</span><br><span class="line">        &#125;, onCompleted: &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"completed"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .disposed(by: bag)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swizzle</span><span class="params">(kClass: AnyClass, originalSelector: Selector, swizzledSelector: Selector)</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> originalMethod = class_getInstanceMethod(kClass, originalSelector)</span><br><span class="line">  <span class="keyword">let</span> swizzledMethod = class_getInstanceMethod(kClass, swizzledSelector)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> didAddMethod = class_addMethod(kClass, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> didAddMethod &#123;</span><br><span class="line">    class_replaceMethod(kClass, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    method_exchangeImplementations(originalMethod, swizzledMethod)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to change year in Date in Swift</title>
      <link href="/blog/How-to-change-year-in-Date-in-Swift/"/>
      <url>/blog/How-to-change-year-in-Date-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/54" target="_blank" rel="noopener">#54</a></strong></p><p>Today I’m trying to change the year of a <code>Date</code> object to 2000 in Swift.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="type">Date</span>()</span><br></pre></td></tr></table></figure><p>Firstly, I tried with <code>date(bySetting:)</code> but it does not work with past year. It simply returns nil</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span>.current.date(bySetting: .year, value: <span class="number">2000</span>, of: date)</span><br></pre></td></tr></table></figure><p>Secondly, I tried with <code>dateComponents</code>. The <code>component.year</code> has changed, but it <code>calendar</code> still returns the original date, very strange !!. No matter what timezone and calendar I use, it still has this problem</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> component = calendar.dateComponents(<span class="keyword">in</span>: <span class="type">TimeZone</span>.current, from: base)</span><br><span class="line">component.year = year</span><br><span class="line"><span class="type">Calendar</span>.current.date(from: component)</span><br></pre></td></tr></table></figure><p>Finally, I tried to be more explicit, and it works 🎉 </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> component = calendar.dateComponents([.year, .month, .day, .hour, .minute, .second], from: base)</span><br><span class="line">component.year = year</span><br><span class="line"><span class="type">Calendar</span>.current.date(from: component)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WWDC changelog</title>
      <link href="/blog/WWDC-changelog/"/>
      <url>/blog/WWDC-changelog/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/53" target="_blank" rel="noopener">#53</a></strong></p><p>Every WWDC, Apple introduces new frameworks and workflows. There are many awesome things we overlook or haven’t had the chance to use. Some frameworks are first introduced on macOS, but I list in the first WWDC it was introduced</p><blockquote><p>It’s something only Apple can do</p></blockquote><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><ul><li><a href="https://developer.apple.com/wwdc" target="_blank" rel="noopener">WWDC</a></li><li><a href="https://developer.apple.com/documentation" target="_blank" rel="noopener">Apple Developer Documentation</a> </li><li><a href="https://en.wikipedia.org/wiki/Apple_Worldwide_Developers_Conference" target="_blank" rel="noopener">Apple Worldwide Developers Conference</a></li><li><a href="http://asciiwwdc.com/" target="_blank" rel="noopener">ASCII WWDC</a> Searchable full-text transcripts of WWDC sessions</li><li><a href="https://www.git-tower.com/blog/history-of-ios/" target="_blank" rel="noopener">An Illustrated History of iOS</a></li><li><a href="https://www.git-tower.com/blog/history-of-macos/" target="_blank" rel="noopener">An Illustrated History of macOS</a></li></ul><h2 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/nslinguistictagger" target="_blank" rel="noopener">NSLinguisticTagger</a><blockquote><p>Analyze natural language to tag part of speech and lexical class, identify proper names, perform lemmatization, and determine the language and script (orthography) of text.</p></blockquote></li></ul><h2 id="WWDC-…"><a href="#WWDC-…" class="headerlink" title="WWDC …"></a>WWDC …</h2><ul><li><a href="https://developer.apple.com/documentation/coreimage" target="_blank" rel="noopener">Core Image</a><blockquote><p>Use built-in or custom filters to process still and video images.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/coremotion" target="_blank" rel="noopener">Core Motion</a><blockquote><p>Process accelerometer, gyroscope, pedometer, and environment-related events.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/accelerate" target="_blank" rel="noopener">Accelerate</a><blockquote><p>Make large-scale mathematical computations and image calculations, optimized for high performance.</p></blockquote></li></ul><h2 id="WWDC-2013"><a href="#WWDC-2013" class="headerlink" title="WWDC 2013"></a>WWDC 2013</h2><ul><li>iOS 7, macOS Mavericks 10.9</li><li><a href="https://developer.apple.com/documentation/multipeerconnectivity" target="_blank" rel="noopener">MultipeerConnectivity</a><blockquote><p>Support peer-to-peer connectivity and the discovery of nearby devices.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/spritekit" target="_blank" rel="noopener">SpriteKit</a><blockquote><p>Create 2D sprite-based games using an optimized animation system, physics simulation, and event-handling support.</p></blockquote></li><li><a href="https://www.apple.com/researchkit/" target="_blank" rel="noopener">ResearchKit</a> <blockquote><p>ResearchKit makes it easier to enroll participants and conduct studies</p></blockquote></li><li><a href="https://developer.apple.com/documentation/uikit/animation_and_haptics/uikit_dynamics" target="_blank" rel="noopener">UIKit Dynamics</a><blockquote><p>Apply physics-based animations to your views.</p></blockquote></li></ul><h2 id="WWDC-2014"><a href="#WWDC-2014" class="headerlink" title="WWDC 2014"></a>WWDC 2014</h2><ul><li>iOS 8, macOS Yosemite 10.10</li><li><a href="https://developer.apple.com/documentation/photos" target="_blank" rel="noopener">Photos</a><blockquote><p>Work with image and video assets managed by the Photos app, including those from iCloud Photo Library and Live Photos. Fetch and cache full-sized assets or thumbnails asynchronously, revise content, and sync revisions to multiple devices.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/metal" target="_blank" rel="noopener">Metal</a><blockquote><p>Render advanced 3D graphics and perform data-parallel computations using the GPU.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/scenekit" target="_blank" rel="noopener">SceneKit</a><blockquote><p>Create 3D games and add 3D content to apps using high-level scene descriptions. Easily add animations, physics simulation, particle effects, and realistic physically based rendering.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/healthkit" target="_blank" rel="noopener">HealthKit</a><blockquote><p>Share health and fitness data with other apps, while maintaining the user’s privacy and control over their data.</p></blockquote></li></ul><h2 id="WWDC-2015"><a href="#WWDC-2015" class="headerlink" title="WWDC 2015"></a>WWDC 2015</h2><ul><li>iOS 9, macOS El Capitan 10.11, watchOS 2</li><li><a href="https://developer.apple.com/documentation/watchkit" target="_blank" rel="noopener">WatchKit</a> <blockquote><p>Construct and manage your app’s user interface for watchOS. Respond to events generated by interface objects, gestures, and the system.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/gameplaykit" target="_blank" rel="noopener">GameplayKit</a><blockquote><p>Architect and organize your game logic. Incorporate common gameplay behaviors such as random number generation, artificial intelligence, pathfinding, and agent behavior.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/contacts" target="_blank" rel="noopener">Contacts</a><blockquote><p>Access the user’s contacts and format and localize contact information.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/corespotlight" target="_blank" rel="noopener">Core Spotlight</a><blockquote><p>Index the content in apps that handle persistent user data, such as documents and photos, and let users deep-link to it from Spotlight and Safari search results. Add, update, and delete searchable app content.</p></blockquote></li></ul><h2 id="WWDC-2016"><a href="#WWDC-2016" class="headerlink" title="WWDC 2016"></a>WWDC 2016</h2><ul><li>iOS 10, macOS Sierra 10.12, watchOS 3</li><li><a href="https://developer.apple.com/documentation/homekit" target="_blank" rel="noopener">HomeKit</a><blockquote><p>Communicate with, configure, and control home automation accessories, including complex camera-type accessories.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/replaykit" target="_blank" rel="noopener">ReplayKit</a><blockquote><p>Record or stream video from the screen, and audio from the app and microphone</p></blockquote></li><li><a href="https://developer.apple.com/documentation/sirikit" target="_blank" rel="noopener">SiriKit</a><blockquote><p>Handle user requests for your app’s services that originate from Siri or Maps.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/usernotificationsui" target="_blank" rel="noopener">UserNotificationsUI</a><blockquote><p>Customize the interface used to display local and remote notifications.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/speech" target="_blank" rel="noopener">Speech</a><blockquote><p>With the user’s permission, get recognition of live and prerecorded speech, and receive transcriptions, alternative interpretations, and confidence levels</p></blockquote></li></ul><h2 id="WWDC-2017"><a href="#WWDC-2017" class="headerlink" title="WWDC 2017"></a>WWDC 2017</h2><ul><li>iOS 11, macOS High Sierra 10.13, watchOS 4</li><li><a href="https://developer.apple.com/documentation/arkit" target="_blank" rel="noopener">ARKit</a> 🚀 <blockquote><p>Integrate iOS device camera and motion features to produce augmented reality experiences in your app or game.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/vision" target="_blank" rel="noopener">Vision</a>  🚀 <blockquote><p>Apply high-performance image analysis and computer vision techniques to identify faces, detect features, and classify scenes in images and video.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/coreml" target="_blank" rel="noopener">Core ML</a> 🚀 <blockquote><p>Integrate machine learning models into your app.</p></blockquote></li><li><a href="https://developer.apple.com/musickit/" target="_blank" rel="noopener">MusicKit</a><blockquote><p>MusicKit on iOS lets users play Apple Music and their local music library natively from your apps and games.</p></blockquote></li><li><a href="https://developer.apple.com/documentation/pdfkit" target="_blank" rel="noopener">PDFKit</a><blockquote><p>Display and manipulate PDF documents in your applications.</p></blockquote></li><li><a href="https://developer.apple.com/ios/drag-and-drop/" target="_blank" rel="noopener">Drag and Drop</a><blockquote><p>Bring drag and drop to your app by using interaction APIs with your views.</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to test for viewDidLoad in iOS</title>
      <link href="/blog/How-to-test-for-viewDidLoad-in-iOS/"/>
      <url>/blog/How-to-test-for-viewDidLoad-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/52" target="_blank" rel="noopener">#52</a></strong></p><p>Suppose we have the following view controller</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    view.backgroundColor = .white</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get-to-know-viewDidLoad"><a href="#Get-to-know-viewDidLoad" class="headerlink" title="Get to know viewDidLoad"></a>Get to know <code>viewDidLoad</code></h3><p>We know that <code>viewDidLoad</code> is called when view is created the first time. So in the the Unit Test, if you use <code>viewDidLoad</code> to trigger, you will fall into a trap</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSetup</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> controller = <span class="type">ListController</span>()</span><br><span class="line">  controller.viewDidLoad()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Why-is-viewDidLoad-called-twice"><a href="#Why-is-viewDidLoad-called-twice" class="headerlink" title="Why is viewDidLoad called twice?"></a>Why is <code>viewDidLoad</code> called twice?</h3><ul><li>It is called once in your test</li><li>And in your <code>viewDidLoad</code> method, you access <code>view</code>, which is created the first time, hence it will trigger <code>viewDidLoad</code> again</li></ul><h3 id="The-correct-way"><a href="#The-correct-way" class="headerlink" title="The correct way"></a>The correct way</h3><p>The best practice is not to trigger events yourself, but do something to make event happen. In Unit Test, we just access <code>view</code> to trigger <code>viewDidLoad</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSetup</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> controller = <span class="type">ListController</span>()</span><br><span class="line">  <span class="keyword">let</span> <span class="number">_</span> = controller.view</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Structuring apps with RxSwift</title>
      <link href="/blog/Structuring-apps-with-RxSwift/"/>
      <url>/blog/Structuring-apps-with-RxSwift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/51" target="_blank" rel="noopener">#51</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Developing Sketch plugins</title>
      <link href="/blog/Developing-Sketch-plugins/"/>
      <url>/blog/Developing-Sketch-plugins/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/50" target="_blank" rel="noopener">#50</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to initialize Enums With Optionals in Swift</title>
      <link href="/blog/How-to-initialize-Enums-With-Optionals-in-Swift/"/>
      <url>/blog/How-to-initialize-Enums-With-Optionals-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/49" target="_blank" rel="noopener">#49</a></strong></p><p>Today someone showed me <a href="https://medium.com/@_Easy_E/initializing-enums-with-optionals-in-swift-bf246ce20e4c" target="_blank" rel="noopener">https://medium.com/@_Easy_E/initializing-enums-with-optionals-in-swift-bf246ce20e4c</a> which tries to init enum with optional value.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Planet</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> mercury</span><br><span class="line">  <span class="keyword">case</span> venus</span><br><span class="line">  <span class="keyword">case</span> earth</span><br><span class="line">  <span class="keyword">case</span> mars</span><br><span class="line">  <span class="keyword">case</span> jupiter</span><br><span class="line">  <span class="keyword">case</span> saturn</span><br><span class="line">  <span class="keyword">case</span> uranus</span><br><span class="line">  <span class="keyword">case</span> neptune</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">RawRepresentable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">init</span>?(optionalValue: <span class="type">RawValue?</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> value = optionalValue <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(rawValue: value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name: <span class="type">String?</span> = <span class="string">"venus"</span></span><br><span class="line"><span class="keyword">let</span> planet = <span class="type">Planet</span>(optionalValue: name)</span><br></pre></td></tr></table></figure><p>One interesting fact about optional, is that it is a monad, so it has <code>map</code> and <code>flatMap</code>. Since <code>enum</code> <code>init(rawValue:)</code> returns an optional, we need to use <code>flatMap</code>. It looks like this</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="type">String?</span> = <span class="string">"venus"</span></span><br><span class="line"><span class="keyword">let</span> planet = name.flatMap(&#123; <span class="type">Planet</span>(rawValue: $<span class="number">0</span>) &#125;)</span><br></pre></td></tr></table></figure><p>🎉 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to run UI Test with system alert in iOS</title>
      <link href="/blog/How-to-run-UI-Test-with-system-alert-in-iOS/"/>
      <url>/blog/How-to-run-UI-Test-with-system-alert-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/48" target="_blank" rel="noopener">#48</a></strong></p><p>Continue my post <a href="https://github.com/onmyway133/blog/issues/45" target="_blank" rel="noopener">https://github.com/onmyway133/blog/issues/45</a>. When you work with features, like map view, you mostly need permissions, and in UITests you need to test for system alerts.</p><h3 id="Add-interruption-monitor"><a href="#Add-interruption-monitor" class="headerlink" title="Add interruption monitor"></a>Add interruption monitor</h3><p>This is the code. Note that you need to call <code>app.tap()</code> to interact with the app again, in order for interruption monitor to work</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addUIInterruptionMonitor(withDescription: <span class="string">"Location permission"</span>, handler: &#123; alert <span class="keyword">in</span></span><br><span class="line">  alert.buttons[<span class="string">"Allow"</span>].tap()</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.tap()</span><br></pre></td></tr></table></figure><p>Note that you don’t always need to handle the returned value of <code>addUIInterruptionMonitor</code></p><h3 id="Only-tap-when-needed"><a href="#Only-tap-when-needed" class="headerlink" title="Only tap when needed"></a>Only tap when needed</h3><p>One problem with this approach is that when there is no system alert (you already touched to allow before), then <code>app.tap()</code> will tap on your main screen. In my app which uses map view, it will tap on some pins, which will present another screen, which is not correct.</p><p>Since <code>app.alerts</code> does not work, my 2nd attempt is to check for <code>app.windows.count</code>. Unfortunately, it always shows 5 windows whether alert is showing or not. I know 1 is for main window, 1 is for status bar, the other 3 windows I have no idea.</p><p>The 3rd attempt is to check that underlying elements (behind alert) can’t be touched, which is to use <code>isHittable</code>. This property does not work, it always returns <code>true</code></p><h3 id="Check-the-content"><a href="#Check-the-content" class="headerlink" title="Check the content"></a>Check the content</h3><p>This uses the assumption that we only tests for when user hits <code>Allow</code> button. So only if alert is answered with <code>Allow</code>, then we have permission to display our content. For my map view, I check that there are some pins on the map. See <a href="https://github.com/onmyway133/blog/issues/45" target="_blank" rel="noopener">https://github.com/onmyway133/blog/issues/45</a> on how to mock location and identify the pins</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if app.otherElements.matching(identifier: &quot;myPin&quot;).count == 0 &#123;</span><br><span class="line">  app.tap()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="When-there-is-no-permission"><a href="#When-there-is-no-permission" class="headerlink" title="When there is no permission"></a>When there is no permission</h3><p>So how can we test that user has denied your request? In my map view, if user does not allow location permission, I show a popup asking user to go to Settings and change it, otherwise, they can’t interact with the map.</p><p>I don’t know how to toggle location in <code>Privacy</code> in <code>Settings</code>, maybe <code>XCUISiriService</code> can help. But 1 thing we can do is to mock the application</p><p>Before you launch the app in <code>UITests</code>, add some arguments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.launchArguments.append(&quot;--UITests-mockNoLocationPermission&quot;)</span><br></pre></td></tr></table></figure><p>and in the app, we need to check for this <code>arguments</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkLocationPermission</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="type">CommandLine</span>.arguments.<span class="built_in">contains</span>(<span class="string">"--UITests-mockNoLocationPermission"</span>) &#123;</span><br><span class="line">    showNoLocationPopupAndAskUserToEnableInSettings()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s it. In <code>UITests</code>, we can test whether that <code>no location permission popup</code> appears or not</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to master Auto Layout Visual Format Language</title>
      <link href="/blog/How-to-master-Auto-Layout-Visual-Format-Language/"/>
      <url>/blog/How-to-master-Auto-Layout-Visual-Format-Language/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/47" target="_blank" rel="noopener">#47</a></strong></p><p>No, you don’t</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Getting started with Swift</title>
      <link href="/blog/Getting-started-with-Swift/"/>
      <url>/blog/Getting-started-with-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/46" target="_blank" rel="noopener">#46</a></strong></p><p>Hi, here are some materials I found that are useful for learning Swift and iOS</p><ul><li><a href="https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11" target="_blank" rel="noopener">App Development with Swift</a></li><li><a href="https://www.hackingwithswift.com/read" target="_blank" rel="noopener">Hacking with Swift</a></li><li><a href="https://swifteducation.github.io/teaching_app_development_with_swift/" target="_blank" rel="noopener">Teaching App Development with Swift</a></li><li><a href="http://guides.codepath.com/ios" target="_blank" rel="noopener">CodePath iOS Guides</a></li><li><a href="https://github.com/nettlep/learn-swift" target="_blank" rel="noopener">learn-swift</a></li><li><a href="https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html" target="_blank" rel="noopener">About iOS App Architecture</a></li><li><a href="https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" target="_blank" rel="noopener">Start Developing iOS Apps (Swift)</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to run UITests with map view in iOS</title>
      <link href="/blog/How-to-run-UITests-with-map-view-in-iOS/"/>
      <url>/blog/How-to-run-UITests-with-map-view-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/45" target="_blank" rel="noopener">#45</a></strong></p><h2 id="Mock-a-location"><a href="#Mock-a-location" class="headerlink" title="Mock a location"></a>Mock a location</h2><p>You should mock a location to ensure reliable test</p><h3 id="Create-the-gpx-file"><a href="#Create-the-gpx-file" class="headerlink" title="Create the gpx file"></a>Create the gpx file</h3><p>Go to <code>Xcode -&gt; File -&gt; New -&gt; GPX File</code></p><p><img src="https://cloud.githubusercontent.com/assets/2284279/26673256/8472a1a8-46bc-11e7-95ce-1931032c97bb.png" alt="gpx"></p><p>It looks like</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gpx</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">creator</span>=<span class="string">"Xcode"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wpt</span> <span class="attr">lat</span>=<span class="string">"59.913590"</span> <span class="attr">lon</span>=<span class="string">"10.733750"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Oslo S<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-05-31T14:55:37Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">wpt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wpt</span> <span class="attr">lat</span>=<span class="string">"59.913590"</span> <span class="attr">lon</span>=<span class="string">"10.733750"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Oslo S<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span>&gt;</span>2017-05-31T14:55:40Z<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">wpt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gpx</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>gpx</code> file is very powerful, as it allows you to specify a route with different movement speed.</p><blockquote><p>Provide one or more waypoints containing a latitude/longitude pair. If you provide one<br>waypoint, Xcode will simulate that specific location. If you provide multiple waypoints,<br>Xcode will simulate a route visiting each waypoint.</p></blockquote><blockquote><p>Optionally provide a time element for each waypoint. Xcode will interpolate movement<br>at a rate of speed based on the time elapsed between each waypoint. If you do not provide<br>a time element, then Xcode will use a fixed rate of speed. Waypoints must be sorted by time in ascending order.</p></blockquote><h3 id="Use-the-gpx-file"><a href="#Use-the-gpx-file" class="headerlink" title="Use the gpx file"></a>Use the gpx file</h3><ul><li>Declare the <code>gpx</code> file in <strong>app target</strong>, not UITests target. Go to your <code>app scheme -&gt; Run -&gt; Options</code></li></ul><p><img src="https://cloud.githubusercontent.com/assets/2284279/26673340/cfa90716-46bc-11e7-92b3-d1ee932090f1.png" alt="location"></p><ul><li>Go to <code>Simulator -&gt; Debug -&gt; Location -&gt; Custom Location</code> and select that same location, just to make sure. It does not need to be the same, but I see that without <code>Custom Location</code>, it does not work in <code>UITests</code></li></ul><h2 id="Test-that-you’re-near-the-initial-location"><a href="#Test-that-you’re-near-the-initial-location" class="headerlink" title="Test that you’re near the initial location"></a>Test that you’re near the initial location</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = app.maps.element(boundBy: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"label CONTAINS 'City Hall'"</span>)</span><br><span class="line"><span class="keyword">let</span> cityHall = <span class="built_in">map</span>.otherElements.matching(predicate).element(boundBy: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait for the map to finish loading and zooming</span></span><br><span class="line">wait(<span class="keyword">for</span>: cityHall, timeout: <span class="number">2</span>)</span><br><span class="line"><span class="type">XCTAssertTrue</span>(cityHall.exists)</span><br></pre></td></tr></table></figure><p>The <code>wait</code> function is from <a href="https://github.com/onmyway133/blog/issues/44" target="_blank" rel="noopener">https://github.com/onmyway133/blog/issues/44</a></p><h2 id="Test-that-you-can-interact-with-your-custom-pin"><a href="#Test-that-you-can-interact-with-your-custom-pin" class="headerlink" title="Test that you can interact with your custom pin"></a>Test that you can interact with your custom pin</h2><p>You need to specify <code>accessibilityIdentifier</code>, like</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPin</span>: <span class="title">MKAnnotationView</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didMoveToSuperview</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.didMoveToSuperview()</span><br><span class="line"></span><br><span class="line">    accessibilityIdentifier = <span class="string">"myPin"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and then query for that pin. Not that it is not inside <code>map</code>, it is inside <code>app</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pin = app.otherElements.matching(identifier: <span class="string">"myPin"</span>).element(boundBy: <span class="number">0</span>)</span><br><span class="line"><span class="type">XCTAssertTrue</span>(pin.exists)</span><br></pre></td></tr></table></figure><h2 id="You-should-use-accessibilityIdentifier"><a href="#You-should-use-accessibilityIdentifier" class="headerlink" title="You should use accessibilityIdentifier"></a>You should use <code>accessibilityIdentifier</code></h2><p><code>accessibilityIdentifier</code> is from <code>UIAccessibilityIdentification</code> protocol. You should not use <code>accessibilityLabel</code>, see <a href="https://github.com/kif-framework/KIF/issues/243" target="_blank" rel="noopener">https://github.com/kif-framework/KIF/issues/243</a></p><blockquote><p>Given that accessibilityLabel is an outwardly-facing string that is actually used by accessibility screen readers (and should be localized to the device user’s language), Apple now provides an alternate property (iOS 5+) that is specifically intended for UI Automation purposes</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to run UI Test with Facebook login</title>
      <link href="/blog/How-to-run-UI-Test-with-Facebook-login/"/>
      <url>/blog/How-to-run-UI-Test-with-Facebook-login/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/44" target="_blank" rel="noopener">#44</a></strong></p><p>Today I’m trying to run some UITest on my app, which uses Facebook login. And here are some of my notes on it.</p><div align="center"><img src="https://cloud.githubusercontent.com/assets/2284279/26590229/49c0c782-455a-11e7-876d-bf4bec92fdea.gif" width="300" height="510"></div><h3 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h3><ul><li>The challenges with Facebook is it uses <code>Safari controller</code>, we we deal mostly with <code>web view</code> for now. Starting from iOS 9+, Facebook decided to use <code>safari</code> instead of <code>native facebook app</code> to avoid app switching. You can read the detail here <a href="https://developers.facebook.com/blog/post/2015/10/29/Facebook-Login-iOS9/" target="_blank" rel="noopener">Building the Best Facebook Login Experience for People on iOS 9</a></li><li>It does not have wanted <code>accessibilityIdentifier</code> or <code>accessibilityLabel</code></li><li>The webview content may change in the future 😸 </li></ul><h3 id="Create-a-Facebook-test-user"><a href="#Create-a-Facebook-test-user" class="headerlink" title="Create a Facebook test user"></a>Create a Facebook test user</h3><p>Luckily, you don’t have to create your own Facebook user to test. Facebook supports test users that you can manage permissions and friends, very handy</p><p><img src="https://cloud.githubusercontent.com/assets/2284279/26590445/e032fe1a-455a-11e7-8e6d-84dce3b21152.png" alt="test user"></p><p>When creating the test user, you have the option to select language. That will be the displayed language in Safari web view. I choose <code>Norwegian</code> 🇳🇴  for now</p><p><img src="https://cloud.githubusercontent.com/assets/2284279/26590675/8168357a-455b-11e7-831d-0df899ea51c5.png" alt="language"></p><h3 id="Click-the-login-button-and-show-Facebook-login"><a href="#Click-the-login-button-and-show-Facebook-login" class="headerlink" title="Click the login button and show Facebook login"></a>Click the login button and show Facebook login</h3><p>Here we use the default <code>FBSDKLoginButton</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showFacebookLoginFormButton: <span class="type">XCUIElement</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> buttons[<span class="string">"Continue with Facebook"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And then tap it</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.showFacebookLoginFormButton.tap()</span><br></pre></td></tr></table></figure><h3 id="Check-login-status"><a href="#Check-login-status" class="headerlink" title="Check login status"></a>Check login status</h3><p>When going to safari Facebook form, user may have already logged in or not. So we need to handle these 2 cases. When user has logged in, Facebook will say something like “you have already logged in” or the <code>OK</code> button.</p><p>The advice here is to put breakpoint and <code>po app.staticTexts</code>, <code>po app.buttons</code> to see which UI elements are at a certain point.</p><p>You can check for the static text, or simply just the <code>OK</code> button</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAlreadyLoggedInSafari: <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> buttons[<span class="string">"OK"</span>].exists || staticTexts[<span class="string">"Du har allerede godkjent Blue Sea."</span>].exists</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wait-and-refresh"><a href="#Wait-and-refresh" class="headerlink" title="Wait and refresh"></a>Wait and refresh</h3><p>But Facebook form is a webview, so its content is a bit dynamic. And UITest seems to cache content for fast query, so before checking <code>staticTexts</code>, we need to <code>wait</code> and <code>refresh the cache</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.clearCachedStaticTexts()</span><br></pre></td></tr></table></figure><p>This is the <code>wait</code> function</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">wait</span><span class="params">(<span class="keyword">for</span> duration: TimeInterval)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> waitExpectation = expectation(description: <span class="string">"Waiting"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> when = <span class="type">DispatchTime</span>.now() + duration</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: when) &#123;</span><br><span class="line">      waitExpectation.fulfill()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We use a buffer here to avoid flakiness with Timer on CI</span></span><br><span class="line">    waitForExpectations(timeout: duration + <span class="number">0.5</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wait-for-element-to-appear"><a href="#Wait-for-element-to-appear" class="headerlink" title="Wait for element to appear"></a>Wait for element to appear</h3><p>But a more solid approach would be to wait for element to appear. For Facebook login form, they should display a <code>Facebook</code> label after loading. So we should wait for this element</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Wait for element to appear</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">wait</span><span class="params">(<span class="keyword">for</span> element: XCUIElement, timeout duration: TimeInterval)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"exists == true"</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = expectation(<span class="keyword">for</span>: predicate, evaluatedWith: element, handler: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here we don't need to call `waitExpectation.fulfill()`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// We use a buffer here to avoid flakiness with Timer on CI</span></span><br><span class="line">    waitForExpectations(timeout: duration + <span class="number">0.5</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And call this before you do any further inspection on elements in Facebook login form</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wait(<span class="keyword">for</span>: app.staticTexts[<span class="string">"Facebook"</span>], timeout: <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="If-user-is-logged-in"><a href="#If-user-is-logged-in" class="headerlink" title="If user is logged in"></a>If user is logged in</h3><p>After login, my app shows the main controller with a map view inside. So a basic test would be to check the existence of that map</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> app.isAlreadyLoggedInSafari &#123;</span><br><span class="line">  app.okButton.tap()</span><br><span class="line"></span><br><span class="line">  handleLocationPermission()</span><br><span class="line">  <span class="comment">// Check for the map</span></span><br><span class="line">  <span class="type">XCTAssertTrue</span>(app.maps.element(boundBy: <span class="number">0</span>).exists)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Handle-interruption"><a href="#Handle-interruption" class="headerlink" title="Handle interruption"></a>Handle interruption</h3><p>You know that when showing the map with location, <code>Core Location</code> will ask for permission. So we need to handle that interruption as well. You need to ensure to call it early before the alert happens</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">handleLocationPermission</span><span class="params">()</span></span> &#123;</span><br><span class="line">  addUIInterruptionMonitor(withDescription: <span class="string">"Location permission"</span>, handler: &#123; alert <span class="keyword">in</span></span><br><span class="line">    alert.buttons.element(boundBy: <span class="number">1</span>).tap()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is another problem, this <code>monitor</code> won’t be called. So the workaround is to call <code>app.tap()</code> again when the alert will happen. In my case, I call <code>app.tap()</code> when my <code>map</code> has been shown for 1,2 seconds, just to make sure <code>app.tap()</code> is called after alert is shown</p><p>For a more detailed guide, please read <a href="https://github.com/onmyway133/blog/issues/48" target="_blank" rel="noopener">https://github.com/onmyway133/blog/issues/48</a></p><h3 id="If-user-is-not-logged-in"><a href="#If-user-is-not-logged-in" class="headerlink" title="If user is not logged in"></a>If user is not logged in</h3><p>In this case, we need to fill in email and password. You can take a look at the <code>The full source code</code> section below. When things don’t work or <code>po</code> does not show you the elements you needed, it’s probably because of caching or you need to wait until dynamic content finishes rendering. </p><p>You need to wait for element to appear</p><h3 id="Tap-on-the-text-field"><a href="#Tap-on-the-text-field" class="headerlink" title="Tap on the text field"></a>Tap on the text field</h3><p>You may get <code>Neither element nor any descendant has keyboard focus</code>, here are the workaround</p><ul><li>If you test on Simulator, make sure <code>Simulator -&gt; Hardware -&gt; Keyboard -&gt; Connect Hardware Keyboard</code> is not checked</li><li><code>wait</code> a bit after tap</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.emailTextField.tap()</span><br></pre></td></tr></table></figure><h3 id="Clear-all-the-text"><a href="#Clear-all-the-text" class="headerlink" title="Clear all the text"></a>Clear all the text</h3><p>The idea is to move the caret to the end of the textField, then apply each <code>delete key</code> for each character, then type the next text</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCUIElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">deleteAllText</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> string = value <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lowerRightCorner = coordinate(withNormalizedOffset: <span class="type">CGVector</span>(dx: <span class="number">0.9</span>, dy: <span class="number">0.9</span>))</span><br><span class="line">    lowerRightCorner.tap()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> deletes = string.characters.<span class="built_in">map</span>(&#123; <span class="number">_</span> <span class="keyword">in</span> <span class="type">XCUIKeyboardKeyDelete</span> &#125;).joined(separator: <span class="string">""</span>)</span><br><span class="line">    typeText(deletes)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Change-language"><a href="#Change-language" class="headerlink" title="Change language"></a>Change language</h3><p>For my case, I want to test in Norwegian, so we need to find the <code>Norwegian</code> option and tap on that. It is identified as <code>static text</code> by <code>UI Test</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> norwegianText: <span class="type">XCUIElement</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> staticTexts[<span class="string">"Norsk (bokmål)"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wait(<span class="keyword">for</span>: app.norwegianText, timeout: <span class="number">1</span>)</span><br><span class="line">app.norwegianText.tap()</span><br></pre></td></tr></table></figure><h3 id="The-email-text-field"><a href="#The-email-text-field" class="headerlink" title="The email text field"></a>The email text field</h3><p>Luckily, email text field is detected by <code>UI Test</code> as <code>text field</code> element, so we can query for that. This uses predicate</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emailTextField: <span class="type">XCUIElement</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"placeholderValue == %@"</span>, <span class="string">"E-post eller mobil"</span>)</span><br><span class="line">  <span class="keyword">return</span> textFields.element(matching: predicate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-password-text-field"><a href="#The-password-text-field" class="headerlink" title="The password text field"></a>The password text field</h3><p><code>UI Test</code> can’t seem to identify the password text field, so we need to search for it by <code>coordinate</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> passwordCoordinate: <span class="type">XCUICoordinate</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> vector = <span class="type">CGVector</span>(dx: <span class="number">1</span>, dy: <span class="number">1.5</span>)</span><br><span class="line">  <span class="keyword">return</span> emailTextField.coordinate(withNormalizedOffset: vector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is the document for <code>func coordinate(withNormalizedOffset normalizedOffset: CGVector) -&gt; XCUICoordinate</code></p><blockquote><p>Creates and returns a new coordinate with a normalized offset.<br>The coordinate’s screen point is computed by adding normalizedOffset multiplied by the size of the element’s frame to the origin of the element’s frame.</p></blockquote><p>Then type the password</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.passwordCoordinate.tap()</span><br><span class="line">app.typeText(<span class="string">"My password"</span>)</span><br></pre></td></tr></table></figure><p>We should not use <code>app.passwordCoordinate.referencedElement</code> because it will point to email text field ❗️ 😢 </p><h3 id="Run-that-test-again"><a href="#Run-that-test-again" class="headerlink" title="Run that test again"></a>Run that test again</h3><p>Go to <code>Xcode -&gt; Product -&gt; Perform Actions -&gt; Test Again</code> to run the previous test again</p><p><img src="https://cloud.githubusercontent.com/assets/2284279/26591784/015636a8-455f-11e7-9b37-c02cc7a072b2.png" alt="again"></p><h3 id="The-full-source-code"><a href="#The-full-source-code" class="headerlink" title="The full source code"></a>The full source code</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginTests</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> app: <span class="type">XCUIApplication!</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">testLogin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    continueAfterFailure = <span class="literal">false</span></span><br><span class="line">    app = <span class="type">XCUIApplication</span>()</span><br><span class="line">    app.launch()</span><br><span class="line"></span><br><span class="line">    passLogin()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LoginTests</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">passLogin</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Tap login</span></span><br><span class="line">    app.showFacebookLoginFormButton.tap()</span><br><span class="line">    wait(<span class="keyword">for</span>: app.staticTexts[<span class="string">"Facebook"</span>], timeout: <span class="number">5</span>) <span class="comment">// This requires a high timeout</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">// There may be location permission popup when showing map</span></span><br><span class="line">    handleLocationPermission()    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> app.isAlreadyLoggedInSafari &#123;</span><br><span class="line">      app.okButton.tap()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Show map</span></span><br><span class="line">      <span class="keyword">let</span> <span class="built_in">map</span> = app.maps.element(boundBy: <span class="number">0</span>)</span><br><span class="line">      wait(<span class="keyword">for</span>: <span class="built_in">map</span>, timeout: <span class="number">2</span>)</span><br><span class="line">      <span class="type">XCTAssertTrue</span>(<span class="built_in">map</span>.exists)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Need to interact with the app for interruption monitor to work</span></span><br><span class="line">      app.tap()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Choose norsk</span></span><br><span class="line">     wait(<span class="keyword">for</span>: app.norwegianText, timeout: <span class="number">1</span>)</span><br><span class="line">      app.norwegianText.tap()</span><br><span class="line"></span><br><span class="line">      app.emailTextField.tap()</span><br><span class="line">      app.emailTextField.deleteAllText()</span><br><span class="line">      app.emailTextField.typeText(<span class="string">"mujyhwhbby_1496155833@tfbnw.net"</span>)</span><br><span class="line"></span><br><span class="line">      app.passwordCoordinate.tap()</span><br><span class="line">      app.typeText(<span class="string">"Bob Alageaiecghfb Sharpeman"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// login</span></span><br><span class="line">      app.facebookLoginButton.tap()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// press OK</span></span><br><span class="line">      app.okButton.tap()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Show map</span></span><br><span class="line">      <span class="keyword">let</span> <span class="built_in">map</span> = app.maps.element(boundBy: <span class="number">0</span>)</span><br><span class="line">      wait(<span class="keyword">for</span>: <span class="built_in">map</span>, timeout: <span class="number">2</span>)</span><br><span class="line">      <span class="type">XCTAssertTrue</span>(<span class="built_in">map</span>.exists)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Need to interact with the app for interruption monitor to work</span></span><br><span class="line">      app.tap()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">handleLocationPermission</span><span class="params">()</span></span> &#123;</span><br><span class="line">    addUIInterruptionMonitor(withDescription: <span class="string">"Location permission"</span>, handler: &#123; alert <span class="keyword">in</span></span><br><span class="line">      alert.buttons.element(boundBy: <span class="number">1</span>).tap()</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">extension</span> <span class="title">XCUIApplication</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> showFacebookLoginFormButton: <span class="type">XCUIElement</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> buttons[<span class="string">"Continue with Facebook"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> isAlreadyLoggedInSafari: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> buttons[<span class="string">"OK"</span>].exists || staticTexts[<span class="string">"Du har allerede godkjent Blue Sea."</span>].exists</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> okButton: <span class="type">XCUIElement</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> buttons[<span class="string">"OK"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> norwegianText: <span class="type">XCUIElement</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> staticTexts[<span class="string">"Norsk (bokmål)"</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> emailTextField: <span class="type">XCUIElement</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"placeholderValue == %@"</span>, <span class="string">"E-post eller mobil"</span>)</span><br><span class="line">    <span class="keyword">return</span> textFields.element(matching: predicate)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> passwordCoordinate: <span class="type">XCUICoordinate</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> vector = <span class="type">CGVector</span>(dx: <span class="number">1</span>, dy: <span class="number">1.5</span>)</span><br><span class="line">    <span class="keyword">return</span> emailTextField.coordinate(withNormalizedOffset: vector)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> facebookLoginButton: <span class="type">XCUIElement</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> buttons[<span class="string">"Logg inn"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">wait</span><span class="params">(<span class="keyword">for</span> duration: TimeInterval)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> waitExpectation = expectation(description: <span class="string">"Waiting"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> when = <span class="type">DispatchTime</span>.now() + duration</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: when) &#123;</span><br><span class="line">      waitExpectation.fulfill()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We use a buffer here to avoid flakiness with Timer on CI</span></span><br><span class="line">    waitForExpectations(timeout: duration + <span class="number">0.5</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Wait for element to appear</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">wait</span><span class="params">(<span class="keyword">for</span> element: XCUIElement, timeout duration: TimeInterval)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"exists == true"</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = expectation(<span class="keyword">for</span>: predicate, evaluatedWith: element, handler: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We use a buffer here to avoid flakiness with Timer on CI</span></span><br><span class="line">    waitForExpectations(timeout: duration + <span class="number">0.5</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCUIApplication</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Because of "Use cached accessibility hierarchy"</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">clearCachedStaticTexts</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = staticTexts.<span class="built_in">count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">clearCachedTextFields</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = textFields.<span class="built_in">count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">clearCachedTextViews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = textViews.<span class="built_in">count</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCUIElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">deleteAllText</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> string = value <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lowerRightCorner = coordinate(withNormalizedOffset: <span class="type">CGVector</span>(dx: <span class="number">0.9</span>, dy: <span class="number">0.9</span>))</span><br><span class="line">    lowerRightCorner.tap()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> deletes = string.characters.<span class="built_in">map</span>(&#123; <span class="number">_</span> <span class="keyword">in</span> <span class="type">XCUIKeyboardKeyDelete</span> &#125;).joined(separator: <span class="string">""</span>)</span><br><span class="line">    typeText(deletes)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h3><p>I found these guides to cover many aspects of UITests, worth taking a look</p><ul><li><a href="https://github.com/joemasilotti/UI-Testing-Cheat-Sheet" target="_blank" rel="noopener">UI-Testing-Cheat-Sheet</a></li><li><a href="http://samwize.com/2016/02/28/everything-about-xcode-ui-testing-snapshot/" target="_blank" rel="noopener">Everything About Xcode UI Testing</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Debugging iOS app</title>
      <link href="/blog/Debugging-iOS-app/"/>
      <url>/blog/Debugging-iOS-app/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/43" target="_blank" rel="noopener">#43</a></strong></p><ul><li><a href="http://ryanipete.com/blog/ios/swift/objective-c/uidebugginginformationoverlay/" target="_blank" rel="noopener">UIDebuggingInformationOverlay</a></li><li><a href="https://github.com/Flipboard/FLEX" target="_blank" rel="noopener">FLEX</a> An in-app debugging and exploration tool for iOS</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Some investment stories</title>
      <link href="/blog/Some-investment-stories/"/>
      <url>/blog/Some-investment-stories/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/42" target="_blank" rel="noopener">#42</a></strong></p><p>We will never know how life will go</p><ul><li><a href="http://www.ibtimes.co.uk/apple-40-spare-thought-co-founder-ronald-wayne-steve-jobs-pal-who-threw-away-62bn-1552467" target="_blank" rel="noopener">Apple at 40: Spare a thought for co-founder Ronald Wayne, Steve Jobs’ pal who threw away $62bn</a></li><li><a href="http://www.businessinsider.com/bitcoin-pizza-day-passes-2000-20-million-2017-5?r=UK&IR=T" target="_blank" rel="noopener">Someone in 2010 bought 2 pizzas with 10,000 bitcoins — which today would be worth $20 million</a></li><li><a href="https://bits.blogs.nytimes.com/2012/02/07/facebook-graffiti-artist-could-be-worth-500-million/?_r=0" target="_blank" rel="noopener">Facebook Graffiti Artist Could be Worth $500 Million</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use assertionFailure and Optimization Level in iOS</title>
      <link href="/blog/How-to-use-assertionFailure-and-Optimization-Level-in-iOS/"/>
      <url>/blog/How-to-use-assertionFailure-and-Optimization-Level-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/39" target="_blank" rel="noopener">#39</a></strong></p><p>We used to use <code>assertionFailure</code> to mark programmer error or something that shouldn’t happen. </p><p>From <a href="https://developer.apple.com/reference/swift/1539616-assertionfailure" target="_blank" rel="noopener">assertionFailure</a></p><blockquote><p>Indicates that an internal sanity check failed.</p></blockquote><blockquote><p>Use this function to stop the program, without impacting the performance of shipping code, when control flow is not expected to reach the call—for example, in the default case of a switch where you have knowledge that one of the other cases must be satisfied. To protect code from invalid usage in Release builds, see preconditionFailure(_:file:line:).</p><ul><li>In playgrounds and -Onone builds (the default for Xcode’s Debug configuration), stop program execution in a debuggable state after printing message.</li><li>In -O builds, has no effect.</li><li>In -Ounchecked builds, the optimizer may assume that this function is never called. Failure to satisfy that assumption is a serious programming error.</li></ul></blockquote><p>So go to your target settings, and check <code>Optimization Level</code>, make sure it is not <code>-Onone</code> for release configuration. </p><p>The difference between debug and release is this <code>SWIFT_OPTIMIZATION_LEVEL</code>. If <code>-Onone</code> then your configuration is considered debug, and <code>assertionFailure</code> will crash your apps</p><p>Read more</p><ul><li><a href="http://blog.krzyzanowskim.com/2015/03/09/swift-asserts-the-missing-manual/" target="_blank" rel="noopener">http://blog.krzyzanowskim.com/2015/03/09/swift-asserts-the-missing-manual/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to perform platform check with typealias and @available</title>
      <link href="/blog/How-to-perform-platform-check-with-typealias-and-@available/"/>
      <url>/blog/How-to-perform-platform-check-with-typealias-and-@available/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/38" target="_blank" rel="noopener">#38</a></strong></p><p>The other day, I was building <a href="https://github.com/onmyway133/Anchors" target="_blank" rel="noopener">Anchors</a> which needs to support iOS and macOS. What’s clever way to not use <code>#if os(iOS) || os(tvOS)</code> in all files? Use <code>typealias</code></p><p>This is the first version. I’m trying to support iOS 8, macOS 10.10</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> os(iOS) || os(tvOS)</span><br><span class="line">  <span class="keyword">import</span> UIKit</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">View</span> = <span class="type">UIView</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">LayoutGuide</span> = <span class="type">UILayoutGuide</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">EdgeInsets</span> = <span class="type">UIEdgeInsets</span></span><br><span class="line">#elseif os(<span class="type">OSX</span>)</span><br><span class="line">  <span class="keyword">import</span> AppKit</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">View</span> = <span class="type">NSView</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">LayoutGuide</span> = <span class="type">NSLayoutGuide</span></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>But then because of <code>LayoutGuide</code>, I need to bump deployment target to iOS 9, macOS 10.11. Which is not what I want. <code>@available</code> to the rescue, but it will affect everything below it. The solution is to split the platform check, the first as normal, the second with <code>@available</code> check</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> os(iOS) || os(tvOS)</span><br><span class="line">  <span class="keyword">import</span> UIKit</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">View</span> = <span class="type">UIView</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">EdgeInsets</span> = <span class="type">UIEdgeInsets</span></span><br><span class="line">#elseif os(<span class="type">OSX</span>)</span><br><span class="line">  <span class="keyword">import</span> AppKit</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">View</span> = <span class="type">NSView</span></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> os(iOS) || os(tvOS)</span><br><span class="line">  <span class="keyword">import</span> UIKit</span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">9.0</span>, *)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">LayoutGuide</span> = <span class="type">UILayoutGuide</span></span><br><span class="line">#elseif os(<span class="type">OSX</span>)</span><br><span class="line">  <span class="keyword">import</span> AppKit</span><br><span class="line">  <span class="meta">@available</span>(macOS <span class="number">10.11</span>, *)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">LayoutGuide</span> = <span class="type">NSLayoutGuide</span></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use Controller and View in iOS</title>
      <link href="/blog/How-to-use-Controller-and-View-in-iOS/"/>
      <url>/blog/How-to-use-Controller-and-View-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/37" target="_blank" rel="noopener">#37</a></strong></p><p>I like to write UI in code, and with Auto Layout, it is an easy task. However that leaves ViewController with a lots of code. One way we can do is to separate <code>V</code> from <code>C</code> in <code>MVC</code>, by using a dedicated view</p><p>We can do that with generic, that initialises a view and replace the <code>view</code>, let’s call it <code>root</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span>&lt;<span class="title">T</span>: <span class="title">UIView</span>&gt;: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> root = <span class="type">T</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">    view = root</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can have a <code>UIView</code> subclass, like <code>LoginView</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line"> <span class="built_in">lazy</span> <span class="keyword">var</span> textField: <span class="type">UITextField</span> = <span class="type">UITextField</span>().then &#123;</span><br><span class="line">    $<span class="number">0</span>.textAlignment = .center</span><br><span class="line">    $<span class="number">0</span>.borderStyle = .roundedRect</span><br><span class="line">    $<span class="number">0</span>.keyboardType = .phonePad</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> button: <span class="type">UIButton</span> = <span class="type">UIButton</span>().then &#123;</span><br><span class="line">    $<span class="number">0</span>.setTitleColor(.black, <span class="keyword">for</span>: .normal)</span><br><span class="line">    $<span class="number">0</span>.backgroundColor = .lightGray</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line"></span><br><span class="line">    addSubviews(</span><br><span class="line">      textField,</span><br><span class="line">      button</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="type">Constraint</span>.on(</span><br><span class="line">      textField.centerXAnchor.constraint(equalTo: textField.superview!.centerXAnchor),</span><br><span class="line">      textField.centerYAnchor.constraint(equalTo: textField.superview!.centerYAnchor),</span><br><span class="line">      textField.widthAnchor.constraint(equalTo: textField.superview!.widthAnchor, constant: -<span class="number">20</span>),</span><br><span class="line"></span><br><span class="line">      button.topAnchor.constraint(equalTo: textField.bottomAnchor, constant: <span class="number">20</span>),</span><br><span class="line">      button.centerXAnchor.constraint(equalTo: button.superview!.centerXAnchor),</span><br><span class="line">      button.widthAnchor.constraint(equalTo: textField.widthAnchor, multiplier: <span class="number">0.8</span>),</span><br><span class="line">      button.heightAnchor.constraint(equalToConstant: <span class="number">44</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And then the <code>LoginController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span>: <span class="title">BaseController</span>&lt;<span class="title">LoginView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    view.backgroundColor = .white</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> gr = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(viewTapped))</span><br><span class="line">    root.addGestureRecognizer(gr)</span><br><span class="line"></span><br><span class="line">    root.button.setTitle(<span class="string">"Login"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">    root.button.addTarget(<span class="keyword">self</span>, action: #selector(loginButtonTouched), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">    root.button.isEnabled = <span class="literal">false</span></span><br><span class="line">    root.button.showsTouchWhenHighlighted = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    root.textField.placeholder = <span class="string">"Phone number"</span></span><br><span class="line">    root.textField.delegate = <span class="keyword">self</span></span><br><span class="line">    root.textField.text = dependencyContainer.phoneService.<span class="keyword">prefix</span></span><br><span class="line">    root.textField.addTarget(<span class="keyword">self</span>, action: #selector(textFieldDidChange), <span class="keyword">for</span>: .editingChanged)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And this is how we declare the <code>LoginController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> loginController = <span class="type">LoginController</span>()</span><br><span class="line">navigationController.viewControllers = [loginController]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use MainController in iOS</title>
      <link href="/blog/How-to-use-MainController-in-iOS/"/>
      <url>/blog/How-to-use-MainController-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/36" target="_blank" rel="noopener">#36</a></strong></p><p>Usually in an app, we have these flows: onboarding, login, main. And we usually set <code>OnboardingController</code>, <code>LoginController</code> and <code>MainController</code> as the root view controller respectively depending on the state.</p><p>I find it useful to have the <code>MainController</code> as the container for main flow. It can be a tab controller, swipe menu controller or contains just 1 child view controller. The screens are provided by child view controllers, but the <code>MainController</code> does the following jobs</p><ul><li>Status bar style</li></ul><p>We usually need to call <code>preferredStatusBarStyle</code> on the parent controller. See <a href="https://stackoverflow.com/questions/19022210/preferredstatusbarstyle-isnt-called" target="_blank" rel="noopener">https://stackoverflow.com/questions/19022210/preferredstatusbarstyle-isnt-called</a></p><ul><li>App did become active</li></ul><p>Usually when app is brought to foreground, we need to fetch logged in user profile to see if there’s changes. We do this by listening to <code>app did become active</code> in <code>MainController</code>. </p><ul><li>Mock to open</li></ul><p>This can be anti pattern. But in UI Tests, for laziness, we can just use some <a href="http://nshipster.com/launch-arguments-and-environment-variables/" target="_blank" rel="noopener">launch arguments</a> and check to present some specific screens to test, because <code>MainController</code> is the root for main flow.</p><ul><li>Logout</li></ul><p>Because things originate from <code>MainController</code>, things can terminate in <code>MainController</code>. We can handle <code>logout</code>, clear states, and tell <code>MainController</code> to tell <code>AppDelegate</code> to switch to another root controller</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to handle Auto Layout with different screen sizes</title>
      <link href="/blog/How-to-handle-Auto-Layout-with-different-screen-sizes/"/>
      <url>/blog/How-to-handle-Auto-Layout-with-different-screen-sizes/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/35" target="_blank" rel="noopener">#35</a></strong></p><p>Auto Layout is awesome. Just declare the constraints and the views are resized accordingly to their parent ‘s <code>bounds</code> changes. But sometimes it does not look good, because we have fixed values for padding, width, height, and even fixed font size.</p><p>Read more <a href="https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f" target="_blank" rel="noopener">How to make Auto Layout more convenient in iOS</a></p><p>This can be solved by some degree using <code>Size Class</code>. The idea of <code>size class</code> is that we have many sets of constraints, and based on the device traits, we enabled some of them. This is more convenient to do in Storyboard (although very hard to reason about), but if we’re doing in code (my prefer way), then it is a lot of code. And a lot of code means a lot of bugs.</p><p>If you take a look at <a href="http://iosres.com/" target="_blank" rel="noopener">iOSRes</a>, we see the ratio <code>16:9</code> (<code>height:width</code>)</p><ul><li>iPhone SE (320 x 568): 1.775</li><li>iPhone 6 (375 x 667): 1.778</li><li>iPhone 6+ (414 x 736): 1.778</li></ul><p>They mostly have the same ratio. So we can have a simple approach, that scale elements based on ratio. Given the fact that the designer usually designs for <code>iPhone 6 size</code>, we can make that a base.</p><p>In this approach, the content will scale up or down depending on its ratio. You may argue that the idea of bigger phone is to display more, not to show the same content bigger. You may be right, in that case you need to create different constraints and different UIs. But if you want simple solutions that work, this is one of them</p><p>This is the technique I used when doing <code>Windows Phone development</code>, but it applies to many platforms as well</p><h3 id="Calculate-the-ratio"><a href="#Calculate-the-ratio" class="headerlink" title="Calculate the ratio"></a>Calculate the ratio</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Base width in point, use iPhone 6</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> base: <span class="type">CGFloat</span> = <span class="number">375</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">var</span> ratio: <span class="type">CGFloat</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIScreen</span>.main.bounds.width / base</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Extension-to-make-it-convenient"><a href="#Extension-to-make-it-convenient" class="headerlink" title="Extension to make it convenient"></a>Extension to make it convenient</h3><p>We can have a computed property called <code>adjusted</code> that adjusts the size based on the ratio</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CGFloat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> adjusted: <span class="type">CGFloat</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span> * <span class="type">Device</span>.ratio</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Double</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> adjusted: <span class="type">CGFloat</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">CGFloat</span>(<span class="keyword">self</span>) * <span class="type">Device</span>.ratio</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> adjusted: <span class="type">CGFloat</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">CGFloat</span>(<span class="keyword">self</span>) * <span class="type">Device</span>.ratio</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-the-ratio"><a href="#Use-the-ratio" class="headerlink" title="Use the ratio"></a>Use the ratio</h3><p>You can adjust as much as you want</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">label.font = UIFont.systemFont(ofSize: 23.adjusted)</span><br><span class="line"></span><br><span class="line">phoneTextField.leftAnchor.constraint(equalTo: container.leftAnchor, constant: 30.adjusted),</span><br><span class="line">phoneTextField.rightAnchor.constraint(equalTo: container.rightAnchor, constant: -30.adjusted),</span><br><span class="line"></span><br><span class="line">imageView.widthAnchor.constraint(equalToConstant: 80.adjusted), imageView.heightAnchor.constraint(equalToConstant: 90.adjusted),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSApplicationDelegate and notification</title>
      <link href="/blog/NSApplicationDelegate-and-notification/"/>
      <url>/blog/NSApplicationDelegate-and-notification/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/34" target="_blank" rel="noopener">#34</a></strong></p><p>In an iOS project, we often see this in <code>AppDelegate</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But in a Cocoa project, we see this instead</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NSApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">NSApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(aNotification: NSNotification)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Insert code here to initialize your application</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationWillTerminate</span><span class="params">(aNotification: NSNotification)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Insert code here to tear down your application</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this case the param is of type <code>NSNotification</code></p><h2 id="Delegate-and-notification"><a href="#Delegate-and-notification" class="headerlink" title="Delegate and notification"></a>Delegate and notification</h2><p>Reading <a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html" target="_blank" rel="noopener">Cocoa Core Competencies - Delegation</a></p><blockquote><p>The delegate of most Cocoa framework classes is automatically registered as an observer of notifications posted by the delegating object. The delegate need only implement a notification method declared by the framework class to receive a particular notification message. Following the example above, a window object posts an NSWindowWillCloseNotification to observers but sends a windowShouldClose: message to its delegate.</p></blockquote><p>So the pattern is that the delegate should strip the <code>NS</code> and <code>Notification</code>, like <code>NSWindowWillCloseNotification</code> to <code>windowShouldClose:</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding SDK and Deployment Target in iOS</title>
      <link href="/blog/Understanding-SDK-and-Deployment-Target-in-iOS/"/>
      <url>/blog/Understanding-SDK-and-Deployment-Target-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/33" target="_blank" rel="noopener">#33</a></strong></p><p>I see that my answer to the question <a href="http://stackoverflow.com/questions/18568572/whats-the-meaning-of-base-sdk-ios-deployment-target-target-and-project-in-xc/22536773#22536773" target="_blank" rel="noopener">What’s the meaning of Base SDK, iOS deployment target, Target, and Project in xcode</a> gets lots of views, so I think I need to elaborate more about it</p><p>Good read</p><ul><li><a href="https://developer.apple.com/tech-talks/videos/" target="_blank" rel="noopener"> iOS 7 TechTalk - Architecting Modern Apps, Part 2</a></li><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html" target="_blank" rel="noopener">Configuring a Project for SDK-Based Development</a></li></ul><p><img src="http://i.stack.imgur.com/CJF6Y.png" alt></p><h2 id="Base-SDK"><a href="#Base-SDK" class="headerlink" title="Base SDK"></a>Base SDK</h2><ul><li>We can’t configure this anymore, as Xcode will use the latest SDK. For Xcode 7, the SDK is iOS 9</li><li>If we upgrade Xcode, it will use the newer version of the SDK. Like Xcode 7.2, the SDK is iOS 9.1</li><li><blockquote><p>Choosing the latest SDK for your project lets you use the new APIs introduced in the OS update that corresponds to that SDK. When new functionality is added as part of a system update, the system update itself does not typically contain updated header files reflecting the change. The SDKs, however, do contain updated header files.</p></blockquote></li></ul><h2 id="Deployment-Target"><a href="#Deployment-Target" class="headerlink" title="Deployment Target"></a>Deployment Target</h2><ul><li>We can set in Xcode -&gt; Target -&gt; Deployment Info -&gt; Deployment Target</li><li>State that we support this iOS version</li></ul><h2 id="What-does-it-mean"><a href="#What-does-it-mean" class="headerlink" title="What does it mean"></a>What does it mean</h2><blockquote><p>So, a modern App might use iOS 9 as the Target SDK, and iOS 7 as the deployment target. This means that you can run on iOS 7, iOS 8 and iOS 9, and that you have available to you any iOS 9 calls when actually running on iOS 9.</p></blockquote><p>.</p><blockquote><p>Each .sdk directory resembles the directory hierarchy of the operating system release it represents: It has usr, System, and Developer directories at its top level. OS X .sdk directories also contain a Library directory. Each of these directories in turn contains subdirectories with the headers and libraries that are present in the corresponding version of the operating system with Xcode installed.</p></blockquote><p>.</p><blockquote><p>The libraries in an iOS or OS X SDK are stubs for linking only; they do not contain executable code but just the exported symbols. SDK support works only with native build targets.</p></blockquote><p>So the SDK is just like stub and header only. It means that we can use certain APIs, but on OS that does not have the real symbols for those APIs, it crashes</p><h2 id="available"><a href="#available" class="headerlink" title="available"></a>available</h2><p>Swift 2 introduces <code>available</code> construct that guards against failure when trying to use newer APIs.</p><p>Note that <code>available</code> is runtime, not compile time. All the code is inside your executable</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">9</span>, <span class="type">OSX</span> <span class="number">10.10</span>, *) &#123;</span><br><span class="line">    <span class="comment">// Code to execute on iOS 9, OS X 10.10</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deprecated-APIs"><a href="#deprecated-APIs" class="headerlink" title="deprecated APIs"></a>deprecated APIs</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Using/using.html#//apple_ref/doc/uid/20002000-SW6" target="_blank" rel="noopener">Finding Instances of Deprecated API Usage</a></li></ul><blockquote><p>Always check to see if you are using deprecated APIs; though still available, deprecated APIs are not guaranteed to be available in the future</p></blockquote><h2 id="Compile-time-vs-Runtime"><a href="#Compile-time-vs-Runtime" class="headerlink" title="Compile time vs Runtime"></a>Compile time vs Runtime</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Using/using.html#//apple_ref/doc/uid/20002000-SW5" target="_blank" rel="noopener">Conditionally Compiling for Different SDKs</a></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> (arch(i386) || arch(x86_64)) &amp;&amp; os(iOS)</span><br><span class="line">    <span class="comment">// code inside gets inserted into executable when builds for simulator</span></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">    <span class="comment">// code inside gets inserted into executable when builds for device</span></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> os(<span class="type">OSX</span>)</span><br><span class="line">    <span class="keyword">import</span> Cocoa</span><br><span class="line">#elseif os(iOS)</span><br><span class="line">    <span class="keyword">import</span> UIKit</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All the code gets inserted into executable, but is run depending on the version of the OS</span></span><br><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">9</span>, *) &#123;</span><br><span class="line">    <span class="comment">// use UIStackView</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// show your manual Auto Layout skill</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Weakly-vs-strongly-linked"><a href="#Weakly-vs-strongly-linked" class="headerlink" title="Weakly vs strongly linked"></a>Weakly vs strongly linked</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html#//apple_ref/doc/uid/10000163i-CH1-SW2" target="_blank" rel="noopener">Weak Linking and Apple Frameworks</a></li><li><a href="http://stackoverflow.com/questions/16922013/what-does-it-mean-to-weak-link-a-framework" target="_blank" rel="noopener">What does it mean to “weak-link” a framework?</a></li><li><a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WeakLinking.html" target="_blank" rel="noopener">Frameworks and Weak Linking</a></li></ul><blockquote><p>For example, suppose in Xcode you set the deployment target (minimum required version) to “OS X v10.5” and the base SDK (maximum allowed version) to “OS X v10.6”. During compilation, the compiler would weakly link interfaces that were introduced in OS X v10.6 while strongly linking interfaces defined in earlier versions of the OS. This would allow your application to run in OS X v10.5 and take advantage of newer features when available.</p></blockquote><p>.</p><blockquote><p>None of the (platform) frameworks is really “included in the bundle”. Instead, your app has a reference (“link”) to a framework once you add it to the “Link Binary with Library” build phase. The frameworks are pre-installed on the devices. When you run an app, all the app’s framework references are resolved by the dynamic linker (on the device), which means the framework code is loaded so your app can use it.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://useyourloaf.com/blog/checking-api-availability-with-swift.html" target="_blank" rel="noopener">Checking API Availability With Swift</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>App backed by website in iOS 9</title>
      <link href="/blog/App-backed-by-website-in-iOS-9/"/>
      <url>/blog/App-backed-by-website-in-iOS-9/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/32" target="_blank" rel="noopener">#32</a></strong></p><p>iOS 9 introduces new ways for your app to work better, backed by your websites</p><h2 id="Smart-App-Banners"><a href="#Smart-App-Banners" class="headerlink" title="Smart App Banners"></a>Smart App Banners</h2><ul><li><a href="https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html" target="_blank" rel="noopener">Promoting Apps with Smart App Banners</a></li></ul><blockquote><p>If the app is already installed on a user’s device, the banner intelligently changes its action, and tapping the banner will simply open the app. If the user doesn’t have your app on his device, tapping on the banner will take him to the app’s entry in the App Store</p></blockquote><blockquote><p>To add a Smart App Banner to your website, include the following meta tag in the head of each page where you’d like the banner to appear:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="Universal-Links"><a href="#Universal-Links" class="headerlink" title="Universal Links"></a>Universal Links</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html" target="_blank" rel="noopener">Support Universal Links</a></li></ul><blockquote><p>When you support universal links, iOS 9 users can tap a link to your website and get seamlessly redirected to your installed app without going through Safari. If your app isn’t installed, tapping a link to your website opens your website in Safari.</p></blockquote><h2 id="Web-Markup"><a href="#Web-Markup" class="headerlink" title="Web Markup"></a>Web Markup</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/WebContent.html#//apple_ref/doc/uid/TP40016308-CH8-SW1" target="_blank" rel="noopener">Mark Up Web Content</a></li></ul><blockquote><p>If some or all of your app’s content is also available on your website, you can use web markup to give users access to your content in search results. Using web markup lets the Applebot web crawler index your content in Apple’s server-side index, which makes it available to all iOS users in Spotlight and Safari search results.</p></blockquote><h2 id="Shared-Web-Credentials"><a href="#Shared-Web-Credentials" class="headerlink" title="Shared Web Credentials"></a>Shared Web Credentials</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/" target="_blank" rel="noopener">Shared Web Credentials Reference</a></li></ul><blockquote><p>Shared web credentials is a programming interface that enables native iOS apps to share credentials with their website counterparts. For example, a user may log in to a website in Safari, entering a user name and password, and save those credentials using the iCloud Keychain. Later, the user may run a native app from the same developer, and instead of the app requiring the user to reenter a user name and password, shared web credentials gives it access to the credentials that were entered earlier in Safari.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://developer.apple.com/videos/play/wwdc2015-509/" target="_blank" rel="noopener">WWDC 2015 Session 509 Seamless Linking to Your App</a></li><li><a href="https://www.youtube.com/watch?v=JDAZKDAUpqY" target="_blank" rel="noopener">Integrating your Site and your iOS App</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Disingenuousness</title>
      <link href="/blog/Disingenuousness/"/>
      <url>/blog/Disingenuousness/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/31" target="_blank" rel="noopener">#31</a></strong></p><p>I’m very happy to be <a href="http://www.fantageek.com/blog/2015/10/31/on-open-source/" target="_blank" rel="noopener">on open source</a> movement, and it ‘ll be great to hear about what people have achieved</p><ul><li><a href="https://code.facebook.com/posts/1236426443040107?__mref=message" target="_blank" rel="noopener">Open source in 2015: A year of growth</a></li><li><a href="http://blog.parse.com/learn/introducing-the-open-source-hub/" target="_blank" rel="noopener">Introducing the Open Source Hub</a></li><li><a href="https://developer.apple.com/opensource/" target="_blank" rel="noopener">Open Source at Apple</a></li><li><a href="https://www.youtube.com/watch?v=YsUTuwpbURA" target="_blank" rel="noopener">Emerging Best Practices • Ash Furrow</a></li></ul><p>And <a href="https://twitter.com/merowing_" target="_blank" rel="noopener">@merowing_</a> also mentioned in <a href="http://merowing.info/2015/12/writing-xcode-plugin-in-swift/" target="_blank" rel="noopener">Writing Xcode plugin in Swift</a></p><blockquote><p>Attribution</p></blockquote><blockquote><p>Writing this was much simpler because I was able to look at other people plugins, mostly those related to console, without them being open sourcing it would be more work to figure this stuff out with hopper.</p></blockquote><p>Open source helps us move forward, learn and share together</p><h2 id="The-dark-side-of-the-Force"><a href="#The-dark-side-of-the-Force" class="headerlink" title="The dark side of the Force"></a>The dark side of the Force</h2><ul><li><a href="http://www.imdb.com/title/tt0080684/quotes" target="_blank" rel="noopener">Star Wars: Episode V - The Empire Strikes Back </a></li></ul><blockquote><p>Luke: Is the dark side stronger?</p></blockquote><blockquote><p>Yoda: No, no, no. Quicker, easier, more seductive.</p></blockquote><p>It’s a pain to see plagiarism around</p><ul><li><a href="http://www.observationalhazard.com/2015/12/open-source-plagiarism.html" target="_blank" rel="noopener">Open Source Plagiarism</a></li><li><a href="https://github.com/FancyPixel/gulps#imitation-is-the-sincerest-form-of-flattery" target="_blank" rel="noopener">Imitation is the sincerest form of flattery</a></li><li><a href="https://github.com/Microsoft/WinObjC/issues/35" target="_blank" rel="noopener">Restore original licenses</a></li></ul><p>Open source softwares are in fact intellectual properties, and the authors should get acknowledgement for the work that they do.</p><p>It’s not fair to take the credit of other’s work and not giving any attribution</p><blockquote><p>By its nature, open source software has a unique relationship with intellectual property rights</p></blockquote><blockquote><p>One thing that’s not up for debate in most circles is that it’s dishonest and disingenuous to take someone else’s project, modify it slightly, and call it your own.</p></blockquote><blockquote><p>Further, regardless of whether or not a project crosses that line, it must (by the terms of most open source licenses) acknowledge the original work/author.</p></blockquote><p>And the reaction</p><ul><li><p><a href="https://github.com/khoiln/RunKit/pull/7" target="_blank" rel="noopener">Attribute Original Author</a></p></li><li><p><a href="https://twitter.com/davekopec/status/671913819673899008" target="_blank" rel="noopener">Open Source Plagiarism</a></p></li><li><p><a href="https://github.com/github/dmca/blob/master/2015-12-04-Async.md" target="_blank" rel="noopener">DMCA takedown on repos that rip off Async</a></p></li><li><p><a href="https://twitter.com/theandreamazz" target="_blank" rel="noopener">@theandreamazz</a></p></li></ul><blockquote><p>It’s always sad to see blatant plagiarism, and I think it really hurts the community more than the author itself. It gives people a good reason to keep the sources private. </p></blockquote><h2 id="Being-nice"><a href="#Being-nice" class="headerlink" title="Being nice"></a>Being nice</h2><p>I often hear people say that</p><blockquote><p>It is easier to find good developer than developer with good attitude</p></blockquote><ul><li><a href="https://ashfurrow.com/blog/building-online-communities/" target="_blank" rel="noopener">Building Online Communities</a></li><li><a href="https://ashfurrow.com/blog/being-polite-in-open-source/" target="_blank" rel="noopener">Being Polite in Open Source</a></li><li><a href="https://ashfurrow.com/blog/minswan-for-ios/" target="_blank" rel="noopener">MINSWAN for iOS</a></li></ul><p>Github also states that</p><blockquote><p>We understand and agree that copying others’ work without permission goes against the spirit of the open source community</p></blockquote><h2 id="Do-the-right-things"><a href="#Do-the-right-things" class="headerlink" title="Do the right things"></a>Do the right things</h2><ul><li><a href="http://artsy.github.io/blog/2015/12/10/License-and-You/" target="_blank" rel="noopener">Licenses for OSS Code</a></li><li><a href="https://www.quora.com/How-do-I-properly-credit-an-original-codes-developer-for-her-open-source-contribution" target="_blank" rel="noopener">How do I properly credit an original code’s developer for her open source contribution?</a></li></ul><p>Is it MIT ‘s fault? Definitely no</p><ul><li><a href="https://twitter.com/TProphet/status/666715662199336960" target="_blank" rel="noopener">@TProphet</a></li></ul><blockquote><p>False choice. Giving up freedom does not lead to more security, just less freedom.</p></blockquote><h2 id="Takeaways"><a href="#Takeaways" class="headerlink" title="Takeaways"></a>Takeaways</h2><ul><li>Don’t take things personally</li><li>It’s hard to be perfect, but we can learn to do the right things</li><li>We may do the wrong things, but don’t worry, there ‘ll be help via Issues and Pull Requests</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to do curry in Swift</title>
      <link href="/blog/How-to-do-curry-in-Swift/"/>
      <url>/blog/How-to-do-curry-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/30" target="_blank" rel="noopener">#30</a></strong></p><p>Haskell is notorious for <code>currying</code>, and Swift has currying, too</p><p>I love ReactiveCocoa, RxSwift and I always take time to dig into it. The other day, I was practise making Signal based on this talk <a href="https://www.youtube.com/watch?v=AcDaWe3S75c" target="_blank" rel="noopener">UIKonf 2015 - Jens Ravens: Functional Reactive Programming without Black Magic</a></p><p>Take a look at my repo <a href="https://github.com/onmyway133/Signal" target="_blank" rel="noopener">Signal</a></p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>I was making a filter for a <code>Signal</code>. The idea of filter is that we should update signal if the Event is Next with right filtered value</p><p><code>Signal.swift</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt;&#123;</span><br><span class="line">    let signal = Signal&lt;T&gt;()</span><br><span class="line">    subscribe &#123; result in</span><br><span class="line">        switch(result) &#123;</span><br><span class="line">        case let .Success(value):</span><br><span class="line">            if f(value) &#123;</span><br><span class="line">                signal.update(result)</span><br><span class="line">            &#125;</span><br><span class="line">        case let .Error(error): signal.update(.Error(error))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return signal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-params"><a href="#2-params" class="headerlink" title="2 params"></a>2 params</h2><p>But having <code>Event</code> as another monad, I think it should be more encapsulated if that switching logic gets moved into the <code>Event</code>. Here the filter takes 2 params</p><p><code>Event.swift</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func filter(f: T -&gt; Bool, callback: (Event&lt;T&gt; -&gt; Void)) &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case let .Next(value) where f(value):</span><br><span class="line">            callback(self)</span><br><span class="line">        case .Failed:</span><br><span class="line">            callback(self)</span><br><span class="line">        default:</span><br><span class="line">            break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Signal.swift</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt; &#123;</span><br><span class="line">    let signal = Signal&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    subscribe &#123; event in</span><br><span class="line">        event.filter(f, callback: signal.update)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return signal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p>With currying, we can make <code>filter</code> a more abstract function, and defer the decision to pass the <code>callback</code> param. It is a little carried away but I find it helpful this way</p><p>Now <code>filter</code> accepts 1 param, and it returns a function that takes <code>callback</code> as its param</p><p><code>Event.swift</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func filter(f: T -&gt; Bool) -&gt; ((Event&lt;T&gt; -&gt; Void) -&gt; Void) &#123;</span><br><span class="line">        return &#123; g in</span><br><span class="line">            switch self &#123;</span><br><span class="line">            case let .Next(value) where f(value):</span><br><span class="line">                g(self)</span><br><span class="line">            case .Failed:</span><br><span class="line">                g(self)</span><br><span class="line">            default:</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Signal.swift</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt; &#123;</span><br><span class="line">        let signal = Signal&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">        subscribe &#123; event in</span><br><span class="line">            event.filter(f)(signal.update)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return signal</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Curry-syntax-in-Swift-2"><a href="#Curry-syntax-in-Swift-2" class="headerlink" title="Curry syntax in Swift 2"></a>Curry syntax in Swift 2</h2><p>Swift 2 supports curry syntax function</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a: Int)</span></span>(b: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sumWith5 = sum(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> result = sumWith5(b: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="No-more-curry-syntax-in-Swift-3"><a href="#No-more-curry-syntax-in-Swift-3" class="headerlink" title="No more curry syntax in Swift 3"></a>No more curry syntax in Swift 3</h2><p>You may want to find out</p><ul><li><a href="http://ericasadun.com/2015/12/18/bidding-farewell-to-currying/" target="_blank" rel="noopener">Bidding farewell to currying</a></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://learnyouahaskell.com/higher-order-functions" target="_blank" rel="noopener">Higher order functions</a></li><li><a href="http://programmers.stackexchange.com/questions/185585/what-is-the-advantage-of-currying" target="_blank" rel="noopener">What is the advantage of currying?</a></li><li><a href="http://stackoverflow.com/questions/4888480/practical-use-of-curried-functions?lq=1" target="_blank" rel="noopener">Practical use of curried functions?</a></li><li><a href="https://robots.thoughtbot.com/introduction-to-function-currying-in-swift" target="_blank" rel="noopener">Introduction to Function Currying in Swift</a></li><li><a href="http://www.russbishop.net/swift-function-currying" target="_blank" rel="noopener">Swift Function Currying</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to use push notification in iOS</title>
      <link href="/blog/How-to-use-push-notification-in-iOS/"/>
      <url>/blog/How-to-use-push-notification-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/29" target="_blank" rel="noopener">#29</a></strong></p><p>Here are my notes for working with Push Notification, updated for iOS 9</p><h2 id="How-to-register"><a href="#How-to-register" class="headerlink" title="How to register"></a>How to register</h2><ul><li>Register to receive push notification</li></ul><p><code>registerForRemoteNotificationTypes</code> is deprecated in iOS 8+</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIApplication</span>.sharedApplication().registerForRemoteNotifications()</span><br></pre></td></tr></table></figure><ul><li>Register to alert user through UI</li></ul><blockquote><p>If your app displays alerts, play sounds, or badges its icon, you must call this method during your launch cycle to request permission to alert the user in these ways</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> types: <span class="type">UIUserNotificationType</span> = [.<span class="type">Badge</span>, .<span class="type">Sound</span>, .<span class="type">Alert</span>]</span><br><span class="line"><span class="keyword">let</span> categories = <span class="type">Set</span>&lt;<span class="type">UIUserNotificationCategory</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> settings = <span class="type">UIUserNotificationSettings</span>(forTypes: types, categories: categories)</span><br><span class="line"></span><br><span class="line"><span class="type">UIApplication</span>.sharedApplication().registerUserNotificationSettings(settings)</span><br></pre></td></tr></table></figure><p>You don’t need to wait for <code>registerUserNotificationSettings</code> to callback before calling <code>registerForRemoteNotifications</code></p><h2 id="When-to-register"><a href="#When-to-register" class="headerlink" title="When to register"></a>When to register</h2><ul><li><a href="https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html" target="_blank" rel="noopener">Registering, Scheduling, and Handling User Notifications</a></li></ul><blockquote><p>Never cache a device token; always get the token from the system whenever you need it. If your app previously registered for remote notifications, calling the registerForRemoteNotifications method again does not incur any additional overhead, and iOS returns the existing device token to your app delegate immediately. In addition, iOS calls your delegate method any time the device token changes, not just in response to your app registering or re-registering</p></blockquote><blockquote><p>The user can change the notification settings for your app at any time using the Settings app. Because settings can change, always call the registerUserNotificationSettings: at launch time and use the application:didRegisterUserNotificationSettings: method to get the response. If the user disallows specific notification types, avoid using those types when configuring local and remote notifications for your app.</p></blockquote><h2 id="didReceiveRemoteNotification"><a href="#didReceiveRemoteNotification" class="headerlink" title="didReceiveRemoteNotification"></a>didReceiveRemoteNotification</h2><p>About <code>application:didReceiveRemoteNotification:</code></p><blockquote><p>Implement the application:didReceiveRemoteNotification:fetchCompletionHandler: method instead of this one whenever possible. If your delegate implements both methods, the app object calls the application:didReceiveRemoteNotification:fetchCompletionHandler: method.</p></blockquote><blockquote><p>If the app is not running when a remote notification arrives, the method launches the app and provides the appropriate information in the launch options dictionary. The app does not call this method to handle that remote notification. Instead, your implementation of the application:willFinishLaunchingWithOptions: or application:didFinishLaunchingWithOptions: method needs to get the remote notification payload data and respond appropriately.</p></blockquote><p>About <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code></p><p>This is for silent push notification with <code>content-available</code></p><blockquote><p>Unlike the application:didReceiveRemoteNotification: method, which is called only when your app is running in the foreground, the system calls this method when your app is running in the foreground or background</p></blockquote><blockquote><p>In addition, if you enabled the remote notifications background mode, the system launches your app (or wakes it from the suspended state) and puts it in the background state when a push notification arrives. However, the system does not automatically launch your app if the user has force-quit it. In that situation, the user must relaunch your app or restart the device before the system attempts to launch your app automatically again.</p></blockquote><blockquote><p>If the user opens your app from the system-displayed alert, the system may call this method again when your app is about to enter the foreground so that you can update your user interface and display information pertaining to the notification.</p></blockquote><h2 id="How-to-handle"><a href="#How-to-handle" class="headerlink" title="How to handle"></a>How to handle</h2><p>Usually, the use of push notification is to display a specific article, a specific DetailViewController, … in your app. So the good practices are</p><ul><li>When the app is in foreground: Gently display some kind of alert view and ask the user whether he would like to go to that specific page or not</li><li>When user is brought from background to foreground, or from terminated to foreground: Just navigate to that specific page. For example, if you use UINavigationController, you can set that specific page the top most ViewController, if you use UITabBarController, you can set that specific page the selected tab, something like that</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">handlePushNotification</span><span class="params">(userInfo: NSDictionary)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Check applicationState</span></span><br><span class="line"><span class="keyword">if</span> (applicationState == <span class="type">UIApplicationStateActive</span>) &#123;</span><br><span class="line">        <span class="comment">// Application is running in foreground</span></span><br><span class="line">        showAlertForPushNotification(userInfo)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (applicationState == <span class="type">UIApplicationStateBackground</span> || applicationState == <span class="type">UIApplicationStateInactive</span>) &#123;</span><br><span class="line">    <span class="comment">// Application is brought from background or launched after terminated</span></span><br><span class="line">        handlePushNotification(userInfo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we create another method `handlePushNotification:`` to handle push notification. When you receive push notification, 3 cases can occur</p><h4 id="Case-1-Foreground"><a href="#Case-1-Foreground" class="headerlink" title="Case 1: Foreground"></a>Case 1: Foreground</h4><p>Loud push</p><ul><li>No system alert</li><li><code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li></ul><p>Silent push</p><ul><li>No system alert</li><li><code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li></ul><h4 id="Case-2-Background"><a href="#Case-2-Background" class="headerlink" title="Case 2: Background"></a>Case 2: Background</h4><p>Loud push</p><ul><li>System alert</li><li>No method called</li><li>Tap notification and <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li><li>Tap on App Icon and nothing is called</li></ul><p>Silent push</p><ul><li>System alert</li><li><code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called. If app is suspended, its state changed to <code>UIApplicationStateBackground</code></li><li>Tap notification and <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li><li>Tap on App Icon and nothing is called</li></ul><h4 id="Case-3-Terminated"><a href="#Case-3-Terminated" class="headerlink" title="Case 3: Terminated"></a>Case 3: Terminated</h4><p>Loud push</p><ul><li>System alert</li><li>No method called</li><li>Tap notification and <code>application:didFinishLaunchingWithOptions:</code> with <code>launchOptions</code>,  <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li><li>Tap on App Icon and <code>application:didFinishLaunchingWithOptions:</code> is called with <code>launchOptions</code> set to nil</li></ul><p>Silent push</p><ul><li>System alert</li><li><code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called. If app was not killed by user, it is woke up and state changed to <code>UIApplicationStateInactive</code>.</li><li>Tap notification and <code>application:didFinishLaunchingWithOptions:</code> with <code>launchOptions</code>,  <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> called</li><li>Tap on App Icon and <code>application:didFinishLaunchingWithOptions:</code> is called with <code>launchOptions</code> set to nil</li></ul><h2 id="System-alert"><a href="#System-alert" class="headerlink" title="System alert"></a>System alert</h2><p>System alert only show if the payload contains “alert”</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"aps"</span> : &#123;</span><br><span class="line">        <span class="attr">"alert"</span> : &#123;</span><br><span class="line">            <span class="attr">"title"</span> : <span class="string">"Game Request"</span>,</span><br><span class="line">            <span class="attr">"body"</span> : <span class="string">"Bob wants to play poker"</span>,</span><br><span class="line">            <span class="attr">"action-loc-key"</span> : <span class="string">"PLAY"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"badge"</span> : <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"param1"</span> : <span class="string">"bar"</span>,</span><br><span class="line">    <span class="attr">"param2"</span> : [ <span class="string">"bang"</span>,  <span class="string">"whiz"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Silent-push-payload"><a href="#Silent-push-payload" class="headerlink" title="Silent push payload"></a>Silent push payload</h2><p>For now I see that silent push must contain “sound” for <code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code> to be called when app is in background</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"aps"</span>: &#123;</span><br><span class="line">   <span class="attr">"content-available"</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"alert"</span>: <span class="string">"hello"</span> // include this if we want to show alert</span><br><span class="line">   <span class="string">"sound"</span>: <span class="string">""</span> // this does the trick</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"param1"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"param2"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html" target="_blank" rel="noopener">Scheduling, Registering, and Handling Notifications</a></li><li><a href="http://www.abdus.me/ios-programming-tips/handle-push-notifications-when-arrived-ios/" target="_blank" rel="noopener">Handle push notifications when arrived in ios application</a></li><li><a href="http://stackoverflow.com/questions/5099483/how-to-respond-to-push-notification-view-if-app-is-already-running-in-the-backgr" target="_blank" rel="noopener">How to respond to push notification view if app is already running in the background</a></li><li><a href="http://stackoverflow.com/questions/5056689/didreceiveremotenotification-when-in-background" target="_blank" rel="noopener">didReceiveRemoteNotification when in background</a></li><li><a href="http://samwize.com/2015/08/07/how-to-handle-remote-notification-with-background-mode-enabled/" target="_blank" rel="noopener">How to handle remote notification with background mode enabled</a></li><li><a href="http://stackoverflow.com/questions/20569201/remote-notification-method-called-twice" target="_blank" rel="noopener">Remote notification method called twice</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Understanding push and pull signal in reactive paradigm</title>
      <link href="/blog/Understanding-push-and-pull-signal-in-reactive-paradigm/"/>
      <url>/blog/Understanding-push-and-pull-signal-in-reactive-paradigm/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/28" target="_blank" rel="noopener">#28</a></strong></p><p>The idea of Signal may originate from <a href="http://elm-lang.org/guide/reactivity" target="_blank" rel="noopener">Elm Reactivity</a>, and it has now been widely adopted in iOS</p><p>I once asked <a href="http://stackoverflow.com/questions/29374792/what-are-examples-of-hot-and-cold-signal-in-reactivecocoa" target="_blank" rel="noopener">What are examples of hot and cold signal in ReactiveCocoa?</a></p><ul><li><a href="http://stackoverflow.com/questions/17082255/when-to-use-ienumerable-vs-iobservable" target="_blank" rel="noopener">When to use IEnumerable vs IObservable?</a></li><li>[ReactiveCocoa Framework Overview](Framework Overview)</li><li><a href="http://blogs.microsoft.co.il/bnaya/2010/03/13/rx-for-beginners-part-9-hot-vs-cold-observable/" target="_blank" rel="noopener">Rx – for beginners (part 9): Hot Vs. Cold observable</a></li><li><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/HotAndColdObservables.md" target="_blank" rel="noopener">RxSwift Hot and Cold Observables</a></li></ul><p>Whether it is hot vs cold, Signal vs Signal Producer, Observable vs Enumerable, … it’s good to understand how it gets implemented, so that to have a good sense of how they work</p><h2 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h2><ul><li><a href="http://www.fantageek.com/blog/2015/07/10/understanding-monad/" target="_blank" rel="noopener">Understanding Monad</a></li></ul><p>Basically, Signal and its Result are just monads, which are thing that can be mapped and chained.</p><p>Signal makes use of deferred execution callback blocks, and <code>push vs pull</code> is just how the Signal updates its value and the order the callbacks are called</p><p>Execution callback block is that we pass a function to another function, and it will get called when appropriated</p><h2 id="Sync-vs-Async"><a href="#Sync-vs-Async" class="headerlink" title="Sync vs Async"></a>Sync vs Async</h2><p>Monad can be in either sync or async mode. Sync is easier to understand, but async is somewhat you’re already familiar and used in practice</p><p>Basically,</p><ul><li>Sync: you get the returned value right away via <code>return</code></li><li>Aync: you get the returned value via callback block</li></ul><p>Here is an example of a simple function</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sync</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a: Int, b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Async</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a: Int, b: Int, completion: Int -&gt; Void)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Assumed it is a very long task to get the result</span></span><br><span class="line">    <span class="keyword">let</span> result = a + b</span><br><span class="line"></span><br><span class="line">    completion(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is an example of <code>Event</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sync</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(@noescape f: T -&gt; U)</span></span> -&gt; <span class="type">Event</span>&lt;<span class="type">U</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Next</span>(value):</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Next</span>(value: f(value))</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Failed</span>(error):</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Failed</span>(error: error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(f: <span class="params">(T, U -&gt; Void)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; ((<span class="type">Event</span>&lt;<span class="type">U</span>&gt; -&gt; <span class="type">Void</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; g <span class="keyword">in</span>   <span class="comment">// g: Event&lt;U&gt; -&gt; Void</span></span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Next</span>(value):</span><br><span class="line">                f(value) &#123; transformedValue <span class="keyword">in</span>  <span class="comment">// transformedValue: U</span></span><br><span class="line">                    g(.<span class="type">Next</span>(value: transformedValue))</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Failed</span>(error):</span><br><span class="line">                g(.<span class="type">Failed</span>(error: error))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Push-Signal"><a href="#Push-Signal" class="headerlink" title="Push Signal"></a>Push Signal</h2><ul><li><a href="https://github.com/onmyway133/archives/blob/master/Signal/Pod/Classes/Signal.swift" target="_blank" rel="noopener">Signal.swift</a></li><li><a href="https://www.youtube.com/watch?v=AcDaWe3S75c" target="_blank" rel="noopener">UIKonf 2015 - Jens Ravens: Functional Reactive Programming without Black Magic</a></li></ul><p>Take a look at my Push Signal, called <a href="https://github.com/onmyway133/Signal/blob/master/Pod/Classes/Signal.swift" target="_blank" rel="noopener">Signal</a>, it is like how <a href="https://github.com/onmyway133/Then/blob/master/Pod/Classes/Promise.swift" target="_blank" rel="noopener">Promise A+ Then</a> works</p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Signal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event: <span class="type">Event</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">    <span class="keyword">var</span> callbacks: [<span class="type">Event</span>&lt;<span class="type">T</span>&gt; -&gt; <span class="type">Void</span>] = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> event = event <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        callbacks.forEach &#123; callback <span class="keyword">in</span></span><br><span class="line">            callback(event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(event event: Event&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        dispatch_sync(lockQueue) &#123;</span><br><span class="line">            <span class="keyword">self</span>.event = event</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        notify()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">subscribe</span><span class="params">(f: Event&lt;T&gt; -&gt; Void)</span></span> -&gt; <span class="type">Signal</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        <span class="comment">// Callback</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> event = event &#123;</span><br><span class="line">            f(event)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        callbacks.append(f)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(f: T -&gt; U)</span></span> -&gt; <span class="type">Signal</span>&lt;<span class="type">U</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> signal = <span class="type">Signal</span>&lt;<span class="type">U</span>&gt;()</span><br><span class="line"></span><br><span class="line">        subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">            signal.update(event: event.<span class="built_in">map</span>(f))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> signal = <span class="type">Signal</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"></span><br><span class="line">signal.<span class="built_in">map</span> &#123; value <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> value.characters.<span class="built_in">count</span></span><br><span class="line">    &#125;.subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Next</span>(value) = event &#123;</span><br><span class="line">            <span class="type">XCTAssert</span>(value == <span class="number">4</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">XCTAssert</span>(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal.sendNext(<span class="string">"test"</span>)</span><br></pre></td></tr></table></figure><h3 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h3><p>Given a chained signals like this</p><p>A -(map)-&gt; B -(flatMap)-&gt; C -(flatMap)-&gt; D -(subscribe)</p><ul><li>The idea is we send event to the source signal, and it propagates events through via callbacks.</li><li>Triggered by sending event to the source signal.</li><li>We must keep A as it keeps the others around</li><li>We subscribe the last D</li><li>We send event to the first A</li><li>A ‘s callback gets called, it it in turn calls callback of B with the result of A ‘s map, then B ‘s callback calls C ‘s callback with the result of B<br>‘s flatMap, …</li></ul><h2 id="Pull-Signal"><a href="#Pull-Signal" class="headerlink" title="Pull Signal"></a>Pull Signal</h2><ul><li><a href="https://github.com/onmyway133/archives/blob/master/Signal/Pod/Classes/Future.swift" target="_blank" rel="noopener">Future.swift</a></li><li><a href="https://www.youtube.com/watch?v=mbd6g7NfR-8" target="_blank" rel="noopener">Swift Sync and Async Error Handling - iOS Conf SG 2015</a></li></ul><p>Take a look at my Pull Signal, called <a href="https://github.com/onmyway133/Signal/blob/master/Pod/Classes/Future.swift" target="_blank" rel="noopener">Future</a></p><h3 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h3><p>Here <code>operation</code> is a task, when called and completed, will notify its <code>completion</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Future</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> operation: (<span class="type">Event</span>&lt;<span class="type">T</span>&gt; -&gt; <span class="type">Void</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(operation: (<span class="type">Event</span>&lt;<span class="type">T</span>&gt; -&gt; <span class="type">Void</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.operation = operation</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">(completion: Event&lt;T&gt; -&gt; Void)</span></span> &#123;</span><br><span class="line">        operation() &#123; event <span class="keyword">in</span></span><br><span class="line">            completion(event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(f: T -&gt; U)</span></span> -&gt; <span class="type">Future</span>&lt;<span class="type">U</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Future</span>&lt;<span class="type">U</span>&gt; &#123; completion <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.start &#123; event <span class="keyword">in</span></span><br><span class="line">                completion(event.<span class="built_in">map</span>(f))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let _ = Future&lt;String&gt; &#123; completion in</span><br><span class="line">        // There is some work here</span><br><span class="line">        completion(Event(value: &quot;test&quot;))</span><br><span class="line">    &#125;</span><br><span class="line">    .map &#123; value in</span><br><span class="line">        value.characters.count</span><br><span class="line">    &#125;.start &#123; event in</span><br><span class="line">        if case let .Next(value) = event &#123;</span><br><span class="line">            XCTAssert(value == 4)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            XCTAssert(false)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Callbacks-1"><a href="#Callbacks-1" class="headerlink" title="Callbacks"></a>Callbacks</h3><p>Given a chained signals like this</p><p>A -(map)-&gt; B -(flatMap)-&gt; C -(flatMap)-&gt; D -(subscribe)</p><ul><li>The idea is we subscribe to the final signal D, and it cause the previous signals to action.</li><li>Triggered by subscribing to the final signal.</li><li>We must keep D as it keeps the others around</li><li>We subscribe the last D</li><li>D ‘s operation actions, and it cause C ‘s operation to action, … then A ‘s operation actions. It is in A that the task is performed (like fetching network, retrieving database, file access, heavy computation, …) to get the result, and A ‘s completion gets called. Then A’s completion calls B ‘s completion with the result mapped by B ‘s map, … all the way to the subscriber ‘s completion block</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make iOS Stretchy Header with Auto Layout</title>
      <link href="/blog/How-to-make-iOS-Stretchy-Header-with-Auto-Layout/"/>
      <url>/blog/How-to-make-iOS-Stretchy-Header-with-Auto-Layout/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/27" target="_blank" rel="noopener">#27</a></strong></p><p>Stretchy header is cool. People are familiar with changing frames to achieve this, like <a href="http://blog.matthewcheok.com/design-teardown-stretchy-headers/" target="_blank" rel="noopener">Design Teardown: Stretchy Headers</a>. But with Auto Layout, we can achieve this with much nicer declarative constraints</p><p>The demo project is <a href="https://github.com/onmyway133/archives/tree/master/StretchyHeader" target="_blank" rel="noopener">StretchyHeader</a></p><p><img src="https://cloud.githubusercontent.com/assets/2284279/25923575/70c06d82-35de-11e7-8384-0549d7ef8021.gif" alt="demo"></p><p>I use <a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">SnapKit</a> to make it clear what constraints we need</p><h2 id="scrollView"><a href="#scrollView" class="headerlink" title="scrollView"></a>scrollView</h2><p>The <code>scrollView</code> should pin its 4 edges to the <code>ViewController &#39;s view</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupScrollView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        scrollView = <span class="type">UIScrollView</span>()</span><br><span class="line">        scrollView.delegate = <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">        view.addSubview(scrollView)</span><br><span class="line">        scrollView.snp_makeConstraints &#123; make <span class="keyword">in</span></span><br><span class="line">            make.edges.equalTo(view)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="scrollViewContentView"><a href="#scrollViewContentView" class="headerlink" title="scrollViewContentView"></a>scrollViewContentView</h2><p>The <code>scrollViewContentView</code> must pin its 4 edges to the <code>scrollView</code> to help determine <code>scrollView</code> <code>contentSize</code></p><p>The height of <code>scrollViewContentView</code> is determined by its subviews. The subviews inside must pin their <code>top</code> and <code>bottom</code> to the <code>scrollViewContentView</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupScrollViewContentView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        scrollViewContentView = <span class="type">UIView</span>()</span><br><span class="line"></span><br><span class="line">        scrollView.addSubview(scrollViewContentView)</span><br><span class="line">        scrollViewContentView.snp_makeConstraints &#123; make <span class="keyword">in</span></span><br><span class="line">            make.edges.equalTo(scrollView)</span><br><span class="line">            make.width.equalTo(view.snp_width)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p>The <code>header</code> must pin its top to the <code>scrollView</code> parent, which is the <code>ViewController &#39;s view</code></p><p>Read the <code>title</code> section, you ‘ll see that in order to make <code>header</code> stretchy, it must be pinned top and bottom</p><p>But if we scroll up, there will be a constraint conflict between these pinned <code>top</code> and <code>bottom</code> constraints</p><p>So we must declare <code>headerTopConstraint</code> priority as 999, and <code>headerLessThanTopConstraint</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupHeader</span><span class="params">()</span></span> &#123;</span><br><span class="line">        header = <span class="type">UIImageView</span>()</span><br><span class="line">        header.image = <span class="type">UIImage</span>(named: <span class="string">"onepiece"</span>)!</span><br><span class="line"></span><br><span class="line">        scrollViewContentView.addSubview(header)</span><br><span class="line">        header.snp_makeConstraints &#123; make <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// Pin header to scrollView 's parent, which is now ViewController 's view</span></span><br><span class="line">            <span class="comment">// When header is moved up, headerTopConstraint is not enough, so make its priority 999, and add another less than or equal constraint</span></span><br><span class="line">            make.leading.trailing.equalTo(scrollViewContentView)</span><br><span class="line">            <span class="keyword">self</span>.headerTopConstraint =  make.top.equalTo(view.snp_top).priority(<span class="number">999</span>).constraint</span><br><span class="line">            <span class="keyword">self</span>.headerLessThanTopConstraint = make.top.lessThanOrEqualTo(view.snp_top).constraint</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>The <code>title</code> must pin its top to the <code>scrollViewContentView</code> to help determine <code>scrollViewContentView</code> height</p><p>The <code>title</code> must also pin its top the <code>header</code> bottom in order to make <code>header</code> stretchy</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupTitleLabel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        titleLabel = <span class="type">UILabel</span>()</span><br><span class="line">        titleLabel.numberOfLines = <span class="number">0</span></span><br><span class="line">        titleLabel.font = <span class="type">UIFont</span>.preferredFontForTextStyle(<span class="type">UIFontTextStyleTitle1</span>)</span><br><span class="line">        titleLabel.text = <span class="string">"One Piece"</span></span><br><span class="line"></span><br><span class="line">        scrollViewContentView.addSubview(titleLabel)</span><br><span class="line">        titleLabel.snp_makeConstraints &#123; make <span class="keyword">in</span></span><br><span class="line">            make.leading.equalTo(scrollViewContentView).offset(<span class="number">20</span>)</span><br><span class="line">            make.trailing.equalTo(scrollViewContentView).offset(-<span class="number">20</span>)</span><br><span class="line">            <span class="comment">// Pin to the header to make it stretchy</span></span><br><span class="line">            make.top.equalTo(header.snp_bottom).offset(<span class="number">20</span>)</span><br><span class="line">            <span class="comment">// Pin to the content view to help determine scrollView contentSize</span></span><br><span class="line">            make.top.equalTo(scrollViewContentView.snp_top).offset(headerHeight)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="scrollViewDidScroll"><a href="#scrollViewDidScroll" class="headerlink" title="scrollViewDidScroll"></a>scrollViewDidScroll</h2><p>The header is always pinned to the top, unless you adjust it, here in <code>scrollViewDidScroll</code></p><p>Here I use <code>Constraint</code>, which is a class from <code>SnapKit</code>, but the idea is to change the <code>constant</code> of the <code>NSLayoutConstraint</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> headerTopConstraint = headerTopConstraint,</span><br><span class="line">            headerLessThanTopConstraint = headerLessThanTopConstraint</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> y = scrollView.contentOffset.y</span><br><span class="line">        <span class="keyword">let</span> offset = y &gt; <span class="number">0</span> ? -y : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        headerLessThanTopConstraint.updateOffset(offset)</span><br><span class="line">        headerTopConstraint.updateOffset(offset)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>By the way, did you just learn the story of One Piece :]</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://blog.domesticcat.com.au/ios/2014/03/19/creating-parallax-effect-on-uiscrollview-using-simple-constraints/" target="_blank" rel="noopener">Creating parallax effect on UIScrollView using constraints</a></li><li><a href="https://github.com/BillCarsonFr/ScrollviewParallax" target="_blank" rel="noopener">ScrollviewParallax</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to group digits in Swift</title>
      <link href="/blog/How-to-group-digits-in-Swift/"/>
      <url>/blog/How-to-group-digits-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/26" target="_blank" rel="noopener">#26</a></strong></p><p>When working on <a href="https://github.com/onmyway133/Scale" target="_blank" rel="noopener">Scale</a> I think it’s good to have a way to group the digit so that it is easier to reason</p><p>Luckily, Swift already supports this. See <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309" target="_blank" rel="noopener">The Swift Programming Language - Numeric Literals</a></p><blockquote><p>Numeric literals can contain extra formatting to make them easier to read. Both integers and floats can be padded with extra zeros and can contain underscores to help with readability. Neither type of formatting affects the underlying value of the literal</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> paddedDouble = <span class="number">000123.456</span></span><br><span class="line"><span class="keyword">let</span> oneMillion = <span class="number">1_000_000</span></span><br><span class="line"><span class="keyword">let</span> justOverOneMillion = <span class="number">1_000_000.000_000_1</span></span><br></pre></td></tr></table></figure><p>Talking about grouping digits after the decimal point, it is interesting too <a href="http://math.stackexchange.com/questions/182775/convention-of-digit-grouping-after-decimal-point" target="_blank" rel="noopener">Convention of digit grouping after decimal point</a></p><p>So now we have</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MetricUnit</span>: <span class="title">Double</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> nano = <span class="number">0.000_000_001</span></span><br><span class="line">    <span class="keyword">case</span> micro = <span class="number">0.000_001</span></span><br><span class="line">    <span class="keyword">case</span> milli = <span class="number">0.001</span></span><br><span class="line">    <span class="keyword">case</span> centi = <span class="number">0.01</span></span><br><span class="line">    <span class="keyword">case</span> deci = <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">case</span> base = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> deka = <span class="number">10</span></span><br><span class="line">    <span class="keyword">case</span> hecto = <span class="number">100</span></span><br><span class="line">    <span class="keyword">case</span> kilo = <span class="number">1_000</span></span><br><span class="line">    <span class="keyword">case</span> mega = <span class="number">1_000_000</span></span><br><span class="line">    <span class="keyword">case</span> giga = <span class="number">1_000_000_000</span></span><br><span class="line">    <span class="keyword">case</span> tera = <span class="number">1_000_000_000_000</span></span><br><span class="line">    <span class="keyword">case</span> peta = <span class="number">1_000_000_000_000_000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> defaultScale: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">MetricUnit</span>.base.rawValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make a simple resolver in Swift</title>
      <link href="/blog/How-to-make-a-simple-resolver-in-Swift/"/>
      <url>/blog/How-to-make-a-simple-resolver-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/25" target="_blank" rel="noopener">#25</a></strong></p><h2 id="The-Marvel-world"><a href="#The-Marvel-world" class="headerlink" title="The Marvel world"></a>The Marvel world</h2><h3 id="Ant-Man"><a href="#Ant-Man" class="headerlink" title="Ant Man"></a>Ant Man</h3><p>We know Ant Man is Hank Pym</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AntManSuit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HankPym</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> suit = <span class="type">AntManSuit</span>(name: <span class="string">"Ant Man ID #101"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fight</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Fighting with the suit named "</span> + suit.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hankPym = <span class="type">HankPym</span>()</span><br><span class="line">hankPym.fight()</span><br></pre></td></tr></table></figure><p>Everytime HankPym is created, he always uses the Ant Man suit. This time he is so coupled to the role Ant Man</p><h3 id="More-suits"><a href="#More-suits" class="headerlink" title="More suits"></a>More suits</h3><p>Well, he does not have to be too dependent on the Ant Man suit. We know Hank Pym is a genius scientist, he has more suits to use. Let’s make it decoupled</p><p>Using Dependency Injection</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Suit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AntManSuit</span>: <span class="title">Suit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">YellowJacketSuit</span>: <span class="title">Suit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HankPym</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> suit: <span class="type">Suit</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fight</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Fighting with the suit named "</span> + suit.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> suit = <span class="type">YellowJacketSuit</span>(name: <span class="string">"Yellow Jacket ID #33"</span>)</span><br><span class="line"><span class="keyword">let</span> hankPym = <span class="type">HankPym</span>(suit: suit)</span><br><span class="line">hankPym.fight()</span><br></pre></td></tr></table></figure><p>Now Hank Pym can be more flexible on which suit to use.</p><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><p>The technique we just saw is called <code>Dependency Injection</code>, in which Hank Pym does not need to create the Suit, it will be provided through constructor or property.</p><h2 id="Dependency-Inversion-Principle"><a href="#Dependency-Inversion-Principle" class="headerlink" title="Dependency Inversion Principle"></a>Dependency Inversion Principle</h2><p>In the first example, Hank Pym is dependent on the concrete implementation of the Suit</p><p>In the second example, both Hank Pym and the suits are dependent on the Suit protocol. This way Hank Pym only knows about the Suit protocol, and future suits must be crafted to that it conforms to the Suit protocol</p><p>This way the dependency is inverted</p><blockquote><p>High level modules should not depend upon low level modules. Both should depend upon abstractions.</p></blockquote><blockquote><p>What is the high level policy? It is the abstractions that underlie the application, the<br>truths that do not vary when the details are changed</p></blockquote><h2 id="Inversion-of-Control-Container"><a href="#Inversion-of-Control-Container" class="headerlink" title="Inversion of Control Container"></a>Inversion of Control Container</h2><p>You may ask yourself <a href="http://programmers.stackexchange.com/questions/205681/why-is-inversion-of-control-named-that-way" target="_blank" rel="noopener">Why is Inversion of Control named that way?</a></p><h3 id="Framework-vs-library"><a href="#Framework-vs-library" class="headerlink" title="Framework vs library"></a>Framework vs library</h3><p>People said “the framework calls you but you call the library”</p><h3 id="Command-line-vs-GUI"><a href="#Command-line-vs-GUI" class="headerlink" title="Command line vs GUI"></a>Command line vs GUI</h3><p>See <a href="http://stackoverflow.com/a/3108/1418457" target="_blank" rel="noopener">What is Inversion of Control?</a></p><p>For example, in an old school menu, you might have:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print &quot;enter your name&quot;</span><br><span class="line">read name</span><br><span class="line">print &quot;enter your address&quot;</span><br><span class="line">read address</span><br><span class="line">etc...</span><br><span class="line">store in database</span><br></pre></td></tr></table></figure><p>thereby controlling the flow of user interaction.</p><p>In a GUI program or some such, instead we say</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">when the user types in field a, store it in NAME</span><br><span class="line">when the user types in field b, store it in ADDRESS</span><br><span class="line">when the user clicks the save button, call StoreInDatabase</span><br></pre></td></tr></table></figure><p>You how have a brief understanding of how IoC means</p><h3 id="IoC-container"><a href="#IoC-container" class="headerlink" title="IoC container"></a>IoC container</h3><p>In the 2nd example of the Suit protocol, you can see how there is a inversion of control. What if there is a container that contains all the Suit conformances?</p><p>Let’s use my <a href="https://github.com/onmyway133/Resolver" target="_blank" rel="noopener">Resolver</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resolver = <span class="type">Resolver</span>()</span><br><span class="line">resolver.register &#123;</span><br><span class="line">    <span class="type">YellowJacketSuit</span>(name: <span class="string">"YellowJacket ID #404"</span>) <span class="keyword">as</span> <span class="type">Suit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> suit = <span class="keyword">try</span>! resolver.resolve() <span class="keyword">as</span> <span class="type">Suit</span></span><br><span class="line"><span class="keyword">let</span> hankPym = <span class="type">HankPym</span>(suit: suit)</span><br></pre></td></tr></table></figure><p>Quite helpful, right? :]</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>Actually, IoC container helps you more than that.</p><ul><li>Circular Dependency Injection</li><li>Auto Injection</li><li>Object Scope</li><li>…</li></ul><p>There are some IoC containers in Swift</p><h3 id="Swinject"><a href="#Swinject" class="headerlink" title="Swinject"></a><a href="https://github.com/Swinject/Swinject" target="_blank" rel="noopener">Swinject</a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> container = <span class="type">Container</span>()</span><br><span class="line">container.register(<span class="type">AnimalType</span>.<span class="keyword">self</span>) &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="type">Cat</span>(name: <span class="string">"Mimi"</span>) &#125;</span><br><span class="line">container.register(<span class="type">PersonType</span>.<span class="keyword">self</span>) &#123; r <span class="keyword">in</span></span><br><span class="line">     <span class="type">PetOwner</span>(pet: r.resolve(<span class="type">AnimalType</span>.<span class="keyword">self</span>)!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swinject requires explicit type declaration. It has SwinjectStoryboard, which helps configuring the dependency for your view controller</p><h3 id="Dip"><a href="#Dip" class="headerlink" title="Dip"></a><a href="https://github.com/AliSoftware/Dip" target="_blank" rel="noopener">Dip</a></h3><p>Dip leverages generic and encourage protocols</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">container.register &#123; <span class="type">ServiceImp</span>() <span class="keyword">as</span> <span class="type">Service</span> &#125;</span><br><span class="line"><span class="keyword">let</span> service = <span class="keyword">try</span>! container.resolve() <span class="keyword">as</span> <span class="type">Service</span></span><br></pre></td></tr></table></figure><p>You ‘ll learn a lot just by reading Dip source code, on how factory and factory type are stored and checked using generic</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">resolve</span>&lt;T, F&gt;<span class="params">(tag tag: Tag? = <span class="literal">nil</span>, builder: F-&gt;T)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="type">DefinitionKey</span>(protocolType: <span class="type">T</span>.<span class="keyword">self</span>, factoryType: <span class="type">F</span>.<span class="keyword">self</span>, associatedTag: tag)</span><br><span class="line">    <span class="keyword">let</span> nilTagKey = tag.<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="type">DefinitionKey</span>(protocolType: <span class="type">T</span>.<span class="keyword">self</span>, factoryType: <span class="type">F</span>.<span class="keyword">self</span>, associatedTag: <span class="literal">nil</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> definition = (<span class="keyword">self</span>.definitions[key] ?? <span class="keyword">self</span>.definitions[nilTagKey]) <span class="keyword">as</span>? <span class="type">DefinitionOf</span>&lt;<span class="type">T</span>, <span class="type">F</span>&gt; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="type">DipError</span>.<span class="type">DefinitionNotFound</span>(key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> usingKey: <span class="type">DefinitionKey?</span> = definition.scope == .<span class="type">ObjectGraph</span> ? key : <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> _resolve(tag, key: usingKey, definition: definition, builder: builder)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Build-your-own-simple-IoC-container"><a href="#Build-your-own-simple-IoC-container" class="headerlink" title="Build your own simple IoC container"></a>Build your own simple IoC container</h2><p>You may have discovered, that the idea of all those framework is to use closure as factory method</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> factory = &#123;</span><br><span class="line">    <span class="type">YellowJacketSuit</span>(name: <span class="string">"YellowJacket ID #007"</span>) <span class="keyword">as</span> <span class="type">Suit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> suit = factory()</span><br></pre></td></tr></table></figure><p>All we have to do is to store these factories closure</p><p>Take a look at my gist <a href="https://gist.github.com/onmyway133/3244cde1eaf8f2cd2ecb" target="_blank" rel="noopener">SimpleResolver.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> factories = [<span class="type">String</span>: <span class="type">Any</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">factory</span>&lt;T&gt;<span class="params">(factory: <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> key = <span class="type">String</span>(<span class="type">T</span>.<span class="keyword">self</span>)</span><br><span class="line">        factories[key] = factory</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">resolve</span>&lt;T&gt;<span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> key = <span class="type">String</span>(<span class="type">T</span>.<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> factory = factories[key] <span class="keyword">as</span>? () -&gt; <span class="type">T</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factory()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"Registration not found"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> resolver = <span class="type">SimpleResolver</span>()</span><br><span class="line"></span><br><span class="line">resolver.factory &#123;</span><br><span class="line">    <span class="type">YellowJacketSuit</span>(name: <span class="string">"YellowJacket IS #009"</span>) <span class="keyword">as</span> <span class="type">Suit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> suit = resolver.resolve() <span class="keyword">as</span> <span class="type">Suit</span></span><br><span class="line"><span class="built_in">print</span>(suit.name)</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-introduction-to-swinject/" target="_blank" rel="noopener">Dependency Injection Framework for Swift - Introduction to Swinject</a></li><li><a href="http://ilya.puchka.me/ioc-container-in-swift/" target="_blank" rel="noopener">IoC container in Swift</a></li><li><a href="https://github.com/chakrit/swift-ioc" target="_blank" rel="noopener">swift-ioc</a></li><li><a href="https://github.com/AliSoftware/Dip" target="_blank" rel="noopener">Dip</a></li><li><a href="http://typhoonframework.org/" target="_blank" rel="noopener">Typhoon</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to make lighter AppDelegate in iOS</title>
      <link href="/blog/How-to-make-lighter-AppDelegate-in-iOS/"/>
      <url>/blog/How-to-make-lighter-AppDelegate-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/24" target="_blank" rel="noopener">#24</a></strong></p><p>There is <a href="https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/" target="_blank" rel="noopener">Lighter View Controllers</a>, and there is Lighter AppDelegate, too</p><p>Since working with iOS, I really like the delegate pattern, in which it helps us defer the decision to another party.</p><p>The iOS application delegates its event to AppDelegate, which over time will be a big mess. Usually, the AppDelegate is where you put your root view controller setup, crash tracking, push notification, debugging, … and we just somehow violent the Single Responsibility principle. Moreover, it makes us hard to reason about code in AppDelegate</p><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>I like to think of each task in AppDelegate as a service. And the AppDelegate distributes the events into each service via ServiceDispatcher. Simple plain old composition and looping</p><p>I tend to have RootService as a place to setup root view controllers</p><p>It looks like this</p><p><code>ServiceDispatcher.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceDispatcher</span> : <span class="title">NSObject</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> services: [<span class="type">UIApplicationDelegate</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(services: [<span class="type">UIApplicationDelegate</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.services = services</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">        didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">        services.forEach &#123; service <span class="keyword">in</span></span><br><span class="line">            service.application?(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidBecomeActive</span><span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line">        services.forEach &#123; service <span class="keyword">in</span></span><br><span class="line">            service.applicationDidBecomeActive?(application)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationWillResignActive</span><span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line">        services.forEach &#123; service <span class="keyword">in</span></span><br><span class="line">            service.applicationWillResignActive?(application)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationWillEnterForeground</span><span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line">        services.forEach &#123; service <span class="keyword">in</span></span><br><span class="line">            service.applicationWillEnterForeground?(application)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidEnterBackground</span><span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line">        services.forEach &#123; service <span class="keyword">in</span></span><br><span class="line">            service.applicationDidEnterBackground?(application)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RootService.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootService</span> : <span class="title">NSObject</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">        didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">        appDelegate().window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.mainScreen().bounds)</span><br><span class="line">        showHome()</span><br><span class="line">        appDelegate().window?.makeKeyAndVisible()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">RootService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showHome</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> home = <span class="type">HomeWireframe</span>().makeHome()</span><br><span class="line">        <span class="keyword">let</span> navC = <span class="type">UINavigationController</span>(rootViewController: home!)</span><br><span class="line">        appDelegate().window?.rootViewController = navC</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">RootService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">appDelegate</span><span class="params">()</span></span> -&gt; <span class="type">AppDelegate</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIApplication</span>.sharedApplication().delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AppDelegate.swift</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line">    <span class="keyword">let</span> serviceDispatcher = <span class="type">ServiceDispatcher</span>(services: [<span class="type">RootService</span>()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">        serviceDispatcher.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationWillResignActive</span><span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line">        serviceDispatcher.applicationWillResignActive(application)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidEnterBackground</span><span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line">        serviceDispatcher.applicationDidEnterBackground(application)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationWillEnterForeground</span><span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line">        serviceDispatcher.applicationWillEnterForeground(application)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationDidBecomeActive</span><span class="params">(application: UIApplication)</span></span> &#123;</span><br><span class="line">        serviceDispatcher.applicationDidBecomeActive(application)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have more services like DebugService, PushNotificationService, CrashTrackingService, …</p><p>The downside to this approach is that in real life, there will be dependencies between those services, like that UserService must be called before RootService? In this case, I have to use comment to explain why I have that decision, which is hard for newcomers to understand at first. Take a look at <a href="http://christiantietze.de/posts/2015/10/bootstrapping-appdelegate/" target="_blank" rel="noopener">How to Move Bootstrapping Code Out of AppDelegate</a> for how dependencies are managed</p><p><a href="https://github.com/JaviSoto/JSDecoupledAppDelegate" target="_blank" rel="noopener">JSDecoupledAppDelegate</a> comes with another approach, in which service events are named according to the functions, like <code>appStateDelegate</code>, <code>appDefaultOrientationDelegate</code>, <code>watchInteractionDelegate</code>, …</p><p>But for me, Service and ServiceDispatcher suit my need</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://sizeof.io/service-oriented-appdelegate/" target="_blank" rel="noopener">SERVICE-ORIENTED APPDELEGATE</a></li><li><a href="https://github.com/JaviSoto/JSDecoupledAppDelegate" target="_blank" rel="noopener">JSDecoupledAppDelegate</a></li><li><a href="http://christiantietze.de/posts/2015/10/bootstrapping-appdelegate/" target="_blank" rel="noopener">How to Move Bootstrapping Code Out of AppDelegate</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to debug Auto Layout</title>
      <link href="/blog/How-to-debug-Auto-Layout/"/>
      <url>/blog/How-to-debug-Auto-Layout/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/23" target="_blank" rel="noopener">#23</a></strong></p><h3 id="hasAmbiguousLayout"><a href="#hasAmbiguousLayout" class="headerlink" title="hasAmbiguousLayout"></a>hasAmbiguousLayout</h3><blockquote><p>Returns whether the constraints impacting the layout of the view incompletely specify the location of the view.</p></blockquote><h3 id="exerciseAmbiguityInLayout"><a href="#exerciseAmbiguityInLayout" class="headerlink" title="exerciseAmbiguityInLayout"></a>exerciseAmbiguityInLayout</h3><blockquote><p>This method randomly changes the frame of a view with an ambiguous layout between its different valid values, causing the view to move in the interface. This makes it easy to visually identify what the valid frames are and may enable the developer to discern what constraints need to be added to the layout to fully specify a location for the view.</p></blockquote><h3 id="autolayoutTrace"><a href="#autolayoutTrace" class="headerlink" title="_autolayoutTrace"></a>_autolayoutTrace</h3><blockquote><p>This returns a string describing the whole view tree which tells you when a view has an ambiguous layout.</p></blockquote><h3 id="NSLayoutConstraint-identifier"><a href="#NSLayoutConstraint-identifier" class="headerlink" title="NSLayoutConstraint identifier"></a>NSLayoutConstraint identifier</h3><blockquote><p>The name that identifies the constraint.</p></blockquote><h3 id="UIViewAlertForUnsatisfiableConstraints"><a href="#UIViewAlertForUnsatisfiableConstraints" class="headerlink" title="UIViewAlertForUnsatisfiableConstraints"></a>UIViewAlertForUnsatisfiableConstraints</h3><ul><li><a href="https://medium.com/@karthikkeyan/debugging-uiviewalertforunsatisfiableconstraints-47697696c7c" target="_blank" rel="noopener">https://medium.com/@karthikkeyan/debugging-uiviewalertforunsatisfiableconstraints-47697696c7c</a></li></ul><h3 id="DETECTED-MISSING-CONSTRAINTS"><a href="#DETECTED-MISSING-CONSTRAINTS" class="headerlink" title="DETECTED_MISSING_CONSTRAINTS"></a>DETECTED_MISSING_CONSTRAINTS</h3><p><a href="https://forums.developer.apple.com/thread/63811" target="_blank" rel="noopener">https://forums.developer.apple.com/thread/63811</a></p><h3 id="View-Debugger-search-by-address"><a href="#View-Debugger-search-by-address" class="headerlink" title="View Debugger search by address"></a>View Debugger search by address</h3><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/DebuggingTricksandTips.html" target="_blank" rel="noopener">Debugging Tricks and Tips</a></li><li><a href="http://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/" target="_blank" rel="noopener">Advanced Auto Layout Toolbox</a></li><li><a href="http://asciiwwdc.com/2015/sessions/219" target="_blank" rel="noopener">Mysteries of Auto Layout, Part 2</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to create a piano using iOS 9 Auto Layout</title>
      <link href="/blog/How-to-create-a-piano-using-iOS-9-Auto-Layout/"/>
      <url>/blog/How-to-create-a-piano-using-iOS-9-Auto-Layout/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/22" target="_blank" rel="noopener">#22</a></strong></p><p>In the beginning, people use frame and Autoresizing Mask, then they use Auto Layout, then iOS 9 encourages them to use <code>NSLayoutAnchor</code>, <code>UILayoutGuide</code> and <code>UIStackView</code></p><p>For more convenient Auto Layout, check <a href="https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f" target="_blank" rel="noopener">How to make Auto Layout more convenient in iOS</a> and <a href="https://github.com/onmyway133/Anchors" target="_blank" rel="noopener">Anchors</a></p><h2 id="NSLayoutAnchor"><a href="#NSLayoutAnchor" class="headerlink" title="NSLayoutAnchor"></a>NSLayoutAnchor</h2><blockquote><p>The NSLayoutAnchor class is a factory class for creating NSLayoutConstraint objects using a fluent API. Use these constraints to programmatically define your layout using Auto Layout.</p></blockquote><p>It has 3 subclasses</p><p><code>NSLayoutDimension</code></p><ul><li>func constraintEqualToConstant(_ c: CGFloat) -&gt; NSLayoutConstraint!</li></ul><p><code>NSLayoutXAxisAnchor</code></p><ul><li>Allows working with horizontal constraints</li><li>Prevent these</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This constraint generates an incompatible pointer type warning</span></span><br><span class="line">cancelButton.leadingAnchor.constraintEqualToAnchor(saveButton.topAnchor, constant: <span class="number">8.0</span>).active = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>NSLayoutYAxisAnchor</code></p><ul><li>Allows working with vertical constraints</li><li>Prevent these</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This constraint generates an incompatible pointer type warning</span></span><br><span class="line">cancelButton.topAnchor.constraintEqualToAnchor(saveButton.trailingAnchor, constant: <span class="number">8.0</span>).active = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="UILayoutGuide"><a href="#UILayoutGuide" class="headerlink" title="UILayoutGuide"></a>UILayoutGuide</h2><p>Previously, we used dummy views to aid constraints. Now we use <code>UILayoutGuide</code></p><h3 id="Define-an-equal-spacing-between-a-series-of-views"><a href="#Define-an-equal-spacing-between-a-series-of-views" class="headerlink" title="Define an equal spacing between a series of views"></a>Define an equal spacing between a series of views</h3><p><img src="https://cloud.githubusercontent.com/assets/2284279/25923413/b2c9085c-35dd-11e7-874f-58269cdbc707.png" alt="uilayoutguide_spacing"></p><p>See full <a href="https://gist.github.com/onmyway133/fcf892aac565d36ee890" target="_blank" rel="noopener">gist</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> space1 = <span class="type">UILayoutGuide</span>()</span><br><span class="line">view.addLayoutGuide(space1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> space2 = <span class="type">UILayoutGuide</span>()</span><br><span class="line">view.addLayoutGuide(space2)</span><br><span class="line"></span><br><span class="line">space1.widthAnchor.constraintEqualToAnchor(space2.widthAnchor).active = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">saveButton.trailingAnchor.constraintEqualToAnchor(space1.leadingAnchor).active = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">cancelButton.leadingAnchor.constraintEqualToAnchor(space1.trailingAnchor).active = <span class="literal">true</span></span><br><span class="line">cancelButton.trailingAnchor.constraintEqualToAnchor(space2.leadingAnchor).active = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">clearButton.leadingAnchor.constraintEqualToAnchor(space2.trailingAnchor).active = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Layout-guides-can-also-act-as-a-black-box-containing-a-number-of-other-views-and-controls"><a href="#Layout-guides-can-also-act-as-a-black-box-containing-a-number-of-other-views-and-controls" class="headerlink" title="Layout guides can also act as a black box, containing a number of other views and controls"></a>Layout guides can also act as a black box, containing a number of other views and controls</h3><p><img src="https://cloud.githubusercontent.com/assets/2284279/25923425/bbe47ffc-35dd-11e7-86cf-79b642188b9e.png" alt="uilayoutguide_container"></p><p>See the full <a href="https://gist.github.com/onmyway133/faa135b4db601d0db9a8" target="_blank" rel="noopener">gist</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> container = <span class="type">UILayoutGuide</span>()</span><br><span class="line">view.addLayoutGuide(container)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set interior constraints</span></span><br><span class="line">label.lastBaselineAnchor.constraintEqualToAnchor(textField.lastBaselineAnchor).active = <span class="literal">true</span></span><br><span class="line">label.leadingAnchor.constraintEqualToAnchor(container.leadingAnchor).active = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">textField.leadingAnchor.constraintEqualToAnchor(label.trailingAnchor, constant: <span class="number">8.0</span>).active = <span class="literal">true</span></span><br><span class="line">textField.trailingAnchor.constraintEqualToAnchor(container.trailingAnchor).active = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">textField.topAnchor.constraintEqualToAnchor(container.topAnchor).active = <span class="literal">true</span></span><br><span class="line">textField.bottomAnchor.constraintEqualToAnchor(container.bottomAnchor).active = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set exterior constraints</span></span><br><span class="line"><span class="comment">// The contents of the container can be treated as a black box</span></span><br><span class="line"><span class="keyword">let</span> margins = view.layoutMarginsGuide</span><br><span class="line"></span><br><span class="line">container.leadingAnchor.constraintEqualToAnchor(margins.leadingAnchor).active = <span class="literal">true</span></span><br><span class="line">container.trailingAnchor.constraintEqualToAnchor(margins.trailingAnchor).active = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Must use NSLayoutConstraint with the scene's top and bottom layout guides.</span></span><br><span class="line"><span class="type">NSLayoutConstraint</span>(item: container,</span><br><span class="line">    attribute: .<span class="type">Top</span>,</span><br><span class="line">    relatedBy: .<span class="type">Equal</span>,</span><br><span class="line">    toItem: topLayoutGuide,</span><br><span class="line">    attribute: .<span class="type">Bottom</span>,</span><br><span class="line">    multiplier: <span class="number">1.0</span>,</span><br><span class="line">    constant: <span class="number">20.0</span>).active = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="layoutMarginsGuide"><a href="#layoutMarginsGuide" class="headerlink" title="layoutMarginsGuide"></a>layoutMarginsGuide</h3><p>Margins are now represented as <code>layoutMarginsGuide</code>, a subclass of <code>UILayoutGuide</code></p><h3 id="topLayoutGuide-and-bottomLayoutGuide"><a href="#topLayoutGuide-and-bottomLayoutGuide" class="headerlink" title="topLayoutGuide and bottomLayoutGuide"></a>topLayoutGuide and bottomLayoutGuide</h3><p>In the container example, we saw how we must use <code>NSLayoutConstraint</code> with the <code>topLayoutGuide</code>. <code>topLayoutGuide</code> and <code>bottomLayoutGuide</code> are object conforming to <code>UILayoutSupport</code> protocol</p><h3 id="layoutFrame"><a href="#layoutFrame" class="headerlink" title="layoutFrame"></a>layoutFrame</h3><blockquote><p>The layout guide defines a rectangular space in its owning view’s coordinate system. This property contains a valid CGRect value by the time its owning view’s layoutSubviews method is called.</p></blockquote><p>In the above container example, the container layout guide frame is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(16.0, 40.0, 343.0, 21.0)</span><br></pre></td></tr></table></figure><h2 id="Piano"><a href="#Piano" class="headerlink" title="Piano"></a>Piano</h2><p><img src="https://cloud.githubusercontent.com/assets/2284279/25923400/a1a60246-35dd-11e7-9ccf-46f3d910f722.png" alt="piano"></p><p>See <a href="https://github.com/onmyway133/archives/tree/master/Piano" target="_blank" rel="noopener">Piano on Github</a> on how to create a Piano using <code>UILayoutGuide</code>, <code>NSLayoutAnchor</code> and <code>UIStackView</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A set of NSObject</title>
      <link href="/blog/A-set-of-NSObject/"/>
      <url>/blog/A-set-of-NSObject/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/21" target="_blank" rel="noopener">#21</a></strong></p><p>The other day I was trying t</p><ul><li><a href="http://mgrebenets.github.io/swift/2015/06/21/equatable-nsobject-with-swift-2" target="_blank" rel="noopener">http://mgrebenets.github.io/swift/2015/06/21/equatable-nsobject-with-swift-2</a></li><li><a href="http://stackoverflow.com/questions/33319959/nsobject-subclass-in-swift-hash-vs-hashvalue-isequal-vs" target="_blank" rel="noopener">http://stackoverflow.com/questions/33319959/nsobject-subclass-in-swift-hash-vs-hashvalue-isequal-vs</a></li><li><a href="https://useyourloaf.com/blog/swift-hashable/" target="_blank" rel="noopener">https://useyourloaf.com/blog/swift-hashable/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to handle RefreshControl in iOS</title>
      <link href="/blog/How-to-handle-RefreshControl-in-iOS/"/>
      <url>/blog/How-to-handle-RefreshControl-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/20" target="_blank" rel="noopener">#20</a></strong></p><p>The other day I was doing refresh control, and I saw this <a href="http://cleancocoa.com/posts/2017/04/protocol-ui-mixin/" target="_blank" rel="noopener">Swift Protocols with Default Implementations as UI Mixins</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Refreshable</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIViewController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/// Install the refresh control on the table view</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">installRefreshControl</span><span class="params">()</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> refreshControl = <span class="type">UIRefreshControl</span>()</span><br><span class="line">        refreshControl.tintColor = .primaryColor</span><br><span class="line">        refreshControl.addTarget(<span class="keyword">self</span>, action: #selector(handleRefresh(<span class="number">_</span>:)), <span class="keyword">for</span>: .valueChanged)</span><br><span class="line">        <span class="keyword">self</span>.refreshControl = refreshControl</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">10.0</span>, *)</span><br><span class="line">        &#123;</span><br><span class="line">            tableView.refreshControl = refreshControl</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tableView.backgroundView = refreshControl</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Protocol extension is cool but somehow I’m not a fan of it. I always consider composition first, to extract the specific task to one entity that does that well. It looks like this</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefreshHandler</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> refresh = <span class="type">PublishSubject</span>&lt;<span class="type">Void</span>&gt;()</span><br><span class="line">  <span class="keyword">let</span> refreshControl = <span class="type">UIRefreshControl</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(view: <span class="type">UIScrollView</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    view.addSubview(refreshControl)</span><br><span class="line">    refreshControl.addTarget(<span class="keyword">self</span>, action: #selector(refreshControlDidRefresh(<span class="number">_</span>: )), <span class="keyword">for</span>: .valueChanged)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// MARK: - Action</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">refreshControlDidRefresh</span><span class="params">(<span class="number">_</span> control: UIRefreshControl)</span></span> &#123;</span><br><span class="line">    refresh.onNext(())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">end</span><span class="params">()</span></span> &#123;</span><br><span class="line">    refreshControl.endRefreshing()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is a bit <code>Rx</code>, we can use block if we like, but the idea is we can declare this <code>RefreshHandler</code> and use it everywhere we want</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">refreshHandler = <span class="type">RefreshHandler</span>(view: scrollView)</span><br><span class="line"></span><br><span class="line">refreshHandler.refresh</span><br><span class="line">      .startWith(())</span><br><span class="line">      .bindTo(viewModel.input.fetch)</span><br><span class="line">      .addDisposableTo(bag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to hack iOS apps</title>
      <link href="/blog/How-to-hack-iOS-apps/"/>
      <url>/blog/How-to-hack-iOS-apps/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/19" target="_blank" rel="noopener">#19</a></strong></p><p>We need to care about security nowadays, here are some links I find useful to read more about this matter</p><ul><li><a href="https://github.com/Naituw/IPAPatch" target="_blank" rel="noopener">https://github.com/Naituw/IPAPatch</a></li><li><a href="https://github.com/cyanzhong/Retriever" target="_blank" rel="noopener">https://github.com/cyanzhong/Retriever</a></li><li><a href="https://github.com/KJCracks/Clutch" target="_blank" rel="noopener">https://github.com/KJCracks/Clutch</a></li><li><a href="https://github.com/pjebs/Obfuscator-iOS" target="_blank" rel="noopener">https://github.com/pjebs/Obfuscator-iOS</a></li><li><a href="https://github.com/UrbanApps/UAObfuscatedString" target="_blank" rel="noopener">https://github.com/UrbanApps/UAObfuscatedString</a></li><li><a href="https://www.raywenderlich.com/46223/ios-app-security-analysis-part-2" target="_blank" rel="noopener">https://www.raywenderlich.com/46223/ios-app-security-analysis-part-2</a></li><li><a href="http://www.splinter.com.au/2014/09/16/storing-secret-keys/" target="_blank" rel="noopener">http://www.splinter.com.au/2014/09/16/storing-secret-keys/</a></li><li><a href="https://www.youtube.com/watch?v=5U3FfQUmcV4&feature=youtu.be" target="_blank" rel="noopener">Anastasiia Voitova: Keys from the castle: ancient art of managing keys and trust</a></li><li><a href="https://www.hopperapp.com/" target="_blank" rel="noopener">https://www.hopperapp.com/</a></li><li><a href="https://github.com/iosre/iOSAppReverseEngineering" target="_blank" rel="noopener">https://github.com/iosre/iOSAppReverseEngineering</a></li><li><a href="http://nshipster.com/new-years-2015/" target="_blank" rel="noopener">CocoaPods, Exposed</a></li><li><a href="http://blog.timac.org/?p=1707" target="_blank" rel="noopener">Analysis of the Facebook.app for iOS [v. 87.0]</a></li><li><a href="http://quellish.tumblr.com/post/126712999812/how-on-earth-the-facebook-ios-application-is-so" target="_blank" rel="noopener">http://quellish.tumblr.com/post/126712999812/how-on-earth-the-facebook-ios-application-is-so</a></li><li><a href="https://www.objc.io/issues/19-debugging/" target="_blank" rel="noopener">https://www.objc.io/issues/19-debugging/</a></li><li><a href="https://github.com/felixgr/secure-ios-app-dev" target="_blank" rel="noopener">https://github.com/felixgr/secure-ios-app-dev</a></li><li><a href="http://pragmaticswift.com/may-2017/app-security-in-swift.html" target="_blank" rel="noopener">App Security in Swift</a></li><li><a href="https://code.tutsplus.com/articles/securing-communications-on-ios--cms-28529" target="_blank" rel="noopener">Securing Communications on iOS</a></li><li><a href="https://medium.com/@guilhermerambo/how-i-discovered-instagrams-upcoming-video-calling-feature-on-ios-934d7085da57" target="_blank" rel="noopener">How I discovered Instagram’s upcoming video calling feature on iOS</a></li><li><a href="https://blog.superhuman.com/advanced-swift-debugging-for-uikit-e154d1c28aaf" target="_blank" rel="noopener">https://blog.superhuman.com/advanced-swift-debugging-for-uikit-e154d1c28aaf</a></li><li><a href="http://blog.zats.io/2017/12/27/iPhone-X-home-button/" target="_blank" rel="noopener">http://blog.zats.io/2017/12/27/iPhone-X-home-button/</a></li><li><a href="https://medium.com/@nathangitter/exploring-apps-without-jailbreaking-e932904f9863" target="_blank" rel="noopener">https://medium.com/@nathangitter/exploring-apps-without-jailbreaking-e932904f9863</a></li><li><a href="https://academy.realm.io/posts/conrad-kramer-reverse-engineering-ios-apps-lyft/" target="_blank" rel="noopener">https://academy.realm.io/posts/conrad-kramer-reverse-engineering-ios-apps-lyft/</a></li><li><a href="https://github.com/BishopFox/iSpy" target="_blank" rel="noopener">https://github.com/BishopFox/iSpy</a></li><li><a href="https://github.com/Polidea/SiriusObfuscator" target="_blank" rel="noopener">https://github.com/Polidea/SiriusObfuscator</a></li><li><a href="https://oleb.net/2018/photos-data-model/" target="_blank" rel="noopener">https://oleb.net/2018/photos-data-model/</a></li><li>The art of spelunking <a href="https://vimeo.com/290322018" target="_blank" rel="noopener">https://vimeo.com/290322018</a></li><li><a href="https://briancoyner.github.io/xcode/2017/05/14/xcode-attach-debugger-to-apple-apps.html" target="_blank" rel="noopener">https://briancoyner.github.io/xcode/2017/05/14/xcode-attach-debugger-to-apple-apps.html</a></li><li><a href="https://medium.com/@vixentael/popular-note-taking-apps-share-these-security-flaws-security-tips-for-developers-326180e41329" target="_blank" rel="noopener">https://medium.com/@vixentael/popular-note-taking-apps-share-these-security-flaws-security-tips-for-developers-326180e41329</a></li><li><a href="https://medium.com/@kennethpoon/lets-write-swift-code-to-intercept-ssl-pinning-https-requests-12446303cc9d" target="_blank" rel="noopener">https://medium.com/@kennethpoon/lets-write-swift-code-to-intercept-ssl-pinning-https-requests-12446303cc9d</a></li><li><a href="https://medium.com/@kennethpoon/how-to-perform-ios-code-injection-on-ipa-files-1ba91d9438db" target="_blank" rel="noopener">https://medium.com/@kennethpoon/how-to-perform-ios-code-injection-on-ipa-files-1ba91d9438db</a></li><li><a href="https://github.com/armadsen/analyze_apps" target="_blank" rel="noopener">https://github.com/armadsen/analyze_apps</a></li><li><a href="https://github.com/rockbruno/swiftshield" target="_blank" rel="noopener">https://github.com/rockbruno/swiftshield</a></li><li><a href="https://rambo.codes/ios/2019/01/11/hacking-with-private-apis-on-ipad.html" target="_blank" rel="noopener">https://rambo.codes/ios/2019/01/11/hacking-with-private-apis-on-ipad.html</a></li><li><a href="https://github.com/MichaelMKenny/ios-13-light-dark-wallpaper-app" target="_blank" rel="noopener">https://github.com/MichaelMKenny/ios-13-light-dark-wallpaper-app</a></li></ul><h3 id="Hack-macOS-apps"><a href="#Hack-macOS-apps" class="headerlink" title="Hack macOS apps"></a>Hack macOS apps</h3><ul><li><a href="https://medium.com/@yaid/xcode-the-ultimate-debugging-and-cracking-tool-568541490f74" target="_blank" rel="noopener">Xcode, the ultimate debugging and cracking tool</a></li><li><a href="https://lowlevelbits.org/reverse-engineering-stickies.app/" target="_blank" rel="noopener">REVERSE ENGINEERING STICKIES.APP</a></li></ul><h3 id="Hack-Android-apps"><a href="#Hack-Android-apps" class="headerlink" title="Hack Android apps"></a>Hack Android apps</h3><ul><li><a href="https://hackernoon.com/dont-publish-yet-reverse-engineering-the-medium-app-and-making-all-stories-in-it-free-48c8f2695687" target="_blank" rel="noopener">Reverse Engineering The Medium App (and making all stories in it free)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to deal with singleton in iOS</title>
      <link href="/blog/How-to-deal-with-singleton-in-iOS/"/>
      <url>/blog/How-to-deal-with-singleton-in-iOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/18" target="_blank" rel="noopener">#18</a></strong></p><h2 id="A-single-singleton"><a href="#A-single-singleton" class="headerlink" title="A single singleton"></a>A single singleton</h2><p>There are many classes that designed to be used as singleton, like <code>UserDefaults.standard</code>, <code>FileManager.default</code>, <code>NotificationCenter.default</code> or even our own classes like <code>UserManager</code>, <code>Storage</code>, … Singleton is a design patter and has its own use case, sometimes we still need to use it. But if we are to use singleton, we should just use 1, and group all other singleton under this single singleton. Thanks to <a href="https://github.com/vadymmarkov/" target="_blank" rel="noopener">Vadym</a> for showing this to me</p><p>Swift makes it extremely easy to make singleton, let name it <code>App</code> then we have a single point of control for all the singletons</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> model = <span class="type">AppModel</span>()</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> realmProvider = <span class="type">RealmProvider</span>()</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> networkingProvider = <span class="type">NetworkingProvider</span>()</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">var</span> navigator = <span class="type">Navigator</span>()</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> config = <span class="type">AppConfig</span>()</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> pushNotificationCenter = <span class="type">PushNotificationCenter</span>()</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> lifeCycle = <span class="type">LifeCycle</span>()</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="type">These</span> are use cases <span class="keyword">where</span> a single instance <span class="keyword">is</span> needed</span><br><span class="line"></span><br><span class="line">### <span class="type">AppModel</span></span><br><span class="line"><span class="type">This</span> <span class="keyword">is</span> <span class="keyword">where</span> we store model <span class="keyword">for</span> an app, that can be</span><br><span class="line">- <span class="keyword">is</span> onboarding shown</span><br><span class="line">- organization name</span><br><span class="line">- `<span class="type">Session</span>` that encapsulates token, current profile</span><br><span class="line"></span><br><span class="line">### <span class="type">LifeCycle</span></span><br><span class="line"><span class="type">This</span> <span class="keyword">is</span> <span class="keyword">where</span> we listen to app life cycle, <span class="type">I</span> use `rx` to make it easy, see https:<span class="comment">//github.com/onmyway133/blog/issues/12</span></span><br><span class="line"></span><br><span class="line">### <span class="type">RealmProvider</span></span><br><span class="line"><span class="type">I</span> prefer `<span class="type">Realm</span>` <span class="keyword">for</span> storing and caching, usually <span class="number">1</span> `<span class="type">Realm</span>` <span class="keyword">is</span> enough. <span class="type">This</span> <span class="keyword">is</span> <span class="keyword">where</span> we <span class="keyword">return</span> the a certain `<span class="type">Realm</span>` instance</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealmProvider</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">realm</span><span class="params">()</span></span> -&gt; <span class="type">Realm</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> configuration = <span class="type">Realm</span>.<span class="type">Configuration</span>(schemaVersion: <span class="type">App</span>.config.schemaVersion)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span>! <span class="type">Realm</span>(configuration: configuration)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AppConfig"><a href="#AppConfig" class="headerlink" title="AppConfig"></a>AppConfig</h3><p>This is where we have configurations for staging and production environment, those can be client key, <code>Firebase</code> configuration, analytics keys, …</p><h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><p>I use <a href="https://github.com/hyperoslo/Compass" target="_blank" rel="noopener">Compass</a> to do central navigation, and there should be 1 <code>Navigator</code> that does the job</p><h2 id="Inject-a-singleton"><a href="#Inject-a-singleton" class="headerlink" title="Inject a singleton"></a>Inject a singleton</h2><p>Sometime we rely on a singleton to do our job, to make dependencies clear and testing easier, we need to inject this singleton, and leverage Swift default parameter, thanks to <a href="https://github.com/JohnSundell" target="_blank" rel="noopener">John</a> for showing this to me</p><p>Here is an example of a <code>ViewModel</code> that relies on <code>networking</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> networking: <span class="type">Networking</span>&lt;<span class="type">APIEndpoint</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(networking: <span class="type">Networking</span>&lt;<span class="type">APIEndpoint</span>&gt; = <span class="type">App</span>.networking) &#123;</span><br><span class="line">    <span class="keyword">self</span>.networking = networking</span><br><span class="line"></span><br><span class="line">    networking.rxRequest(<span class="type">APIEndpoint</span>.profile)</span><br><span class="line">      .bindNext(&#123; profile <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(profile)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift snippets</title>
      <link href="/blog/Swift-snippets/"/>
      <url>/blog/Swift-snippets/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/17" target="_blank" rel="noopener">#17</a></strong></p><p>I always forget how to write correct <code>#available(</code> or <code>#if swift(&gt;=3.0)</code> or just lazy to write <code>required init?(coder aDecoder: NSCoder)</code> every time I make a subclass. That’s why I made <a href="https://github.com/hyperoslo/SwiftSnippets" target="_blank" rel="noopener">SwiftSnippets</a> to save time for these tedious tasks. Installation is easy with script, so you should give it a try. </p><p>I can’t recommend this enough, it saves me tons of time</p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A dream is not a dream anymore when you don&#39;t have time for it</title>
      <link href="/blog/A-dream-is-not-a-dream-anymore-when-you-don&#39;t-have-time-for-it/"/>
      <url>/blog/A-dream-is-not-a-dream-anymore-when-you-don&#39;t-have-time-for-it/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/16" target="_blank" rel="noopener">#16</a></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The luxury of free time</title>
      <link href="/blog/The-luxury-of-free-time/"/>
      <url>/blog/The-luxury-of-free-time/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/15" target="_blank" rel="noopener">#15</a></strong></p><h3 id="What-to-see"><a href="#What-to-see" class="headerlink" title="What to see"></a>What to see</h3><ul><li><a href="https://feedly.com/i/latest" target="_blank" rel="noopener">https://feedly.com/i/latest</a></li><li><a href="https://news.ycombinator.com/" target="_blank" rel="noopener">https://news.ycombinator.com/</a></li><li><a href="https://medium.com/" target="_blank" rel="noopener">https://medium.com/</a></li><li><a href="https://github.com/onmyway133/fantastic-design#inspiration" target="_blank" rel="noopener">https://github.com/onmyway133/fantastic-design#inspiration</a></li><li><a href="https://www.youtube.com/channel/UCxX9wt5FWQUAAz4UrysqK9A" target="_blank" rel="noopener">CS Dojo</a></li></ul><h3 id="How"><a href="#How" class="headerlink" title="How"></a>How</h3><ul><li><a href="https://www.raywenderlich.com/167015/learning-techniques-programmers" target="_blank" rel="noopener">https://www.raywenderlich.com/167015/learning-techniques-programmers</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>What you don&#39;t know is what you haven&#39;t learned</title>
      <link href="/blog/What-you-don&#39;t-know-is-what-you-haven&#39;t-learned/"/>
      <url>/blog/What-you-don&#39;t-know-is-what-you-haven&#39;t-learned/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/14" target="_blank" rel="noopener">#14</a></strong></p><p>Some of my sayings that I like 😉 </p><h3 id="Mine"><a href="#Mine" class="headerlink" title="Mine"></a>Mine</h3><ul><li>There are so many many many things to learn</li><li>The opportunities are endless</li><li>Everybody has access to the internet. Everybody has nearly the same chances. Your future is yours to decide</li><li>A dream is not a dream anymore when you don’t have time for it</li><li>Being single means free time. Being coupled means memorable time</li><li>You learn less with the happy path</li><li>I don’t like to be at the centre, nor being abandoned</li><li>Even sense of humour can be trained</li><li>Youth is your strength. Take advantage of it</li><li>Easy to please. Hard to impress</li><li>Don’t show me the evil sides of the world</li><li>Please don’t confuse peace vs boredom</li><li>What matters is your passion, not your ability</li><li>The ones that are likely to fail are the ones having the fewest friends. And the ones that have the fewest friends are the ones having the most boring life</li><li>Life is like a marathon. People run. Some are lucky enough to have support. Some are even luckier, they already crossed the finish line when they were born. Running, however, has its own fun</li><li>Life is predestined. But you can of course change it</li><li>Losers are easily the most hot tempered. It is the consequence, not the cause</li><li>What if there is no inheritance. Will that make everybody the same?</li><li>Some people become Norwegian when they were born. Others have to apply for the citizenship <a href="https://www.udi.no/en/word-definitions/norwegian-by-birth/" target="_blank" rel="noopener">https://www.udi.no/en/word-definitions/norwegian-by-birth/</a></li><li>Every deck has a chance to win, as long as you believe in the heart of the cards</li><li>Life is a game. People play on different difficulty levels. “But mine is much harder”, said everybody</li><li>What you don’t know is what you haven’t learned</li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li>I don’t know the key to success. But the key to failure is trying to please everybody ~ Bill Cosby</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Composition in Realm</title>
      <link href="/blog/Composition-in-Realm/"/>
      <url>/blog/Composition-in-Realm/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/13" target="_blank" rel="noopener">#13</a></strong></p><p>There is time we have models that have some kind of inheritance, like <code>Dog</code>, <code>Cat</code>, <code>Mouse</code> can be <code>Animal</code>. We can use composition to imitate inheritance, we just need to make sure it has unique primary key</p><h2 id="Cat-and-Dog"><a href="#Cat-and-Dog" class="headerlink" title="Cat and Dog"></a>Cat and Dog</h2><p>These are pretty much basic Realm objects</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> id: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(json: [<span class="type">String</span>: <span class="type">Any</span>]) &#123;</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    id &lt;- json.integer(key: <span class="string">"id"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> id: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(json: [<span class="type">String</span>: <span class="type">Any</span>]) &#123;</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    id &lt;- json.integer(key: <span class="string">"id"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Animal"><a href="#Animal" class="headerlink" title="Animal"></a>Animal</h2><p>Here <code>Animal</code>  can contain either <code>dog</code> or <code>cat</code>, we can add more if there are many other “inheritance” of <code>Animal</code>. The <code>required init</code> makes sure Animal can only be init with 1 type of <code>child</code> class</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> id: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> cat: <span class="type">Cat?</span></span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> dog: <span class="type">Dog?</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(cat: <span class="type">Cat</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">self</span>.cat = cat</span><br><span class="line">    <span class="keyword">self</span>.id = cat.id</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(dog: <span class="type">Dog</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">self</span>.dog = dog</span><br><span class="line">    <span class="keyword">self</span>.id = dog.id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to do delegate with RxSwift</title>
      <link href="/blog/How-to-do-delegate-with-RxSwift/"/>
      <url>/blog/How-to-do-delegate-with-RxSwift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/12" target="_blank" rel="noopener">#12</a></strong></p><p>We can use <code>DelegateProxy</code> and <code>DelegateProxyType</code> to make beautiful delegate with RxSwift. But in some other cases, we can just create a custom class with <code>PublishSubject</code>.</p><p>This is how we can make <code>rx</code> out of <code>UIApplication</code> life cycle events</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifeCycle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> didEnterBackground = <span class="type">PublishSubject</span>&lt;<span class="type">Void</span>&gt;()</span><br><span class="line">  <span class="keyword">let</span> willEnterForeground  = <span class="type">PublishSubject</span>&lt;<span class="type">Void</span>&gt;()</span><br><span class="line">  <span class="keyword">let</span> didBecomeActive = <span class="type">PublishSubject</span>&lt;<span class="type">Void</span>&gt;()</span><br><span class="line">  <span class="keyword">let</span> willResignActive = <span class="type">PublishSubject</span>&lt;<span class="type">Void</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> center = <span class="type">NotificationCenter</span>.<span class="keyword">default</span></span><br><span class="line">    <span class="keyword">let</span> app = <span class="type">UIApplication</span>.shared</span><br><span class="line"></span><br><span class="line">    center.addObserver(forName: <span class="type">Notification</span>.<span class="type">Name</span>.<span class="type">UIApplicationDidEnterBackground</span>,</span><br><span class="line">                       object: app, queue: .main, using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>?.didEnterBackground.onNext(())</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    center.addObserver(forName: <span class="type">Notification</span>.<span class="type">Name</span>.<span class="type">UIApplicationWillEnterForeground</span>,</span><br><span class="line">                       object: app, queue: .main, using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>?.willEnterForeground.onNext(())</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    center.addObserver(forName: <span class="type">Notification</span>.<span class="type">Name</span>.<span class="type">UIApplicationDidBecomeActive</span>,</span><br><span class="line">                       object: app, queue: .main, using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>?.didBecomeActive.onNext(())</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    center.addObserver(forName: <span class="type">Notification</span>.<span class="type">Name</span>.<span class="type">UIApplicationWillResignActive</span>,</span><br><span class="line">                       object: app, queue: .main, using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>?.willResignActive.onNext(())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lifeCycle = <span class="type">LifeCycle</span>()</span><br><span class="line">lifeCycle.didBecomeActive</span><br><span class="line">      .bindNext(&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>?.viewModel.reloadProfile()</span><br><span class="line">      &#125;)</span><br><span class="line">      .disposed(by: bag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to group extension methods in Swift</title>
      <link href="/blog/How-to-group-extension-methods-in-Swift/"/>
      <url>/blog/How-to-group-extension-methods-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/11" target="_blank" rel="noopener">#11</a></strong></p><p>Swift allows us to define more methods on existing class using extension.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">shake</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">fade</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">centerIn</span><span class="params">(anotherView: UIView)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you ‘re afraid of the naming conflict, you can prefix your methods, like</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">view.abc_shake()</span><br><span class="line">view.abc_fade()</span><br><span class="line">view.abc_centerIn(anotherView: containerView)</span><br></pre></td></tr></table></figure><p>Or a better way, reverse it 💃  , like</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">view.animation.shake()</span><br><span class="line">view.animation.fade()</span><br><span class="line">view.layout.centerIn(anotherView)</span><br></pre></td></tr></table></figure><p>This way, no more conflict and we make it clear that <code>shake()</code> and <code>fade()</code> belongs to animation category<br>Actually, animation and layout are properties in UIView extension. This may cause naming conflict, but the number of them is reduced</p><p>This is how it works</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> view: <span class="type">UIView</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shake</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="comment">// Shake the view</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fade</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="type">PowerfulAnimationEngine</span>.fade(view)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> animation: <span class="type">Animation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Animation</span>(view: <span class="keyword">self</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Layout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> view: <span class="type">UIView</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">centerIn</span><span class="params">(anotherView: UIView)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> layout: <span class="type">Layout</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Layout</span>(view: <span class="keyword">self</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to execute an action only once in Swift</title>
      <link href="/blog/How-to-execute-an-action-only-once-in-Swift/"/>
      <url>/blog/How-to-execute-an-action-only-once-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/10" target="_blank" rel="noopener">#10</a></strong></p><p>There is time we want to execute an action only once. We can surely introduce a flag, but it will be nicer if we abstract that out using composition. Then we have</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Once</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> already: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(@noescape block: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> !already <span class="keyword">else</span> &#123; </span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    block()</span><br><span class="line">    already = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> once = <span class="type">Once</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(animated: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidAppear(animated)</span><br><span class="line"></span><br><span class="line">    once.run &#123;</span><br><span class="line">      cameraMan.setup()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the same way, we can check to run a closure when a value changes</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WhenChange</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> value: <span class="type">T</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(value: <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(newValue: T, closure: <span class="params">(T)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> newValue != value &#123;</span><br><span class="line">            value = newValue</span><br><span class="line">            closure(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Law of Jante</title>
      <link href="/blog/Law-of-Jante/"/>
      <url>/blog/Law-of-Jante/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/9" target="_blank" rel="noopener">#9</a></strong></p><p>The other day I was watching <a href="https://www.youtube.com/watch?v=d915p1aXlkE" target="_blank" rel="noopener">Inside Sweden’s Silicon Valley</a>, and he mentions <code>Law of Jante</code></p><p>It is pretty much this</p><ul><li>You’re not to think you are anything special.</li><li>You’re not to think you are as good as we are.</li><li>You’re not to think you are smarter than we are.</li><li>You’re not to convince yourself that you are better than we are.</li><li>You’re not to think you know more than we do.</li><li>You’re not to think you are more important than we are.</li><li>You’re not to think you are good at anything.</li><li>You’re not to laugh at us.</li><li>You’re not to think anyone cares about you.</li><li>You’re not to think you can teach us anything.</li></ul><p>This is controversial, there are many discussions about this</p><ul><li><a href="http://www.ibtimes.com/law-jante-how-swedish-cultural-principle-drives-ikea-ericsson-volvo-beat-financial-1397589" target="_blank" rel="noopener">http://www.ibtimes.com/law-jante-how-swedish-cultural-principle-drives-ikea-ericsson-volvo-beat-financial-1397589</a></li><li><a href="https://www.quora.com/Is-answering-publicly-on-Quora-incompatible-with-the-Law-of-Jante" target="_blank" rel="noopener">https://www.quora.com/Is-answering-publicly-on-Quora-incompatible-with-the-Law-of-Jante</a></li><li><a href="https://www.quora.com/Would-global-application-of-Jantes-laws-be-beneficial" target="_blank" rel="noopener">https://www.quora.com/Would-global-application-of-Jantes-laws-be-beneficial</a></li><li><a href="http://www.lifeinnorway.net/2015/06/what-exactly-is-janteloven/" target="_blank" rel="noopener">http://www.lifeinnorway.net/2015/06/what-exactly-is-janteloven/</a></li></ul><p>Putting on your black hat, it sounds negative. Putting on your yellow hat, it sounds positive<br>But what I learn about it is the team work. No one lives alone, everyone lives among the others. It is about to be humble and learn collaboration</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Advices to students</title>
      <link href="/blog/Advices-to-students/"/>
      <url>/blog/Advices-to-students/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/8" target="_blank" rel="noopener">#8</a></strong></p><p>Some say these are from the book <code>Dumbing Down America</code> of <code>Charles Sykes</code>, some say they are from Bill Gates ‘s speech to high school students. I don’t know the origin, but they are cool enough, so I tend to share it again and again</p><ul><li>Life is not fair. Get used to it ⭐️ </li><li>The world won’t care about your self-esteem. The world will expect you to accomplish something BEFORE you feel good about yourself</li><li>You will NOT make 40 thousand dollars a year right out of high school. You won’t be a vice president with car phone, until you earn both.</li><li>If you think your teacher is tough, wait till you get a boss. He doesn’t have tenure.</li><li>If you mess up, it’s not your parents’ fault, so don’t whine about your mistakes, learn from them.</li><li>Your school may have done away with winners and losers, but life may not. In some schools they have abolished failing grades and they’ll give you as many times as you want to get the right answer. This doesn’t bear the slightest resemblance to ANYTHING in real life.</li><li>Life is not divided into semesters. You don’t get summers off and very few employers are interested in helping you find yourself. Do that on your own time.</li><li>Television is NOT real life. In real life people actually have to leave the coffee shop and go to jobs.</li><li>Be nice to nerds. Chances are you’ll end up working for one.</li><li>Before you were born your parents weren’t as boring as they are now. They got that way paying your bills, cleaning up your room and listening to you tell them how idealistic you are. And by the way, before you save the rain forest from the blood-sucking parasites of your parents’ generation, try delousing the closet in your bedroom ⭐️ </li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.se.rit.edu/~jrv/personal/RulesForStudents.html" target="_blank" rel="noopener">https://www.se.rit.edu/~jrv/personal/RulesForStudents.html</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Check before you commit</title>
      <link href="/blog/Check-before-you-commit/"/>
      <url>/blog/Check-before-you-commit/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/7" target="_blank" rel="noopener">#7</a></strong></p><p>Original post <a href="https://medium.com/@onmyway133/check-before-you-commit-5a7601cffc87" target="_blank" rel="noopener">https://medium.com/@onmyway133/check-before-you-commit-5a7601cffc87</a></p><hr><p>We usually have some experiment code that we don’t want they to step into our commit. I usually mark my experiment with // <test> but sometimes forget to unstage that<br>Starting with 2.9, Git has improvement on its commit hook which makes it globally using hooksPath</test></p><h2 id="Create-pre-commit-file"><a href="#Create-pre-commit-file" class="headerlink" title="Create pre-commit file"></a>Create pre-commit file</h2><p>Create a file called <code>pre-commit</code>, and place it into, for example <code>/Users/khoa/hooks</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://appventure.me/2016/04/04/prevent-accidental-test-code-commits/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> git rev-parse --verify HEAD &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  against=HEAD</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="comment"># Initial commit: diff against an empty tree object</span></span><br><span class="line">  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The special marker tag to mark things which we still need to change</span></span><br><span class="line">marker=<span class="string">"&lt;TEST&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redirect output to stderr.</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;&amp;2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $(git diff --cached -z <span class="variable">$against</span> | grep <span class="variable">$marker</span> | wc -c) != 0 </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    cat &lt;&lt;\EOF</span><br><span class="line">    Error: Still has invalid debug markers <span class="keyword">in</span> code:</span><br><span class="line">EOF</span><br><span class="line">    <span class="built_in">echo</span> `git diff --cached -z <span class="variable">$against</span> -G <span class="variable">$marker</span>`</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="Apply-the-hook"><a href="#Apply-the-hook" class="headerlink" title="Apply the hook"></a>Apply the hook</h2><p>In your project, run <code>git config core.hooksPath /Users/khoa/hooks</code><br>That’s it. Whenever you commit a file with that pattern, it won’t let you commit</p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><p>Try </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;TEST&gt;</span></span><br><span class="line"><span class="type">UserManager</span>.shared.isActive = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>and <code>git commit -m &quot;my commit message&quot;</code> will assert with <code>Error: Still has invalid debug markers in code:</code></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://pre-commit.com/" target="_blank" rel="noopener">http://pre-commit.com/</a></li><li><a href="https://appventure.me/2016/04/04/prevent-accidental-test-code-commits/" target="_blank" rel="noopener">https://appventure.me/2016/04/04/prevent-accidental-test-code-commits/</a></li><li><a href="http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/" target="_blank" rel="noopener">http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown editor</title>
      <link href="/blog/Markdown-editor/"/>
      <url>/blog/Markdown-editor/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/6" target="_blank" rel="noopener">#6</a></strong></p><p>I like writing with markdown, it gives me comfortable experience with complete control over what I want to write. </p><p>I recommend <a href="https://github.com/yoshuawuyts/vmd" target="_blank" rel="noopener">vmd</a> which renders exactly as GitHub. <code>vmd</code> is for rendering only, you need an editor to write, I use <code>Sublime Text</code> because it opens very fast</p><p>I also recommend using <a href="https://github.com/eczarny/spectacle" target="_blank" rel="noopener">spectacle</a> to easily split and organize windows</p><p><img src="https://cloud.githubusercontent.com/assets/2284279/25563860/bf8e576c-2da5-11e7-81b1-dced24653be2.png" alt="vmd"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Open Source</title>
      <link href="/blog/Open-Source/"/>
      <url>/blog/Open-Source/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/5" target="_blank" rel="noopener">#5</a></strong></p><p><a href="https://onmyway133.github.io/opensource/">https://onmyway133.github.io/opensource/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Primary key in Realm</title>
      <link href="/blog/Primary-key-in-Realm/"/>
      <url>/blog/Primary-key-in-Realm/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/4" target="_blank" rel="noopener">#4</a></strong></p><p>Realm is great. But without primary key, it will duplicate the record, like <a href="https://github.com/realm/realm-java/issues/2730" target="_blank" rel="noopener">https://github.com/realm/realm-java/issues/2730</a>, <a href="http://stackoverflow.com/questions/32322460/should-i-define-the-primary-key-for-each-entity-in-realm" target="_blank" rel="noopener">http://stackoverflow.com/questions/32322460/should-i-define-the-primary-key-for-each-entity-in-realm</a>, … So to force ourselves into the good habit of declaring primary key, we can leverage Swift protocol</p><p>Create primary constrain protocol like this</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">PrimaryKeyAware</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">primaryKey</span><span class="params">()</span></span> -&gt; <span class="type">String?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and conform it in out Realm object</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span>: <span class="title">Object</span>, <span class="title">PrimaryKeyAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> firstName: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> lastName: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> id: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">primaryKey</span><span class="params">()</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This way, when using that object in out <code>RealmStorage</code>, we are safe to say that it has a primary key</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealmStorage</span>&lt;<span class="title">T</span>: <span class="title">Object</span>&gt; <span class="title">where</span> <span class="title">T</span>: <span class="title">PrimaryKeyAware</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> realm: <span class="type">Realm</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(realm: <span class="type">Realm</span> = <span class="type">RealmProvider</span>.realm()) &#123;</span><br><span class="line">    <span class="keyword">self</span>.realm = realm</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(<span class="number">_</span> objects: [T])</span></span> &#123;</span><br><span class="line">    <span class="keyword">try</span>? realm.write &#123;</span><br><span class="line">      realm.add(objects, update: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The usage is like this</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> profile = <span class="type">Profile</span>()</span><br><span class="line"><span class="keyword">let</span> storage = <span class="type">RealmStorage</span>&lt;<span class="type">Profile</span>&gt;()</span><br><span class="line">storage.save([profile])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to take an app from a private framework in macOS</title>
      <link href="/blog/How-to-take-an-app-from-a-private-framework-in-macOS/"/>
      <url>/blog/How-to-take-an-app-from-a-private-framework-in-macOS/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/3" target="_blank" rel="noopener">#3</a></strong></p><p>The other day I was browsing through <a href="https://github.com/sindresorhus/touch-bar-simulator" target="_blank" rel="noopener">https://github.com/sindresorhus/touch-bar-simulator</a>, it was very brilliant of him to pull <code>IDETouchBarSimulatorHostWindowController</code> from <code>DFRSupportKit.framework</code>. This is worth checking out</p><p><img src="https://github.com/sindresorhus/touch-bar-simulator/raw/master/screenshot.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Configuration closure in Swift</title>
      <link href="/blog/Configuration-closure-in-Swift/"/>
      <url>/blog/Configuration-closure-in-Swift/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/2" target="_blank" rel="noopener">#2</a></strong></p><p>When I was reading through Swinject, I found something interesting <a href="https://github.com/Swinject/Swinject/blob/master/Sources/Container.swift" target="_blank" rel="noopener">https://github.com/Swinject/Swinject/blob/master/Sources/Container.swift</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(parent: <span class="type">Container?</span> = <span class="literal">nil</span>, registeringClosure: (<span class="type">Container</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">self</span>.<span class="keyword">init</span>(parent: parent)</span><br><span class="line">  registeringClosure(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>init</code> has a <code>closure</code> that makes configuration easy, much like a <code>Builder</code> pattern. So I think we can learn from that and make a <code>Configurable</code> protocol</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Configurable</span>: <span class="title">class</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Configurable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">config</span><span class="params">(block: <span class="params">(<span class="keyword">Self</span>)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">    block(<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span> : <span class="title">Configurable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>With this, we can init some class with less hassle</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = <span class="type">UIView</span>().config &#123;</span><br><span class="line">  $<span class="number">0</span>.backgroundColor = .white</span><br><span class="line">  $<span class="number">0</span>.layer.cornerRadius = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello world, again</title>
      <link href="/blog/Hello-world-again/"/>
      <url>/blog/Hello-world-again/</url>
      
        <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/1" target="_blank" rel="noopener">#1</a></strong></p><p>I’ve used Wordpress, then moved to GitHub Pages with <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>, <a href="http://octopress.org/" target="_blank" rel="noopener">Octopress</a>, <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>, <a href="https://github.com/spf13/hugo" target="_blank" rel="noopener">Hugo</a>. You can view my page here <a href="http://fantageek.com/" target="_blank" rel="noopener">http://fantageek.com/</a>. It was good with all the custom themes and <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a></p><p>But then I was a bit lazy with all the commands <code>generate, commit, deploy</code>, it hinders me from writing, so I moved to <a href="https://medium.com/@onmyway133" target="_blank" rel="noopener">Medium</a>. </p><p>The only thing I like about Medium is its discovery, your posts have high chanced of finding and viewing by people. What’s the point of writing if no one read it? But then I miss all the awesome markdown features of GitHub Pages. Medium is easy to use, but it seems it’s not for hackers, and I find it really uncomfortable when adding code block and headings. Medium also lists my comments as stories, which is kind of 😲 </p><p>I like to write fast, and with good comments system, and I love Markdown.</p><p>I like GitHub. I use GitHub for my <a href="https://github.com/onmyway133/notes" target="_blank" rel="noopener">notes</a>, so I think I will use it for my blog as well. Hope all these GitHub convenience will encourage me to write more often. This will, of course, be less discoverable by people. So if you by any chance visit this blog, ohayou from me 👋 </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
