{"pages":[{"title":"About","text":"Ohayou üëã Working GitHub (1.3k+ followers, 200+ repo) CocoaPods ‚òîÔ∏è (45k+ apps touched, 3.4m+ downloads) Stackoverflow ü§ò (33k reputation, 10.2m+ people reached, 385+ answers) Gumroad ü§†‚ù§Ô∏è (60k+ views) Product Hunt üï∫ Writing Medium üèÑ (2.1k+ followers, 85k monthly views) Dev üë®‚Äçüíª (1.2k+ followers, 150k+ views) GitHub blog ü•Å (5k monthly views) Speaking SpeakerDeck üë®‚Äçüé§ Activity Twitter üê¶ Story üòá Client projects üçé 500px Linkedin üôÑ Reading list üìö Archives üçµ GitHub Sponsor","link":"/about/index.html"},{"title":"","text":"Home Blog About I make apps, open source and write blogs Home About Apps Open source GitHub Twitter Gumroad Product Hunt Email const options = { time: '0.5s', mixColor: '#fff', backgroundColor: '#fff', buttonColorDark: '#100f2c', buttonColorLight: '#fff', saveInCookies: false, label: 'üåì', autoMatchOsTheme: false } const darkmode = new Darkmode(options); darkmode.showWidget();","link":"/apps/index.html"},{"title":"","text":"div.introduction { display: flex; justify-content: center; flex-direction: column; align-items: center; } div.introduction div.image img { width: 100px; height: auto; margin-bottom: 16px; border-radius: 5px; } div.introduction h1 { color: #fff; font-family: monospace; overflow: hidden; border-right: .15em solid orange; white-space: nowrap; margin: 0 auto; letter-spacing: .15em; animation: typing 5.0s steps(10, end), blink-caret .5s step-end infinite; } @keyframes typing { from { width: 0 } to { width: 50% } } @keyframes blink-caret { from, to { border-color: transparent } 50% { border-color: orange } }","link":"/apps/introduction.css"},{"title":"","text":"div#filter-container { display: flex; align-items: center; justify-content: center; margin-top: 10%; height: 60px; } div#filter-items { display: inline-flex; background-color: #fff; box-shadow: 0 0 1px 0 rgba(52, 46, 173, 0.25), 0 15px 30px 0 rgba(52, 46, 173, 0.1); border-radius: 12px; overflow: hidden; padding: 10px; } a.filter-item { display: flex; flex-direction: column; justify-content: center; align-items: center; width: 100px; text-decoration: none; padding: 10px; } a.filter-item:hover { background-color: rgb(239, 240, 241); border-radius: 10px; } a.filter-item:active { transform: scale(0.9); } a.filter-item.selected { background-color: rgb(239, 240, 241); border-radius: 10px; } span.material-icons { font-family: \"Material Icons\"; display: block; margin-bottom: 4px; font-size: 26px; color: mix(#fff, #342ead, 60%); transition: 0.25s ease; } span.name { display: block; font-size: 13px; color: mix(#fff, #342ead, 70%); transition: 0.25s ease; font-family: 'Open Sans', sans-serif; font-weight: 500; }","link":"/apps/filter.css"},{"title":"","text":"div.navigation { height: 100px; margin-right: 50px; } div.navigation div { display: flex; justify-content: flex-end; } div.navigation a { font-family: 'Open Sans', sans-serif; color: cornsilk; text-decoration: none; padding: 5px 10px; font-weight: 900; margin-right: 8px; } div.navigation a:hover { background-color: rgba(10, 10, 10, 0.3); border-radius: 4px; }","link":"/apps/navigation.css"},{"title":"","text":"@keyframes move_wave { 0% { transform: translateX(0) translateZ(0) scaleY(1) } 50% { transform: translateX(-25%) translateZ(0) scaleY(0.55) } 100% { transform: translateX(-50%) translateZ(0) scaleY(1) } } .waveWrapper { overflow: hidden; position: absolute; left: 0; top: 0; width: 100%; height: 48%; margin: auto; z-index: -1; } .waveWrapperInner { position: absolute; width: 100%; overflow: hidden; height: 100%; bottom: -1px; background-image: linear-gradient(to top, #28cf8f 20%, #78ee9b 80%); } .bgTop { z-index: 15; opacity: 0.5; } .bgMiddle { z-index: 10; opacity: 0.75; } .bgBottom { z-index: 5; } .wave { position: absolute; left: 0; width: 200%; height: 100%; background-repeat: repeat no-repeat; background-position: 0 bottom; transform-origin: center bottom; } .waveTop { background-size: 50% 100px; } .waveAnimation .waveTop { animation: move-wave 3s; -webkit-animation: move-wave 3s; -webkit-animation-delay: 1s; animation-delay: 1s; } .waveMiddle { background-size: 50% 120px; } .waveAnimation .waveMiddle { animation: move_wave 10s linear infinite; } .waveBottom { background-size: 50% 100px; } .waveAnimation .waveBottom { animation: move_wave 15s linear infinite; }","link":"/apps/wave.css"},{"title":"","text":"div#cards { display: flex; justify-content: center; flex-direction: row; flex-wrap: wrap; margin: 5%; min-height: 10%; } div.card { overflow: hidden; float: left; width: 220px; color: #232330; text-align: center; border-radius: 6px; border-color: silver; box-shadow: 1px 4px 4px rgba(230, 191, 18, 0.5); font-family: 'Open Sans', sans-serif; margin: 30px 20px; transition: all .5s ease-in-out; } div.card:hover { transform: scale(1.2); } div.card:hover div.content-container { filter: blur(10px); } div.card div.overlay { position: fixed; display: none; width: 100%; height: 100%; top: 0; left: 0; z-index: 2; cursor: pointer; } div.card div.blur { position: fixed; width: 100%; height: 100%; top: 0; left: 0; } div.card:hover div.overlay { display: block; } div.overlay-content-container { display: flex; position: fixed; left: 0; bottom: 0; width: 100%; flex-direction: column; justify-content: flex-end; align-items: center; } div.card .app-tagline { height: 50px; } a.app-link { box-shadow:inset 0px 39px 0px -24px #3dc21b; background-color:#44c767; border-radius:4px; border:1px solid #18ab29; display:inline-block; cursor:pointer; color:#ffffff; font-family:Arial; font-size:15px; padding:6px 15px; text-decoration:none; text-shadow:0px 1px 0px #2f6627; margin-bottom: 10px; width: 68%; } a.app-link:hover { background-color:#5cbf2a; } a.product-hunt { margin-bottom: 10px; } a.app-store { display: inline-block; overflow: hidden; background:url(https://linkmaker.itunes.apple.com/en-us/badge-lrg.svg?releaseDate=2017-08-15&kind=iossoftware&bubble=ios_apps) no-repeat; width: 80%; height: 50px; margin-left: 16%; } a.gumroad-button { margin-bottom: 10px; } div.overlay a:hover { transform: scale(1.1); } div.overlay a:active { position: relative; top: 1px; } div.card div.image-container { margin: 0px; padding: 15px; } div.card img { width: 100%; height: auto; max-height: 180px; } div.content-container { padding: 16px; } span.platform { padding: 4px 6px; font-size: 13px; font-weight: 800; background-color: #12abde; border-radius: 5px; margin: 0 2px; color: white; } div.footer-background { display: flex; flex-direction: column; width: 100%; left: 0; right: 0; margin: 0; padding: 0; } div.footer-background div.footer-extend { background-color: #0099ff; height: 200px; } div.footer { position: relative; } div.footer-links-container { position: absolute; width: 100%; top: 0; left: 0; margin-top: 20%; } div.footer-links { display: flex; flex-direction: row; } div.footer-links ul { list-style-type: none; } div.footer-links li { margin-top: 5px; } div.footer-links div { margin-left: 10%; } div.footer-links a { text-decoration: none; font-size: large; font-family: 'Open Sans', sans-serif; font-weight: 500; color: #fffb00; } div.footer-links li a:hover { color: #d47f1d; }","link":"/apps/styles.css"},{"title":"Gumroad","text":"","link":"/gumroad/index.html"},{"title":"news","text":"radiantav Continually impressed by useful code libraries @onmyway133 creates. You should pay attention to https://github.com/onmyway133 if not already. merowing_ ps. we are hiring, you should apply :) Spek - iOSDevWeekly 439 This new BDD testing framework from Khoa Pham is implemented with Swift 5.1 function builders and uses XCTest assertions. It supports all of the features you‚Äôd expect in a BDD framework, so take a look! Learn Talks - iOSDevWeeky 422 There‚Äôs conference talks, meetup talks, and presentations of all kinds covering iOS development here. List talks by year, by conference or just search for something specific. This site, put together by Khoa Pham isn‚Äôt new, but it‚Äôs a complete re-design and it‚Äôs much faster and nicer to use than the old version. üëç FinderGo - Mac Informer Active writer - freeCodeCamp - 40 Active Business Publications on Medium That You Must Follow Fritz ML Final - Announcing the Winners of the Fritz ML Grants PushNotifications - raywenderlich - Push Notifications Tutorial: Getting Started DeepDiff - Vipps - tweet A better way to update UICollectionView data in Swift with diff framework - number 1 - Learn Swift from Top 50 Articles for the Past Year (v.2019) kode24koden - 250 kodere knakk kode24-koden Top 25 GitHub Repos to Inspire Your Next Machine Learning Project - Heartbeat: Editors‚Äô Selections for October GifCapture - softpedia - GifCapture for Mac Snowflake - iOSDevWeekly 279 Khoa Pham with a new SVG parsing and rendering library based on CALayers. It supports reading SVGs from a file of course, but you can also create individual elements and combine those as well. Because it‚Äôs all just layers at the end, you can animate and do everything else that a layer can do as well. RoughSwift - iOSDevWeekly 397 Let‚Äôs finish this week‚Äôs code links with a fun one from Khoa Pham. Create hand-drawn representations of geometric shapes and paths. Everything is rendered as a CALayer too which is handy. Puma - iOSDevWeekly 418 Build utilities, written in pure Swift (not that that really matters for build utilities) from Khoa Pham. Obviously it‚Äôs not as comprehensive as something like fastlane, but this does look promising. Active contributor - Top Swift GitHub developers in Norway Speaker - Mobile Era Conference 2017 &amp; 2018 - Speakers How to structure your project and manage static resources in React Native - Lets React 39 An interesting take on folder architecture in React Native, and a cool trick to safely manage static resources in your project. Well written, and a good read overall!","link":"/news/index.html"},{"title":"projects","text":"macOSQuick Check (macOS) Todo manager Alias (macOS) Shortcut manager PastePal (macOS) Pasteboard, note and shortcut manager Foil (macOS) Keyboard locker Push Hero (macOS) Test iOS push notifications Key Fighter (macOS) Easy to remember keyboard shortcut Elegant Converter (macOS) Mac app to convert audio and videos to many formats Quick Access (macOS) Quick access to favorite files, folders and apps Where IP (macOS) Monitor public ip Frame Recorder (macOS) Recorder app with device frame in gif and movie format Hacker Pad (macOS) Scratch pad for hackers Almighty (macOS) Powerful configurations for macOS Video Downloader (macOS) Download video from many sources and save as mp3 Icon Generator (macOS) Generate app icons for iOS, macOS and support Icns format Push Notifications (macOS) Test push notifications for iOS asd Android apps watchOSDev News (watchOS) Dev news top stories for watch Quick Math (watchOS) Quick math expression solver for watch iOSEase (iOS) Relax with gentle sound What Is This (iOS) Reverse Image Search WebFantageek.com archive Personal blog giupnhanh.com archive Question and answers board NSArticle.com archive Awesome tech articles curation LearnTalks.com Awesome conference and meetup talks https://www.kode24.no/kodenytt/jeg-samler-foredrag-pa-learntalkscom/70438060","link":"/projects/index.html"},{"title":"Product Hunt","text":"macOSQuick Check (macOS) Todo manager Alias (macOS) Shortcut manager PastePal (macOS) Pasteboard, note and shortcut manager Foil (macOS) Keyboard locker Push Hero (macOS) Test iOS push notifications Key Fighter (macOS) Easy to remember keyboard shortcut Elegant Converter (macOS) Mac app to convert audio and videos to many formats Quick Access (macOS) Quick access to favorite files, folders and apps Where IP (macOS) Monitor public ip Frame Recorder (macOS) Recorder app with device frame in gif and movie format Hacker Pad (macOS) Scratch pad for hackers Almighty (macOS) Powerful configurations for macOS Video Downloader (macOS) Download video from many sources and save as mp3 Icon Generator (macOS) Generate app icons for iOS, macOS and support Icns format Push Notifications (macOS) Test push notifications for iOS asd Android apps watchOSDev News (watchOS) Dev news top stories for watch Quick Math (watchOS) Quick math expression solver for watch iOSEase (iOS) Relax with gentle sound What Is This (iOS) Reverse Image Search WebFantageek.com archive Personal blog giupnhanh.com archive Question and answers board NSArticle.com archive Awesome tech articles curation LearnTalks.com Awesome conference and meetup talks https://www.kode24.no/kodenytt/jeg-samler-foredrag-pa-learntalkscom/70438060","link":"/producthunt/index.html"},{"title":"","text":"body { background-color: aquamarine; }","link":"/pastepal/style.css"},{"title":"speaking","text":"Here are the talks I‚Äôve made so far Objective C Runtime, at 2359 Media, 2014Using block in Objective C, at 2359 Media, 2014Debugging using LLDB, at 2359 Media, 2015A Taste of MVVM + RxSwift, at Mobile Era Conference Oslo, 2017Collection Update, at Cocoaheads, Oslo, 2017 Swift Talks at FINN.no (CoreML, Diffing Algorithms and iOS Architecture) From Xcode plugin to Xcode extension at Mobile Era Conference, Oslo, 2018Getting started with Flutter, at Shortcut, 2019Unit Testing in iOS, at Shortcut, Oslo, 2019Pragmatic Machine Learning for mobile apps, at Mobile Era Community, Oslo, 2019 Mobile Era 2019 for Community - Release Management &amp; ML for Mobile Devs Better AppStore rating, at Shortcut, Oslo, 2020","link":"/speaking/index.html"},{"title":"Search","text":"","link":"/search/index.html"},{"title":"support","text":"Thanks for downloading my app. For any inquiries, please contact me at onmyway133@gmail.com","link":"/support/index.html"},{"title":"writing","text":"Here are my articles on Medium and other publications Curation fantastic-android-animation üí¶ A collection of Android animation repos fantastic-android-architecture üè∞ Better ways to structure Android apps fantastic-ios-animation ‚òîÔ∏è A collection of iOS animation repos fantastic-ios-architecture üèØ Better ways to structure iOS apps fantastic-machine-learning üé∞ A curated list of machine learning resources, preferably in Swift awesome-voip ü§ôLearning VoIP, RTP, pjsip and SIP awesome-online-earning üí∞Ways to earn extra awesome-git-commands üç¥ Useful git commands for everyday use fantastic-conference-videos üé∏ Conference videos Best resources for software engineering Getting to know some pragmatic programming language features 20 recommended utility apps for macOS in 2018 Awesome resources to get started in learning blockchain and cryptocurrency Useful git commands for everyday use! Best places to learn iOS development freeCodeCamp Learn iOS best practices by building a simple recipes app How to structure your project and manage static resources in React Native How to add app icons and splash screens to a React Native app in staging and production Flawless Apps https://medium.com/flawless-app-stories/useful-git-commands-for-everyday-use-e1a4de64037d ‚≠êÔ∏è https://medium.com/flawless-app-stories/vision-in-ios-text-detection-and-tesseract-recognition-26bbcd735d8f https://medium.com/flawless-app-stories/machine-learning-in-ios-turi-create-and-coreml-5ddce0dc8e26 https://medium.com/flawless-app-stories/machine-learning-in-ios-azure-custom-vision-and-coreml-645e93f35eee https://medium.com/flawless-app-stories/detecting-avengers-superheroes-in-your-ios-app-with-ibm-watson-and-coreml-fe38e493a4d1 https://medium.com/flawless-app-stories/playground-driven-development-in-swift-cf167489fe7b ‚≠êÔ∏è https://medium.com/flawless-app-stories/a-better-way-to-update-uicollectionview-data-in-swift-with-diff-framework-924db158db86 ‚≠êÔ∏è‚≠êÔ∏è https://medium.com/flawless-app-stories/url-routing-with-compass-d59c0061e7e2 https://flawlessapp.io/blog/a-taste-of-mvvm-and-reactive-paradigm/ ‚≠êÔ∏è https://medium.com/flawless-app-stories/a-taste-of-mvvm-and-reactive-paradigm-5288a819cca1 ‚≠êÔ∏è https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è https://medium.com/flawless-app-stories/simplifying-communication-patterns-with-closure-in-swift-1938414468b3 Heartbeat https://heartbeat.fritz.ai/building-a-camera-calculator-with-vision-and-tesseract-ocr-in-ios-26f16240fe51 ‚≠êÔ∏è https://heartbeat.fritz.ai/25-open-source-machine-learning-repos-to-inspire-your-next-project-3b027a90155 ‚≠êÔ∏è React Native Training https://medium.com/react-native-training/facebook-sdk-with-login-for-react-native-apps-in-2018-196601804f66 ‚≠êÔ∏è https://medium.com/react-native-training/firebase-sdk-with-firestore-for-react-native-apps-in-2018-aa89a67d6934 ‚≠êÔ∏è https://medium.com/react-native-training/fixing-react-native-issues-and-happy-deploy-to-bitrise-fabric-circleci-44da4ab1487b ‚≠êÔ∏è https://medium.com/react-native-training/position-element-at-the-bottom-of-the-screen-using-flexbox-in-react-native-a00b3790ca42 ‚≠êÔ∏è https://medium.com/react-native-training/react-native-bridging-how-to-make-linear-gradient-view-83c3805373b7 ‚≠êÔ∏è https://medium.com/react-native-training/how-to-handle-background-app-refresh-with-healthkit-in-react-native-3a32704461fe ‚≠êÔ∏è https://medium.com/react-native-training/how-to-dismiss-keyboard-with-react-navigation-in-react-native-apps-4b987bbfdc48 The Startup https://medium.com/swlh/introducing-learn-talks-awesome-conference-and-meetup-talks-e97c8cf7e0f kode24.no https://www.kode24.no/kodenytt/jeg-samler-foredrag-pa-learntalkscom/70438060 ‚≠êÔ∏è https://www.kode24.no/kodenytt/my-favorite-wwdc-2019-sessions/71183503 https://www.kode24.no/koden-bak/lagde-sitt-eget-drommeverktoy-til-macos/71285295 AppCoda https://www.appcoda.com.tw/playground-driven-development/ Bitrise https://blog.bitrise.io/using-bitrise-ci-for-android-apps ‚≠êÔ∏è","link":"/writing/index.html"},{"title":"","text":"!function(e){function t(n){if(a[n])return a[n].exports;var o=a[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var a={};t.m=e,t.c=a,t.d=function(e,a,n){t.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:n})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,a){if(1&a&&(e=t(e)),8&a)return e;if(4&a&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&a&&\"string\"!=typeof e)for(var o in e)t.d(n,o,function(t){return e[t]}.bind(null,o));return n},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,\"a\",a),a},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=0)}([function(){function e(e,t){e.innerHTML=\"\",Array.from(t).map(t=>{const a=document.createElement(\"a\");e.appendChild(a);const n=document.createElement(\"div\");n.className=\"card\",a.appendChild(n);const o=document.createElement(\"div\");o.className=\"image-container\",n.appendChild(o),o.style.backgroundColor=void 0===t.background?\"rgba(200, 200, 200, 1.0)\":t.background;const c=document.createElement(\"img\");c.src=`../${t.slug}/icon.png`,o.appendChild(c);const r=document.createElement(\"div\");r.className=\"content-container\",n.appendChild(r);const s=document.createElement(\"h3\");s.className=\"app-name\",s.textContent=t.name,r.appendChild(s);const d=document.createElement(\"div\");d.className=\"platforms\",r.appendChild(d),void 0!==t.platforms&&t.platforms.forEach(e=>{const t=document.createElement(\"span\");t.className=\"platform\",t.innerHTML=e,d.appendChild(t)});const i=document.createElement(\"h5\");i.className=\"app-tagline\",i.textContent=t.tagline,r.appendChild(i);const p=document.createElement(\"div\");p.className=\"overlay\",n.appendChild(p);const l=document.createElement(\"div\");if(l.className=\"overlay-content-container\",p.appendChild(l),void 0!==t.appstore){const e=[];void 0!==t.appstore.macOS&&e.push(t.appstore.macOS),void 0!==t.appstore.iOS&&e.push(t.appstore.iOS),void 0!==t.appstore.watchOS&&e.push(t.appstore.watchOS),e.forEach(e=>{const t=document.createElement(\"a\");t.target=\"_blank\",l.appendChild(t),t.className=\"app-store\",t.href=\"https://apps.apple.com/app/\"+e})}if(void 0!==t.gumroad){const e=document.createElement(\"a\");e.target=\"_blank\",l.appendChild(e),e.className=\"gumroad-button\";const a=\"https://gum.co/\"+t.gumroad.id;e.innerText=\"Buy my app\",e.onclick=()=>{window.open(a)}}if(void 0!==t.productHunt){const e=document.createElement(\"a\");e.target=\"_blank\",l.appendChild(e),e.className=\"product-hunt\",e.href=t.productHunt.link;const a=document.createElement(\"img\");a.src=`https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=${t.productHunt.id}&theme=light`,a.style.width=\"80%\",e.appendChild(a)}if(void 0!==t.web){const e=document.createElement(\"a\");l.appendChild(e),e.href=t.web.link,e.className=\"app-link\",e.innerText=\"View\"}else if(void 0!==t.detail){const e=document.createElement(\"a\");l.appendChild(e),e.href=\"../\"+t.slug,e.className=\"app-link\",e.innerText=\"View\"}return n})}function t(){const e=document.getElementById(\"filter-items\");[{icon:\"apps\",name:\"All\"},{icon:\"desktop_mac\",name:\"macOS\"},{icon:\"phone_iphone\",name:\"iOS\"},{icon:\"watch\",name:\"watchOS\"},{icon:\"phone_android\",name:\"Android\"},{icon:\"web\",name:\"Web\"},{icon:\"extension\",name:\"Extension\"}].forEach(t=>{const n=document.createElement(\"a\");n.href=\"#\",n.className=\"filter-item\",e.appendChild(n);const o=document.createElement(\"span\");o.className=\"material-icons\",o.innerText=t.icon,n.appendChild(o);const c=document.createElement(\"span\");c.className=\"name\",c.innerText=t.name,n.appendChild(c),n.onclick=()=>{a(n,t)}})}function a(t,a){const o=a.name,c=document.getElementById(\"cards\");if(\"All\"==o)e(c,n);else{let t=n.filter(e=>void 0!==e.platforms&&e.platforms.includes(o));e(c,t)}const r=document.querySelector(\"div#filter-items a.filter-item.selected\");null!=r&&r.classList.remove(\"selected\"),t.classList.add(\"selected\")}const n=[{name:\"PastePal\",tagline:\"Pasteboard, note and shortcut manager\",slug:\"pastepal\",productHunt:{link:\"https://www.producthunt.com/posts/pastepal\",id:\"189011\"},appstore:{macOS:\"id1503446680\"},platforms:[\"macOS\"],background:\"#428AEC\",detail:!0},{name:\"Almighty\",tagline:\"Powerful configuration for your mac\",slug:\"almighty\",productHunt:{link:\"https://www.producthunt.com/posts/almighty\",id:\"155506\"},gumroad:{id:\"lbZCs\"},platforms:[\"macOS\"],background:\"#F4BB56\"},{name:\"Alias\",tagline:\"Save and manage shortcuts in your macOS menubar\",slug:\"alias\",productHunt:{link:\"https://www.producthunt.com/posts/alias-3\",id:\"190732\"},appstore:{macOS:\"id1504336758\"},platforms:[\"macOS\"],background:\"#EE7F80\"},{name:\"Push Hero\",tagline:\"Test iOS push notifications\",slug:\"pushhero\",productHunt:{link:\"https://www.producthunt.com/posts/push-hero-2\",id:\"184937\"},appstore:{macOS:\"id1499227284\"},platforms:[\"macOS\"],background:\"#E0E282\"},{name:\"Quick Check\",tagline:\"Slick to do manager for your mac\",slug:\"quickcheck\",productHunt:{link:\"https://www.producthunt.com/posts/quick-check\",id:\"191723\"},appstore:{macOS:\"id1505838529\"},platforms:[\"macOS\"],background:\"#A8DAC0\"},{name:\"Frame Recorder\",tagline:\"Record gif and video with device frame\",slug:\"framerecorder\",productHunt:{link:\"https://www.producthunt.com/posts/frame-recorder\",id:\"167434\"},appstore:{macOS:\"id1479465103\"},platforms:[\"macOS\"],background:\"#F09837\"},{name:\"Learn Talks\",tagline:\"Awesome conference and meetup talks\",slug:\"learntalks\",web:{link:\"https://learntalks.com\"},platforms:[\"Web\"],background:\"#F1F7E2\"},{name:\"Where IP\",tagline:\"Monitor public internet connection\",slug:\"whereip\",productHunt:{link:\"https://www.producthunt.com/posts/where-ip\",id:\"192656\"},appstore:{macOS:\"id1506929908\"},platforms:[\"iOS\",\"macOS\"],background:\"#94C072\"},{name:\"Hacker Type\",tagline:\"Auto complete code snippet in Xcode\",slug:\"hackertype\",productHunt:{link:\"https://www.producthunt.com/posts/hacker-type\",id:\"193667\"},appstore:{macOS:\"id1508116372\"},platforms:[\"macOS\",\"Extension\"],background:\"#A4C6C7\"},{name:\"Elegant Converter\",tagline:\"Convert audio and video to different formats\",slug:\"elegantconverter\",productHunt:{link:\"https://www.producthunt.com/posts/elegant-converter\",id:\"170037\"},appstore:{macOS:\"id1479676588\"},platforms:[\"macOS\"],background:\"#21A29F\"},{name:\"Foil\",tagline:\"Scratch pad for hacker on the menu bar\",slug:\"foil\",productHunt:{link:\"https://www.producthunt.com/posts/foil-keyboard-locker\",id:\"181661\"},appstore:{macOS:\"id1495288414\"},platforms:[\"macOS\"],background:\"#DCD728\"},{name:\"Hacker Pad\",tagline:\"Scratch pad for hacker on the menu bar\",slug:\"hackerpad\",productHunt:{link:\"https://www.producthunt.com/posts/hacker-pad\",id:\"159933\"},appstore:{macOS:\"id1470872890\"},platforms:[\"macOS\"],background:\"#161E35\"},{name:\"Key Fighter\",tagline:\"Easy to remember keyboard shortcut\",slug:\"keyfighter\",productHunt:{link:\"https://www.producthunt.com/posts/key-fighter\",id:\"171153\"},appstore:{macOS:\"id1483031420\"},platforms:[\"macOS\"],background:\"#E3693B\"},{name:\"Dev News\",tagline:\"Dev news from GitHub, Hacker News, Reddit\",slug:\"devnews\",productHunt:{link:\"https://www.producthunt.com/posts/dev-news-for-watch\",id:\"174704\"},appstore:{watchOS:\"id1483110988\"},platforms:[\"watchOS\"],background:\"#3377AB\"},{name:\"Quick Math\",tagline:\"Quick math expression solver for watch\",slug:\"quickmath\",productHunt:{link:\"https://www.producthunt.com/posts/quick-math-for-watch\",id:\"174706\"},appstore:{watchOS:\"id1485794967\"},platforms:[\"watchOS\"],background:\"#DBA36B\"},{name:\"Address Generator\",tagline:\"Generate crypto currency wallet and public address\",slug:\"addressgenerator\",productHunt:{link:\"https://www.producthunt.com/posts/quick-math-for-watch\",id:\"117193\"},appstore:{macOS:\"id1475068107\"},platforms:[\"macOS\"],background:\"#59AAF7\"},{name:\"Video Downloader\",tagline:\"Download videos from Youtube, Vimeo\",slug:\"videodownloader\",productHunt:{link:\"https://www.producthunt.com/posts/video-downloader-2\",id:\"149279\"},gumroad:{id:\"ZIFZ\"},platforms:[\"macOS\"],background:\"#75CA91\"},{name:\"Ease\",tagline:\"Gentle music for relax and sleep\",slug:\"ease\",appstore:{iOS:\"id1047250647\"},platforms:[\"iOS\"],background:\"#5EA6AD\"},{name:\"Xkcd\",tagline:\"Xkcd reader for watch\",slug:\"xkcd\",appstore:{watchOS:\"id1494057691\"},platforms:[\"watchOS\"],background:\"#F09896\"},{name:\"Countries\",tagline:\"Countries cyclopedia for the watch\",slug:\"countries\",appstore:{watchOS:\"id1488996986\"},platforms:[\"watchOS\"],background:\"#2E6C43\"}];t(),e(document.getElementById(\"cards\"),n)}]);","link":"/apps/index.js"},{"title":"opensource","text":"Here are open source projects I make and contribute Favorites EasyAnchor ‚öìÔ∏è Declarative, extensible, powerful Auto Layout for iOS and macOS üöÄ üöÄ Star RoughSwift üéÉCreate hand-drawn, sketchy, comic shape in Swift üöÄ üöÄ Star EasyStash üó≥Easy data persistence in Swift Puma üõ≥ Build utilities in pure Swift Star Gallery üìπ Your next favorite image and video picker ‚≠êÔ∏è XcodeWay ‚õµÔ∏è An Xcode Source Editor Extension that makes navigating to many places easier üöÄ üöÄ üöÄ Star DeepDiff ü¶Ä Diff in Swift üöÄ üöÄ üöÄ Star Snowflake ‚ùÑÔ∏è SVG in Swift üöÄ üöÄ Star Spek üéè Function builder BDD testing framework Star EasyClosure üç© Unified communication with easy closure in Swift Star EasyTheme üëï Theme management in Swift Star EasyNetworking üõ∞Easy networking with chainable type safe Future Star Micro üèéFast type safe SwiftUI style data source for UICollectionView Star Swift frameworks Omnia üóø Everything your projects need to know EasySwiftUI üç∞ Sugar for SwiftUI Scale üéè Unit converter in Swift Star Smile üòÑ Emoji in Swift Star Arcane üî± CommonCrypto in Swift, and more Star SwiftHash üçï MD5 in pure Swift üöÄ üöÄ Star Farge üéàTell the name of hex color Reindeers ‚ùÑÔ∏è XML and HTML parser in Swift ISO8601 üéó Super lightweight ISO8601 Date Formatter in Swift Star Dust üöÄ Unofficial, simple push notification Runtime-Headers üíø iOS, macOS runtime headers Wave üåä Declarative chainable animations in Swift GitHub.swift :octocat: Unofficial GitHub API client in Swift Border üìê Make border for all views Paramount üóº Like Flipboard FLEX, but allows custom action Resolver üéä A simple resolver in Swift Then üèÉ Promise A+ in Swift TestTarget üê≥ Notes on configuring test targets Trackers üïµÔ∏è Trackers in Swift ComputerScienceSwift üë®‚Äçüíª Practice computer science in Swift ParticlePlayground üéä A Swift playground to play with CAEmitterLayer GifMagic üíà Gif maker and extractor in Swift RxLifeCycle üêπ Easy life cycle observation CollectionUpdateExample üõ∂ Demo batch update in UITableView and UICollectionView UsingPlayground üë∂ Demo how to use Playground SwiftSnippets üçÆ A collection of Swift snippets to be used in Xcode Dropdowns üíß Dropdown in Swift Star Cheers üéä Fancy confetti effects in Swift Star Upstream ‚õ≤Ô∏è Adapted Data Source in Swift and a little bit more FantasticDisplay üé¢ Fantastic HUD and toast in Swift ContributionsContributions to hyperoslo Cache üì¶ Nothing but Cache. ‚≠êÔ∏è Imaginary ü¶Ñ Remote images, as easy as one, two, three. ‚≠êÔ∏è Whisper üì£ Whisper is a component that will make the task of display messages and in-app notifications simple. It has three different views inside Tailor üëî A super fast &amp; convenient object mapper tailored for your needs SwiftPackage üèÜ Template to make a Swift package Lightbox üåå A convenient and easy to use image viewer for your iOS app Keychains üîë A keychain wrapper that is so easy to use that your cat could use it. ImagePicker üì∑ Reinventing the way ImagePicker works. Flasker üç∂ Secure User Defaults OhMyAuth üîê Simple OAuth2 library with a support of multiple services. CleanDataSources ‚õ≤Ô∏è Make DataSource great again Tabby ‚õ© A fancy tabbar BarcodeScanner üîé A simple and beautiful barcode scanner PinFloyd MapKit annotations clustering for iOS Contributions to BlindAssist BlindAssist An iOS app which will support the blind in traffic ‚≠êÔ∏è Objective C MEDCategories Common categories Android SlidingMenu üéø Demo how to create sliding menu on Android android-architecture-components-kotlin ü•ã Samples for Android Architecture Components in Kotlin Flutter / Dart json_resolve üê∞Easy resolving deep json using keypath in Dart Windows Phone MarqueeTextBlock üå¥ How to make marquee TextBlock on Windows Phone Xcode plugin Xmas üéÖ üéÑ ‚õÑÔ∏è Xmas plugin for Xcode XcodeColorSense üéà An Xcode plugin that makes working with color easier Xcode extension XcodeColorSense2 üéà An Xcode source editor extension that makes working with color easier iOS app BigBigNumbers üî¢Say the number out loud AskBoard üôã Real time chat with Firebase MathSolver ‚å®Ô∏èMath solver with Vision PhotoFeed üõµ Instagram in Swift 4 Recipes üç£Making Recipes iOS app Xkcd ü¶Ñ Simple Xkcd iOS app macOS app GifCapture üèá Gif capture app for macOS Star FinderGo üê¢ Open terminal quickly from Finder Star YoutubeDownloader üêß Youtube downloader for macOS Simulator üì± Navigate to your app folders quickly FinderFrame üñº Create Finder style image and gif AddressGenerator üí∞ A macOS app to safely generate cryptocurrency address üöÄ üöÄ Electron Lyrics üìª An electron app to show the lyrics of the currently playing song PushNotifications üêâ A macOS app to test push notifications üöÄ üöÄ Star IconGenerator üç± A macOS app to generate app icons üöÄ üöÄ Star Javascript traffic_simulator üöó Traffic simulator using enchant.js chat_webrtc ‚å®Ô∏è Simple chat application using Node.js and WebRTC Data Channel github-changelogs-maker üçª Generate changelogs between 2 latest releases AutoLayoutConverter üêú Convert Cartography to NSLayoutAnchor C rtpproxy ü•Ç Forked from http://www.rtpproxy.org/ with IP handover support Browser extension github-extended :octocat: A Chrome extension to discover more repositories github-chat üí¨ A Chrome extension to enable chat within GitHub Sketch plugin Sketch-Action üîé A Sketch plugin to simulate Spotlight üöÄ üöÄ SketchHeaders üé® Headers from Sketch Slack bot slackbot-yoda üíç Slackbot Yod Misc Archives archived projects notes üìî Issues and solutions I found during development, mostly iOS DarkSide üåå My dark theme based on Atom One Dark emoji ‚ù§Ô∏è List of emojis setup üíª My macOS apps and tools","link":"/opensource/index.html"},{"title":"","text":"Appy App Landing Template. > Home About Features Gallery Pricing FAQ Blog Contacts Sign Up Start your amazing stuff through appy. Lorem ipsum dolor sit amet, consectetur adipiing elit, sed do eiusmod tempor incididunt ut labore et laborused sed do eiusmod tempor incididunt ut labore et laborused. Download App About Appy A beautiful app for consectetur adipisicing elit, sed do eiusmod tempor incididunt ut mollit anim id est laborum. Sedut perspiciatis unde omnis. Lorem ipsum dolor sit amet, consectetur adipiing elit, sed do eiusmod tempor incididunt ut labore et laborused sed do eiusmod tempor incididunt ut labore et laborused. Our Progress Grat Application Ever Lorem ipsum dolor sit amet, consectetur adipiing elit, sed do eiusmod tempor incididunt ut labore et laborused sed do eiusmod tempor incididunt ut labore et laborused. Learn More VIDEO FEATURES Grat Application Ever Lorem ipsum dolor sit amet, consectetur adipiing elit, sed do eiusmod tempor incididunt ut labore et laborused sed do eiusmod tempor incididunt ut labore et laborused. Learn More Features Pwoerful Features As Always Fast &amp; Powerful Lorem ipsum dolor sit amet, consectetur adipisicing elit. Easily Editable Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cloud Storage Lorem ipsum dolor sit amet, consectetur adipisicing elit. Easy Notifications Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fully Responsive Lorem ipsum dolor sit amet, consectetur adipisicing elit. Editable Layout Lorem ipsum dolor sit amet, consectetur adipisicing elit. Testimonials Our Client Loves US Ashekur Rahman Art Dirrector Lorem ipsum dolor sit amet, conseg sed do eiusmod temput laborelaborus ed sed do eiusmod tempo. Ashekur Rahman Art Dirrector Lorem ipsum dolor sit amet, conseg sed do eiusmod temput laborelaborus ed sed do eiusmod tempo. Ashekur Rahman Art Dirrector Lorem ipsum dolor sit amet, conseg sed do eiusmod temput laborelaborus ed sed do eiusmod tempo. Ashekur Rahman Art Dirrector Lorem ipsum dolor sit amet, conseg sed do eiusmod temput laborelaborus ed sed do eiusmod tempo. Ashekur Rahman Art Dirrector Lorem ipsum dolor sit amet, conseg sed do eiusmod temput laborelaborus ed sed do eiusmod tempo. Ashekur Rahman Art Dirrector Lorem ipsum dolor sit amet, conseg sed do eiusmod temput laborelaborus ed sed do eiusmod tempo. Screenshots Screenshot 01 Lorem ipsum dolor sit amet, consectetur adipiing elit, sed do eiusmod tempor incididunt ut labore et laborused sed do eiusmod tempor incididunt ut labore et laborused. Learn More Our features Aour Approach of Design is Prety Simple and Clear Lorem ipsum dolor sit amet, consectetur adipiing elit, sed do eiusmod tempor incididunt ut labore et laborused sed do eiusmod tempor incididunt ut labore et laborused. Learn More Easy Notifications Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor. Fully Responsive Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor. Editable Layout Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor. Download The App Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quibusdam possimus eaque magnam eum praesentium unde. Apple Store Play Store Pricing Plan Our Awesome Pricing Plan Free Easy Installations Unlimited support Uniqe Elements $ 0 /Month Purchase Medium Easy Installations Unlimited support Free Forever $ 49 /Month Purchase Business Easy Installations Unlimited support Free Forever $ 99 /Month Purchase FAQ Frequently Asked Questions Faq first question goes here? Lorem ipsum dolor sit amet, consectetur adipisicing elit, ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. About freewuent question goes here? Lorem ipsum dolor sit amet, consectetur adipisicing elit, ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Why more question goes here? Lorem ipsum dolor sit amet, consectetur adipisicing elit, ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. What question goes here? Lorem ipsum dolor sit amet, consectetur adipisicing elit, ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Faq second question goes here? Lorem ipsum dolor sit amet, consectetur adipisicing elit, ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Third faq question goes here? Lorem ipsum dolor sit amet, consectetur adipisicing elit, ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Why more question goes here? Lorem ipsum dolor sit amet, consectetur adipisicing elit, ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Seventh frequent question here? Lorem ipsum dolor sit amet, consectetur adipisicing elit, ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Subscribe for More Features Subscribe Contact US Find Us By Bellow Details 8-54 Paya Lebar Square 60 Paya Lebar Roa SG, Singapore +65 93901336 +65 93901337 yourmail@gmail.com backpiper.com@gmail.com Copyright &copy;document.write(new Date().getFullYear()); All rights reserved | This template is made with by Colorlib About Services Features Pricing Testimonial Contacts","link":"/pastepal/index.html"}],"posts":[{"title":"A set of NSObject","text":"Issue #21 The other day I was trying t http://mgrebenets.github.io/swift/2015/06/21/equatable-nsobject-with-swift-2 http://stackoverflow.com/questions/33319959/nsobject-subclass-in-swift-hash-vs-hashvalue-isequal-vs https://useyourloaf.com/blog/swift-hashable/","link":"/blog/A-set-of-NSObject/"},{"title":"Badge in GitHub","text":"Issue #117 GitHub is so awesome. It is where people around the world collaborate with each other.It is more awesome to show more about you in your GitHub profile. How about a badge? a welcome text?It is doable with organization. GitHub takes time and name of the organiazations you joined to determined how it displays on your profile This used to be what shown on my GitHub profile https://github.com/onmyway133 For me, I display the text ‚ÄúHello World‚Äù, so I have to create organizations for ‚Äúh‚Äù, ‚Äúe‚Äù, ‚Äúl‚Äù, ‚Äúl‚Äù, ‚Äúo‚Äù, ‚Äúw‚Äù, ‚Äúo‚Äù, ‚Äúr‚Äù, ‚Äúl‚Äù, ‚Äúd‚ÄùTo ensure the order, you can name your organization like ‚Äúorg-h‚Äù, ‚Äúorg-he‚Äù, ‚Äúorg-hel‚Äù, ‚Äúorg-hell‚Äù, ‚Äúorg-hello‚Äù, ‚Ä¶ and you must join the organization in the correct orderI create another GitHub account called https://github.com/fantabot to manage my organizationsYour imaginary is your limit. May your code continue to compile :grin:","link":"/blog/Badge-in-GitHub/"},{"title":"Ad Hominem","text":"Issue #76 I use Twitter a lot, mostly to follow people I like. They tweet cool things about tech and life. I learned a lot. Please don‚Äôt show me the evil sides of the world ~ Michael Learn To Rock - How Many Hours But there‚Äôs also bad side of the story. I see many retweets of people saying bad things about others, mostly in form of Ad Hominem Attacking the person making the argument, rather than the argument itself, when the attack on the person is completely irrelevant to the argument the person is making. From Ad Hominem on c2.com An argumentum ad hominem is any kind of argument that criticizes an idea by pointing something out about the people who hold the idea rather than directly addressing the merits of the idea. ‚Äò‚ÄôAd hominem‚Äô‚Äô is Latin for ‚Äúdirected toward the man (as opposed to the issue at hand)‚Äù. An alternative expression is ‚Äúplaying the man and not the ball‚Äù. Most of these people have the Twitter verified badge. They complain that they have so many followers while they themselves follow hundreds of thousands. They say bad things about others‚Äô hair style and appearance while actively supporting equality. They argue who owns the original gif. They follow one person just to be the first to insult them. The blue verified badge on Twitter lets people know that an account of public interest is authentic. Blowing out someone else‚Äôs candle doesn‚Äôt make yours shine any brighter ~ Anonymous The only thing I can do is I don't like this tweet üòû","link":"/blog/Ad-Hominem/"},{"title":"A bit about Design","text":"Issue #317 UI Why Your App Looks Better in Sketch 8 Tips for Dark Theme Design UX Duolingo User Retention Design Details 30 Things We Often Forget When Designing Mobile Apps Case study club Showcase https://saaspages.xyz/ Resources https://shape.so/ https://icons8.com/ https://icons8.com/animated-icons https://icons8.com/vector-creator https://feathericons.com/ https://iconstore.co/ https://streamlineicons.com/","link":"/blog/A-bit-about-Design/"},{"title":"Another layer of abstraction","text":"Issue #65 https://sandofsky.com/blog/third-party-libraries.html","link":"/blog/Another-layer-of-abstraction/"},{"title":"Case sensitivity in HTTP","text":"Issue #115 Is URL case sensitive ?According to HTML and URLs URLs in general are case-sensitive (with the exception of machine names). There may be URLs, or parts of URLs, where case doesn‚Äôt matter, but identifying these may not be easy. Users should always consider that URLs are case-sensitive. Is header case sensitive?According to RFC 7230 Each header field consists of a case-insensitive field name followed by a colon (‚Äú:‚Äù), optional leading whitespace, the field value, and optional trailing whitespace. Is method case sensitive?Using URLSession, mostly we will get 200 with request.httpMethod = &quot;GET&quot; and 400 with request.httpMethod = &quot;get&quot;. Generally speaking, you should use some popular wrappers Alamofire or Malibu as they are mature enough. Spend your precious time solving more important problems instead. According to RFC 7231 The method token is case-sensitive because it might be used as a gateway to object-based systems with case-sensitive method names.","link":"/blog/Case-sensitivity-in-HTTP/"},{"title":"Back to static site","text":"Issue #394 It‚Äôs been a while since I wrote Hello world, again, the ease of GitHub issue indeed motivates me to write more. In the mean time I also wrote on https://medium.com/@onmyway133 and https://dev.to/onmyway133 and got some traction. Then I started using GitHub pages again, with Jekyll and remote theme, it works great. But then I needed to manually link the GitHub issues to my page, that‚Äôs just labor work. The best combo is to have a GitHub page backed by GitHub issue. After a bit comparison between different static site generators, I actually tried them all, I chose Hexo because I simply like Javascript How to use Hexo to deploy static site How to get all GitHub issues using GraphQL I use the simple cactus theme for now with local searched power by https://www.npmjs.com/package/hexo-generator-search. Then I wrote a node.js script to mirror my GitHub issue to my page, with correct tags and updated date. If you by any chance visit my new page https://onmyway133.github.io/, ohayou from me üëã","link":"/blog/Back-to-static-site/"},{"title":"App backed by website in iOS 9","text":"Issue #32 iOS 9 introduces new ways for your app to work better, backed by your websites Smart App Banners Promoting Apps with Smart App Banners If the app is already installed on a user‚Äôs device, the banner intelligently changes its action, and tapping the banner will simply open the app. If the user doesn‚Äôt have your app on his device, tapping on the banner will take him to the app‚Äôs entry in the App Store To add a Smart App Banner to your website, include the following meta tag in the head of each page where you‚Äôd like the banner to appear: 1&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt; Universal Links Support Universal Links When you support universal links, iOS 9 users can tap a link to your website and get seamlessly redirected to your installed app without going through Safari. If your app isn‚Äôt installed, tapping a link to your website opens your website in Safari. Web Markup Mark Up Web Content If some or all of your app‚Äôs content is also available on your website, you can use web markup to give users access to your content in search results. Using web markup lets the Applebot web crawler index your content in Apple‚Äôs server-side index, which makes it available to all iOS users in Spotlight and Safari search results. Shared Web Credentials Shared Web Credentials Reference Shared web credentials is a programming interface that enables native iOS apps to share credentials with their website counterparts. For example, a user may log in to a website in Safari, entering a user name and password, and save those credentials using the iCloud Keychain. Later, the user may run a native app from the same developer, and instead of the app requiring the user to reenter a user name and password, shared web credentials gives it access to the credentials that were entered earlier in Safari. Reference WWDC 2015 Session 509 Seamless Linking to Your App Integrating your Site and your iOS App","link":"/blog/App-backed-by-website-in-iOS-9/"},{"title":"BuddyBuild and gradle.properties","text":"Issue #109 People advise against storing keys inside build.gradles. We should store them on 1Password and populate our gradle.properties, so don‚Äôt track this file in git. Here is .gitignore file 12345678*.iml/build/gradle.properties/local.properties.gradle.idea There are several ways to help BuddyBuild know about our gradle.properties 1. Using Environment variablesBut when configuring the project on BuddyBuild, it complains about key not found. The solution is to use Environment variables Then in your build.gradle, you can 1buildConfigField 'String', 'MY_KEY', System.getenv(&quot;MY_KEY&quot;) ?: MY_KEY This is because gradle does not know about environment variables. The System.getenv(&quot;MY_KEY&quot;) is for BuddyBuild, and the default MY_KEY is for gradle.properties. Next is to remove this duplication. We can use Groovy Binding. build.gradle does the import import groovy.lang.Binding automatically for us 12345678String environmentKey(variable) { for (Object var : binding.variables) { if (var.value == variable) { return System.getenv(var.key) ?: variable } } return \"\"} 1buildConfigField 'String', 'MY_KEY', environmentKey(MY_KEY) 2. Using Secured File üëçBuddyBuild allows us to define Secured File, here we can upload our gradle.properties And we can use Prebuild script to copy this secured file to our project. BuddyBuild suggests using buddybuild_prebuild.sh but then build fails in Build file '/tmp/sandbox/workspace/app/build.gradle' So, create a script called buddybuild_postclone.sh 123#!/usr/bin/env bashcp $BUDDYBUILD_SECURE_FILES/gradle.properties $BUDDYBUILD_WORKSPACE/gradle.properties","link":"/blog/BuddyBuild-and-gradle.properties/"},{"title":"Check before you commit","text":"Issue #7 Original post https://medium.com/@onmyway133/check-before-you-commit-5a7601cffc87 We usually have some experiment code that we don‚Äôt want they to step into our commit. I usually mark my experiment with // but sometimes forget to unstage thatStarting with 2.9, Git has improvement on its commit hook which makes it globally using hooksPath Create pre-commit fileCreate a file called pre-commit, and place it into, for example /Users/khoa/hooks 1234567891011121314151617181920212223242526#!/bin/sh# https://appventure.me/2016/04/04/prevent-accidental-test-code-commits/if git rev-parse --verify HEAD &gt;/dev/null 2&gt;&amp;1then against=HEADelse # Initial commit: diff against an empty tree object against=4b825dc642cb6eb9a060e54bf8d69288fbee4904fi# The special marker tag to mark things which we still need to changemarker=\"&lt;TEST&gt;\"# Redirect output to stderr.exec 1&gt;&amp;2if test $(git diff --cached -z $against | grep $marker | wc -c) != 0 then cat &lt;&lt;\\EOF Error: Still has invalid debug markers in code:EOF echo `git diff --cached -z $against -G $marker` exit 1fi Apply the hookIn your project, run git config core.hooksPath /Users/khoa/hooksThat‚Äôs it. Whenever you commit a file with that pattern, it won‚Äôt let you commit How to useTry 12// &lt;TEST&gt;UserManager.shared.isActive = true and git commit -m &quot;my commit message&quot; will assert with Error: Still has invalid debug markers in code: Reference http://pre-commit.com/ https://appventure.me/2016/04/04/prevent-accidental-test-code-commits/ http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/","link":"/blog/Check-before-you-commit/"},{"title":"Commit as another user on GitHub","text":"Issue #118 GitHub identifies users by email, so you can totally commit using someone ‚Äòs email. This is how to configure in SourceTree https://help.github.com/articles/signing-commits-using-gpg/ https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/","link":"/blog/Commit-as-another-user-on-GitHub/"},{"title":"Composition in Realm","text":"Issue #13 There is time we have models that have some kind of inheritance, like Dog, Cat, Mouse can be Animal. We can use composition to imitate inheritance, we just need to make sure it has unique primary key Cat and DogThese are pretty much basic Realm objects 1234567891011121314151617class Dog: Object { dynamic var id: Int = 0 required convenience init(json: [String: Any]) { self.init() id &lt;- json.integer(key: \"id\") }}class Cat: Object { dynamic var id: Int = 0 required convenience init(json: [String: Any]) { self.init() id &lt;- json.integer(key: \"id\") }} AnimalHere Animal can contain either dog or cat, we can add more if there are many other ‚Äúinheritance‚Äù of Animal. The required init makes sure Animal can only be init with 1 type of child class 123456789101112131415161718class Animal: Object { dynamic var id: Int = 0 dynamic var cat: Cat? dynamic var dog: Dog? required convenience init(cat: Cat) { self.init() self.cat = cat self.id = cat.id } required convenience init(dog: Dog) { self.init() self.dog = dog self.id = dog.id }}","link":"/blog/Composition-in-Realm/"},{"title":"Configuration closure in Swift","text":"Issue #2 When I was reading through Swinject, I found something interesting https://github.com/Swinject/Swinject/blob/master/Sources/Container.swift 1234public convenience init(parent: Container? = nil, registeringClosure: (Container) -&gt; Void) { self.init(parent: parent) registeringClosure(self)} The init has a closure that makes configuration easy, much like a Builder pattern. So I think we can learn from that and make a Configurable protocol 12345678910protocol Configurable: class {}extension Configurable { func config(block: (Self) -&gt; Void) -&gt; Self { block(self) return self }}extension NSObject : Configurable {} With this, we can init some class with less hassle 1234let view = UIView().config { $0.backgroundColor = .white $0.layer.cornerRadius = 2}","link":"/blog/Configuration-closure-in-Swift/"},{"title":"Advices to students","text":"Issue #8 Some say these are from the book Dumbing Down America of Charles Sykes, some say they are from Bill Gates ‚Äòs speech to high school students. I don‚Äôt know the origin, but they are cool enough, so I tend to share it again and again Life is not fair. Get used to it ‚≠êÔ∏è The world won‚Äôt care about your self-esteem. The world will expect you to accomplish something BEFORE you feel good about yourself You will NOT make 40 thousand dollars a year right out of high school. You won‚Äôt be a vice president with car phone, until you earn both. If you think your teacher is tough, wait till you get a boss. He doesn‚Äôt have tenure. If you mess up, it‚Äôs not your parents‚Äô fault, so don‚Äôt whine about your mistakes, learn from them. Your school may have done away with winners and losers, but life may not. In some schools they have abolished failing grades and they‚Äôll give you as many times as you want to get the right answer. This doesn‚Äôt bear the slightest resemblance to ANYTHING in real life. Life is not divided into semesters. You don‚Äôt get summers off and very few employers are interested in helping you find yourself. Do that on your own time. Television is NOT real life. In real life people actually have to leave the coffee shop and go to jobs. Be nice to nerds. Chances are you‚Äôll end up working for one. Before you were born your parents weren‚Äôt as boring as they are now. They got that way paying your bills, cleaning up your room and listening to you tell them how idealistic you are. And by the way, before you save the rain forest from the blood-sucking parasites of your parents‚Äô generation, try delousing the closet in your bedroom ‚≠êÔ∏è Reference https://www.se.rit.edu/~jrv/personal/RulesForStudents.html","link":"/blog/Advices-to-students/"},{"title":"Dear SDK developers","text":"Issue #84 Dear SDK developers, Please don‚Äôt do swizzling. Give us instructions on where to call your APIs instead of doing unnecessary swizzling. You‚Äôre making it for developers to use, and they know how to write code. Most of the time, you don‚Äôt know how to do swizzling right ‚ö†Ô∏è Please don‚Äôt use configuration file. If possible, please consider configuration via pure code, instead of the plist file that is more exposable in the app bundle. Please don‚Äôt make assumption about the app. Your assumptions about the app the SDK is going to be integrated are not always correct. Every app has its own use case and view hierarchy. Please provide proper releases. Tag and make releases for new changes in the SDK. If there are major changes, there should be migration guide and affect of that to older apps. Also, please write proper change logs, either in release notes or change log file. Please don‚Äôt leave us with a dump header file. Please add documentations to all the functions. Please improve the README. To avoid all the guessing, please improve the README with detail instructions. Please include a sample demo project. When making a demo project, you possible have chances to deal with potential problems. And developers have a clue on which steps they might be missing. Please open source it. You‚Äôre selling your service, not the code. By open sourcing it, the code is clear to everybody, and they might help you with bug fixing and suggestion. To be honest, I was very scared when asked to integrate the SDK with poor documentation and closed source. It‚Äôs like playing the guessing and praying game. If the service is not important to you, and you‚Äôre doing it for fun, then you can ignore these requests. But if you‚Äôre serious about it, then please consider doing. We know you can do better üí™ Thanks ‚ù§Ô∏è","link":"/blog/Dear-SDK-developers/"},{"title":"Debugging iOS app","text":"Issue #43 UIDebuggingInformationOverlay FLEX An in-app debugging and exploration tool for iOS","link":"/blog/Debugging-iOS-app/"},{"title":"Communication between Fragment and Activity","text":"Issue #108 There‚Äôs always need for communication, right üòâ Suppose we have OnboardingActivity that has several OnboardingFragment. Each Fragment has a startButton telling that the onboarding flow has finished, and only the last Fragment shows this button. Here are several ways you can do that 1. EventBus üôÑNearly all articles I found propose this https://github.com/greenrobot/EventBus, but I personally don‚Äôt like this idea because components are loosely coupled, every component and broadcast can listen to event from a singleton, which makes it very hard to reason when the project scales 1data class OnboardingFinishEvent() 1234567891011121314151617class OnboardingActivity: AppCompatActivity() { override fun onStart() { super.onStart() EventBus.getDefault().register(this) } override fun onStop() { EventBus.getDefault().unregister(this) super.onStop() } @Subscribe(threadMode = ThreadMode.MAIN) fun onOnboardingFinishEvent(event: OnboardingFinishEvent) { // finish }} 123456789class OnboardingFragment: Fragment() { override fun onViewCreated(view: View?, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) startButton.onClick { EventBus.getDefault().post(OnboardingFinishEvent()) } }} Read more https://gunhansancar.com/ease-communication-between-activities-fragments-services/ 2. Otto üôÑThis https://github.com/square/otto was deprecated in favor of RxJava and RxAndroid 3. RxJava üôÑWe can use simple PublishSubject to create our own RxBus 12345678910111213141516import io.reactivex.Observableimport io.reactivex.subjects.PublishSubject// Use object so we have a singleton instanceobject RxBus { private val publisher = PublishSubject.create&lt;Any&gt;() fun publish(event: Any) { publisher.onNext(event) } // Listen should return an Observable and not the publisher // Using ofType we filter only events that match that class type fun &lt;T&gt; listen(eventType: Class&lt;T&gt;): Observable&lt;T&gt; = publisher.ofType(eventType)} 1234// OnboardingFragment.ktstartButton.onClick { RxBus.publish(OnboardingFinishEvent())} 12345678// OnboardingActivity.ktoverride fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) RxBus.listen(OnboardingFinishEvent::class.java).subscribe({ // finish })} 4. InterfaceThis is advised here Communicating with Other Fragments. Basically you define an interface OnboardingFragmentDelegate that whoever conforms to that, can be informed by the Fragment of events. This is similar to Delegate pattern in iOS üòâ 1234567891011121314151617181920212223interface OnboardingFragmentDelegate { fun onboardingFragmentDidClickStartButton(fragment: OnboardingFragment)}class OnboardingFragment: Fragment() { var delegate: OnboardingFragmentDelegate? = null override fun onAttach(context: Context?) { super.onAttach(context) if (context is OnboardingFragmentDelegate) { delegate = context } } override fun onViewCreated(view: View?, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) startButton.onClick { delegate?.onboardingFragmentDidClickStartButton(this) } }} 123456class OnboardingActivity: AppCompatActivity(), OnboardingFragmentDelegate { override fun onboardingFragmentDidClickStartButton(fragment: OnboardingFragment) { onboardingService.hasShown = true startActivity&lt;LoginActivity&gt;() }} 5. ViewModelWe can learn from Share data between fragments to to communication between Fragment and Activity, by using a shared ViewModel that is scoped to the activity. This is a bit overkill 123class OnboardingSharedViewModel: ViewModel() { val finish = MutableLiveData&lt;Unit&gt;()} 12345678910class OnboardingActivity: AppCompatActivity(), OnboardingFragmentDelegate { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val viewModel = ViewModelProviders.of(this).get(OnboardingSharedViewModel::class.java) viewModel.finish.observe(this, Observer { startActivity&lt;LoginActivity&gt;() }) }} Note that we need to call ViewModelProviders.of(activity) to get the same ViewModel with the activity 12345678910class OnboardingFragment: Fragment() { override fun onViewCreated(view: View?, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) val viewModel = ViewModelProviders.of(activity).get(OnboardingSharedViewModel::class.java) startButton.onClick({ viewModel.finish.value = Unit }) }} 7. LambdaCreate a lambda in Fragment, then set it on onAttachFragment. It does not work for now as there is no OnboardingFragment in onAttachFragment üò¢ 1234567891011class OnboardingFragment: Fragment() { var didClickStartButton: (() -&gt; Unit)? = null override fun onViewCreated(view: View?, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) startButton.onClick { didClickStartButton?.invoke() } }} 1234567891011class OnboardingActivity: AppCompatActivity() { override fun onAttachFragment(fragment: Fragment?) { super.onAttachFragment(fragment) (fragment as? OnboardingFragment).let { it?.didClickStartButton = { // finish } } }} 8. Listener in Bundle üôÑRead more https://medium.com/groupon-eng/from-fragments-to-activity-the-lambda-way-32c768c72aa9 How to communicate between fragments and activity using ViewModel","link":"/blog/Communication-between-Fragment-and-Activity/"},{"title":"Designing for iPhone X","text":"Issue #90 http://blog.maxrudberg.com/post/166045445103/ui-design-for-iphone-x-top-elements-and-the-notch https://designcode.io/ios11-iphone-x https://medium.muz.li/ui-design-tips-for-iphone-x-2652b2b248ce","link":"/blog/Designing-for-iPhone-X/"},{"title":"Disingenuousness","text":"Issue #31 I‚Äôm very happy to be on open source movement, and it ‚Äòll be great to hear about what people have achieved Open source in 2015: A year of growth Introducing the Open Source Hub Open Source at Apple Emerging Best Practices ‚Ä¢ Ash Furrow And @merowing_ also mentioned in Writing Xcode plugin in Swift Attribution Writing this was much simpler because I was able to look at other people plugins, mostly those related to console, without them being open sourcing it would be more work to figure this stuff out with hopper. Open source helps us move forward, learn and share together The dark side of the Force Star Wars: Episode V - The Empire Strikes Back Luke: Is the dark side stronger? Yoda: No, no, no. Quicker, easier, more seductive. It‚Äôs a pain to see plagiarism around Open Source Plagiarism Imitation is the sincerest form of flattery Restore original licenses Open source softwares are in fact intellectual properties, and the authors should get acknowledgement for the work that they do. It‚Äôs not fair to take the credit of other‚Äôs work and not giving any attribution By its nature, open source software has a unique relationship with intellectual property rights One thing that‚Äôs not up for debate in most circles is that it‚Äôs dishonest and disingenuous to take someone else‚Äôs project, modify it slightly, and call it your own. Further, regardless of whether or not a project crosses that line, it must (by the terms of most open source licenses) acknowledge the original work/author. And the reaction Attribute Original Author Open Source Plagiarism DMCA takedown on repos that rip off Async @theandreamazz It‚Äôs always sad to see blatant plagiarism, and I think it really hurts the community more than the author itself. It gives people a good reason to keep the sources private. Being niceI often hear people say that It is easier to find good developer than developer with good attitude Building Online Communities Being Polite in Open Source MINSWAN for iOS Github also states that We understand and agree that copying others‚Äô work without permission goes against the spirit of the open source community Do the right things Licenses for OSS Code How do I properly credit an original code‚Äôs developer for her open source contribution? Is it MIT ‚Äòs fault? Definitely no @TProphet False choice. Giving up freedom does not lead to more security, just less freedom. Takeaways Don‚Äôt take things personally It‚Äôs hard to be perfect, but we can learn to do the right things We may do the wrong things, but don‚Äôt worry, there ‚Äòll be help via Issues and Pull Requests","link":"/blog/Disingenuousness/"},{"title":"Favorite WWDC 2017 sessions","text":"Issue #56 Source WWDC 2017 Introducing Core ML Core ML Introducing ARKit: Augmented Reality for iOS ARKit What‚Äôs New in Swift String Generic Codable Advanced Animations with UIKit Multiple animation Interactive animation Natural Language Processing and your Apps NSLinguisticTagger What‚Äôs New in Cocoa Touch Large title Drag and drop File management Safe area What‚Äôs New in Foundation KeyPath Observe Codable Debugging with Xcode 9 Wireless debugging View controller debugging Core ML in depth Model Core ML tools Vision Framework: Building on Core ML Detection Track What‚Äôs New in Testing Parallel testing Wait Screenshot Multiple app scenario","link":"/blog/Favorite-WWDC-2017-sessions/"},{"title":"Diff algorithm","text":"Issue #99 I‚Äôve been searching for efficient ways to diff collections, here are some interesting papers that I find Myers An O(ND) Difference Algorithm and Its Variations https://github.com/wokalski/Diff.swift https://github.com/kpdecker/jsdiff https://github.com/raywenderlich/swift-algorithm-club/pull/693/files Wu An O(NP) Sequence Comparison Algorithm https://github.com/kazuhiro4949/EditDistance https://github.com/cubicdaiya/onp https://github.com/hattya/go.diff/blob/master/diff.go https://gist.github.com/tociyuki/acedd33ca4913f1ab8e9 http://t2y.hatenablog.jp/entry/20090802/1249146010 Wagner‚ÄìFischer https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm) http://davedelong.tumblr.com/post/134367865668/edit-distance-and-edit-steps https://github.com/osteslag/Changeset https://github.com/onmyway133/DeepDiff Common Longest Subsequence https://en.wikipedia.org/wiki/Longest_common_subsequence_problem https://github.com/jflinter/Dwifft https://github.com/Frugghi/SwiftLCS Heckel http://documents.scribd.com/docs/10ro9oowpo1h81pgh1as.pdf A technique for isolating differences between files https://github.com/mcudich/HeckelDiff IGListDiff https://github.com/andre-alves/PHDiff https://gist.github.com/ndarville/3166060 https://github.com/myndzi/heckel-diff https://johnresig.com/projects/javascript-diff-algorithm/ https://stackoverflow.com/questions/42755035/difficulty-understanding-paul-heckels-diff-algorithm https://github.com/RACCommunity/FlexibleDiff/blob/diffing/FlexibleDiff/Changeset.swift https://github.com/onmyway133/DeepDiff https://github.com/ra1028/DifferenceKit Hunt-Szymanski The Hunt-Szymanski Algorithm for LCS Read more http://wiki.c2.com/?DiffAlgorithm https://stackoverflow.com/questions/9065536/text-comparison-algorithm https://neil.fraser.name/writing/diff/ https://github.com/davedelong/SE-0240 https://forums.swift.org/t/se-0240-ordered-collection-diffing/19514","link":"/blog/Diff-algorithm/"},{"title":"Dealing with updated pod in BuddyBuild","text":"Issue #149 We‚Äôre using BuddyBuild as our CI. Today one of our dependencies gets a sweat update https://github.com/hyperoslo/BarcodeScanner/releases/tag/4.1.1. So we pod update BarcodeScanner in one of our projects that depends on it. All is fine when running locally. So I make a Pull Request and wait for the build to kick off in BuddyBuild. For some reason, BuddyBuild can‚Äôt pick up the right version of Cocoapods, hence can‚Äôt update the new pods. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[!] The version of CocoaPods used to generate the lockfile (1.3.1) is higher than the version of the current executable (1.1.1). Incompatibility issues may arise.=== CocoaPods ===104 Switching CocoaPods version to 1.1.1105 Using Command Line: gem cleanup &quot;cocoapods&quot;106 Using Command Line: gem uninstall &quot;cocoapods&quot; --all --executables --force107 Using Command Line: gem install &quot;cocoapods&quot; --no-rdoc --no-ri --version &quot;1.1.1&quot;108 Unpacking caches - cocoapods pod specs109 Using Command Line: pod install --no-repo-update110 Analyzing dependencies111 Pre-downloading: `Tailor` from `https://github.com/zenangst/Tailor`, tag `3.0.0`112 [!] Unable to satisfy the following requirements:113 - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`114 - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`115 - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`116 - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`117 - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`118 - `BarcodeScanner (~&gt; 4.0)` required by `Podfile`119 - `BarcodeScanner (= 4.1.1)` required by `Podfile.lock`120 None of your spec sources contain a spec satisfying the dependencies: `BarcodeScanner (~&gt; 4.0), BarcodeScanner (= 4.1.1)`.121 You have either:122 * out-of-date source repos which you can update with `pod repo update`.123 * mistyped the name or version.124 * not added the source repo that hosts the Podspec to your Podfile.125 Note: as of CocoaPods 1.0, `pod repo update` does not happen on `pod install` by default. Trying scriptSo I thought I could run some custom script to force BuddyBuild to update the pods. Start with https://docs.buddybuild.com/builds/custom_build_steps.html I commit the file buddybuild_postclone.sh with 1234#!/usr/bin/env bash pod repo updatepod update BarcodeScanner Didn‚Äôt work. I then update the script with 12345#!/usr/bin/env bash pod repo remove masterpod setuppod install Didn‚Äôt work. Taking a closer look at the log. I see 1Switching CocoaPods version to 1.1.1 It seems BuddyBuild is using cocoapods 1.1.1. Mine is 1.4.0. Specifying cocoapods versionSo I need to specify the correct cocoapods version to make sure I and BuddyBuild are on the same page 12gem install bundlerbundler init And in my Gemfile 1234567# frozen_string_literal: truesource &quot;https://rubygems.org&quot;git_source(:github) {|repo_name| &quot;https://github.com/#{repo_name}&quot; }gem &quot;cocoapods&quot;, '~&gt; 1.0' Then run 1bundler install And check Gemfile.lock to make sure everything is OK FinallyCommit the changes, and now BuddyBuild is picking up the right cocoapods version, hence using the new pods 123456789101112131415=== CocoaPods ===45 Switching CocoaPods version to 1.4.046 Using Command Line: gem cleanup &quot;cocoapods&quot;47 Using Command Line: gem uninstall &quot;cocoapods&quot; --all --executables --force48 Using Command Line: gem install &quot;cocoapods&quot; --no-rdoc --no-ri --version &quot;1.4.0&quot;49 Unpacking caches - cocoapods pod specs50 Using Command Line: pod install --no-repo-update","link":"/blog/Dealing-with-updated-pod-in-BuddyBuild/"},{"title":"Fixing login hanging in macOS High Sierra","text":"Issue #86 Today I met a strange problem. After I enter my password, the progress bar runs to the end, and it is stuck there forever. No matter how many times I try to restart. I finally need to go to Recovery mode by pressing Cmd+R at start up. I then select Get Help Online to open Safari. Strangely enough I wasn‚Äôt connected to Internet After select the wifi icon on the status bar to connect internet, I then restart and can login again. It seems that macOS is checking for something before allowing user to login","link":"/blog/Fixing-login-hanging-in-macOS-High-Sierra/"},{"title":"Generic declaration in Swift","text":"Issue #121 These are different 1class DiffService&lt;T: MKAnnotation &amp; Equatable&gt; 1class DiffService&lt;T: MKAnnotation, Equatable&gt;","link":"/blog/Generic-declaration-in-Swift/"},{"title":"Get to know different JavaScript environments in React Native","text":"Issue #266 Original post https://medium.freecodecamp.org/get-to-know-different-javascript-environments-in-react-native-4951c15d61f5 React Native can be very easy to get started with, and then at some point problems occur and we need to dive deep into it. The other day we had a strange bug that was only occurring in production build, and in iOS only. A long backtrace in the app revealed that it was due to Date constructor failure. const date = new Date(&quot;2019-01-18 12:00:00&quot;)This returns the correct Date object in debug mode, but yields Invalid Date in release. What‚Äôs special about Date constructor? Here I‚Äôm using react native 0.57.5 and no Date libraries. Date constructorThe best resource for learning Javascript is via Mozilla web docs, and entering Date: Creates a JavaScript Date instance that represents a single moment in time. Date objects use a Unix Time Stamp, an integer value that is the number of milliseconds since 1 January 1970 UTC. Pay attention to how Date can be constructed by dateString: dateStringString value representing a date. The string should be in a format recognized by the Date.parse() method (IETF-compliant RFC 2822 timestamps and also a version of ISO8601). So Date constructor uses static method Date.parse under the hood. This has very specific requirement about the format of date string that it supports The standard string representation of a date time string is a simplification of the ISO 8601 calendar date extended format (see Date Time String Format section in the ECMAScript specification for more details). For example, ‚Äú2011-10-10‚Äù (date-only form), ‚Äú2011-10-10T14:48:00‚Äù (date-time form), or ‚Äú2011-10-10T14:48:00.000+09:00‚Äù (date-time form with milliseconds and time zone) can be passed and will be parsed. When the time zone offset is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as local time.The ECMAScript specification states: If the String does not conform to the standard format the function may fall back to any implementation‚Äìspecific heuristics or implementation‚Äìspecific parsing algorithm. Unrecognizable strings or dates containing illegal element values in ISO formatted strings shall cause Date.parse() to return NaN. The reason that we get Invalid Date in iOS must be because the code was run in two different JavaScript environments and they somehow have different implementation of the Date parsing function. JavaScript EnvironmentReact Native guide has a dedicated section about JavaScript environments. When using React Native, you‚Äôre going to be running your JavaScript code in two environments: In most cases, React Native will use JavaScriptCore, the JavaScript engine that powers Safari. Note that on iOS, JavaScriptCore does not use JIT due to the absence of writable executable memory in iOS apps. When using Chrome debugging, all JavaScript code runs within Chrome itself, communicating with native code via WebSockets. Chrome uses V8 as its JavaScript engine. While both environments are very similar, you may end up hitting some inconsistencies. We‚Äôre likely going to experiment with other JavaScript engines in the future, so it‚Äôs best to avoid relying on specifics of any runtime. React Native also uses Babel and some polyfills to have some nice syntax transformers, so some of the code that we write may not be necessarily supported natively by JavascriptCore. Now it is clear that while we debug our app via Chrome debugger, it works because V8 engine handles that. Now try turning off Remote JS Debugging: we can see that the above Date constructor fails, which means it is using JavascriptCore. To confirm this issue, let‚Äôs run our app in Xcode and go to the Safari app on MacOS to enter Development menu. Select the active Simulator and choose JSContext on the current iOS app. Remember to turn off Remote JS Debugging so that the app uses JavascriptCore: Now open the Console in Safari dev tools, and we should have access to JavascriptCore inside our app. Try running the above Date constructor to confirm that it fails: What are legit date string formats?Since 2016, JavascriptCore supports most ES6 features: As of r202125, JavaScriptCore supports all of the new features in the ECMAScript 6 (ES6) language specification And it was fully confirmed a year later in JSC üíï ES6 ES2015 (also known as ES6), the version of the JavaScript specification ratified in 2015, is a huge improvement to the language‚Äôs expressive power thanks to features like classes, for-of, destructuring, spread, tail calls, and much moreWebKit‚Äôs JavaScript implementation, called JSC (JavaScriptCore), implements all of ES6 For more details about JavaScript features supported by different JavaScript engines, visit this ECMAScript comparison table. Now for the date string format, from Date.parse, let‚Äôs visit ECMAScript 2015 specification to see what it says about date string format: ECMAScript defines a string interchange format for date-times based upon a simplification of the ISO 8601 Extended Format. The format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ Where the fields are as follows: ‚ÄúT‚Äù appears literally in the string, to indicate the beginning of the time element. So JavascriptCore requires T specifier and V8 can work without it. The fix for now is to always include that T specifier. This way we always follow ECMAScript standards to make sure it works across different JavaScript environments. const date = new Date(&quot;2019-01-18 12:00:00&quot;.replace(&apos; &apos;, &apos;T&apos;))And now it returns correct Date object. There may be difference between JavascriptCore on iOS and macOS, and among different iOS versions. The lesson learned here is that we should always test our app thoroughly in production and on devices to make sure it works as expected.","link":"/blog/Get-to-know-different-JavaScript-environments-in-React-Native/"},{"title":"Dealing with CSS responsiveness in Wordpress","text":"Issue #208 During the alpha test of LearnTalks, some of my friends reported that the screen is completely blank in the search page, and this happened in mobile only. This article is how I identify the problem and found a workaround for the issue, it may not be the solution, but at least the screen does not appear blank anymore. As someone who likes to keep up with tech via watching conference videos, I thought it might be a good idea to collect all of these to better search and explore later. So I built a web app with React and Firebase, it is a work in progress for now. Due to time constraints, I decided to go first with Wordpress to quickly play with the idea. So there is LearnTalks. The theme Marinate that I used didn‚Äôt want to render the search page correctly. So I head over to Chrome Dev Tool for Responsive Viewport Mode and Safari for Web Inspector The tests showed that the problem only happened on certain screen resolutions. This must be due to CSS @media query which displays different layouts for different screen sizes. And somehow it didn‚Äôt work for some sizes. 12345@media screen and (max-width: 800px) { #site-header { display: none; }} A bit about the rulesThe @media rule is used in media queries to apply different styles for different media types/devices. Media queries can be used to check many things, such as: width and height of the viewportwidth and height of the deviceorientation (is the tablet/phone in landscape or portrait mode?)resolutionUsing media queries are a popular technique for delivering a tailored style sheet (responsive web design) to desktops, laptops, tablets, and mobile phones. So I go to Wordpress Dashboard -&gt; Appearance -&gt; Editor to examine CSS files. Unsurprisingly, there are a bunch of media queries 123456789101112131415161718@media (min-width: 600px) and (max-width: 767px) { .main-navigation { padding: 0; } .site-header .pushmenu { margin-top:0px; } .social-networks li a { line-height:2.1em !Important; } .search { display: none !important; } .customer blockquote { padding: 10px; text-align: justify; }} The .search selector is suspicious display: none !important; The important directive is, well, quite important It means, essentially, what it says; that ‚Äòthis is important, ignore subsequent rules, and any usual specificity issues, apply this rule!‚Äô In normal use, a rule defined in an external stylesheet is overruled by a style defined in the head of the document, which, in turn, is overruled by an in-line style within the element itself (assuming equal specificity of the selectors). Defining a rule with the !important 'attribute' (?) discards the normal concerns as regards the ‚Äòlater‚Äô rule overriding the ‚Äòearlier‚Äô ones. Luckily, this theme allows the ability to Edit CSS, so I can override that to a block attribute to always show search page","link":"/blog/Dealing-with-CSS-responsiveness-in-Wordpress/"},{"title":"Getting started with Swift","text":"Issue #46 Hi, here are some materials I found that are useful for learning Swift and iOS App Development with Swift Hacking with Swift Teaching App Development with Swift CodePath iOS Guides learn-swift About iOS App Architecture Start Developing iOS Apps (Swift)","link":"/blog/Getting-started-with-Swift/"},{"title":"Hello world, again","text":"Issue #1 I‚Äôve used Wordpress, then moved to GitHub Pages with Jekyll, Octopress, Hexo, Hugo. You can view my page here http://fantageek.com/. It was good with all the custom themes and Disqus But then I was a bit lazy with all the commands generate, commit, deploy, it hinders me from writing, so I moved to Medium. The only thing I like about Medium is its discovery, your posts have high chanced of finding and viewing by people. What‚Äôs the point of writing if no one read it? But then I miss all the awesome markdown features of GitHub Pages. Medium is easy to use, but it seems it‚Äôs not for hackers, and I find it really uncomfortable when adding code block and headings. Medium also lists my comments as stories, which is kind of üò≤ I like to write fast, and with good comments system, and I love Markdown. I like GitHub. I use GitHub for my notes, so I think I will use it for my blog as well. Hope all these GitHub convenience will encourage me to write more often. This will, of course, be less discoverable by people. So if you by any chance visit this blog, ohayou from me üëã","link":"/blog/Hello-world-again/"},{"title":"Hashable and Set in Swift","text":"Issue #122 From Set You can create a set with any element type that conforms to the Hashable protocol. By default, most types in the standard library are hashable, including strings, numeric and Boolean types, enumeration cases without associated values, and even sets themselves. From Hashable The Hashable protocol inherits from the Equatable protocol, so you must also add an equal-to operator (==) function for your custom type. 12345678public protocol Hashable : Equatable { /// The hash value. /// /// Hash values are not guaranteed to be equal across different executions of /// your program. Do not save hash values to use during a future execution. public var hashValue: Int { get }} Read more https://useyourloaf.com/blog/swift-hashable/ http://kelan.io/2015/swift-hashable-for-sets/","link":"/blog/Hashable-and-Set-in-Swift/"},{"title":"How to access bookmark url in macOS","text":"Issue #624 By default the approaches above grant you access while the app remains open. When you quit the app, any folder access you had is lost. To gain persistent access to a folder even on subsequent launches, we‚Äôll have to take advantage of a system called Security-Scoped Bookmarks. Add entitlements Use of app-scoped bookmarks and URLs 1234&lt;key&gt;com.apple.security.files.user-selected.read-only&lt;/key&gt;&lt;true/&gt;&lt;key&gt;com.apple.security.files.bookmarks.app-scope&lt;/key&gt;&lt;true/&gt; Enabling Security-Scoped Bookmark and URL Access If you want to provide your sandboxed app with persistent access to file system resources, you must enable security-scoped bookmark and URL access. Security-scoped bookmarks are available starting in macOS v10.7.3. To add the bookmarks.app-scope or bookmarks.document-scope entitlement, edit the target‚Äôs .entitlements property list file using the Xcode property list editor. Use the entitlement keys shown in Table 4-4, depending on which type of access you want. Use a value of for each entitlement you want to enable. You can enable either or both entitlements. 123456789101112131415161718192021222324252627282930313233343536373839func saveBookmark(item: ShortcutItem) { guard let url = item.fileUrl else { return } do { let bookmarkData = try url.bookmarkData( options: .withSecurityScope, includingResourceValuesForKeys: nil, relativeTo: nil ) item.bookmark = bookmarkData } catch { print(\"Failed to save bookmark data for \\(url)\", error) }}func loadBookmark(item: ShortcutItem) -&gt; URL? { guard let data = item.bookmark else { return nil } do { var isStale = false let url = try URL( resolvingBookmarkData: data, options: .withSecurityScope, relativeTo: nil, bookmarkDataIsStale: &amp;isStale ) if isStale { saveBookmark(item: item) } return url } catch { print(\"Error resolving bookmark:\", error) return nil }}_ = url.startAccessingSecurityScopedResource()NSWorkspace.shared.open(url)url.stopAccessingSecurityScopedResource() 123456_ = url.startAccessingSecurityScopedResource()NSWorkspace.shared.selectFile( url.path, inFileViewerRootedAtPath: url.deletingLastPathComponent().path)url.stopAccessingSecurityScopedResource() Read more Modern AppKit File Permissions https://stackoverflow.com/questions/42179567/what-does-startaccessingsecurityscopedresource-actually-do Enabling App Sandbox","link":"/blog/How-to-access-bookmark-url-in-macOS/"},{"title":"Getting started with WWDC 2019","text":"Issue #300 WWDC WWDC special WWDC by Sundell NSHipster WWDC 2019 WWDC 2019 - The Things You May Have Missed 7 essential WWDC session videos for iOS developers The 15 Best WWDC Videos of All Time WWDC Extracted gists Favorite WWDC 2019 sessions Swift 5.1 Property wrappers to remove boilerplate code in Swift Understanding Opaque Return Types in Swift The Swift 5.1 features that power SwiftUI‚Äôs API What‚Äôs new in Swift 5.1 Swift Opaque Result Types Burritos A collection of Swift Property Wrappers How can Property Wrappers and Function Builders be leveraged? SwiftUI SwiftUI About-SwiftUI Swift UI by example Inside SwiftUI‚Äôs Declarative Syntax‚Äôs Compiler Magic Answers to the most common questions about SwiftUI SwiftUI: Getting Started SwiftUI-Cheat-Sheet Understanding Property Wrappers in SwiftUI SwiftUI Framework Learning and Usage Guide SwiftUI-2048 Fucking SwiftUI SwiftUI-Processing SwiftWebUI Building forms with SwiftUI Animations in SwiftUI SwiftUI DesignCode Good to know SwiftUI: Setting Environment Values SwiftUI Layout System Code https://github.com/xtabbas/calculator-checklist https://github.com/alfianlosari/SwiftUI-MovieDB https://github.com/unixzii/SwiftUI-2048 Combine RxSwift to Apple‚Äôs Combine Cheat Sheet Will Combine kill RxSwift? OpenCombine Open-source implementation of Apple‚Äôs Combine framework for processing values over time. CombineSwiftPlayground Combine framework in action ‚Äî Part 2 Using Combine üöÄ Dark Mode How To Adopt Dark Mode In Your iOS App","link":"/blog/Getting-started-with-WWDC-2019/"},{"title":"Hiding back button in navigation bar in iOS","text":"Issue #137 Use a custom NavigationController 12345678910111213141516import UIKitclass NavigationController: UINavigationController { override func viewDidLoad() { super.viewDidLoad() navigationBar.tintColor = .white navigationBar.barStyle = .black navigationBar.isTranslucent = false } override func pushViewController(_ viewController: UIViewController, animated: Bool) { viewController.navigationItem.backBarButtonItem = UIBarButtonItem(title: \"\", style: .plain, target: nil, action: nil) super.pushViewController(viewController, animated: animated) }}","link":"/blog/Hiding-back-button-in-navigation-bar-in-iOS/"},{"title":"How to add drag and drop in SwiftUI","text":"Issue #594 12345678910111213141516171819202122232425262728293031323334353637383940414243444546struct SelectFileView: View { let buttonTitle: String @State var isDrop: Bool = false var body: some View { VStack(alignment: .leading) { Button(action: {}) { Text(buttonTitle) } .buttonStyle(ActionButtonStyle()) .offset(x: -16) Text(\"Alternatively, you can drag and drop file here\") .font(.footnote) .foregroundColor(Color.gray) } .border(isDrop ? R.color.separator : Color.clear) .onDrop(of: [Constants.urlFileType], delegate: self) .padding(.bottom, 32) }}extension SelectFileView: DropDelegate { func dropEntered(info: DropInfo) { self.isDrop = true } func dropExited(info: DropInfo) { self.isDrop = false } func performDrop(info: DropInfo) -&gt; Bool { guard let itemProvider = info.itemProviders(for: [Constants.urlFileType]).first else { return false } itemProvider.loadItem(forTypeIdentifier: Constants.urlFileType, options: nil) { item, error in guard let data = item as? Data, let url = URL(dataRepresentation: data, relativeTo: nil) else { return } } return true }}","link":"/blog/How-to-add-drag-and-drop-in-SwiftUI/"},{"title":"How to add independent page in hexo","text":"Issue #641 Create a new page 1hexo new page mydemo Remove index.md and create index.html, you can reference external css and js in this index.html. Hexo has hexo new page mydemo --slug but it does not support page hierarchy Specify no layout so it is independent page. 123---layout: false---","link":"/blog/How-to-add-independent-page-in-hexo/"},{"title":"Getting activity name through HKWorkoutActivityType in HealthKit","text":"Issue #186 After fetching workouts with HKObjectType.workoutType() , we get HKWorkoutActivityType , which is an enum enum HKWorkoutActivityType : UInt . As of Swift 4.2, there are no way to get enum case as String because this enum has type UInt . Though there will be some manual involved, we can build a generator to get all the enum case names. Here we will write code to generate code, and use that generated code to examine all the values. Execute this Swift code in our iOS app 12345678910111213141516func makeCode(string: String) { let pattern = ‚Äúcase \\\\w*‚Äù let range = NSMakeRange(0, string.count-1) let regex = try! NSRegularExpression(pattern: pattern, options: []) regex .matches(in: string, options: [], range: range) .forEach({ result in let start = string.index(string.startIndex, offsetBy: result.range.lowerBound) let end = string.index(string.startIndex, offsetBy: result.range.upperBound) let substring = String(string[start‚Ä¶end]) let name = substring .replacingOccurrences(of: ‚Äúcase‚Äù, with: ‚Äú‚Äù) .replacingOccurrences(of: ‚Äú ‚Äú, with: ‚Äú‚Äù) .replacingOccurrences(of: ‚Äú\\n‚Äù, with: ‚Äú‚Äù print(‚Äúdictionary[HKWorkoutActivityType.\\(name).rawValue] = \\‚Äù\\(name)\\‚Äù‚Äù) }) Where string is all the cases from HKWorkoutActivityType, for example case archeryThe constant for shooting archery. case bowlingThe constant for bowling case fencingThe constant for fencing. case gymnasticsPerforming gymnastics. case trackAndFieldParticipating in track and field events, including shot put, javelin, pole vaulting, and related sports. What the code does is to use regular expression to examine all the names after case , and build our code 12345dictionary[HKWorkoutActivityType.americanFootball.rawValue] = ‚ÄúamericanFootball‚Äùdictionary[HKWorkoutActivityType.archery.rawValue] = ‚Äúarchery‚Äùdictionary[HKWorkoutActivityType.australianFootball.rawValue] = ‚ÄúaustralianFootball‚Äùdictionary[HKWorkoutActivityType.badminton.rawValue] = ‚Äúbadminton‚Äùdictionary[HKWorkoutActivityType.baseball.rawValue] = ‚Äúbaseball‚Äù The above generated code with dictionary contains rawValue as key and the enum case name as value . Later when we get any HKWorkoutActivityType , we can compare with this dictionary to find the actual name. This is better than hardcode activity name with numbers because those rawValue are just implementation detail","link":"/blog/Getting-activity-name-through-HKWorkoutActivityType-in-HealthKit/"},{"title":"How to access view in fragment in Kotlin","text":"Issue #497 Synthetic properties generated by Kotlin Android Extensions plugin needs a view for Fragment/Activity to be set before hand. In your case, for Fragment, you need to use view.btn_K in onViewCreated override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? { super.onCreateView(inflater, container, savedInstanceState) val view = inflater.inflate(R.layout.fragment_card_selector, container, false) view.btn_K.setOnClickListener{} // access with `view` return view }Or better, you should only access synthetic properties in onViewCreated override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? { super.onCreateView(inflater, container, savedInstanceState) return inflater.inflate(R.layout.fragment_card_selector, container, false) } override fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) btn_K.setOnClickListener{} // access without `view` }Please notice that savedInstanceState parameter should be nullable Bundle?, and also check Importing synthetic properties It is convenient to import all widget properties for a specific layoutin one go: import kotlinx.android.synthetic.main.&lt;layout&gt;.* Thus if the layout filename is activity_main.xml, we‚Äôd importkotlinx.android.synthetic.main.activity_main.*. If we want to call the synthetic properties on View, we should alsoimport kotlinx.android.synthetic.main.activity_main.view.*. Original answer https://stackoverflow.com/questions/34541650/nullpointerexception-when-trying-to-access-views-in-a-kotlin-fragment/51674381#51674381","link":"/blog/How-to-access-view-in-fragment-in-Kotlin/"},{"title":"How to add indicator under tab bar buttons in iOS","text":"Issue #288 selectionIndicatorImage https://developer.apple.com/documentation/uikit/uitabbar/1623456-selectionindicatorimage Should design image with enough height, transparent background and indicator at the bottom Use this property to specify a custom selection image. Your image is rendered on top of the tab bar but behind the contents of the tab bar item itself. The default value of this property is nil, which causes the tab bar to apply a default highlight to the selected item Custom UITabBar or UITabBarController Hide existing tabBar tabBar.isHidden = true Position custom buttons 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import UIKitclass CustomTabBarController: UITabBarController { private let bar = UIView() private var buttons = [UIButton]() override var viewControllers: [UIViewController]? { didSet { populate(viewControllers: viewControllers) } } override func viewDidLoad() { super.viewDidLoad() setup() } private func setup() { tabBar.isHidden = true bar.backgroundColor = R.color.background view.addSubview(bar) NSLayoutConstraint.on([ bar.leftAnchor.constraint(equalTo: view.leftAnchor), bar.rightAnchor.constraint(equalTo: view.rightAnchor), bar.bottomAnchor.constraint(equalTo: view.bottomAnchor), bar.topAnchor.constraint(equalTo: tabBar.topAnchor) ]) } private func populate(viewControllers: [UIViewController]) { buttons.forEach { $0.removeFromSuperview() } buttons = viewControllers.map({ let button = UIButton() button.setImage($0.tabBarItem.image, for: .normal) bar.addSubview(button) return button }) view.setNeedsLayout() } override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() let padding: CGFloat = 20 let buttonSize = CGSize(width: 30, height: 44) let width = view.bounds.width - padding * 20 for (index, button) in buttons.enumerated() { button.center = CGPoint(x: bar.center.x, y: bar.frame.height/2) } }} Handle UITabBarControllerDelegate Override func tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem) tabBar.subviews contains 1 private UITabBarBackground and many private UITabBarButton 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import UIKitclass CustomTabBarController: UITabBarController { let indicator: UIView = { let view = UIView() view.backgroundColor = R.color.primary view.frame.size = CGSize(width: 32, height: 2) view.layer.cornerRadius = 1 return view }() override func viewDidLoad() { super.viewDidLoad() tabBar.addSubview(indicator) self.delegate = self } private func animate(index: Int) { let buttons = tabBar.subviews .filter({ String(describing: $0).contains(\"Button\") }) guard index &lt; buttons.count else { return } let selectedButton = buttons[index] UIView.animate( withDuration: 0.25, delay: 0, options: .curveEaseInOut, animations: { let point = CGPoint( x: selectedButton.center.x, y: selectedButton.frame.maxY - 1 ) self.indicator.center = point }, completion: nil ) } override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() animate(index: selectedIndex) }}extension CustomTabBarController: UITabBarControllerDelegate { override func tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem) { guard let items = tabBar.items, let index = items.firstIndex(of: item) else { return } animate(index: index) }} In iOS 13, we need to use viewDidAppear 12345override func viewDidAppear(_ animated: Bool) { super.viewDidAppear(animated) moveIndicator(index: selectedIndex, animated: false)}","link":"/blog/How-to-add-indicator-under-tab-bar-buttons-in-iOS/"},{"title":"How to add padding to left right view in UITextField","text":"Issue #536 123456789101112131415161718192021222324extension UITextField { func setLeftView(_ view: UIView, padding: CGFloat) { view.translatesAutoresizingMaskIntoConstraints = true let outerView = UIView() outerView.translatesAutoresizingMaskIntoConstraints = false outerView.addSubview(view) outerView.frame = CGRect( origin: .zero, size: CGSize( width: view.frame.size.width + padding, height: view.frame.size.height + padding ) ) view.center = CGPoint( x: outerView.bounds.size.width / 2, y: outerView.bounds.size.height / 2 ) leftView = outerView }}","link":"/blog/How-to-add-padding-to-left-right-view-in-UITextField/"},{"title":"How to add header to NavigationView in Android","text":"Issue #396 Use app:headerLayout 12345678910&lt;com.google.android.material.navigation.NavigationView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:id=\"@+id/navigationView\" android:fitsSystemWindows=\"true\" android:layout_gravity=\"start\" app:menu=\"@menu/drawer_menu\" app:itemIconTint=\"@color/title\" app:itemTextColor=\"@color/title\" app:headerLayout=\"@layout/navigation_header\" /&gt; navigation_header.xml 123456789101112131415&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" xmlns:app=\"http://schemas.android.com/apk/res-auto\"&gt; &lt;androidx.appcompat.widget.AppCompatImageView android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:src=\"@drawable/icon\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintBottom_toBottomOf=\"parent\"/&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;","link":"/blog/How-to-add-header-to-NavigationView-in-Android/"},{"title":"How to animate NSWindow","text":"Issue #609 Use animator proxy and animate parameter 12345678var rect = window.framerect.frame.origin.x = 1000NSAnimationContext.runAnimationGroup({ context in context.timingFunction = CAMediaTimingFunction(name: .easeIn) window.animator().setFrame(rect, display: true, animate: true)}, completionHandler: {})","link":"/blog/How-to-animate-NSWindow/"},{"title":"How to add monkey test to iOS apps","text":"Issue #484 Use SwiftMonkey which adds random UITests gestures Add to UITests target 1234target 'MyAppUITests' do pod 'R.swift', '~&gt; 5.0' pod 'SwiftMonkey', '~&gt; 2.1.0'end TroubleshootingFailed to determine hittability of Button Failed to determine hittability of Button: Unable to fetch parameterized attribute XC_kAXXCParameterizedAttributeConvertHostedViewPositionFromContext, remote interface does not have this capability. This happens when using SwiftMonkey and somewhere in our code uses isHittable, so best to avoid that by having isolated monkey test only 12345678910111213141516171819import XCTestimport SwiftMonkeyclass MonkeyTests: XCTestCase { var app: XCUIApplication! override func setUp() { continueAfterFailure = false app = XCUIApplication() app.launch() } func testMonkey() { let monkey = Monkey(frame: app.frame) monkey.addDefaultUIAutomationActions() monkey.addXCTestTapAlertAction(interval: 100, application: app) monkey.monkeyAround() }} Another workaround is possibly use addDefaultXCTestPublicActions other than addDefaultUIAutomationActions UI Test Activity: Assertion Failure: MonkeyXCTest.swift:33: Failed to get matching snapshots: Timed out while evaluating UI query. This seems related to SwiftMonkey trying to snapshot. Workaround is to remove 1monkey.addXCTestTapAlertAction(interval: 100, application: app)","link":"/blog/How-to-add-monkey-test-to-iOS-apps/"},{"title":"How to add AdMob to Android app","text":"Issue #431 Use AdMob with Firebase https://firebase.google.com/docs/admob/android/quick-start build.gradle 12345678910buildscript { repositories { google() jcenter() } dependencies { classpath 'com.google.gms:google-services:4.3.2' }} app/build.gradle 12345678910111213class Version { class Firebase { static def analytics = \"17.2.0\" static def ads = \"18.2.0\" }}dependencies { implementation \"com.google.firebase:firebase-analytics:$Version.Firebase.analytics\" implementation \"com.google.firebase:firebase-ads:$Version.Firebase.ads\"}apply plugin: 'com.google.gms.google-services' Manifest.xml 12345678&lt;manifest&gt; &lt;application&gt; &lt;!-- Sample AdMob App ID: ca-app-pub-3940256099942544~3347511713 --&gt; &lt;meta-data android:name=\"com.google.android.gms.ads.APPLICATION_ID\" android:value=\"[ADMOB_APP_ID]\"/&gt; &lt;/application&gt;&lt;/manifest&gt; MyApplication.kt 1234567class MyApplication: Application() { override fun onCreate() { super.onCreate() MobileAds.initialize(this) }} AdViewfragment.xml 12345678910&lt;com.google.android.gms.ads.AdView xmlns:ads=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/adView\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" ads:adSize=\"BANNER\" ads:adUnitId=\"ca-app-pub-123456/123456\" ads:layout_constraintBottom_toBottomOf=\"parent\" ads:layout_constraintLeft_toLeftOf=\"parent\" ads:layout_constraintRight_toRightOf=\"parent\"/&gt; Fragment.kt 12345import com.google.android.gms.ads.AdRequestimport com.google.android.gms.ads.AdViewval request = AdRequest.Builder().build()adView.loadAd(request) TroubleshootingLink your app to Firebase option not showing https://support.google.com/admob/answer/6383165?authuser=0 Use standalone AdMob https://developers.google.com/admob/android/quick-start app/build.gradle 123dependencies { implementation 'com.google.android.gms:play-services-ads:18.2.0'} Cannot fit requested classes in a single dex file https://stackoverflow.com/questions/48249633/errorcannot-fit-requested-classes-in-a-single-dex-file-try-supplying-a-main-dex app/build.gradle 12345678910android { defaultConfig { multiDexEnabled true }}dependencies { implementation 'com.android.support:multidex:1.0.3'} Read more http://thetechnocafe.com/a-complete-guide-to-integrating-admob-in-your-android-app/","link":"/blog/How-to-add-AdMob-to-Android-app/"},{"title":"How to animate NSCollectionView changes","text":"Issue #323 Use proxy animator() 12345let indexPath = IndexPath(item: index, section: 0)collectionView.animator().deleteItems(at: Set(arrayLiteral: indexPath))let indexPath = IndexPath(item: 0, section: 0)collectionView.animator().insertItems(at: Set(arrayLiteral: indexPath))","link":"/blog/How-to-animate-NSCollectionView-changes/"},{"title":"How to assert asynchronously in XCTest","text":"Issue #644 123456789101112131415161718192021import XCTestextension XCTestCase { /// Asynchronously assertion func XCTAssertWait( timeout: TimeInterval = 1, _ expression: @escaping () -&gt; Void, _: String = \"\", file _: StaticString = #file, line _: UInt = #line ) { let expectation = self.expectation(description: #function) DispatchQueue.main.asyncAfter(deadline: .now() + timeout) { expression() expectation.fulfill() } let waiter = XCTWaiter() XCTAssertTrue(waiter.wait(for: [expectation], timeout: timeout + 1) == .completed) }}","link":"/blog/How-to-assert-asynchronously-in-XCTest/"},{"title":"How to avoid pitfalls in SwiftUI","text":"Issue #602 Identify by unique id123ForEach(store.blogs.enumerated().map({ $0 }), id: \\.element.id) { index, blog in} ##","link":"/blog/How-to-avoid-pitfalls-in-SwiftUI/"},{"title":"How to batch delete in Core Data","text":"Issue #622 Read Implementing Batch Deletes If the entities that are being deleted are not loaded into memory, there is no need to update your application after the NSBatchDeleteRequest has been executed. However, if you are deleting objects in the persistence layer and those entities are also in memory, it is important that you notify the application that the objects in memory are stale and need to be refreshed. To do this, first make sure the resultType of the NSBatchDeleteRequest is set to NSBatchDeleteRequestResultType.resultTypeObjectIDs before the request is executed. When the request has completed successfully, the resulting NSPersistentStoreResult instance that is returned will have an array of NSManagedObjectID instances referenced in the result property. That array of NSManagedObjectID instances can then be used to update one or more NSManagedObjectContext instances. 1234567891011121314151617181920212223let fetchRequest: NSFetchRequest&lt;NSFetchRequestResult&gt; = Book.fetchRequest()let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)deleteRequest.resultType = .resultTypeObjectIDsdo { let context = CoreDataManager.shared.container.viewContext let result = try context.execute( deleteRequest ) guard let deleteResult = result as? NSBatchDeleteResult, let ids = deleteResult.result as? [NSManagedObjectID] else { return } let changes = [NSDeletedObjectsKey: ids] NSManagedObjectContext.mergeChanges( fromRemoteContextSave: changes, into: [context] )} catch { print(error as Any)}","link":"/blog/How-to-batch-delete-in-Core-Data/"},{"title":"How to build SwiftUI style UICollectionView data source in Swift","text":"Issue #598 It‚Äôs hard to see any iOS app which don‚Äôt use UITableView or UICollectionView, as they are the basic and important foundation to represent data. UICollectionView is very basic to use, yet a bit tedious for common use cases, but if we abstract over it, then it becomes super hard to customize. Every app is unique, and any attempt to wrap around UICollectionView will fail horribly. A sensable approach for a good abstraction is to make it super easy for normal cases, and easy to customize for advanced scenarios. I‚Äôm always interested in how to make UICollectionView easier and fun to write and have curated many open sources here data source. Many of these data source libraries try to come up with totally different namings and complex paradigm which makes it hard to onboard, and many are hard to customize. In its simplest form, what we want in a UICollectionView data source is cell = f(state), which means our cell representation is just a function of the state. We just want to set model to the cell, the correct cell, in a type safe manner. Generic data sourceThe basic is to make a generic data source that sticks with a particular cell 12345class DataSource&lt;T&gt;: NSObject { let items: [T] let configure: (T, UICollectionViewCell) -&gt; Void let select: (UICollectionViewCell, IndexPath) -&gt; Void} This works for basic usage, and we can create multiple DataSource for each kind of model. The problem is it‚Äôs hard to subclass DataSource as generic in Swift and inheritance for ObjcC NSObject don‚Äôt work well. Check for the typesSeeing the problem with generic data source, I‚Äôve tried another approach with Upstream where it‚Äôs easier to declare sections and models. 12345678910111213141516171819let sections: [Section] = [ Section( header: Header(model: Model.header(\"Information\"), viewType: HeaderView.self), items: [ Item(model: Model.avatar(avatarUrl), cellType: AvatarCell.self), Item(model: Model.name(\"Thor\"), cellType: NameCell.self), Item(model: Model.location(\"Asgard\"), cellType: NameCell.self) ] ), Section( header: Header(model: Model.header(\"Skills\"), viewType: HeaderView.self), items: [ Item(model: Model.skill(\"iOS\"), cellType: SkillCell.self), Item(model: Model.skill(\"Android\"), cellType: SkillCell.self) ] )]adapter.reload(sections: sections) This uses the Adapter pattern and we need to handle AdapterDelegate. To avoid the generic problem, this Adapter store items as Any, so we need to type cast all the time. 123456789101112131415161718extension ProfileViewController: AdapterDelegate { func configure(model: Any, view: UIView, indexPath: IndexPath) { guard let model = model as? Model else { return } switch (model, view) { case (.avatar(let string), let cell as Avatarcell): cell.configure(string: string) case (.name(let name), let cell as NameCell): cell.configure(string: name) case (.header(let string), let view as HeaderView): view.configure(string: string) default: break } }} The benefit is that we can easily subclass this Adapter manager to customize the behaviour, here is how to make accordion 12345678910111213141516171819class AccordionManager&lt;T&gt;: Manager&lt;T&gt; { private var collapsedSections = Set&lt;Int&gt;() override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return collapsedSections.contains(section) ? 0 : sections[section].items.count } func toggle(section: Int) { if collapsedSections.contains(section) { collapsedSections.remove(section) } else { collapsedSections.insert(section) } let indexSet = IndexSet(integer: section) tableView?.reloadSections(indexSet, with: .automatic) }} SwiftUISwiftUI comes in iOS 13 with a very concise and easy to use syntax. SwiftUI has good diffing so we just need to update our models so the whole content will be diffed and rendered again. 123456789101112var body: some View { List { ForEach(blogs) { blog in VStack { Text(blog.name) } .onTap { print(\"cell was tapped\") } } }} SwiftUI style with diffingI built DeepDiff before and it was used by many people. Now I‚Äôm pleased to introduce Micro which is a SwiftU style with DeepDiff powered so it performs fast diffing whenever state changes. With Micro we can just use the familiar forEach to declare Cell, and the returned State will tell DataSource to update the UICollectionView. Every time state is assigned, UICollectionView will be fast diffed and reloaded. The only requirement is that your model should conform to DiffAware with diffId so DeepDiff knows how to diff for changes. 1234567891011121314151617let dataSource = DataSource(collectionView: collectionView)dataSource.state = State { ForEach(blogs) { blog in Cell&lt;BlogCell&gt;() { context, cell in cell.nameLabel.text = blog.name } .onSelect { context in print(\"cell at index \\(context.indexPath.item) is selected\") } .onSize { context in CGSize( width: context.collectionView.frame.size.width, height: 40 ) } }} DataSource is completely overridable, if you want to customize any methods, just subclass DataSource, override methods and access its state.models 123456class CustomDataSource: DataSource { override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) { let blog = state.models[indexPath.item] as? Blog print(blog) }} Diffable data source in iOS 13In iOS 13, Apple adds Using Collection View Compositional Layouts and Diffable Data Sources which is very handy. 1234567891011121314151617func makeDataSource() -&gt; UITableViewDiffableDataSource&lt;Section, Contact&gt; { let reuseIdentifier = cellReuseIdentifier return UICollectionViewDiffableDataSource( collectionView: collectionView, cellProvider: { collectionView, indexPath, blog in let cell = tableView.dequeueReusableCell( withIdentifier: reuseIdentifier, for: indexPath ) cell.textLabel?.text = blog.name cell.detailTextLabel?.text = blog.email return cell } )} This is iOS 13+ only, and the main components are the cellProvider acting as cellForItemAtIndexPath, and the snapshot for diffing. It also supports section. 12let snapshot = NSDiffableDataSourceSnapshot&lt;Section, Blog&gt;()dataSource.apply(snapshot, animatingDifferences: animate)","link":"/blog/How-to-build-SwiftUI-style-UICollectionView-data-source-in-Swift/"},{"title":"How to add trailing image to UILabel in iOS","text":"Issue #470 Use NSTextAttachment inside NSAttributedString 123456789101112extension UILabel { func addTrailing(image: UIImage) { let attachment = NSTextAttachment() attachment.image = image let attachmentString = NSAttributedString(attachment: attachment) let string = NSMutableAttributedString(string: self.text!, attributes: [:]) string.append(attachmentString) self.attributedText = string }}","link":"/blog/How-to-add-trailing-image-to-UILabel-in-iOS/"},{"title":"How to add section header to NSCollectionView in macOS","text":"Issue #437 NormalUse Omnia for itemId extension HeaderCell.swift 1234567891011121314151617181920212223final class HeaderCell: NSView, NSCollectionViewSectionHeaderView { let label: NSTextField = withObject(NSTextField(labelWithString: \"\")) { $0.textColor = R.color.header $0.font = R.font.header $0.alignment = .left $0.lineBreakMode = .byTruncatingTail } override init(frame frameRect: NSRect) { super.init(frame: frameRect) addSubviews([label]) activate( label.anchor.centerY, label.anchor.left.constant(8) ) } required init?(coder: NSCoder) { fatalError() }} ViewController.swift 1234567891011121314151617181920212223collectionView.register( HeaderCell.self, forSupplementaryViewOfKind: NSCollectionView.elementKindSectionHeader, withIdentifier: HeaderCell.itemId)func collectionView(_ collectionView: NSCollectionView, viewForSupplementaryElementOfKind kind: NSCollectionView.SupplementaryElementKind, at indexPath: IndexPath) -&gt; NSView { if kind == NSCollectionView.elementKindSectionHeader { let view = collectionView.makeSupplementaryView( ofKind: kind, withIdentifier: HeaderCell.itemId, for: indexPath ) as! HeaderCell let menu = app.menus[indexPath.section] view.label.stringValue = menu.name return view } else { return NSView() }} In generic subclassIf use CollectionViewHandler from Omnia, then need to add @objc due to a bug in Swift compiler for subclassing generic class 1@objc (collectionView:viewForSupplementaryElementOfKind:atIndexPath:) MyHandler.swift 1234567891011121314151617181920212223242526272829303132333435import AppKitimport Omniaclass MyHandler: CollectionViewHandler&lt;App.Key, KeyCell&gt; { override init() { super.init() layout.headerReferenceSize = NSSize(width: 300, height: 30) collectionView.register( HeaderCell.self, forSupplementaryViewOfKind: NSCollectionView.elementKindSectionHeader, withIdentifier: HeaderCell.itemId ) } @objc (collectionView:viewForSupplementaryElementOfKind:atIndexPath:) func collectionView(_ collectionView: NSCollectionView, viewForSupplementaryElementOfKind kind: NSCollectionView.SupplementaryElementKind, at indexPath: IndexPath) -&gt; NSView { if kind == NSCollectionView.elementKindSectionHeader { let view = collectionView.makeSupplementaryView( ofKind: kind, withIdentifier: HeaderCell.itemId, for: indexPath ) as! HeaderCell let menu = app.menus[indexPath.section] view.label.stringValue = menu.name return view } else { return NSView() } }} Use OmniaUse CollectionViewSectionHandler from Omnia 123456789101112131415161718192021222324class SectionHandler: CollectionViewSectionHandler&lt;App.Key, KeyCell, HeaderCell&gt; {}sectionHandler.configureHeader = { section, view in view.label.stringValue = section.name}sectionHandler.configure = { item, cell in cell.shortcutLabel.stringValue = item.shortcut cell.nameLabel.stringValue = item.name}sectionHandler.itemSize = { [weak self] in guard let self = self else { return .zero } let width = self.sectionHandler.collectionView.frame.size.width - self.sectionHandler.layout.sectionInset.left - self.sectionHandler.layout.sectionInset.right return CGSize(width: width, height: 18)} Read more https://www.raywenderlich.com/783-nscollectionview-tutorial#toc-anchor-020 https://www.raywenderlich.com/1047-advanced-collection-views-in-os-x-tutorial","link":"/blog/How-to-add-section-header-to-NSCollectionView-in-macOS/"},{"title":"How to avoid crash when closing NSWindow for agent macOS app","text":"Issue #312 1234567891011121314class ClosableWindow: NSWindow { override func close() { self.orderOut(NSApp) }}let window = ClosableWindow( contentRect: rect, styleMask: [.titled, .closable], backing: .buffered, defer: false}window.makeKeyAndOrderFront(NSApp)","link":"/blog/How-to-avoid-crash-when-closing-NSWindow-for-agent-macOS-app/"},{"title":"How to build with xcodebuild and automatic code signing","text":"Issue #207 Team IDError 1Message: &quot;xcodebuild: error: invalid option '-teamID' Use = 1xcodebuild teamID=T78DK947F3 Does not work üò¢ DEVELOPMENT_TEAMhttps://pewpewthespells.com/blog/migrating_code_signing.html 1xcodebuild DEVELOPMENT_TEAM=T78DK947F3 Works üòÑ","link":"/blog/How-to-build-with-xcodebuild-and-automatic-code-signing/"},{"title":"How to animate NSView using keyframe","text":"Issue #404 12345678let animation = CAKeyframeAnimation(keyPath: \"position.y\")animation.values = [50, 20, 50]animation.keyTimes = [0.0, 0.5, 1.0]animation.duration = 2animation.repeatCount = Float.greatestFiniteMagnitudeanimation.autoreverses = truemyView.wantsLayer = truemyView.layer?.add(animation, forKey: \"bounce\")","link":"/blog/How-to-animate-NSView-using-keyframe/"},{"title":"How to cache URLSession response","text":"Issue #339 For simple cases, we don‚Äôt need to. Let‚Äôs use urlCache The URL cache for providing cached responses to requests within the session. Accessing Cached Data The URL Loading System caches responses both in memory and on disk, improving performance and reducing network traffic. The URLCache class is used for caching responses from network resources. Your app can directly access the shared cache instance by using the shared property of URLCache. Or, you can create your own caches for different purposes, setting distinct caches on your URLSessionConfiguration objects. Read more URLCache","link":"/blog/How-to-cache-URLSession-response/"},{"title":"How to cache CocoaPods","text":"Issue #196 CocoaPods vs Carthage Carthage or CocoaPods: That is the question CocoaPods will build and compile our frameworks every time whenever you are doing the clean build or run pod install or pod update for the project. Cache Carthage Speeding up Carthage for iOS Applications Faster builds in Xcode with Carthage Cache CocoaPods Improve iOS CI build times with CocoaPods caching üëç Any way to clean only current Xcode project but not Cocoapods dependencies? Pre-compiling dependencies cocoapods-binary üöÄ It will compile the source code of pods during the pod install process, and make CocoaPods use them. Which pod should be compiled is controlled by the flag in Podfile. Xcode 10 new build system CocoaPods and the new Xcode build system Xcode 10 - Clean (missing) vs Clean Build Folder Understanding framework It Looks Like You Are Trying to Use a Framework üöÄ","link":"/blog/How-to-cache-CocoaPods/"},{"title":"How to allow unnotarized app to run on macOS Catalina","text":"Issue #520 Remove quarantine 1xattr -d com.apple.quarantine /Applications/Flipper.app","link":"/blog/How-to-allow-unnotarized-app-to-run-on-macOS-Catalina/"},{"title":"How to call function inside Apple Script","text":"Issue #88 I ‚Äòve been using Apple Script to for my Finder extension FinderGo. Because of sandboxing, all scripts must lie inside Application Scripts folder. Today, I was rewriting my Xcode extension XcodeWay. Before Xcode 8, we could use Xcode plugin and all kinds of magic to make our dreams come true https://github.com/onmyway133/XcodeWay/blob/1.0/XcodeWay/Helper/FTGEnvironmentManager.m#L50. But then it does not work since Xcode Source Editor Extension was introduced. So I rewrote XcodeWay as an extension https://github.com/onmyway133/XcodeWay/releases/tag/1.1.0 Extension must run inside sandbox. If you switch App Sandbox in your XcodeWayExtensions.entitlements to NO, it won‚Äôt load. So sandbox restricts me a lot in what kinds of things I want to do. And under Xcode 9, I can‚Äôt use NSWorkspace to open Finder. So I think I could use Apple Script too, and it worked like a charm. The only restriction is code reuse, since I only know how to run an entire script. One way is to import other Apple scripts https://stackoverflow.com/questions/2606136/import-applescript-methods-in-another-applescript but I think I will write all the functions inside 1 script, and find out how to call specific function. By function, I also mean handler, procedure. I come across this snippet Scriptinator that pretty much inspires me, thanks to open source. So here is my script that contains lots of functions . And here is ScriptRunner that explains how to build NSAppleEventDescriptor. Note that you need to import Carbon 1234567891011121314151617181920212223import Carbonfunc eventDescriptior(functionName: String) -&gt; NSAppleEventDescriptor { var psn = ProcessSerialNumber(highLongOfPSN: 0, lowLongOfPSN: UInt32(kCurrentProcess)) let target = NSAppleEventDescriptor( descriptorType: typeProcessSerialNumber, bytes: &amp;psn, length: MemoryLayout&lt;ProcessSerialNumber&gt;.size ) let event = NSAppleEventDescriptor( eventClass: UInt32(kASAppleScriptSuite), eventID: UInt32(kASSubroutineEvent), targetDescriptor: target, returnID: Int16(kAutoGenerateReturnID), transactionID: Int32(kAnyTransactionID) ) let function = NSAppleEventDescriptor(string: functionName) event.setParam(function, forKeyword: AEKeyword(keyASSubroutineName)) return event}","link":"/blog/How-to-call-function-inside-Apple-Script/"},{"title":"How to calculate packet size in VoIP","text":"Issue #155 As you have probably observed in your studies, there is a determined method for calculating VoIP packet sizes. The packet size depends on many different variables, so there is no great answer for an ‚Äúaverage‚Äù packet size ‚Äì average depends on the environment. Just as an example, if you currently have VoIP running within a LAN and want to provision a new WAN so you can use VoIP to another site, knowing how big your VoIP packets are on the LAN won‚Äôt help. See below for a VoIP packet size calculation for a typical LAN, which will get you started. Packet sizeThe general formula for VoIP packet size is this 1Frame overhead + Encapsulation overhead + IP overhead + Voice payload. Let‚Äôs say the packet is going across our LAN, so right now the frame overhead is 18 Bytes, for Ethernet II. (This size would change later if the packet crosses a trunk with 802.1Q tagging or ISL encapsulation, or is destined for the WAN, where a different link layer framing will probably be in use.) EncapsulationEncapsulation overhead would include things like IPSec tunnels for security. Suppose we are not encapsulating this voice packet, so there is no overhead here. ‚ÄúIP overhead‚Äù has overhead occurring at layer 3 and above, so for SIP phones this means IP (20 Bytes), UDP (8 Bytes), and RTP (12 Bytes). This is a total of 40 Bytes of IP overhead. Lastly, you must calculate the size of the actual voice payload. Suppose we use the G.711 codec, which gives us a codec bandwidth of 64kbps. Also suppose our phones have a packetisation period of 20ms (meaning 20ms worth of voice goes into every packet). With these two numbers, we can figure out the size of the voice payload. Since one second of voice contains 64 kilobits of data (‚Äú64 kbps‚Äù), it is easy to calculate how many bits Find the amount of Bytes per payload: 1264000 bits * .02 seconds = 1280 bits of voice per payload 1280 bits / 8 bits per byte = 160 Bytes of voice per payload The total overhead is 58 Bytes (18 + 40)The total VoIP packet size is 218 Bytes (160 + 58 ) In the interest of full disclosure, it is easy to get a bit rate per second from here; just convert 218 Bytes into bits and multiply by the packetization rate (which is the inverse of your packetization period, in this case 50 packets per second). The bit rate for ONE stream of this voice is 87.2kbps‚Ä¶ we hope the user isn‚Äôt just talking to himself, so double that for an actual phone conversation. There are lots of other little things, like VAD and various header compressions, that you may need to factor into these calculations as well. As you can see, any one of these many things being off will give you a different answer, so knowing how to go about the entire process is important. Reference www.techexams.net","link":"/blog/How-to-calculate-packet-size-in-VoIP/"},{"title":"How to capture video in iOS simulator","text":"Issue #226 Take screenshot 1xcrun simctl io booted screenshot image.png Record video 1xcrun simctl io booted recordVideo video.mp4","link":"/blog/How-to-capture-video-in-iOS-simulator/"},{"title":"How to cancel DispatchWorkItem and NSOperation","text":"Issue #194 DispatchWorkItem https://stackoverflow.com/questions/48844169/swift-ios-dispatchworkitem-is-still-running-even-though-its-getting-cancelled https://stackoverflow.com/questions/29492707/how-to-stop-cancel-suspend-resume-tasks-on-gcd-queue NSOperation https://developer.apple.com/documentation/foundation/nsoperation/1411672-cancel?language=objc Grand Central Dispatch vs NSOperation https://stackoverflow.com/questions/43226434/2017-swift-3-1-gcd-vs-nsoperation https://medium.com/@johnsundell/a-deep-dive-into-grand-central-dispatch-in-swift-dead7f6e1ca7","link":"/blog/How-to-cancel-DispatchWorkItem-and-NSOperation/"},{"title":"How to catch error in ApolloClient","text":"Issue #192 Read https://www.apollographql.com/docs/react/features/error-handlingHow to catch actual error https://github.com/apollographql/apollo-client/issues/4016 ü§î 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475import { Observable } from 'apollo-link'import ApolloClient from 'apollo-boost'import Token from 'library/models/Token'import TokenService from './TokenService'import { TokenRefreshException } from 'library/utils/Exception'const client = new ApolloClient({ uri: 'https://www.myapp.no/api/', request: async (operation) =&gt; { const token = await TokenService.loadToken() updateOperation(operation, token) }, onError: (error) =&gt; { console.log('ApolloClient error', error) if (isAuthError(error)) { return handleAuthError(error) } else { return error.forward(error.operation) } }, fetchOptions: { mode: 'no-cors', }})const isValidErrorCode = (statusCode) =&gt; { if (typeof (statusCode) === 'undefined' || statusCode === null) { return false } else { return true }}const isAuthError = (error) =&gt; { console.log('client error', error) if (error.networkError) { return error.networkError.statusCode === 401 } else { return false }}const handleAuthError = (error) =&gt; { return new Observable((observer) =&gt; { TokenService.refreshToken() .then((token) =&gt; { updateOperation(error.operation, token) }) .then(() =&gt; { const subscriber = { next: observer.next.bind(observer), error: observer.error.bind(observer), complete: observer.complete.bind(observer) } error.forward(error.operation).subscribe(subscriber) }) .catch((e) =&gt; { observer.error(e) }) })}const updateOperation = (operation, token: Token) =&gt; { const tokenHeader = `${token.token_type} ${token.access_token}` operation.setContext((context) =&gt; { return { headers: { authorization: tokenHeader, 'Content-Type': 'application/json' } } })}","link":"/blog/How-to-catch-error-in-ApolloClient/"},{"title":"How to change background color in List in SwiftUI for macOS","text":"Issue #595 SwiftUI uses ListCoreScrollView and ListCoreClipView under the hood. For now the workaround, is to avoid using List 123List { ForEach} use 123VStack { ForEach}","link":"/blog/How-to-change-background-color-in-List-in-SwiftUI-for-macOS/"},{"title":"How to change NSTextField backgroundColor in NSPopover","text":"Issue #174 Disable vibrancy mode of NSPopover 12let popover = NSPopover()popover.appearance = NSAppearance(named: NSAppearance.Name.aqua)","link":"/blog/How-to-change-NSTextField-backgroundColor-in-NSPopover/"},{"title":"How to change caret color of NSTextField in macOS","text":"Issue #588 12345678910111213141516class FocusAwareTextField: NSTextField { var onFocus: () -&gt; Void = {} var onUnfocus: () -&gt; Void = {} override func becomeFirstResponder() -&gt; Bool { onFocus() let textView = window?.fieldEditor(true, for: nil) as? NSTextView textView?.insertionPointColor = R.nsColor.action return super.becomeFirstResponder() } override func resignFirstResponder() -&gt; Bool { onUnfocus() return super.resignFirstResponder() }}","link":"/blog/How-to-change-caret-color-of-NSTextField-in-macOS/"},{"title":"How to check app running on jailbreak iOS device","text":"Issue #385 From https://github.com/OneSignal/OneSignal-iOS-SDK/blob/master/iOS_SDK/OneSignalSDK/Source/OneSignalJailbreakDetection.m 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172+ (BOOL)isJailbroken { #if !(TARGET_IPHONE_SIMULATOR) FILE *file = fopen(\"/Applications/Cydia.app\", \"r\"); if (file) { fclose(file); return YES; } file = fopen(\"/Library/MobileSubstrate/MobileSubstrate.dylib\", \"r\"); if (file) { fclose(file); return YES; } file = fopen(\"/bin/bash\", \"r\"); if (file) { fclose(file); return YES; } file = fopen(\"/usr/sbin/sshd\", \"r\"); if (file) { fclose(file); return YES; } file = fopen(\"/etc/apt\", \"r\"); if (file) { fclose(file); return YES; } file = fopen(\"/usr/bin/ssh\", \"r\"); if (file) { fclose(file); return YES; } NSFileManager *fileManager = [NSFileManager defaultManager]; if ([fileManager fileExistsAtPath:@\"/Applications/Cydia.app\"]) return YES; else if ([fileManager fileExistsAtPath:@\"/Library/MobileSubstrate/MobileSubstrate.dylib\"]) return YES; else if ([fileManager fileExistsAtPath:@\"/bin/bash\"]) return YES; else if ([fileManager fileExistsAtPath:@\"/usr/sbin/sshd\"]) return YES; else if ([fileManager fileExistsAtPath:@\"/etc/apt\"]) return YES; else if ([fileManager fileExistsAtPath:@\"/usr/bin/ssh\"]) return YES; // Omit logic below since they show warnings in the device log on iOS 9 devices. if (NSFoundationVersionNumber &gt; 1144.17) // NSFoundationVersionNumber_iOS_8_4 return NO; // Check if the app can access outside of its sandbox NSError *error = nil; NSString *string = @\".\"; [string writeToFile:@\"/private/jailbreak.txt\" atomically:YES encoding:NSUTF8StringEncoding error:&amp;error]; if (!error) return YES; else [fileManager removeItemAtPath:@\"/private/jailbreak.txt\" error:nil]; // Check if the app can open a Cydia's URL scheme if ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@\"cydia://package/com.example.package\"]]) return YES; #endif return NO;}","link":"/blog/How-to-check-app-running-on-jailbreak-iOS-device/"},{"title":"How to change app icon in electron","text":"Issue #66 Generate icns Generate .iconset Run iconutil -c icns &quot;Icon.iconset&quot;. Note that icon names must be first letter lowsercased, and use _ instead of - Use icns In main.js, specify icon 12345win = new BrowserWindow({ width: 800, height: 600, icon: __dirname + '/Icon/Icon.icns'}) You can also use helper url methods 12345678const path = require('path')const url = require('url')const iconUrl = url.format({ pathname: path.join(__dirname, 'Icon/Icon.icns'), protocol: 'file:', slashes: true}) If app icon is not updated I get a problem that electron always shows default app icon. I tried using png, NativeImage, different icon sizes but still the problem. When I use electron-packager to make release build, the icon shows correctly, so it must be because of Electron caching or somehow üò† Go to node_modules -&gt; electron -&gt; dist, right click on Electron, choose View Info Drag another icns into the icon on the top left Release with electron-packager icon must be specified with __dirname (we already did) for electron-packager to pick up correct icons","link":"/blog/How-to-change-app-icon-in-electron/"},{"title":"How to change year in Date in Swift","text":"Issue #54 Today I‚Äôm trying to change the year of a Date object to 2000 in Swift. 1let date = Date() Firstly, I tried with date(bySetting:) but it does not work with past year. It simply returns nil 1Calendar.current.date(bySetting: .year, value: 2000, of: date) Secondly, I tried with dateComponents. The component.year has changed, but it calendar still returns the original date, very strange !!. No matter what timezone and calendar I use, it still has this problem 123var component = calendar.dateComponents(in: TimeZone.current, from: base)component.year = yearCalendar.current.date(from: component) Finally, I tried to be more explicit, and it works üéâ 123var component = calendar.dateComponents([.year, .month, .day, .hour, .minute, .second], from: base)component.year = yearCalendar.current.date(from: component)","link":"/blog/How-to-change-year-in-Date-in-Swift/"},{"title":"How to check if NSColor is light","text":"Issue #627 Algorithm from https://www.w3.org/WAI/ER/WD-AERT/#color-contrast 1234567891011extension NSColor { var isLight: Bool { guard let components = cgColor.components, components.count &gt;= 3 else { return false } let brightness = ((components[0] * 299) + (components[1] * 587) + (components[2] * 114)) / 1000 return brightness &gt; 0.5 }} Then we can apply contrast color for our Text 12345678910extension Text { func applyColorBaseOnBackground(_ color: NSColor?) -&gt; some View { guard let color = color else { return self } if color.isMyLight { return self.foregroundColor(Color.black) } else { return self } }}","link":"/blog/How-to-check-if-NSColor-is-light/"},{"title":"How to check file under Library in macOS","text":"Issue #200 123let home = NSSearchPathForDirectoriesInDomains(.applicationScriptsDirectory, .userDomainMask, true).first!let path = home.appending(\".XcodeWayExtensions/XcodeWayScript.scpt\")let exists = FileManager.default.fileExists(atPath: path)","link":"/blog/How-to-check-file-under-Library-in-macOS/"},{"title":"How to apply translations to Localizable.strings","text":"Issue #492 Suppose we have a base Localizable.strings 12&quot;open&quot; = &quot;Open&quot;;&quot;closed&quot; = &quot;Closed&quot;; After sending that file for translations, we get translated versions. 12&quot;open&quot; = &quot;√Öpen&quot;;&quot;closed&quot; = &quot;Stengt&quot;; Searching and copy pasting these to our Localizable.strings is tedious and time consuming. We can write a script to apply that. Remember that we need to be aware of smart and dump quotes 12.replace(/\\\"/g, '').replace(/\\\"/g, '') 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364const fs = require('fs')const originalFile = 'MyApp/Resources/nb.lproj/Localizable.strings'const translationString = `\"open\" = \"√Öpen\";\"closed\" = \"Stengt\";`class Translation { constructor(key, value) { this.key = key this.value = value }}Translation.make = function make(line) { if (!line.endsWith(';')) { return new Translation('', '') } const parts = line .replace(';') .split(\" = \") const key = parts[0] .replace(/\\\"/g, '') .replace(/\\‚Äù/g, '') const value = parts[1] .replace(/\\\"/g, '') .replace(/\\‚Äù/g, '') .replace('undefined', '') return new Translation(key, value)}function main() { const translations = translationString .split(/\\r?\\n/) .map((line) =&gt; { return Translation.make(line) }) apply(translations, originalFile)}function apply(translations, originalFile) { try { const originalData = fs.readFileSync(originalFile, 'utf8') const originalLines = originalData.split(/\\r?\\n/) const parsedLine = originalLines.map((originalLine) =&gt; { const originalTranslation = Translation.make(originalLine) const find = translations.find((translation) =&gt; { return translation.key === originalTranslation.key }) if (originalLine !== \"\" &amp;&amp; find !== undefined &amp;&amp; find.key !== \"\") { return `\"${find.key}\" = \"${find.value}\";` } else { return originalLine } }) const parsedData = parsedLine.join('\\n') fs.writeFileSync(originalFile, parsedData, { overwrite: true }) } catch (err) { console.error(err) }}main()","link":"/blog/How-to-apply-translations-to-Localizable.strings/"},{"title":"How to compare for nearly equal in Swift","text":"Issue #607 Implement Equatable and Comparable and use round 123456789101112131415161718192021222324252627282930313233343536struct RGBA: Equatable, Comparable { let red: CGFloat let green: CGFloat let blue: CGFloat let alpha: CGFloat init(_ red: CGFloat, _ green: CGFloat, _ blue: CGFloat, _ alpha: CGFloat) { self.red = red self.green = green self.blue = blue self.alpha = alpha } static func round(_ value: CGFloat) -&gt; CGFloat { (value * 100).rounded() / 100 } static func == (left: RGBA, right: RGBA) -&gt; Bool { let r = Self.round return r(left.red) == r(right.red) &amp;&amp; r(left.green) == r(right.green) &amp;&amp; r(left.blue) == r(right.blue) &amp;&amp; r(left.alpha) == r(right.alpha) } static func &lt; (left: RGBA, right: RGBA) -&gt; Bool { let r = Self.round return r(left.red) &lt; r(right.red) &amp;&amp; r(left.green) &lt; r(right.green) &amp;&amp; r(left.blue) &lt; r(right.blue) &amp;&amp; r(left.alpha) &lt;= r(right.alpha) }}XCTAssertGreaterThan(backgroundRgba, RGBA(0.57, 0.12, 0.88, 1.0)XCTAssertLessThanThan(backgroundRgba, RGBA(0.57, 0.12, 0.88, 1.0)","link":"/blog/How-to-compare-for-nearly-equal-in-Swift/"},{"title":"How to center NSWindow in screen","text":"Issue #442 On macOS, coordinate origin is bottom left 12345let window = NSWindow(contentRect: rect, styleMask: .borderless, backing: .buffered, defer: false)window.center()let frame = window.framewindow.setFrameOrigin(CGPoint(x: frame.origin.x, y: 100))","link":"/blog/How-to-center-NSWindow-in-screen/"},{"title":"How to choose Firebase vs Google Analytics","text":"Issue #387 Google Analytics is shutting down. From Firebase Analytics console, we can choose to upgrade to Google Analytics, no code change is needed. https://support.google.com/firebase/answer/9167112?hl=en In October 2019, we will start to sunset Google Analytics mobile-apps reporting based on the Google Analytics Services SDKs for Android and iOS. https://firebase.googleblog.com/2019/07/firebase-google-analytics-upgrade.html Thanks to our continued partnership with Google Analytics, you can now upgrade your Firebase projects to the next generation of app analytics! https://www.e-nor.com/blog/google-analytics/google-analytics-unifies-app-and-website-measurement Google Analytics team has officially launched a new type of GA properties called ‚ÄúApp + Web‚Äù to open public beta It is a new GA property type that allows you to combine app and web data for unified reporting and analysis Over the coming weeks, those who have existing Firebase projects will be able to upgrade your projects to the next generation Google Analytics experience as follows:","link":"/blog/How-to-choose-Firebase-vs-Google-Analytics/"},{"title":"How to conditionally apply modifier in SwiftUI","text":"Issue #633 Use autoclosure and AnyView 12345678910@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)public extension View { func applyIf&lt;T: View&gt;(_ condition: @autoclosure () -&gt; Bool, apply: (Self) -&gt; T) -&gt; AnyView { if condition() { return apply(self).erase() } else { return self.erase() } }} 12345678910Button(action: onSearch) { Image(\"search\") .resizable() .styleButton() .overlay(ToolTip(\"Search\"))}.buttonStyle(BorderlessButtonStyle()).applyIf(showsSearch, apply: { $0.foregroundColor(Color.orange)})","link":"/blog/How-to-conditionally-apply-modifier-in-SwiftUI/"},{"title":"How to conform to Hashable for class in Swift","text":"Issue #606 Use ObjectIdentifier A unique identifier for a class instance or metatype. 123456789final class Worker: Hashable { static func == (lhs: Worker, rhs: Worker) -&gt; Bool { return ObjectIdentifier(lhs) == ObjectIdentifier(rhs) } func hash(into hasher: inout Hasher) { hasher.combine(ObjectIdentifier(self)) }}","link":"/blog/How-to-conform-to-Hashable-for-class-in-Swift/"},{"title":"How to build static site using Publish","text":"Issue #564 Code https://github.com/JohnSundell/publish Example https://github.com/pumaswift/pumaswift.github.io StepsStep 1: Create executable 1swift package init --type executable Step 2: Edit package 123456789101112131415161718// swift-tools-version:5.1// The swift-tools-version declares the minimum version of Swift required to build this package.import PackageDescriptionlet package = Package( name: \"PumaSwiftWeb\", dependencies: [ .package(url: \"https://github.com/johnsundell/publish.git\", from: \"0.1.0\") ], targets: [ .target( name: \"PumaSwiftWeb\", dependencies: [ \"Publish\" ] ) ]) Step 3: Double click Package.swift, Xcode opens that in a generated projectStep 4: Declare website. Go to Sources/main.swift 123456789101112131415161718192021222324import Publishimport Plotimport Inkimport Foundationstruct PumaSwiftWeb: Website { enum SectionID: String, WebsiteSectionID { case gettingStarted case workflow case tasks case about } struct ItemMetadata: WebsiteItemMetadata {} var url = URL(string: \"https://pumaswift.github.io\")! var name = \"Puma Swift\" var description = \"Build utilities in pure Swift\" var language: Language { .english } var imagePath: Path? { \"https://avatars2.githubusercontent.com/u/54233247?s=200&amp;v=4\" }}try PumaSwiftWeb() .publish(withTheme: .foundation) Step 5: Create Content folderStep 6: swift runStep 7: Copy Output to root and push to GitHub","link":"/blog/How-to-build-static-site-using-Publish/"},{"title":"How to check if push notification is actually enabled in iOS","text":"Issue #455 There are times we want to log if user can receive push notification. We may be tempted to merely use isRegisteredForRemoteNotifications but that is not enough. From a user ‚Äòs point of view, they can either receive push notification or not. But behind the scene, many factors are in the game. It can be that user has disabled push notification in app settings or in iOS Settings. It can also be that user enables push notification but disables all sound or banner display mechanism. isRegisteredForRemoteNotifications is that your app has connected to APNS and get device token, this can be for silent push notificationcurrentUserNotificationSettings is for user permissions, without this, there is no alert, banner or sound push notification delivered to the appHere is the check 123456789static var isPushNotificationEnabled: Bool { guard let settings = UIApplication.shared.currentUserNotificationSettings else { return false } return UIApplication.shared.isRegisteredForRemoteNotifications &amp;&amp; !settings.types.isEmpty} For iOS 10, with the introduction of UserNotifications framework, instead of checking for currentUserNotificationSettings, you should use UserNotifications framework 12345678910center.getNotificationSettings(completionHandler: { settings in switch settings.authorizationStatus { case .authorized, .provisional: print(\"authorized\") case .denied: print(\"denied\") case .notDetermined: print(\"not determined, ask user for permission now\") }}) Push notification can be delivered to our apps in many ways, and we can ask for that 12UNUserNotificationCenter.current() .requestAuthorization(options: [.alert, .sound, .badge]) User can go to Settings app and turn off any of those at any time, so it‚Äôs best to check for that in the settings object 123456789101112131415open class UNNotificationSettings : NSObject, NSCopying, NSSecureCoding { open var authorizationStatus: UNAuthorizationStatus { get } open var soundSetting: UNNotificationSetting { get } open var badgeSetting: UNNotificationSetting { get } open var alertSetting: UNNotificationSetting { get } open var notificationCenterSetting: UNNotificationSetting { get }} Original answer https://stackoverflow.com/a/44407710/1418457","link":"/blog/How-to-check-if-push-notification-is-actually-enabled-in-iOS/"},{"title":"How to check generic type in Swift","text":"Issue #74 When dealing with generic, you shouldn‚Äôt care about the types. But if you need, you can 1234567891011 func isPrimitive&lt;T&gt;(type: T.Type) -&gt; Bool { let primitives: [Any.Type] = [ Bool.self, [Bool].self, String.self, [String].self, Int.self, [Int].self, Float.self, [Float].self, Double.self, [Double].self ] return primitives.contains(where: { $0.self == type.self })}","link":"/blog/How-to-check-generic-type-in-Swift/"},{"title":"How to cluster annotations in MapKit in iOS 11","text":"Issue #181 https://developer.apple.com/documentation/mapkit/mkannotationview/decluttering_a_map_with_mapkit_annotation_clustering 1234567891011final class AnnotationView: MKMarkerAnnotationView { override init(annotation: MKAnnotation?, reuseIdentifier: String?) { super.init(annotation: annotation, reuseIdentifier: reuseIdentifier) clusteringIdentifier = String(describing: ClusterView.self) } required init?(coder aDecoder: NSCoder) { fatalError() }} 12345678910111213141516171819202122232425262728293031323334353637383940final class ClusterView: MKAnnotationView { override init(annotation: MKAnnotation?, reuseIdentifier: String?) { super.init(annotation: annotation, reuseIdentifier: reuseIdentifier) displayPriority = .defaultHigh } required init?(coder aDecoder: NSCoder) { fatalError() } override func prepareForDisplay() { super.prepareForDisplay() guard let annotation = annotation as? MKClusterAnnotation else { return } let count = annotation.memberAnnotations.count image = self.image(annotation: annotation, count: count) } func image(annotation: MKClusterAnnotation, count: Int) -&gt; UIImage? { let renderer = UIGraphicsImageRenderer(size: CGSize(width: 40.0, height: 40.0)) image = renderer.image { _ in UIColor.purple.setFill() UIBezierPath(ovalIn: CGRect(x: 0.0, y: 0.0, width: 40.0, height: 40.0)).fill() let attributes: [NSAttributedString.Key: Any] = [ NSAttributedString.Key.foregroundColor: UIColor.white, NSAttributedString.Key.font: UIFont.boldSystemFont(ofSize: 20.0) ] let text = \"\\(count)\" let size = text.size(withAttributes: attributes) let rect = CGRect(x: 20 - size.width / 2, y: 20 - size.height / 2, width: size.width, height: size.height) text.draw(in: rect, withAttributes: attributes) } return image }} 1mapView.register(ClusterView.self, forAnnotationViewWithReuseIdentifier: String(describing: ClusterView.self))","link":"/blog/How-to-cluster-annotations-in-MapKit-in-iOS-11/"},{"title":"How to construct URL with URLComponents and appendPathComponent in Swift","text":"Issue #193 123var components = URLComponents(string: \"https://google.com/\")components?.path = \"abc/\"components?.url -&gt; nil 1234var components = URLComponents(string: \"https://google.com/\")components?.path = \"/abc/\"components?.urlcomponents?.queryItems = [URLQueryItem(name: \"q\", value: \"pokemon\")] -&gt; https://google.com/abc/?q=pokemon 123var url = URL(string: \"https://google.com/\")url?.appendPathComponent(\"/abc?q=pokemon\")url -&gt; https://google.com//abc%3Fq=pokemon","link":"/blog/How-to-construct-URL-with-URLComponents-and-appendPathComponent-in-Swift/"},{"title":"How to check platform versions in Swift","text":"Issue #477 Mark APIs availability1234@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)public extension View {} Check platform12345#if canImport(UIKit)import UIKit#elseif canImport(OSX)import AppKit#endif In watchOS app, it still can import UIKit, so for only iOS usage, we need to use os check 1#if canImport(UIKit) &amp;&amp; os(iOS) Check environment12345#if targetEnvironment(macCatalyst) print(\"UIKit running on macOS\")#else print(\"Your regular code\")#endif 12345#if targetEnvironment(simulator) // your simulator code#else // your real device code#endif","link":"/blog/How-to-check-platform-versions-in-Swift/"},{"title":"How to create UITabBarController programmatically in iOS","text":"Issue #224 1234567891011121314let tabBarController = UITabBarController()let navigationController1 = UINavigationController(rootViewController: viewController1)let navigationController2 = UINavigationController(rootViewController: viewController2)let navigationController3 = UINavigationController(rootViewController: viewController3)navigationController2.isNavigationBarHidden = truenavigationController1.tabBarItem.image = R.image.profile()navigationController2.tabBarItem.image = R.image.books()navigationController3.tabBarItem.image = R.image.settings()tabBarController.tabBar.tintColor = .yellowtabBarController.viewControllers = [navigationController1, navigationController2, navigationController3] Use tintColor instead of the deprecated selectedImageTintColor to indicate selected item color. For icon size, check Tab Bar Icon Size, usually 50x50 for 2x and 75x75 for 3x In portrait orientation, tab bar icons appear above tab titles. In landscape orientation, the icons and titles appear side-by-side. Depending on the device and orientation, the system displays either a regular or compact tab bar. Your app should include custom tab bar icons for both sizes.","link":"/blog/How-to-create-UITabBarController-programmatically-in-iOS/"},{"title":"How to configure test target in Xcode","text":"Issue #478 This applies to Main targets App Framework Test targets Unit tests UI tests ExamplesDependencies used Main target: Sugar Test target: Nimble, Quick Examples Cocoapods Carthage Notes Make sure test target can link to all the frameworks it needs. This includes frameworks that Test targets use, and possibly frameworks that Main target uses ! Remember to ‚ÄúClean Build Folder‚Äù and ‚ÄúClear Derived Data‚Äù so that you‚Äôre sure it works. Sometimes Xcode caches. ErrorsErrors occur mostly due to linker error Test target X encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted Framework not found Cocoapods1. PodTest targets need to include pods that Main target uses ! or we‚Äôll get ‚ÄúFramework not found‚Äù 12345678910111213141516171819202122def app_pods pod 'Sugar', '~&gt; 1.0'enddef test_pods pod 'Nimble', '~&gt; 3.2' pod 'Quick', '~&gt; 0.9'endtarget 'TeaApp' do app_podsendtarget 'TeaAppTests' do app_pods test_podsendtarget 'TeaAppUITests' do app_pods test_podsend 2. Link Binaries with LibraryCocoapods builds a framework that contains all the frameworks the Test targets need, and configure it for us 3. Runpath Search Paths Go to Test target Build Settings Add $(FRAMEWORK_SEARCH_PATHS) Carthage1. CartfileWe usually have Cartfile for Main target 1github \"hyperoslo/Sugar\" ~&gt; 1.0 Cartfile.private for Test target 12github \"Quick/Nimble\"github \"Quick/Quick\" 2. Link Binaries with Libraries Go to Test target build phase Drag built frameworks from Carthage/Build In rare case, we need to drag frameworks that the Main target uses In rare case, we need to drag the Main target framework 3. Framework Search PathsConfigure correct path Go to Test target Built Settings Configure Framework Search Paths 4. Runpath Search Paths Go to Test target Build Settings Add $(FRAMEWORK_SEARCH_PATHS) 5. Copy Files (maybe)From Adding frameworks to unit tests or a framework In rare cases, you may want to also copy each dependency into the build product (e.g., to embed dependencies within the outer framework, or make sure dependencies are present in a test bundle). To do this, create a new ‚ÄúCopy Files‚Äù build phase with the ‚ÄúFrameworks‚Äù destination, then add the framework reference there as well. Runpath Search Paths and Install nameQuestion Why preconfigured run path ‚Äú@executable_path/Frameworks‚Äù and ‚Äú@loader_path/Frameworks‚Äù not work? Why configuring runpath to ‚Äú$(FRAMEWORK_SEARCH_PATHS)‚Äù works ? Why framework has install name ‚Äú@rpath/Sugar.framework/Sugar‚Äù ? Reference Run-Path Dependent Libraries Linking and Install Names Code https://github.com/onmyway133/TestTarget https://stackoverflow.com/questions/34990175/test-target-x-encountered-an-error-early-unexpected-exit-operation-never-finis/36343395#36343395","link":"/blog/How-to-configure-test-target-in-Xcode/"},{"title":"How to create bounce animation programmatically in Android","text":"Issue #383 Right click res -&gt; New -&gt; Android Resource Directory, select anim and name it animRight click res/anim -&gt; New -&gt; Android Resource file, name it bounce 1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;translate android:fromYDelta=\"0\" android:toYDelta=\"-100\" android:repeatCount=\"infinite\" /&gt;&lt;/set&gt;``` We have to set `repeatCount` in xml, setting in code does not work !!```ktval bounce = AnimationUtils.loadAnimation(context, R.anim.bounce)bounce.repeatMode = Animation.REVERSEbounce.duration = (1000..2000).random().toLong()imageView.startAnimation(bounce)","link":"/blog/How-to-create-bounce-animation-programmatically-in-Android/"},{"title":"How to create a piano using iOS 9 Auto Layout","text":"Issue #22 In the beginning, people use frame and Autoresizing Mask, then they use Auto Layout, then iOS 9 encourages them to use NSLayoutAnchor, UILayoutGuide and UIStackView For more convenient Auto Layout, check How to make Auto Layout more convenient in iOS and Anchors NSLayoutAnchor The NSLayoutAnchor class is a factory class for creating NSLayoutConstraint objects using a fluent API. Use these constraints to programmatically define your layout using Auto Layout. It has 3 subclasses NSLayoutDimension func constraintEqualToConstant(_ c: CGFloat) -&gt; NSLayoutConstraint! NSLayoutXAxisAnchor Allows working with horizontal constraints Prevent these 12// This constraint generates an incompatible pointer type warningcancelButton.leadingAnchor.constraintEqualToAnchor(saveButton.topAnchor, constant: 8.0).active = true NSLayoutYAxisAnchor Allows working with vertical constraints Prevent these 12// This constraint generates an incompatible pointer type warningcancelButton.topAnchor.constraintEqualToAnchor(saveButton.trailingAnchor, constant: 8.0).active = true UILayoutGuidePreviously, we used dummy views to aid constraints. Now we use UILayoutGuide Define an equal spacing between a series of views See full gist 1234567891011121314let space1 = UILayoutGuide()view.addLayoutGuide(space1)let space2 = UILayoutGuide()view.addLayoutGuide(space2)space1.widthAnchor.constraintEqualToAnchor(space2.widthAnchor).active = truesaveButton.trailingAnchor.constraintEqualToAnchor(space1.leadingAnchor).active = truecancelButton.leadingAnchor.constraintEqualToAnchor(space1.trailingAnchor).active = truecancelButton.trailingAnchor.constraintEqualToAnchor(space2.leadingAnchor).active = trueclearButton.leadingAnchor.constraintEqualToAnchor(space2.trailingAnchor).active = true Layout guides can also act as a black box, containing a number of other views and controls See the full gist 12345678910111213141516171819202122232425262728let container = UILayoutGuide()view.addLayoutGuide(container)// Set interior constraintslabel.lastBaselineAnchor.constraintEqualToAnchor(textField.lastBaselineAnchor).active = truelabel.leadingAnchor.constraintEqualToAnchor(container.leadingAnchor).active = truetextField.leadingAnchor.constraintEqualToAnchor(label.trailingAnchor, constant: 8.0).active = truetextField.trailingAnchor.constraintEqualToAnchor(container.trailingAnchor).active = truetextField.topAnchor.constraintEqualToAnchor(container.topAnchor).active = truetextField.bottomAnchor.constraintEqualToAnchor(container.bottomAnchor).active = true// Set exterior constraints// The contents of the container can be treated as a black boxlet margins = view.layoutMarginsGuidecontainer.leadingAnchor.constraintEqualToAnchor(margins.leadingAnchor).active = truecontainer.trailingAnchor.constraintEqualToAnchor(margins.trailingAnchor).active = true// Must use NSLayoutConstraint with the scene's top and bottom layout guides.NSLayoutConstraint(item: container, attribute: .Top, relatedBy: .Equal, toItem: topLayoutGuide, attribute: .Bottom, multiplier: 1.0, constant: 20.0).active = true layoutMarginsGuideMargins are now represented as layoutMarginsGuide, a subclass of UILayoutGuide topLayoutGuide and bottomLayoutGuideIn the container example, we saw how we must use NSLayoutConstraint with the topLayoutGuide. topLayoutGuide and bottomLayoutGuide are object conforming to UILayoutSupport protocol layoutFrame The layout guide defines a rectangular space in its owning view‚Äôs coordinate system. This property contains a valid CGRect value by the time its owning view‚Äôs layoutSubviews method is called. In the above container example, the container layout guide frame is 1(16.0, 40.0, 343.0, 21.0) Piano See Piano on Github on how to create a Piano using UILayoutGuide, NSLayoutAnchor and UIStackView","link":"/blog/How-to-create-a-piano-using-iOS-9-Auto-Layout/"},{"title":"How to create constraints programmatically with ConstraintLayout in Android","text":"Issue #381 From API &lt; 17, there is ViewCompat.generateViewId()For API 17, there is View.generateViewId() Note that to use ConstraintSet, all views under ConstraintLayout inside xml must have unique id 123456789val imageView = ImageView(context)imageView.id = View.generateViewId()imageView.setImageResource(resId)constraintLayout.addView(imageView)val set = ConstraintSet()set.clone(constraintLayout)set.connect(imageView.id, ConstraintSet.RIGHT, ConstraintSet.PARENT_ID, ConstraintSet.RIGHT)set.applyTo(constraintLayout)","link":"/blog/How-to-create-constraints-programmatically-with-ConstraintLayout-in-Android/"},{"title":"How to convert callback to Promise in Javascript","text":"Issue #416 12345678910111213// @flowconst toPromise = (f: (any) =&gt; void) =&gt; { return new Promise&lt;any&gt;((resolve, reject) =&gt; { try { f((result) =&gt; { resolve(result) }) } catch (e) { reject(e) } })} 1const videos = await toPromise(callback) If a function accepts many parameters, we need to curry https://onmyway133.github.io/blog/Curry-in-Swift-and-Javascript/ 12345678910function curry2(f) { return (p1) =&gt; { return (p2) =&gt; { return f(p1, p2) } }}const callback = curry2(aFunctionThatAcceptsOptionsAndCallback)(options)const items = await toPromise(callback)","link":"/blog/How-to-convert-callback-to-Promise-in-Javascript/"},{"title":"How to constrain to views inside UICollectionViewCell in iOS","text":"Issue #422 To constrain views outside to elements inside UICollectionViewCell, we can use UILayoutGuide. Need to make layout guide the same constraints as the real elements 123456let imageViewGuide = UILayoutGuide()collectionView.addLayoutGuide(imageViewGuide)NSLayoutConstraint.on([ imageViewGuide.topAnchor.constraint(equalTo: collectionView.topAnchor, constant: 16), imageViewGuide.heightAnchor.constraint(equalTo: collectionView.heightAnchor, multiplier: 0.5)]) 1234NSLayoutConstraint.on([ loadingIndicator.centerXAnchor.constraint(equalTo: collectionView.centerXAnchor), loadingIndicator.centerYAnchor.constraint(equalTo: imageViewGuide.centerYAnchor)])","link":"/blog/How-to-constrain-to-views-inside-UICollectionViewCell-in-iOS/"},{"title":"How to customize NSTextView in AppKit","text":"Issue #320 Scrollable Putting an NSTextView Object in an NSScrollView Use xib then load Embed image or NSTextAttachmentCellProtocol Select TextView Select Rich Text and Graphics Select Size Inspector -&gt; Resizable and tick both Horizontally and Vertically Customize1234567891011121314scrollView.drawsBackground = falsetextView.drawsBackground = falsetextView.string = &quot;What's on your mind?&quot;textView.delegate = selftextView.selectedTextAttributes = [ NSAttributedString.Key.backgroundColor: NSColor(hex: &quot;414858&quot;), NSAttributedString.Key.foregroundColor: NSColor(hex: &quot;ACB2BE&quot;)]extension MainView: NSTextViewDelegate { func textViewDidChangeSelection(_ notification: Notification) { // Change text color again after image dragging }}","link":"/blog/How-to-customize-NSTextView-in-AppKit/"},{"title":"How to create watch only watchOS app","text":"Issue #457 From Creating Independent watchOS Apps The root target is a stub, and acts as a wrapper for your project, so that you can submit it to the App Store. The other two are identical to the targets found in a traditional watchOS project. They represent your WatchKit app and WatchKit extension, respectively.","link":"/blog/How-to-create-watch-only-watchOS-app/"},{"title":"How to deal with Swift slow compile time","text":"Issue #581 Read more https://engineering.circle.com/swift-compiler-performance-tips-and-tricks-e86a53a5b42a https://swiftrocks.com/reducing-ios-build-times-by-using-interface-targets.html","link":"/blog/How-to-deal-with-Swift-slow-compile-time/"},{"title":"How to deal with CSS responsiveness in Wordpress","text":"Issue #283 Original post https://medium.com/fantageek/dealing-with-css-responsiveness-in-wordpress-5ad24b088b8b During the alpha test of LearnTalks, some of my friends reported that the screen is completely blank in search page, and this happened in mobile only. This article is how I identify the problem and found a workaround for the issue, it may not be the solution, but at least the screen does not appear blank anymore. As someone who likes to keep up with tech via watching conference videos, I thought it might be a good idea to collect all of these to better search and explore later. So I built a web app with React and Firebase, it is a work in progress for now. Due to time constraints, I decided to go first with Wordpress to quickly play with the idea. So there is LearnTalks. The theme Marinate that I used didn‚Äôt want to render the search page correctly. So I head over to Chrome Dev Tool for Responsive Viewport Mode and Safari for Web Inspector The tests showed that the problem only happened on certain screen resolutions. This must be due to CSS @media query which display different layouts for different screen sizes. And somehow it didn‚Äôt work for some sizes. [@media](http://twitter.com/media) screen and (max-width: 800px) { #site-header { display: none; } }A bit about the rulesThe @media rule is used in media queries to apply different styles for different media types/devices. Media queries can be used to check many things, such as: width and height of the viewport width and height of the device orientation (is the tablet/phone in landscape or portrait mode?) resolution Using media queries are a popular technique for delivering a tailored style sheet (responsive web design) to desktops, laptops, tablets, and mobile phones. So I go to Wordpress Dashboard -&gt; Appearance -&gt; Editor to examine CSS files. Unsurprisingly, there are a bunch of media queries [@media](http://twitter.com/media) (min-width: 600px) and (max-width: 767px) { .main-navigation { padding: 0; } .site-header .pushmenu { margin-top:0px; } .social-networks li a { line-height:2.1em !Important; } .search { display: none !important; } .customer blockquote { padding: 10px; text-align: justify; } }The .search selector is suspicious display: none !important; The important directive is, well, quite important It means, essentially, what it says; that ‚Äòthis is important, ignore subsequent rules, and any usual specificity issues, apply this rule!‚ÄôIn normal use a rule defined in an external stylesheet is overruled by a style defined in the head of the document, which, in turn, is overruled by an in-line style within the element itself (assuming equal specificity of the selectors). Defining a rule with the !important ‚Äòattribute‚Äô (?) discards the normal concerns as regards the ‚Äòlater‚Äô rule overriding the ‚Äòearlier‚Äô ones. Luckily, this theme allows the ability to Edit CSS , so I can override that to a block attribute to always show search page","link":"/blog/How-to-deal-with-CSS-responsiveness-in-Wordpress/"},{"title":"How to deal with NODE_MODULE_VERSION in electron","text":"Issue #69 NODE_MODULE_VERSIONToday I was trying to install sharp with yarn add sharp to work in my electron app, but I get the following error Uncaught Error: The module ‚Äò/Users/khoa/MyElectronApp/node_modules/sharp/build/Release/sharp.node‚Äôwas compiled against a different Node.js version usingNODE_MODULE_VERSION 57. This version of Node.js requiresNODE_MODULE_VERSION 54. Please try re-compiling or re-installingthe module Native node moduleSearching a bit, it was because sharp is a native node module which uses libvips under the hood Node.js Addons are dynamically-linked shared objects, written in C++, that can be loaded into Node.js using the require() function, and used just as if they were an ordinary Node.js module. They are used primarily to provide an interface between JavaScript running in Node.js and C/C++ libraries. More on how to build native node module can be found here https://blog.risingstack.com/writing-native-node-js-modules/ Node versionI‚Äôm using nvm to manage node version, and nvm list shows 8.4.0 as the latest node version I‚Äôm using. 123456v6.10.1v7.8.0v7.9.0v8.0.0-&gt; v8.4.0system Searching on Node releases reveals that Node 8.4.0 has NODE_MODULE_VERSION of 57, so that is the node version npm uses to compile sharp However, I can‚Äôt seem to find the NODE_MODULE_VERSION 54 that sharp is using. I tried node 8.0.0 which is believed to have NODE_MODULE_VERSION 54 but it didn‚Äôt work Electron versionAs the time of this post, electron is at version 7.9.0, you can check here https://github.com/electron/electron/blob/master/.node-version or by running process.versions in Javascript console Using electron-rebuildSo after I read this Using Native Node Modules, I install electron-rebuilder to recompile sharp 123yarn add electron-rebuild --devyarn add sharp./node_modules/.bin/electron-rebuild It works now üéâ Read more https://blog.risingstack.com/writing-native-node-js-modules/","link":"/blog/How-to-deal-with-NODE_MODULE_VERSION-in-electron/"},{"title":"How to deal with animation in UITests in iOS","text":"Issue #143 Today I was writing tests and get this error related to app idle 1t = 23.06s Assertion Failure: &lt;unknown&gt;:0: Failed to scroll to visible (by AX action) Button, 0x6000003827d0, traits: 8858370049, label: 'cart', error: Error -25204 performing AXAction 2003 on element &lt;XCAccessibilityElement: 0x7fc391a2bd60&gt; pid: 91461, elementOrHash.elementID: 140658975676048.128 It turns out that the project uses a HUD that is performing some progress animation. Even it was being called HUD.hide(), the problem still exists. 1234t = 31.55s Wait for no.example.MyApp to idle t = 91.69s App animations complete notification not received, will attempt to continue. t = 91.70s Tap Target Application 0x6040002a1260 t = 91.70s Wait for no.example.MyApp to id No matter how I call sleep,wait`, still the problem 123sleep(10)app.tap()_ = checkoutButton.waitForExistence(timeout: 10) The fix is to disable animation. Start with setting argument when running tests 12app.launchArguments.append(\"--UITests\")app.launch Then in AppDelegate 12345func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool { if CommandLine.arguments.contains(\"--UITests\") { UIView.setAnimationsEnabled(false) }}","link":"/blog/How-to-deal-with-animation-in-UITests-in-iOS/"},{"title":"How to deal with singleton in iOS","text":"Issue #18 A single singletonThere are many classes that designed to be used as singleton, like UserDefaults.standard, FileManager.default, NotificationCenter.default or even our own classes like UserManager, Storage, ‚Ä¶ Singleton is a design patter and has its own use case, sometimes we still need to use it. But if we are to use singleton, we should just use 1, and group all other singleton under this single singleton. Thanks to Vadym for showing this to me Swift makes it extremely easy to make singleton, let name it App then we have a single point of control for all the singletons 1234567891011121314151617181920212223242526272829303132struct App { static let model = AppModel() static let realmProvider = RealmProvider() static let networkingProvider = NetworkingProvider() static var navigator = Navigator() static let config = AppConfig() static let pushNotificationCenter = PushNotificationCenter() static let lifeCycle = LifeCycle()}``` These are use cases where a single instance is needed### AppModelThis is where we store model for an app, that can be- is onboarding shown- organization name- `Session` that encapsulates token, current profile### LifeCycleThis is where we listen to app life cycle, I use `rx` to make it easy, see https://github.com/onmyway133/blog/issues/12### RealmProviderI prefer `Realm` for storing and caching, usually 1 `Realm` is enough. This is where we return the a certain `Realm` instance```swiftclass RealmProvider { static func realm() -&gt; Realm { let configuration = Realm.Configuration(schemaVersion: App.config.schemaVersion) return try! Realm(configuration: configuration) }} AppConfigThis is where we have configurations for staging and production environment, those can be client key, Firebase configuration, analytics keys, ‚Ä¶ NavigatorI use Compass to do central navigation, and there should be 1 Navigator that does the job Inject a singletonSometime we rely on a singleton to do our job, to make dependencies clear and testing easier, we need to inject this singleton, and leverage Swift default parameter, thanks to John for showing this to me Here is an example of a ViewModel that relies on networking 12345678910111213class ProfileViewModel { let networking: Networking&lt;APIEndpoint&gt; init(networking: Networking&lt;APIEndpoint&gt; = App.networking) { self.networking = networking networking.rxRequest(APIEndpoint.profile) .bindNext({ profile in print(profile) }) }}","link":"/blog/How-to-deal-with-singleton-in-iOS/"},{"title":"How to deal with windows-1252 encoding in Node","text":"Issue #60 Today I use node-fetch and cheerio to fetch a webpage. It looks good in Chrome and Sublime Text when it displays html entities like &amp;#7901 However, it does not render correctly in iTerm, Terminal and Visual Studio Code. It just shows fffd I think the problem is because of my code, so I change to request and try to play with different options in cheerio but still the problem. It didn‚Äôt take me long to figure it out that the format of the html is windows-1252 1&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1252\"&gt; So I need to use windows-1252, legacy-encoding, iconv-lite FYI https://stackoverflow.com/questions/31834790/node-js-how-to-http-get-and-decode-encode-response-in-custom-format","link":"/blog/How-to-deal-with-windows-1252-encoding-in-Node/"},{"title":"How to deal with weak in closure in Swift","text":"Issue #326 Traditionally, from Swift 4.2 we need guard let self 123456789addButton.didTouch = { [weak self] in guard let self = self, let product = self.purchasedProduct() else { return self.delegate?.productViewController(self, didAdd: product)} This is cumbersome, we can invent a higher order function to zip and unwrap the optionals 1234567891011func with&lt;A, B&gt;(_ op1: A?, _ op2: B?, _ closure: (A, B) -&gt; Void) { if let value1 = op1, let value2 = op2 { closure(value1, value2) }}addButton.didTouch = { [weak self] in with(self, self?.purchasedProduct()) { $0.delegate?.productViewController($0, didAdd: $1) }}","link":"/blog/How-to-deal-with-weak-in-closure-in-Swift/"},{"title":"How to debounce action in Flutter","text":"Issue #293 Answer https://stackoverflow.com/a/55119208/1418457 This is useful to throttle TextField change event. You can make Debouncer class using Timer 123456789101112131415161718import 'package:flutter/foundation.dart';import 'dart:async';class Debouncer { final int milliseconds; VoidCallback action; Timer _timer; Debouncer({ this.milliseconds }); run(VoidCallback action) { if (_timer != null) { _timer.cancel(); } _timer = Timer(Duration(milliseconds: milliseconds), action); }} Declare and trigger 12345final _debouncer = Debouncer(milliseconds: 500);onTextChange(String text) { _debouncer.run(() =&gt; print(text));}","link":"/blog/How-to-debounce-action-in-Flutter/"},{"title":"How to declare commands in Xcode extensions","text":"Issue #638 Use commandDefinitions in XCSourceEditorExtension. 12345678910111213141516171819202122232425262728import Foundationimport XcodeKitclass SourceEditorExtension: NSObject, XCSourceEditorExtension { func extensionDidFinishLaunching() { } var commandDefinitions: [[XCSourceEditorCommandDefinitionKey: Any]] { func makeDef( _ className: String, _ commandName: String ) -&gt; [XCSourceEditorCommandDefinitionKey: Any] { guard let bundleId = Bundle(for: type(of: self)).bundleIdentifier else { return [:] } return [ XCSourceEditorCommandDefinitionKey.identifierKey: bundleId + className, XCSourceEditorCommandDefinitionKey.classNameKey: className, XCSourceEditorCommandDefinitionKey.nameKey: commandName ] } return [ makeDef(TypeCommand.className(), \"Type\"), makeDef(ReloadCommand.className(), \"Reload\"), ] }} There is a weird crash that we can‚Äôt seem to declare functions or use commandDefinitions, the workaround is to declare in plist Read more https://nshipster.com/xcode-source-extensions/","link":"/blog/How-to-declare-commands-in-Xcode-extensions/"},{"title":"How to convert from callback to Future Publisher in Combine","text":"Issue #527 123456789101112131415161718192021import Foundationimport Combinepublic typealias TaskCompletion = (Result&lt;(), Error&gt;) -&gt; Voidpublic protocol Task: AnyObject { var name: String { get } func run(workflow: Workflow, completion: TaskCompletion)}public extension Task { func asPublisher(workflow: Workflow) -&gt; AnyPublisher&lt;(), Error&gt; { return Future({ completion in self.run(workflow: workflow, completion: completion) }).eraseToAnyPublisher() }}let sequence = Publishers.Sequence&lt;[AnyPublisher&lt;(), Error&gt;], Error&gt;( sequence: tasks.map({ $0.asPublisher(workflow: self) }))","link":"/blog/How-to-convert-from-callback-to-Future-Publisher-in-Combine/"},{"title":"How to debug Auto Layout","text":"Issue #23 hasAmbiguousLayout Returns whether the constraints impacting the layout of the view incompletely specify the location of the view. exerciseAmbiguityInLayout This method randomly changes the frame of a view with an ambiguous layout between its different valid values, causing the view to move in the interface. This makes it easy to visually identify what the valid frames are and may enable the developer to discern what constraints need to be added to the layout to fully specify a location for the view. _autolayoutTrace This returns a string describing the whole view tree which tells you when a view has an ambiguous layout. NSLayoutConstraint identifier The name that identifies the constraint. UIViewAlertForUnsatisfiableConstraints https://medium.com/@karthikkeyan/debugging-uiviewalertforunsatisfiableconstraints-47697696c7c DETECTED_MISSING_CONSTRAINTShttps://forums.developer.apple.com/thread/63811 View Debugger search by addressRead more Debugging Tricks and Tips Advanced Auto Layout Toolbox Mysteries of Auto Layout, Part 2","link":"/blog/How-to-debug-Auto-Layout/"},{"title":"How to decode with default case for enum in Swift","text":"Issue #634 12345678910public enum Weapon: String, Decodable { case sword = \"SWORD\" case gun = \"GUN\" case unknown = \"UNKNOWN\" public init(from decoder: Decoder) throws { let rawValue = try decoder.singleValueContainer().decode(String.self) self = Weapon(rawValue: rawValue) ?? .unknown }}","link":"/blog/How-to-decode-with-default-case-for-enum-in-Swift/"},{"title":"How to declare UIGestureRecognizer in iOS","text":"Issue #362 12345let tapGR = UITapGestureRecognizer(target: self, action: #selector(handleTap(_:)))@objc private func handleTap(_ gr: UITapGestureRecognizer) { didTouch?()} We need to use lazy instead of let for gesture to work 1lazy var tapGR = UITapGestureRecognizer(target: self, action: #selector(handleTap(_:)))","link":"/blog/How-to-declare-UIGestureRecognizer-in-iOS/"},{"title":"How to disable implicit decoration view animation in UICollectionView","text":"Issue #569 From documentation https://developer.apple.com/documentation/uikit/uicollectionviewlayout/1617726-initiallayoutattributesforappear This method is called after the prepare(forCollectionViewUpdates:) method and before the finalizeCollectionViewUpdates() method for any decoration views that are about to be inserted. Your implementation should return the layout information that describes the initial position and state of the view. The collection view uses this information as the starting point for any animations. (The end point of the animation is the view‚Äôs new location in the collection view.) If you return nil, the layout object uses the item‚Äôs final attributes for both the start and end points of the animation. The default implementation of this method returns nil. Although the doc says ‚ÄúThe default implementation of this method returns nil‚Äù, calling super.initialLayoutAttributesForAppearingDecorationElement gives somehow implicit animation. The workaround is to explicitly return nil 1234567func initialLayoutAttributesForAppearingDecorationElement(ofKind elementKind: String, at decorationIndexPath: IndexPath) -&gt; UICollectionViewLayoutAttributes? { return nil}func finalLayoutAttributesForDisappearingDecorationElement(ofKind elementKind: String, at decorationIndexPath: IndexPath) -&gt; UICollectionViewLayoutAttributes? { return nil} Decoration seems to be removed when all items are removed. Workaround is to check and only add decoration when there is preferred data or cell","link":"/blog/How-to-disable-implicit-decoration-view-animation-in-UICollectionView/"},{"title":"How to debug iOS apps","text":"Issue #95 Hi, here are some projects to help us debugging apps easier https://github.com/krzysztofzablocki/LifetimeTracker https://github.com/fastred/DeallocationChecker https://github.com/Flipboard/FLEX https://github.com/facebook/flipper https://github.com/wojteklu/Watchdog https://github.com/yagiz/Bagel https://github.com/isavynskyi/LayoutInspector https://github.com/kasketis/netfox https://github.com/meitu/MTHawkeye https://github.com/indragiek/InAppViewDebugger","link":"/blog/How-to-debug-iOS-apps/"},{"title":"How to disable ring type in TextField in SwiftUI","text":"Issue #636 Normally we can just wrap NSTextField 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051struct SearchTextField: NSViewRepresentable { @Binding var text: String var hint: String var onCommit: (String) -&gt; Void func makeNSView(context: NSViewRepresentableContext&lt;SearchTextField&gt;) -&gt; NSTextField { let tf = NSTextField() tf.focusRingType = .none tf.isBordered = false tf.isEditable = true tf.isSelectable = true tf.drawsBackground = false tf.delegate = context.coordinator tf.font = NSFont(name: OpenSans.bold.rawValue, size: 14) tf.placeholderString = hint return tf } func updateNSView( _ nsView: NSTextField, context: NSViewRepresentableContext&lt;SearchTextField&gt; ) { nsView.font = NSFont(name: OpenSans.bold.rawValue, size: 14) nsView.stringValue = text } func makeCoordinator() -&gt; SearchTextField.Coordinator { Coordinator(parent: self) } class Coordinator: NSObject, NSTextFieldDelegate { let parent: SearchTextField init(parent: SearchTextField) { self.parent = parent } func controlTextDidChange(_ obj: Notification) { let textField = obj.object as! NSTextField parent.text = textField.stringValue } func control(_ control: NSControl, textView: NSTextView, doCommandBy commandSelector: Selector) -&gt; Bool { if (commandSelector == #selector(NSResponder.insertNewline(_:))) { self.parent.onCommit(textView.string) return true } else { return false } } }} But there is a weird Appstore rejection where the textfield is not focusable. The workaround is to use TextField 12345678910111213141516extension NSTextField { open override var focusRingType: NSFocusRingType { get { .none } set { } }}TextField( \"What's next?\", text: $text, onCommit: { self.onAdd(self.text) }).font(.system(size: 14, weight: .semibold, design: .rounded)).textFieldStyle(PlainTextFieldStyle()).padding(1).background(RoundedRectangle(cornerRadius: 2).stroke(Color.white))","link":"/blog/How-to-disable-ring-type-in-TextField-in-SwiftUI/"},{"title":"How to custom UIAlertController in iOS","text":"Issue #461 With UIAlertController we can add buttons and textfields, and just that 12func addAction(UIAlertAction)func addTextField(configurationHandler: ((UITextField) -&gt; Void)?) To add custom content to UIAlertController, there are some workarounds Add content onto UITextFieldRestyle UITextField and add custom content Subclass UIAlertController and handle UI in viewWillAppearBy subclassing we can tweak the whole view hierarchy and listen to events like layout subviews, but this can be very fragile. Make custom UIViewController that looks like UIAlertControllerThis is the correct way but takes too much time to imitate UIAlertController, and have to deal with UIVisualEffectView, resize view for different screen sizes and dark mode Add view to UIAlertController viewWe can detect UILabel to add our custom view below it, using How to find subview recursively in Swift But a less work approach is to add it above buttons, this is easily achieved by offsetting bottom. The trick is here is to have line breaks in message to leave space for our custom view. 1234567891011121314151617181920212223242526let controller = UIAlertController( title: title, message: message + String(repeating: \"\\n\", count: 10), preferredStyle: .alert)let continueAction = UIAlertAction( title: R.string.localizable.continue(), style: .default) { _ in action()}let cancelAction = UIAlertAction(title: R.string.localizable.cancel(), style: .cancel)controller.addAction(cancelAction)controller.addAction(continueAction)let customView = UIView()customView.backgroundColor = UIColor.greencontroller.view.addSubview(customView)NSLayoutConstraint.on([ customView.leftAnchor.constraint(equalTo: controller.view.leftAnchor), customView.rightAnchor.constraint(equalTo: controller.view.rightAnchor), customView.bottomAnchor.constraint(equalTo: controller.view.bottomAnchor, constant: -50), customView.heightAnchor.constraint(equalToConstant: 100)])","link":"/blog/How-to-custom-UIAlertController-in-iOS/"},{"title":"How to declare generic RecyclerView adapter in Android","text":"Issue #357 generic/Adapter.kt 12345678910111213141516171819202122232425262728293031package com.onmyway133.genericimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.recyclerview.widget.RecyclerViewabstract class Adapter&lt;T&gt;(var items: ArrayList&lt;T&gt;): RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;() { abstract fun configure(item: T, holder: ViewHolder) fun update(items: ArrayList&lt;T&gt;) { this.items = items notifyDataSetChanged() } override fun getItemCount(): Int = items.count() override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder { val view = LayoutInflater .from(parent.context) .inflate(viewType, parent, false) return ViewHolder(view) } override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) { configure(items[position], holder as ViewHolder) }}class ViewHolder(view: View): RecyclerView.ViewHolder(view) {} hero/HeroAdapter.kt 12345678910111213package com.onmyway133.heroimport kotlinx.android.synthetic.main.hero_item_view.view.*class Adapter(items: ArrayList&lt;Hero&gt;): com.onmyway133.generic.Adapter&lt;Hero&gt;(items) { override fun configure(item: Hero, holder: ViewHolder) { holder.itemView.titleLabel.text = item.name holder.itemView.descriptionLabel.text = item.description } override fun getItemViewType(position: Int): Int { return R.layout.hero_item_view }} May run into https://stackoverflow.com/questions/49512629/default-interface-methods-are-only-supported-starting-with-android-n app/build.gradle 123456android { compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 }}","link":"/blog/How-to-declare-generic-RecyclerView-adapter-in-Android/"},{"title":"How to do UITests with Google Maps on iOS","text":"Issue #374 Interact with GMSMapViewAdd accessibilityIdentifier to the parent view of GMSMapView. Setting directly onto GMSMapView has no effect 1accessibilityIdentifier = \"MapView\" 1234567let map = app.otherElements.matching(identifier: \"MapView\").element(boundBy: 0)map.pinch(withScale: 2, velocity: 1)map.rotate(CGFloat.pi/3, withVelocity: 1.0)map.swipeLeft()map.swipeRight()map.swipeDown()map.swipeDown() Interact with GMSMarker (1st try)Need to enable accessibility 1mapView.accessibilityElementsHidden = false Can‚Äôt use pinch to zoom out with UITests, so need to mock location !!! 1map().pinch(withScale: 0.05, velocity: -1) Need to use gpx to mock to preferred location 1234let map = app.otherElements[Constant.AccessibilityId.mapView.rawValue]let pin = app.otherElements .matching(identifier: Constant.AccessibilityId.pin.rawValue) .element(boundBy: 0) Try isAccessibilityElement = true for PinView, can‚Äôt touch!!Use coordinate, can‚Äôt touch !! 12let coordinate = pin.coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.5))coordinate.tap() Try traversing all the pins, can‚Äôt touch 123456Array(0..&lt;pins.count).forEach { let pin = pins.element(boundBy: $0) if pin.isHittable { pin.tap() }} When po app.otherElements, coordinates are outside screen 1Other, {{1624.0, 1624.0}, {30.0, 30.0}}, identifier: 'pin', label: 'Hello world' Interact with GMSMarker (works)My PinView has isHittable being false, no matter how I use coordinate or enable it. It can‚Äôt be touched. Go to Xcode -&gt; Open Developer Tool -&gt; Accessibility Inspector to inspect our app in iOS simulator It turns out that if I do 1po app.buttons It shows all the GMSMarker, but with identifier having class name MyApp.MyStopMarker, so just need to use buttons 1234567891011extension NSPredicate { static func contains(identifier: String) -&gt; NSPredicate { return NSPredicate(format: \"identifier CONTAINS[c] '\\(text)'\") }}let pin = map() .buttons.matching(NSPredicate.contains(\"MyStopMarker\")) .element(boundBy: 0)pin.tap()","link":"/blog/How-to-do-UITests-with-Google-Maps-on-iOS/"},{"title":"How to do clustering with Google Maps in iOS","text":"Issue #191 Basic with Google MapsAdd to Podfile pod 'GoogleMaps' Add a custom marker 1234567891011121314151617import GoogleMapsfinal class StopMarker: GMSMarker { let stop: Stop init(stop: Stop) { self.stop = stop super.init() self.title = stop.name self.position = stop.toCoordinate() let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 30, height: 30)) imageView.layer.cornerRadius = 15 imageView.image = UIImage(named: \"pin\") self.iconView = imageView }} Show markers 123456789func handle(stops: [Stop]) { self.stops = stops stops .map({ StopMarker(stop: $0) }) .forEach { $0.map = mapView } } Assigning $0.map = mapView means telling GMSMapView to start rendering markers Handle tap 123456789101112131415extension ViewController: GMSMapViewDelegate { func mapView(_ mapView: GMSMapView, didTap marker: GMSMarker) -&gt; Bool { zoomIn(coordinate: marker.position) return false } func mapView(_ mapView: GMSMapView, didTapInfoWindowOf marker: GMSMarker) { guard let stopMarker = marker as? StopMarker else { return } let detailViewController = StopDetailViewController(stop: stopMarker.stop) presentPanModal(detailViewController) }} ClusteringAdd google-maps-ios-utils manually by following https://github.com/googlemaps/google-maps-ios-utils/blob/master/Swift.md Otherwise, with CocoaPods, we get error 1[!] The 'Pods-MyApp' target has transitive dependencies that include static binaries: (/Users/khoa/Projects/MyApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.framework, /Users/khoa/Projects/MyApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.framework, and /Users/khoa/Projects/MyApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMapsCore.framework) Add ClusterItem 123456789101112import Foundationimport CoreLocationclass ClusterItem: NSObject, GMUClusterItem { let position: CLLocationCoordinate2D let stop: Stop init(stop: Stop) { self.stop = stop self.position = stop.toCoordinate() }} Set up cluster manager 123456let iconGenerator = GMUDefaultClusterIconGenerator()let algorithm = GMUNonHierarchicalDistanceBasedAlgorithm()let renderer = GMUDefaultClusterRenderer(mapView: mapView, clusterIconGenerator: iconGenerator)renderer.delegate = selfclusterManager = GMUClusterManager(map: mapView, algorithm: algorithm, renderer: renderer)clusterManager.setDelegate(self, mapDelegate: self) Default algorithm GMUNonHierarchicalDistanceBasedAlgorithm 123456789A simple clustering algorithm with O(nlog n) performance. Resulting clusters are not* hierarchical.* High level algorithm:* 1. Iterate over items in the order they were added (candidate clusters).* 2. Create a cluster with the center of the item.* 3. Add all items that are within a certain distance to the cluster.* 4. Move any items out of an existing cluster if they are closer to another cluster.* 5. Remove those items from the list of candidate clusters.* Clusters have the center of the first element (not the centroid of the items within it). Make ClusterItem and add to clusterManager. In the end, call clusterManager.cluster() 1234567891011func handle(stops: [Stop]) { self.stops = stops stops .map({ StopMarker(stop: $0) }) .forEach { let item = ClusterItem(stop: $0.stop) clusterManager.add(item) } clusterManager.cluster()} By default, clusterManager uses renderer to render default pin marker. Implement GMUClusterRendererDelegate to use our custom StopMarker 12345678910extension ViewController: GMUClusterRendererDelegate { func renderer(_ renderer: GMUClusterRenderer, markerFor object: Any) -&gt; GMSMarker? { switch object { case let clusterItem as ClusterItem: return StopMarker(stop: clusterItem.stop) default: return nil } }} Finally handle tapping on cluster and cluster item 1234567891011extension ViewController: GMUClusterManagerDelegate { func clusterManager(_ clusterManager: GMUClusterManager, didTap cluster: GMUCluster) -&gt; Bool { print(\"tap cluster\") return false } func clusterManager(_ clusterManager: GMUClusterManager, didTap clusterItem: GMUClusterItem) -&gt; Bool { print(\"tap cluster item\") return false }}","link":"/blog/How-to-do-clustering-with-Google-Maps-in-iOS/"},{"title":"How to define version property in gradle","text":"Issue #351 From Gradle tips and recipes, Configure project-wide properties For projects that include multiple modules, it might be useful to define properties at the project level and share them across all modules. You can do this by adding extra properties to the ext block in the top-level build.gradle file. 12345ext { navigationVersion = \"2.0.0\"}rootProject.ext.navigationVersion Versions are used mostly in dependencies block so having them defined in global ext is not quite right. We can use def to define variables 1234dependencies { def navigationVersion = \"2.0.0\" implementation \"androidx.navigation:navigation-fragment-ktx:$navigationVersion\"} For better namespacing, we can use a class 12345678910class Version { static def navigation = \"2.0.0\" static def drawerLayout = \"1.0.0\" static def koin = \"2.0.1\" static def moshi = \"1.8.0\"}dependencies { implementation \"androidx.navigation:navigation-fragment-ktx:$Version.navigation\"}","link":"/blog/How-to-define-version-property-in-gradle/"},{"title":"How to do delegate with RxSwift","text":"Issue #12 We can use DelegateProxy and DelegateProxyType to make beautiful delegate with RxSwift. But in some other cases, we can just create a custom class with PublishSubject. This is how we can make rx out of UIApplication life cycle events 12345678910111213141516171819202122232425262728293031class LifeCycle { let didEnterBackground = PublishSubject&lt;Void&gt;() let willEnterForeground = PublishSubject&lt;Void&gt;() let didBecomeActive = PublishSubject&lt;Void&gt;() let willResignActive = PublishSubject&lt;Void&gt;() init() { let center = NotificationCenter.default let app = UIApplication.shared center.addObserver(forName: Notification.Name.UIApplicationDidEnterBackground, object: app, queue: .main, using: { [weak self] _ in self?.didEnterBackground.onNext(()) }) center.addObserver(forName: Notification.Name.UIApplicationWillEnterForeground, object: app, queue: .main, using: { [weak self] _ in self?.willEnterForeground.onNext(()) }) center.addObserver(forName: Notification.Name.UIApplicationDidBecomeActive, object: app, queue: .main, using: { [weak self] _ in self?.didBecomeActive.onNext(()) }) center.addObserver(forName: Notification.Name.UIApplicationWillResignActive, object: app, queue: .main, using: { [weak self] _ in self?.willResignActive.onNext(()) }) }} Usage123456let lifeCycle = LifeCycle()lifeCycle.didBecomeActive .bindNext({ [weak self] in self?.viewModel.reloadProfile() }) .disposed(by: bag)","link":"/blog/How-to-do-delegate-with-RxSwift/"},{"title":"How to do localization in Xcode","text":"Issue #545 Xcode 10 Localization catalog and XclocReader New Localization Workflows in Xcode 10 Xcode 11 localized screenshots Creating Great Localized Experiences with Xcode 11","link":"/blog/How-to-do-localization-in-Xcode/"},{"title":"How to do curry in Swift","text":"Issue #30 Haskell is notorious for currying, and Swift has currying, too I love ReactiveCocoa, RxSwift and I always take time to dig into it. The other day, I was practise making Signal based on this talk UIKonf 2015 - Jens Ravens: Functional Reactive Programming without Black Magic Take a look at my repo Signal filterI was making a filter for a Signal. The idea of filter is that we should update signal if the Event is Next with right filtered value Signal.swift 12345678910111213public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt;{ let signal = Signal&lt;T&gt;() subscribe { result in switch(result) { case let .Success(value): if f(value) { signal.update(result) } case let .Error(error): signal.update(.Error(error)) } } return signal} 2 paramsBut having Event as another monad, I think it should be more encapsulated if that switching logic gets moved into the Event. Here the filter takes 2 params Event.swift 12345678910func filter(f: T -&gt; Bool, callback: (Event&lt;T&gt; -&gt; Void)) { switch self { case let .Next(value) where f(value): callback(self) case .Failed: callback(self) default: break }} Signal.swift 123456789public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt; { let signal = Signal&lt;T&gt;() subscribe { event in event.filter(f, callback: signal.update) } return signal} CurryingWith currying, we can make filter a more abstract function, and defer the decision to pass the callback param. It is a little carried away but I find it helpful this way Now filter accepts 1 param, and it returns a function that takes callback as its param Event.swift 123456789101112func filter(f: T -&gt; Bool) -&gt; ((Event&lt;T&gt; -&gt; Void) -&gt; Void) { return { g in switch self { case let .Next(value) where f(value): g(self) case .Failed: g(self) default: break } } } Signal.swift 123456789public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt; { let signal = Signal&lt;T&gt;() subscribe { event in event.filter(f)(signal.update) } return signal } Curry syntax in Swift 2Swift 2 supports curry syntax function 1234567func sum(a: Int)(b: Int) -&gt; Int { return a + b}let sumWith5 = sum(5)let result = sumWith5(b: 10) No more curry syntax in Swift 3You may want to find out Bidding farewell to currying Reference Higher order functions What is the advantage of currying? Practical use of curried functions? Introduction to Function Currying in Swift Swift Function Currying","link":"/blog/How-to-do-curry-in-Swift/"},{"title":"How to do custom presentation with UIViewPropertyAnimator in iOS","text":"Issue #337 Normally we just present from any UIViewController in any UINavigationController in UITabBarController and it will present over tabbar 1present(detailViewController, animated: true, completion: nil) If we have animation with UIViewPropertyAnimator, then we can implement UIViewControllerAnimatedTransitioning and interruptibleAnimator(using:) The methods in this protocol let you define an animator object, which creates the animations for transitioning a view controller on or off screen in a fixed amount of time. The animations you create using this protocol must not be interactive. To create interactive transitions, you must combine your animator object with another object that controls the timing of your animations. Implement this method when you want to perform your transitions using an interruptible animator object, such as a UIViewPropertyAnimator object. You must return the same animator object for the duration of the transition. For more fine-grained control, we can have UIPresentationController From the time a view controller is presented until the time it is dismissed, UIKit uses a presentation controller to manage various aspects of the presentation process for that view controller. The presentation controller can add its own animations on top of those provided by animator objects, it can respond to size changes, and it can manage other aspects of how the view controller is presented onscreen. A lazy approach is to present without animation and do animation after 1234present(detailViewController, animated: false, completion: { let animator = UIViewPropertyAnimator() animator.startAnimation()}) If we don‚Äôt want to involve UIViewController then we can work on UIView level. This way we can animate hiding tab bar. Any UIViewController within UITabBarController has tabBarController 12345let animator = UIViewPropertyAnimator()animator.addAnimations { self.tabBarController?.tabBar.transform = CGAffineTransform(translationX: 0, y: tabbar.frame.height)}animator.startAnimation()","link":"/blog/How-to-do-custom-presentation-with-UIViewPropertyAnimator-in-iOS/"},{"title":"How to do implement notification in iOS with Firebase","text":"Issue #64 Note: This applies to Firebase 4.0.4 Preparing push notification certificateGo to Member Center -&gt; Certificates -&gt; Production CertificateYou can now use 1 certificate for both sandbox and production environment Auth Key If you like to use Auth Key, read Provider Authentication Tokens Configure push notification Go to Firebase Console -&gt; Settings -&gt; Project Settings -&gt; Cloud Messaging -&gt; iOS app configuration If you use certificate, use just 1 Apple Push Notification service SSL for both fields If you use Authenticate Key, fill in APNS auth key Adding podIn your Podfile, declare 12pod 'Firebase/Core'pod 'Firebase/Messaging' Disabling app delegate swizzling Read Method swizzling in Firebase Cloud Messaging You should say NO to swizzling. Do this in your Info.plist 12&lt;key&gt;FirebaseAppDelegateProxyEnabled&lt;/key&gt;&lt;false/&gt; Read more on Messaging.messaging().apnsToken This property is used to set the APNS Token received by the application delegate.FIRMessaging uses method swizzling to ensure the APNS token is set automatically. However, if you have disabled swizzling by setting FirebaseAppDelegateProxyEnabled to NO in your app‚Äôs Info.plist, you should manually set the APNS token in your application delegate‚Äôs -application:didRegisterForRemoteNotificationsWithDeviceToken: method.If you would like to set the type of the APNS token, rather than relying on automatic detection, see: -setAPNSToken:type:. Configuring FirebaseYou can and should configure Firebase in code 12345678import Firebaselet options = FirebaseOptions(googleAppID: \"\", gcmSenderID: \"\")options.bundleID = \"\"options.apiKey = \"\"options.projectID = \"\"options.clientID = \"\"FirebaseApp.configure(options: options) Handling device token12345import Firebasefunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) { Messaging.messaging().apnsToken = deviceToken} Getting FCM tokenRetrieving FCM tokenRead Access the registration token By default, the FCM SDK generates a registration token for the client app instance on initial startup of your app. Similar to the APNs device token, this token allows you to target notification messages to this particular instance of the app. 1Messaging.messaging().fcmToken Observing for FCM token changeRead Monitor token generation 1234567Messaging.messaging().delegate = self// MARK: - MessagingDelegatefunc messaging(_ messaging: Messaging, didRefreshRegistrationToken fcmToken: String) { print(fcmToken)}","link":"/blog/How-to-do-implement-notification-in-iOS-with-Firebase/"},{"title":"How to declare escaping in completion in callback in Swift","text":"Issue #464 123typealias Completion = (Result&lt;User, Error&gt;) -&gt; Voidfunc validate(completion: @escaping Completion, then: (String, String, @escaping Completion) -&gt; Void) {}","link":"/blog/How-to-declare-escaping-in-completion-in-callback-in-Swift/"},{"title":"How to do launch screen in Android","text":"Issue #397 We recommend that, rather than disabling the preview window, you follow the common Material Design patterns. You can use the activity‚Äôs windowBackground theme attribute to provide a simple custom drawable for the starting activity. styles.xml 123&lt;style name=\"LaunchTheme\" parent=\"Theme.AppCompat.NoActionBar\"&gt; &lt;item name=\"android:windowBackground\"&gt;@drawable/launch_background&lt;/item&gt;&lt;/style&gt; Set android:theme=&quot;@style/LaunchTheme&quot; to activity element AndroidManifest.xml 12345678910111213141516171819202122232425&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.onmyway133.whatsupintech\"&gt; &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt; &lt;application android:name=\".MyApplication\" android:allowBackup=\"true\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:theme=\"@style/AppTheme\"&gt; &lt;activity android:name=\".features.main.MainActivity\" android:label=\"@string/app_name\" android:theme=\"@style/LaunchTheme\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\"/&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; MainActivity.kt 12345678class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { setTheme(R.style.AppTheme_NoActionBar) super.onCreate(savedInstanceState) setContentView(R.layout.main_activity) }} Read more The Complete Android Splash Screen Guide Themed launch screens","link":"/blog/How-to-do-launch-screen-in-Android/"},{"title":"How to do navigation in SwiftUI in watchOS","text":"Issue #447 NavigationView is not available on WatchKit, but we can just use NavigationLink 12345678910111213141516List(services.map({ AnyService($0) })) { anyService in NavigationLink(destination: ItemsView(service: anyService.service) .navigationBarTitle(anyService.service.name) .onDisappear(perform: { anyService.service.requestCancellable?.cancel() }) ) { HStack { Image(anyService.service.name) .resizable() .frame(width: 30, height: 30, alignment: .leading) Text(anyService.service.name) } }} Adding NavigationLink to a View adds a round shadow cropping effect, which is usually not want we want. But we shouldn‚Äôt wrap Button as Button handles its own touch event, plus it has double shadow effect. 1234567NavigationLink(destination: QRCodeView(title: item.title, url: item.url)) { Button(action: {}) { Text(\"Open\") }} Just use Text and it‚Äôs good to go 12345NavigationLink(destination: QRCodeView(title: item.title, url: item.url)) { Text(\"Open\")}","link":"/blog/How-to-do-navigation-in-SwiftUI-in-watchOS/"},{"title":"How to do throttle and debounce using DispatchWorkItem in Swift","text":"Issue #376 https://github.com/onmyway133/Omnia/blob/master/Sources/Shared/Debouncer.swift 1234567891011121314151617import Foundationpublic class Debouncer { private let delay: TimeInterval private var workItem: DispatchWorkItem? public init(delay: TimeInterval) { self.delay = delay } /// Trigger the action after some delay public func run(action: @escaping () -&gt; Void) { workItem?.cancel() workItem = DispatchWorkItem(block: action) DispatchQueue.main.asyncAfter(deadline: .now() + delay, execute: workItem!) }} 12345678910111213141516171819202122232425262728293031import XCTestclass DebouncerTests: XCTestCase { func testDebounce() { let expectation = self.expectation(description: #function) let debouncer = Debouncer(delay: 0.5) var value = 0 debouncer.run(action: { value = 1 }) debouncer.run(action: { value = 2 }) DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.2, execute: { debouncer.run(action: { value = 3 }) }) DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.71, execute: { XCTAssertEqual(value, 3) expectation.fulfill() }) wait(for: [expectation], timeout: 1.2) }}","link":"/blog/How-to-do-throttle-and-debounce-using-DispatchWorkItem-in-Swift/"},{"title":"How to do rotation for CALayer in iOS","text":"Issue #229 Use keypath123456let animation = CASpringAnimation(keyPath: #keyPath(CALayer.transform))animation.fromValue = 0animation.valueFunction = CAValueFunction(name: CAValueFunctionName.rotateZ)animation.timingFunction = CAMediaTimingFunction(name: .easeIn)animation.toValue = CGFloat.pi / 4 Avoid setting frame many timesOtherwise, frame is the box that covers the rotation transform, and backgroundColor now fills that huge box 123456789101112override func layoutSubviews() { super.layoutSubviews() guard line.frame.width &lt;= 0 else { return } line.backgroundColor = UIColor.red.cgColor line.cornerRadius = 3 line.frame.size = CGSize(width: bounds.width*0.6, height: 6) line.position = layer.position} Auto LayoutAvoid using Auto Layout for the rotated view","link":"/blog/How-to-do-rotation-for-CALayer-in-iOS/"},{"title":"How to downsample image in iOS","text":"Issue #310 https://www.swiftjectivec.com/optimizing-images/ https://nshipster.com/image-resizing/","link":"/blog/How-to-downsample-image-in-iOS/"},{"title":"How to declare commands in Xcode extenstions","text":"Issue #638 Use commandDefinitions in XCSourceEditorExtension. 12345678910111213141516171819202122232425262728import Foundationimport XcodeKitclass SourceEditorExtension: NSObject, XCSourceEditorExtension { func extensionDidFinishLaunching() { } var commandDefinitions: [[XCSourceEditorCommandDefinitionKey: Any]] { func makeDef( _ className: String, _ commandName: String ) -&gt; [XCSourceEditorCommandDefinitionKey: Any] { guard let bundleId = Bundle(for: type(of: self)).bundleIdentifier else { return [:] } return [ XCSourceEditorCommandDefinitionKey.identifierKey: bundleId + className, XCSourceEditorCommandDefinitionKey.classNameKey: className, XCSourceEditorCommandDefinitionKey.nameKey: commandName ] } return [ makeDef(TypeCommand.className(), \"Type\"), makeDef(ReloadCommand.className(), \"Reload\"), ] }} There is a weird crash that we can‚Äôt seem to declare functions or use commandDefinitions, the workaround is to declare in plist Read more https://nshipster.com/xcode-source-extensions/","link":"/blog/How-to-declare-commands-in-Xcode-extenstions/"},{"title":"How to edit selected item in list in SwiftUI","text":"Issue #605 I use custom TextView in a master detail application. 123456789101112131415161718192021222324252627282930313233import SwiftUIstruct TextView: NSViewRepresentable { @Binding var text: String func makeCoordinator() -&gt; Coordinator { Coordinator(self) } func makeNSView(context: Context) -&gt; NSTextView { let textView = NSTextView() textView.delegate = context.coordinator return textView } func updateNSView(_ nsView: NSTextView, context: Context) { guard nsView.string != text else { return } nsView.string = text } class Coordinator: NSObject, NSTextViewDelegate { let parent: TextView init(_ textView: TextView) { self.parent = textView } func textDidChange(_ notification: Notification) { guard let textView = notification.object as? NSTextView else { return } self.parent.text = textView.string } }} No matter which item user selects, textView always updates the first one 1234567891011121314151617181920212223242526struct Book { var name: String = \"\"}class Store: ObservableObject { @Published var books: [Book] = []}struct MainView: View { @EnvironmentObject var store: Store var body: some View { List { ForEach(store.books.enumerated().map({ $0 }), id: \\.element.id) { index, book in { Text(book.name) .onTapGesture { self.store.selectedIndex = index } } } HStack { TextView($store.books[store.selectedIndex].name) } }} The fix is to pass selected object instead of using subscript 123456789101112131415161718struct MainView: View { @EnvironmentObject var store: Store var body: some View { List { ForEach(store.books.enumerated().map({ $0 }), id: \\.element.id) { index, book in { Text(book.name) .onTapGesture { self.store.selectedBook = self.store.books[index] } } } HStack { TextView($store.selectedBook.name) } }} And we need to save selectedBook 1234567891011121314151617class Store: ObservableObject { @Published var books: [Book] = [] @Published var selectedBook: Book = Book(name: \"\") { didSet { saveSelected() } } func saveSelected() { guard let index = self.books.firstIndex(where: { $0.id == selectedBook.id }) else { return } books[index] = selectedBook }} Read more https://stackoverflow.com/questions/60221340/how-to-reload-uiviewrepresentable-in-master-detail-views","link":"/blog/How-to-edit-selected-item-in-list-in-SwiftUI/"},{"title":"How to embed UIStackView inside UIScrollView in iOS","text":"Issue #324 1234567891011view.addSubview(scrollView)scrollView.addSubview(stackView)NSLayoutConstraint.on([ scrollView.pinEdges(view: view), stackView.pinEdges(view: scrollView)])NSLayoutConstraint.on([ stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, multiplier: 1.0)])","link":"/blog/How-to-embed-UIStackView-inside-UIScrollView-in-iOS/"},{"title":"How to do simple analytics in iOS","text":"Issue #395 Prefer static enum to avoid repetition and error. The Log should have methods with all required fields so the call site is as simple as possible. How to format and assign parameters is encapsulated in this Analytics. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import Foundationimport Firebaseimport FirebaseAnalyticsstruct Analytics { enum Parameter: String { case studentId = \"student_id\" case classId = \"class_id\" case url = \"url\" } enum Property: String { case grantLocation = \"grant_location\" } enum Name: String { case login case logOut = \"log_out\" case enroll } struct Log { private func log(_ name: Name, parameters: [Parameter: String] = [:]) { let mapped: [String: String] = Dictionary(uniqueKeysWithValues: parameters.map({ key, value in return (key.rawValue, value) })) FirebaseAnalytics.Analytics.logEvent(name.rawValue, parameters: mapped) } private func set(userId: String?) { FirebaseAnalytics.Analytics.setUserID(userId) } private func setProperty(_ property: Property, value: String) { FirebaseAnalytics.Analytics.setUserProperty(value, forName: property.rawValue) } } let log = Log()}extension Analytics.Log { func grantLocation(hasGranted: Bool) { setProperty(.grantLocation, value: hasGranted.toString()) } func login(userId: String) { log(.login) set(userId: userId) } func logOut() { log(.logOut) set(userId: nil) } func enroll(classId: String) { log(.enroll, parameters: [ .classId: classId ]) }}private extension Bool { func toString() -&gt; String { return self ? \"yes\": \"no\" }}","link":"/blog/How-to-do-simple-analytics-in-iOS/"},{"title":"How to do lense in Swift","text":"Issue #528 What is lensehttps://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/a-little-lens-starter-tutorial A lens is a first-class reference to a subpart of some data type. For instance, we have _1 which is the lens that ‚Äúfocuses on‚Äù the first element of a pair. Given a lens there are essentially three things you might want to do View the subpartModify the whole by changing the subpartCombine this lens with another lens to look even deeper Before, use functional approachhttp://chris.eidhof.nl/post/lenses-in-swift/ 123456789101112131415161718192021222324struct Person { let name_ : String let address_ : Address}struct Address { let street_ : String let city_ : String}struct Lens&lt;A,B&gt; { let from : A -&gt; B let to : (B, A) -&gt; A}let address : Lens&lt;Person,Address&gt; = Lens(from: { $0.address_ }, to: { Person(name_: $1.name_, address_: $0)})let street : Lens&lt;Address,String&gt; = Lens(from: { $0.street_ }, to: { Address(street_: $0, city_: $1.city_)})let newAddress = street.to(\"My new street name\", existingAddress) Now, with Keypathhttps://iankeen.tech/2018/06/05/type-safe-temporary-models/https://swiftbysundell.com/articles/defining-testing-data-in-swift/ Use KeyPath to modify struct data 123456789101112protocol Stubbable: Identifiable { static func stub(withID id: Identifier&lt;Self&gt;) -&gt; Self}extension Stubbable { func setting&lt;T&gt;(_ keyPath: WritableKeyPath&lt;Self, T&gt;, to value: T) -&gt; Self { var stub = self stub[keyPath: keyPath] = value return stub }}","link":"/blog/How-to-do-lense-in-Swift/"},{"title":"How to expression cast type in lldb in Swit","text":"Issue #574 123expr -l Swift -- import UIKitexpr -l Swift -- let $collectionView = unsafeBitCast(0x7fddd8180000, to: UICollectionView.self)expr -l Swift -- $collectionView.safeAreaInsets","link":"/blog/How-to-expression-cast-type-in-lldb-in-Swit/"},{"title":"How to find active application in macOS","text":"Issue #608 An NSRunningApplication instance for the current application. 1NSRunningApplication.current The running app instance for the app that receives key events. 1NSWorkspace.shared.frontmostApplication","link":"/blog/How-to-find-active-application-in-macOS/"},{"title":"How to enable black mode in Google Maps in iOS","text":"Issue #246 Use GMSMapStyle https://developers.google.com/maps/documentation/android-sdk/stylingExport styling json from https://mapstyle.withgoogle.com/ 12let mapStyleUrl = Bundle.main.url(forResource: \"mapStyle\", withExtension: \"json\")!mapView.mapStyle = try? GMSMapStyle(contentsOfFileURL: mapStyleUrl) To change overall color, search for mostly &quot;elementType&quot;: &quot;geometry&quot; and &quot;featureType&quot;: &quot;water&quot; 12345678{ \"elementType\": \"geometry\", \"stylers\": [ { \"color\": \"#424242\" } ]} 123456789{ \"featureType\": \"water\", \"elementType\": \"geometry\", \"stylers\": [ { \"color\": \"#2E2E2E\" } ]}","link":"/blog/How-to-enable-black-mode-in-Google-Maps-in-iOS/"},{"title":"How to find subview recursively in Swift","text":"Issue #460 12345678910111213extension UIView { func findRecursively&lt;T: UIView&gt;(type: T.Type, match: (T) -&gt; Bool) -&gt; T? { for view in subviews { if let subview = view as? T, match(subview) { return subview } else { return view.findRecursively(type: type, match: match) } } return nil }}","link":"/blog/How-to-find-subview-recursively-in-Swift/"},{"title":"How to edit hexo theme hiero","text":"Issue #494 Code https://github.com/iTimeTraveler/hexo-theme-hiero Remove max-width from source/css/style.styl 12345.outer clearfix() // max-width: (column-width + gutter-width) * columns + gutter-width margin: 40px auto padding: 0 gutter-width Change font-size of code block from source/css/_partial/highlight.styl 1234567891011$code-block background: $highlight-background margin: article-padding article-padding * 0 padding: 15px article-padding border-style: solid border-color: color-border border-width: 1px 0 overflow: auto color: $highlight-foreground font-size: 1.0em; line-height: 1em Change font-size of article-header from source/css/_partial/article.styl 12345678.article-header h1 margin: 0 0 3px 0; font-size: 26px; line-height: 1.2; a color: #404040; text-decoration: none; Change font-size of text from source/css/_partial/article.styl 123456789.article-entry @extend $base-style clearfix() color: color-default padding: 0 p, table line-height: line-height margin: line-height 0 font-size: 1.1em","link":"/blog/How-to-edit-hexo-theme-hiero/"},{"title":"How to execute an action only once in Swift","text":"Issue #10 There is time we want to execute an action only once. We can surely introduce a flag, but it will be nicer if we abstract that out using composition. Then we have 12345678910111213class Once { var already: Bool = false func run(@noescape block: () -&gt; Void) { guard !already else { return } block() already = true }} Usage1234567891011class ViewController: UIViewController { let once = Once() override func viewDidAppear(animated: Bool) { super.viewDidAppear(animated) once.run { cameraMan.setup() } }} In the same way, we can check to run a closure when a value changes 1234567891011121314final class WhenChange&lt;T: Equatable&gt; { private(set) var value: T init(value: T) { self.value = value } func run(newValue: T, closure: (T) -&gt; Void) { if newValue != value { value = newValue closure(value) } }}","link":"/blog/How-to-execute-an-action-only-once-in-Swift/"},{"title":"How to fix ApiException  10 in Flutter for Android","text":"Issue #188 Get error com.google.android.gms.common.api.ApiException: 10 with google_sign_in package. Read https://developers.google.com/android/guides/client-auth Certain Google Play services (such as Google Sign-in and App Invites) require you to provide the SHA-1 of your signing certificate so we can create an OAuth2 client and API key for your app console.developers.google.com/apis/credentials Credentials -&gt; OAuth client idIf we specify SHA1 in firebase, then console.developers.google.com will generate an Android oauth for us 1keytool -list -v -keystore {keystore_name} -alias {alias_name} Use correct keystore for debug and release 12345678910buildTypes { release { // TODO: Add your own signing config for the release build. // Signing with the debug keys for now, so `flutter run --release` works. signingConfig signingConfigs.release } debug { signingConfig signingConfigs.debug } }","link":"/blog/How-to-fix-ApiException-10-in-Flutter-for-Android/"},{"title":"How to fix MethodError - undefined method &#96;real_path&#96; with CocoaPods?","text":"Issue #170 I‚Äôm using cocoapods 1.6.0.beta.2 in a React Native apps and it has been working fine. The pods that I need is Firebase and FacebookSDK. Today after pod install, I got error 1NoMethodError - undefined method `real_path' for nil:NilClass I then tried running pod deintegrate to start from scratch, but that command fails as well. My next try is with cocoapods 1.6.0 and cocoapods 1.6.1 but the problem still persists. undefined method in Ruby means that we are calling a method on an object that is nil. I like to track down problems via reading code, but this error is very vague. Looking thorough at the log, I see CocoaPods has done fetching dependencies, but fails at the integration step, so it must be something wrong with my project file. Then I trace back commits to project.pbxproj to see if there‚Äôs anything wrong. It turns out that there was a commit that accidentally removes Pods-MyApp Staging.release.xcconfig from project. That also comes with removal of 1baseConfigurationReference = B7FC69316CC27F11022F8A82 /* Pods-MyApp Staging.release.xcconfig */; CocoaPods uses xcconfigAs you know, CocoaPods uses xcconfig files to declare pod related information like FRAMEWORK_SEARCH_PATHS, OTHER_LDFLAGS and other variables like 1234PODS_BUILD_DIR = ${BUILD_DIR}PODS_CONFIGURATION_BUILD_DIR = ${PODS_BUILD_DIR}/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)PODS_PODFILE_DIR_PATH = ${SRCROOT}/.PODS_ROOT = ${SRCROOT}/Pods And for a normal pod install, CocoaPods adds some xcconfig files to your project, and the path is Pods/Target Support Files/Pods-DeepDiffDemo. There will always be debug.xcconfig and release.xcconfig for each of your project target. If your project MyApp has a production target called MyApp Production and MyApp Staging, then you should have these files 1234Pods-MyApp Staging.debug.xcconfigPods-MyApp Staging.release.xcconfigPods-MyApp Production.debug.xcconfigPods-MyApp Production.release.xcconfig These are added to projects but not checked to any targets. Just like plist, you don‚Äôt need to add xcconfig files to target. If you go to project Info page, you will see that these xcconfig files are selected Missing xcconfigIn my case, Pods-MyApp Staging.release.xcconfig was somehow missing from project, hence all pod commands fail. The fix is to re-add that file and select that xcconfig in project Info page","link":"/blog/How-to-fix-MethodError-undefined-method-real_path-with-CocoaPods/"},{"title":"How to fix Auto Layout issues in iOS","text":"Issue #369 UITemporaryLayoutHeight and UITemporaryLayoutWidth Demystify warnings with https://www.wtfautolayout.com/ Reduce priority Use Auto Layout directly instead of using manual frame layout, specially for scrolling pager NSAutoresizingMaskLayoutConstraint Check that a view ACTUALLY has translatesAutoresizingMaskIntoConstraints set to false UISV-spacing, UISV-distributing Check UIStackView Set stackview.alignment = .center if you see UIStackView trying to set same trailing or leading edges for its subviews Reduce priority if there‚Äôs edge constraints break from subviews to UIStackView Intrinsic size between UIImageView and UILabel When constraint to each other, can cause UILabel to disappear Reduce compression resistance 1imageView.setContentCompressionResistancePriority(UILayoutPriority.defaultLow, for: .vertical) UIAlertController sheet width == - 16https://stackoverflow.com/a/58666480/1418457 Read more https://useyourloaf.com/blog/stack-view-constraint-conflicts-when-hiding-views/","link":"/blog/How-to-fix-Auto-Layout-issues-in-iOS/"},{"title":"How to easily parse deep json in Swift","text":"Issue #414 Codable is awesome, but sometimes we just need to quickly get value in a deepy nested JSON. In the same way I did for Dart How to resolve deep json object in Dart, let‚Äôs make that in Swift. See https://github.com/onmyway133/Omnia/blob/master/Sources/Shared/JSON.swift 12345678910111213public func resolve&lt;T&gt;(_ jsonDictionary: [String: Any], keyPath: String) -&gt; T? { var current: Any? = jsonDictionary keyPath.split(separator: \".\").forEach { component in if let maybeInt = Int(component), let array = current as? Array&lt;Any&gt; { current = array[maybeInt] } else if let dictionary = current as? JSONDictionary { current = dictionary[String(component)] } } return current as? T} So we can just resolve via key path 1234567891011121314151617181920212223242526272829303132333435class JSONTests: XCTestCase { func test() { let json: [String: Any] = [ \"outside\": [ \"object\": [ \"number\": 1, \"text\": \"hello\" ], \"arrayOfObjects\": [ [ \"number\": 2, \"text\": \"two\" ], [ \"number\": 3, \"text\": \"three\" ] ], \"arrayOfArrays\": [ [ \"one\", \"two\", \"three\", \"four\" ], [ \"five\", \"six\", \"seven\" ] ] ] ] XCTAssertEqual(resolve(json, keyPath: \"outside.object.number\"), 1) XCTAssertEqual(resolve(json, keyPath: \"outside.object.text\"), \"hello\") XCTAssertEqual(resolve(json, keyPath: \"outside.arrayOfObjects.1.number\"), 3) XCTAssertEqual(resolve(json, keyPath: \"outside.arrayOfArrays.1.1\"), \"six\") }}","link":"/blog/How-to-easily-parse-deep-json-in-Swift/"},{"title":"How to fix Uncaught Error Cannot find module react","text":"Issue #145 This is my story through dealing with many dependencies when trying to package an electron app. Thanks to my friend https://github.com/timkurvers for helping me out ‚ù§Ô∏è This is like a note for my future self Fixing eventThe other I got an issue https://github.com/onmyway133/PushNotifications/issues/3 that reports there‚Äôs something wrong with production environment. The problem is that I used RadioButton and its onChange callback takes 2 parameters instead of 1. Trying packagingAfter the fix, I bump version in package.json and run yarn release. To my surprise, the built app was just blank. I tried win.toggleDevTools() to see what‚Äôs going on. I can‚Äôt use shortcut to open the dev tool any more in production, but there are tools https://github.com/sindresorhus/electron-debug. The console says that it can‚Äôt find the module ‚Äòreact‚Äô. I then submitted an issue https://github.com/electron-userland/electron-packager/issues/787 Uncaught Error: Cannot find module ‚Äòreact‚Äô My environment Node v8.4.0 npm 5.3.0 yarn 1.3.2 macOS 10.13.2 Inspecting with debug modeI then need to run in debug mode to see what‚Äôs really happening 1DEBUG=electron-packager npm run release The log says something about npm Command failed: npm prune ‚Äìproduction Digging a little, I found that this is quite a common issue https://github.com/electron-userland/electron-packager/issues/686 https://github.com/npm/npm/issues/17781 I think the issue may be because of I changed from https://github.com/creationix/nvm to https://github.com/nodenv/nodenv Updating nodenvThe latest stable version of https://nodejs.org/en/ is 8.9.4. To enable nodenv to see it, we need 1brew upgrade node-build Run the following so that you actually see the 8.9.4 1nodenv install --list Updating node.jsInstall version 8.9.4 123nodenv install 8.9.4nodenv global 8.9.4nodenv rehash Updating npmRun the following to update npm to 5.6.0 1npm update -g np Installing dependencies from scratchClear old node_modules and package-lock.json 12rm -rf node_modulesrm -rf package-lock.json Then install again 1npm install PackagingThe final step is to package the app again 1yarn release","link":"/blog/How-to-fix-Uncaught-Error-Cannot-find-module-react/"},{"title":"How to fix library not found with SPM and CocoaPods in  Xcode","text":"Issue #572 After migrating a few pods to use SPM, some libraries fail to load. This is because the workspace now uses both SPM and cocoapods code signature in ‚Ä¶ not valid for use in process using Library Validation: mapped file has no Team ID and is not a platform binary (signed with custom identity or adhoc?) The workaround is to disable Library validation","link":"/blog/How-to-fix-library-not-found-with-SPM-and-CocoaPods-in-Xcode/"},{"title":"How to fix UIToolbar Auto Layout issues","text":"Issue #538 Hierarchy1UIToolbar -&gt; _UIToolbarContentView -&gt; _UIButtonBarStackVie UIToolbarContentView12_UIToolbarContentView's width should equal 0_UIToolbarContentView's height should equal 0 Workaround that fixes 1 warning 12toolbar.setItems(items, animated: false)toolbar.updateConstraintsIfNeeded() ### Set frame explicitlyUse a non .zero frame that is close to the view bounds width 1234let toolbar = UIToolbar(frame: CGRect(x: 0, y: 0, width: 375, height: 30))DispatchQueue.main.async { self.toolbar.updateConstraintsIfNeeded()}","link":"/blog/How-to-fix-UIToolbar-Auto-Layout-issues/"},{"title":"How to enable z and zsh-autosuggestions on zsh","text":"Issue #512 https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/z 1234567891011git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestionsvim ~/.zsh.rc/pluginsplugins=( git z zsh-autosuggestions)source ~/.zshrc","link":"/blog/How-to-enable-z-and-zsh-autosuggestions-on-zsh/"},{"title":"How to fix mismatched deployment between app and test target in Xcode","text":"Issue #204 My macOS app target has deployment target 10.12, but when running test, I get 1Compiling for OS X 10.11, but module 'MyApp' has a minimum deployment target of OS X 10.12: /Users/khoa/MyApp/DerivedData/MyApp/Build/Products/Debug/MyApp.framework/Modules/MyApp.swiftmodule/x86_64.swiftmodule The fix is go to test target -&gt; Build Settings -&gt; DeploymentEnsure deployments match","link":"/blog/How-to-fix-mismatched-deployment-between-app-and-test-target-in-Xcode/"},{"title":"How to fix wrong status bar orientation in iOS","text":"Issue #280 Original post https://medium.com/fantageek/how-to-fix-wrong-status-bar-orientation-in-ios-f044f840b9ed When I first started iOS, it was iOS 8 at that time, I had a bug that took my nearly a day to figure out. The issue was that the status bar always orients to device orientation despite I already locked my main ViewController to portrait. This was why I started notes project on GitHub detailing what issues I ‚Äòve been facing.ViewController is locked to portrait but the status bar rotates when device rotates ¬∑ Issue #2 ¬∑‚Ä¶PROBLEM The rootViewController is locked to portrait. When I rotates, the view controller is portrait, but the status‚Ä¶github.com Now it is iOS 12, and to my surprise people still have this issues. Today I will revise this issue in iOS 12 project and use Swift. Supported interface orientationsMost apps only support portrait mode, with 1 or 2 screens being in landscape for image viewing or video player. So we usually declare Portrait, Landscape Left and Landscape Right. Since iOS 7, apps have simple design with focus on content. UIViewController was given bigger role in appearance specification. Supposed that we have a MainViewController as the rootViewController and we want this to be locked in portrait mode. [@UIApplicationMain](http://twitter.com/UIApplicationMain) class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { window = UIWindow(frame: UIScreen.main.bounds) window?.rootViewController = MainViewController() window?.makeKeyAndVisible() return true } }There is a property called UIViewControllerBasedStatusBarAppearance that we can specify in Info.plist to assert that we want UIViewController to dynamically control status bar appearance. A Boolean value indicating whether the status bar appearance is based on the style preferred for the current view controller. Start by declaring in Info.plist &lt;key&gt;UIViewControllerBasedStatusBarAppearance&lt;/key&gt; &lt;true/&gt;And in MainViewController , lock status bar to portrait import UIKit class MainViewController: UIViewController { let label = UILabel() override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = .yellow label.textColor = .red label.text = &quot;MainViewController&quot; label.font = UIFont.preferredFont(forTextStyle: .headline) label.sizeToFit() view.addSubview(label) } override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() label.center = CGPoint(x: view.bounds.size.width/2, y: view.bounds.size.height/2) } override var supportedInterfaceOrientations: UIInterfaceOrientationMask { return .portrait } }The idea is that no matter orientation the device is, the status bar always stays in portrait mode, the same as our MainViewController . But to my surprise, this is not the case !!! As you can see in the screenshot below, the MainViewController is in portrait, but the status bar is not. Stop mixing code and StoryboardIt took me a while to figure out that while I declare UIWindow in code, I also have MainStoryboard that configures UIWindow &lt;key&gt;UIMainStoryboardFile&lt;/key&gt; &lt;string&gt;Main&lt;/string&gt;And this UIWindow from Storyboard has a default root ViewController import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() } }The meaning of UIViewControllerBasedStatusBarAppearanceIn iOS, the status bar is hidden in landscape by default. Setting UIViewControllerBasedStatusBarAppearance to false means that we want this default behaviour Setting UIViewControllerBasedStatusBarAppearance to true means we want to have control over the status bar appearance. So to hide the status bar, we must override prefersStatusBarHidden in the rootViewController, the presented view controller or the full screen view controller As you can see, the problem is that the ViewController from UIWindow in Storyboard clashes with our MainViewController in code, hence a lot of confusion. The solution is simple, remove Main.storyboard and don‚Äôt use that in project &lt;key&gt;UIMainStoryboardFile&lt;/key&gt; &lt;string&gt;Main&lt;/string&gt;Now we get our desired behaviour, status bar and view controllers are always locked to portrait regardless of the device orientation. If you use code like me to setup UI, remember to clean up the generated storyboard and ViewController that comes default when project was generated by Xcode.","link":"/blog/How-to-fix-wrong-status-bar-orientation-in-iOS/"},{"title":"How to enable NSMenuItem in AppKit","text":"Issue #428 Need to set target 1234567let item = NSMenuItem( title: title, action: #selector(onMenuItemClicked(_:)), keyEquivalent: \"\")item.target = self Sometimes, need to check autoenablesItems Indicates whether the menu automatically enables and disables its menu items. This property contains a Boolean value, indicating whether the menu automatically enables and disables its menu items. If set to true, menu items of the menu are automatically enabled and disabled according to rules computed by the NSMenuValidation informal protocol. By default, NSMenu objects autoenable their menu items.","link":"/blog/How-to-enable-NSMenuItem-in-AppKit/"},{"title":"How to fix not found zlib problem in macOS Mojave","text":"Issue #217 https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes The command line tools will search the SDK for system headers by default. However, some software may fail to build correctly against the SDK and require macOS headers to be installed in the base system under /usr/include. If you are the maintainer of such software, we encourage you to update your project to work with the SDK or file a bug report for issues that are preventing you from doing so. As a workaround, an extra package is provided which will install the headers to the base system. In a future release, this package will no longer be provided. You can find this package at: /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg To make sure that you‚Äôre using the intended version of the command line tools, run xcode-select -s or xcode select -s /Library/Developer/CommandLineTools after installing. Run 1open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg","link":"/blog/How-to-fix-not-found-zlib-problem-in-macOS-Mojave/"},{"title":"How to force FetchRequest update in SwiftUI","text":"Issue #623 Listen to context changes notification and change SwiftUI View state 12345678910111213141516171819202122let changes = [NSDeletedObjectsKey: ids]NSManagedObjectContext.mergeChanges( fromRemoteContextSave: changes, into: [context])try context.save()struct ListView: View { @Environment(\\.managedObjectContext) var context private var didSave = NotificationCenter.default.publisher(for: .NSManagedObjectContextDidSave) @State private var refreshing: Bool = false var body: some View { makeContent() .onReceive(didSave) { _ in self.refreshing.toggle() } }} We need to actually use that State variable for it to have effect 12345if refreshing { Text(\"\")} else { Text(\"\")}","link":"/blog/How-to-force-FetchRequest-update-in-SwiftUI/"},{"title":"How to force refresh in ForEach in SwiftUI for macOS","text":"Issue #625 For some strange reasons, content inside ForEach does not update with changes in Core Data NSManagedObject. The workaround is to introduce salt, like UUID just to make state change 12345678910struct NoteRow: View { let note: Note let id: UUID}List { ForEach(notes) { note in NoteRow(note: note, id: UUID()) }}","link":"/blog/How-to-force-refresh-in-ForEach-in-SwiftUI-for-macOS/"},{"title":"How to fix cropped image in UIImageView","text":"Issue #530 Although UIImageView frame is correct, image is still cropped. Watch out for any layer.mask within view","link":"/blog/How-to-fix-cropped-image-in-UIImageView/"},{"title":"How to fix unreadable ASCII characters in Swift","text":"Issue #444 To avoid compiler error Unprintable ASCII character found in source file, from Swift 5, we can use isASCII. Run this from the generator app that generates Swift code. 1let normalized = weirdString.filter({ $0.isASCII }) For more check, see Character https://developer.apple.com/documentation/swift/character/3127011-isletter Watch out for Delete/House symbol ‚åÇ code 127 (0x7f) The above does not seem to work, use find to find  character (copy Sublime Text to see 0x7f character) 1find ./ -type f -exec sed -i '' -e 's///' {} \\;","link":"/blog/How-to-fix-unreadable-ASCII-characters-in-Swift/"},{"title":"How to fix electron issues","text":"Issue #415 Electron require() is not definedhttps://stackoverflow.com/questions/44391448/electron-require-is-not-defined 123456789101112function createWindow () { win = new BrowserWindow({ title: 'MyApp', width: 600, height: 500, resizable: false, icon: __dirname + '/Icon/Icon.icns', webPreferences: { nodeIntegration: true } })} DevTools was disconnected from the page12npm install babel-cli@latest --save-devnpm install react@16.2.0 1win.openDevTools() This leads to Cannot find module 'react/lib/ReactComponentTreeHook'If we‚Äôre using binary, then rebuild, it is the problem that cause devTools not work 1npx electron-builder This goes to Cannot read property injection of undefined at react-tap-event-plugin https://github.com/zilverline/react-tap-event-plugin/issues/121 1npm uninstall react-tap-event-plugin This goes to Unknown event handler property onTouchTap in EnhancedButton in material-ui Update material-uihttps://material-ui.com/https://material-ui.com/guides/migration-v0x/#raised-button 1npm install @material-ui/core From 1234import RadioButtonGroup from '@material-ui/core/RadioButton/RadioButtonGroup'import RadioButton from '@material-ui/core/RadioButton'import RaisedButton from '@material-ui/core/RaisedButton'import CardText from '@material-ui/core/Card/CardText' to 1234import RadioButtonGroup from '@material-ui/core/RadioGroup'import RadioButton from '@material-ui/core/Radio'import RaisedButton from '@material-ui/core/Button'import CardText from '@material-ui/core/DialogContentText' Use FormControlLabel https://material-ui.com/components/radio-buttons/ 1234567&lt;RadioGroup style={styles.group} defaultselected={this.state.choice} onChange={this.handleChoiceChange} children={choiceElements} /&gt; {this.makeGenerateButton()}/&gt;","link":"/blog/How-to-fix-electron-issues/"},{"title":"How to format percent in Swift","text":"Issue #639 Never use String(format: &quot;%.2f %%&quot;, 1.2 because each region can have different separator and placement of percent sign. Use NumberFormatter instead 12345let formatter = NumberFormatter()formatter.numberStyle = .percentformatter.minimumIntegerDigits = 1formatter.maximumIntegerDigits = 3formatter.maximumFractionDigits = 2 12345formatter.locale = Locale(identifier: \"en_US\")formatter.string(from: NSDecimalNumber(decimal: 1.2 / 100)) // 0.12%formatter.locale = Locale(identifier: \"nb_NO\")formatter.string(from: NSDecimalNumber(decimal: 1.2 / 100)) // 0,12 % Note that the space created by NumberFormatter is a non breakable space \\u{00a0}, which can be created by Alt Space. This non breakable space is useful in UILabel when you want the whole word to stick together","link":"/blog/How-to-format-percent-in-Swift/"},{"title":"How to format currency in Swift","text":"Issue #355 123456789101112final class CurrencyFormatter { func format(amount: UInt64, decimalCount: Int) -&gt; String { let formatter = NumberFormatter() formatter.minimumFractionDigits = 0 formatter.maximumFractionDigits = decimalCount formatter.numberStyle = .decimal let value = Double(amount) / pow(Double(10), Double(decimalCount)) let fallback = String(format: \"%.0f\", value) return formatter.string(from: NSNumber(value: value)) ?? fallback }} 12345678910111213class CurrencyFormatterTests: XCTestCase { func testFormat() { let formatter = CurrencyFormatter() // 120 USD XCTAssertEqual(formatter.format(amount: 120, decimalCount: 0), \"120\") // 12000 cents XCTAssertEqual(formatter.format(amount: 12000, decimalCount: 2), \"120\") // 12520 cents XCTAssertEqual(formatter.format(amount: 12520, decimalCount: 2), \"125.2\") }}","link":"/blog/How-to-format-currency-in-Swift/"},{"title":"How to generate XCTest test methods","text":"Issue #576 CodeSee Spek Override testInvocations to specify test methodshttps://developer.apple.com/documentation/xctest/xctestcase/1496271-testinvocations Returns an array of invocations representing each test method in the test case. Because testInvocations is unavailable in Swift, we need to use ObjC 123456789101112131415161718192021222324252627282930#import \"include/SpekHelperTestCase.h\"@implementation SpekHelperTestCase- (instancetype)init { self = [super initWithInvocation: nil]; return self;}+ (NSArray&lt;NSInvocation *&gt; *)testInvocations { NSArray&lt;NSString *&gt; *selectorStrings = [self spekGenerateTestMethodNames]; NSMutableArray&lt;NSInvocation *&gt; *invocations = [NSMutableArray arrayWithCapacity:selectorStrings.count]; for (NSString *selectorString in selectorStrings) { SEL selector = NSSelectorFromString(selectorString); NSMethodSignature *signature = [self instanceMethodSignatureForSelector:selector]; NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature]; invocation.selector = selector; [invocations addObject:invocation]; } return invocations;}+ (NSArray&lt;NSString *&gt; *)spekGenerateTestMethodNames { return @[];}@end Generate test methodsCalculate based on Describe and It, and use Objc runtime class_addMethod to add instance methods 12345678910111213141516171819202122232425262728open class SpekTestCase: SpekHelperTestCase { open class func makeDescribe() -&gt; Describe { return Describe(\"empty\") } #if canImport(SpekHelper) override public class func spekGenerateTestMethodNames() -&gt; [String] { let describe = Self.makeDescribe() var names: [String] = [] generate(describe: describe, names: &amp;names) return names } private static func addInstanceMethod(name: String, closure: @escaping () -&gt; Void) -&gt; String { let block: @convention(block) (SpekTestCase) -&gt; Void = { spekTestCase in let _ = spekTestCase closure() } let implementation = imp_implementationWithBlock(block as Any) let selector = NSSelectorFromString(name) class_addMethod(self, selector, implementation, \"v@:\") return name }} Read more https://github.com/Quick/Quick","link":"/blog/How-to-generate-XCTest-test-methods/"},{"title":"How to format distance in iOS","text":"Issue #307 123456import MapKitlet formatter = MKDistanceFormatter()formatter.unitStyle = .abbreviatedformatter.units = .metricdistanceLabel.text = formatter.string(fromDistance: distance) // 700m, 1.7km","link":"/blog/How-to-format-distance-in-iOS/"},{"title":"How to format hour minute from time interval in Swift","text":"Issue #340 Use DateComponentsFormatterhttps://nshipster.com/formatter/#datecomponentsformatter Results in no padding 0 1234567891011func format(second: TimeInterval) -&gt; String? { let formatter = DateComponentsFormatter() formatter.unitsStyle = .positional formatter.allowedUnits = [.hour, .minute] formatter.zeroFormattingBehavior = .pad return formatter.string(from: second)}XCTAssertEqual(format(second: 5400 ), \"1:30\")XCTAssertEqual(format(second: 7200), \"2:00\")XCTAssertEqual(format(second: 39600 ), \"11:00\") Use mod123456789101112131415func format(minute: Int) -&gt; String { let h = minute / 60 let m = minute % 60 return \"\\(h.padZero()):\\(m.padZero())\"}private extension Int { func padZero() -&gt; String { return String(format: \"%02d\", self) }}XCTAssertEqual(format(minute: 90 ), \"01:30\")XCTAssertEqual(format(minute: 120), \"02:00\")XCTAssertEqual(format(minute: 660 ), \"11:00\")","link":"/blog/How-to-format-hour-minute-from-time-interval-in-Swift/"},{"title":"How to generate QR code in AppKit","text":"Issue #140 I need to generate QR code in https://github.com/onmyway133/AddressGenerator. Fortunately with CoreImage filter, it is very easy. Code is in Swift 4 123456789101112131415161718192021222324252627282930313233343536import AppKitfinal class QRCodeGenerator { func generate(string: String, size: CGSize) -&gt; NSImage? { guard let data = string.data(using: .utf8) else { return nil } // Filter guard let filter = CIFilter(name: \"CIQRCodeGenerator\") else { return nil } filter.setValue(data, forKey: \"inputMessage\") filter.setValue(\"Q\", forKey: \"inputCorrectionLevel\") // CIImage guard let ciImage = filter.outputImage else { return nil } // NSImage let rep = NSCIImageRep(ciImage: ciImage) let image = NSImage(size: rep.size) image.addRepresentation(rep) // Scale let finalImage = NSImage(size: size) finalImage.lockFocus() NSGraphicsContext.current?.imageInterpolation = .none image.draw(in: NSRect(origin: .zero, size: size)) finalImage.unlockFocus() return finalImage }}","link":"/blog/How-to-generate-QR-code-in-AppKit/"},{"title":"How to fix unable to infer complex closure return type in SwiftUI","text":"Issue #505 Make sure all String are passed into Text, not Optional&lt;String&gt; 12345VStack { Text(data.title) Text(data.description!) Text(data.text!)}","link":"/blog/How-to-fix-unable-to-infer-complex-closure-return-type-in-SwiftUI/"},{"title":"How to flick using UIKit Dynamic in iOS","text":"Issue #475 For a snack bar or image viewing, it‚Äôs handy to be able to just flick or toss to dismiss We can use UIKit Dynamic, which was introduced in iOS 7, to make this happen. Use UIPanGestureRecognizer to drag view around, UISnapBehavior to make view snap back to center if velocity is low, and UIPushBehavior to throw view in the direction of the gesture. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import UIKitfinal class FlickHandler { private let viewToMove: UIView private let referenceView: UIView private var panGR: UIPanGestureRecognizer! private let animator: UIDynamicAnimator private var snapBehavior: UISnapBehavior? private var pushBehavior: UIPushBehavior? private let debouncer = Debouncer(delay: 0.5) var onFlick: () -&gt; Void = {} init(viewToMove: UIView, referenceView: UIView) { self.viewToMove = viewToMove self.referenceView = referenceView self.animator = UIDynamicAnimator(referenceView: referenceView) self.panGR = UIPanGestureRecognizer(target: self, action: #selector(handleGesture(_:))) viewToMove.addGestureRecognizer(panGR) } @objc private func handleGesture(_ gr: UIPanGestureRecognizer) { switch gr.state { case .began: handleBegin() case .changed: handleChange(gr) default: handleEnd(gr) } } private func handleBegin() { animator.removeAllBehaviors() } private func handleChange(_ gr: UIPanGestureRecognizer) { let translation = panGR.translation(in: referenceView) viewToMove.transform = CGAffineTransform( translationX: translation.x, y: translation.y ) } private func handleEnd(_ gr: UIPanGestureRecognizer) { let velocity = gr.velocity(in: gr.view) let magnitude = sqrt((velocity.x * velocity.x) + (velocity.y * velocity.y)) if magnitude &gt; 1000 { animator.removeAllBehaviors() let pushBehavior = UIPushBehavior(items: [viewToMove], mode: .instantaneous) pushBehavior.pushDirection = CGVector(dx: velocity.x, dy: velocity.y) pushBehavior.magnitude = magnitude / 35 self.pushBehavior = pushBehavior animator.addBehavior(pushBehavior) onFlick() debouncer.run { [weak self] in self?.animator.removeAllBehaviors() } } else { let snapBehavior = UISnapBehavior( item: viewToMove, snapTo: viewToMove.center ) self.snapBehavior = snapBehavior animator.addBehavior(snapBehavior) } }}","link":"/blog/How-to-flick-using-UIKit-Dynamic-in-iOS/"},{"title":"How to generate grpc protobuf files","text":"Issue #197 protochttps://grpc.io/docs/quickstart/go.html Install the protoc compiler that is used to generate gRPC service code. The simplest way to do this is to download pre-compiled binaries for your platform(protoc--.zip) from here: https://github.com/google/protobuf/releases Unzip this file.Update the environment variable PATH to include the path to the protoc binary file. Go protoc pluginhttps://github.com/golang/protobuf 123go get -u github.com/golang/protobuf/protoc-gen-goexport PATH=$PATH:$GOPATH/binsource ~/.zshrc Swift protoc pluginhttps://github.com/grpc/grpc-swift The recommended way to use Swift gRPC is to first define an API using theProtocol Bufferlanguage and then use theProtocol Buffer Compilerand the Swift Protobufand Swift gRPC plugins togenerate the necessary support code. 1234git clone https://github.com/grpc/grpc-swift.gitcd grpc-swiftmakesudo cp protoc-gen-swift protoc-gen-swiftgrpc /usr/local/bin Generate1protoc --swift_out=MyApp/Api --swiftgrpc_out=Client=true,Server=false:MyApp/Api --go_out=plugins=grpc:server/api api.proto In case we need to cd 123cd MyApp/Library/Models/Protoprotoc --swift_out=../Generated --swiftgrpc_out=Client=true,Server=false:../Generated api.proto EmptyIf remote import is needed, then the workaround is to download the that proto locally, for example empty.proto https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/empty.proto Inside SwiftProtobuf pod, there is generated empty.pb.swift 123456789public struct Google_Protobuf_Empty { // SwiftProtobuf.Message conformance is added in an extension below. See the // `Message` and `Message+*Additions` files in the SwiftProtobuf library for // methods supported on all messages. public var unknownFields = SwiftProtobuf.UnknownStorage() public init() {}} To consume, we can 123import SwiftProtobuflet empty = Google_Protobuf_Empty() oneof mode123456message Person { oneof mode { Human human = 1; Superman superman = 2; }} Cannot convert value of type ‚ÄòServer_Person.OneOf_Mode‚Äô to expected argument type ‚ÄòServer_Human‚Äô Need to assign the mode 12var person = Person()person.mode = Person.OneOf_Mode.Human()","link":"/blog/How-to-generate-grpc-protobuf-files/"},{"title":"How to flat map publisher of publishers in Combine","text":"Issue #451 For some services, we need to deal with separated APIs for getting ids and getting detail based on id. To chain requests, we can use flatMap and Sequence, then collect to wait and get all elements in a single publish FlatMap Transforms all elements from an upstream publisher into a new or existing publisher. 1struct FlatMap&lt;NewPublisher, Upstream&gt; where NewPublisher : Publisher, Upstream : Publisher, NewPublisher.Failure == Upstream.Failure Publishers.Sequence A publisher that publishes a given sequence of elements. 1struct Sequence&lt;Elements, Failure&gt; where Elements : Sequence, Failure : Error 123456789101112131415161718192021222324252627282930313233343536func fetchItems(completion: @escaping ([ItemProtocol]) -&gt; Void) { requestCancellable = URLSession.shared .dataTaskPublisher(for: topStoriesUrl()) .map({ $0.data }) .decode(type: [Int].self, decoder: JSONDecoder()) .flatMap({ (ids: [Int]) -&gt; AnyPublisher&lt;[HackerNews.Item], Error&gt; in let publishers = ids.prefix(10).map({ id in return URLSession.shared .dataTaskPublisher(for: self.storyUrl(id: id)) .map({ $0.data }) .decode(type: HackerNews.Item.self, decoder: JSONDecoder()) .eraseToAnyPublisher() }) return Publishers.Sequence&lt;[AnyPublisher&lt;HackerNews.Item, Error&gt;], Error&gt;(sequence: publishers) // Publishers.Sequence&lt;[AnyPublisher&lt;HackerNews.Item, Error&gt;], Error&gt; .flatMap({ $0 }) // Publishers.FlatMap&lt;AnyPublisher&lt;HackerNews.Item, Error&gt;, Publishers.Sequence&lt;[AnyPublisher&lt;HackerNews.Item, Error&gt;], Error&gt;&gt; .collect() // Publishers.Collect&lt;Publishers.FlatMap&lt;AnyPublisher&lt;HackerNews.Item, Error&gt;, Publishers.Sequence&lt;[AnyPublisher&lt;HackerNews.Item, Error&gt;], Error&gt;&gt;&gt; .eraseToAnyPublisher() // AnyPublisher&lt;[HackerNews.Item], Error&gt; }) .receive(on: RunLoop.main) .eraseToAnyPublisher() .sink(receiveCompletion: { completionStatus in switch completionStatus { case .finished: break case .failure(let error): print(error) } }, receiveValue: { items in completion(items) })}","link":"/blog/How-to-flat-map-publisher-of-publishers-in-Combine/"},{"title":"How to get Hacker News top stories using parallel coroutine and Retrofit","text":"Issue #379 1234567interface Api { @GET(\"topstories.json?print=pretty\") suspend fun getTopStories(): List&lt;Int&gt; @GET(\"item/{id}.json?print=pretty\") suspend fun getStory(@Path(\"id\") id: Int): Item} 123456789class Repo { fun api(): Api { return Retrofit.Builder() .baseUrl(\"https://hacker-news.firebaseio.com/v0/\") .addConverterFactory(MoshiConverterFactory.create()) .build() .create(Api::class.java) }} 123456789101112131415161718class ViewModel(val repo: Repo): ViewModel() { val items = MutableLiveData&lt;ArrayList&lt;Item&gt;&gt;() suspend fun load() { try { val ids = repo.api() .getTopStories() .take(20) val items = ids.map { repo.api().getStory(it) } this.items.value = items.toCollection(ArrayList()) } catch (e: Exception) { this.items.value = arrayListOf() } }} Running parallelThe above run in serial. To run in parallel, we can use async 12345678910111213141516171819202122232425import kotlinx.coroutines.asyncimport kotlinx.coroutines.coroutineScopeclass ViewModel(val repo: Repo): ViewModel() { val items = MutableLiveData&lt;ArrayList&lt;Item&gt;&gt;() suspend fun load() { try { val ids = repo.api() .getTopStories() .take(20) coroutineScope { val items = ids .map { async { repo.api().getStory(it) } } .awaitAll() this@ViewModel.items.value = items.toCollection(ArrayList()) } } catch (e: Exception) { this.items.value = arrayListOf() } }} Parallel decompositionhttps://medium.com/@elizarov/structured-concurrency-722d765aa952 With structured concurrency async coroutine builder became an extension on CoroutineScope just like launch did. You cannot simply write async { ‚Ä¶ } anymore, you have to provide a scope. A proper example of parallel decomposition becomes: coroutineScopehttps://proandroiddev.com/part-2-coroutine-cancellation-and-structured-concurrency-2dbc6583c07d coroutineScope function can be used to create a custom scope that suspends and only completes when all coroutines launched within that scope complete. If any of the children coroutines within the coroutineScope throws an exception, all other running sibling coroutines gets cancelled and this exception is propagated up the hierarchy. If the parent coroutine at the top of the hierarchy does not handle this error, it will also be cancelled. awaitAllhttps://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await-all.html Awaits for completion of given deferred values without blocking a thread and resumes normally with the list of values when all deferred computations are complete or resumes with the first thrown exception if any of computations complete exceptionally including cancellation. This function is not equivalent to deferreds.map { it.await() } which fails only when it sequentially gets to wait for the failing deferred, while this awaitAll fails immediately as soon as any of the deferreds fail. This suspending function is cancellable. If the Job of the current coroutine is cancelled or completed while this suspending function is waiting, this function immediately resumes with CancellationException. Read more https://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/ https://stackoverflow.com/questions/53535977/coroutines-runblocking-vs-coroutinescope awaitAll https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await-all.html","link":"/blog/How-to-get-Hacker-News-top-stories-using-parallel-coroutine-and-Retrofit/"},{"title":"How to get Google account photo in Flutter","text":"Issue #187 If you use Flutter, then you can access it via people.googleapis.com endpoint, code uses google_sign_in library 12345678910111213import 'package:google_sign_in/google_sign_in.dart';Future&lt;String&gt; getPhotoUrl(GoogleSignInAccount account, String userId) async { // final authentication = await account.authentication; final url = 'https://people.googleapis.com/v1/people/${userId}?personFields=photos'; final response = await http.get( url, headers: await account.authHeaders ); final data = json.decode(response.body); return data['photos'].first['url'];} You will get something like 123456{ resourceName: people/998812322529259873423, etag: %EgQBAzcabcQBAgUH, photos: [{metadata: {primary: true, source: {type: PROFILE, id: 107721622529987673423}}, url: https://lh3.googleusercontent.com/a-/abcdefmB2p1VWxLsNT9WSV0yqwuwo6o2Ba21sh_ra7CnrZ=s100}]} where url is an accessible image url.","link":"/blog/How-to-get-Google-account-photo-in-Flutter/"},{"title":"How to generate changelog for GitHub releases with rxjs and node","text":"Issue #398 How to Use https://github.com/onmyway133/github-changelogs-maker Generate personal access token https://github.com/settings/tokens TechnicalDependencies 1234const Rx = require('rxjs/Rx')const Fetch = require('node-fetch')const Minimist = require('minimist')const Fs = require('fs') Use GraphQL 123456789101112131415161718makeOptions(query, token) { return { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `bearer ${token}` }, body: JSON.stringify({ query: ` query { repository(owner: \"${this.owner}\", name: \"${this.repo}\") { ${query} } } ` }) }} Use orderBy 12345678910111213141516171819202122232425262728fetchPRsAndIssues(dates) { const query = ` pullRequests(last: 100, orderBy: {field: UPDATED_AT, direction: ASC}) { edges { node { title merged mergedAt url author { login url } } } } issues(last: 100, orderBy: {field: UPDATED_AT, direction: ASC}) { edges { node { title closed updatedAt url } } } }}","link":"/blog/How-to-generate-changelog-for-GitHub-releases-with-rxjs-and-node/"},{"title":"How to get all GitHub issues using GraphQL","text":"Issue #393 https://developer.github.com/v4/explorer/ 123456789101112131415161718192021query { repository(owner: &quot;onmyway133&quot;, name: &quot;blog&quot;) { issues(orderBy: {field: UPDATED_AT, direction: ASC}, last: 100) { edges { cursor node { title createdAt updatedAt labels(first: 10) { edges { node { name } } } } } } }} In node.js 1234567891011121314151617181920212223242526272829303132333435const GraphQL = require('graphql-request')const GraphQLClient = GraphQL.GraphQLClient const client = new GraphQLClient('https://api.github.com/graphql', { headers: { Authorization: 'Bearer 123456730712334152e6e1232c53987654312', },}) const query = `{ repository(owner: \"onmyway133\", name: \"blog\") { issues(first: 100) { edges { node { title createdAt updatedAt labels(first: 10) { edges { node { name } } } } } } }}` client.request(query).then(data =&gt; { const issues = data.repository.issues.edges.map((edge) =&gt; { return edge.node }) console.log(issues)})","link":"/blog/How-to-get-all-GitHub-issues-using-GraphQL/"},{"title":"How to get cell at center during scroll in UICollectionView","text":"Issue #311 See Omnia https://github.com/onmyway133/Omnia/blob/master/Sources/iOS/UICollectionView.swift#L30 123456789101112131415extension HorizontalUsersViewController: UIScrollViewDelegate { func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) { let point = view.convert(collectionView.center, to: collectionView) guard let indexPath = collectionView.indexPathForItem(at: point), indexPath.item &lt; users.count else { return } let user = users[indexPath.item] delegate?.didScrollTo(user) }}","link":"/blog/How-to-get-cell-at-center-during-scroll-in-UICollectionView/"},{"title":"How to get path to resource in running macOS app","text":"Issue #177 This is useful to refer to another executable in a running executable in Process 1Bundle.main.path(forResource: \"ffmpeg\", ofType: \"\")!","link":"/blog/How-to-get-path-to-resource-in-running-macOS-app/"},{"title":"How to get properties of JSValue in JavascriptCore","text":"Issue #179 12let rough = context.objectForKeyedSubscript(\"myObject\")myObject.toDictionary()","link":"/blog/How-to-get-properties-of-JSValue-in-JavascriptCore/"},{"title":"How to get updated safeAreaInsets in iOS","text":"Issue #570 Use viewSafeArea123456@available(iOS 11.0, *)override func viewSafeAreaInsetsDidChange() { super.viewSafeAreaInsetsDidChange() self.collectionView.reloadData()} Use https://developer.apple.com/documentation/uikit/uiview/2891102-safearealayoutguide 1view.safeAreaLayoutGuide.layoutFrame https://developer.apple.com/documentation/uikit/uiview/2891103-safeareainsets For the view controller‚Äôs root view, the insets account for the status bar, other visible bars, and any additional insets that you specified using the additionalSafeAreaInsets property of your view controller. For other views in the view hierarchy, the insets reflect only the portion of the view that is covered. For example, if a view is entirely within the safe area of its superview, the edge insets in this property are 0. Use UICollectionView.contentInsetAdjustmentBehavior Nested viewFor UICollectionView inside Cell inside UICollectionView, its insets is 0, but its parent parent is correct, which is the original cell UICollectionView -&gt; Cell -&gt; ContentView -&gt; UICollectionView 1collectionView.superview?.superview?.safeAreaInsets viewWillAppear: safeAreaInsets is not set to collectionViewviewDidAppear: safeAreaInsets is set to collectionView and cells, but not to nested collectionView In viewSafeAreaInsetsDidChange, invalidate outer and nested collectionViewLayout Use extendedLayoutIncludesOpaqueBarshttps://developer.apple.com/documentation/uikit/uiviewcontroller/1621404-extendedlayoutincludesopaquebars A Boolean value indicating whether or not the extended layout includes opaque bars. Seems to affect left and right insets https://stackoverflow.com/questions/18798792/explaining-difference-between-automaticallyadjustsscrollviewinsets-extendedlayo https://medium.com/@wailord/extended-layout-in-ios-pre-ios-11-5eff2debf28 Seemingly related to UIPresentationControllerBut it‚Äôs not, it is because of when safeAreaInsets is available, and how it is passed to nested view When invalidating collection view layout with custom UIPresentationController, alongsideTransition is called twice, the first time with old safeAreaInsets, and the second time with latest safeAreaInsets And the layout invalidation uses the old insets. 123456override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) { super.viewWillTransition(to: size, with: coordinator) coordinator.animate(alongsideTransition: { _ in self.collectionViewLayout.invalidateLayout() })} Dispatch 123456789// UIViewController subclassoverride func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) { super.viewWillTransition(to: size, with: coordinator) coordinator.animate(alongsideTransition: { _ in DispatchQueue.main.async { self.collectionViewLayout.invalidateLayout() } })} Call layoutIfNeeded 12345678// UIPresentationController subclassoverride var frameOfPresentedViewInContainerView: CGRect { guard let containerView = containerView else { return .zero } presentedView?.setNeedsLayout() presentedView?.layoutIfNeeded() return ... CheckCheck that UICollectionView or the view you‚Äôre working on is in view hierarchy https://stackoverflow.com/questions/46271186/safe-area-not-work-properly-on-iphone-x-when-subviews-are-not-in-the-view-area Check that you‚Äôre using code in viewDidLayoutSubviews when safeAreaInsets is known Read more https://www.appcoda.com/presentation-controllers-tutorial/ https://fluffy.es/4-ios13-breaking-changes/ https://developer.apple.com/documentation/uikit/uiview/positioning_content_relative_to_the_safe_area","link":"/blog/How-to-get-updated-safeAreaInsets-in-iOS/"},{"title":"How to get Binding via dollar prefix in SwiftUI","text":"Issue #488 The dollar is not a prefix, it seems to be a generated code for property wrapper, and each kind of property wrapper can determine which value it return via this dollar sign State and ObservedObject are popular property wrappers in SwiftUI StateRead State A persistent value of a given type, through which a view reads and monitors the value. If we have a simple State, we can access its 3 forms 1@State private var image: UIImage and here is what 123image // UIImage_image // State&lt;UIImage&gt;$image // Binding&lt;UIImage&gt; Also, with State, we can access Binding via projectedValue 1_image.projectedValue // Binding&lt;UIImage&gt; ObservableObjectRead ObservedObject For a simple ObservableObject, we can see its 3 forms 123456789class ViewModel: ObservableObject { var objectWillChange = ObservableObjectPublisher() var image: UIImage? { didSet { objectWillChange.send() } }} 1@ObservedObject var viewModel: ViewModel = ViewModel() 123viewModel // ViewModel_viewModel // ObservedObject&lt;ViewModel&gt;$viewModel // ObservedObject&lt;ViewModel&gt;.Wrapper If we view the source code of ObservableObject, we can see its Wrapper which uses dynamicMemberLookup to provide Binding 1234567891011121314151617181920212223@propertyWrapper public struct ObservedObject&lt;ObjectType&gt; : DynamicProperty where ObjectType : ObservableObject { /// A wrapper of the underlying `ObservableObject` that can create /// `Binding`s to its properties using dynamic member lookup. @dynamicMemberLookup public struct Wrapper { /// Creates a `Binding` to a value semantic property of a /// reference type. /// /// If `Value` is not value semantic, the updating behavior for /// any views that make use of the resulting `Binding` is /// unspecified. public subscript&lt;Subject&gt;(dynamicMember keyPath: ReferenceWritableKeyPath&lt;ObjectType, Subject&gt;) -&gt; Binding&lt;Subject&gt; { get } } public init(initialValue: ObjectType) public init(wrappedValue: ObjectType) public var wrappedValue: ObjectType public var projectedValue: ObservedObject&lt;ObjectType&gt;.Wrapper { get }} Derived StateIf we have a struct with @State in a SwiftUI view, we can access its property as Binding. This derived state mechanism is done via Dynamic keypath member lookup feature of Swift 5.1 1234567struct ViewModel { var image: UIImage?}struct MainView: View { @State private var viewModel: ViewModel = ViewModel()} Take a look at the interface of Binding 123456/// A value and a means to mutate it.@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)@propertyWrapper @dynamicMemberLookup public struct Binding&lt;Value&gt; { /// Creates a new `Binding` focused on `Subject` using a key path. public subscript&lt;Subject&gt;(dynamicMember keyPath: WritableKeyPath&lt;Value, Subject&gt;) -&gt; Binding&lt;Subject&gt; { get }} So if use $viewModel.image we can access its property as Binding 123viewModel.image // UIImage?$viewModel.image // Binding&lt;UIImage?&gt;$viewModel.$image // Value of type 'ViewModel' has no member '$image' ConclusionSo now we know how to get Binding from State and ObservableObject, and the mysterious dollar sign. These are both convenient but confusing at first, but if we use it more, it will make more sense and hopefully we can learn to do the same for our own property wrappers","link":"/blog/How-to-get-Binding-via-dollar-prefix-in-SwiftUI/"},{"title":"How to get trending repos on GitHub using Retrofit","text":"Issue #367 1https://api.github.com/search/repositories?sort=stars&amp;order=desc&amp;q=language:javascript,java,swift,kotlin&amp;q=created:&gt;2019-08-21 12345678interface Api { @GET(\"https://api.github.com/search/repositories\") suspend fun getTrendingRepos( @Query(\"sort\") sort: String, @Query(\"order\") order: String, @Query(\"q\") qs: List&lt;String&gt; ): Response} 12345678910class Repo { fun api(): Api { return Retrofit.Builder() .baseUrl(\"https://api.github.com/\") .addConverterFactory(MoshiConverterFactory.create()) .build() .create(Api::class.java) }} 123456789101112131415161718192021class ViewModel(val repo: Repo, val dateProvider: DateProvider): ViewModel() { val items = MutableLiveData&lt;ArrayList&lt;Item&gt;&gt;() suspend fun load() { try { val order = \"desc\" val sort = \"star\" val formatter = SimpleDateFormat(\"YYYY-MM-dd\") val qs = listOf( \"language:javascript,java,swift,kotlin\", \"q=created:&gt;${formatter.format(dateProvider.yesterday)}\" ) val response = repo.api().getTrendingRepos(sort=sort, order=order, qs=qs) this.items.value = response.items.toCollection(ArrayList()) } catch (e: Exception) { this.items.value = arrayListOf() } }}","link":"/blog/How-to-get-trending-repos-on-GitHub-using-Retrofit/"},{"title":"How to generate xml in Swift","text":"Issue #556 Instead of learning XMLParser, we can make a lightweight version 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192import Foundationpublic protocol XmlItem { func toLines() -&gt; [String]}public struct XmlString: XmlItem { public let key: String public let value: String public init(key: String, value: String) { self.key = key self.value = value } public func toLines() -&gt; [String] { return [ \"&lt;key&gt;\\(key)&lt;/key&gt;\", \"&lt;string&gt;\\(value)&lt;/string&gt;\" ] as [String] }}public struct XmlBool: XmlItem { public let key: String public let value: Bool public init(key: String, value: Bool) { self.key = key self.value = value } public func toLines() -&gt; [String] { let string = value ? \"&lt;true/&gt;\" : \"&lt;false/&gt;\" return [ \"&lt;key&gt;\\(key)&lt;/key&gt;\", \"\\(string)\" ] as [String] }}public struct XmlDict: XmlItem { public let key: String public let items: [XmlItem] public init(key: String, items: [XmlItem]) { self.key = key self.items = items } public func toLines() -&gt; [String] { var lines = [String]() lines.append(\"&lt;dict&gt;\") lines.append(contentsOf: items.flatMap({ $0.toLines() })) lines.append(\"&lt;/dict&gt;\") return lines }}public class XmlGenerator { public init() {} public func generateXml(_ items: [XmlItem]) -&gt; String { let content = items.flatMap({ $0.toLines() }).joined(separator: \"\\n\") let xml = \"\"\" &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt; &lt;plist version=\"1.0\"&gt; &lt;dict&gt; \\(content) &lt;/dict&gt; &lt;/plist&gt; \"\"\" return xml } public func xmlItems(dictionary: [String: Any]) -&gt; [XmlItem] { return dictionary.flatMap({ (key, value) -&gt; [XmlItem] in switch value { case let string as String: return [XmlString(key: key, value: string)] case let bool as Bool: return [XmlBool(key: key, value: bool)] case let nestedDictionary as [String: Any]: return xmlItems(dictionary: nestedDictionary) default: return [] } }) }}","link":"/blog/How-to-generate-xml-in-Swift/"},{"title":"How to get videos from vimeo in node","text":"Issue #418 CodePath for user users/nsspain/videosPath for showcase https://developer.vimeo.com/api/reference/albums#get_albumPath for Channels, Groups and Portfolios 12345678910111213141516171819202122232425262728const Vimeo = require('vimeo').Vimeoconst vimeoClient = new Vimeo(vimeoClientId, vimeoClientSecret, vimeoAccessToken)async getVideos(path) { const options = { path: `channels/staffpicks/videos`, query: { page: 1, per_page: 100, fields: 'uri,name,description,created_time,pictures' } } return new Promise((resolve, reject) =&gt; { try { vimeoClient.request(options, (error, body, status_code, headers) =&gt; { if (isValid(body)) { resolve(body) } else { throw error } }) } catch (e) { reject(e) console.log(e) } })} Response look like 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293{ \"total\":13754, \"page\":1, \"per_page\":100, \"paging\":{ \"next\":\"/channels/staffpicks/videos?page=2&amp;per_page=100&amp;fields=uri%2Cname%2Cdescription%2Ccreated_time%2Cpictures\", \"previous\":null, \"first\":\"/channels/staffpicks/videos?page=1&amp;per_page=100&amp;fields=uri%2Cname%2Cdescription%2Ccreated_time%2Cpictures\", \"last\":\"/channels/staffpicks/videos?page=138&amp;per_page=100&amp;fields=uri%2Cname%2Cdescription%2Ccreated_time%2Cpictures\" }, \"data\":[ { \"uri\":\"/videos/359281775\", \"name\":\"Maestro\", \"description\":\"A Bloom Pictures short film directed by Illogic.\\n\\n\\\"Maestro\\\" is this week's Staff Pick Premiere. Read more about it on the Vimeo Blog: https://vimeo.com/blog/post/staff-pick-premiere-maestro-from-illogic\\n\\nMaking of :\\n https://vimeo.com/bloompictures/maestromakingof\\n\\nYou want to collaborate?\\nSend us a message at : hello@bloompictures.tv\\n\\nFor festivals and screenings, please contact : \\nfestival@miyu.fr\\n\\nPress/Media requests : \\nbenoit@animationshowcase.com\\n\\nhttps://www.bloompictures.tv\\n\\n¬©Bloom Pictures 2019\", \"created_time\":\"2019-09-11T12:31:33+00:00\", \"pictures\":{ \"uri\":\"/videos/359281775/pictures/813130850\", \"active\":true, \"type\":\"custom\", \"sizes\":[ { \"width\":100, \"height\":75, \"link\":\"https://i.vimeocdn.com/video/813130850_100x75.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_100x75.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":200, \"height\":150, \"link\":\"https://i.vimeocdn.com/video/813130850_200x150.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_200x150.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":295, \"height\":166, \"link\":\"https://i.vimeocdn.com/video/813130850_295x166.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_295x166.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":640, \"height\":360, \"link\":\"https://i.vimeocdn.com/video/813130850_640x360.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_640x360.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":1280, \"height\":720, \"link\":\"https://i.vimeocdn.com/video/813130850_1280x720.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_1280x720.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":1920, \"height\":1080, \"link\":\"https://i.vimeocdn.com/video/813130850_1920x1080.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_1920x1080.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":640, \"height\":346, \"link\":\"https://i.vimeocdn.com/video/813130850_640x346.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_640x346.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":960, \"height\":519, \"link\":\"https://i.vimeocdn.com/video/813130850_960x519.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_960x519.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":1280, \"height\":692, \"link\":\"https://i.vimeocdn.com/video/813130850_1280x692.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_1280x692.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":1920, \"height\":1038, \"link\":\"https://i.vimeocdn.com/video/813130850_1920x1038.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_1920x1038.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" }, { \"width\":1280, \"height\":692, \"link\":\"https://i.vimeocdn.com/video/813130850_1280x692.jpg?r=pad\", \"link_with_play_button\":\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F813130850_1280x692.jpg&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\" } ], \"resource_key\":\"b42ac645a67b3277cb2fe66d3894016842ceef72\" } } ]} Read more https://www.npmjs.com/package/vimeo#make-requests https://developer.vimeo.com/api/reference/users#get_picture","link":"/blog/How-to-get-videos-from-vimeo-in-node/"},{"title":"How to get videos from youtube in node","text":"Issue #417 12345678910111213141516171819202122232425class Youtube { async getVideos(playlistId, pageToken) { const options = { key: clientKey, part: 'id,contentDetails,snippet', playlistId: playlistId, maxResult: 100, pageToken } return new Promise((resolve, reject) =&gt; { try { youtube.playlistItems.list(options, (error, result) =&gt; { if (isValid(result)) { resolve(result) } else { throw error } }) } catch (e) { reject(e) } }) }} Response look like 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556{ \"kind\": \"youtube#playlistItemListResponse\", \"etag\": \"\\\"p4VTdlkQv3HQeTEaXgvLePAydmU/ZNTrH71d3sV6gR6BWPeamXI1HhE\\\"\", \"nextPageToken\": \"CAUQAA\", \"pageInfo\": { \"totalResults\": 32, \"resultsPerPage\": 5 }, \"items\": [ { \"kind\": \"youtube#playlistItem\", \"etag\": \"\\\"p4VTdlkQv3HQeTEaXgvLePAydmU/pt-bElhU3f7Q6c1Wc0URk9GJN-w\\\"\", \"id\": \"UExDbDVOTTRxRDN1X0w4ZEpyV1liTEI4RmNVYW9BSERGdC4yODlGNEE0NkRGMEEzMEQy\", \"snippet\": { \"publishedAt\": \"2019-04-11T06:09:26.000Z\", \"channelId\": \"UCuPue-GLK4nVX8klxQITIOw\", \"title\": \"abc\", \"description\": \"abc\", \"thumbnails\": { \"default\": { \"url\": \"https://i.ytimg.com/vi/ZefmzgLabCA/default.jpg\", \"width\": 120, \"height\": 90 }, \"medium\": { \"url\": \"https://i.ytimg.com/vi/ZefmzgLabCA/mqdefault.jpg\", \"width\": 320, \"height\": 180 }, \"high\": { \"url\": \"https://i.ytimg.com/vi/ZefmzgLabCA/hqdefault.jpg\", \"width\": 480, \"height\": 360 }, \"standard\": { \"url\": \"https://i.ytimg.com/vi/ZefmzgLabCA/sddefault.jpg\", \"width\": 640, \"height\": 480 }, \"maxres\": { \"url\": \"https://i.ytimg.com/vi/ZefmzgLabCA/maxresdefault.jpg\", \"width\": 1280, \"height\": 720 } }, \"channelTitle\": \"try! Swift Conference\", \"playlistId\": \"PLCl5NM4qD3u_L8dJrWYbLB8FcUaoAHDFt\", \"position\": 0, \"resourceId\": { \"kind\": \"youtube#video\", \"videoId\": \"ZefmzgLabCA\" } } } ]} To handle pagination 123456789async getVideosLoop(playlistId, nextPageToken, items, count) { const response = await this.getVideos(playlistId, nextPageToken) const newItems = items.concat(response.data.items) if (isValid(response.data.nextPageToken) &amp;&amp; count &lt; 10) { return this.getVideosLoop(playlistId, response.data.nextPageToken, newItems, count + 1) } else { return newItems }} To get playlist title, use playlists.list Read more https://developers.google.com/youtube/v3/docs/playlistItems/list https://developers.google.com/youtube/v3/quickstart/nodejs","link":"/blog/How-to-get-videos-from-youtube-in-node/"},{"title":"How to get running window informations in macOS","text":"Issue #243 From https://developer.apple.com/documentation/coregraphics/1455137-cgwindowlistcopywindowinfo Generates and returns information about the selected windows in the current user session. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051struct MyWindowInfo { let frame: CGRect let name: String let pid: Int let number: Int init?(json: [String: Any]) { guard let pid = json[\"kCGWindowOwnerPID\"] as? Int else { return nil } guard let name = json[\"kCGWindowOwnerName\"] as? String else { return nil } guard let rect = json[\"kCGWindowBounds\"] as? [String: Any] else { return nil } guard let x = rect[\"X\"] as? CGFloat else { return nil } guard let y = rect[\"Y\"] as? CGFloat else { return nil } guard let height = rect[\"Height\"] as? CGFloat else { return nil } guard let width = rect[\"Width\"] as? CGFloat else { return nil } guard let number = json[\"kCGWindowNumber\"] as? Int else { return nil } self.pid = pid self.name = name self.number = number self.frame = CGRect(x: x, y: y, width: width, height: height) }}guard let jsons = CGWindowListCopyWindowInfo(.optionAll, kCGNullWindowID) as? [[String: Any]] else { return}let infos = jsons.compactMap({ MyWindowInfo(json: $0) })","link":"/blog/How-to-get-running-window-informations-in-macOS/"},{"title":"How to group digits in Swift","text":"Issue #26 When working on Scale I think it‚Äôs good to have a way to group the digit so that it is easier to reason Luckily, Swift already supports this. See The Swift Programming Language - Numeric Literals Numeric literals can contain extra formatting to make them easier to read. Both integers and floats can be padded with extra zeros and can contain underscores to help with readability. Neither type of formatting affects the underlying value of the literal 123let paddedDouble = 000123.456let oneMillion = 1_000_000let justOverOneMillion = 1_000_000.000_000_1 Talking about grouping digits after the decimal point, it is interesting too Convention of digit grouping after decimal point So now we have 12345678910111213141516171819public enum MetricUnit: Double { case nano = 0.000_000_001 case micro = 0.000_001 case milli = 0.001 case centi = 0.01 case deci = 0.1 case base = 1 case deka = 10 case hecto = 100 case kilo = 1_000 case mega = 1_000_000 case giga = 1_000_000_000 case tera = 1_000_000_000_000 case peta = 1_000_000_000_000_000 static var defaultScale: Double { return MetricUnit.base.rawValue }}","link":"/blog/How-to-group-digits-in-Swift/"},{"title":"How to group extension methods in Swift","text":"Issue #11 Swift allows us to define more methods on existing class using extension. 1234567891011121314extension UIView { func shake() { } func fade() { } func centerIn(anotherView: UIView) { }} If you ‚Äòre afraid of the naming conflict, you can prefix your methods, like 123view.abc_shake()view.abc_fade()view.abc_centerIn(anotherView: containerView) Or a better way, reverse it üíÉ , like 123view.animation.shake()view.animation.fade()view.layout.centerIn(anotherView) This way, no more conflict and we make it clear that shake() and fade() belongs to animation categoryActually, animation and layout are properties in UIView extension. This may cause naming conflict, but the number of them is reduced This is how it works 123456789101112131415161718192021222324252627282930extension UIView { struct Animation { let view: UIView func shake() { // Shake the view } func fade() { PowerfulAnimationEngine.fade(view) } } var animation: Animation { return Animation(view: self) } struct Layout { let view: UIView func centerIn(anotherView: UIView) { } } var layout: Layout { return Layout(view: self) }}","link":"/blog/How-to-group-extension-methods-in-Swift/"},{"title":"How to hack iOS apps","text":"Issue #19 We need to care about security nowadays, here are some links I find useful to read more about this matter https://github.com/Naituw/IPAPatch https://github.com/cyanzhong/Retriever https://github.com/KJCracks/Clutch https://github.com/pjebs/Obfuscator-iOS https://github.com/UrbanApps/UAObfuscatedString https://www.raywenderlich.com/46223/ios-app-security-analysis-part-2 http://www.splinter.com.au/2014/09/16/storing-secret-keys/ Anastasiia Voitova: Keys from the castle: ancient art of managing keys and trust https://www.hopperapp.com/ https://github.com/iosre/iOSAppReverseEngineering CocoaPods, Exposed Analysis of the Facebook.app for iOS [v. 87.0] http://quellish.tumblr.com/post/126712999812/how-on-earth-the-facebook-ios-application-is-so https://www.objc.io/issues/19-debugging/ https://github.com/felixgr/secure-ios-app-dev App Security in Swift Securing Communications on iOS How I discovered Instagram‚Äôs upcoming video calling feature on iOS https://blog.superhuman.com/advanced-swift-debugging-for-uikit-e154d1c28aaf http://blog.zats.io/2017/12/27/iPhone-X-home-button/ https://medium.com/@nathangitter/exploring-apps-without-jailbreaking-e932904f9863 https://academy.realm.io/posts/conrad-kramer-reverse-engineering-ios-apps-lyft/ https://github.com/BishopFox/iSpy https://github.com/Polidea/SiriusObfuscator https://oleb.net/2018/photos-data-model/ The art of spelunking https://vimeo.com/290322018 https://briancoyner.github.io/xcode/2017/05/14/xcode-attach-debugger-to-apple-apps.html https://medium.com/@vixentael/popular-note-taking-apps-share-these-security-flaws-security-tips-for-developers-326180e41329 https://medium.com/@kennethpoon/lets-write-swift-code-to-intercept-ssl-pinning-https-requests-12446303cc9d https://medium.com/@kennethpoon/how-to-perform-ios-code-injection-on-ipa-files-1ba91d9438db https://github.com/armadsen/analyze_apps https://github.com/rockbruno/swiftshield https://rambo.codes/ios/2019/01/11/hacking-with-private-apis-on-ipad.html https://github.com/MichaelMKenny/ios-13-light-dark-wallpaper-app Private frameworks https://github.com/jenghis/nshift/blob/master/nshift/CBBlueLightClient.h Hack macOS apps Xcode, the ultimate debugging and cracking tool REVERSE ENGINEERING STICKIES.APP https://github.com/OWASP/owasp-mstg Private frameworks https://github.com/sindresorhus/touch-bar-simulator Hack Android apps Reverse Engineering The Medium App (and making all stories in it free)","link":"/blog/How-to-hack-iOS-apps/"},{"title":"How to handle Auto Layout with different screen sizes","text":"Issue #35 Auto Layout is awesome. Just declare the constraints and the views are resized accordingly to their parent ‚Äòs bounds changes. But sometimes it does not look good, because we have fixed values for padding, width, height, and even fixed font size. Read more How to make Auto Layout more convenient in iOS This can be solved by some degree using Size Class. The idea of size class is that we have many sets of constraints, and based on the device traits, we enabled some of them. This is more convenient to do in Storyboard (although very hard to reason about), but if we‚Äôre doing in code (my prefer way), then it is a lot of code. And a lot of code means a lot of bugs. If you take a look at iOSRes, we see the ratio 16:9 (height:width) iPhone SE (320 x 568): 1.775 iPhone 6 (375 x 667): 1.778 iPhone 6+ (414 x 736): 1.778 They mostly have the same ratio. So we can have a simple approach, that scale elements based on ratio. Given the fact that the designer usually designs for iPhone 6 size, we can make that a base. In this approach, the content will scale up or down depending on its ratio. You may argue that the idea of bigger phone is to display more, not to show the same content bigger. You may be right, in that case you need to create different constraints and different UIs. But if you want simple solutions that work, this is one of them This is the technique I used when doing Windows Phone development, but it applies to many platforms as well Calculate the ratio12345678class Device { // Base width in point, use iPhone 6 static let base: CGFloat = 375 static var ratio: CGFloat { return UIScreen.main.bounds.width / base }} Extension to make it convenientWe can have a computed property called adjusted that adjusts the size based on the ratio 1234567891011121314151617181920extension CGFloat { var adjusted: CGFloat { return self * Device.ratio }}extension Double { var adjusted: CGFloat { return CGFloat(self) * Device.ratio }}extension Int { var adjusted: CGFloat { return CGFloat(self) * Device.ratio }} Use the ratioYou can adjust as much as you want 123456label.font = UIFont.systemFont(ofSize: 23.adjusted)phoneTextField.leftAnchor.constraint(equalTo: container.leftAnchor, constant: 30.adjusted),phoneTextField.rightAnchor.constraint(equalTo: container.rightAnchor, constant: -30.adjusted),imageView.widthAnchor.constraint(equalToConstant: 80.adjusted), imageView.heightAnchor.constraint(equalToConstant: 90.adjusted),","link":"/blog/How-to-handle-Auto-Layout-with-different-screen-sizes/"},{"title":"How to handle RefreshControl in iOS","text":"Issue #20 The other day I was doing refresh control, and I saw this Swift Protocols with Default Implementations as UI Mixins 1234567891011121314151617181920extension Refreshable where Self: UIViewController{ /// Install the refresh control on the table view func installRefreshControl() { let refreshControl = UIRefreshControl() refreshControl.tintColor = .primaryColor refreshControl.addTarget(self, action: #selector(handleRefresh(_:)), for: .valueChanged) self.refreshControl = refreshControl if #available(iOS 10.0, *) { tableView.refreshControl = refreshControl } else { tableView.backgroundView = refreshControl } }} Protocol extension is cool but somehow I‚Äôm not a fan of it. I always consider composition first, to extract the specific task to one entity that does that well. It looks like this 1234567891011121314151617181920class RefreshHandler: NSObject { let refresh = PublishSubject&lt;Void&gt;() let refreshControl = UIRefreshControl() init(view: UIScrollView) { super.init() view.addSubview(refreshControl) refreshControl.addTarget(self, action: #selector(refreshControlDidRefresh(_: )), for: .valueChanged) } // MARK: - Action func refreshControlDidRefresh(_ control: UIRefreshControl) { refresh.onNext(()) } func end() { refreshControl.endRefreshing() }} It is a bit Rx, we can use block if we like, but the idea is we can declare this RefreshHandler and use it everywhere we want 123456refreshHandler = RefreshHandler(view: scrollView)refreshHandler.refresh .startWith(()) .bindTo(viewModel.input.fetch) .addDisposableTo(bag)","link":"/blog/How-to-handle-RefreshControl-in-iOS/"},{"title":"How to handle NSTextField change in macOS","text":"Issue #438 StoryboardIn Storyboard, NSTextField has an Action option that specify whether Send onSend on Enter only` should be the default behaviour. CodeIn code, NSTextFieldDelegate notifies whenever text field value changes, and target action notifies when Enter key is pressed 1234567891011121314151617import Cocoaclass ViewController: NSViewController, NSTextFieldDelegate { @IBOutlet weak var textField: NSTextField! override func viewDidLoad() { super.viewDidLoad() textField.delegate = self } func controlTextDidChange(_ obj: Notification) { let textField = obj.object as! NSTextField print(textField.stringValue) }} Use EasyClosureIf we use EasyClosure then this is easy 123456789let textField: NSTextField = textField.on.action { string in print(\"User has pressed enter \\(string)\"}textField.on.change { string in print(\"Text field value has changed\")}","link":"/blog/How-to-handle-NSTextField-change-in-macOS/"},{"title":"How to handle Swift version with Cocoapods","text":"Issue #80 Today I was migrating Imaginary to Swift 4. But I get 12345- ERROR | [OSX] xcodebuild: Returned an unsuccessful exit code.- ERROR | [OSX] xcodebuild: Cache/Source/Mac/NSImage+Extensions.swift:32:64: error: 'png' has been renamed to 'PNG'- NOTE | [OSX] xcodebuild: AppKit.NSBitmapImageRep:57:27: note: 'png' was introduced in Swift 4- ERROR | [OSX] xcodebuild: Cache/Source/Mac/NSImage+Extensions.swift:32:71: error: 'jpeg' has been renamed to 'JPEG'- NOTE | [OSX] xcodebuild: AppKit.NSBitmapImageRep:52:27: note: 'jpeg' was introduced in Swift 4 The project is configured to use Swift 4 and its dependency Cache correctly uses .png and .jpeg https://github.com/hyperoslo/Cache/blob/master/Source/Mac/NSImage%2BExtensions.swift Why is that ü§î It turns out that the .swift-version is still showing 3.0. Change it to 4.0 fixes the issue. The .swift-version is a hint to specify which Swift version should be used for a pod https://github.com/CocoaPods/CocoaPods/pull/5841","link":"/blog/How-to-handle-Swift-version-with-Cocoapods/"},{"title":"How to handle enter key in NSTextField","text":"Issue #635 1textField.delegate = self 123456789101112131415161718192021222324NSTextFieldDelegatefunc control(_ control: NSControl, textView: NSTextView, doCommandBy commandSelector: Selector) -&gt; Bool { if (commandSelector == #selector(NSResponder.insertNewline(_:))) { // Do something against ENTER key print(\"enter\") return true } else if (commandSelector == #selector(NSResponder.deleteForward(_:))) { // Do something against DELETE key return true } else if (commandSelector == #selector(NSResponder.deleteBackward(_:))) { // Do something against BACKSPACE key return true } else if (commandSelector == #selector(NSResponder.insertTab(_:))) { // Do something against TAB key return true } else if (commandSelector == #selector(NSResponder.cancelOperation(_:))) { // Do something against ESCAPE key return true } // return true if the action was handled; otherwise false return false}","link":"/blog/How-to-handle-enter-key-in-NSTextField/"},{"title":"How to handle alert in UITests in iOS","text":"Issue #82 Usually in an app, you have the onboarding with steps that require push notification and location permission to be turned on. And you want to automate these steps via UITests Firstly, you need to add interruption handler 12345678910111213141516171819202122addUIInterruptionMonitor(withDescription: \"Alert\") { element in do { // Push Notification let button = element.buttons[\"Allow\"] let title = element.staticTexts[\"‚ÄúMyAwesomeApp‚Äù Would Like to Send You Notifications\"] if title.exists &amp;&amp; button.exists { button.tap() } } do { // Location let button = element.buttons[\"Only While Using the App\"] if button.exists { button.tap() } } return true }} Then you need to call tap on XCUIApplication to make the app responsive 12turnOnPushNotificationButton.tap()tap() Sometimes the alert handling is slow and you get Did not receive view did disappear notification within 2.0s. Well, the workaround is to wait for the element on next onboarding step to appear. Starting with Xcode 9, you can use waitForExistence. This is how you can go to last step after user has enabled push notification 12let label = staticTexts[\"Congratulation. You've granted us permission. Now enjoy the app.\"]_ = label.waitForExistence(timeout: 5)","link":"/blog/How-to-handle-alert-in-UITests-in-iOS/"},{"title":"How to get ISO string from date in Javascript","text":"Issue #552 1234567891011121314151617181920212223242526272829type Components = { day: number, month: number, year: number}export default class DateFormatter { // 2018-11-11T00:00:00 static ISOStringWithoutTimeZone = (date: Date): string =&gt; { const components = DateFormatter.format(DateFormatter.components(date)) return `${components.year}-${components.month}-${components.day}T00:00:00` } static format = (components: Components) =&gt; { return { day: `${components.day}`.padStart(2, '0'), month: `${components.month}`.padStart(2, '0'), year: components.year } } static components = (date: Date): Components =&gt; { return { day: date.getDate(), month: date.getMonth() + 1, year: date.getFullYear() } }} Read more https://stackoverflow.com/a/53298976/1418457","link":"/blog/How-to-get-ISO-string-from-date-in-Javascript/"},{"title":"How to handle file picker in React","text":"Issue #190 1234567891011121314render() { &lt;Button color=\"inherit\" onClick={this.onImagePress} &gt;Image&lt;/Button&gt; &lt;input ref=\"fileInput\" type=\"file\" id=\"myFile\" multiple accept=\"image/*\" style={{display: 'none'}} onChange={this.handleFiles}&gt;&lt;/input&gt;}onImagePress = () =&gt; { const fileInput = this.refs.fileInput fileInput.click()}handleFiles = (e) =&gt; { e.persist() const file = e.target.files[0]}","link":"/blog/How-to-handle-file-picker-in-React/"},{"title":"How to handle radio group for NSButton","text":"Issue #579 Use same action, or we can roll our own implementation An NSButton configured as a radio button (with the -buttonType set to NSRadioButton), will now operate in a radio button group for applications linked on 10.8 and later. To have the button work in a radio group, use the same -action for each NSButton instance, and have the same superview for each button. When these conditions are met, checking one button (by changing the -state to 1), will uncheck all other buttons (by setting their -state to 0). 1234567import Omnia@IBAction func onModeButtonTouch(_ sender: NSRadioButton) { for button in [mode1Button, mode2Button] { button?.isOn = button === sender }}","link":"/blog/How-to-handle-radio-group-for-NSButton/"},{"title":"How to  group array by property in  Swift","text":"Issue #510 Use Dictionary(grouping:by:) 12345678910func groups(countries: [Country]) -&gt; [Group] { let dictionary = Dictionary(grouping: countries, by: { String($0.name.prefix(1)) }) let groups = dictionary .map({ (key: String, value: [Country]) -&gt; Group in return Group(initial: key, countries: value) }) .sorted(by: { $0.initial &lt; $1.initial }) return groups}","link":"/blog/How-to-group-array-by-property-in-Swift/"},{"title":"How to get url of app on the iOS AppStore","text":"Issue #440 1http://itunes.apple.com/[country]/app/[App‚ÄìName]/id[App-ID]?mt=8 For example https://apps.apple.com/nl/app/cutters/id1466739130","link":"/blog/How-to-get-url-of-app-on-the-iOS-AppStore/"},{"title":"How to handle link clicked in WKWebView in iOS","text":"Issue #365 12345678910111213141516171819202122232425import WebKitimport SafariServicesfinal class WebViewHandler: NSObject, WKNavigationDelegate { var show: ((UIViewController) -&gt; Void)? let supportedSchemes = [\"http\", \"https\"] func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -&gt; Void) { defer { decisionHandler(.allow) } guard navigationAction.navigationType == .linkActivated, let url = navigationAction.request.url, let scheme = url.scheme, supportedSchemes.contains(scheme) else { return } let controller = SFSafariViewController(url: url) show?(controller) }}","link":"/blog/How-to-handle-link-clicked-in-WKWebView-in-iOS/"},{"title":"How to handle right click in AppKit","text":"Issue #322 12345lazy var gr = NSClickGestureRecognizer(target: self, action: #selector(onPress(_:)))gr.buttonMask = 0x2gr.numberOfClicksRequired = 1view.addGestureRecognizer(gr)","link":"/blog/How-to-handle-right-click-in-AppKit/"},{"title":"How to handle different states in a screen in iOS","text":"Issue #469 If there are lots of logics and states inside a screen, it is best to introduce parent and child container, and switch child depends on state. Each child acts as a State handler. In less logic case, we can introduce a Scenario class that holds the state. So the ViewController can be very slim. The thing with State is that all possible scenarios are clear and required to be handled 1234567891011121314151617181920212223242526272829final class UserDetailScenario { enum State { case unknown case getUser(Email) case newUser(Email) case existingUser(User) case failure(Error) } var state: State = .unknown(nil) { didSet { self.reload() } } private func reload() { switch state { case .unknown: handleUnknown() case .getUser(let email): handleGetUser(email: email) case .newUser(let email): handleNewUser(email: email) case .existingUser(let user): handleExistingUser(user: user case .failure(let error): logError(error) }}","link":"/blog/How-to-handle-different-states-in-a-screen-in-iOS/"},{"title":"How to ignore App Transport Security in iOS","text":"Issue #221 Ignore a host12345678910111213141516171819202122232425&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;&lt;dict&gt; &lt;key&gt;NSExceptionDomains&lt;/key&gt; &lt;dict&gt; &lt;key&gt;example.com&lt;/key&gt; &lt;dict&gt; &lt;key&gt;NSIncludesSubdomains&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSExceptionAllowsInsecureHTTPLoads&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSExceptionRequiresForwardSecrecy&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSExceptionMinimumTLSVersion&lt;/key&gt; &lt;string&gt;TLSv1.2&lt;/string&gt; &lt;key&gt;NSThirdPartyExceptionAllowsInsecureHTTPLoads&lt;/key&gt; &lt;false/&gt; &lt;key&gt;NSThirdPartyExceptionRequiresForwardSecrecy&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSThirdPartyExceptionMinimumTLSVersion&lt;/key&gt; &lt;string&gt;TLSv1.2&lt;/string&gt; &lt;key&gt;NSRequiresCertificateTransparency&lt;/key&gt; &lt;false/&gt; &lt;/dict&gt; &lt;/dict&gt;&lt;/dict&gt; Ignore all12345&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;&lt;dict&gt; &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt; &lt;true/&gt;&lt;/dict&gt;","link":"/blog/How-to-ignore-App-Transport-Security-in-iOS/"},{"title":"How to implement a tracker in Swift","text":"Issue #55 I‚Äôm trying to implement a tracker, so the idea is that it can inject subscription upon method calls. It is best suit for logging, analytics, and it leverages RxCocoa Usage1234567891011track(ListController.self) { _ in print(\"\")}track(ListController.self, selector: #selector(ListController.hello)) { _ in print(\"\")}track(DetailController.self) { _ in print(\"\")} The code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475import UIKitimport RxSwiftimport RxCocoavar mapping: [String: [Item]] = [:]var hasSwizzled = falselet bag = DisposeBag()public func track&lt;T: UIViewController&gt;(_ type: T.Type, selector: Selector? = nil, block: @escaping (T) -&gt; Void) { let typeName = NSStringFromClass(type) if !hasSwizzled { let original = #selector(UIViewController.viewDidLoad) let swizled = #selector(UIViewController.trackers_viewDidLoad) swizzle(kClass: UIViewController.self, originalSelector: original, swizzledSelector: swizled) hasSwizzled = true } let selector = selector ?? #selector(UIViewController.viewDidAppear(_:)) let item = Item(selector: selector, block: { (controller) in if let controller = controller as? T { block(controller) } }) if var items = mapping[typeName] { items.append(item) mapping[typeName] = items } else { mapping[typeName] = [item] }}class Item { let selector: Selector let block: (UIViewController) -&gt; Void init(selector: Selector, block: @escaping (UIViewController) -&gt; Void) { self.selector = selector self.block = block }}extension UIViewController { func trackers_viewDidLoad() { trackers_viewDidLoad() let typeName = NSStringFromClass(type(of: self)) let items = mapping[typeName] items?.forEach({ (item) in self .rx .sentMessage(item.selector) .subscribe(onNext: { _ in item.block(self) }, onCompleted: { print(\"completed\") }) .disposed(by: bag) }) }}func swizzle(kClass: AnyClass, originalSelector: Selector, swizzledSelector: Selector) { let originalMethod = class_getInstanceMethod(kClass, originalSelector) let swizzledMethod = class_getInstanceMethod(kClass, swizzledSelector) let didAddMethod = class_addMethod(kClass, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod)) if didAddMethod { class_replaceMethod(kClass, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod)) } else { method_exchangeImplementations(originalMethod, swizzledMethod) }}","link":"/blog/How-to-implement-a-tracker-in-Swift/"},{"title":"How to iterate over XCUIElementQuery in UITests","text":"Issue #628 123456789101112131415161718192021222324252627extension XCUIElementQuery: Sequence { public typealias Iterator = AnyIterator&lt;XCUIElement&gt; public func makeIterator() -&gt; Iterator { var index = UInt(0) return AnyIterator { guard index &lt; self.count else { return nil } let element = self.element(boundBy: Int(index)) index = index + 1 return element } }}extension NSPredicate { static func label(contains string: String) -&gt; NSPredicate { NSPredicate(format: \"label CONTAINS %@\", string) }}let books = app.collectionViews.cells.matching( NSPredicate.label(contains: \"book\"))for book in books {}","link":"/blog/How-to-iterate-over-XCUIElementQuery-in-UITests/"},{"title":"How to initialize Enums With Optionals in Swift","text":"Issue #49 Today someone showed me https://medium.com/@_Easy_E/initializing-enums-with-optionals-in-swift-bf246ce20e4c which tries to init enum with optional value. 1234567891011121314151617181920enum Planet: String { case mercury case venus case earth case mars case jupiter case saturn case uranus case neptune}extension RawRepresentable { init?(optionalValue: RawValue?) { guard let value = optionalValue else { return nil } self.init(rawValue: value) }}let name: String? = \"venus\"let planet = Planet(optionalValue: name) One interesting fact about optional, is that it is a monad, so it has map and flatMap. Since enum init(rawValue:) returns an optional, we need to use flatMap. It looks like this 12let name: String? = \"venus\"let planet = name.flatMap({ Planet(rawValue: $0) }) üéâ","link":"/blog/How-to-initialize-Enums-With-Optionals-in-Swift/"},{"title":"How to handle shortcut in AppKit","text":"Issue #408 Podfile 1pod 'MASShortcut' 12345let shortcut = MASShortcut(keyCode: kVK_ANSI_K, modifierFlags: [.command, .shift])MASShortcutMonitor.shared()?.register(shortcut, withAction: { self.showPopover(sender: self.statusItem.button)})","link":"/blog/How-to-handle-shortcut-in-AppKit/"},{"title":"How to inject view model with Koin in Android","text":"Issue #359 app/build.gradle 123implementation \"org.koin:koin-core:$Version.koin\"implementation \"org.koin:koin-androidx-scope:$Version.koin\"implementation \"org.koin:koin-androidx-viewmodel:$Version.koin\" MyApplication.kt 1234567891011121314151617181920212223import android.app.Applicationimport org.koin.android.ext.koin.androidContextimport org.koin.android.ext.koin.androidLoggerimport org.koin.androidx.viewmodel.dsl.viewModelimport org.koin.core.context.startKoinimport org.koin.dsl.moduleclass MyApplication: Application() { var appModule = module { single { MyRepo() } viewModel { MyViewModel(get()) } } override fun onCreate() { super.onCreate() startKoin { androidLogger() androidContext(this@MyApplication) modules(appModule) } }} MyFragment.kt 123import org.koin.androidx.viewmodel.ext.android.viewModelval viewModel: MyViewModel by viewModel()","link":"/blog/How-to-inject-view-model-with-Koin-in-Android/"},{"title":"How to integrate library via custom podspec","text":"Issue #81 Today I am about to integrate a library that does not support Cocoapods yet. It would be cumbersome to do it manually, because you have to configure xcconfig, framework search path, assets, and these steps are not well documented. You can do this with custom podspec. In my case, I need to install PinchSDK. First, declare a PinchSDK.podspec in your project folder. 12345678910111213141516Pod::Spec.new do |s| s.name = \"PinchSDK\" s.version = \"1.9.14\" s.summary = \"Pinch samler dessuten inn data hver gang en mobilapplikasjon oppdager en Pinch-beacon.\" s.homepage = \"https://bitbucket.org/fluxloop/pinch.installpackage\" s.source = { :http =&gt; \"https://bitbucket.org/fluxloop/pinch.installpackage/raw/master/iOS/PinchSDK.zip\" } s.authors = 'Fluxloop' s.license = { type: 'MIT' } s.platform = :ios, '8.0' s.requires_arc = true s.resource = 'PinchSDK/Pinch.bundle' s.vendored_frameworks = 'PinchSDK/PinchLibrary.framework' s.xcconfig = { 'OTHER_LDFLAGS': '-ObjC' } s.public_header_files = 'PinchSDK/PinchLibrary.framework/Headers/PinchLibrary.h' s.source_files = 'PinchSDK/PinchLibrary.framework/Headers/PinchLibrary.h'end Then, in your Podfile, you can point to this podspec 1pod 'PinchSDK', podspec: 'PinchSDK.podspec' Finally, since this PinchSDK uses objc, you need to declare it in your bridging header 1#import &lt;PinchLibrary/PinchLibrary.h&gt; Now, just pod install and you‚Äôre done üéâ","link":"/blog/How-to-integrate-library-via-custom-podspec/"},{"title":"How to keep command line tool running with async in Swift","text":"Issue #549 Use Semaphore123456789101112131415161718192021222324252627282930313233public class Sequence: Task { public func run(workflow: Workflow, completion: @escaping TaskCompletion) { let semaphore = DispatchSemaphore(value: 0) runFirst(tasks: tasks, workflow: workflow, completion: { result in completion(result) semaphore.signal() }) semaphore.wait() }}public class Concurrent: Task { public func run(workflow: Workflow, completion: @escaping (Result&lt;(), Error&gt;) -&gt; Void) { var runTaskCount = 0 let taskCount = tasks.count let semaphore = DispatchSemaphore(value: 0) tasks.forEach { task in task.run(workflow: workflow, completion: { _ in self.serialQueue.async { runTaskCount += 1 if runTaskCount == taskCount { completion(.success(())) semaphore.signal() } } }) } semaphore.wait() }} Read more https://stackoverflow.com/questions/31944011/how-to-prevent-a-command-line-tool-from-exiting-before-asynchronous-operation-co","link":"/blog/How-to-keep-command-line-tool-running-with-async-in-Swift/"},{"title":"How to launch app at start up in macOS","text":"Issue #205 ServiceManagement frameworkhttps://developer.apple.com/documentation/servicemanagement/1501557-smloginitemsetenabled SMLoginItemSetEnabled Enable a helper application located in the main application bundle‚Äôs ‚ÄúContents/Library/LoginItems‚Äù directory. Login itemsmacOS Sierra: Open items automatically when you log in You can have apps, documents, folders, or server connections open automatically whenever you log in to your Mac. Add or remove automatic itemsChoose Apple menu &gt; System Preferences, then click Users &amp; Groups.","link":"/blog/How-to-launch-app-at-start-up-in-macOS/"},{"title":"How to load top level view from xib in macOS","text":"Issue #171 123var views: NSArray?NSNib(nibNamed: NSNib.Name(\"ProfileView\"), bundle: nil)?.instantiate(withOwner: nil, topLevelObjects: &amp;views)let profileView = views!.compactMap({ $0 as? ProfileView }).first!","link":"/blog/How-to-load-top-level-view-from-xib-in-macOS/"},{"title":"How to log in SwiftUI","text":"Issue #604 I see that the modifier needs to do something on the content, otherwise it is not getting called!This logs on the modifier, when the View is created. A View won‚Äôt be recreated unless necessary 1234567891011121314struct LogModifier: ViewModifier { let text: String func body(content: Content) -&gt; some View { print(text) return content .onAppear {} }}extension View { func log(_ text: String) -&gt; some View { self.modifier(LogModifier(text: text)) }} 1234VStack { Text(\"\") .log(\"a text\")} Another simpler way is to make an extension 123456extension View { func log(_ any: Any) -&gt; Self { print(\"\\(any)\") return self }}","link":"/blog/How-to-log-in-SwiftUI/"},{"title":"How to load remote image in SwiftUI","text":"Issue #448 Use ObservableObject and onReceive to receive event. URLSession.dataTask reports in background queue, so need to .receive(on: RunLoop.main) to receive events on main queue. For better dependency injection, need to use ImageLoader from Environment There should be a way to propagate event from Publisher to another Publisher, for now we use sink ImageLoader.swift 123456789101112131415161718192021222324import Combineimport WatchKitclass ImageLoader: ObservableObject { private var cancellable: AnyCancellable? let objectWillChange = PassthroughSubject&lt;UIImage?, Never&gt;() func load(url: URL) { self.cancellable = URLSession.shared .dataTaskPublisher(for: url) .map({ $0.data }) .eraseToAnyPublisher() .receive(on: RunLoop.main) .map({ UIImage(data: $0) }) .replaceError(with: nil) .sink(receiveValue: { image in self.objectWillChange.send(image) }) } func cancel() { cancellable?.cancel() }} RemoteImage.swift 1234567891011121314151617181920212223242526272829303132333435import SwiftUIimport WatchKitstruct RemoteImage: View { let url: URL let imageLoader = ImageLoader() @State var image: UIImage? = nil var body: some View { Group { makeContent() } .onReceive(imageLoader.objectWillChange, perform: { image in self.image = image }) .onAppear(perform: { self.imageLoader.load(url: self.url) }) .onDisappear(perform: { self.imageLoader.cancel() }) } private func makeContent() -&gt; some View { if let image = image { return AnyView( Image(uiImage: image) .resizable() .aspectRatio(contentMode: .fit) ) } else { return AnyView(Text(\"üò¢\")) } }}","link":"/blog/How-to-load-remote-image-in-SwiftUI/"},{"title":"How to hide tab bar when push in iOS","text":"Issue #471 12let navigationController = UINavigationController(rootViewController: viewControllerA)navigationController.pushViewController(viewControllerB, animated: true) In view controller B, need to set hidesBottomBarWhenPushed in init 1234567891011121314final class ViewControllerB: UIViewController { let mainView = EditPaymentMethodView() var scenario: PaymentMethodScenario! init() { super.init(nibName: nil, bundle: nil) hidesBottomBarWhenPushed = true } required init?(coder: NSCoder) { fatalError() }}","link":"/blog/How-to-hide-tab-bar-when-push-in-iOS/"},{"title":"How to make TextField focus in SwiftUI for macOS","text":"Issue #620 For NSWindow having levelother than .normal, need to override key and main property to allow TextField to be focusable 1234class FocusWindow: NSWindow { override var canBecomeKey: Bool { true } override var canBecomeMain: Bool { true }} Furthermore to customize TextField, consider using custom 1234567891011121314151617181920212223242526272829303132333435import SwiftUIimport AppKitstruct MyTextField: NSViewRepresentable { @Binding var text: String func makeNSView(context: NSViewRepresentableContext&lt;MyTextField&gt;) -&gt; NSTextField { let tf = NSTextField() tf.focusRingType = .none tf.isBordered = false tf.drawsBackground = false tf.delegate = context.coordinator return tf } func updateNSView(_ nsView: NSTextField, context: NSViewRepresentableContext&lt;MyTextField&gt;) { nsView.stringValue = text } func makeCoordinator() -&gt; MyTextField.Coordinator { Coordinator(parent: self) } class Coordinator: NSObject, NSTextFieldDelegate { let parent: MyTextField init(parent: MyTextField) { self.parent = parent } func controlTextDidChange(_ obj: Notification) { let textField = obj.object as! NSTextField parent.text = textField.stringValue } }}","link":"/blog/How-to-make-TextField-focus-in-SwiftUI-for-macOS/"},{"title":"How to handle UICollectionView reloadData with selected index path","text":"Issue #434 When calling collectionView.reloadData(), selected indexpath stays the same, but be aware that order of data may have changed 12345678let selectedData = ...let indexPathForSelectedData = ...collectionView.scrollToItem( at: indexPathForSelectedData, at: .centeredHorizontally, animated: false)","link":"/blog/How-to-handle-UICollectionView-reloadData-with-selected-index-path/"},{"title":"How to make TextView in SwiftUI for macOS","text":"Issue #587 Use xibCreate a xib called ScrollableTextView, and drag just Scrollable text view as top object Connect just the textView property 12345import AppKitclass ScrollableTextView: NSScrollView { @IBOutlet var textView: NSTextView!} Conform to NSViewRepresentable1234567891011121314151617181920212223242526272829303132333435import SwiftUIstruct TextView: NSViewRepresentable { @Binding var text: String func makeCoordinator() -&gt; Coordinator { Coordinator(self) } func makeNSView(context: Context) -&gt; ScrollableTextView { var views: NSArray? Bundle.main.loadNibNamed(\"ScrollableTextView\", owner: nil, topLevelObjects: &amp;views) let scrollableTextView = views!.compactMap({ $0 as? ScrollableTextView }).first! scrollableTextView.textView.delegate = context.coordinator return scrollableTextView } func updateNSView(_ nsView: ScrollableTextView, context: Context) { guard nsView.textView.string != text else { return } nsView.textView.string = text } class Coordinator: NSObject, NSTextViewDelegate { let parent: TextView init(_ textView: TextView) { self.parent = textView } func textDidChange(_ notification: Notification) { guard let textView = notification.object as? NSTextView else { return } self.parent.text = textView.string } }} There seems to be a bug that if we have open and close curly braces, any character typed into NSTextView will move the cursor to the end. This is easily fixed with a check in updateNSView","link":"/blog/How-to-make-TextView-in-SwiftUI-for-macoS/"},{"title":"How to log Error in Swift","text":"Issue #439 Use localizedDescriptionWe need to provide NSLocalizedDescriptionKey inside user info dictionary, otherwise the outputt string may not be what we want. NSErrorhttps://developer.apple.com/documentation/foundation/nserror/1414418-localizeddescription A string containing the localized description of the error.The object in the user info dictionary for the key NSLocalizedDescriptionKey. If the user info dictionary doesn‚Äôt contain a value for NSLocalizedDescriptionKey, a default string is constructed from the domain and code. 1234567let error = NSError(domain: \"com.onmyway133.MyApp\", code: 2, userInfo: [ \"status_code\": 2, \"status_message\": \"not enough power\"])error.localizedDescription// \"The operation couldn‚Äôt be completed. (com.onmyway133.MyApp error 2.)\" Errorhttps://developer.apple.com/documentation/swift/error/2292912-localizeddescription Retrieve the localized description for this error. 1234567enum AppError: Error { case request case invalid}AppError.request.localizedDescription// \"The operation couldn‚Äôt be completed. (MyApp.AppError error 0.)\" Use describing StringTo have better control, we can have toString which prints closly to what we expect 1234567891011extension Error { func toString() -&gt; String { return String(describing: self) }}AppError.request.toString()// requestnsError.toString()// Error Domain=com.onmyway133.MyApp Code=2 \"(null)\" UserInfo={status_message=not enough power, status_code=SwiftGRPC.StatusCode.powerRequired}","link":"/blog/How-to-log-Error-in-Swift/"},{"title":"How to make borderless material NSTextField in SwiftUI for macOS","text":"Issue #590 Use custom NSTextField as it is hard to customize TextFieldStyle 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import SwiftUIstruct MaterialTextField: View { let placeholder: String @Binding var text: String @State var isFocus: Bool = false var body: some View { VStack(alignment: .leading, spacing: 0) { BorderlessTextField(placeholder: placeholder, text: $text, isFocus: $isFocus) .frame(maxHeight: 40) Rectangle() .foregroundColor(isFocus ? R.color.separatorFocus : R.color.separator) .frame(height: isFocus ? 2 : 1) } }}class FocusAwareTextField: NSTextField { var onFocusChange: (Bool) -&gt; Void = { _ in } override func becomeFirstResponder() -&gt; Bool { let textView = window?.fieldEditor(true, for: nil) as? NSTextView textView?.insertionPointColor = R.nsColor.action onFocusChange(true) return super.becomeFirstResponder() }}struct BorderlessTextField: NSViewRepresentable { let placeholder: String @Binding var text: String @Binding var isFocus: Bool func makeCoordinator() -&gt; Coordinator { Coordinator(self) } func makeNSView(context: Context) -&gt; NSTextField { let textField = FocusAwareTextField() textField.placeholderAttributedString = NSAttributedString( string: placeholder, attributes: [ NSAttributedString.Key.foregroundColor: R.nsColor.placeholder ] ) textField.isBordered = false textField.delegate = context.coordinator textField.backgroundColor = NSColor.clear textField.textColor = R.nsColor.text textField.font = R.font.text textField.focusRingType = .none textField.onFocusChange = { isFocus in self.isFocus = isFocus } return textField } func updateNSView(_ nsView: NSTextField, context: Context) { nsView.stringValue = text } class Coordinator: NSObject, NSTextFieldDelegate { let parent: BorderlessTextField init(_ textField: BorderlessTextField) { self.parent = textField } func controlTextDidEndEditing(_ obj: Notification) { self.parent.isFocus = false } func controlTextDidChange(_ obj: Notification) { guard let textField = obj.object as? NSTextField else { return } self.parent.text = textField.stringValue } }}","link":"/blog/How-to-make-borderless-material-NSTextField-in-SwiftUI-for-macOS/"},{"title":"How to make NSCollectionView programatically in Swift","text":"Issue #131 Here‚Äôs how to create NSCollectionView programatically. We need to embed it inside NScrollView for scrolling to work. Code is in Swift 4 NSCollectionView1234567891011121314let layout = NSCollectionViewFlowLayout()layout.minimumLineSpacing = 4collectionView = NSCollectionView()collectionView.dataSource = selfcollectionView.delegate = selfcollectionView.collectionViewLayout = layoutcollectionView.allowsMultipleSelection = falsecollectionView.backgroundColors = [.clear]collectionView.isSelectable = truecollectionView.register( Cell.self, forItemWithIdentifier: NSUserInterfaceItemIdentifier(rawValue: \"Cell\")) NScrollView123scrollView = NSScrollView()scrollView.documentView = collectionViewview.addSubview(scrollView) NSCollectionViewItem123456789final class Cell: NSCollectionViewItem { let label = Label() let myImageView = NSImageView() override func loadView() { self.view = NSView() self.view.wantsLayer = true }} NSCollectionViewDataSource12345678910111213141516171819func collectionView(_ collectionView: NSCollectionView, numberOfItemsInSection section: Int) -&gt; Int { return coins.count}func collectionView(_ collectionView: NSCollectionView, itemForRepresentedObjectAt indexPath: IndexPath) -&gt; NSCollectionViewItem { let cell = collectionView.makeItem( withIdentifier: NSUserInterfaceItemIdentifier(rawValue: \"Cell\"), for: indexPath ) as! Cell let coin = coins[indexPath.item] cell.label.stringValue = coin.name cell.coinImageView.image = NSImage(named: NSImage.Name(rawValue: \"USD\")) ?? NSImage(named: NSImage.Name(rawValue: \"Others\")) return cell} NSCollectionViewDelegateFlowLayout123456789101112131415161718192021func collectionView(_ collectionView: NSCollectionView, didSelectItemsAt indexPaths: Set&lt;IndexPath&gt;) { guard let indexPath = indexPaths.first, let cell = collectionView.item(at: indexPath) as? Cell else { return }}func collectionView(_ collectionView: NSCollectionView, didDeselectItemsAt indexPaths: Set&lt;IndexPath&gt;) { guard let indexPath = indexPaths.first, let cell = collectionView.item(at: indexPath) as? Cell else { return }}func collectionView(_ collectionView: NSCollectionView, layout collectionViewLayout: NSCollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; NSSize { return NSSize( width: collectionView.frame.size.width, height: 40 )}","link":"/blog/How-to-make-NSCollectionView-programatically-in-Swift/"},{"title":"How to make ISO 8601 date in Swift","text":"Issue #479 From ISO8601 spec, the problems are the representation and time zone 1234567ISO 8601 = year-month-day time timezoneFor date and time, there are basic (YYYYMMDD, hhmmss, ...) and extended format (YYYY-MM-DD, hh:mm:ss, ...)Time zone can be Zulu, offset or GMTSeparator for date and time can be space, or TThere are week format for date, but it is rarely usedTimezone can be a lot of spaces afterSecond is optional Here are some valid strings 123452016-04-08T10:25:30Z2016-04-08 11:25:30+01002016-04-08 202530GMT+100020160408 08:25:30-02:002016-04-08 11:25:30 +0100 SolutionsUse NSDateFormatter and normalize the date string. 12345678910111213141516171819202122232425public var stringToDateFormatter: DateFormatter = { let formatter = Foundation.DateFormatter() formatter.locale = Locale(identifier: \"en_US_POSIX\") formatter.dateFormat = \"yyyyMMdd HHmmssZ\" return formatter}()public func date(string: String) -&gt; Date? { var basicString = string if let regex = try? NSRegularExpression(pattern: \"[0-9]{4}-[0-9]{2}-[0-9]{2}\", options: []), let result = regex.firstMatch(in: string, options: .anchored, range: NSMakeRange(0, string.characters.count)) { basicString = (basicString as NSString).replacingOccurrences(of: \"-\", with: \"\", options: [], range: result.range) } basicString = basicString .replacingOccurrences(of: \":\", with: \"\") .replacingOccurrences(of: \"GMT\", with: \"\") .replacingOccurrences(of: \"T\", with: \" \") .replacingOccurrences(of: \",\", with: \".\") return stringToDateFormatter.date(from: basicString) ?? stringToDateMillisecondsFormatter.date(from: basicString)} So here is the format that I‚Äôm using in my ISO8601 123let formatter = NSDateFormatter()formatter.locale = NSLocale(localeIdentifier: \"en_US_POSIX\")formatter.dateFormat = \"yyyyMMdd HHmmssZ\" About the Z identifier Date Field Symbol Table Z: The ISO8601 basic format with hours, minutes and optional seconds fields. The format is equivalent to RFC 822 zone format (when optional seconds field is absent) About locale Formatting Data Using the Locale Settings Locales represent the formatting choices for a particular user, not the user‚Äôs preferred language. These are often the same but can be different. For example, a native English speaker who lives in Germany might select English as the language and Germany as the region About en_US_POSIX Technical Q&amp;A QA1480 NSDateFormatter and Internet Dates On the other hand, if you‚Äôre working with fixed-format dates, you should first set the locale of the date formatter to something appropriate for your fixed format. In most cases the best locale to choose is ‚Äúen_US_POSIX‚Äù, a locale that‚Äôs specifically designed to yield US English results regardless of both user and system preferences. ‚Äúen_US_POSIX‚Äù is also invariant in time (if the US, at some point in the future, changes the way it formats dates, ‚Äúen_US‚Äù will change to reflect the new behaviour, but ‚Äúen_US_POSIX‚Äù will not), and between machines (‚Äúen_US_POSIX‚Äù works the same on iOS as it does on OS X, and as it it does on other platforms). NSISO8601DateFormatter from iOS 10From iOS 10, we can use NSISO8601DateFormatter The NSISO8601DateFormatter class generates and parses string representations of dates following the ISO 8601 standard. Use this class to create ISO 8601 representations of dates and create dates from text strings in ISO 8601 format. Code https://github.com/onmyway133/ISO8601 https://stackoverflow.com/questions/16254575/how-do-i-get-an-iso-8601-date-on-ios/37082414#37082414","link":"/blog/How-to-make-ISO-8601-date-in-Swift/"},{"title":"How to make UIPanGestureRecognizer work with horizontal swipe in UICollectionView","text":"Issue #315 123456extension PanCollectionViewController: UIGestureRecognizerDelegate { func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -&gt; Bool { let velocity = panGR.velocity(in: panGR.view) return abs(velocity.y) &gt; abs(velocity.x) }}","link":"/blog/How-to-make-UIPanGestureRecognizer-work-with-horizontal-swipe-in-UICollectionView/"},{"title":"How to make Unity games in pure C#","text":"Issue #275 Original post https://codeburst.io/making-unity-games-in-pure-c-2b1723cdc71f As an iOS engineers, I ditched Storyboard to avoid all possible hassles and write UI components in pure Swift code. I did XAML in Visual Studio for Windows Phone apps and XML in Android Studio for Android apps some time ago, and I had good experience. However since I‚Äôm used to writing things in code, I like to do the same for Unity games, although the Unity editor and simulator are pretty good. Besides being comfortable declaring things in code, I find that code is easy to diff and organise. I also learn more how components work, because in Unity editor, most of important the components and properties are already wired and set up for us, so there‚Äôs some very obvious things that we don‚Äôt know. All the things we can do in the editor, we can express in code. Things like setting up components, transform anchor, animation, sound, ‚Ä¶ are all feasible in code and you only need to using the correct namespace. There‚Äôs lots of info at Welcome to the Unity Scripting Reference. Unity 2018 has Visual Studio Community so that‚Äôs pretty comfortable to write code. Javascript and CI would be extremely happy if Unity supports Kotlin or Swift, but for now only Javascript and C# are supported. I‚Äôm also a huge fan of pure Javascript, but I choose C# because of type safety, and also because C# was the language I studied at university for XNA and ASP.NET projects. IndentationIf you like 2 spaces indentation like me, you can go to Preferences in Visual Studio to change the editor settings GameObject and CanvasIn the Unity editor, try dragging an arbitrary UI element onto the screen, you can see that a Canvas and EventSystem are also created. These are GameObject that has a bunch of predefined Component . If we were to write this in code, we just need to follow the what is on the screen. In the beginning, we must use the editor to learn objects and properties, but later if we are familiar with Unity and its many GameObject , we can just code. Bear with me, it can be a hassle with code at first, but you surely learn a lot. I usually organise reusable code into files, let‚Äôs create a C# file and name it Sugar . For EventSystemand UI we need UnityEngine.EventSystems and using UnityEngine.UI namespaces. Here‚Äôs how to create EventSystem 12345678910111213141516171819public class Sugar { public GameObject makeEventSystem() { GameObject systemEventObject = new GameObject(\"EventSystem\"); EventSystem system = systemEventObject.AddComponent&lt;EventSystem&gt;(); system.sendNavigationEvents = true; StandaloneInputModule module = systemEventObject.AddComponent&lt;StandaloneInputModule&gt;(); module.horizontalAxis = \"Horizontal\"; module.verticalAxis = \"Vertical\"; module.submitButton = \"Submit\"; module.cancelButton = \"Cancel\"; module.inputActionsPerSecond = 10; module.repeatDelay = 0.5f; module.forceModuleActive = false; return systemEventObject; }} and Canvas 123456789101112131415161718public GameObject makeCanvas() { GameObject canvasObject= new GameObject(\"Canvas\"); Canvas canvas = canvasObject.AddComponent&lt;Canvas&gt;(); canvas.renderMode = RenderMode.WorldSpace; CanvasScaler scaler = canvasObject.AddComponent&lt;CanvasScaler&gt;(); scaler.scaleFactor = 10.0f; scaler.dynamicPixelsPerUnit = 10.0f; GraphicRaycaster graphic = canvasObject.AddComponent&lt;GraphicRaycaster&gt;(); canvasObject.GetComponent&lt;RectTransform&gt;().SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 3.0f); canvasObject.GetComponent&lt;RectTransform&gt;().SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 3.0f); return canvasObject;} and how to make some common UI elements 123456789101112131415161718192021222324252627282930313233343536373839public GameObject makeBackground(GameObject canvasObject) { GameObject backgroundObject = new GameObject(\"Background\"); backgroundObject.AddComponent&lt;CanvasRenderer&gt;(); Image image = backgroundObject.AddComponent&lt;Image&gt;(); image.color = Color.green; backgroundObject.transform.SetParent(canvasObject.transform, false); return backgroundObject;}public GameObject makeLogo(GameObject parentObject) { GameObject logoObject = new GameObject(\"Logo\"); logoObject.AddComponent&lt;CanvasRenderer&gt;(); Image image = logoObject.AddComponent&lt;Image&gt;(); image.color = Color.red; logoObject.transform.SetParent(parentObject.transform, false); return logoObject;}public GameObject makeButton(String title, GameObject parentObject) { GameObject buttonObject = new GameObject(title + \" Button\"); buttonObject.AddComponent&lt;CanvasRenderer&gt;(); GameObject textObject = new GameObject(\"Text\"); textObject.AddComponent&lt;CanvasRenderer&gt;(); Text text = textObject.AddComponent&lt;Text&gt;(); text.text = title; textObject.transform.SetParent(buttonObject.transform, false); buttonObject.transform.SetParent(parentObject.transform, false); return buttonObject;} Now create an empty GameObject in your Scene and add a Script component to this GameObject . You can reference code in your Sugar.cs without any problem 12345678910111213141516171819202122public class MenuScript : MonoBehaviour { // Use this for initialization void Start () { setup(); } // Update is called once per frame void Update () { } private void setup() { Sugar sugar = new Sugar(); GameObject canvasObject = sugar.makeCanvas(); GameObject eventSystemObject = sugar.makeEventSystem(); GameObject backgroundObject = sugar.makeBackground(canvasObject); GameObject startButton = sugar.makeButton(\"Start\", canvasObject); GameObject highScoresButton = sugar.makeButton(\"High Scores\", canvasObject); }} Where to go from here Creating UI elements from scripting: another way is to use Prefabs and Instantiate function in C# to easily reference and construct elements 2D Game Creation: official Unity tutorials for making 2D games.","link":"/blog/How-to-make-Unity-games-in-pure-C/"},{"title":"How to make carousel layout for UICollectionView in iOS","text":"Issue #302 Based on AnimatedCollectionViewLayout1234567891011121314151617181920212223242526272829303132333435363738394041final class CarouselLayout: UICollectionViewFlowLayout { override func layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]? { guard let attributes = super.layoutAttributesForElements(in: rect) else { return nil } guard let collectionView = collectionView else { return nil } return attributes.map({ transform(collectionView: collectionView, attribute: $0) }) } override func shouldInvalidateLayout(forBoundsChange newBounds: CGRect) -&gt; Bool { return true } private func transform(collectionView: UICollectionView, attribute: UICollectionViewLayoutAttributes) -&gt; UICollectionViewLayoutAttributes { let a = attribute let width = collectionView.frame.size.width let itemOffset = a.center.x - collectionView.contentOffset.x let middleOffset = (itemOffset / width) - 0.5 change( width: collectionView.frame.size.width, attribute: attribute, middleOffset: middleOffset ) return attribute } private func change(width: CGFloat, attribute: UICollectionViewLayoutAttributes, middleOffset: CGFloat) { let alpha: CGFloat = 0.8 let itemSpacing: CGFloat = 0.21 let scale: CGFloat = 1.0 let scaleFactor = scale - 0.1 * abs(middleOffset) let scaleTransform = CGAffineTransform(scaleX: scaleFactor, y: scaleFactor) let translationX = -(width * itemSpacing * middleOffset) let translationTransform = CGAffineTransform(translationX: translationX, y: 0) attribute.alpha = 1.0 - abs(middleOffset) + alpha attribute.transform = translationTransform.concatenating(scaleTransform) }} How to use 123456let layout = CarouselLayout()layout.scrollDirection = .horizontallayout.sectionInset = .zerolayout.minimumInteritemSpacing = 0layout.minimumLineSpacing = 0 We can inset cell content and use let scale: CGFloat = 1.0 to avoid scaling down center cell Based on CityCollectionViewFlowLayout123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131import UIKitclass CityCollectionViewFlowLayout: UICollectionViewFlowLayout { fileprivate var lastCollectionViewSize: CGSize = CGSize.zero var scaleOffset: CGFloat = 200 var scaleFactor: CGFloat = 0.9 var alphaFactor: CGFloat = 0.3 var lineSpacing: CGFloat = 25.0 required init?(coder _: NSCoder) { fatalError() } init(itemSize: CGSize) { super.init() self.itemSize = itemSize minimumLineSpacing = lineSpacing scrollDirection = .horizontal } func setItemSize(itemSize: CGSize) { self.itemSize = itemSize } override func invalidateLayout(with context: UICollectionViewLayoutInvalidationContext) { super.invalidateLayout(with: context) guard let collectionView = self.collectionView else { return } if collectionView.bounds.size != lastCollectionViewSize { configureContentInset() lastCollectionViewSize = collectionView.bounds.size } } override func targetContentOffset(forProposedContentOffset proposedContentOffset: CGPoint, withScrollingVelocity velocity: CGPoint) -&gt; CGPoint { guard let collectionView = self.collectionView else { return proposedContentOffset } let proposedRect = CGRect(x: proposedContentOffset.x, y: 0, width: collectionView.bounds.width, height: collectionView.bounds.height) guard let layoutAttributes = self.layoutAttributesForElements(in: proposedRect) else { return proposedContentOffset } var candidateAttributes: UICollectionViewLayoutAttributes? let proposedContentOffsetCenterX = proposedContentOffset.x + collectionView.bounds.width / 2 for attributes in layoutAttributes { if attributes.representedElementCategory != .cell { continue } if candidateAttributes == nil { candidateAttributes = attributes continue } if abs(attributes.center.x - proposedContentOffsetCenterX) &lt; abs(candidateAttributes!.center.x - proposedContentOffsetCenterX) { candidateAttributes = attributes } } guard let aCandidateAttributes = candidateAttributes else { return proposedContentOffset } var newOffsetX = aCandidateAttributes.center.x - collectionView.bounds.size.width / 2 let offset = newOffsetX - collectionView.contentOffset.x if (velocity.x &lt; 0 &amp;&amp; offset &gt; 0) || (velocity.x &gt; 0 &amp;&amp; offset &lt; 0) { let pageWidth = itemSize.width + minimumLineSpacing newOffsetX += velocity.x &gt; 0 ? pageWidth : -pageWidth } return CGPoint(x: newOffsetX, y: proposedContentOffset.y) } override func shouldInvalidateLayout(forBoundsChange _: CGRect) -&gt; Bool { return true } override func layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]? { guard let collectionView = self.collectionView, let superAttributes = super.layoutAttributesForElements(in: rect) else { return super.layoutAttributesForElements(in: rect) } let contentOffset = collectionView.contentOffset let size = collectionView.bounds.size let visibleRect = CGRect(x: contentOffset.x, y: contentOffset.y, width: size.width, height: size.height) let visibleCenterX = visibleRect.midX guard case let newAttributesArray as [UICollectionViewLayoutAttributes] = NSArray(array: superAttributes, copyItems: true) else { return nil } newAttributesArray.forEach { let distanceFromCenter = visibleCenterX - $0.center.x let absDistanceFromCenter = min(abs(distanceFromCenter), self.scaleOffset) let scale = absDistanceFromCenter * (self.scaleFactor - 1) / self.scaleOffset + 1 $0.transform3D = CATransform3DScale(CATransform3DIdentity, scale, scale, 1) let alpha = absDistanceFromCenter * (self.alphaFactor - 1) / self.scaleOffset + 1 $0.alpha = alpha } return newAttributesArray } func configureContentInset() { guard let collectionView = self.collectionView else { return } let inset = collectionView.bounds.size.width / 2 - itemSize.width / 2 collectionView.contentInset = UIEdgeInsets.init(top: 0, left: inset, bottom: 0, right: inset) collectionView.contentOffset = CGPoint(x: -inset, y: 0) } func resetContentInset() { guard let collectionView = self.collectionView else { return } collectionView.contentInset = UIEdgeInsets.init(top: 0, left: 0, bottom: 0, right: 0) }}","link":"/blog/How-to-make-carousel-layout-for-UICollectionView-in-iOS/"},{"title":"How to make a simple resolver in Swift","text":"Issue #25 The Marvel worldAnt ManWe know Ant Man is Hank Pym 1234567891011121314struct AntManSuit { let name: String}struct HankPym { let suit = AntManSuit(name: \"Ant Man ID #101\") func fight() { print(\"Fighting with the suit named \" + suit.name) }}let hankPym = HankPym()hankPym.fight() Everytime HankPym is created, he always uses the Ant Man suit. This time he is so coupled to the role Ant Man More suitsWell, he does not have to be too dependent on the Ant Man suit. We know Hank Pym is a genius scientist, he has more suits to use. Let‚Äôs make it decoupled Using Dependency Injection 1234567891011121314151617181920212223protocol Suit { var name: String { get }}struct AntManSuit: Suit { let name: String}struct YellowJacketSuit: Suit { let name: String}struct HankPym { let suit: Suit func fight() { print(\"Fighting with the suit named \" + suit.name) }}let suit = YellowJacketSuit(name: \"Yellow Jacket ID #33\")let hankPym = HankPym(suit: suit)hankPym.fight() Now Hank Pym can be more flexible on which suit to use. Dependency InjectionThe technique we just saw is called Dependency Injection, in which Hank Pym does not need to create the Suit, it will be provided through constructor or property. Dependency Inversion PrincipleIn the first example, Hank Pym is dependent on the concrete implementation of the Suit In the second example, both Hank Pym and the suits are dependent on the Suit protocol. This way Hank Pym only knows about the Suit protocol, and future suits must be crafted to that it conforms to the Suit protocol This way the dependency is inverted High level modules should not depend upon low level modules. Both should depend upon abstractions. What is the high level policy? It is the abstractions that underlie the application, thetruths that do not vary when the details are changed Inversion of Control ContainerYou may ask yourself Why is Inversion of Control named that way? Framework vs libraryPeople said ‚Äúthe framework calls you but you call the library‚Äù Command line vs GUISee What is Inversion of Control? For example, in an old school menu, you might have: 123456print &quot;enter your name&quot;read nameprint &quot;enter your address&quot;read addressetc...store in database thereby controlling the flow of user interaction. In a GUI program or some such, instead we say 123when the user types in field a, store it in NAMEwhen the user types in field b, store it in ADDRESSwhen the user clicks the save button, call StoreInDatabase You how have a brief understanding of how IoC means IoC containerIn the 2nd example of the Suit protocol, you can see how there is a inversion of control. What if there is a container that contains all the Suit conformances? Let‚Äôs use my Resolver 1234567let resolver = Resolver()resolver.register { YellowJacketSuit(name: \"YellowJacket ID #404\") as Suit}let suit = try! resolver.resolve() as Suitlet hankPym = HankPym(suit: suit) Quite helpful, right? :] FeaturesActually, IoC container helps you more than that. Circular Dependency Injection Auto Injection Object Scope ‚Ä¶ There are some IoC containers in Swift Swinject12345let container = Container()container.register(AnimalType.self) { _ in Cat(name: \"Mimi\") }container.register(PersonType.self) { r in PetOwner(pet: r.resolve(AnimalType.self)!)} Swinject requires explicit type declaration. It has SwinjectStoryboard, which helps configuring the dependency for your view controller DipDip leverages generic and encourage protocols 12container.register { ServiceImp() as Service }let service = try! container.resolve() as Service You ‚Äòll learn a lot just by reading Dip source code, on how factory and factory type are stored and checked using generic 1234567891011public func resolve&lt;T, F&gt;(tag tag: Tag? = nil, builder: F-&gt;T) throws -&gt; T { let key = DefinitionKey(protocolType: T.self, factoryType: F.self, associatedTag: tag) let nilTagKey = tag.map { _ in DefinitionKey(protocolType: T.self, factoryType: F.self, associatedTag: nil) } guard let definition = (self.definitions[key] ?? self.definitions[nilTagKey]) as? DefinitionOf&lt;T, F&gt; else { throw DipError.DefinitionNotFound(key) } let usingKey: DefinitionKey? = definition.scope == .ObjectGraph ? key : nil return _resolve(tag, key: usingKey, definition: definition, builder: builder) } Build your own simple IoC containerYou may have discovered, that the idea of all those framework is to use closure as factory method 12345let factory = { YellowJacketSuit(name: \"YellowJacket ID #007\") as Suit}let suit = factory() All we have to do is to store these factories closure Take a look at my gist SimpleResolver.swift 1234567891011121314151617181920212223242526class SimpleResolver { var factories = [String: Any]() func factory&lt;T&gt;(factory: () -&gt; T) { let key = String(T.self) factories[key] = factory } func resolve&lt;T&gt;() -&gt; T { let key = String(T.self) if let factory = factories[key] as? () -&gt; T { return factory() } else { fatalError(\"Registration not found\") } }}let resolver = SimpleResolver()resolver.factory { YellowJacketSuit(name: \"YellowJacket IS #009\") as Suit}let suit = resolver.resolve() as Suitprint(suit.name) Reference Dependency Injection Framework for Swift - Introduction to Swinject IoC container in Swift swift-ioc Dip Typhoon","link":"/blog/How-to-make-a-simple-resolver-in-Swift/"},{"title":"How to make checked NSButton in AppKit","text":"Issue #433 Use Omnia for convenient style and isOn property 123let checkButton = NSButton(checkboxWithTitle: \"\", target: nil, action: nil)checkButton.stylePlain(title: \"Autosave\", color: R.color.text, font: R.font.text)checkButton.isOn = true","link":"/blog/How-to-make-checked-NSButton-in-AppKit/"},{"title":"How to make collaborative drawing canvas with socketio and node","text":"Issue #399 Client Use https://github.com/facebook/create-react-app App.js 123456789101112import React, { Component } from 'react';import logo from './logo.svg';import './App.css';import Main from './Main'class App extends Component { render() { return &lt;Main /&gt; }}export default App; Main.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485// @flowimport React from 'react';import PropTypes from 'prop-types';import { withStyles } from '@material-ui/core/styles';import AppBar from '@material-ui/core/AppBar';import Toolbar from '@material-ui/core/Toolbar';import Typography from '@material-ui/core/Typography';import Button from '@material-ui/core/Button';import IconButton from '@material-ui/core/IconButton';import MenuIcon from '@material-ui/icons/Menu';import Manager from './Manager'const styles = { root: { flexGrow: 1, }, grow: { flexGrow: 1, }, menuButton: { marginLeft: -12, marginRight: 20, },};class Main extends React.Component { static propTypes = { classes: PropTypes.object.isRequired, } render() { const { classes } = this.props; return ( &lt;div className={classes.root}&gt; &lt;AppBar position=\"static\"&gt; &lt;Toolbar&gt; &lt;IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\"&gt; &lt;MenuIcon /&gt; &lt;/IconButton&gt; &lt;Typography variant=\"h6\" color=\"inherit\" className={classes.grow}&gt; Collaborate Canvas &lt;/Typography&gt; &lt;Button color=\"inherit\" onClick={this.onImagePress} &gt;Image&lt;/Button&gt; &lt;Button color=\"inherit\" onClick={this.onClearPress} &gt;Clear&lt;/Button&gt; &lt;input ref=\"fileInput\" type=\"file\" id=\"myFile\" multiple accept=\"image/*\" style={{display: 'none'}} onChange={this.handleFiles}&gt;&lt;/input&gt; &lt;/Toolbar&gt; &lt;/AppBar&gt; &lt;canvas ref=\"canvas\" with=\"1000\" height=\"1000\"&gt;&lt;/canvas&gt; &lt;/div&gt; ) } componentDidMount() { const canvas = this.refs.canvas this.manager = new Manager(canvas) this.manager.connect() } onImagePress = () =&gt; { const fileInput = this.refs.fileInput fileInput.click() } onClearPress = () =&gt; { this.manager.clear() } handleFiles = (e) =&gt; { e.persist() const canvas = this.refs.canvas const context = canvas.getContext('2d') const file = e.target.files[0] var image = new Image() image.onload = function() { context.drawImage(image, 0, 0, window.innerWidth, window.innerHeight) } image.src = URL.createObjectURL(file) }}export default withStyles(styles)(Main); ServerUse express and socket.io index.js 123456789101112131415161718192021222324252627282930313233343536// @flowconst express = require('express')const app = express()const http = require('http')const socketIO = require('socket.io')const server = http.createServer(app)const io = socketIO.listen(server)server.listen(3001)app.use(express.static(__dirname + '/public'))console.log(\"Server running on 127.0.0.1:8080\")let lines = []io.on('connection', (socket) =&gt; { lines.forEach((line) =&gt; { const data = { line } socket.emit('draw_line', data) }) socket.on('draw_line', (data) =&gt; { const { line } = data lines.push(line) io.emit('draw_line', data) }) socket.on('clear', () =&gt; { lines = [] io.emit('clear') }) socket.on('draw_image', (data) =&gt; { io.emit('draw_image', data) })})","link":"/blog/How-to-make-collaborative-drawing-canvas-with-socketio-and-node/"},{"title":"Best places to learn iOS development","text":"Issue #278 Original post https://medium.com/fantageek/best-places-to-learn-ios-development-85ebebe890cf It‚Äôs good to be software engineers, when you get paid to do what you like best. The good thing about software development is it ‚Äòs changing fast, and challenging. This is also the not good thing, when you need to continuously learn and adapt to keep up with the trends. This is for those who have been iOS developers for some time. If you have a lot of free time to spend, then congratulations. If you do not, you know the luxury of free time, then it‚Äôs time to learn wisely, by selecting only the good resources. But where should I learn from? Welcome to the technology age, where there are tons to things to keep track of, iOS releases, SDK, 3rd frameworks, build tools, patterns, ‚Ä¶ Here are my list that I tend to open very often. It is opinionated and date aware. If it was several years ago, then http://nshipster.com/, https://www.objc.io/ should be in the top of the list. I like to keep track of stuff, via my lists https://github.com/onmyway133/fantastic-ios, https://github.com/onmyway133/fantastic-ios-architecture, https://github.com/onmyway133/fantastic-ios-animation. Also you should use services like https://feedly.com/ to organise your subscription feed. The point of this is for continuous learning, so it should be succinct. There is no particular order. 1. RaywenderlichRay Wenderlich | High quality programming tutorials: iOS, Android, Swift, Kotlin, Unity, and morePassword Autofill allows our apps to automatically populate the username and password and believe it or not, it only‚Ä¶www.raywenderlich.com This is probably one of the most visited site for learning iOS development. All the tutorials are well designed and easy to follow. If you can, you can subscribe to videos https://videos.raywenderlich.com/courses. I myself find watching video much more relaxing. And the team is reviving its Podcast https://www.raywenderlich.com/rwpodcast which I really recommend 2. Swift TalkSwift Talk ¬∑ objc.ioWe use the child view controller we created last time to factor out more code from the large view controller.talk.objc.io The people behind objc.io started their swift talks last year. I‚Äôm a fan of clean code, so these talks are really helpful when they show how to organise and write code. Also, they have awesome guests from some companies too. 3. NSScreencastIf you have less time, then this is great option. These covers many aspects of the iOS SDKs, and the videos are weekly.NSScreencast: Bite-sized Screencasts for iOS DevelopmentQuality videos on iOS development, released each week.nsscreencast.com 4. Swift By SundellI actually learn a lot from reading John ‚Äòs blog. He shows various tips on iOS programming and the Swift language. Also his podcast is a must subscribe https://www.swiftbysundell.com/podcast/. I‚Äôve listened to many podcasts, but I like this best.All postsLike many abstractions and patterns in programming, the goal of the builder pattern is to reduce the need to keep‚Ä¶www.swiftbysundell.com 5. AppCodaI like this because the content is short, and focused. I can easily follow and grasp the gist immediately. And it has large collection of various contents.AppCoda - Learn Swift &amp; iOS Programming by DoingAppCoda is an educational startup that focuses on teaching people how to learn Swift &amp; iOS programming blog. Our‚Ä¶www.appcoda.com 6. Use Your LoafThis has updated posts for every new SDK features. Also, the content is short and to the points. It‚Äôs like wikipedia for iOS development.Use Your LoafIf you are upgrading to Xcode 10 and migrating to Swift 4.2 you are likely to see a number of errors because Swift 4.2‚Ä¶useyourloaf.com 7. iOS GoodiesThe number of newsletters now is like stars on the sky. Among them I like iOS Goodies the best. It is driven by community https://github.com/iOS-Goodies/iOS-Goodies and contains lots of new awesome stuff each week.iOS Goodiesweekly iOS newsletter curated by Marius Constantinescu logo by Jos√© Torre founded by Rui Peres and Tiago Almeidaios-goodies.com 8. Erica SadunThis is a bit advanced where it discusses Swift languages. But it‚Äôs good to read if you want to get yourself to know more about hidden language features.Erica SadunRecently, some of my simulators launched and loaded just fine. Others simply went black. It didn‚Äôt seem to matter which‚Ä¶ericasadun.com 9. SwiftingI just discovered this recently, but I kinda like the blog. The number of posts are growing, and those are good reads about iOS SDKs.swifting.ioOur dear friend and a founder of swifting.io - Micha≈Ç, had an accident two months ago. He had a bad luck and got hit by‚Ä¶swifting.io 10. KhanlouI learn many good patterns and clean code from reading this blog. He suggests many ideas on refactoring code. Really recommend.KhanlouTo convert this into an infinite collection, we need to think about a few things. First, how will we represent an index‚Ä¶khanlou.com 11. Ole BegemannThis has been in my favorite list for a long time. Although this is a bit advanced, it is good to dive deep into Swift.Articles - Ole BegemannEdit descriptionoleb.net 12. Krzysztof Zab≈ÇockiThis is my favorite, too. This shows many practical advices for iOS development. He also talks about build tool that I really like.PostsHave you ever written tests? Usually, they use equality asserts, e.g. XCTAssertEqual, what happens if the object isn‚Äôt‚Ä¶merowing.info 13. Realm NewsRealm collects a huge collection of iOS videos from conferences and meet ups, and it has transcripts too. It‚Äôs more than enough to fill your free time.Realm Academy - Expert content from the mobile expertsDeveloper videos, articles and tutorials from top conferences, top authors, and community leaders.academy.realm.io 14. Big Nerd RanchThis has posts in both iOS and Android. But I really like the contents, very good.App Development and Design Blog | Big Nerd RanchOur blog offers app development and design tutorials, tips and tricks for software engineering and insights for team‚Ä¶www.bignerdranch.com 15. Cocoa with LoveThis is very advanced, and suitable for hardcore fans. I feel small when reading the posts.Cocoa with LoveThe upcoming CwlViews library offers a syntax for constructing views that has a profound effect on the Cocoa‚Ä¶www.cocoawithlove.com 16. Atomic SpinI really enjoy reading blog posts from Atomic Object. There are posts for many platforms, and about life, so you need to filter for iOS development.Atomic SpinMore and more studies have shown that the most effective teams are the ones whose members trust each other and feel‚Ä¶spin.atomicobject.com 17. RaizlabsThis has very good articles about iOS. Highly recommend.React Native Animations: Part 2 - RaizException - Raizlabs Developer BlogWhen we build apps for our clients, beautiful designs and interactions are important. But equally important is‚Ä¶www.raizlabs.com 18. Invasive CodeThis has topics for many iOS features. All the contents are good and succinct.iOS Development - Computer Vision iOS AppsComputer Vision iOS Appswww.invasivecode.com 19. Think and BuildI like posts about animation and replicating app features. This has all of them. http://www.thinkandbuild.it/ 20. Little Bites of CocoaThis has a series of small tips, on how to use iOS SDKs and other 3rd frameworks. Good to know.Little Bites of Cocoa - Tips and techniques for iOS and Mac development - Weekday mornings at 9:42‚Ä¶Tips and techniques for iOS and Mac development - Weekday mornings at 9:42 AM. The goal of each of these ‚Äòbites‚Äô is to‚Ä¶littlebitesofcocoa.com 21. Samwize ()All the posts are good, short and to the points. Really like this.@samwize¬Ø_(„ÉÑ)_/¬Øsamwize.com I think that‚Äôs enough. Feel free to share and suggest other awesome blogs that I might miss. Also, it‚Äôs good to contribute back to community by writing your blog posts. You will learn a lot by sharing.","link":"/blog/Best-places-to-learn-iOS-development/"},{"title":"Collection Update","text":"Issue #119 This is about collection update, how to provide correct IndexPath and a simple diffing algorithm Excerpt from my talk at CocoaHeads, Oslo https://www.meetup.com/CocoaHeads-Oslo/events/244892347/ Slide https://speakerdeck.com/onmyway133/collection-update CollectionViewIt‚Äôs hard to imagine of any apps that don‚Äôt use Table View or CollectionView. And by CollectionView, I actually mean UICollectionView üòâ . Most of the time, we show something with response from backend, then potentially update and insert new items as data changed. We can totally call reloadData to reflect the changes, but an animation is better here as it gives user better understanding of what‚Äôs going on, and to not surprise them. This talks about UICollectionView, but UITableView behaves the same Drag and DropLet‚Äôs imagine an app where user are allowed to customise their experience by moving items from one collection to another. You can take a look at the example DragAndDrop which is using the new drag and drop API in iOS 11. You must ensure that your data is changed before calling update methods on UICollectionView. And then we call deleteItems and insertItems to reflect data changes. UICollectionView performs a nice animation for you 12345678910111213func collectionView(_ collectionView: UICollectionView, performDropWith coordinator: UICollectionViewDropCoordinator) { let destinationIndexPath = coordinator.destinationIndexPath let sourceIndexPath = coordinator.items.last?.dragItem.localObject as! IndexPath // remove sourceItems.remove(at: sourceIndexPath.item) sourceCollectionView.deleteItems(at: [sourceIndexPath]) // insert destinationItems.insert(draggedItem, at: destinationIndexPath.item) destinationCollectionView.insertItems(at: [destinationIndexPath])} NSInternalInconsistencyExceptionIf you have large number of items with many insertions and deletions from backend response, you need to calculate the correct IndexPath to call, which are not easy thing. Most the time you will get the following crashes Terminating app due to uncaught exception ‚ÄòNSInternalInconsistencyException‚Äô,reason: ‚ÄòInvalid update: invalid number of items in section 0.The number of items contained in an existing section after the update (213)must be equal to the number of items contained in that section beforethe update (154), plus or minus the number of items inserted ordeleted from that section (40 inserted, 0 deleted) and plusor minus the number of items moved into or out ofthat section (0 moved in, 0 moved out).‚Äô In my experience it happened randomly because everyone has different data. Although the message is very descriptive, it may take a while to figure it out. Game of IndexPathLet‚Äôs refine our knowledge of IndexPath by going through some examples. With a collection of 6 items, we perform some update operations and figure out what IndexPath should be. 1items = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] Take a look at my example here CollectionUpdateExample, there are many more examples index vs offsetBefore we go any further, I just want to mention that, by index I actually mean offset from the start. If you take a look at the enumerated function, it suggests the name as offset instead of index 123Array(0..&lt;10).enumerated().forEach { (offset, element) in} This zero based numbering could shed some light on this matter Particularly in C, where arrays are closely tied to pointer arithmetic, this makes for a simpler implementation: the subscript refers to an offset from the starting position of an array, so the first element has an offset of zero. 1. Insert 3 items at the end123456items.append(contentsOf: [\"g\", \"h\", \"i\"])// a, b, c, d, e, f, g, h, ilet indexPaths = Array(6...8).map { IndexPath(item: $0, section: 0) }collectionView.insertItems(at: indexPaths) 2. Delete 3 items at the end12345678items.removeLast()items.removeLast()items.removeLast()// a, b, clet indexPaths = Array(3...5).map { IndexPath(item: $0, section: 0) }collectionView.deleteItems(at: indexPaths) 3. Update item at index 2123456items[2] = \"üëª\"// a, b, üëª, d, e, flet indexPath = IndexPath(item: 2, section: 0)collectionView.reloadItems(at: [indexPath]) 4. Move item ‚Äúc‚Äù to the end123456789items.remove(at: 2)items.append(\"c\")// a, b, d, e, f, ccollectionView.moveItem( at: IndexPath(item: 2, section: 0), to: IndexPath(item: 5, section :0)) 5. Delete 3 items at the beginning, then insert 3 items at the endWith multiple different operations, we should use performBatchUpdates You can use this method in cases where you want to make multiple changes to the collection view in one single animated operation, as opposed to in several separate animations. You might use this method to insert, delete, reload, or move cells or use it to change the layout parameters associated with one or more cells 123456789101112131415items.removeFirst()items.removeFirst()items.removeFirst()items.append(contentsOf: [\"g\", \"h\", \"i\"])// d, e, f, g, h, icollectionView.performBatchUpdates({ let deleteIndexPaths = Array(0...2).map { IndexPath(item: $0, section: 0) } collectionView.deleteItems(at: deleteIndexPaths) let insertIndexPaths = Array(3...5).map { IndexPath(item: $0, section: 0) } collectionView.insertItems(at: insertIndexPaths)}, completion: nil) 6. Insert 3 items at the end, then delete 3 items beginning123456789101112131415items.append(contentsOf: [\"g\", \"h\", \"i\"])items.removeFirst()items.removeFirst()items.removeFirst()// d, e, f, g, h, icollectionView.performBatchUpdates({ let insertIndexPaths = Array(6...8).map { IndexPath(item: $0, section: 0) } collectionView.insertItems(at: insertIndexPaths) let deleteIndexPaths = Array(0...2).map { IndexPath(item: $0, section: 0) } collectionView.deleteItems(at: deleteIndexPaths)}, completion: nil) üôÄIf you run the example 6, you will get a crash 1234Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'attempt to insert item 6 into section 0, but there are only 6 items in section 0 after the update' performBatchUpdatesIt is because the way performBatchUpdates works. If you take a look at the documentation Deletes are processed before inserts in batch operations. This means the indexes for the deletions are processed relative to the indexes of the collection view‚Äôs state before the batch operation, and the indexes for the insertions are processed relative to the indexes of the state after all the deletions in the batch operation. No matter how we call insert or delete, performBatchUpdates always performs deletions first. So we need to call deleteItems and insertItems as if the deletions occur first. 123456789101112131415items.append(contentsOf: [\"g\", \"h\", \"i\"])items.removeFirst()items.removeFirst()items.removeFirst()// d, e, f, g, h, icollectionView.performBatchUpdates({ let deleteIndexPaths = Array(0...2).map { IndexPath(item: $0, section: 0) } collectionView.deleteItems(at: deleteIndexPaths) let insertIndexPaths = Array(3...5).map { IndexPath(item: $0, section: 0) } collectionView.insertItems(at: insertIndexPaths)}, completion: nil) OperationsThere are many operations on UICollectionView, and there are operations to update whole section as well. Take a look Ordering of Operations and Index Paths 12345insertItems(at indexPaths: [IndexPath])deleteItems(at indexPaths: [IndexPath])reloadItems(at indexPaths: [IndexPath])moveItem(at indexPath: IndexPath, to newIndexPath: IndexPath)performBatchUpdates(_ updates, completion) 1234insertSections(_ sections: IndexSet)deleteSections(_ sections: IndexSet)reloadSections(_ sections: IndexSet)moveSection(_ section: Int, toSection newSection: Int) Edit distanceDoing these calculations by hand is quite tedious and error prone. We can build our own abstraction using some algorithms. The naive one is Wagner‚ÄìFischer algorithm which uses Dynamic Programming to tell the edit distance between two strings of characters. Edit distance means the number of steps needed to change from one string to another. String is just a collection of characters, so we can generalise this concept to make it work for any collection of items. Instead of comparing character, we require items to conform to Equatable ‚Äúkit‚Äù -&gt; ‚Äúkat‚ÄùHow can we transform form the word ‚Äúkit‚Äù to ‚Äúkat‚Äù? What kinds of operations do we nede to perform? You may tell ‚Äújust change the i to a‚Äù, but this trivial example helps you understand the algorithm. Let‚Äôs get started. DeletionsIf we go from ‚Äúkit‚Äù to an empty string ‚Äú‚Äù, we need 3 deletions ‚Äúk‚Äù -&gt; ‚Äú‚Äù üëâ 1 deletion‚Äúki‚Äù -&gt; ‚Äú‚Äù üëâ 2 deletions‚Äúkit‚Äù -&gt; ‚Äú‚Äù üëâ 3 deletions InsertionsIf we go from an empty string ‚Äú‚Äù to ‚Äúkat‚Äù, we need 3 insertions ‚Äú‚Äù -&gt; ‚Äúk‚Äù üëâ 1 insertion‚Äú‚Äù -&gt; ‚Äúka‚Äù üëâ 2 insertions‚Äú‚Äù -&gt; ‚Äúkat‚Äù üëâ 3 insertions If equal, take value from the top leftYou can think of the algorithm as if we go from source string, to empty string, to destination string. We try to find the minimum steps to update. Going horizontally means insertions, vertically means deletions and diagonally means substitutions This way we can build our matrix, iterate from row to row, column by column. First, the letter ‚Äúk‚Äù from source collection is the same with letter ‚Äúk‚Äù from destination collection, we simply take value from the top left, which is 0 substituion If not equalWe continue with the next letter from the destination collection. Here ‚Äúk‚Äù and ‚Äúa‚Äù are not the same. We take minimum value from left, top, top left. Then increase by one Here we take value from left, which is horizontally, so we increase by 1 insertion ‚Äúk‚Äù -&gt; ‚Äúkat‚Äù üëâ 2 insertionsContinue, they are not the same, so we take value from left horizontally. Here you can see it kind makes sense, as to go from ‚Äúk‚Äù to ‚Äúkat‚Äù, we need 2 insertions, which is to insert letters ‚Äúa‚Äù and ‚Äút‚Äù The bottom right valueContinue with the next row, and next row until we got to the bottom right value, which gives you the edit distance. Here 1 substitution means that we need to perform 1 substitution to go from ‚Äúkit‚Äù to ‚Äúkat‚Äù, which is update ‚Äúi‚Äù with ‚Äúa‚Äô You can easily see that we need to update index 1. But how do we know that it is index 1 ü§î Edit stepsIn each step, we need to associate the index of item in source and destination collection. You can take a look at my implementation DeepDiff ComplexityWe iterate through the matrix, with m and n are the length of source and destination collection respectively, we can see that the complexity of this algorithm is 0(mn). Also the performance greatly depends on the size of the collection and how complex the item is. The more complex and how deep you want to perform Equatable can greatly affect your performance. Improving performanceThe section How does it work shows several ways we can improve performance. Firstly, instead of building a matrix, which costs memory m*n, we can just use temporary arrays as holder. Secondly, to quickly compare 2 items, we can use Hashable, as 2 identical items will always have the same hash. More performanceIf you want better performance, then algorithms with linear complexity may be interested to you. Take a look at Diff algorithm Heckel Wu Myers","link":"/blog/Collection-Update/"},{"title":"20 recommended utility apps for macOS","text":"Issue #274 Original post https://hackernoon.com/20-recommended-utility-apps-for-macos-in-2018-ea494b4db72b Depending on the need, we have different apps on the mac. As someone who worked mostly with development, below are my indispensable apps. They are like suits to Tony Stark. Since I love open source apps, they have higher priority in the list. Open source appsiTerm 2 https://www.iterm2.com/ iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.10 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted. iTerm2 has good integration with tmux and supports Split Panes Term2 allows you to divide a tab into many rectangular ‚Äúpanes‚Äù, each of which is a different terminal session. The shortcuts cmd-d and cmd-shift-d divide an existing session vertically or horizontally, respectively. You can navigate among split panes with cmd-opt-arrow or cmd-[ and cmd-]. You can ‚Äúmaximize‚Äù the current pane ‚Äî hiding all others in that tab ‚Äî with cmd-shift-enter. Pressing the shortcut again restores the hidden panes. There‚Äôs the_silver_searcher with ag command to quickly search for files oh-my-zsh https://github.com/robbyrussell/oh-my-zsh A delightful community-driven (with 1,200+ contributors) framework for managing your zsh configuration. Includes 200+ optional plugins (rails, git, OSX, hub, capistrano, brew, ant, php, python, etc), over 140 themes to spice up your morning, and an auto-update tool so that makes it easy to keep up with the latest updates from the community. I use z shell with oh-my-zsh plugins. I also use zsh-autocompletions to have autocompletion like fish shell and z to track and quickly navigate to the most used directories. spectacle https://github.com/eczarny/spectacle Spectacle allows you to organize your windows without using a mouse. With spectable, I can organise windows easily with just Cmd+Option+F or Cmd+Option+Left insomnia https://github.com/getinsomnia/insomnia Insomnia is a cross-platform REST client, built on top of Electron. Regardless if you like electron.js apps or not. This is a great tool for testing REST requets Visual Studio Code https://github.com/Microsoft/vscode VS Code is a new type of tool that combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. Code provides comprehensive editing and debugging support, an extensibility model, and lightweight integration with existing tools. This seems to be the most popular for front end development, and many other things. There‚Äôs bunch of extensions that make the experience to a new level. IconGenerator https://github.com/onmyway133/IconGeneratorBuilt by me. When developing iOS, Android and macOS applications, I need a quick way to generate icons in different sizes. You can simply drag the generated asset into Xcode and that‚Äôs it. vmd https://github.com/yoshuawuyts/vmd Preview markdown files in a separate window. Markdown is formatted exactly the same as on GitHub. colorpicker https://github.com/Toinane/colorpicker A mininal but complete colorpicker desktop app I used to use Sip but I often get the problem of losing focus. GifCapture https://github.com/onmyway133/GifCaptureI built this as a native macOS app to capture screen and save to gif file. It works like Licecap but open source. There‚Äôs also an open source tool called kap that is slick. Itsycal https://github.com/sfsam/Itsycal Itsycal is a tiny calendar for your Mac‚Äôs menu bar. The app is minimal and works very well. It can shows calendar for integrated accounts in the mac. PushNotifications https://github.com/onmyway133/PushNotificationsI often need to test push notification to iOS and Android apps. And I want to support both certificate and key p8 authentication for Apple Push Notification service, so I built this tool. Lyrics https://github.com/onmyway133/Lyrics A menu bar app to show the lyric of the playing Spotify song When I listen to some songs in Spotify, I want to see the lyrics too. The lyrics is fetched from https://genius.com/ and displayed in a wonderful UI. gitify https://github.com/manosim/gitify GitHub Notifications on your desktop. I use this to get real time notification for issues and pull requests for projects on GitHub. I hope there is support for Bitbucket soon. FinderGo https://github.com/onmyway133/FinderGoFinderGo is both a native macOS app and a Finder extension. It has toolbar button that opens terminal right within Finder in the current directory. You can configure it to open either Terminal, iTerm2 or Hyper Atom one dark themeThis is about theme. There is the very popular dracular themes, but I find it too strong for the eyes. I don‚Äôt use Atom, but I love its one dark UI. I used to maintain my own theme for Xcode called DarkSide but now I use xcode-one-dark for Xcode and Atom One Dark Theme for Visual Studio Code. I also use Fira Code font in Xcode, Visual Studio Code and Android Studio, which has beautiful ligatures. Chrome extensionsI use Chrome for its speed and wonderful support for extensions. The extensions I made are github-chat to enable chat within GitHub and github-extended to see more pinned repositories. There are also refined github, github-repo-size and octotree that are indispensable for me. caprine https://github.com/sindresorhus/caprine Caprine is an unofficial and privacy focused Facebook Messenger app with many useful features. Close source and commercial appsSublime Text https://www.sublimetext.com/ Sublime Text is a sophisticated text editor for code, markup and prose. You‚Äôll love the slick user interface, extraordinary features and amazing performance. Sublime Text is simply fast and the editing experience is very good. I‚Äôve used Atom but it is too slow. Sublime Merge https://www.sublimemerge.com/ Meet a new Git client, from the makers of Sublime Text Sublime Merge never lets me down. The source control app is simply very quick. I used SourceTree in the past, but it is very slow and had problem with authentication to Bitbucket and GitHub, and it halts very often for React Native apps, which has lots of node modules committed. 1 Password https://1password.com/ 1Password remembers them all for you. Save your passwords and log in to sites with a single click. It‚Äôs that simple. Everyone need strong and unique passwords these day. This tool is indispensable Monosnap https://monosnap.com/welcome Make screenshots. Draw on it. Shoot video and share your files. It‚Äôs fast, easy and free. I haven‚Äôt found a good open source alternative, this is good in capturing screen or portion of the screen. VLC https://www.videolan.org/index.nb.htmliTunes or Quick Time has problem with some video codecs. This app VLC can play all kinds of video types. Xcode https://developer.apple.com/xcode/Xcode is the go to editor for iOS developer. The current version is Xcode 10. From Xcode 8, plugins are not supported. The way to go is Xcode extensions. I have developed XcodeColorSense2 to easily recognise hex colors, and XcodeWay to easily navigate to many places right from Xcode Sketch https://www.sketchapp.com/ Sketch is a design toolkit built to help you create your best work ‚Äî from your earliest ideas, through to final artwork. Sketch is the most favorite design tool these days. There are many cool plugins for it. I use Sketch-Action and User Flows Where to go from hereI hope you find some new tools to try. If you know other awesome tools, feel free to make a comment. Here are some more links to discover further Electron apps The best Mac apps of 2018 Best Open Source Tools For Developers open-source-mac-os-apps","link":"/blog/20-recommended-utility-apps-for-macOS/"},{"title":"Curry in Swift and Javascript","text":"Issue #185 You may encounter curry in everyday code without knowing it. Here is a bit of my reflections on curry and how to apply it in Javascript and Swift. Taking one parameter in HaskellIn Haskell, all function officially takes only 1 parameter. Function with many parameters are just curried, which means they will be partially applied. Calling sum 1 just returns a function with 1 parameter, then 2is passed into this function. The following 2 function calls are the same. ghci&gt; sum 1 2 3 ghci&gt; (max 1) 2 3I tend to think of curried function or partially applied function as something that carry dependencies at each application step. Each curried function can be assigned to variable or pass around, or as returned value. Curry in Swift for predicateWhen I was trying to make my own Signal library, I have and Event filterThen there should be a filter for Signal. The idea of filter is that we should update signal if the Event is Next with right filtered value public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt;{ let signal = Signal&lt;T&gt;() subscribe { result in switch(result) { case let .Success(value): if f(value) { signal.update(result) } case let .Error(error): signal.update(.Error(error)) } } return signal }2 parametersBut having Event as another monad, I think it should be more encapsulated if that switching logic gets moved into the Event. Here the filter takes 2 params Event.swift func filter(f: T -&gt; Bool, callback: (Event&lt;T&gt; -&gt; Void)) { switch self { case let .Next(value) where f(value): callback(self) case .Failed: callback(self) default: break } }Signal.swift public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt; { let signal = Signal&lt;T&gt;() subscribe { event in event.filter(f, callback: signal.update) } return signal }CurryingWith currying, we can make filter a more abstract function, and defer the decision to pass the callback param. It is a little carried away but I find it helpful this way Now filter accepts 1 param, and it returns a function that takes callback as its param Event.swift func filter(f: T -&gt; Bool) -&gt; ((Event&lt;T&gt; -&gt; Void) -&gt; Void) { return { g in switch self { case let .Next(value) where f(value): g(self) case .Failed: g(self) default: break } } }Signal.swift public func filter(f: T -&gt; Bool) -&gt; Signal&lt;T&gt; { let signal = Signal&lt;T&gt;() subscribe { event in event.filter(f)(signal.update) } return signal }Curry syntax in Swift 2 and aboveSwift 2 supports curry syntax function func sum(a: Int)(b: Int) -&gt; Int { return a + b } let sumWith5 = sum(5) let result = sumWith5(b: 10)Unfortunately, the syntactic sugar for declaring curry has been dropped since Swift 3. You may want to find out in Bidding farewell to currying. But it‚Äôs not a big deal as we can easily create curry function. It is just a function that returns another function. Using curry for partial application in UIKitI used this curry technique in my Xkcd app. See MainController.swift. MainController is vanilla UITabBarController with ComicsController and FavoriteController , all embedded in UINavigationViewController . The feature is that when a comic is selected, a comic detail screen should be pushed on top of the navigation stack. For example in ComicsController /// Called when a comic is selected var selectComic: ((Comic) -&gt; Void)?All ComicsController needs to know is to call that selectComic closure with the chosen Comic, and someone should know how to handle that selection. Back to the handleFlow function inside MainController. private func handleFlow() { typealias Function = (UINavigationController) -&gt; (Comic) -&gt; Void let selectComic: Function = { [weak self] navigationController in return { (comic: Comic) in guard let self = self else { return } let detailController = self.makeDetail(comic: comic) navigationController.pushViewController(detailController, animated: true) } } comicsController.selectComic = selectComic(comicNavigationController) favoriteController.selectComic = selectComic(favoriteNavigationController) }I declared Function as typealias to explicitly state the curry function that we are going to build typealias Function = (UINavigationController) -&gt; (Comic) -&gt; VoidWe build selectComic as curried function, that takes UINavigationViewController and returns a function that takes Comic and returns Void . This way when we partially apply selectComic with the a navigationController , we get another function that has navigationController as dependency, and ready to be assigned to selectComic property in comicsController . Curry promised function in JavascriptI like to work with Promise and async/await in Javascript. It allows chainable style and easy to reason about. So when working with callbacks in Javascript, for example callback from native modules in React Native, I tend to convert them into Promise. For example when working with HealthKit, we need to expose a native modules around it // [@flow](http://twitter.com/flow) import { NativeModules } from &apos;react-native&apos; type HealthManagerType = { checkAuthorisation: ((string) =&gt; void)) =&gt; void, authorise: ((boolean) =&gt; void)) =&gt; void, readWorkout: (Date, Date, () =&gt; void)) =&gt; void, readDailySummary: (Date, Date, () =&gt; void)) =&gt; void, readMeasurement: (Date, Date, () =&gt; void)) =&gt; void } const HealthManager: HealthManagerType = NativeModules.HealthManager export default HealthManagerWe can build a toPromise function that can convert a function with callback into Promise // [@flow](http://twitter.com/flow) const toPromise = (f: (any) =&gt; void) =&gt; { return new Promise&lt;any&gt;((resolve, reject) =&gt; { try { f((result) =&gt; { resolve(result) }) } catch (e) { reject(e) } }) } export default toPromiseHowever, as you can see in the signature, it only works with a callback of type (any) =&gt; void In other words, this callback must have exactly 1 parameter, because a Promise can either returns a value or throws an error. To remedy this, we can build a curry function that can turns function with either 1, 2, 3 parameters into curried function. Thanks to the dynamic nature of Javascript, we have // [@flow](http://twitter.com/flow) function curry0(f: () =&gt; void) { return f() } function curry1(f: (any) =&gt; void) { return (p1: any) =&gt; { return f(p1) } } function curry2(f: (any, any) =&gt; void) { return (p1: any) =&gt; { return (p2: any) =&gt; { return f(p1, p2) } } } function curry3(f: (any, any, any) =&gt; void) { return (p1: any) =&gt; { return (p2: any) =&gt; { return (p3: any) =&gt; { return f(p1, p2, p3) } } } } export default { curry0, curry1, curry2, curry3 }So with a function that have 3 parameters, we can use curry3 to partially apply the first 2 parameters. Then we have a function that accepts just a callback, and this is turned into Promise via toPromise const readWorkout = curry.curry3(HealthManager.readWorkout)(DateUtils.startDate))(DateUtils.endDate)) const workouts = await toPromise(readWorkout)Where to go from hereHere are some of my favorite posts to read more about curry Higher order functions Introduction to Function Currying in Swift Swift Function Currying Currying in JavaScript: I like how he uses memory and slice to gradually build more generic curry function","link":"/blog/Curry-in-Swift-and-Javascript/"},{"title":"Favorite WWDC 2018 sessions","text":"Issue #245 Original post https://medium.com/fantageek/my-favourite-wwdc-2018-sessions-363d3fc9c9d5 Favourite WWDC 2018 sessionsThis year I failed the lottery ticket to WWDC, and I also missed the keynote live stream because I was sailing on the Christian Radich outside Oslo fjord that day. Luckily all the videos are available on Apple Developer site very shortly, and we can watch them now on Chrome or the unofficial WWDC app on macOS. I recommend the WWDC macOS app as it allows to mark favourites and filter, also offers the ability to adjust play speed to 1.25 or 1.5 saves me some time watching. This year WWDC focuses a lot on privacy, stability, and speed, which are all I wish, so many thanks to Apple engineers who made that happen, and the resit to install the so called more stable iOS 12 is real. As an iOS engineers, I like to focus more about the necessary things to me, that is about the Swift programming language, new changes in Cocoa Touch, enhancements in Xcode and testing tricks. I also like to explore more about machine learning so I‚Äôm very glad that Apple is investing more into this technology with the introduction of Turi Create and Create ML. To me, APIs come and get deprecated very often and it‚Äôs good to know them, but the most important thing is to invest in your programming, debugging and testing skill which you can apply in many other platforms. Continued from last year favourites list, below are my favourite sessions with personal notes. Things are listed in no particular order. Hope you find it useful. Platforms State of the UnionIf you don‚Äôt have time, you should watch only this session. Platform State of the Union is like keynote for developers as it highlights important changes. Privacy: Apple confirms on its commitment in privacy and security, also introduces password management feature and auto fill on iOS 12. Generating strong password, integrating with 3rd password management and quickly populating OTP field from SMS message have never been easier. GateKeeper gets some improvements as well and begins to require app to be notarised. iOS 12: huge improvement in performance, Siri gets smarter with Shortcut support, group calling in FaceTime and grouped notification. Also for emoji fan, Memoji was introduced. macOS 10.14 Mojave: more with Dark Mode. They demo mostly with Xcode in dark mode, which looks so cool. This year WWDC banner give hints about iOS and macOS cross-platform apps, which is partially true with Marzipan, a way to allow iOS apps to run on the mac. Xcode 10: with improvements in code editing and source control changes bar indicator. Debugging with memory debug tool, LLDB performance enhancement and particular the new build system completely rewritten in Swift with parallel tasks are exciting news. Swift 4.2: if you follow swift repo then Swift 4.2 may not be very surprising. There are also announcements for Swift 5 plan. Machine Learning: is never hotter than this. This year we see huge investments in machine learning with Create ML, Turi Create, Natural Language frameworks, CoreML 2, new detection capabilities in Vision. ARKit 2, watchOS 5, tvOS 12, AppStore Connect and AppStore Connect APIs are some other important news you don‚Äôt want to miss. What‚Äôs new in Swift Together with this session, I recommend you to read What‚Äôs new in Swift 4.2 summary which is very succinct. Besides improvement in complication and runtime, Swift 4.2 offers some new features: iterable enum case, synthesised Equatable and Hashable, handy functions for shuffling, random generating. To me, the need to explicitly handle Implicitly unwrapped optional is also a reasonable change. What‚Äôs New in Cocoa Touch This is a brief introduction to all changes coming to iOS 12, together with tips on how to be a good iOS citizen. Learn what can affect scrolling experience and prefetching technique, memory consumption and automatic backing stores, how to get the best from UIImage and UIImageView . AutoLayout engine got a lot of performance improvement so it won‚Äôt bother you any more. To me the most satisfying is to get all the UIKit notifications and classes reorganised under nested types, which makes code reasoning very easy. Getting the Most out of Playgrounds in Xcode I‚Äôve written about Playground before and I‚Äôm very glad that Apple also invests a lot in it. The way people can interact and train model [Create ML](http://Introducing Create ML) in Playground is mesmerising. People may question how Playground works so well in session‚Äôs demos, but we can‚Äôt resist the new changes coming to Playground like Step by Step execution, markup rendering improvements and also how easy it is to consume custom frameworks. We can also now publish our own Playground through subscription. What‚Äôs New in Core ML Apple starts the machine learning trend last year with the introduction of Core ML. We might be excited and frustrated at the same time as Core ML is powerful but there‚Äôs no way we can customise it. Now the 2 parts tell us how to implement custom layer and model, techniques to reduce model size like quantisation and flexible model. This makes the foundation for improvement in Vision in object tracking and the debut of Natural Language framework. Machine learning has never been easier. What‚Äôs New in TestingI can‚Äôt miss any testing sessions as it is part of every day‚Äôs work. How can your program avoids regression bugs and ready for refactoring without any tests? This session shows improvement in coverage and the introduction of xccov tool to help us build automation on top of coverage report. Parallel distributed testing in Xcode 10 can save us some time to have coffee. Another wonderful news is that tests have multiple order execution mode to avoid bugs due to implicit dependencies. Testing Tips &amp; Tricks üåü This is my most favourite. The session starts with a pyramid of tests with unit integration and end-to-end test analogy explanation, then to some very cool tips and tricks. Testing network request: I like the separation of APIRequest and APIRequestLoader with URLSession , dependency injection with default parameter and the customisation of URLProtocol in URLSessionConfiguration Testing notification: Notification is system wide and I try to avoid it as much as possible. This shows how to inject dependency with default parameter and use of own NotificationCenter instead of NotificationCenter.default to ease testing Testing location: build abstraction with LocationProvider and LocationFetcher . How to use custom protocol and protocol for delegate to mock during test Testing timer: how to use and mock RunLoop behaviour with Timer Advanced Debugging with Xcode and LLDB LLDB has been improved to enable to debugging reliability experience, issues with AST context corruption, Swift type resolution are now things in the past. We can review how to use some common LLDB commands with handy arguments, and how to use Xcode breakpoint to its best. A Tour of UICollectionView üåü I begin to use UICollectionView more than UITableView , and it also has same code as NSCollectionView,which is more comfortable solution than the horrible NSTableView . Item size in UICollectionViewLayout : I often rely on UICollectionViewDelegateFlowLayout to specify item size but after watching this session, I feel like moving size related code to Layout object feels more like a good way to go Mosaic layout: This is not new, but good to watch again. You learn how to implement custom layout using cached layout attributes Data Source update: I didn‚Äôt expect Apple mentions this, but it is a good lesson on how UICollectionView handles batch update. I ‚Äòve written about this before in my A better way to update UICollectionView data in Swift with diff framework and that post gets a lot of attractions. In this session we need to remember that *ordering matters in data source update, but not in collection view update *‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è Swift Generics Generic was a core feature of Swift since the beginning, we all know that it helps us to implement generic code that can work with many types in a type safe manner. This session reminds that I ‚Äòve never learned enough, especially the reasonable design behind it. The sessions showcases Collection protocol and its protocol inheritances: MutableCollection , BidirectionalCollection , RandomAccessCollection and how they can be combined to provide generic functionalities for conformers. The associatedtype requirement in each protocol, especially Index and Element, is very minimal and has enough constraints for the protocol to implement lots of necessary functionalities in its protocol extension, which is eye opening for me. I very like to read open source, so looking at the source code for such protocols helps me understand more. The part about Fisher Yates shuffle algorithm details how we can come up with necessary protocol while still make them generic Pay attention to when they mention count and map , you can learn more how each concrete type can hook into the customisation point in protocol extension Finally learn the Liskov substitution principle with protocol in class inheritance. You should also Using Collections Effectively for how to utilise handy functions in Collection. Data You Can Trust Although Codable has a lot to offers in term of data integrity, this is good to know about to make sure the data you receive is actually the right data in correct format and structure. CommonCrypto is also part of new iOS SDK so you don‚Äôt need my Arcane library to handle encryption and hashing in your apps. Embracing Algorithms This is the most pleasant to watch as it is like a conversation between the speaker and the imaginary manager Crusty. Here I learn how to be aware of algorithm complexity and also how to utilise built in Foundation functions which are already optimised for performance. After this session I can‚Äôt help myself but going to Swift repo to read the Algorithms.swift file immediately. Image and Graphics Best Practices Learn how image encoding and decoding works through data and image buffer and how that affects memory and performance. There are techniques like downsampling that can tackle this problem. This also recommends against using backing store, and instead, use UIImageView A Guide to Turi Create I‚Äôve written about Turi Create before, but it is just scratching the surface of the many tasks offered by Turi. This year Apple releases Turi Create 5 with style transfer task, Vision Feature Print, GPU acceleration and recommender model improvements. I can‚Äôt wait to explore. And if you take a look at MLDataTable in Create ML framework, it looks like this has Turi ‚Äòs SFrame under the hood. That‚Äôs it. Thanks for reading. What are your favourite sessions this year? Please share in the comment section below","link":"/blog/Favorite-WWDC-2018-sessions/"},{"title":"Favorite WWDC 2019 sessions","text":"Issue #305 This year I‚Äôm lucky enough to get the ticket to WWDC and I couldn‚Äôt be more satisfied. 5 conference days full of awesomeness, talks, labs and networking, all make WWDC special and memorial conference for every attendee. As predicted by many, Marzipan (now officially called Project Catalyst) a technology that could allow iOS apps to be ported to macOS, would be the main topic for this year. But WWDC went more spectacular than that, with dark mode on iOS, independent watchOS apps, and SwiftUI being the star of the show. With over 150 sessions and extra videos, it can be a bit overwhelming to catch up, so I sum up 10 essential sessions to get started. It‚Äôs good to catch up with the latest technology, but be aware that frameworks and APIs come and get deprecated very often. It‚Äôs better to understand why they are introduced, how to learn the skills and mindset so we can apply them in our apps to delight user experience. Firstly, a little tip to get the most of WWDC videos. Although you can watch on Apple developer website, there‚Äôs WWDC for macOS app that allows much more comfortable watching experience. There we can tweak playing speed, picture in picture view mode, favorite and download videos for offline watching. Secondly, for those of you who want to search some texts in the talks, there is ASCIIwwdc that provides full transcripts of all the talks. 1. Platform State of the UnionIf you only have time for 1 video, this is it. Right after the Keynote, Platform State of the Union is like keynote for developers as it highlights important development changes. macOS 10.15, iOS 13, watchOS 6 and tvOS 13: As usual we get version bumps on all major platforms, which brings lots of new features and enhancement. macOS 10.15 is caleld Catalina and there‚Äôs a whole new platform for iPad called iPadOS. Security and Privacy: Adding to security enhancement from last year, this year shows how Apple really commits into this. There are one-time location permission, signing with Apple, security protocol for HomeKit, new crypto framework which marks MD5 as insecure. Also, apps that target kids can‚Äôt display ad or include analytics. tvOS 13 gets multiple user support watchOS 6 makes way for independent watch apps, which does not require accompanying iOS apps. There‚Äôs also dedicated watch appstore. iOS 13 now can live in the dark, but dropping support for iPhone 5S, 6 and below. Also, there is ability to toggle language setting per app only. iPadOS is a spinoff version of iOS for now, they look the same but they are expected to take different paths. It includes mouse support and requires iPad Air 2 and newer devices. macOS 10.15 introduces a replacement of bash with zsh. It also supports SideCar which allows iPad as an external display. Last but not least, there is Project Catalyst that enables iPad apps to run on the mac. Xcode 11 includes Swift 5.1 that can target latest SDKs. It brings a new look and feel with tons of features like minimap, Xcode preview, official support for Swift Package Manager, source control enhancement and test plan. 2. What‚Äôs New in SwiftAlthough Swift is developed in the open, it‚Äôs easy to lose track of in tons of proposals and changes. Swift 5.1 brings lots of cool features that power SwiftUI and Combine, so it‚Äôs a prerequisite. Module stability: This looks unimportant but this may be the most key feature of Swift 5.1. Unlike ABI stability we get in Swift 5, module stability helps resolves differences at compile time. In other words, this ensures a Swift 5 library will work with the future Swift compilers. A single expression can be declared without return keyword Function builder, with marker @_functionBuilder which works pretty much like function with receiver in Kotlin, allows for some very neat DSL syntax. Property wrapper, a counterpart of Kotlin delegated property, allows property accessors to be used in a convenient way. Shipped with Swift 5.1, we can use that with @propertyWrapper annotation. Opaque return type with some keyword remedies limitation of Swift protocol with Self or associcated types requirements. Among other things, there are other cool features like universal Self, static subscripts, collection diffing and matching against optional. 3. Introducing SwiftUI: Building Your First AppWelcome to the spotlight of WWDC 2019, SwiftUI. It may be the most exciting announcement since Swift was introduced in 2014. SwiftUI is not just a new framework, it‚Äôs a complete paradigm shift from imperative programming with UIKit/AppKit to a declarative world. I was amazed by how quickly React and Flutter allows fast prototyping and developing, so I‚Äôm very happy Apple finally makes this available natively on all platforms. The cool thing about SwiftUI is that it is expressive and has consistent syntax across platforms. So it is a learn once, write anywhere concept. Together with hot reloading of Xcode Preview, this ends the long debate among iOS community about whether to write UI in code or Storyboard, as the source of truth is now the concise code, but users are free to change any UI details via interactive Preview. Not only SwiftUI handles consistent UI according to Apple design guideline, it also provides many features for free like accessibility, dark mode and other bookkeeping. SwiftUI supports latest platform versions and no backward compatibility, so some of us have to wait 1 or 2 more years until iOS 13 is widely adopted. To learn more about SwiftUI, there are other advanced sesions like SwiftUI Essentials Building Custom Views with SwiftUI Data Flow Through SwiftUI SwiftUI On All Devices Integrating SwiftUI 4. Implementing Dark Mode on iOSAs much as I was excited about Dark theme in Android Q, Dark Mode in iOS is something that eases my eyes. Some apps also support Dark theme by their owns, but with iOS 13, supporting Dark mode to our apps is not a daunting task. There are more vibrancy materials, system colors that adapts automatically to dark and light modes. We can also select images for each mode in Asset Catalog easily. 5. Introducing Combine and Advances in FoundationCombine is a unified declarative framework for processing values over time. As a huge fan of Rx, Combine looks like home. It was thrilled to see this finnaly get supported official by Apple. This simplifying asyncrhonous programming a lot, also streamline other communication patterns like KVO and notification center. Combine is the force the powers reactive nature in SwiftUI with Binding and BindableObject. There‚Äôs also lots of improvements to Foundation like collection diffing, new list and relative formatters, and notably Combine syntax for URLSession, which makes networking a breeze. To learn more about Combine, there‚Äôs Combine in Practice where we can learn more about error handling, schedule work and many operators on streams. 6. Modernizing Your UI for iOS 13Take a look at this talk to learn about new features in iOS 13 that we should be aware in our apps. Newly in iOS 13, we can take advantage of card style modal presentation that is very cumbersome to replicate ourselves. There‚Äôs also new UISearchBarTextField with advanced customizations for token and inputs. Lastly, the new UIMenu makes showing context menu trivial and make way for iPad apps to behave like native on the mac. 7. Modern Swift API DesignIf you‚Äôre developing iOS apps, chances are that you have already stumbled upon API Design Guidelines which contains valuable guides to structuring our Swift code. This highlights my most favorite programming advice ‚ÄúClarity at the point of use‚Äù, because things we declare are written only once, but read many many times, so we should make those concise and clear. There‚Äôs also mention of preferring generic over protocol which reminds me of protocol witness technique. This talk details how Apple engineers themselves design Swift code in their RealityKit and SwiftUI frameworks. 8. Optimizing App LaunchThe launch time of your app can be decisive in user experience, it needs to be fast and do just the necessary things. With enhancements via shared and cached frameworks, apps now load faster on iOS 13. But there‚Äôs more thing we can do to improve this, thanks to the new App Launch profiler in Xcode 11, together with app launch time measurement in XCTests. The 3 words we can take away from this talk is minimize, prioritize, and optimize work at this critical launch time. 9. Introducing iPad Apps for MacStarting with iOS 13 with Project Catalyst, there‚Äôs a new target environment check called UIKitForMac, which allows iPad apps to target the mac while using the same code base. Most of the UI after porting have the correct look and feel like a native macOS app with many features provided for free like window management. There are, kind of obviously, some frameworks that are designed specifically for phone and tablet experience, can‚Äôt be supported in macOS. There are other sesions like Taking iPad Apps for Mac to the Next Level where we can learn more about this. 10. Creating Independent Watch Apps watchOS finally gets its own Appstore and the ability to run independent watchOS apps without a companying iOS app. With the introduction of URLSession and streaming APIs for the watch, together with enhancements in push notifications, Apple sign in, debugging, this can‚Äôt be a better time to start developing for the watch. It is stunning to see how Apple comes up with so many cool announcements this year while keeping innovation and quality high. There are more sessions to explore, head over to WWDC 2019 developer website to learn more.","link":"/blog/Favorite-WWDC-2019-sessions/"},{"title":"How to build a networking in Swift","text":"Issue #195 Miami https://github.com/onmyway133/Miami Future based builders Should not wrap system API URLSession offer tons of thing that it‚Äôs hard to use with wrappers like Alamofire ConcernsParameter encoding is confusing-https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#parameter-encoding Query and body builder Understanding HTML Form Encoding: URL Encoded and Multipart Forms https://stackoverflow.com/questions/14551194/how-are-parameters-sent-in-an-http-post-request https://stackoverflow.com/questions/1617058/ok-to-skip-slash-before-query-string https://stackoverflow.com/questions/3508338/what-is-the-boundary-in-multipart-form-data How to construct URL with URLComponents and appendPathComponent in Swift HTTP Case sensitivity in HTTP Lazy execution Promise https://github.com/onmyway133/Then Signal and Future https://github.com/onmyway133/archives/tree/master/Signal Catch error How to catch error in ApolloClient Implementation How to cancel DispatchWorkItem and NSOperation Understanding DispatchQueues Use Promise to handle chain and errorhttps://github.com/onmyway133/Miami/blob/master/Sources/Shared/Future/Future.swift 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202import Foundationpublic class Token { private let lock = NSRecursiveLock() private var _isCancelled = false private var callbacks: [() -&gt; Void] = [] public init() {} public func isCancelled() -&gt; Bool { return lock.whenLock { return _isCancelled } } public func cancel() { lock.whenLock { guard self._isCancelled == false else { return } self._isCancelled = true self.callbacks.forEach { $0() } self.callbacks.removeAll() } } public func onCancel(_ callback: @escaping () -&gt; Void) { lock.whenLock { self.callbacks.append(callback) } }}public class Resolver&lt;T&gt; { public let queue: DispatchQueue public let token: Token private var callback: (Result&lt;T, Error&gt;) -&gt; Void public init(queue: DispatchQueue, token: Token, callback: @escaping (Result&lt;T, Error&gt;) -&gt; Void) { self.queue = queue self.token = token self.callback = callback } public func complete(value: T) { self.handle(result: .success(value)) } public func fail(error: Error) { self.handle(result: .failure(error)) } public func handle(result: Result&lt;T, Error&gt;) { queue.async { self.callback(result) self.callback = { _ in } } }}public class Future&lt;T&gt; { public let work: (Resolver&lt;T&gt;) -&gt; Void public init(work: @escaping (Resolver&lt;T&gt;) -&gt; Void) { self.work = work } public static func fail(error: Error) -&gt; Future&lt;T&gt; { return Future&lt;T&gt;.result(.failure(error)) } public static func complete(value: T) -&gt; Future&lt;T&gt; { return .result(.success(value)) } public static func result(_ result: Result&lt;T, Error&gt;) -&gt; Future&lt;T&gt; { return Future&lt;T&gt;(work: { resolver in switch result { case .success(let value): resolver.complete(value: value) case .failure(let error): resolver.fail(error: error) } }) } public func run(queue: DispatchQueue = .serial(), token: Token = Token(), completion: @escaping (Result&lt;T, Error&gt;) -&gt; Void) { queue.async { if (token.isCancelled()) { completion(.failure(NetworkError.cancelled)) return } let resolver = Resolver&lt;T&gt;(queue: queue, token: token, callback: completion) self.work(resolver) } } public func map&lt;U&gt;(transform: @escaping (T) -&gt; U) -&gt; Future&lt;U&gt; { return Future&lt;U&gt;(work: { resolver in self.run(queue: resolver.queue, token: resolver.token, completion: { result in resolver.handle(result: result.map(transform)) }) }) } public func flatMap&lt;U&gt;(transform: @escaping (T) -&gt; Future&lt;U&gt;) -&gt; Future&lt;U&gt; { return Future&lt;U&gt;(work: { resolver in self.run(queue: resolver.queue, token: resolver.token, completion: { result in switch result { case .success(let value): let future = transform(value) future.run(queue: resolver.queue, token: resolver.token, completion: { newResult in resolver.handle(result: newResult) }) case .failure(let error): resolver.fail(error: error) } }) }) } public func catchError(transform: @escaping (Error) -&gt; Future&lt;T&gt;) -&gt; Future&lt;T&gt; { return Future&lt;T&gt;(work: { resolver in self.run(queue: resolver.queue, token: resolver.token, completion: { result in switch result { case .success(let value): resolver.complete(value: value) case .failure(let error): let future = transform(error) future.run(queue: resolver.queue, token: resolver.token, completion: { newResult in resolver.handle(result: newResult) }) } }) }) } public func delay(seconds: TimeInterval) -&gt; Future&lt;T&gt; { return Future&lt;T&gt;(work: { resolver in resolver.queue.asyncAfter(deadline: DispatchTime.now() + seconds, execute: { self.run(queue: resolver.queue, token: resolver.token, completion: { result in resolver.handle(result: result) }) }) }) } public func log(closure: @escaping (Result&lt;T, Error&gt;) -&gt; Void) -&gt; Future&lt;T&gt; { return Future&lt;T&gt;(work: { resolver in self.run(queue: resolver.queue, token: resolver.token, completion: { result in closure(result) resolver.handle(result: result) }) }) } public static func sequence(futures: [Future&lt;T&gt;]) -&gt; Future&lt;Sequence&lt;T&gt;&gt; { var index = 0 var values = [T]() func runNext(resolver: Resolver&lt;Sequence&lt;T&gt;&gt;) { guard index &lt; futures.count else { let sequence = Sequence(values: values) resolver.complete(value: sequence) return } let future = futures[index] index += 1 future.run(queue: resolver.queue, token: resolver.token, completion: { result in switch result { case .success(let value): values.append(value) runNext(resolver: resolver) case .failure(let error): resolver.fail(error: error) } }) } return Future&lt;Sequence&lt;T&gt;&gt;(work: runNext) }}extension NSLocking { @inline(__always) func whenLock&lt;T&gt;(_ closure: () throws -&gt; T) rethrows -&gt; T { lock() defer { unlock() } return try closure() } @inline(__always) func whenLock(_ closure: () throws -&gt; Void) rethrows { lock() defer { unlock() } try closure() }} Query builder to build query https://github.com/onmyway133/Miami/blob/master/Sources/Shared/Builder/QueryBuilder.swift 123456789101112131415161718192021222324252627282930313233343536373839404142import Foundationpublic protocol QueryBuilder { func build() -&gt; [URLQueryItem]}public class DefaultQueryBuilder: QueryBuilder { public let parameters: JSONDictionary public init(parameters: JSONDictionary = [:]) { self.parameters = parameters } public func build() -&gt; [URLQueryItem] { var components = URLComponents() let parser = ParameterParser() let pairs = parser .parse(parameters: parameters) .map({ $0 }) .sorted(by: &lt;) components.queryItems = pairs.map({ key, value in URLQueryItem(name: key, value: value) }) return components.queryItems ?? [] } public func build(queryItems: [URLQueryItem]) -&gt; String { var components = URLComponents() components.queryItems = queryItems.map({ return URLQueryItem(name: escape($0.name), value: escape($0.value ?? \"\")) }) return components.query ?? \"\" } public func escape(_ string: String) -&gt; String { return string.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? \"\" }} Body builder to build body https://github.com/onmyway133/Miami/blob/master/Sources/Shared/Builder/JsonBodyBuilder.swift 12345678910111213141516171819202122import Foundationpublic class JsonBodyBuilder: BodyBuilder { public let parameters: JSONDictionary public init(parameters: JSONDictionary) { self.parameters = parameters } public func build() -&gt; ForBody? { guard let data = try? JSONSerialization.data( withJSONObject: parameters, options: JSONSerialization.WritingOptions() ) else { return nil } return ForBody(body: data, headers: [ Header.contentType.rawValue: \"application/json\" ]) }} Make request with networking123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import Foundationpublic class Networking { public let session: URLSession public let mockManager = MockManager() public var before: (URLRequest) -&gt; URLRequest = { $0 } public var catchError: (Error) -&gt; Future&lt;Response&gt; = { error in Future.fail(error: error) } public var validate: (Response) -&gt; Future&lt;Response&gt; = { Future.complete(value: $0) } public var logResponse: (Result&lt;Response, Error&gt;) -&gt; Void = { _ in } public init(session: URLSession = .shared) { self.session = session } public func make(options: Options, baseUrl: URL) -&gt; Future&lt;Response&gt; { let builder = UrlRequestBuilder() do { let request = try builder.build(options: options, baseUrl: baseUrl) return make(request: request) } catch { return Future&lt;Response&gt;.fail(error: error) } } public func make(request: URLRequest) -&gt; Future&lt;Response&gt; { if let mock = mockManager.findMock(request: request) { return mock.future.map(transform: { Response(data: $0, urlResponse: URLResponse()) }) } let future = Future&lt;Response&gt;(work: { resolver in let task = self.session.dataTask(with: request, completionHandler: { data, response, error in if let data = data, let urlResponse = response { resolver.complete(value: Response(data: data, urlResponse: urlResponse)) } else if let error = error { resolver.fail(error: NetworkError.urlSession(error, response)) } else { resolver.fail(error: NetworkError.unknownError) } }) resolver.token.onCancel { task.cancel() } task.resume() }) return future .catchError(transform: self.catchError) .flatMap(transform: self.validate) .log(closure: self.logResponse) }} Mock a request123456789101112131415161718192021222324252627282930import Foundationpublic class Mock { public let options: Options public let future: Future&lt;Data&gt; public init(options: Options, future: Future&lt;Data&gt;) { self.options = options self.future = future } public static func on(options: Options, data: Data) -&gt; Mock { return Mock(options: options, future: Future.complete(value: data)) } public static func on(options: Options, error: Error) -&gt; Mock { return Mock(options: options, future: Future.fail(error: error)) } public static func on(options: Options, file: String, fileExtension: String, bundle: Bundle = Bundle.main) -&gt; Mock { guard let url = bundle.url(forResource: file, withExtension: fileExtension), let data = try? Data(contentsOf: url) else { return .on(options: options, error: NetworkError.invalidMock) } return .on(options: options, data: data) }}","link":"/blog/How-to-build-a-networking-in-Swift/"},{"title":"How to deal with multiple scenarios with Push Notification in iOS","text":"Issue #459 Here are my notes when working with Push Notification How to registerRegister to receive push notification registerForRemoteNotificationTypes is deprecated in iOS 8+ 1UIApplication.sharedApplication().registerForRemoteNotifications() Register to alert user through UI If your app displays alerts, play sounds, or badges its icon, you must call this method during your launch cycle to request permission to alert the user in these ways 12345let types: UIUserNotificationType = [.Badge, .Sound, .Alert]let categories = Set&lt;UIUserNotificationCategory&gt;()let settings = UIUserNotificationSettings(forTypes: types, categories: categories)UIApplication.sharedApplication().registerUserNotificationSettings(settings) You don‚Äôt need to wait for registerUserNotificationSettings to callback before calling registerForRemoteNotifications From iOS 10, use UNNotifications framework https://onmyway133.github.io/blog/How-to-register-for-alert-push-notification-in-iOS/ When to registerFrom Registering, Scheduling, and Handling User Notifications Never cache a device token; always get the token from the system whenever you need it. If your app previously registered for remote notifications, calling the registerForRemoteNotifications method again does not incur any additional overhead, and iOS returns the existing device token to your app delegate immediately. In addition, iOS calls your delegate method any time the device token changes, not just in response to your app registering or re-registeringThe user can change the notification settings for your app at any time using the Settings app. Because settings can change, always call the registerUserNotificationSettings: at launch time and use the application:didRegisterUserNotificationSettings: method to get the response. If the user disallows specific notification types, avoid using those types when configuring local and remote notifications for your app. didReceiveRemoteNotification About application:didReceiveRemoteNotification: Implement the application:didReceiveRemoteNotification:fetchCompletionHandler: method instead of this one whenever possible. If your delegate implements both methods, the app object calls the application:didReceiveRemoteNotification:fetchCompletionHandler: method.If the app is not running when a remote notification arrives, the method launches the app and provides the appropriate information in the launch options dictionary. The app does not call this method to handle that remote notification. Instead, your implementation of the application:willFinishLaunchingWithOptions: or application:didFinishLaunchingWithOptions: method needs to get the remote notification payload data and respond appropriately. About application:didReceiveRemoteNotification:fetchCompletionHandler: This is for silent push notification with content-available Unlike the application:didReceiveRemoteNotification: method, which is called only when your app is running in the foreground, the system calls this method when your app is running in the foreground or backgroundIn addition, if you enabled the remote notifications background mode, the system launches your app (or wakes it from the suspended state) and puts it in the background state when a push notification arrives. However, the system does not automatically launch your app if the user has force-quit it. In that situation, the user must relaunch your app or restart the device before the system attempts to launch your app automatically again.If the user opens your app from the system-displayed alert, the system may call this method again when your app is about to enter the foreground so that you can update your user interface and display information pertaining to the notification. How to handleUsually, the use of push notification is to display a specific article, a specific DetailViewControllerin your app. So the good practices are When the app is in foreground: Gently display some kind of alert view and ask the user whether he would like to go to that specific page or not When user is brought from background to foreground, or from terminated to foreground: Just navigate to that specific page. For example, if you use UINavigationController, you can set that specific page the top most ViewController, if you use UITabBarController, you can set that specific page the selected tab, something like that 1234567891011- func handlePushNotification(userInfo: NSDictionary) { // Check applicationState if (applicationState == UIApplicationStateActive) { // Application is running in foreground showAlertForPushNotification(userInfo) } else if (applicationState == UIApplicationStateBackground || applicationState == UIApplicationStateInactive) { // Application is brought from background or launched after terminated handlePushNotification(userInfo) }} Here we create another method handlePushNotification to handle push notification. When you receive push notification, 3 cases can occur Case 1: ForegroundLoud push No system alert application:didReceiveRemoteNotification:fetchCompletionHandler: is called Silent push No system alert application:didReceiveRemoteNotification:fetchCompletionHandler: is called Case 2: BackgroundLoud push System alert No method called Tap notification and application:didReceiveRemoteNotification:fetchCompletionHandler: is called Tap on App Icon and nothing is called Silent push No system alert application:didReceiveRemoteNotification:fetchCompletionHandler: is called. If app is suspended, its state changed to UIApplicationStateBackground Tap notification and application:didReceiveRemoteNotification:fetchCompletionHandler: is called Tap on App Icon and nothing is called Case 3: TerminatedLoud push System alert No method called Tap notification and application:didFinishLaunchingWithOptions: with launchOptions, application:didReceiveRemoteNotification:fetchCompletionHandler: is called Tap on App Icon and application:didFinishLaunchingWithOptions: is called with launchOptions set to nil Silent push No system alert application:didReceiveRemoteNotification:fetchCompletionHandler: is called. If app was not killed by user, it is woke up and state changed to UIApplicationStateInactive. Tap notification and application:didFinishLaunchingWithOptions: with launchOptions, application:didReceiveRemoteNotification:fetchCompletionHandler: is called Tap on App Icon and application:didFinishLaunchingWithOptions: is called with launchOptions set to nil System alertSystem alert only show if the payload contains alert 123456789101112{ \"aps\" : { \"alert\" : { \"title\" : \"Game Request\", \"body\" : \"Bob wants to play poker\", \"action-loc-key\" : \"PLAY\" }, \"badge\" : 5 }, \"param1\" : \"bar\", \"param2\" : [ \"bang\", \"whiz\" ]} Silent push payloadFor now I see that silent push must contain sound for application:didReceiveRemoteNotification:fetchCompletionHandler: to be called when app is in background 123456789{ ‚Äúaps‚Äù: { ‚Äúcontent-available‚Äù: 1, ‚Äúalert‚Äù: ‚Äúhello‚Äù // include this if we want to show alert ‚Äúsound‚Äù: ‚Äú‚Äù // this does the trick }, ‚Äúparam1‚Äù: 1, ‚Äúparam2‚Äù: ‚Äútext‚Äù} Read Pushing Background Updates to Your App If your app‚Äôs server-based content changes infrequently or at irregular intervals, you can use background notifications to notify your app when new content becomes available. A background notification is a remote notification that doesn‚Äôt display an alert, play a sound, or badge your app‚Äôs icon. It wakes your app in the background and gives it time to initiate downloads from your server and update its content. The system treats background notifications as low-priority: you can use them to refresh your app‚Äôs content, but the system doesn‚Äôt guarantee their delivery. In addition, the system may throttle the delivery of background notifications if the total number becomes excessive. The number of background notifications allowed by the system depends on current conditions, but don‚Äôt try to send more than two or three per hour. How to test Push notificationI built a macOS app called PushNotification for you to test push notification. It works with certificate and the new key authentication with APNS. Please give it a try Tutorials that use PushNotifications https://itnext.io/introductory-push-notifications-fa6f68ace251 https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started TroubleshootingSilent notification with push notification enabledIn theory, if user disables push notification then silent notification still goes through https://stackoverflow.com/questions/31450403/didreceiveremotenotification-not-working-in-the-background but sound key should be present 123456{ aps = { \"content-available\" : 1, sound : \"\" };} When open the app, didReceiveRemoteNotification is called immediately with the silent push message Where to go from hereI hope you find this article useful. iOS changes fast so some the things I mention may be outdated by the time you read, if so please let me know. Here are some more interesting links Scheduling, Registering, and Handling Notifications Handle push notifications when arrived in iOS application How to respond to push notification view if app is already running in the background didReceiveRemoteNotification when in background How to handle remote notification with background mode enabled Remote notification method called twice Original post https://medium.com/fantageek/push-notification-in-ios-46d979e5f7ec","link":"/blog/How-to-deal-with-multiple-scenarios-with-Push-Notification-in-iOS/"},{"title":"How to dismiss keyboard with react-navigation in React Native apps","text":"Issue #263 Original post https://medium.com/react-native-training/how-to-dismiss-keyboard-with-react-navigation-in-react-native-apps-4b987bbfdc48 Showing and dismiss keyboard seems like a trivial thing to do in mobile apps, but it can be tricky in automatically dismissing it when it comes together with react-navigation and modal presentation. At least that‚Äôs according to my initial assumption. This article aims to detail what I have learned about keyboard handling and how to avoid extra tap when dealing with TextInput There will also be lots of code spelunking, thanks to the all the libraries being open source. The version of React Native I‚Äôm using at the time of writing is 0.57.5 The built in TextInput componentReact Native comes with a bunch of basic components, one of them is the TextInput for inputting text into the app via a keyboard. import React, { Component } from &apos;react&apos;; import { AppRegistry, TextInput } from &apos;react-native&apos;; export default class UselessTextInput extends Component { constructor(props) { super(props); this.state = { text: &apos;Useless Placeholder&apos; }; } render() { return ( &lt;TextInput style={{height: 40, borderColor: 'gray', borderWidth: 1}} onChangeText={(text) =&gt; this.setState({text})} value={this.state.text} /&gt; ); } }That‚Äôs it, whenever we click on the text input, keyboard appears allowing us to enter values. To dismiss the keyboard by pressing anywhere on the screen, the easy solution is to TouchableWithoutFeedback together with Keyboard . This is similar to having UITapGestureRecognizer in iOS UIView and calling view.endEditing import { Keyboard } from &apos;react-native&apos; Keyboard.dismiss()TextInput inside ScrollViewNormally we should have some text inputs inside a scrolling component, in React Native that is mostly ScrollView to be able to handle long list of content and avoid keyboard. If TextInput is inside ScrollView then the way keyboard gets dismissed behaves a bit differently, and depends on keyboardShouldPersistTaps Determines when the keyboard should stay visible after a tap. ‚Äònever‚Äô (the default), tapping outside of the focused text input when the keyboard is up dismisses the keyboard. When this happens, children won‚Äôt receive the tap. ‚Äòalways‚Äô, the keyboard will not dismiss automatically, and the scroll view will not catch taps, but children of the scroll view can catch taps. ‚Äòhandled‚Äô, the keyboard will not dismiss automatically when the tap was handled by a children, (or captured by an ancestor). The never mode should be the desired behaviour in most cases, clicking anywhere outside the focused text input should dismiss the keyboard. In my app, there are some text inputs and an action button. The scenario is that users enter some infos and then press that button to register data. With the never mode, we have to press button twice, one for dismissing the keyboard, and two for the onPress of the Button . So the solution is to use always mode. This way the Button always gets the press event first. &lt;ScrollView keyboardShouldPersistTaps=&apos;always&apos; /&gt;ScrollView cares about keyboardThe native RCTScrollView class that power react native ScrollView has code to handle dismiss mode RCT_SET_AND_PRESERVE_OFFSET(setKeyboardDismissMode, keyboardDismissMode, UIScrollViewKeyboardDismissMode)The option that it chooses is UIScrollViewKeyboardDismissMode for keyboardDismissMode property The manner in which the keyboard is dismissed when a drag begins in the scroll view. As you can see, the possible modes are onDrag and interactive . And react native exposes customization point for this via keyboardShouldPersistTaps case none The keyboard does not get dismissed with a drag. case onDrag The keyboard is dismissed when a drag begins. case interactive The keyboard follows the dragging touch offscreen, and can be pulled upward again to cancel the dismiss. ScrollView inside a ModalBut that does not work when ScrollView is inside Modal . By Modal I meant the Modal component in React Native. The only library that I use is react-navigation , and it supports Opening a full-screen modal too, but they way we declare modal in react-navigation looks like stack and it is confusing, so I would rather not use it. I use Modal in react-native and that works pretty well. So if we have TextInput inside ScrollView inside Modal then keyboardShouldPersistTaps does not work. Modal seems to be aware of parent ScrollView so we have to declare keyboardShouldPersistTaps=‚Äôalways‚Äô on every parent ScrollView . In React Native FlatList and SectionList uses ScrollView under the hood, so we need to be aware of all those ScrollView components. Spelunking react-navigationSince my app relies heavily on react-navigation , it‚Äôs good to have a deep understanding about its components so we make sure where the problem lies. I‚Äôve written a bit about react-navigation structure below.Using react-navigation 3.0 in React Native appsreact-navigation is probably the only dependency I use in React Native apps. I‚Äôm happy with it so far, then version 3.0‚Ä¶codeburst.io Like every traditional mobile apps, my app consists of many stack navigators inside tab navigator. In iOS that means many UINavigationViewController inside UITabbarController . In react-navigation I use createMaterialTopTabNavigator inside createBottomTabNavigator import { createMaterialTopTabNavigator } from &apos;react-navigation&apos; import { createBottomTabNavigator, BottomTabBar } from &apos;react-navigation-tabs&apos;The screen I have keyboard issue is a Modal presented from the 2nd screen in one of the stack navigators, so let‚Äôs examine every possible ScrollView up the hierarchy. This process involves lots of code reading and this‚Äôs how I love open source. First let‚Äôs start with createBottomTabNavigator which uses createTabNavigator together with its own TabNavigationView class TabNavigationView extends React.PureComponent&lt;Props, State&gt; export default createTabNavigator(TabNavigationView);Tab navigator has tab bar view below ScreenContainer , which is used to contain view. ScreenContainer is from react-native-screens ‚ÄúThis project aims to expose native navigation container components to React Native‚Äù. Below is how tab navigator works. render() { const { navigation, renderScene, lazy } = this.props; const { routes } = navigation.state; const { loaded } = this.state return ( &lt;View style={styles.container}&gt; &lt;ScreenContainer style={styles.pages}&gt; {routes.map((route, index) =&gt; { if (lazy &amp;&amp; !loaded.includes(index)) { // Don&apos;t render a screen if we&apos;ve never navigated to it return null; const isFocused = navigation.state.index === index return ( &lt;ResourceSavingScene key={route.key} style={StyleSheet.absoluteFill} isVisible={isFocused} &gt; {renderScene({ route })} &lt;/ResourceSavingScene&gt; ); })} &lt;/ScreenContainer&gt; {this._renderTabBar()} &lt;/View&gt; ); }Tab bar is rendered using BottomTabBar in _renderTabBar function. Looking at the code, the whole tab navigator has nothing to do with ScrollView . So there is only createMaterialTopTabNavigator left on the suspecting list. I use it in the app with swipeEnabled: true . And by looking at the imports, top tab navigator has import MaterialTopTabBar, { type TabBarOptions,} from &apos;../views/MaterialTopTabBar&apos;;MaterialTopTabBar has import from react-native-tab-view import { TabBar } from &apos;react-native-tab-view&apos;;which has ScrollView &lt;View style={styles.scroll}&gt; &lt;Animated.ScrollView horizontal keyboardShouldPersistTaps=&quot;handled&quot;The property keyboardShouldPersistTaps was initial set to always , then set back to handled to avoid the bug that we can‚Äôt press any button in tab bar while keyboard is open https://github.com/react-native-community/react-native-tab-view/issues/375 But this TabBar has nothing with our problem, because it‚Äôs just for containing tab bar buttons. Swiping in createMaterialTopTabNavigatorTaking another look at createMaterialTopTabNavigator we see more imports from react-native-tab-view import { TabView, PagerPan } from &apos;react-native-tab-view&apos;;TabView has swipeEnabled passed in return ( &lt;TabView {...rest} navigationState={navigation.state} animationEnabled={animationEnabled} swipeEnabled={swipeEnabled} onAnimationEnd={this._handleAnimationEnd} onIndexChange={this._handleIndexChange} onSwipeStart={this._handleSwipeStart} renderPager={renderPager} renderTabBar={this._renderTabBar} renderScene={ /* $FlowFixMe */ this._renderScene } /&gt; );and it renders PagerDefault, which in turn uses PagerScroll for iOS import { Platform } from &apos;react-native&apos;; let Pager; switch (Platform.OS) { case &apos;android&apos;: Pager = require(&apos;./PagerAndroid&apos;).default; break; case &apos;ios&apos;: Pager = require(&apos;./PagerScroll&apos;).default; break; default: Pager = require(&apos;./PagerPan&apos;).default; break; } export default Pager;So PagerScroll uses ScrollView to handle scrolling to match material style that user can scroll between pages, and it has keyboardShouldPersistTaps=‚Äùalways‚Äù which should be correct. return ( &lt;ScrollView horizontal pagingEnabled directionalLockEnabled keyboardDismissMode=&quot;on-drag&quot; keyboardShouldPersistTaps=&quot;always&quot;So nothing looks suspicious in react-navigation , which urges me to look at code from my project. Debugging FlatList, SectionList and ScrollViewLike I stated in the beginning of this article, the root problem is that we need to declare keyboardShouldPersistTaps for all parent ScrollView in the hierarchy. That means to look out for any FlatList, SectionList and ScrollView Luckily, there is react-devtools that shows tree of all rendered components in react app, and that is also guided in Debugging section of react native. You can use the standalone version of React Developer Tools to debug the React component hierarchy. To use it, install the react-devtools package globally: npm install -g react-devtoolsSo after searching I found out that there is a SectionList up the hierarchy that should have keyboardShouldPersistTaps=‚Äôalways‚Äô while it didn‚Äôt. Taking a thorough look at the code, I found out that the Modal is trigged from a SectionList item. We already know that triggering Modal in react native means that to embed that Modal inside the view hierarchy and control its visibility via a state. So in terms of view and component, that Modal is inside a SectionList . And for your interest, if you dive deep into react native code, SectionList in my case is just VirtualizedSectionList , which is VirtualizedList, which uses ScrollView So after I declare keyboardShouldPersistTaps=‚Äôalways‚Äô in that SectionList , the problem is solved. User can now just enters some values in the text inputs, then press once on the submit button to submit data. The button now captures touch events first instead of scrollview. Where to go from hereThe solution for this is fortunately simple as it involves fixing our code without having to alter react-navigation code. But it‚Äôs good to look at the library code to know what it does, and to trace where the problem originates. Thanks for following such long exploring and hope you learn something.","link":"/blog/How-to-dismiss-keyboard-with-react-navigation-in-React-Native-apps/"},{"title":"How to fix SSLPeerUnverifiedException in Android","text":"Issue #184 Get error javax.net.ssl.SSLPeerUnverifiedException: No peer certificate in Android API 16 to API 19 Getting startedRead about HTTPS and SSL https://developer.android.com/training/articles/security-sslCheck backend TLS https://www.ssllabs.com/index.htmlTLS by default in Android P https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html TLS versionRead https://developer.android.com/reference/javax/net/ssl/SSLSocket.html This class extends Sockets and provides secure socket using protocols such as the ‚ÄúSecure Sockets Layer‚Äù (SSL) or IETF ‚ÄúTransport Layer Security‚Äù (TLS) protocols. TLS 1.1 and 1.2 are supported from API 16, but not enabled by default until API 20. Install TLS 1.2 when neededRead https://medium.com/tech-quizlet/working-with-tls-1-2-on-android-4-4-and-lower-f4f5205629a The first thing we realized was that despite documentation suggesting otherwise, not all devices on Android 4.1+ actually support TLS 1.2. Even though it is likely due to device manufacturers not fully following the official Android specs, we had to do what we could to ensure this would work for our users. Luckily, Google Play Services provides a way to do this. The solution is to use ProviderInstaller from Google Play Services to try to update the device to support the latest and greatest security protocols. 1234567891011fun Context.installTls12() { try { ProviderInstaller.installIfNeeded(this) } catch (e: GooglePlayServicesRepairableException) { // Prompt the user to install/update/enable Google Play services. GoogleApiAvailability.getInstance() .showErrorNotification(this, e.connectionStatusCode) } catch (e: GooglePlayServicesNotAvailableException) { // Indicates a non-recoverable error: let the user know. }} Does not seem to work, as the root problem was that TLS was not enabled Try normal HttpsUrlConnectionIf we use any networking library and suspect it is the cause, then try using normal HttpsUrlConnection to check. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798class MyHttpRequestTask extends AsyncTask&lt;String,Integer,String&gt; { @Override protected String doInBackground(String... params) { String my_url = params[0]; try { URL url = new URL(my_url); HttpsURLConnection httpURLConnection = (HttpsURLConnection) url.openConnection(); httpURLConnection.setSSLSocketFactory(new MyFactory()); // setting the Request Method Type httpURLConnection.setRequestMethod(\"GET\"); // adding the headers for request httpURLConnection.setRequestProperty(\"Content-Type\", \"application/json\"); String result = readStream(httpURLConnection.getInputStream()); Log.e(\"HttpsURLConnection\", \"data\" + result.toString()); }catch (Exception e){ e.printStackTrace(); Log.e(\"HttpsURLConnection \", \"error\" + e.toString()); } return null; } private static String readStream(InputStream is) throws IOException { final BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName(\"US-ASCII\"))); StringBuilder total = new StringBuilder(); String line; while ((line = reader.readLine()) != null) { total.append(line); } if (reader != null) { reader.close(); } return total.toString(); }}class MyFactory extends SSLSocketFactory { private javax.net.ssl.SSLSocketFactory internalSSLSocketFactory; public MyFactory() throws KeyManagementException, NoSuchAlgorithmException { SSLContext context = SSLContext.getInstance(\"TLS\"); context.init(null, null, null); internalSSLSocketFactory = context.getSocketFactory(); } @Override public String[] getDefaultCipherSuites() { return internalSSLSocketFactory.getDefaultCipherSuites(); } @Override public String[] getSupportedCipherSuites() { return internalSSLSocketFactory.getSupportedCipherSuites(); } @Override public Socket createSocket() throws IOException { return enableTLSOnSocket(internalSSLSocketFactory.createSocket()); } @Override public Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException { return enableTLSOnSocket(internalSSLSocketFactory.createSocket(s, host, port, autoClose)); } @Override public Socket createSocket(String host, int port) throws IOException, UnknownHostException { return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port)); } @Override public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException, UnknownHostException { return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port, localHost, localPort)); } @Override public Socket createSocket(InetAddress host, int port) throws IOException { return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host, port)); } @Override public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException { return enableTLSOnSocket(internalSSLSocketFactory.createSocket(address, port, localAddress, localPort)); } private Socket enableTLSOnSocket(Socket socket) { if(socket != null &amp;&amp; (socket instanceof SSLSocket)) { ((SSLSocket)socket).setEnabledProtocols(new String[] {\"TLSv1.1\", \"TLSv1.2\"}); } return socket; }} The key is setEnabledProtocols. Then use 12String url = \"https://www.myserver.com/data\"new MyHttpRequestTask().execute(url); Use custom SSLSocketFactory in some networking librariesIf our custom MyFactory works for HttpsUrlConnection, then the problem lies in some 3rd party networking libraries. Read https://blog.dev-area.net/2015/08/13/android-4-1-enable-tls-1-1-and-tls-1-2/ The Android documentation for SSLSocket says that TLS 1.1 and TLS 1.2 is supported within android starting API level 16+ (Android 4.1, Jelly Bean). But it is by default disabled but starting with API level 20+ (Android 4.4 for watch, Kitkat Watch and Android 5.0 for phone, Lollipop) they are enabled. But it is very hard to find any documentation about how to enable it for phones running 4.1 for example. The first thing you need to do is to make sure that your minimum required API level is 16 to have the following code working in your project. To enable TLS 1.1 and 1.2 you need to create a custom SSLSocketFactory that is going to proxy all calls to a default SSLSocketFactory implementation. In addition to that do we have to override all createSocket methods and callsetEnabledProtocols on the returned SSLSocket to enable TLS 1.1 and TLS 1.2. For an example implementation just follow the link below. 12345678910111213141516171819202122232425262728293031323334353637383940414243import javax.net.ssl.SSLSocketFactory;class MyFactory extends org.apache.http.conn.ssl.SSLSocketFactory { public static KeyStore getKeyStore() { KeyStore trustStore = null; try { trustStore = KeyStore.getInstance(KeyStore.getDefaultType()); trustStore.load(null, null); } catch (Throwable t) { t.printStackTrace(); } return trustStore; } private SSLSocketFactory internalSSLSocketFactory; public MyFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException { super(truststore); SSLContext context = SSLContext.getInstance(\"TLS\"); context.init(null, null, null); internalSSLSocketFactory = context.getSocketFactory(); } @Override public Socket createSocket() throws IOException { return enableTLSOnSocket(internalSSLSocketFactory.createSocket()); } @Override public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException { return enableTLSOnSocket(internalSSLSocketFactory.createSocket(socket, host, port, autoClose)); } private Socket enableTLSOnSocket(Socket socket) { if(socket != null &amp;&amp; (socket instanceof SSLSocket)) { ((SSLSocket)socket).setEnabledProtocols(new String[] {\"TLSv1.1\", \"TLSv1.2\"}); } return socket; }} Then maybe use it in a library, for example the ancient AsyncHttpClient 123asyncHttpClient = new AsyncHttpClient();asyncHttpClient.setTimeout(HTTP_GET_TIMEOUT);asyncHttpClient.setSSLSocketFactory(new MyFactory(MyFactory.getKeyStore()));","link":"/blog/How-to-fix-SSLPeerUnverifiedException-in-Android/"},{"title":"How to handle keyboard for UITextField in scrolling UIStackView in iOS","text":"Issue #329 Firstly, to make UIStackView scrollable, embed it inside UIScrollView. Read How to embed UIStackView inside UIScrollView in iOS It‚Äôs best to listen to keyboardWillChangeFrameNotification as it contains frame changes for Keyboard in different situation like custom keyboard, languages. Posted immediately prior to a change in the keyboard‚Äôs frame. 1234567891011121314151617class KeyboardHandler { let scrollView: UIScrollView let stackView: UIStackView var observer: AnyObject? var keyboardHeightConstraint: NSLayoutConstraint! struct Info { let frame: CGRect let duration: Double let animationOptions: UIView.AnimationOptions } init(scrollView: UIScrollView, stackView: UIStackView) { self.scrollView = scrollView self.stackView = stackView }} To make scrollView scroll beyond its contentSize, we can change its contentInset.bottom. Another way is to add a dummy view with certain height to UIStackView and alter its NSLayoutConstraint constant We can‚Äôt access self inside init, so it‚Äôs best to have setup function 1234567891011121314func setup() { let space = UIView() keyboardHeightConstraint = space.heightAnchor.constraint(equalToConstant: 0) NSLayoutConstraint.on([keyboardHeightConstraint]) stackView.addArrangedSubview(spa observer = NotificationCenter.default.addObserver( forName: UIResponder.keyboardWillChangeFrameNotification, object: nil, queue: .main, using: { [weak self] notification in self?.handle(notification) } )} Convert Notification to a convenient Info struct 1234567891011121314func convert(notification: Notification) -&gt; Info? { guard let frameValue = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] NSValue, let durationotification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? NSNumber, let raw = notification.userInfo?[UIResponder.keyboardAnimationCurveUserInfoKey] NSNumber else { return nil return Info( frame: frameValue.cgRectValue, duration: duration.doubleValue, animationOptions: UIView.AnimationOptions(rawValue: raw.uintValue) )} Then we can compare with UIScreen to check if Keyboard is showing or hiding 123456789101112131415func handle(_ notification: Notification) { guard let info = convert(notification: notification) else { return let isHiding = info.frame.origin.y == UIScreen.main.bounds.height keyboardHeightConstraint.constant = isHiding ? 0 : info.frame.hei UIView.animate( withDuration: info.duration, delay: 0, options: info.animationOptions, animations: { self.scrollView.layoutIfNeeded() self.moveTextFieldIfNeeded(info: info) }, completion: nil)} To move UITextField we can use scrollRectToVisible(_:animated:) but we have little control over how much we want to scroll This method scrolls the content view so that the area defined by rect is just visible inside the scroll view. If the area is already visible, the method does nothing. Another way is to check if keyboard overlaps UITextField. To do that we use convertRect:toView: with nil target so it uses window coordinates. Since keyboard frame is always relative to window, we have frames in same coordinate space. Converts a rectangle from the receiver‚Äôs coordinate system to that of another view. rect: A rectangle specified in the local coordinate system (bounds) of the receiver.view: The view that is the target of the conversion operation. If view is nil, this method instead converts to window base coordinates. Otherwise, both view and the receiver must belong to the same UIWindow object. 1234567891011121314func moveTextFieldIfNeeded(info: Info) { guard let input = stackView.arrangedSubviews .compactMap({ $0 as? UITextField }) .first(where: { $0.isFirstResponder }) else { return let inputFrame = input.convert(input.bounds, to: nil) if inputFrame.intersects(info.frame) { scrollView.setContentOffset(CGPoint(x: 0, y: inputFrame.height), animated: true) } else { scrollView.setContentOffset(.zero, animated: true) }} Move up the entire viewFor simplicity, we can move up the entire view 12345678910111213func move(info: Info) { let isHiding = info.frame.origin.y == UIScreen.main.bounds.height let moveUp = CGAffineTransform(translationX: 0, y: -info.frame.height) switch (view.transform, isHiding) { case (.identity, false): view.transform = moveUp case (moveUp, true): view.transform = .identity default: break }} Prefer willShow and willHideThere ‚Äòs an edge case with the above switch on view.transform and isHiding with one time verification sms code, which make it into the correct case handling. It‚Äôs safe to just set view.transform depending on show with willHide and willShow 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import UIKitclass KeyboardHandler { let view: UIView var observerForWillShow: AnyObject? var observerForWillHide: AnyObject? var keyboardHeightConstraint: NSLayoutConstraint! struct Info { let frame: CGRect let duration: Double let animationOptions: UIView.AnimationOptions } init(view: UIView) { self.view = view } func setup() { observerForWillShow = NotificationCenter.default.addObserver( forName: UIResponder.keyboardWillShowNotification, object: nil, queue: .main, using: { [weak self] notification in self?.handle(notification, show: true) } ) observerForWillHide = NotificationCenter.default.addObserver( forName: UIResponder.keyboardWillHideNotification, object: nil, queue: .main, using: { [weak self] notification in self?.handle(notification, show: false) } ) } func handle(_ notification: Notification, show: Bool) { guard let info = convert(notification: notification) else { return } UIView.animate( withDuration: info.duration, delay: 0, options: info.animationOptions, animations: { self.move(info: info, show: show) }, completion: nil) } func move(info: Info, show: Bool) { let moveUp = CGAffineTransform(translationX: 0, y: -info.frame.height) if show { view.transform = moveUp } else { view.transform = .identity } } func convert(notification: Notification) -&gt; Info? { guard let frameValue = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue, let duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? NSNumber, let raw = notification.userInfo?[UIResponder.keyboardAnimationCurveUserInfoKey] as? NSNumber else { return nil } return Info( frame: frameValue.cgRectValue, duration: duration.doubleValue, animationOptions: UIView.AnimationOptions(rawValue: raw.uintValue) ) }} Read more Managing the Keyboard","link":"/blog/How-to-handle-keyboard-for-UITextField-in-scrolling-UIStackView-in-iOS/"},{"title":"How to handle reachability in iOS","text":"Issue #209 Here are what I learn about reachability handling in iOS, aka checking for internet connection. Hope you will find it useful, too. This post starts with techniques from Objective age, but many of the concepts still hold true The naive waySome API you already know in UIKit can be used for checking internet connection. Most of them are synchronous code, so you ‚Äòd better call them in a background thread 12345678- (BOOL)connectedToInternet{ NSString *string = [NSString stringWithContentsOfURL:[NSURL URLWithString:@\"http://www.google.com\"] encoding:NSUTF8StringEncoding error:nil]; return string ? YES : NO;} 12345678910- (BOOL)connectedToInternet{ NSURL *url = [NSURL URLWithString:@\"http://www.google.com\"]; NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url]; [request setHTTPMethod:@\"HEAD\"]; NSHTTPURLResponse *response; [NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error: NULL]; return ([response statusCode] == 200) ? YES : NO;} Using SystemConfiguration frameworkAfter importing the SystemConfiguration framework, you can use either SCNetworkReachabilityGetFlags to synchronously get the reachability status, or provide a callback to SCNetworkReachabilitySetCallback to be notified about reachability status change. Note that SCNetworkReachabilityGetFlags is synchronous. The System Configuration framework reachability API () operates synchronously by default. Thus, seemingly innocuous routines like SCNetworkReachabilityGetFlags can get you killed by the watchdog. If you‚Äôre using the reachability API, you should use it asynchronously. This involves using the SCNetworkReachabilityScheduleWithRunLoop routine to schedule your reachability queries on the run loop 12345678910111213141516- (BOOL) isConnectionAvailable{ SCNetworkReachabilityFlags flags; BOOL receivedFlags; SCNetworkReachabilityRef reachability = SCNetworkReachabilityCreateWithName(CFAllocatorGetDefault(), [@\"dipinkrishna.com\" UTF8String]); receivedFlags = SCNetworkReachabilityGetFlags(reachability, &amp;flags); CFRelease(reachability); if (!receivedFlags || (flags == 0) ) { return FALSE; } else { return TRUE; }} Note that SCNetworkReachabilitySetCallback notifies only when reachability status changes Assigns a client to the specified target, which receives callbacks when the reachability of the target changes Using some librariesLibraries make our life easier, but to live well with them, you must surely understand them. There are many reachability libraries on Github, but here I want to mention the most popular: Reachability from tonymillion and AFNetworkReachabilityManager (a submodule of AFNetworking) from mattt. Both use SystemConfiguration under the hood. ReachabilitySome people use Reachability like this 123456789101112131415161718192021222324- (void)testInternetConnection{ internetReachableFoo = [Reachability reachabilityWithHostname:@\"www.google.com\"]; // Internet is reachable internetReachableFoo.reachableBlock = ^(Reachability*reach) { // Update the UI on the main thread dispatch_async(dispatch_get_main_queue(), ^{ NSLog(@\"Yayyy, we have the interwebs!\"); }); }; // Internet is not reachable internetReachableFoo.unreachableBlock = ^(Reachability*reach) { // Update the UI on the main thread dispatch_async(dispatch_get_main_queue(), ^{ NSLog(@\"Someone broke the internet :(\"); }); }; [internetReachableFoo startNotifier];} Looking into the method ‚ÄústartNotifier‚Äù, you will see that it only uses SCNetworkReachabilitySetCallback and it means this callback will only be called if reachability status changes. If you want to know the reachability status directly, for example, the reachability status at app launch, you must use the method ‚ÄúisReachable‚Äù. This method under the hood uses SCNetworkReachabilityGetFlags which is synchronous, and it locks the calling thread. Reachability has reachabilityForLocalWiFi, which is interesting :) 1234567891011+(Reachability*)reachabilityForLocalWiFi{ struct sockaddr_in localWifiAddress; bzero(&amp;localWifiAddress, sizeof(localWifiAddress)); localWifiAddress.sin_len = sizeof(localWifiAddress); localWifiAddress.sin_family = AF_INET; // IN_LINKLOCALNETNUM is defined in &lt;netinet/in.h&gt; as 169.254.0.0 localWifiAddress.sin_addr.s_addr = htonl(IN_LINKLOCALNETNUM); return [self reachabilityWithAddress:&amp;localWifiAddress];} AFNetworkReachabilityManagerWith AFNetworkReachabilityManager, all you have to do is 1234567- (void)trackInternetConnection{ [[AFNetworkReachabilityManager sharedManager] startMonitoring]; [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) { // Handle the status }];} What is nice about AFNetworkReachabilityManager is that in the ‚ÄústartMonitoring‚Äù method, it both uses SCNetworkReachabilitySetCallback and calls AFNetworkReachabilityStatusForFlags to get the initial reachability status in a background thread, and calls the AFNetworkReachabilityStatusBlock. So in the user ‚Äòs point of view, all we care about is the AFNetworkReachabilityStatusBlock handler. AFNetworking has all the features that Reachability has, and its code is well structured. Another cool thing about it is that it is already in your AFNetworking pod. It‚Äôs hard to find projects without AFNetworking these days isReachableViaWWAN vs isReachableViaWiFiTake a look at the method AFNetworkReachabilityStatusForFlags and you will know the story 1234567891011121314151617static AFNetworkReachabilityStatus AFNetworkReachabilityStatusForFlags(SCNetworkReachabilityFlags flags) { [...] status = AFNetworkReachabilityStatusUnknown; if (isNetworkReachable == NO) { status = AFNetworkReachabilityStatusNotReachable; }#if TARGET_OS_IPHONE else if ((flags &amp; kSCNetworkReachabilityFlagsIsWWAN) != 0) { status = AFNetworkReachabilityStatusReachableViaWWAN; }#endif else { status = AFNetworkReachabilityStatusReachableViaWiFi; } return status;} isReachableViaWWAN is supposed to be for iOS Device How to use AFNetworkReachabilityManagerI‚Äôve asked a question here Issue 2262, you should take a look at it The safe way is not to use the sharedManager, but use managerForDomain 12345678AFNetworkReachabilityManager *afReachability = [AFNetworkReachabilityManager managerForDomain:@\"www.google.com\"]; [afReachability setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) { if (status &lt; AFNetworkReachabilityStatusReachableViaWWAN) { [FTGAlertView showMessage:@\"No internet connection\"]; } }]; [afReachability startMonitoring]; You should read the question 7 and 8 in the Reference below to know more about SCNetworkReachabilityCreateWithName vs SCNetworkReachabilityCreateWithAddress, and about the zero address Reachability.swiftIn Swift, there is this popular Reachability.swift to check for network reachability status ConnectivitySometimes, a more robust way is just to ping certain servers, that how‚Äôs Connectivy works Also, read more Solving the Captive Portal Problem on iOS In order to detect that it has connected to a Wi-Fi network with a captive portal, iOS contacts a number of endpoints hosted by Apple ‚Äî an example being https://www.apple.com/library/test/success.html. Each endpoint hosts a small HTML page of the form: Read more Reachability AFNetworkReachabilityManager How to check for internet connection synchronously? iOS: Check whether internet connection is available Check if Active Internet Connection Exists on iOS Device Technical Q&amp;A QA1693 Synchronous Networking On The Main Thread How to check for network reachability on iOS in a non-blocking manner? understanding INADDR_ANY for socket programming - c","link":"/blog/How-to-handle-reachability-in-iOS/"},{"title":"How to make convenient touch handler for UIButton in iOS","text":"Issue #308 If you don‚Äôt want to use https://github.com/onmyway133/EasyClosure yet, it‚Äôs easy to roll out a closure based UIButton. The cool thing about closure is it captures variables 1234567891011121314151617final class ClosureButton: UIButton { var didTouch: (() -&gt; Void)? override init(frame: CGRect) { super.init(frame: frame) addTarget(self, action: #selector(buttonTouched(_:)), for: .touchUpInside) } required init?(coder aDecoder: NSCoder) { fatalError() } @objc private func buttonTouched(_: UIButton) { didTouch?() }} Then in cellForItem 12345678func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell { let cell: UserCell = collectionView.dequeue(for: indexPath)! let user = users[indexPath.item] cell.powerButton.didTouch = { [weak self] in self?.openPowerView(user) } return cell} With this we can even forward touch event to another button 12345func forwardTouchEvent(button: ClosureButton) { didTouch = { [weak button] in button?.didTouch?() }} Another benefit is that we can apply debouncing to avoid successive tap on button 123456let debouncer = Debouncer(timeInterval: 0.2)@objc private func buttonTouched(_: UIButton) { debouncer.run { [weak self] in self?.didTouch?() }}","link":"/blog/How-to-make-convenient-touch-handler-for-UIButton-in-iOS/"},{"title":"How to make custom controller for View in iOS","text":"Issue #318 I do UI in code, and usually separate between View and ViewController. 1234567class ProfileView: UIView {}class ProfileViewController: UIViewController { override func loadView() { self.view = ProfileView() }} But in places where using UIViewController and manage their view controller containment hierarchy is not desired, then we can roll out a normal object to act as the controller. 1234567891011class ProfileController { let profileView: ProfileView init(profileView: ProfileView) { self.profileView = profileView } func update(profile: Profile) { profileView.nameLabel.text = profile.name }} If the name Controller sounds confusing with UIViewController, I usually use Handler, which contains other Handler to handle logic for view","link":"/blog/How-to-make-custom-controller-for-View-in-iOS/"},{"title":"How to make full screen TabView in SwiftUI","text":"Issue #507 View extends to the bottom, but not to the notch. We need to add .edgesIgnoringSafeArea(.top) to our TabView to tell TabView to extend all the way to the top. Note that if we use edgesIgnoringSafeArea(.all) then TabView ‚Äòs bar will be dragged very down and broken. 12345678910111213141516171819202122232425262728293031323334353637struct MainScreen: View { init() { UITabBar.appearance().backgroundColor = R.color.barBackground UITableView.appearance().backgroundColor = .clear UITableViewCell.appearance().backgroundColor = .clear UITableView.appearance().tableFooterView = UIView() } var body: some View { ZStack { R.color.background .edgesIgnoringSafeArea(.all) TabView { PersonalScreen() .tabItem({ Image(sfSymbol: .bagFill) Text(\"Personal\") .styleTabBarItem() }) CloudScreen() .tabItem({ Image(sfSymbol: .cloudFill) Text(\"Cloud\") .styleTabBarItem() }) SettingsScreen() .tabItem({ Image(sfSymbol: .gear) Text(\"Settings\") .styleTabBarItem() }) } .edgesIgnoringSafeArea(.top) } }}","link":"/blog/How-to-make-full-screen-TabView-in-SwiftUI/"},{"title":"How to make digit passcode input in Swift","text":"Issue #347 Add a hidden UITextField to view hierarchy, and add UITapGestureRecognizer to activate that textField. Use padding string with limit to the number of labels, and prefix to get exactly n characters. DigitView.swift 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import UIKitfinal class DigitView: UIView { lazy var stackView: UIStackView = { let view = UIStackView() view.axis = .horizontal view.distribution = .equalSpacing return view }() private(set) var boxes: [UIView] = [] private(set) var labels: [UILabel] = [] lazy var hiddenTextField: UITextField = { let textField = UITextField() textField.alpha = 0 textField.keyboardType = .numbersAndPunctuation return textField }() lazy var tapGR = UITapGestureRecognizer(target: self, action: #selector(handle(_:))) override init(frame: CGRect) { super.init(frame: frame) setup() addGestureRecognizer(tapGR) } required init?(coder aDecoder: NSCoder) { fatalError() } override func layoutSubviews() { super.layoutSubviews() boxes.forEach { $0.layer.borderWidth = 1 $0.layer.borderColor = R.color.primary.cgColor $0.layoutIfNeeded() $0.layer.cornerRadius = $0.bounds.height / 2 } } @objc private func handle(_ tapGR: UITapGestureRecognizer) { hiddenTextField.becomeFirstResponder() } private func setup() { addSubviews([hiddenTextField, stackView]) boxes = Array(0..&lt;6).map { _ in return UIView() } labels = boxes.map { box in let label = UILabel() label.font = R.customFont.semibold(16) label.textAlignment = .center label.textColor = R.color.primary box.addSubview(label) NSLayoutConstraint.on([ label.centerXAnchor.constraint(equalTo: box.centerXAnchor), label.centerYAnchor.constraint(equalTo: box.centerYAnchor) ]) return label } boxes.forEach { stackView.addArrangedSubview($0) NSLayoutConstraint.on([ $0.heightAnchor.constraint(equalTo: stackView.heightAnchor, multiplier: 0.9), $0.widthAnchor.constraint(equalTo: $0.heightAnchor, multiplier: 1.0) ]) } NSLayoutConstraint.on([ stackView.pinEdges(view: self, inset: UIEdgeInsets(top: 0, left: 16, bottom: 0, right: -16)) ]) }} DigitHandler.swift 1234567891011121314151617181920212223242526272829303132333435final class DigitHandler: NSObject { let digitView: DigitView init(digitView: DigitView) { self.digitView = digitView super.init() digitView.hiddenTextField.delegate = self digitView.hiddenTextField.addTarget(self, action: #selector(handle(_:)), for: .editingChanged) } @objc private func handle(_ textField: UITextField) { guard let text = textField.text else { return } let count = digitView.labels.count let paddedText = String(text.padding(toLength: count, withPad: \"-\", startingAt: 0).prefix(count)) zip(digitView.labels, paddedText).forEach { tuple in tuple.0.text = String(tuple.1) } }}extension DigitHandler: UITextFieldDelegate { func textFieldShouldReturn(_ textField: UITextField) -&gt; Bool { textField.resignFirstResponder() return true } func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool { let text = textField.text ?? \"\" return text.count &lt; digitView.labels.count }}","link":"/blog/How-to-make-digit-passcode-input-in-Swift/"},{"title":"How to make iOS Stretchy Header with Auto Layout","text":"Issue #27 Stretchy header is cool. People are familiar with changing frames to achieve this, like Design Teardown: Stretchy Headers. But with Auto Layout, we can achieve this with much nicer declarative constraints The demo project is StretchyHeader I use SnapKit to make it clear what constraints we need scrollViewThe scrollView should pin its 4 edges to the ViewController 's view 123456789func setupScrollView() { scrollView = UIScrollView() scrollView.delegate = self view.addSubview(scrollView) scrollView.snp_makeConstraints { make in make.edges.equalTo(view) } } scrollViewContentViewThe scrollViewContentView must pin its 4 edges to the scrollView to help determine scrollView contentSize The height of scrollViewContentView is determined by its subviews. The subviews inside must pin their top and bottom to the scrollViewContentView 123456789func setupScrollViewContentView() { scrollViewContentView = UIView() scrollView.addSubview(scrollViewContentView) scrollViewContentView.snp_makeConstraints { make in make.edges.equalTo(scrollView) make.width.equalTo(view.snp_width) } } headerThe header must pin its top to the scrollView parent, which is the ViewController 's view Read the title section, you ‚Äòll see that in order to make header stretchy, it must be pinned top and bottom But if we scroll up, there will be a constraint conflict between these pinned top and bottom constraints So we must declare headerTopConstraint priority as 999, and headerLessThanTopConstraint 12345678910111213func setupHeader() { header = UIImageView() header.image = UIImage(named: \"onepiece\")! scrollViewContentView.addSubview(header) header.snp_makeConstraints { make in // Pin header to scrollView 's parent, which is now ViewController 's view // When header is moved up, headerTopConstraint is not enough, so make its priority 999, and add another less than or equal constraint make.leading.trailing.equalTo(scrollViewContentView) self.headerTopConstraint = make.top.equalTo(view.snp_top).priority(999).constraint self.headerLessThanTopConstraint = make.top.lessThanOrEqualTo(view.snp_top).constraint } } titleThe title must pin its top to the scrollViewContentView to help determine scrollViewContentView height The title must also pin its top the header bottom in order to make header stretchy 12345678910111213141516func setupTitleLabel() { titleLabel = UILabel() titleLabel.numberOfLines = 0 titleLabel.font = UIFont.preferredFontForTextStyle(UIFontTextStyleTitle1) titleLabel.text = \"One Piece\" scrollViewContentView.addSubview(titleLabel) titleLabel.snp_makeConstraints { make in make.leading.equalTo(scrollViewContentView).offset(20) make.trailing.equalTo(scrollViewContentView).offset(-20) // Pin to the header to make it stretchy make.top.equalTo(header.snp_bottom).offset(20) // Pin to the content view to help determine scrollView contentSize make.top.equalTo(scrollViewContentView.snp_top).offset(headerHeight) } } scrollViewDidScrollThe header is always pinned to the top, unless you adjust it, here in scrollViewDidScroll Here I use Constraint, which is a class from SnapKit, but the idea is to change the constant of the NSLayoutConstraint 12345678910111213func scrollViewDidScroll(scrollView: UIScrollView) { guard let headerTopConstraint = headerTopConstraint, headerLessThanTopConstraint = headerLessThanTopConstraint else { return } let y = scrollView.contentOffset.y let offset = y &gt; 0 ? -y : 0 headerLessThanTopConstraint.updateOffset(offset) headerTopConstraint.updateOffset(offset) } By the way, did you just learn the story of One Piece :] Reference Creating parallax effect on UIScrollView using constraints ScrollviewParallax","link":"/blog/How-to-make-iOS-Stretchy-Header-with-Auto-Layout/"},{"title":"How to make generic extension with associatedtype protocol in Swift","text":"Issue #104 I like extensions, and I like to group them under 1 common property to easily access. This also makes it clear that these all belong to the same feature and not to confuse with Apple properties. Grouping all related extensionsThis is how I do it in Anchor and On 123456activate( a.anchor.top.left, b.anchor.top.right, c.anchor.bottom.left, d.anchor.bottom.right) 1234567textField.on.text { text in print(\"textField text has changed\")}textField.on.didEndEditing { text in print(\"texField has ended editing\")} Generic extensionFor On, it is a bit tricky as it needs to adapt to different NSObject subclasses. And to make auto completion work, meaning that each type of subclass gets its own function hint, we need to use generic and associatedtype protocol. You can take a look at Container and OnAware 1234567public class Container&lt;Host: AnyObject&gt;: NSObject { unowned let host: Host init(host: Host) { self.host = host }} 12345public protocol OnAware: class { associatedtype OnAwareHostType: AnyObject var on: Container&lt;OnAwareHostType&gt; { get }} RxCocoaRxSwift has its RxCocoa that does this trick too, so that you can just declare 123button.rx.taptextField.rx.textalertAction.rx.isEnabled The power lies in the struct Reactive and ReactiveCompatible protocol 1234567891011121314151617181920212223242526272829303132333435363738394041424344public struct Reactive&lt;Base&gt; { /// Base object to extend. public let base: Base /// Creates extensions with base object. /// /// - parameter base: Base object. public init(_ base: Base) { self.base = base }}public protocol ReactiveCompatible { /// Extended type associatedtype CompatibleType /// Reactive extensions. static var rx: Reactive&lt;CompatibleType&gt;.Type { get set } /// Reactive extensions. var rx: Reactive&lt;CompatibleType&gt; { get set }}extension ReactiveCompatible { /// Reactive extensions. public static var rx: Reactive&lt;Self&gt;.Type { get { return Reactive&lt;Self&gt;.self } set { // this enables using Reactive to \"mutate\" base type } } /// Reactive extensions. public var rx: Reactive&lt;Self&gt; { get { return Reactive(self) } set { // this enables using Reactive to \"mutate\" base object } }} Here UIButton+Rx you can see how it can be applied to UIButton 1234567extension Reactive where Base: UIButton { /// Reactive wrapper for `TouchUpInside` control event. public var tap: ControlEvent&lt;Void&gt; { return controlEvent(.touchUpInside) }}","link":"/blog/How-to-make-generic-extension-with-associatedtype-protocol-in-Swift/"},{"title":"How to make init with closure in Swift","text":"Issue #526 1234567public class Build: UsesXcodeBuild { public var arguments = [String]() public init(_ closure: (Build) -&gt; Void = { _ in }) { closure(self) }} Use function builder12345678910111213141516171819202122232425262728public class Workflow { public var workingDirectory: String = \".\" public let tasks: [Task] public init(@TaskBuilder builder: () -&gt; [Task]) { self.tasks = builder() self.tasks.forEach { task in task.workflow = self } } public init(@TaskBuilder builder: () -&gt; Task) { self.tasks = [builder()] self.tasks.forEach { task in task.workflow = self } }}public func run(@TaskBuilder builder: () -&gt; [Task]) { let workflow = Workflow(builder: builder) workflow.run()}public func run(@TaskBuilder builder: () -&gt; Task) { let workflow = Workflow(builder: builder) workflow.run()}","link":"/blog/How-to-make-init-with-closure-in-Swift/"},{"title":"How to make lighter AppDelegate in iOS","text":"Issue #24 There is Lighter View Controllers, and there is Lighter AppDelegate, too Since working with iOS, I really like the delegate pattern, in which it helps us defer the decision to another party. The iOS application delegates its event to AppDelegate, which over time will be a big mess. Usually, the AppDelegate is where you put your root view controller setup, crash tracking, push notification, debugging, ‚Ä¶ and we just somehow violent the Single Responsibility principle. Moreover, it makes us hard to reason about code in AppDelegate ServiceI like to think of each task in AppDelegate as a service. And the AppDelegate distributes the events into each service via ServiceDispatcher. Simple plain old composition and looping I tend to have RootService as a place to setup root view controllers It looks like this ServiceDispatcher.swift 1234567891011121314151617181920212223242526272829303132333435363738394041class ServiceDispatcher : NSObject, UIApplicationDelegate { let services: [UIApplicationDelegate] init(services: [UIApplicationDelegate]) { self.services = services } func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -&gt; Bool { services.forEach { service in service.application?(application, didFinishLaunchingWithOptions: launchOptions) } return true } func applicationDidBecomeActive(application: UIApplication) { services.forEach { service in service.applicationDidBecomeActive?(application) } } func applicationWillResignActive(application: UIApplication) { services.forEach { service in service.applicationWillResignActive?(application) } } func applicationWillEnterForeground(application: UIApplication) { services.forEach { service in service.applicationWillEnterForeground?(application) } } func applicationDidEnterBackground(application: UIApplication) { services.forEach { service in service.applicationDidEnterBackground?(application) } }} RootService.swift 12345678910111213141516171819202122232425class RootService : NSObject, UIApplicationDelegate { func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -&gt; Bool { appDelegate().window = UIWindow(frame: UIScreen.mainScreen().bounds) showHome() appDelegate().window?.makeKeyAndVisible() return true }}extension RootService { func showHome() { let home = HomeWireframe().makeHome() let navC = UINavigationController(rootViewController: home!) appDelegate().window?.rootViewController = navC }}extension RootService { func appDelegate() -&gt; AppDelegate { return UIApplication.sharedApplication().delegate as! AppDelegate }} AppDelegate.swift 123456789101112131415161718192021222324252627282930@UIApplicationMainclass AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? let serviceDispatcher = ServiceDispatcher(services: [RootService()]) func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { serviceDispatcher.application(application, didFinishLaunchingWithOptions: launchOptions) return true } func applicationWillResignActive(application: UIApplication) { serviceDispatcher.applicationWillResignActive(application) } func applicationDidEnterBackground(application: UIApplication) { serviceDispatcher.applicationDidEnterBackground(application) } func applicationWillEnterForeground(application: UIApplication) { serviceDispatcher.applicationWillEnterForeground(application) } func applicationDidBecomeActive(application: UIApplication) { serviceDispatcher.applicationDidBecomeActive(application) }} I have more services like DebugService, PushNotificationService, CrashTrackingService, ‚Ä¶ The downside to this approach is that in real life, there will be dependencies between those services, like that UserService must be called before RootService? In this case, I have to use comment to explain why I have that decision, which is hard for newcomers to understand at first. Take a look at How to Move Bootstrapping Code Out of AppDelegate for how dependencies are managed JSDecoupledAppDelegate comes with another approach, in which service events are named according to the functions, like appStateDelegate, appDefaultOrientationDelegate, watchInteractionDelegate, ‚Ä¶ But for me, Service and ServiceDispatcher suit my need Reference SERVICE-ORIENTED APPDELEGATE JSDecoupledAppDelegate How to Move Bootstrapping Code Out of AppDelegate","link":"/blog/How-to-make-lighter-AppDelegate-in-iOS/"},{"title":"How to make generic store for Codable in Swift","text":"Issue #465 Use EasyStash 123456789101112131415161718192021import EasyStashfinal class Store&lt;T: Codable &amp; ItemProtocol&gt;: Codable { var items = [T]() func bookmark(item: T) { items.append(item) } func unbookmark(item: T) { guard let index = items.firstIndex(where: { $0.itemId == item.itemId }) else { return } items.remove(at: index) } func isBookmark(item: T) -&gt; Bool { return items.contains(where: { $0.itemId == item.itemId }) }} 123456789101112import EasyStashfinal class StoreContainer { var food: Store&lt;Food&gt; static var shared = StoreContainer() let storage = try! Storage(options: Options()) init() { food = try? storage.load(forKey: \"food\", as: Store&lt;Food&gt;.self) ?? Store&lt;Food&gt;() }} If Swift has problem compiling because of generic, use try catch to declare in multiple steps in stead of ?? 1234567init() { do { self.food = try storage.load(forKey: \"food\", as: Store&lt;Food&gt;.self) } catch { self.food = Store&lt;Food&gt;() } }","link":"/blog/How-to-make-generic-store-for-Codable-in-Swift/"},{"title":"How to make radio button group in SwiftUI","text":"Issue #592 Use picker with Radio styleHard to customize 1234Picker(selection: Binding&lt;Bool&gt;.constant(true), label: EmptyView()) { Text(\"Production\").tag(0) Text(\"Sandbox\").tag(1)}.pickerStyle(RadioGroupPickerStyle()) Use custom viewUse contentShape to make whole button tappable.Make custom Binding for our enum 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253struct EnvironmentView: View { @Binding var input: Input var body: some View { VStack(alignment: .leading) { RadioButton(text: \"Production\", isOn: binding(for: .production)) RadioButton(text: \"Sandbox\", isOn: binding(for: .sandbox)) } } private func binding(for environment: Input.Environment) -&gt; Binding&lt;Bool&gt; { Binding&lt;Bool&gt;( get: { self.input.environment == environment }, set: { flag in if flag { self.input.environment = environment } } ) }}struct RadioButton: View { let text: String @Binding var isOn: Bool var body: some View { Button(action: { self.isOn.toggle() }) { HStack(alignment: .top) { Circle() .fill(isOn ? R.color.primary : Color.clear) .overlay(Circle().stroke(R.color.primary)) .frame(width: 18, height: 18) Text(text) .foregroundColor(R.color.text) } .contentShape(Rectangle()) } .buttonStyle(RadioButtonStyle()) }}struct RadioButtonStyle: ButtonStyle { func makeBody(configuration: Self.Configuration) -&gt; some View { configuration.label .padding(.vertical, 4) .padding(.horizontal, 8) .border(SeparatorShapeStyle(), width: 0) .background(Color.clear) }}","link":"/blog/How-to-make-radio-button-group-in-SwiftUI/"},{"title":"How to make material UITextField with floating label in iOS","text":"Issue #325 Use UILabel as placeholder and move it When label is moved up, scale it down 80%. It means it has 10% padding on the left and right when shrinked, so offsetX for translation is 10% Translation transform should happen before scale Ideally we can animate font and color change using CATextLayer, but with UILabel we can use UIView.transition 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117final class MaterialInputView: UIView { lazy var label: UILabel = { return UILabel() }() lazy var textField: UITextField = { let textField = UITextField() textField.tintColor = R.color.primary textField.textColor = R.color.lightText textField.font = R.customFont.medium(16) textField.autocapitalizationType = .none textField.autocorrectionType = .no return textField }() lazy var line: UIView = { let line = UIView() line.backgroundColor = R.color.primary return line }() // Whether label should be moved to top private var isUp: Bool = false { didSet { styleLabel(isUp: isUp) moveLabel(isUp: isUp) } } override init(frame: CGRect) { super.init(frame: frame) setup() } required init?(coder aDecoder: NSCoder) { fatalError() } private func setup() { addSubviews([textField, label, line]) textField.delegate = self NSLayoutConstraint.on([ textField.leftAnchor.constraint(equalTo: leftAnchor, constant: 16), textField.rightAnchor.constraint(equalTo: rightAnchor, constant: -16), textField.topAnchor.constraint(equalTo: topAnchor, constant: 16), label.leftAnchor.constraint(equalTo: textField.leftAnchor), label.centerYAnchor.constraint(equalTo: textField.centerYAnchor), line.leftAnchor.constraint(equalTo: textField.leftAnchor), line.rightAnchor.constraint(equalTo: textField.rightAnchor), line.topAnchor.constraint(equalTo: textField.bottomAnchor, constant: 8), line.heightAnchor.constraint(equalToConstant: 2) ]) styleLabel(isUp: false) } private func styleLabel(isUp: Bool) { UIView.transition( with: label, duration: 0.15, options: .curveEaseInOut, animations: { if isUp { self.label.font = R.customFont.regular(12) self.label.textColor = R.color.primary } else { self.label.font = R.customFont.medium(16) self.label.textColor = R.color.grayText } }, completion: nil ) } private func moveLabel(isUp: Bool) { UIView.animate( withDuration: 0.15, delay: 0, options: .curveEaseInOut, animations: { if isUp { let offsetX = self.label.frame.width * 0.1 let translation = CGAffineTransform(translationX: -offsetX, y: -24) let scale = CGAffineTransform(scaleX: 0.8, y: 0.8) self.label.transform = translation.concatenating(scale) } else { self.label.transform = .identity } }, completion: nil ) }}extension MaterialInputView: UITextFieldDelegate { func textFieldDidBeginEditing(_ textField: UITextField) { if !isUp { isUp = true } } func textFieldShouldEndEditing(_ textField: UITextField) -&gt; Bool { guard let text = textField.text else { return false } if isUp &amp;&amp; text.isEmpty { isUp = false } return true }}","link":"/blog/How-to-make-material-UITextField-with-floating-label-in-iOS/"},{"title":"How to make rotation in same direction in iOS","text":"Issue #571 From CGFloat.pi / 2 to -CGFloat.pi / 2 + epsilon","link":"/blog/How-to-make-rotation-in-same-direction-in-iOS/"},{"title":"How to make full width list row in SwiftUI","text":"Issue #508 We need to use frame(minWidth: 0, maxWidth: .infinity, alignment: .leading). Note that order is important, and padding should be first, and background after frame to apply color to the entire frame 12345678910111213141516171819202122232425262728293031struct BooksScreen: View { @ObservedObject var viewModel: BooksViewModel var body: some View { List { ForEach(viewModel.books) { book in RowView(vault: book) } } .listStyle(GroupedListStyle()) }}private struct RowView: View { let book: Book var body: some View { VStack(alignment: .leading) { Text(book.name) .foregroundColor(.white) .font(.headline) Text(book.text) .foregroundColor(.white) .font(.subheadline) } .padding() .frame(minWidth: 0, maxWidth: .infinity, alignment: .leading) .background(Color(hex: book.color)) .cornerRadius(8) }}","link":"/blog/How-to-make-full-width-list-row-in-SwiftUI/"},{"title":"How to make scrollable vertical NSStackView","text":"Issue #173 You might need to flip NSClipView 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import AppKitimport Anchorsimport Omniafinal class ScrollableStackView: NSView { final class FlippedClipView: NSClipView { override var isFlipped: Bool { return true } } override init(frame frameRect: NSRect) { super.init(frame: frameRect) setup() } required init?(coder decoder: NSCoder) { fatalError() } let stackView: NSStackView = withObject(NSStackView()) { $0.orientation = .vertical } private let scrollView: NSScrollView = NSScrollView() private func setup() { addSubview(scrollView) scrollView.hasVerticalScroller = true scrollView.drawsBackground = false activate( scrollView.anchor.edges ) let clipView = FlippedClipView() clipView.translatesAutoresizingMaskIntoConstraints = false clipView.drawsBackground = false scrollView.contentView = clipView activate( clipView.anchor.edges.equal.to(scrollView.anchor) ) scrollView.documentView = stackView stackView.translatesAutoresizingMaskIntoConstraints = false activate( clipView.anchor.left.top.right.equal.to(stackView.anchor) ) }} Read more https://stackoverflow.com/questions/10016475/create-nsscrollview-programmatically-in-an-nsview-cocoa/55219153#55219153","link":"/blog/How-to-make-scrollable-vertical-NSStackView/"},{"title":"How to make round border in SwiftUI","text":"Issue #597 12345678TextView(font: R.font.text!, lineCount: nil, text: $text, isFocus: $isFocus).padding(8).background(R.color.inputBackground).cornerRadius(10).overlay( RoundedRectangle(cornerRadius: 10) .stroke(isFocus ? R.color.inputBorderFocus : Color.clear, lineWidth: 1))","link":"/blog/How-to-make-round-border-in-SwiftUI/"},{"title":"How to make segmented control in SwiftUI for macOS","text":"Issue #629 Use Picker with SegmentedPickerStyle. 123456789101112Picker(selection: $preferenceManager.preference.display, label: EmptyView()) { Image(\"grid\") .resizable() .padding() .tag(0) Image(\"list\") .resizable() .tag(1)}.pickerStyle(SegmentedPickerStyle()).frame(width: 50).padding(.leading, 16).padding(.trailing, 24) Alternatively, we can make custom NSSegmentedControl 12345678910111213141516171819202122232425262728293031323334353637import AppKitimport SwiftUIstruct MySegmentControl: NSViewRepresentable { func makeCoordinator() -&gt; MySegmentControl.Coordinator { Coordinator(parent: self) } func makeNSView(context: NSViewRepresentableContext&lt;MySegmentControl&gt;) -&gt; NSSegmentedControl { let control = NSSegmentedControl( images: [ NSImage(named: NSImage.Name(\"grid\"))!, NSImage(named: NSImage.Name(\"list\"))! ], trackingMode: .selectOne, target: context.coordinator, action: #selector(Coordinator.onChange(_:)) ) return control } func updateNSView(_ nsView: NSSegmentedControl, context: NSViewRepresentableContext&lt;MySegmentControl&gt;) { } class Coordinator { let parent: MySegmentControl init(parent: MySegmentControl) { self.parent = parent } @objc func onChange(_ control: NSSegmentedControl) { } }}","link":"/blog/How-to-make-segmented-control-in-SwiftUI-for-macOS/"},{"title":"How to make scrollable NSTextView in AppKit","text":"Issue #330 When adding NSTextView in xib, we see it is embedded under NSClipView. But if we try to use NSClipView to replicate what‚Äôs in the xib, it does not scroll. To make it work, we can follow Putting an NSTextView Object in an NSScrollView and How to make scrollable vertical NSStackView to make our ScrollableInput For easy Auto Layout, we use Anchors for UIScrollView. Things worth mentioned for vertical scrolling 123textContainer.heightTracksTextView = falsetextView.autoresizingMask = [.width]textView.isVerticallyResizable = true 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class ScrollableInput: NSView { let scrollView = NSScrollView() let textView = NSTextView() override init(frame frameRect: NSRect) { super.init(frame: frameRect) let rect = CGRect( x: 0, y: 0, width: 0, height: CGFloat.greatestFiniteMagnitude ) let layoutManager = NSLayoutManager() let textContainer = NSTextContainer(size: rect.size) layoutManager.addTextContainer(textContainer) textView = NSTextView(frame: rect, textContainer: textContainer) textView.maxSize = NSSize(width: 0, height: CGFloat.greatestFiniteMagnitude) textContainer.heightTracksTextView = false textContainer.widthTracksTextView = true textView.isRichText = false textView.importsGraphics = false textView.isEditable = true textView.isSelectable = true textView.font = R.font.text textView.textColor = R.color.text textView.isVerticallyResizable = true textView.isHorizontallyResizable = false addSubview(scrollView) scrollView.hasVerticalScroller = true scrollView.drawsBackground = false scrollView.drawsBackground = false textView.drawsBackground = false activate( scrollView.anchor.edges ) scrollView.documentView = textView textView.autoresizingMask = [.width] } required init?(coder decoder: NSCoder) { fatalError() }}","link":"/blog/How-to-make-scrollable-NSTextView-in-AppKit/"},{"title":"How to make simple filter menu in css","text":"Issue #643 Use material icons 1&lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859div#filter-container { display: flex; align-items: center; justify-content: center; margin-top: 10%; height: 60px;}div#filter-items { display: inline-flex; background-color: #fff; box-shadow: 0 0 1px 0 rgba(52, 46, 173, 0.25), 0 15px 30px 0 rgba(52, 46, 173, 0.1); border-radius: 12px; overflow: hidden; padding: 10px;}a.filter-item { display: flex; flex-direction: column; justify-content: center; align-items: center; width: 100px; text-decoration: none; padding: 10px;}a.filter-item:hover { background-color: rgb(239, 240, 241); border-radius: 10px;}a.filter-item:active { transform: scale(0.9);}a.filter-item.selected { background-color: rgb(239, 240, 241); border-radius: 10px;}span.material-icons { font-family: \"Material Icons\"; display: block; margin-bottom: 4px; font-size: 26px; color: mix(#fff, #342ead, 60%); transition: 0.25s ease;}span.name { display: block; font-size: 13px; color: mix(#fff, #342ead, 70%); transition: 0.25s ease; font-family: 'Open Sans', sans-serif; font-weight: 500;} 1234567891011121314151617181920filters.forEach((filter) =&gt; { const item = document.createElement('a') item.href = '#' item.className = 'filter-item' container.appendChild(item) const icon = document.createElement('span') icon.className = 'material-icons' icon.innerText = filter.icon item.appendChild(icon) const name = document.createElement('span') name.className = 'name' name.innerText = filter.name item.appendChild(name) item.onclick = () =&gt; { handleFilterClick(item, filter) }})","link":"/blog/How-to-make-simple-filter-menu-in-css/"},{"title":"How to make container view in SwiftUI","text":"Issue #450 Following the signatures of ScrollView and Group, we can create our own container 123456public struct ScrollView&lt;Content&gt; : View where Content : View { /// The content of the scroll view. public var content: Content} 12345678910extension Group : View where Content : View { /// The type of view representing the body of this view. /// /// When you create a custom view, Swift infers this type from your /// implementation of the required `body` property. public typealias Body = Never @inlinable public init(@ViewBuilder content: () -&gt; Content)} For example, below is a FullWidth that encapsulate a child element and make it full width 12345678910111213141516171819202122232425import SwiftUIstruct FullWidth&lt;Content&gt;: View where Content: View { let content: Content var body: some View { GeometryReader { geometry in self.content .frame(width: geometry.size.width, height: geometry.size.width, alignment: .center) .padding(.bottom, geometry.size.width) } } @inlinable public init(@ViewBuilder content: () -&gt; Content) { self.content = content() }}struct FullWidth_Previews: PreviewProvider { static var previews: some View { FullWidth { Text(\"\") } }} One problem with GeometryReader is that the size of the children can‚Äôt affect the size of its container. We need to apply Geometry at the root level 123456789101112var body: some View { GeometryReader { geometry in ScrollView { VStack(alignment: .leading, spacing: 8) { Text(\"title\") RemoteImage(url: self.item.url) .frame(width: geometry.size.width, height: geometry.size.height, alignment: .center) Text(\"footer\") } } }}","link":"/blog/How-to-make-container-view-in-SwiftUI/"},{"title":"How to make simple grid gallery in css","text":"Issue #642 Specify container with flex-wrap and justify-content, and item with float: left 12345678910111213141516171819202122232425div.cards { display: flex; justify-content: center; flex-direction: row; flex-wrap: wrap; margin-top: 10%;}div.card { overflow: hidden; float: left; width: 220px; color: #232330; text-align: center; border-radius: 10px; border-color: silver; box-shadow: 1px 8px 8px rgba(10, 10, 10, 0.2); font-family: 'Open Sans', sans-serif; margin: 16px; transition: all .2s ease-in-out;}div.card:hover { transform: scale(1.2);}","link":"/blog/How-to-make-simple-grid-gallery-in-css/"},{"title":"How to make scrolling UIScrollView with Auto Layout in iOS","text":"Issue #371 Scrolling UIScrollView is used in common scenarios like steps, onboarding.From iOS 11, UIScrollView has contentLayoutGuide and frameLayoutGuide Docshttps://developer.apple.com/documentation/uikit/uiscrollview/2865870-contentlayoutguide Use this layout guide when you want to create Auto Layout constraints related to the content area of a scroll view. https://developer.apple.com/documentation/uikit/uiscrollview/2865772-framelayoutguide Use this layout guide when you want to create Auto Layout constraints that explicitly involve the frame rectangle of the scroll view itself, as opposed to its content rectangle. CodeI found out that using contentLayoutGuide and frameLayoutGuide does not work in iOS 11, when swiping to the next page, it breaks the constraints. iOS 12 works well, so we have to check iOS version Let the contentView drives the contentSize of scrollView 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495import UIKitfinal class PagerView: UIView { let scrollView = UIScrollView() private(set) var pages: [UIView] = [] private let contentView = UIView() override init(frame: CGRect) { super.init(frame: frame) setup() } required init?(coder aDecoder: NSCoder) { fatalError() } private func setup() { scrollView.isPagingEnabled = true scrollView.showsHorizontalScrollIndicator = false addSubview(scrollView) scrollView.addSubview(contentView) if #available(iOS 12.0, *) { scrollView.translatesAutoresizingMaskIntoConstraints = false contentView.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.on([ scrollView.frameLayoutGuide.pinEdges(view: self) ]) NSLayoutConstraint.on([ scrollView.contentLayoutGuide.pinEdges(view: contentView), [scrollView.contentLayoutGuide.heightAnchor.constraint( equalTo: scrollView.frameLayoutGuide.heightAnchor )] ]) } else { NSLayoutConstraint.on([ scrollView.pinEdges(view: self), scrollView.pinEdges(view: contentView) ]) NSLayoutConstraint.on([ contentView.heightAnchor.constraint(equalTo: heightAnchor) ]) } } func update(pages: [UIView]) { clearExistingViews() self.pages = pages setupConstraints() } private func setupConstraints() { pages.enumerated().forEach { tuple in let index = tuple.offset let page = tuple.element contentView.addSubview(page) NSLayoutConstraint.on([ page.topAnchor.constraint(equalTo: scrollView.topAnchor), page.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor), page.widthAnchor.constraint(equalTo: scrollView.widthAnchor) ]) if index == 0 { NSLayoutConstraint.on([ page.leftAnchor.constraint(equalTo: contentView.leftAnchor) ]) } else { NSLayoutConstraint.on([ page.leftAnchor.constraint(equalTo: pages[index - 1].rightAnchor) ]) } if index == pages.count - 1 { NSLayoutConstraint.on([ page.rightAnchor.constraint(equalTo: contentView.rightAnchor) ]) } } } private func clearExistingViews() { pages.forEach { $0.removeFromSuperview() } }} 12345678910extension UILayoutGuide { func pinEdges(view: UIView, inset: UIEdgeInsets = UIEdgeInsets.zero) -&gt; [NSLayoutConstraint] { return [ leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: inset.left), trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: inset.right), topAnchor.constraint(equalTo: view.topAnchor, constant: inset.top), bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: inset.bottom) ] }}","link":"/blog/How-to-make-scrolling-UIScrollView-with-Auto-Layout-in-iOS/"},{"title":"How to make simple Redux for SwiftUI","text":"Issue #502 Mutation is used to mutate state synchronously. Action is like intent, either from app or from user action. Action maps to Mutation in form of Publisher to work with async action, similar to redux-observable AnyReducer is a type erasure that takes the reduce function 12345678910111213141516171819202122232425262728293031323334353637383940414243import Combineimport Foundationpublic protocol Reducer { associatedtype State associatedtype Mutation func reduce(state: State, mutation: Mutation) -&gt; State}public struct AnyReducer&lt;State, Mutation&gt; { public let reduce: (State, Mutation) -&gt; State public init&lt;R: Reducer&gt;(reducer: R) where R.State == State, R.Mutation == Mutation { self.reduce = reducer.reduce }}public protocol Action { associatedtype Mutation func toMutation() -&gt; AnyPublisher&lt;Mutation, Never&gt;}public final class Store&lt;State, Mutation&gt;: ObservableObject { @Published public private(set) var state: State public let reducer: AnyReducer&lt;State, Mutation&gt; public private(set) var cancellables = Set&lt;AnyCancellable&gt;() public init(initialState: State, reducer: AnyReducer&lt;State, Mutation&gt;) { self.state = initialState self.reducer = reducer } public func send&lt;A: Action&gt;(action: A) where A.Mutation == Mutation { action .toMutation() .receive(on: DispatchQueue.main) .sink(receiveValue: update(mutation:)) .store(in: &amp;cancellables) } public func update(mutation: Mutation) { self.state = reducer.reduce(state, mutation) }} To use, conform to all the protocols. Also make typelias AppStore in order to easy specify type in SwiftUI View 12345678910111213141516171819202122232425262728293031import SwiftUIimport Combinetypealias AppStore = Store&lt;AppState, AppMutation&gt;let appStore: AppStore = AppStore( initialState: AppState(), reducer: appReducer)struct AppState: Codable { var hasShownOnboaring = false}struct AppReducer: Reducer { func reduce(state: AppState, mutation: AppMutation) -&gt; AppState { var state = state switch mutation { case .finishOnboarding: state.hasShownOnboaring = true @unknown default: break } return state }}enum AppMutation { case finishOnboarding} Use in SwiftUI 123456789101112131415161718192021struct RootScreen: View { @EnvironmentObject var store: AppStore var body: some View { if store.state.hasShownOnboaring { return Text(\"Welcome\") .eraseToAnyView() } else { return OnboardingScreen() .eraseToAnyView() } }}struct OnboardingScreen: View { @EnvironmentObject var store: AppStore private func done() { store.send(action: AppAction.finishOnboarding) }} Reference https://swiftwithmajid.com/2019/09/18/redux-like-state-container-in-swiftui/ https://github.com/mecid/swiftui-recipes-app","link":"/blog/How-to-make-simple-Redux-for-SwiftUI/"},{"title":"How to make simple Binding in MVVM in iOS","text":"Issue #103 If you use MVVM or any other kinds of helper classes, then there‚Äôs need to report back the result to the caller. In simple cases, without asynchronous chaining, RxSwift is a bit overkill, you can just implement your own Binding. Basically, it is just observer pattern, or closure in its simplest form. 123456789101112131415161718class Binding&lt;T&gt; { var value: T { didSet { listener?(value) } } private var listener: ((T) -&gt; Void)? init(value: T) { self.value = value } func bind(_ closure: @escaping (T) -&gt; Void) { closure(value) listener = closure }} Then you can declare it like 12345678910111213class ViewModel { let friends = Binding&lt;[User]&gt;(value: []) init() { getFacebookFriends { friends.value = $0 } } func getFacebookFriends(completion: ([User]) -&gt; Void) { // Do the work }} Finally, this is how you listen to the result via callback 1234567override func viewDidLoad() { super.viewDidLoad() viewModel.friends.bind { friends in self.friendsCountLabel.text = \"\\(friends.count)\" }}","link":"/blog/How-to-make-simple-Binding-in-MVVM-in-iOS/"},{"title":"How to make simple form validator in Swift","text":"Issue #328 Sometimes we want to validate forms with many fields, for example name, phone, email, and with different rules. If validation fails, we show error message. We can make simple Validator and Rule 1234567891011121314151617181920212223242526272829303132333435363738class Validator { func validate(text: String, with rules: [Rule]) -&gt; String? { return rules.compactMap({ $0.check(text) }).first } func validate(input: InputView, with rules: [Rule]) { guard let message = validate(text: input.textField.text ?? \"\", with: rules) else { input.messageLabel.isHidden = true return } input.messageLabel.isHidden = false input.messageLabel.text = message }}struct Rule { // Return nil if matches, error message otherwise let check: (String) -&gt; String? static let notEmpty = Rule(check: { return $0.isEmpty ? \"Must not be empty\" : nil }) static let validEmail = Rule(check: { let regex = #\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}\"# let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex) return predicate.evaluate(with: $0) ? nil : \"Must have valid email\" }) static let countryCode = Rule(check: { let regex = #\"^\\+\\d+.*\"# let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex) return predicate.evaluate(with: $0) ? nil : \"Must have prefix country code\" })} Then we can use very expressively 12let validator = Validator()validator.validate(input: inputView, with: [.notEmpty, .validEmail]) Then a few tests to make sure it works 1234567891011121314151617181920class ValidatorTests: XCTestCase { let validator = Validator() func testEmpty() { XCTAssertNil(validator.validate(text: \"a\", with: [.notEmpty])) XCTAssertNotNil(validator.validate(text: \"\", with: [.notEmpty])) } func testEmail() { XCTAssertNil(validator.validate(text: \"onmyway133@gmail.com\", with: [.validEmail])) XCTAssertNotNil(validator.validate(text: \"onmyway133\", with: [.validEmail])) XCTAssertNotNil(validator.validate(text: \"onmyway133.com\", with: [.validEmail])) } func testCountryCode() { XCTAssertNil(validator.validate(text: \"+47 11 222 333\", with: [.countryCode])) XCTAssertNotNil(validator.validate(text: \"11 222 333\", with: [.countryCode])) XCTAssertNotNil(validator.validate(text: \"47 11 222 333\", with: [.countryCode])) }} allSatisfyTo check if all rules are ok, we can use reduce 123func check(text: String, with rules: [Rule]) -&gt; Bool { return rules.allSatisfy({ $0.check(text).isOk })} Or more concisely, use allSatisfy 1234func check(text: String, with rules: [Rule]) -&gt; Bool { return rules.allSatisfy({ $0.check(text).isOk })}","link":"/blog/How-to-make-simple-form-validator-in-Swift/"},{"title":"How to make simple tracker via swizzling in Swift","text":"Issue #568 Code EasyTracker Swizzle viewDidAppear https://github.com/onmyway133/EasyTracker/blob/master/Sources/Trackers.swift 123456789101112131415161718192021222324252627282930313233343536373839404142import UIKitvar mapping: [String: (UIViewController) -&gt; Void] = [:]var hasSwizzled = falsepublic func track&lt;T: UIViewController&gt;(_ type: T.Type, block: @escaping (T) -&gt; Void) { let original = #selector(UIViewController.viewDidAppear(_:)) let swizled = #selector(UIViewController.trackers_viewDidAppear(_:)) if !hasSwizzled { swizzle(kClass: UIViewController.self, originalSelector: original, swizzledSelector: swizled) hasSwizzled = true } mapping[NSStringFromClass(type)] = { controller in if let controller = controller as? T { block(controller) } }}extension UIViewController { func trackers_viewDidAppear(_ animated: Bool) { trackers_viewDidAppear(animated) let string = NSStringFromClass(type(of: self)) mapping[string]?(self) }}func swizzle(kClass: AnyClass, originalSelector: Selector, swizzledSelector: Selector) { let originalMethod = class_getInstanceMethod(kClass, originalSelector) let swizzledMethod = class_getInstanceMethod(kClass, swizzledSelector) let didAddMethod = class_addMethod(kClass, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod)) if didAddMethod { class_replaceMethod(kClass, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod)) } else { method_exchangeImplementations(originalMethod, swizzledMethod) }} Track in a declarative way1234567891011track(ListController.self) { print(\"list controller has appeared\")}track(DetailController.self) { print(\"detail controller has appeared\")}track(CouponController.self) { controller in print(\"coupon controller has appeared with code \\(controller.coupon.code)\")}","link":"/blog/How-to-make-simple-tracker-via-swizzling-in-Swift/"},{"title":"How to make simple networking client in Swift","text":"Issue #222 For more mature networking, visit https://github.com/onmyway133/Miami 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293final class NetworkClient { let session: URLSession let baseUrl: URL init(session: URLSession = .shared, baseUrl: URL) { self.session = session self.baseUrl = baseUrl } func make(options: Options, completion: @escaping (Result&lt;Data, Error&gt;) -&gt; Void) { guard let request = options.toRequest(baseUrl: baseUrl) else { completion(.failure(AppError.request)) return } let task = session.dataTask(with: request, completionHandler: { data, _, error in if let data = data { completion(.success(data)) } else if let error = error { completion(.failure(error)) } else { completion(.failure(AppError.unknown)) } }) task.resume() } func makeJson(options: Options, completion: @escaping (Result&lt;[String: Any], Error&gt;) -&gt; Void) { make(options: options, completion: { result in let mapped = result.flatMap({ data -&gt; Result&lt;[String: Any], Error&gt; in do { let json = try JSONSerialization.jsonObject(with: data, options: []) if let json = json as? [String: Any] { return Result&lt;[String: Any], Error&gt;.success(json) } else { return Result&lt;[String: Any], Error&gt;.failure(AppError.parse) } } catch { return Result&lt;[String: Any], Error&gt;.failure(error) } }) completion(mapped) }) }}struct Options { var path: String = \"\" var httpMethod: HttpMethod = .get var parameters: [String: Any] = [:] func toRequest(baseUrl: URL) -&gt; URLRequest? { let url = baseUrl.appendingPathComponent(path) let items: [URLQueryItem] = parameters.map({ tuple -&gt; URLQueryItem in return URLQueryItem(name: tuple.key, value: \"\\(tuple.value)\") }) var components = URLComponents(url: url, resolvingAgainstBaseURL: false) if httpMethod == .get { components?.queryItems = items } guard let finalUrl = components?.url else { return nil } var request = URLRequest(url: finalUrl) if httpMethod == .post { let data = try? JSONSerialization.data(withJSONObject: parameters, options: []) request.httpBody = data } request.httpMethod = httpMethod.rawValue return request }}enum AppError: Error { case request case unknown case parse}enum HttpMethod: String { case get = \"GET\" case put = \"PUT\" case post = \"POST\" case patch = \"PATCH\"}","link":"/blog/How-to-make-simple-networking-client-in-Swift/"},{"title":"How to make tab view in SwiftUI","text":"Issue #614 12345678910111213141516171819202122232425262728293031323334353637383940414243444546struct MyTabView: View { @EnvironmentObject var preferenceManager: PreferenceManager var body: some View { VOrH(isVertical: preferenceManager.preference.position.isVertical) { OneTabView(image: \"one\", text: \"One\", tab: .one) OneTabView(image: \"two\", text: \"Two\", tab: .two) OneTabView(image: \"three\", text: \"Three\", tab: .three) Spacer() } }}struct OneTabView: View { @EnvironmentObject var preferenceManager: PreferenceManager let image: String let text: String let tab: Tab var selected: Bool { preferenceManager.preference.tab == tab } var body: some View { Button(action: { self.preferenceManager.preference.tab = self.tab }) { VStack(spacing: 2) { Image(image) .renderingMode(selected ? .original : .template) .resizable() .aspectRatio(contentMode: .fit) .frame(height: 20) Text(text) .font(.system(.caption, design: .rounded)) .fontWeight(selected ? .semibold : .none) } } .padding(.horizontal, 4) .buttonStyle(BorderlessButtonStyle()) .frame(width: 60, height: 50) .background(selected ? R.color.selectedTabBackground : Color.clear) .cornerRadius(4) }}","link":"/blog/How-to-make-tab-view-in-SwiftUI/"},{"title":"How to make simple search box in iOS","text":"Issue #227 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162final class SearchBox: UIView { lazy var textField: UITextField = { let textField = UITextField() let imageView = UIImageView(image: R.image.search()!) imageView.frame.size = CGSize(width: 20 + 8, height: 20) imageView.contentMode = .scaleAspectFit textField.leftView = imageView textField.leftViewMode = .always return textField }() lazy var filterButton: UIButton = { let button = UIButton(type: .custom) button.setImage(R.image.filter()!, for: .normal) button.imageEdgeInsets = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10) return button }() lazy var backView: UIView = { let view = UIView() view.backgroundColor = .white view.layer.cornerRadius = 10 view.layer.borderColor = R.color.lightGray.cgColor view.layer.borderWidth = 0.5 view.layer.shadowOffset = CGSize(width: 1, height: 1) view.layer.shadowOpacity = 0.8 view.layer.shadowColor = R.color.lightGray.cgColor return view }() override init(frame: CGRect) { super.init(frame: frame) setup() } required init?(coder aDecoder: NSCoder) { fatalError() } private func setup() { addSubviews([backView, textField, filterButton]) NSLayoutConstraint.on([ filterButton.rightAnchor.constraint(equalTo: rightAnchor, constant: -8), filterButton.centerYAnchor.constraint(equalTo: centerYAnchor), filterButton.heightAnchor.constraint(equalToConstant: 44), filterButton.widthAnchor.constraint(equalToConstant: 44), textField.centerYAnchor.constraint(equalTo: centerYAnchor), textField.leftAnchor.constraint(equalTo: leftAnchor, constant: 16), textField.rightAnchor.constraint(equalTo: filterButton.leftAnchor, constant: -8) ]) NSLayoutConstraint.on([ backView.pinEdges(view: self, inset: UIEdgeInsets(top: 4, left: 4, bottom: -4, right: -4)) ]) }} To apply padding to leftView, increase width and use contentMode 12imageView.frame.size = CGSize(width: 20 + 8, height: 20)imageView.contentMode = .scaleAspectFit To make image in button smaller, use imageEdgeInsets with all positive valuesTo have round and shadow, specify shadowOpacity, cornerRadius, shadowOffset","link":"/blog/How-to-make-simple-search-box-in-iOS/"},{"title":"How to make translucent SwiftUI List in macOS","text":"Issue #615 123456List { ForEach(books) { (book: Book) in BookRow(book: book) }}.listStyle(SidebarListStyle())","link":"/blog/How-to-make-translucent-SwiftUI-List-in-macOS/"},{"title":"How to make simple pan to dismiss view in iOS","text":"Issue #301 Make it more composable using UIViewController subclass and ThroughView to pass hit events to underlying views. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134class PanViewController: UIViewController { var animator = UIViewPropertyAnimator(duration: 0, curve: .easeOut) lazy var panGR = UIPanGestureRecognizer(target: self, action: #selector(handlePan(_: ))) let slideView = UIView() let gripView = UIView() var options: Options = Options() var didHide: (() -&gt; Void)? let pullDownVelocity: CGFloat = 70 class Options { var contentView: UIView = UIView() var percentHeight: CGFloat = 0.24 } override func loadView() { view = ThroughView() view.translatesAutoresizingMaskIntoConstraints = false } override func viewDidLoad() { super.viewDidLoad() setup() } func setup() { slideView.layer.cornerRadius = 10 slideView.clipsToBounds = true gripView.backgroundColor = UIColor.yellow gripView.layer.cornerRadius = 1 view.addSubview(slideView) slideView.addSubview(gripView) slideView.addGestureRecognizer(panGR) NSLayoutConstraint.on([ slideView.leftAnchor.constraint(equalTo: view.leftAnchor), slideView.rightAnchor.constraint(equalTo: view.rightAnchor), slideView.heightAnchor.constraint(equalTo: view.heightAnchor), slideView.topAnchor.constraint(equalTo: view.bottomAnchor) ]) NSLayoutConstraint.on([ gripView.centerXAnchor.constraint(equalTo: slideView.centerXAnchor), gripView.topAnchor.constraint(equalTo: slideView.topAnchor, constant: 16), gripView.widthAnchor.constraint(equalToConstant: 30), gripView.heightAnchor.constraint(equalToConstant: 2) ]) } func apply(options: Options) { self.options.contentView.removeFromSuperview() slideView.insertSubview(options.contentView, at: 0) NSLayoutConstraint.on([ options.contentView.leftAnchor.constraint(equalTo: slideView.leftAnchor), options.contentView.rightAnchor.constraint(equalTo: slideView.rightAnchor), options.contentView.topAnchor.constraint(equalTo: slideView.topAnchor), options.contentView.heightAnchor.constraint(equalTo: slideView.heightAnchor, multiplier: options.percentHeight) ]) self.options = options } @objc func handlePan(_ gr: UIPanGestureRecognizer) { switch gr.state { case .began: break case .changed: break case .ended: let velocity = gr.velocity(in: slideView) if velocity.y &gt; pullDownVelocity { hide() } default: break } } func show() { guard let parentView = view.superview else { return } animator = self.makeAnimator() animator.addAnimations { self.slideView.transform = CGAffineTransform( translationX: 0, y: -parentView.bounds.height * self.options.percentHeight - parentView.safeAreaInsets.bottom ) } animator.startAnimation() } func hide() { animator = self.makeAnimator() animator.addAnimations { self.slideView.transform = CGAffineTransform.identity } animator.addCompletion({ _ in self.didHide?() }) animator.startAnimation() } func makeAnimator() -&gt; UIViewPropertyAnimator { return UIViewPropertyAnimator(duration: 0.25, dampingRatio: 1.0) }}class ThroughView: UIView { override func didMoveToSuperview() { super.didMoveToSuperview() guard let superview = superview else { return } NSLayoutConstraint.on([pinEdges(view: superview)]) } override func point(inside point: CGPoint, with event: UIEvent?) -&gt; Bool { guard let slideView = subviews.first else { return false } return slideView.hitTest(convert(point, to: slideView), with: event) != nil }}","link":"/blog/How-to-make-simple-pan-to-dismiss-view-in-iOS/"},{"title":"How to manage work","text":"Issue #619 Remote Remote by Basecamp Remote Work Guides Communication The Basecamp Guide to Internal Communication Plan The Six Week Cycle","link":"/blog/How-to-manage-work/"},{"title":"How to make tooltip in SwiftUI for macOS","text":"Issue #617 Create empty NSView and use as overlay. Need to updateNSView in case we toggle the state of tooltip 123456789101112131415import SwiftUIstruct Tooltip: NSViewRepresentable { let tooltip: String func makeNSView(context: NSViewRepresentableContext&lt;Tooltip&gt;) -&gt; NSView { let view = NSView() view.toolTip = tooltip return view } func updateNSView(_ nsView: NSView, context: NSViewRepresentableContext&lt;Tooltip&gt;) { nsView.toolTip = tooltip }} 123456Button(action: self.onGear) { Image(\"gear\") .styleButton()}.overlay(Tooltip(tooltip: \"Settings\")).buttonStyle(BorderlessButtonStyle()) Sometimes it‚Äôs better to add overlay tooltip to Image inside Button to avoid blocking 123456Button(action: self.onGear) { Image(\"gear\") .styleButton() .overlay(Tooltip(tooltip: \"Settings\"))}.buttonStyle(BorderlessButtonStyle())","link":"/blog/How-to-make-tooltip-in-SwiftUI-for-macOS/"},{"title":"How to make simple traffic simulation in Javascript","text":"Issue #400 Use prototype.js for inheritance Use enchant.js for 2d game logic Code https://github.com/onmyway133/traffic_simulator","link":"/blog/How-to-make-simple-traffic-simulation-in-Javascript/"},{"title":"How to make Swift Package Manager package for multiple platforms","text":"Issue #504 https://twitter.com/NeoNacho/status/1181245484867801088?s=20 There‚Äôs no way to have platform specific sources or targets today, so you‚Äôll have to take a different approach. I would recommend wrapping all OS specific files in #if os and just having one target. For tests, you could do something similar, one test target, but conditional tests Every files are in Sources folder, so we can use platform and version checks. For example Omnia is a Swift Package Manager that supports iOS, tvOS, watchOS, macOS and Catalyst. For macOS only code, need to check for AppKit and Catalyst https://github.com/onmyway133/Omnia/blob/master/Sources/macOS/ClickedCollectionView.swift 1#if canImport(AppKit) &amp;&amp; !targetEnvironment(macCatalyst) For SwiftUI feature, need to check for iOS 13 and macOS 10.15 https://github.com/onmyway133/Omnia/blob/master/Sources/SwiftUI/Utils/ImageLoader.swift 1@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)","link":"/blog/How-to-make-Swift-Package-Manager-package-for-multiple-platforms/"},{"title":"How to mask with UILabel","text":"Issue #603 Need to set correct frame for mask layer or UILabel, as it is relative to the coordinate of the view to be masked 123456789let aView = UIView(frame: .init(x: 100, y: 110, width: 200, height: 100))let textLayer = CATextLayer()textLayer.foregroundColor = UIColor.white.cgColortextLayer.string = \"Hello world\"textLayer.font = UIFont.preferredFont(forTextStyle: .largeTitle)textLayer.frame = aView.boundsaView.layer.mask = textLayer Use sizeToFit to ensure frame for UILabel 123456789let label = UILabel()label.frame.origin = CGPoint(x: 80, y: 80)label.textColor = UIColor.blacklabel.font = UIFont.preferredFont(forTextStyle: .largeTitle)label.text = \"ABC\"label.sizeToFit()aView.mask = label Change bounds.origin 12label.frame.origin = CGPoint(x: 50, y: 50)aView.bounds.origin = label.frame.origin Adding label to view hierarchy seems to remove masking effect. Need to set mask later 123view.addSubview(aView)view.addSubview(label)aView.mask = label Can‚Äôt add overlayView to UILabel and use UILabel as mask, cause cycler CALayer After using UILabel as mask, its superview is nil 12aView.mask = labellabel.superview == nil Mask with snapshot from UILabel. Need to set correct frame for aView and maskLayer 1234567891011121314151617let maskLayer = CALayer()maskLayer.contents = label.makeScreenshot().cgImagemaskLayer.contentsGravity = .resizeAspectaView.frame = label.boundsmaskLayer.frame = aView.boundsaView.layer.mask = maskLayerlabel.addSubview(aView)extension UIView { func makeScreenshot() -&gt; UIImage { let renderer = UIGraphicsImageRenderer(bounds: self.bounds) return renderer.image { (context) in self.layer.render(in: context.cgContext) } }}","link":"/blog/How-to-mask-with-UILabel/"},{"title":"How to make view take up full width in vertical NSStackView","text":"Issue #172 https://stackoverflow.com/questions/51644692/nsstackview-subviews-not-resizing-sub-stack-views/55220837#55220837 If you want child view inside vertical NSStackView to fill its parent width, then reduce contentCompressionResistancePriority 1234567891011121314151617myChildView.translatesAutoresizingMaskIntoConstraints = falsemyChildView.setContentCompressionResistancePriority( NSLayoutConstraint.Priority(rawValue: 1), for: .horizontal)NSLayoutConstraint.activate([ myChildView.heightAnchor.constraint(equalToConstant: 50)])NSAnimationContext.runAnimationGroup({context in context.duration = 0.25 context.allowsImplicitAnimation = true stackView.insertArrangedSubview(myChildView, at: 1) view.layoutSubtreeIfNeeded()}, completionHandler: nil)","link":"/blog/How-to-make-view-take-up-full-width-in-vertical-NSStackView/"},{"title":"How to map error in Combine","text":"Issue #506 When a function expects AnyPublisher&lt;[Book], Error&gt; but in mock, we have Just 1234567func getBooks() -&gt; AnyPublisher&lt;[Book], Error&gt; { return Just([ Book(id: \"1\", name: \"Book 1\"), Book(id: \"2\", name: \"Book 2\"), ]) .eraseToAnyPublisher()} There will be a mismatch, hence compile error Cannot convert return expression of type ‚ÄòAnyPublisher&lt;[Book], Just.Failure&gt;‚Äô (aka ‚ÄòAnyPublisher&lt;Array, Never&gt;‚Äô) to return type ‚ÄòAnyPublisher&lt;[Book], Error&gt;‚Äô The reason is because Just produces Never, not Error. The workaround is to introduce Error 123enum AppError: Error { case impossible} 12345678func getBooks() -&gt; AnyPublisher&lt;[Book], Error&gt; { return Just([ Book(id: \"1\", name: \"Book 1\"), Book(id: \"2\", name: \"Book 2\"), ]) .mapError({ _ in AppError.impossible }) .eraseToAnyPublisher()}","link":"/blog/How-to-map-error-in-Combine/"},{"title":"How to mock in Swift","text":"Issue #596 Unavailable init12345UNUserNotificationCenter.current().getNotificationSettings(completionHandler: { (settings: UNNotificationSettings) in let status: UNAuthorizationStatus = .authorized settings.setValue(status.rawValue, forKey: \"authorizationStatus\") completionHandler(settings)})","link":"/blog/How-to-mock-in-Swift/"},{"title":"How to map from Swift 5 Resul to RxSwift PublishSubject","text":"Issue #214 12345678910extension Result { func to(subject: PublishSubject&lt;Success&gt;) { switch self { case .success(let value): subject.onNext(value) case .failure(let error): subject.onError(error) } }}","link":"/blog/How-to-map-from-Swift-5-Resul-to-RxSwift-PublishSubject/"},{"title":"How to master Auto Layout Visual Format Language","text":"Issue #47 No, you don‚Äôt","link":"/blog/How-to-master-Auto-Layout-Visual-Format-Language/"},{"title":"How to migrate Codable object in Swift","text":"Issue #83 As of swift 4 migration, we updated Cache to fully take advantage of Codable. It works for most cases, as we should usually declare our entity as typed safe object instead of array or json dictionary. And by conforming to Codable, it is easily encoded and decoded to and from json data. And persisting them to Cache is as easy as eating cookie. The other day, I saw someone asking on how to migrate if the model changes https://github.com/hyperoslo/Cache/issues/153, and he likes the way Realm does https://realm.io/docs/swift/latest/#migrations 123456789101112131415Realm.Configuration.defaultConfiguration = Realm.Configuration( schemaVersion: 1, migrationBlock: { migration, oldSchemaVersion in if (oldSchemaVersion &lt; 1) { // The enumerateObjects(ofType:_:) method iterates // over every Person object stored in the Realm file migration.enumerateObjects(ofType: Person.className()) { oldObject, newObject in // combine name fields into a single field let firstName = oldObject![\"firstName\"] as! String let lastName = oldObject![\"lastName\"] as! String newObject![\"fullName\"] = \"\\(firstName) \\(lastName)\" } } }) I think we can rely on Codable to the migration. FYI, here is the PR https://github.com/hyperoslo/Cache/pull/154 Class name changeI see Codable is based on json, and the importance of json is its data structure, not the class name. So if you change the class name, it still works. First, we save model of type Person, later we load model of type Alien. It works because the structure stays the same 12345678910111213141516struct Person: Codable { let firstName: String let lastName: String}struct Alien: Codable { let firstName: String let lastName: String}let person = Person(firstName: \"John\", lastName: \"Snow\")try! storage.setObject(person, forKey: \"person\")// As long as it has same properties, it works toolet cachedObject = try! storage.object(ofType: Alien.self, forKey: \"person\")XCTAssertEqual(cachedObject.firstName, \"John\") Property changeIf the property changes, then you need to do a little work of migration. First, we save model of type Person1, it has just fullName. Later we change the model to Person2 with some new properties. To do the migration, we need to load model with old Person1 first, then construct a new model Person2 based on this Person1. Finally, save that to Cache with the same key. 12345678910111213141516171819202122232425struct Person1: Codable { let fullName: String}struct Person2: Codable { let firstName: String let lastName: String}// Firstly, save object of type Person1let person = Person1(fullName: \"John Snow\")try! storage.setObject(person, forKey: \"person\")XCTAssertNil(try? storage.object(ofType: Person2.self, forKey: \"person\"))// Later, convert to Person2, do the migration, then overwritelet tempPerson = try! storage.object(ofType: Person1.self, forKey: \"person\")let parts = tempPerson.fullName.split(separator: \" \")let migratedPerson = Person2(firstName: String(parts[0]), lastName: String(parts[1]))try! storage.setObject(migratedPerson, forKey: \"person\")XCTAssertEqual( try! storage.object(ofType: Person2.self, forKey: \"person\").firstName, \"John\")","link":"/blog/How-to-migrate-Codable-object-in-Swift/"},{"title":"How to mock grpc model in Swift","text":"Issue #306 123456789let json: [String: Any] = [ \"id\": \"123\", \"name\": \"Thor\", \"isInMarvel\": true]let data = try JSONSerialization.data(withJSONObject: json, options: [])let string = String(data: data, encoding: .utf8)!return try Hero(jsonString: string) If we use withValue from How to simplify struct mutating in Swift then we can mock easily 123456789extension Hero { static func mock() -&gt; Hero { return withValue(Hero()) { $0.id = \"123\" $0.name = \"Thor\" $0.isInMarvel = true } }}","link":"/blog/How-to-mock-grpc-model-in-Swift/"},{"title":"How to move tab bar icons down in iOS","text":"Issue #250 UITabBarItem subclasses from UIBarItem which has imageInsets. We need both top and bottom to avoid shrinking 1viewController1.tabBarItem.imageInsets = UIEdgeInsets(top: 10, left: 0, bottom: -10, right: 0)","link":"/blog/How-to-move-tab-bar-icons-down-in-iOS/"},{"title":"How to not use isRemovedOnCompletion for CAAnimation in iOS","text":"Issue #228 CAAnimation is about presentation layer, after animation completes, the view snaps back to its original state. If we want to keep the state after animation, then the wrong way is to use CAMediaTimingFillMode.forward and isRemovedOnCompletion Animation never endsforwards https://developer.apple.com/documentation/quartzcore/camediatimingfillmode/1427658-forwards The receiver remains visible in its final state when the animation is completed. isRemovedOnCompletion https://developer.apple.com/documentation/quartzcore/caanimation/1412458-isremovedoncompletion When true, the animation is removed from the target layer‚Äôs animations once its active duration has passed. Defaults to true. 12layer.fillMode = .forwardsanimation. isRemovedOnCompletion = false This is to tell the animation to never ends and keep its last presentation state. Wrong approach ‚ùóÔ∏è Set final state before calling animationThe presentation state is just for animation, the source of truth lies in the layer itself. We need to set the final state before calling animation 1234let animation = CABasicAnimation(keyPath: #keyPath(CAShapeLayer.strokeEnd))shapeLayer.strokeEnd = 1.0shapeLayer.add(animation, forKey: \"\")","link":"/blog/How-to-not-use-isRemovedOnCompletion-for-CAAnimation-in-iOS/"},{"title":"How to observe focus event of NSTextField in macOS","text":"Issue #589 becomeFirstResponder123456789101112131415class FocusAwareTextField: NSTextField { var onFocusChange: (Bool) -&gt; Void = { _ in } override func becomeFirstResponder() -&gt; Bool { let textView = window?.fieldEditor(true, for: nil) as? NSTextView textView?.insertionPointColor = R.nsColor.action onFocusChange(true) return super.becomeFirstResponder() }}textField.delegate // NSTextFieldDelegatefunc controlTextDidEndEditing(_ obj: Notification) { onFocusChange(false)} NSTextField and NSTexthttps://stackoverflow.com/questions/25692122/how-to-detect-when-nstextfield-has-the-focus-or-is-its-content-selected-cocoa When you clicked on search field, search field become first responder once, but NSText will be prepared sometime somewhere later, and the focus will be moved to the NSText. I found out that when NSText is prepared, it is set to self.currentEditor() . The problem is that when becomeFirstResponder()‚Äôs call, self.currentEditor() hasn‚Äôt set yet. So becomeFirstResponder() is not the method to detect it‚Äôs focus. On the other hand, when focus is moved to NSText, text field‚Äôs resignFirstResponder() is called, and you know what? self.currentEditor() has set. So, this is the moment to tell it‚Äôs delegate that that text field got focused Use NSTextViewAny time you want to customize NSTextField, use NSTextView instead 12345678// NSTextViewDelegatefunc textDidBeginEditing(_ notification: Notification) { parent.isFocus = true}func textDidEndEditing(_ notification: Notification) { parent.isFocus = false}","link":"/blog/How-to-observe-focus-event-of-NSTextField-in-macOS/"},{"title":"How to not resign first responder for UITextField in iOS","text":"Issue #353 When using STPPaymentCardTextField from stripe-ios, the default behavior is when we touch outside to dismiss keyboard, it checks and focus on number text field is it is invalid STPPaymentCardTextField.m 12345678910111213141516171819202122- (STPFormTextField *)currentFirstResponderField { for (STPFormTextField *textField in [self allFields]) { if ([textField isFirstResponder]) { return textField; } } return nil;}- (BOOL)canResignFirstResponder { return [self.currentFirstResponderField canResignFirstResponder];}- (BOOL)resignFirstResponder { [super resignFirstResponder]; BOOL success = [self.currentFirstResponderField resignFirstResponder]; [self layoutViewsToFocusField:nil animated:YES completion:nil]; [self updateImageForFieldType:STPCardFieldTypeNumber]; return success;} Then it calls [self.numberField becomeFirstResponder]; is validation on number fails 1234567891011121314typedef void (^STPLayoutAnimationCompletionBlock)(BOOL completed);- (void)layoutViewsToFocusField:(NSNumber *)focusedField animated:(BOOL)animated completion:(STPLayoutAnimationCompletionBlock)completion { NSNumber *fieldtoFocus = focusedField; if (fieldtoFocus == nil &amp;&amp; ![self.focusedTextFieldForLayout isEqualToNumber:@(STPCardFieldTypeNumber)] &amp;&amp; ([self.viewModel validationStateForField:STPCardFieldTypeNumber] != STPCardValidationStateValid)) { fieldtoFocus = @(STPCardFieldTypeNumber); [self.numberField becomeFirstResponder]; }} isUserInteractionEnabledBe aware to use isUserInteractionEnabled on STPPaymentCardTextField as that can resign first responder when set to true and become first responder when set to false","link":"/blog/How-to-not-resign-first-responder-for-UITextField-in-iOS/"},{"title":"How to make multiline Text in SwiftUI in watchOS","text":"Issue #482 lineLimit does not seem to work, use fixedSize instead Fixes this view at its ideal size. A view that fixes this view at its ideal size in the dimensions given in fixedDimensions. 123456789extension Text { func styleText() -&gt; some View { return self .font(.footnote) .foregroundColor(.gray) .lineLimit(10) .fixedSize(horizontal: false, vertical: true) }}","link":"/blog/How-to-make-multiline-Text-in-SwiftUI-in-watchOS/"},{"title":"How to notarize macOS app","text":"Issue #203 New Notarization Requirementshttps://developer.apple.com/news/?id=04102019a With the public release of macOS 10.14.5, we require that all developers creating a Developer ID certificate for the first time notarize their apps, and that all new and updated kernel extensions be notarized as well Signing Your Apps for Gatekeeperhttps://developer.apple.com/developer-id/ Unpublished Software. It‚Äôs easy to get unpublished software notarized with the Export process or xcodebuild. Custom build workflows are supported by the xcrun altool command line tool for uploading, and you can use xcrun stapler to attach the ticket to the package. Published Software. To submit software you‚Äôve already published, upload it using the xcrun altool command line tool. Several file types are supported, including .zip, .pkg, and .dmg, so you can upload the same package you already distribute to users. Notarizing Your App Before Distributionhttps://developer.apple.com/documentation/security/notarizing_your_app_before_distribution When you click Next, Xcode uploads your archive to the notary service. When the upload is complete, the notary service begins the scanning process, which usually takes less than an hour. While the notary service scans your software, you can continue to prepare your archive for distribution. For example, you can export the archive and perform any final testing that you require prior to making your software available to customers. When the notarization process finishes, Xcode downloads the ticket and staples it to your archive. At that point, export your archive again to receive a distributable version of your software that includes the notary ticket. Upload a macOS app to be notarizedhttps://help.apple.com/xcode/mac/current/#/dev88332a81e First, upload your macOS app to Apple to be notarized. If the upload fails, view the upload logs to find the problem. For example, you must enable hardened runtime (macOS) before you upload the app. Otherwise, check the notarization status and when the status is ‚ÄúReady for distribution‚Äù, export the app for distribution. Distribute outside the Mac App Store (macOS)https://help.apple.com/xcode/mac/current/#/dev033e997ca In some cases, you may want to distribute an app outside of the Mac App Store. Because the app won‚Äôt be distributed by Apple, assure users that you are a trusted developer by signing your app with a Developer ID certificate. Users gain additional assurance if your Developer ID-signed app is also notarized by Apple. On macOS, if your app isn‚Äôt downloaded from the Mac App Store or signed with a Developer ID certificate, it won‚Äôt launch unless the user completely disables Gatekeeper. Users have the option of enabling or disabling identified developers in System Preferences.","link":"/blog/How-to-notarize-macOS-app/"},{"title":"How to observe object deinit in Swift","text":"Issue #70 Today I was browsing through Suas-iOS and the subscription links to life cycle of another object 1subscription.linkLifeCycleTo(object: self) It observes the deinit of another job, interesting approach üëç , take a look in https://github.com/zendesk/Suas-iOS/blob/master/Sources/StoreDeinitCallback.swift 123456789101112131415161718192021222324252627282930var deinitCallbackKey = \"DEINITCALLBACK_SUAS\"// MARK: Registartionextension Suas { static func onObjectDeinit(forObject object: NSObject, callbackId: String, callback: @escaping () -&gt; ()) { let rem = deinitCallback(forObject: object) rem.callbacks.append(callback) } static fileprivate func deinitCallback(forObject object: NSObject) -&gt; DeinitCallback { if let deinitCallback = objc_getAssociatedObject(object, &amp;deinitCallbackKey) as? DeinitCallback { return deinitCallback } else { let rem = DeinitCallback() objc_setAssociatedObject(object, &amp;deinitCallbackKey, rem, .OBJC_ASSOCIATION_RETAIN_NONATOMIC) return rem } }}@objc fileprivate class DeinitCallback: NSObject { var callbacks: [() -&gt; ()] = [] deinit { callbacks.forEach({ $0() }) }}","link":"/blog/How-to-observe-object-deinit-in-Swift/"},{"title":"How to not use protocol extension in Swift","text":"Issue #542 With protocol extensionSee code Puma 1Build is UsesXcodeBuild is UsesCommandLine 123456789101112131415161718192021222324252627282930313233343536373839404142/// Any task that uses command linepublic protocol UsesCommandLine: AnyObject {}public extension UsesCommandLine { func runBash( workflow: Workflow, program: String, arguments: [String], processHandler: ProcessHandler = DefaultProcessHandler() ) throws { // Code } func runProcess( _ process: Process, workflow: Workflow, processHandler: ProcessHandler = DefaultProcessHandler() ) throws { // Code }}/// Any task that uses xcodebuildpublic protocol UsesXcodeBuild: UsesCommandLine { var xcodebuild: Xcodebuild { get set }}public extension UsesXcodeBuild { func runXcodeBuild(workflow: Workflow) throws { try runBash( workflow: workflow, program: \"xcodebuild\", arguments: xcodebuild.arguments, processHandler: XcodeBuildProcessHandler() ) }}public class Build: UsesXcodeBuild { public var isEnabled = true public var xcodebuild = Xcodebuild()} Without protocol extension1Build has Xcodebuild has CommandLine 12345678910111213public struct Xcodebuild { var arguments: [String] = [] @discardableResult func run(workflow: Workflow) throws -&gt; String { return try CommandLine().runBash( workflow: workflow, program: \"xcodebuild\", arguments: arguments, processHandler: XcodeBuildProcessHandler() ) }}","link":"/blog/How-to-not-use-protocol-extension-in-Swift/"},{"title":"How to organise test files","text":"Issue #327 In terms of tests, we usually have files for unit test, UI test, integeration test and mock. Out of sight, out of mind. Unit tests are for checking specific functions and classes, it‚Äôs more convenient to browse them side by side with source file. For example in Javascript, Kotlin and Swift 123index.jsindex.test.jsindex.mock.js 123LocationManager.ktLocationManager.mock.ktLocationManager.test.kt 123BasketHandler.swiftBasketHandler.mock.swiftBasketHandler.test.swift Integration tests check features or sub features, and may cover many source files, it‚Äôs better to place them in feature folders 1234567891011- Features - Cart - Sources - Tests - Cart.test.swift - Validator.test.swift - Profile - Sources - Tests - Updater.test.swift - AvatarUploader.test.swift","link":"/blog/How-to-organise-test-files/"},{"title":"How to overlay view on another view in React Native","text":"Issue #254 Original post https://stackoverflow.com/a/54108708/1418457 Make our own convenient OverlayContainer. The trick is to use absolute with 100% size 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// @flowimport React from 'react'import { View, StyleSheet } from 'react-native'type Props = { behind: React.Component, front: React.Component, under: React.Component}// Show something on top of otherexport default class OverlayContainer extends React.Component&lt;Props&gt; { render() { const { behind, front, under } = this.props return ( &lt;View style={styles.container}&gt; &lt;View style={styles.center}&gt; &lt;View style={styles.behind}&gt; {behind} &lt;/View&gt; {front} &lt;/View&gt; {under} &lt;/View&gt; ) }}const styles = StyleSheet.create({ container: { flex: 1, alignItems: 'center', height: 100, justifyContent: 'center', }, center: { width: '100%', height: '100%', alignItems: 'center', justifyContent: 'center', }, behind: { alignItems: 'center', justifyContent: 'center', position: 'absolute', left: 0, top: 0, width: '100%', height: '100%' }})","link":"/blog/How-to-overlay-view-on-another-view-in-React-Native/"},{"title":"How to modify data inside array in SwiftUI","text":"Issue #516 Suppose we have an array of SearchObject, and user can enter search query into text property. 12345678910class SearchObject: ObservableObject { let name: String let search: (String) -&gt; [Country] var text: String = \"\" init(name: String, search: @escaping (String) -&gt; [Country]) { self.name = name self.search = search }} Although SearchObject is class, when we use ForEach, the changes to passed object won‚Äôt be reflected in our array and there is no reload trigger, we need to point to object in array directly, like 1self.$searchObjects[index].text 123456789101112131415161718192021222324struct SearchScreen: View { @State var searchObjects: [SearchObject] = [ SearchObject(name: \"By name\", search: { CountryManager.shared.search(byName: $0) }), SearchObject(name: \"By calling code\", search: { CountryManager.shared.search(byCallingCode: $0) }), SearchObject(name: \"By domain\", search: { CountryManager.shared.search(byDomain: $0) }), SearchObject(name: \"By language\", search: { CountryManager.shared.search(byLanguage: $0) }) ] var body: some View { ScrollView { VStack(alignment: .leading) { ForEach(searchObjects.enumerated().map({ $0 }), id: \\.element.name, content: { index, searchObject in VStack(alignment: .leading) { Text(searchObject.name) .styleLabel() TextField(searchObject.textFieldName, text: self.$searchObjects[index].text) .styleTitle() self.makeButton(searchObject: self.searchObjects[index]) } }) } } }}","link":"/blog/How-to-modify-data-inside-array-in-SwiftUI/"},{"title":"How to overload functions in Swift","text":"Issue #211 FunctionFunctions in Swift are distinguishable by parameter label parameter type return type so that these are all valid, and works for subscript as well 12345678910111213141516171819202122232425262728struct A { // return type func get() -&gt; String { return \"\" } func get() -&gt; Int { return 1 } // mix of parameter type and return type func get(param: String) -&gt; String { return \"\" } func get(param: String) -&gt; Int { return 1 } func get(param: Int) -&gt; Int { return 1 } func get(param: Int) -&gt; String { return \"\" } subscript(param: String) -&gt; String { return \"\" } subscript(param: String) -&gt; Int { return 1 } subscript(param: Int) -&gt; Int { return 1 } subscript(param: Int) -&gt; String { return \"\" } // parameter label func set(int: Int) {} func set(string: String) {} // concrete type from generic func get(param: Array&lt;String&gt;) -&gt; String { return \"\" } func get(param: Array&lt;Int&gt;) -&gt; Int { return 1 } subscript(param: Array&lt;String&gt;) -&gt; String { return \"\" } subscript(param: Array&lt;Int&gt;) -&gt; Int { return 1 }} When you specialize a generic type, like Array&lt;Int&gt;, you‚Äôre actually using a concrete type Unfortunately, this does not work for NSObject subclass Method ‚Äòget()‚Äô with Objective-C selector ‚Äòget‚Äô conflicts with previous declaration with the same Objective-C selector 12345class B: NSObject { func get() -&gt; String { return \"\" } func get() -&gt; Int { return 1 }} Generic functionWe can overload generic functions as well 1234567891011func f&lt;T&gt;(t: T) { print(\"T\")}func f(string: String) { print(\"String\")}func f(int: Int) { print(\"Int\")}","link":"/blog/How-to-overload-functions-in-Swift/"},{"title":"How to present NSWindow modally","text":"Issue #612 Use runModal This method runs a modal event loop for the specified window synchronously. It displays the specified window, makes it key, starts the run loop, and processes events for that window. (You do not need to show the window yourself.) While the app is in that loop, it does not respond to any other events (including mouse, keyboard, or window-close events) unless they are associated with the window. It also does not perform any tasks (such as firing timers) that are not associated with the modal run loop. In other words, this method consumes only enough CPU time to process events and dispatch them to the action methods associated with the modal window. Specify level in windowDidBecomeKey 123456789101112131415161718192021222324252627let controller = SettingsWindowController()NSApp.runModal(for: controller.window!)final class SettingsWindowController: NSWindowController, NSWindowDelegate { init() { let mainView = SettingsView() let window = NSWindow( contentRect: CGRect(x: 0, y: 0, width: 500, height: 300), styleMask: [.titled, .closable], backing: .buffered, defer: false ) let hosting = NSHostingView(rootView: mainView) window.contentView = hosting super.init(window: window) window.delegate = self } func windowDidBecomeKey(_ notification: Notification) { window?.level = .statusBar } func windowWillClose(_ notification: Notification) { NSApp.stopModal() }}","link":"/blog/How-to-present-NSWindow-modally/"},{"title":"How to parse json in Go","text":"Issue #199 Unmarshal using encoding/json property in struct needs to be first letter capitalized 123456789101112131415161718192021222324252627282930313233import ( \"net/http\" \"encoding/json\" \"io/ioutil\" \"fmt\")type MyJsonObject struct { Id string `json:\"id\"` Name string `json:\"name\"`}type MyJsonArray struct { Data []MyJsonObject `json:\"data\"`}func FetchJson() { url := \"https://myapp.com/json\" client := http.Client{ Timeout: time.Second * 10 } request, requestError := http.NewRequest(http.MethodGet, url, nil) request.Header.Set(\"User-Agent\", \"myapp\") response, responseError := client.Do(request) body, readError := ioutil.ReadAll(response.Body) fmt.Println(requestError, responseError, readError) myJsonArray := MyJsonArray{} marshalError := json.Unmarshal(body, &amp;myJsonArray) fmt.Println(jsonResponse, marshalError) } MapAnd how to map to another structhttps://gobyexample.com/collection-functions 123456789101112131415161718func Map(vs []JsonStop, f func(JsonStop) *api.Stop) []*api.Stop { vsm := make([]*api.Stop, len(vs)) for i, v := range vs { vsm[i] = f(v) } return vsm}stops := Map(jsonResponse.Data, func(jsonStop JsonStop) *api.Stop { stop := api.Stop{ Id: jsonStop.Id, Name: jsonStop.Name, Address: jsonStop.Address, Lat: jsonStop.Lat, Long: jsonStop.Long} return &amp;stop }) json to protobuf Use https://godoc.org/github.com/golang/protobuf/jsonpb","link":"/blog/How-to-parse-json-in-Go/"},{"title":"How to perform platform check with typealias and @available","text":"Issue #38 The other day, I was building Anchors which needs to support iOS and macOS. What‚Äôs clever way to not use #if os(iOS) || os(tvOS) in all files? Use typealias This is the first version. I‚Äôm trying to support iOS 8, macOS 10.10 12345678910#if os(iOS) || os(tvOS) import UIKit public typealias View = UIView public typealias LayoutGuide = UILayoutGuide public typealias EdgeInsets = UIEdgeInsets#elseif os(OSX) import AppKit public typealias View = NSView public typealias LayoutGuide = NSLayoutGuide#endif But then because of LayoutGuide, I need to bump deployment target to iOS 9, macOS 10.11. Which is not what I want. @available to the rescue, but it will affect everything below it. The solution is to split the platform check, the first as normal, the second with @available check 123456789101112131415161718#if os(iOS) || os(tvOS) import UIKit public typealias View = UIView public typealias EdgeInsets = UIEdgeInsets#elseif os(OSX) import AppKit public typealias View = NSView#endif#if os(iOS) || os(tvOS) import UIKit @available(iOS 9.0, *) public typealias LayoutGuide = UILayoutGuide#elseif os(OSX) import AppKit @available(macOS 10.11, *) public typealias LayoutGuide = NSLayoutGuide#endif","link":"/blog/How-to-perform-platform-check-with-typealias-and-@available/"},{"title":"How to parse xcrun instruments devices","text":"Issue #558 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475public class GetDestinations { public init() {} public func getAvailable(workflow: Workflow) throws -&gt; [Destination] { let processHandler = DefaultProcessHandler(filter: { $0.starts(with: \"name=\") }) let string = try CommandLine().runBash( workflow: workflow, program: \"xcrun instruments\", arguments: [ \"-s\", \"devices\" ], processHandler: processHandler ) // Ex: iPad Air (11.0.1) [7A5EAD29-D870-49FB-9A9B-C81079620AC9] (Simulator) let destinations: [Destination] = try string .split(separator: \"\\n\") .map({ String($0) }) .filter({ try $0.hasPattern(pattern: #\"\\[.+\\]\"#) }) .compactMap({ (line) -&gt; Destination? in parse(line) }) return destinations } func parse(_ line: String) -&gt; Destination? { guard var id = try? line.matches(pattern: #\"\\[.+\\]\"#).first else { return nil } var line = line line = line.replacingOccurrences(of: id, with: \"\") id = id .replacingOccurrences(of: \"[\", with: \"\") .replacingOccurrences(of: \"]\", with: \"\") let isSimulator = line.contains(\"(Simulator)\") line = line.replacingOccurrences(of: \"(Simulator)\", with: \"\") var os = (try? line.matches(pattern: #\"\\((\\d+\\.)?(\\d+\\.)?(\\*|\\d+)\\)\"#).first) ?? \"\" let name = line .replacingOccurrences(of: os, with: \"\") .trimmingCharacters(in: .whitespacesAndNewlines) os = os.replacingOccurrences(of: \"(\", with: \"\") .replacingOccurrences(of: \")\", with: \"\") let device = self.device(name: name) if os.isEmpty { return Destination(name: name, id: id) } else { let platform = isSimulator ? \"\\(device) Simulator\" : device return Destination(name: name, platform: platform, os: os) } } // MARK: - Private private func device(name: String) -&gt; String { if name.starts(with: \"iPad\") || name.starts(with: \"iPhone\") { return Destination.Platform.iOS } else if name.starts(with: \"Apple Watch\") { return Destination.Platform.watchOS } else if name.starts(with: \"Apple TV\") { return Destination.Platform.tvOS } else if name.containsIgnoringCase(\"mac\") { return Destination.Platform.macOS } else { return Destination.Platform.iOS } }}","link":"/blog/How-to-parse-xcrun-instruments-devices/"},{"title":"How to parse xcrun simctl devices","text":"Issue #559 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192public class GetDestinations { public init() {} public func getAvailable(workflow: Workflow) throws -&gt; [Destination] { let processHandler = DefaultProcessHandler(filter: { $0.starts(with: \"name=\") }) let string = try CommandLine().runBash( workflow: workflow, program: \"xcrun simctl\", arguments: [ \"list\", \"devices\", \"-j\" ], processHandler: processHandler ) guard let data = string.data(using: .utf8) else { throw PumaError.invalid } let response: Response = try JSONDecoder().decode(Response.self, from: data) let devicesWithOS: [DeviceWithOS] = response.devices.flatMap({ key, value in return value.map({ DeviceWithOS(device: $0, os: key) }) }) let destinations: [Destination] = try devicesWithOS .filter({ withOS in return withOS.device.isAvailable }) .compactMap({ withOS in guard let platform = self.platform(withOS: withOS), let os = try self.os(withOS: withOS) else { return nil } var destination = Destination( name: withOS.device.name, platform: platform, os: os ) destination.id = withOS.device.udid return destination }) return destinations } func findId(workflow: Workflow, destination: Destination) throws -&gt; String? { let availableDestinations = try self.getAvailable(workflow: workflow) return availableDestinations.first(where: { $0 == destination })?.id } // MARK: - Private private func platform(withOS: DeviceWithOS) -&gt; String? { let list: [String] = [ Destination.Platform.iOS, Destination.Platform.watchOS, Destination.Platform.macOS, Destination.Platform.tvOS, ] return list.first(where: { withOS.os.contains($0) }) } // com.apple.CoreSimulator.SimRuntime.iOS-13-2 private func os(withOS: DeviceWithOS) throws -&gt; String? { guard let string = try withOS.os.matches(pattern: #\"(-\\d+)+\"#).first else { return nil } return string.dropFirst().replacingOccurrences(of: \"-\", with: \".\") }}private struct Response: Decodable { let devices: [String: [Device]]}private struct Device: Decodable { let state: String let name: String let udid: String let isAvailable: Bool}private struct DeviceWithOS { let device: Device let os: String}","link":"/blog/How-to-parse-xcrun-simctl-devices/"},{"title":"How to print current directory using Process in macOS","text":"Issue #175 123let process = Process()process.launchPath = \"/bin/pwd\"process.arguments = [] Should be the same as FileManager.default.currentDirectoryPath","link":"/blog/How-to-print-current-directory-using-Process-in-macOS/"},{"title":"How to prevent UIVisualEffectView crash","text":"Issue #124 We all know that there‚Äôs a potential crash with UIVisualEffectView on iOS 11. The fix is to not add sub views directly to UIVisualEffectView, but to its contentView. So we should change 1effectView.addSubview(button) to 1effectView.contentView.addubView(button) Here we don‚Äôt need to perform iOS version check, because effectView.contentView works for any iOS versions. Potential cases for crashesHere are some cases you can potentially cause the crashes Strange namings Normally we name our UIVisualEffectView as blurView, effectView. But there‚Äôs times we name it differently like navigationView, containerView, boxView, ‚Ä¶ This way we may completely forget that it‚Äôs a UIVisualEffectView üôÄ 12containerView.addSubview(button)boxView.insertSubview(label, at: 0) Custom loadView Sometimes it‚Äôs convenient to have our UIViewController 's view as a whole blur view, so that all things inside have a nice blur effect background 12345678910111213class OverlayController: UIViewController { let blurView = UIVisualEffectView(effect: UIBlurEffect(style: .dark)) override func loadView() { super.loadView() self.view = blurView } override func viewDidLoad() { super.viewDidLoad() view.addSubview(button) }} By setting our blurView as view in loadView, we have no idea afterwards that view is actually a UIVisualEffectView üôÄ Inheritance What happen if we have another UIViewController that inherits from our OverlayController, all it knows about view is UIView, it does not know that it is a disguising UIVisualEffectView üôÄ 1234567class ClocksController: OverlayController { override func viewDidLoad() { super.viewDidLoad() view.addSubview(timeLabel) }} Superclass type Sometimes declare our things but with protocol or superclass types. Consumers of our API have no clue to know that it is UIVisualEffectView üôÄ 1let view: UIView = UIVisualEffectView(effect: UIBlurEffect(style: .dark)) Here it appears to us that view is of type UIView Legacy codebase Now imagine you ‚Äòve handled a legacy codebase to deal with. Perform finding and replacing all those things related to UIVisualEffectView is very hard task. Especially since we tend to write less tests for UI Making it impossible to crashI like concept like Phantom type to limit interface. Here we‚Äôre not using type but a wrapper 123456789101112131415161718192021222324final class BlurView: UIView { private let effectView: UIVisualEffectView init(style: UIBlurEffectStyle, backgroundColor: UIColor? = nil) { self.effectView = UIVisualEffectView(effect: UIBlurEffect(style: style)) self.effectView.backgroundColor = backgroundColor super.init(frame: .zero) insertSubview(effectView, at: 0) } required init?(coder aDecoder: NSCoder) { fatalError() } override func addSubview(_ view: UIView) { effectView.contentView.addSubview(view) } override func layoutSubviews() { super.layoutSubviews() effectView.frame = bounds }} Here we override addSubview to always add views to effectView.contentView. In the init method, we need to call insertSubview instead because of our overriden addSubview Now BlurView has a blur effect thanks to is underlying UIVisualEffectView, but expose only addSubview because of its UIView interface. This way it is impossible to cause crashes üòé 12let blurView = BlurView(style: .dark)blurView.addSubview(button(","link":"/blog/How-to-prevent-UIVisualEffectView-crash/"},{"title":"How to notarize electron app","text":"Issue #430 Use electron builder1npm install electron-builder@latest --save-dev Prefer electron-builder over electron-packager Configuration https://www.electron.build/configuration/configuration package.json 12345678910111213141516171819202122232425262728293031323334353637{ \"name\": \"icon_generator\", \"version\": \"1.3.0\", \"description\": \"A macOS app to generate app icons\", \"main\": \"babel/main.js\", \"repository\": \"https://github.com/onmyway133/IconGenerator\", \"author\": \"Khoa Pham\", \"license\": \"MIT\", \"scripts\": { \"start\": \"npm run babel &amp;&amp; electron .\", \"babel\": \"babel ./src --out-dir ./babel --copy-files\", \"dist\": \"npm run babel &amp;&amp; electron-builder\" }, \"build\": { \"appId\": \"com.onmyway133.IconGenerator\", \"buildVersion\": \"20\", \"productName\": \"Icon Generator\", \"icon\": \"./Icon/Icon.icns\", \"mac\": { \"category\": \"public.app-category.productivity\", \"hardenedRuntime\": true, \"gatekeeperAssess\": false, \"entitlements\": \"./entitlements.plist\", \"entitlementsInherit\": \"./entitlements.plist\" }, \"win\": { \"target\": \"msi\" }, \"linux\": { \"target\": [ \"AppImage\", \"deb\" ] }, \"afterSign\": \"./afterSignHook.js\" }} Declare entitlementsentitlements.plist 123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt; &lt;dict&gt; &lt;key&gt;com.apple.security.cs.allow-jit&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.security.cs.allow-dyld-environment-variables&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt;&lt;/plist&gt; Use electron-notarize https://github.com/electron/electron-notarize afterSignHook.js 12345678910111213141516171819202122232425262728293031323334const fs = require('fs');const path = require('path');var electron_notarize = require('electron-notarize');module.exports = async function (params) { // Only notarize the app on Mac OS only. if (process.platform !== 'darwin') { return; } console.log('afterSign hook triggered', params); // Same appId in electron-builder. let appId = 'com.onmyway133.IconGenerator' let appPath = path.join(params.appOutDir, `${params.packager.appInfo.productFilename}.app`); if (!fs.existsSync(appPath)) { throw new Error(`Cannot find application at: ${appPath}`); } console.log(`Notarizing ${appId} found at ${appPath}`); try { await electron_notarize.notarize({ appBundleId: appId, appPath: appPath, appleId: process.env.appleId, appleIdPassword: process.env.appleIdPassword, }); } catch (error) { console.error(error); } console.log(`Done notarizing ${appId}`);}; RunGenerate password for Apple Id because of 2FA 123export appleId=onmyway133@gmail.comexport appleIdPassword=1234-abcd-efgh-7890npm run dist Check1spctl --assess --verbose Icon\\ Generator.app Troubleshootingbabel Since electron-builder create dist folder for distribution, for example dist/mac/Icon Generator, I‚Äôve renamed babel generated code to babel directory babel 6 regeneratorRuntime is not definedIt is because of afterSignHook. Ignore in .babelrc not work 123456789{ &quot;plugins&quot;: [ &quot;transform-react-jsx-source&quot; ], &quot;presets&quot;: [&quot;env&quot;, &quot;react&quot;], &quot;ignore&quot;: [ &quot;afterSignHook.js&quot; ]} Should use babel 7 with babel.config.js https://babeljs.io/docs/en/config-files#project-wide-configuration 12npm install --save @babel/runtime npm install --save-dev @babel/plugin-transform-runtime Use electron-forgehttps://httptoolkit.tech/blog/notarizing-electron-apps-with-electron-forge/ Read more https://medium.com/@TwitterArchiveEraser/notarize-electron-apps-7a5f988406db https://kilianvalkhof.com/2019/electron/notarizing-your-electron-application/","link":"/blog/How-to-notarize-electron-app/"},{"title":"How to push to GitHub gist","text":"Issue #71 Creating a new gist Go to https://gist.github.com/ and create a new gist Note that you need to include filename + extension to enable automatic language markup Click Add file to add more files Cloning the gist If you‚Äôve enabled 2 factor authentication, you need to use personal acccess token with https, or use ssh. If you have enabled two-factor authentication, or if you are accessing an organization that uses SAML single sign-on, you must provide a personal access token instead of entering your password for HTTPS Git. You should enable 2 factor authentication. Read more https://help.github.com/articles/https-cloning-errors/#provide-access-token-if-2fa-enabled For example with my gist https://gist.github.com/onmyway133/c486939f82fc4d3a8ed4be21538fdd32 the ssh url is git@gist.github.com:c486939f82fc4d3a8ed4be21538fdd32.git Run git commands as normal 12git remote add origin git@gist.github.com:c486939f82fc4d3a8ed4be21538fdd32.gitgit clone You have branch master by default 1git push origin master Ignoring directories remote: Gist does not support directories. In my cases I‚Äôm using node, so I need to ignore node_modules directory Also need to untrack if necessary 12git rm --cached -r .git add .","link":"/blog/How-to-push-to-GitHub-gist/"},{"title":"How to quit macOS on last window closed","text":"Issue #403 https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428381-applicationshouldterminateafterl?language=objc The application sends this message to your delegate when the application‚Äôs last window is closed. It sends this message regardless of whether there are still panels open. (A panel in this case is defined as being an instance of NSPanel or one of its subclasses.) If your implementation returns NO, control returns to the main event loop and the application is not terminated. If you return YES, your delegate‚Äôs applicationShouldTerminate: method is subsequently invoked to confirm that the application should be terminated. 123func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -&gt; Bool { return true}","link":"/blog/How-to-quit-macOS-on-last-window-closed/"},{"title":"How to read and write file using fs in node","text":"Issue #419 123456789101112function write(json) { const data = JSON.stringify(json) const year = json.date.getFullYear() const directory = `collected/${slugify(className)}/${year}` fs.mkdirSync(directory, { recursive: true }) fs.writeFileSync( `${directory}/${slugify(studentName)}`, data, { overwrite: true } )} 12345678910111213async function readAll() { const classes = fs.readdirSync('classes') classes.forEach((class) =&gt; { const years = fs.readdirSync(`classes/${class}`) years.forEach((year) =&gt; { const students = fs.readdirSync(`classes/${class}/${year}`) students.forEach((student) =&gt; { const data = fs.readFileSync(`classes/${class}/${year}/${student}) const json = JSON.parse(data) }) }) })}","link":"/blog/How-to-read-and-write-file-using-fs-in-node/"},{"title":"How to reload data without using onAppear in SwiftUI in watchOS","text":"Issue #468 From onAppeear Adds an action to perform when the view appears. In theory, this should be triggered every time this view appears. But in practice, it is only called when it is pushed on navigation stack, not when we return to it. So if user goes to a bookmark in a bookmark list, unbookmark an item and go back to the bookmark list, onAppear is not called again and the list is not updated. 1234567891011121314151617import SwiftUIstruct BookmarksView: View { let service: Service @State var items: [AnyItem] @EnvironmentObject var storeContainer: StoreContainer var body: some View { List(items) { item in makeItemRow(item: item) .padding([.top, .bottom], 4) } .onAppear(perform: { self.items = storeContainer.bookmarks(service: service).map({ AnyItem(item: $0) }) }) }} So instead of relying on UI state, we should rely on data state, by listening to onReceive and update our local @State 12345678910111213141516171819202122struct BookmarksView: View { let service: Service @State var items: [AnyItem] @EnvironmentObject var storeContainer: StoreContainer var body: some View { List(items) { item in makeItemRow(item: item) .padding([.top, .bottom], 4) } .onAppear(perform: { self.reload() }) .onReceive(storeContainer.objectWillChange, perform: { _ in self.reload() }) } private func reload() { self.items = storeContainer.bookmarks(service: service).map({ AnyItem(item: $0) }) }} Inside our ObservableObject, we need to trigger changes notification 123456789101112131415final class StoreContainer: ObservableObject { let objectWillChange = PassthroughSubject&lt;(), Never&gt;() func bookmark(item: ItemProtocol) { defer { objectWillChange.send(()) } } func unbookmark(item: ItemProtocol) { defer { objectWillChange.send(()) } }}","link":"/blog/How-to-reload-data-without-using-onAppear-in-SwiftUI-in-watchOS/"},{"title":"How to refresh receipt and restore in app purchase in iOS","text":"Issue #496 Read this Restoring Purchased Products to understand the purposes between the 2. From iOS 7, every app downloaded from the store has a receipt (for downloading/buying the app) at appStoreReceiptURL. When users purchases something via In App Purchase, the content at appStoreReceiptURL is updated with purchases information. Most of the cases, you just need to refresh the receipt (at appStoreReceiptURL) so that you know which transactions users have made. Users restore transactions to maintain access to content they‚Äôve already purchased. For example, when they upgrade to a new phone, they don‚Äôt lose all of the items they purchased on the old phone. Include some mechanism in your app to let the user restore their purchases, such as a Restore Purchases button. Restoring purchases prompts for the user‚Äôs App Store credentials, which interrupts the flow of your app: because of this, don‚Äôt automatically restore purchases, especially not every time your app is launched. In most cases, all your app needs to do is refresh its receipt and deliver the products in its receipt. The refreshed receipt contains a record of the user‚Äôs purchases in this app, on this device or any other device. However, some apps need to take an alternate approach for one of the following reasons: If you use Apple-hosted content, restoring completed transactions gives your app the transaction objects it uses to download the content.If you need to support versions of iOS earlier than iOS 7, where the app receipt isn‚Äôt available, restore completed transactions instead. Refreshing the receipt asks the App Store for the latest copy of the receipt. Refreshing a receipt does not create any new transactions. Restoring completed transactions creates a new transaction for every completed transaction the user made, essentially replaying history for your transaction queue observer. More about receipt, from WWDC 2017, What‚Äôs new in StoreKit session https://developer.apple.com/videos/play/wwdc2017/303/ You can also watch WWDC 2017, session Advanced StoreKit for more detail https://developer.apple.com/videos/play/wwdc2017/305/ Original answer https://stackoverflow.com/questions/45615106/when-to-refresh-a-receipt-vs-restore-purchases-in-ios/52162283#52162283","link":"/blog/How-to-refresh-receipt-and-restore-in-app-purchase-in-iOS/"},{"title":"How to  register for alert push notification in iOS","text":"Issue #452 Use UserNotifications framework 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import FirebaseMessagingimport UserNotificationsfinal class PushHandler: NSObject { private let center = UNUserNotificationCenter.current() private let options: UNAuthorizationOptions = [.alert] func setup() { Messaging.messaging().delegate = self } func register() { center.requestAuthorization(options: options, completionHandler: { granted, error in print(granted, error) self.getSettings() }) } func getSettings() { center.getNotificationSettings(completionHandler: { settings in guard case let .authorized = settings.authorizationStatus, case let .enabled = settings.alertSetting, settings.alertStyle != .none else { return } // TODO }) } func handle(userInfo: [AnyHashable: Any]) { }}extension PushHandler: MessagingDelegate { func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String) { print(fcmToken) } func messaging(_ messaging: Messaging, didReceive remoteMessage: MessagingRemoteMessage) { print(remoteMessage) }} 1234567891011@UIApplicationMainclass AppDelegate: UIResponder, UIApplicationDelegate { func application( _ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -&gt; Void) { completionHandler(.noData) Deps.pushHandler.handle(userInfo: userInfo) }} A test message from Firebase looks like 123456[AnyHashable(&quot;google.c.a.e&quot;): 1, AnyHashable(&quot;google.c.a.ts&quot;): 1570701857, AnyHashable(&quot;aps&quot;): { alert = { body = Test; title = Test; };}, AnyHashable(&quot;google.c.a.udt&quot;): 0, AnyHashable(&quot;google.c.a.c_l&quot;): Test, AnyHashable(&quot;gcm.message_id&quot;): 1570701857965182, AnyHashable(&quot;google.c.a.c_id&quot;): 1257698497812622975, AnyHashable(&quot;gcm.n.e&quot;): 1]","link":"/blog/How-to-register-for-alert-push-notification-in-iOS/"},{"title":"How to replace all occurrences of a string in Javascript","text":"Issue #420 12345const normalized = string .replace(/\\//g, '') .replace(/\\\"/g, '') .replace(/\\(/g, '') .replace(/\\)/g, '')","link":"/blog/How-to-replace-all-occurrences-of-a-string-in-Javascript/"},{"title":"How to return VStack or HStack in SwiftUI","text":"Issue #613 12345678910111213141516171819202122232425struct VOrH&lt;Content&gt;: View where Content: View { let isVertical: Bool let content: () -&gt; Content init(isVertical: Bool, @ViewBuilder content: @escaping () -&gt; Content) { self.isVertical = isVertical self.content = content } var body: some View { makeContent() } private func makeContent() -&gt; some View { if isVertical { return VStack(spacing: 0) { content() }.eraseToAnyView() } else { return HStack(spacing: 0) { content() }.eraseToAnyView() } }}","link":"/blog/How-to-return-VStack-or-HStack-in-SwiftUI/"},{"title":"How to remove duplicates based on property in array in Swift","text":"Issue #441 Make object conform to Equatable and Hashable and use Set to eliminate duplications. Set loses order so we need to sort after uniquing 12345678910111213struct App: Equatable, Hashable { static func == (lhs: App, rhs: App) -&gt; Bool { return lhs.name == rhs.name &amp;&amp; lhs.bundleId == rhs.bundleId } func hash(into hasher: inout Hasher) { hasher.combine(name) hasher.combine(bundleId) }}let uniqueApps = Array(Set(unsortedApps))let apps = uniqueApps.sorted(by: { $0.name.lowercased() &lt; $1.name.lowercased() })","link":"/blog/How-to-remove-duplicates-based-on-property-in-array-in-Swift/"},{"title":"How to run UI Test with system alert in iOS","text":"Issue #48 Continue my post https://github.com/onmyway133/blog/issues/45. When you work with features, like map view, you mostly need permissions, and in UITests you need to test for system alerts. Add interruption monitorThis is the code. Note that you need to call app.tap() to interact with the app again, in order for interruption monitor to work 123456addUIInterruptionMonitor(withDescription: \"Location permission\", handler: { alert in alert.buttons[\"Allow\"].tap() return true})app.tap() Note that you don‚Äôt always need to handle the returned value of addUIInterruptionMonitor Only tap when neededOne problem with this approach is that when there is no system alert (you already touched to allow before), then app.tap() will tap on your main screen. In my app which uses map view, it will tap on some pins, which will present another screen, which is not correct. Since app.alerts does not work, my 2nd attempt is to check for app.windows.count. Unfortunately, it always shows 5 windows whether alert is showing or not. I know 1 is for main window, 1 is for status bar, the other 3 windows I have no idea. The 3rd attempt is to check that underlying elements (behind alert) can‚Äôt be touched, which is to use isHittable. This property does not work, it always returns true Check the contentThis uses the assumption that we only tests for when user hits Allow button. So only if alert is answered with Allow, then we have permission to display our content. For my map view, I check that there are some pins on the map. See https://github.com/onmyway133/blog/issues/45 on how to mock location and identify the pins 123if app.otherElements.matching(identifier: &quot;myPin&quot;).count == 0 { app.tap()} When there is no permissionSo how can we test that user has denied your request? In my map view, if user does not allow location permission, I show a popup asking user to go to Settings and change it, otherwise, they can‚Äôt interact with the map. I don‚Äôt know how to toggle location in Privacy in Settings, maybe XCUISiriService can help. But 1 thing we can do is to mock the application Before you launch the app in UITests, add some arguments 1app.launchArguments.append(&quot;--UITests-mockNoLocationPermission&quot;) and in the app, we need to check for this arguments 12345func checkLocationPermission() { if CommandLine.arguments.contains(\"--UITests-mockNoLocationPermission\") { showNoLocationPopupAndAskUserToEnableInSettings() }} That‚Äôs it. In UITests, we can test whether that no location permission popup appears or not","link":"/blog/How-to-run-UI-Test-with-system-alert-in-iOS/"},{"title":"How to resolve deep json object in Dart","text":"Issue #198 If we are not on the edge with GRPC and Protocol Buffer, then most likely we are going to deal with Restful and JSON. In one of my Flutter apps I needed to consume JSON JSON and serializationThe guide at https://flutter.dev/docs/development/data-and-backend/json is definitely the way to go. Currently there are 2 ways. One is to manually use dart:convert package 1Map&lt;String, dynamic&gt; user = jsonDecode(jsonString); The other way is to use json_serializable to generate parsing code 123456789101112131415161718192021222324252627import 'package:json_annotation/json_annotation.dart';/// This allows the `User` class to access private members in/// the generated file. The value for this is *.g.dart, where/// the star denotes the source file name.part 'user.g.dart';/// An annotation for the code generator to know that this class needs the/// JSON serialization logic to be generated.@JsonSerializable()class User { User(this.name, this.email); String name; String email; /// A necessary factory constructor for creating a new User instance /// from a map. Pass the map to the generated `_$UserFromJson()` constructor. /// The constructor is named after the source class, in this case User. factory User.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$UserFromJson(json); /// `toJson` is the convention for a class to declare support for serialization /// to JSON. The implementation simply calls the private, generated /// helper method `_$UserToJson`. Map&lt;String, dynamic&gt; toJson() =&gt; _$UserToJson(this);} json_resolveThe problem with manual approach is that it involves lot of boilerplate code, especially when accessing property inside deeply nested json. The problem with code generation approach is that it does not always fit our need and may lack of customization. Therefore I created json_resolve which allows us to access json using keypath, with type checking and safety in mind. The code is small, simple to reason and tested. 1234567891011final String byProperty = resolve(json: json, path: \"movie\", defaultValue: \"error\");expect(byProperty, \"isFun\");final int byInt = resolve(json: json, path: \"earth\", defaultValue: 0);expect(byInt, 199999);final String byIndex = resolve(json: json, path: \"dc.2.name\", defaultValue: \"error\");expect(byIndex, \"Wonder Woman\");final String byIndexThenProperty = resolve(json: json, path: \"marvel.0.appear.1.title\", defaultValue: \"error\");expect(byIndexThenProperty, \"The Dark World\");","link":"/blog/How-to-resolve-deep-json-object-in-Dart/"},{"title":"How to resize image using imagemagick","text":"Issue #202 1mogrify -resize 1280x800 s2.png","link":"/blog/How-to-resize-image-using-imagemagick/"},{"title":"How to run AppleScript in macOS","text":"Issue #223 Surround script by single quotes123456789101112let script = \"\"\"tell application \"XcodeWay\" activateend tell\"\"\"let command = \"osascript -e '\\(script)'\"let process = Process()process.launchPath = \"/bin/bash\"process.arguments = [\"-c\", command] Run as administratorIn terminal, we can 12cd ~/Librarysudo mkdir MyNewFolder In code, we use with administrator privileges, this when run will ask for password or fingerprint 1do shell script &quot;mkdir MyNewFolder&quot; with administrator privileges","link":"/blog/How-to-run-AppleScript-in-macOS/"},{"title":"How to run UITests with map view in iOS","text":"Issue #45 Mock a locationYou should mock a location to ensure reliable test Create the gpx fileGo to Xcode -&gt; File -&gt; New -&gt; GPX File It looks like 1234567891011&lt;?xml version=\"1.0\"?&gt;&lt;gpx version=\"1.1\" creator=\"Xcode\"&gt; &lt;wpt lat=\"59.913590\" lon=\"10.733750\"&gt; &lt;name&gt;Oslo S&lt;/name&gt; &lt;time&gt;2017-05-31T14:55:37Z&lt;/time&gt; &lt;/wpt&gt; &lt;wpt lat=\"59.913590\" lon=\"10.733750\"&gt; &lt;name&gt;Oslo S&lt;/name&gt; &lt;time&gt;2017-05-31T14:55:40Z&lt;/time&gt; &lt;/wpt&gt;&lt;/gpx&gt; The gpx file is very powerful, as it allows you to specify a route with different movement speed. Provide one or more waypoints containing a latitude/longitude pair. If you provide onewaypoint, Xcode will simulate that specific location. If you provide multiple waypoints,Xcode will simulate a route visiting each waypoint. Optionally provide a time element for each waypoint. Xcode will interpolate movementat a rate of speed based on the time elapsed between each waypoint. If you do not providea time element, then Xcode will use a fixed rate of speed. Waypoints must be sorted by time in ascending order. Use the gpx file Declare the gpx file in app target, not UITests target. Go to your app scheme -&gt; Run -&gt; Options Go to Simulator -&gt; Debug -&gt; Location -&gt; Custom Location and select that same location, just to make sure. It does not need to be the same, but I see that without Custom Location, it does not work in UITests Test that you‚Äôre near the initial location1234567let map = app.maps.element(boundBy: 0)let predicate = NSPredicate(format: \"label CONTAINS 'City Hall'\")let cityHall = map.otherElements.matching(predicate).element(boundBy: 0)// wait for the map to finish loading and zoomingwait(for: cityHall, timeout: 2)XCTAssertTrue(cityHall.exists) The wait function is from https://github.com/onmyway133/blog/issues/44 Test that you can interact with your custom pinYou need to specify accessibilityIdentifier, like 1234567class MyPin: MKAnnotationView { override func didMoveToSuperview() { super.didMoveToSuperview() accessibilityIdentifier = \"myPin\" }} and then query for that pin. Not that it is not inside map, it is inside app 12let pin = app.otherElements.matching(identifier: \"myPin\").element(boundBy: 0)XCTAssertTrue(pin.exists) You should use accessibilityIdentifieraccessibilityIdentifier is from UIAccessibilityIdentification protocol. You should not use accessibilityLabel, see https://github.com/kif-framework/KIF/issues/243 Given that accessibilityLabel is an outwardly-facing string that is actually used by accessibility screen readers (and should be localized to the device user‚Äôs language), Apple now provides an alternate property (iOS 5+) that is specifically intended for UI Automation purposes","link":"/blog/How-to-run-UITests-with-map-view-in-iOS/"},{"title":"How to run executable in macOS","text":"Issue #176 Enable executable 1chmod +x executable Add executable file to targetUse Process with correct launchPad 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475import Foundationprotocol TaskDelegate: class { func task(task: Task, didOutput string: String) func taskDidComplete(task: Task)}class Task { weak var delegate: TaskDelegate? let process = Process() func run(arguments: [String]) { DispatchQueue.background.async { let launchPath = Bundle.main.path(forResource: \"executable\", ofType: \"\")! self.run(launchPath: launchPath, arguments: arguments) } } func stop() { DispatchQueue.background.async { if self.process.isRunning { self.process.terminate() } } } // MARK: - Helper private func run(launchPath: String, arguments: [String]) { let process = Process() process.launchPath = launchPath process.arguments = arguments let stdOut = Pipe() process.standardOutput = stdOut let stdErr = Pipe() process.standardError = stdErr let handler = { [weak self] (file: FileHandle!) -&gt; Void in let data = file.availableData guard let output = NSString(data: data, encoding: String.Encoding.utf8.rawValue) else { return } guard let strongSelf = self, let string = output.components(separatedBy: \"\\n\").first else { return } DispatchQueue.main.async { strongSelf.delegate?.task(task: strongSelf, didOutput: string) } } stdErr.fileHandleForReading.readabilityHandler = handler stdOut.fileHandleForReading.readabilityHandler = handler process.terminationHandler = { [weak self] (task: Process?) -&gt; () in stdErr.fileHandleForReading.readabilityHandler = nil stdOut.fileHandleForReading.readabilityHandler = nil guard let strongSelf = self else { return } DispatchQueue.main.async { strongSelf.delegate?.taskDidComplete(task: strongSelf) } } process.launch() process.waitUntilExit() }}","link":"/blog/How-to-run-executable-in-macOS/"},{"title":"How to run app on beta iOS devices","text":"Issue #343 Xcode 10.3 with iOS 13 1sudo ln -s /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/13.0 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport Xcode 10.3 with iOS 13.1 beta 2 1sudo ln -s /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/13.0/ /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/13.1 Use DeviceSupport Download and unzip Device support https://github.com/iGhibli/iOS-DeviceSupport 1/Applications/Xcode/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport","link":"/blog/How-to-run-app-on-beta-iOS-devices/"},{"title":"How to organize dependencies in Swift Package Manager","text":"Issue #523 In Puma I want to make build tools for iOS and Android, which should share some common infrastructure. So we can organize dependencies like. Puma -&gt; PumaAndroid, PumaiOS -&gt; PumaCore -&gt; xcbeautify, Files, Colorizer 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// swift-tools-version:5.1// The swift-tools-version declares the minimum version of Swift required to build this package.import PackageDescriptionlet package = Package( name: \"Puma\", platforms: [.macOS(\"10.15\")], products: [ .library(name: \"Puma\", targets: [\"Puma\"]) ], dependencies: [ .package( url: \"https://github.com/thii/xcbeautify.git\", .upToNextMajor(from: \"0.4.1\") ), .package( url: \"https://github.com/getGuaka/Colorizer\", .upToNextMajor(from: \"0.2.0\") ), .package( url: \"https://github.com/JohnSundell/Files.git\", .upToNextMajor(from : \"3.1.0\") ) ], targets: [ .target( name: \"Puma\", dependencies: [ \"PumaiOS\", \"PumaAndroid\", ], path: \"Sources/Puma\" ), .target( name: \"PumaCore\", dependencies: [ \"XcbeautifyLib\", \"Colorizer\", \"Files\" ], path: \"Sources/Core\" ), .target( name: \"PumaiOS\", dependencies: [ \"PumaCore\" ], path: \"Sources/iOS\" ), .target( name: \"PumaAndroid\", dependencies: [ \"PumaCore\" ], path: \"Sources/Android\" ), .testTarget( name: \"PumaTests\", dependencies: [\"Puma\" ] ) ])","link":"/blog/How-to-organize-dependencies-in-Swift-Package-Manager/"},{"title":"How to run ffmpeg in macOS app","text":"Issue #178 Install ffmpeg, which installs ffprobe 1brew install ffmpeg Find location of installed ffmpeg 1which ffmpeg Add all executables to project Get error unable to obtain file audio codec with ffprobe Run in verbose mode 1ffmpeg -v Get [debug] Encodings: locale US-ASCII, fs utf-8, out None, pref US-ASCII[debug] Python version 2.7.10 (CPython) - Darwin-18.2.0-x86_64-i386-64bit[debug] exe versions: ffmpeg present, ffprobe present Run version of ffprobe 1ffprobe --version Get dylb not found dyld: Library not loaded: /usr/local/Cellar/ffmpeg/4.1.1/lib/libavdevice.58.dylib Similar issue https://techglimpse.com/ffprobe-command-error-linux-solution/Read dylib path https://stackoverflow.com/questions/23777191/dyld-library-not-loaded-when-trying-to-run-fortran-executable-from-objective-c","link":"/blog/How-to-run-ffmpeg-in-macOS-app/"},{"title":"How to run simple http server in Go","text":"Issue #220 Handle url parameter1234567891011121314151617181920212223242526package mainimport ( \"net/http\" \"log\")func handleGreeting(w http.ResponseWriter, r *http.Request) { messages, ok := r.URL.Query()[\"message\"] if !ok || len(messages[0]) &lt; 1 { log.Println(\"Message is missing\") w.WriteHeader(400) return } message := messages[0] w.Write([]byte(message))}func main() { http.HandleFunc(\"/greet\", handleGreeting) if err := http.ListenAndServe(\":8080\", nil); err != nil { panic(err) }} Handle body123456789101112type MyRequest struct { Message string `json:\"message\"`}decoder := json.NewDecoder(r.Body)var t EphemeralKeysRequesterr := decoder.Decode(&amp;t)if err != nil { panic(err)}message := t.Message","link":"/blog/How-to-run-simple-http-server-in-Go/"},{"title":"How to provide configurations in Swift","text":"Issue #522 Sometimes ago I created Puma, which is a thin wrapper around Xcode commandline tools, for example xcodebuild There‚Äôs lots of arguments to pass in xcodebuild, and there are many tasks like build, test and archive that all uses this command. Use Options struct to encapsulate parametersTo avoid passing many parameters into a class, I tend to make an Options struct to encapsulate all passing parameters. I also use composition, where Build.Options and Test.Options contains Xcodebuild.Options This ensures that the caller must provide all needed parameters, when you can compile you are ensured that all required parameters are provided. This is OK, but a bit rigid in a way that there are many more parameters we can pass into xcodebuild command, so we must provide a way for user to alter or add more parameters. 123456789101112131415161718192021222324252627let xcodebuildOptions = Xcodebuild.Options( workspace: nil, project: \"TestApp\", scheme: \"TestApp\", configuration: Configuration.release, sdk: Sdk.iPhone, signing: .auto(automaticSigning), usesModernBuildSystem: true)run { SetVersionNumber(options: .init(buildNumber: \"1.1\")) SetBuildNumber(options: .init(buildNumber: \"2\")) Build(options: .init( buildOptions: xcodebuildOptions, buildsForTesting: true )) Test(options: .init( buildOptions: xcodebuildOptions, destination: Destination( platform: Destination.Platform.iOSSimulator, name: Destination.Name.iPhoneXr, os: Destination.OS.os12_2 ) ))} Here is how to convert from Options to arguments to pass to our command. Because each parameter has different specifiers, like with double hyphens --flag=true, single hyphen -flag=true or just hyphen with a space between parameter key and value -flag true, we need to manually specify that, and concat them with string. Luckily, the order of parameters is not important 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public struct Xcodebuild { public struct Options { /// build the workspace NAME public let workspace: String? /// build the project NAME public let project: String /// build the scheme NAME public let scheme: String /// use the build configuration NAME for building each target public let configuration: String /// use SDK as the name or path of the base SDK when building the project public let sdk: String? public let signing: Signing? public let usesModernBuildSystem: Bool public init( workspace: String? = nil, project: String, scheme: String, configuration: String = Configuration.debug, sdk: String? = Sdk.iPhoneSimulator, signing: Signing? = nil, usesModernBuildSystem: Bool = true) { self.workspace = workspace self.project = project self.scheme = scheme self.configuration = configuration self.sdk = sdk self.signing = signing self.usesModernBuildSystem = usesModernBuildSystem } }}extension Xcodebuild.Options { func toArguments() -&gt; [String?] { return [ workspace.map{ \"-workspace \\($0.addingFileExtension(\"xcworkspace\"))\" }, \"-project \\(project.addingFileExtension(\"xcodeproj\"))\", \"-scheme \\(scheme)\", \"-configuration \\(configuration)\", sdk.map { \"-sdk \\($0)\" }, \"-UseModernBuildSystem=\\(usesModernBuildSystem ? \"YES\": \"NO\")\" ] }} Use convenient methodsAnother way is to have a Set&lt;String&gt; as a container of parameters, and provide common method via protocol extension 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/// Any task that uses command linepublic protocol UsesCommandLine: AnyObject { var program: String { get } var arguments: Set&lt;String&gt; { get set }}public extension UsesCommandLine { func run() throws { let command = \"\\(program) \\(arguments.joined(separator: \" \"))\" Log.command(command) _ = try Process().run(command: command) }}/// Any task that uses xcodebuildpublic protocol UsesXcodeBuild: UsesCommandLine {}public extension UsesXcodeBuild { var program: String { \"xcodebuild\" } func `default`(project: String, scheme: String) { self.project(project) self.scheme(scheme) self.configuration(Configuration.debug) self.sdk(Sdk.iPhoneSimulator) self.usesModernBuildSystem(enabled: true) } func project(_ name: String) { arguments.insert(\"-project \\(name.addingFileExtension(\"xcodeproj\"))\") } func workspace(_ name: String) { arguments.insert(\"-workspace \\(name.addingFileExtension(\"xcworkspace\"))\") } func scheme(_ name: String) { arguments.insert(\"-scheme \\(name)\") } func configuration(_ configuration: String) { arguments.insert(\"-configuration \\(configuration)\") } func sdk(_ sdk: String) { arguments.insert(\"-sdk \\(sdk)\") } func usesModernBuildSystem(enabled: Bool) { arguments.insert(\"-UseModernBuildSystem=\\(enabled ? \"YES\": \"NO\")\") }}class Build: Task, UsesXcodeBuild {}class Test: Task, UsesXcodeBuild {} Now the call site looks like this 123456789101112131415161718192021222324run { SetVersionNumber { $0.versionNumberForAllTargets(\"1.1\") } SetBuildNumber { $0.buildNumberForAllTargets(\"2\") } Build { $0.default(project: \"TestApp\", scheme: \"TestApp\") $0.buildsForTesting(enabled: true) } Test { $0.default(project: \"TestApp\", scheme: \"TestApp\") $0.testsWithoutBuilding(enabled: true) $0.destination(Destination( platform: Destination.Platform.iOSSimulator, name: Destination.Name.iPhoneXr, os: Destination.OS.os12_2 )) }}","link":"/blog/How-to-provide-configurations-in-Swift/"},{"title":"How to safely access deeply nested object in Javascript","text":"Issue #390 An object ‚Äòs property can be null or undefined. Accessing step by step is tedious 1234props.user &amp;&amp;props.user.posts &amp;&amp;props.user.posts[0] &amp;&amp;props.user.posts[0].comments Dynamic parsing path is too clever and involves string in the end, which is a no no 1234const get = (p, o) =&gt; p.reduce((xs, x) =&gt; (xs &amp;&amp; xs[x]) ? xs[x] : null, o)const getUserComments = get(['user', 'posts', 0, 'comments']) Instead let‚Äôs use function and catch errors explicitly, and defaults with a fallback 1234567891011121314const get: (f, defaultValue) =&gt; { try { const value = f() if (isNotNullOrUndefined(value)) { return value } else { return defaultValue } } catch { return defaultValue }}const comments = get(() =&gt; { .user.posts[0].comments }, []) Read more https://medium.com/javascript-inside/safely-accessing-deeply-nested-values-in-javascript-99bf72a0855a","link":"/blog/How-to-safely-access-deeply-nested-object-in-Javascript/"},{"title":"How to secure CVC in STPPaymentCardTextField in Stripe for iOS","text":"Issue #421 123456789101112private func maskCvcIfAny() { guard let view = paymentTextField.subviews.first(where: { !($0 is UIImageView) }), let cvcField = view.subviews .compactMap({ $0 as? UITextField }) .first(where: { $0.tag == 2 &amp;&amp; ($0.accessibilityLabel ?? \"\").lowercased().contains(\"cvc\") }) else { return } cvcField.isSecureTextEntry = true} where tag is in STPPaymentCardTextFieldViewModel.h 123456typedef NS_ENUM(NSInteger, STPCardFieldType) { STPCardFieldTypeNumber, STPCardFieldTypeExpiration, STPCardFieldTypeCVC, STPCardFieldTypePostalCode,}; Also, need to check accessibilityLabel in STPPaymentCardTextField.m 1234567- (NSString *)defaultCVCPlaceholder { if (self.viewModel.brand == STPCardBrandAmex) { return STPLocalizedString(@\"CVV\", @\"Label for entering CVV in text field\"); } else { return STPLocalizedString(@\"CVC\", @\"Label for entering CVC in text field\"); }}","link":"/blog/How-to-secure-CVC-in-STPPaymentCardTextField-in-Stripe-for-iOS/"},{"title":"How to save files in sandboxed macOS app","text":"Issue #432 Read Container Directories and File System Access When you adopt App Sandbox, your application has access to the following locations: The app container directory. Upon first launch, the operating system creates a special directory for use by your app‚Äîand only by your app‚Äîcalled a container. Each user on a system gets an individual container for your app, within their home directory; your app has unfettered read/write access to the container for the user who ran it. Use EasyStash 123var options = Options()options.searchPathDirectory = .documentDirectorystorage = try! Storage(options: options)","link":"/blog/How-to-save-files-in-sandboxed-macOS-app/"},{"title":"How to set corner radius in iOS","text":"Issue #582 Use View DebuggingRun on device, Xcode -&gt; Debug -&gt; View debugging -&gt; Rendering -&gt; Color blended layerOn Simulator -&gt; Debug -&gt; Color Blended Layer Corner radius https://twitter.com/timoliverau/status/1135999854176395264 Okay. Talked to a Core Animation engineer again: cornerRadius was deliberately improved in Metal so it could be used everywhere. Using a bitmap is WAY heavier in terms of memory and performance. CALayer maskLayer is still heavy. https://developer.apple.com/documentation/quartzcore/calayer/1410818-cornerradius Setting the radius to a value greater than 0.0 causes the layer to begin drawing rounded corners on its background. By default, the corner radius does not apply to the image in the layer‚Äôs contents property; it applies only to the background color and border of the layer. However, setting the masksToBounds property to true causes the content to be clipped to the rounded corners. https://developer.apple.com/documentation/quartzcore/calayer/1410896-maskstobounds When the value of this property is true, Core Animation creates an implicit clipping mask that matches the bounds of the layer and includes any corner radius effects. If a value for the mask property is also specified, the two masks are multiplied to get the final mask value. Mask layerlayer.cornerRadius, with or without layer.maskedCorners causes blendingUse mask layer instead of layer.cornerRadius to avoid blending, but mask causes offscreen rendering 12345678let mask = CAShapeLayer()let path = UIBezierPath( roundedRect: bounds, byRoundingCorners: [.topLeft, .topRight, .bottomLeft, .bottomRight], cornerRadii: CGSize(width: 20, height: 20))mask.path = path.cgPathlayer.mask = mask Offscreen rendering https://www.objc.io/issues/3-views/moving-pixels-onto-the-screen/ Instruments‚Äô Core Animation Tool has an option called Color Offscreen-Rendered Yellow that will color regions yellow that have been rendered with an offscreen buffer (this option is also available in the Simulator‚Äôs Debug menu). Be sure to also check Color Hits Green and Misses Red. Green is for whenever an offscreen buffer is reused, while red is for when it had to be re-created. https://thoughtbot.com/blog/designing-for-ios-graphics-performance Offscreen drawing on the other hand refers to the process of generating bitmap graphics in the background using the CPU before handing them off to the GPU for onscreen rendering. In iOS, offscreen drawing occurs automatically in any of the following cases: Core Graphics (any class prefixed with CG)The drawRect() method, even with an empty implementation.CALayers with a shouldRasterize property set to YES.CALayers using masks (setMasksToBounds) and dynamic shadows (setShadow).Any text displayed on screen, including Core Text.Group opacity (UIViewGroupOpacity). Instruments Colors https://felixha.wordpress.com/2014/04/28/graphics-performance-tuning/ Read more Corner Rounding 1234567891011121314151617@abstract Sets the corner rounding method to use on the ASDisplayNode.There are three types of corner rounding provided by Texture: CALayer, Precomposited, and Clipping.- ASCornerRoundingTypeDefaultSlowCALayer: uses CALayer's inefficient .cornerRadius property. Usethis type of corner in situations in which there is both movement through and movement underneaththe corner (very rare). This uses only .cornerRadius.- ASCornerRoundingTypePrecomposited: corners are drawn using bezier paths to clip the content in aCGContext / UIGraphicsContext. This requires .backgroundColor and .cornerRadius to be set. Use opaquebackground colors when possible for optimal efficiency, but transparent colors are supported and muchmore efficient than CALayer. The only limitation of this approach is that it cannot clip children, andthus works best for ASImageNodes or containers showing a background around their children.- ASCornerRoundingTypeClipping: overlays 4 separate opaque corners on top of the content that needscorner rounding. Requires .backgroundColor and .cornerRadius to be set. Use clip corners in situationsin which is movement through the corner, with an opaque background (no movement underneath the corner).Clipped corners are ideal for animating / resizing views, and still outperform CALayer. https://www.hackingwithswift.com/articles/79/how-to-find-and-fix-slow-drawing-using-instruments https://stackoverflow.com/questions/35685726/uibezierpath-doesnt-work-in-topright-corner-and-bottomright-corner/43808103 https://stackoverflow.com/questions/6731545/when-does-a-view-or-layer-require-offscreen-rendering Generally, on iOS, pixel effects and Quartz / Core Graphics drawing are not hardware accelerated, and most other things are.The following things are not hardware accelerated, which means that they need to be done in software (offscreen):Anything done in a drawRect. If your view has a drawRect, even an empty one, the drawing is not done in hardware, and there is a performance penalty.Any layer with the shouldRasterize property set to YES.Any layer with a mask or drop shadow.Text (any kind, including UILabels, CATextLayers, Core Text, etc).Any drawing you do yourself (either onscreen or offscreen) using a CGContext. Make overlay view https://stackoverflow.com/questions/13979935/setting-corner-radius-on-a-cell-kills-uicollectionviews-performance http://www.lukeparham.com/blog/2018/3/6/friends-dont-let-friends-render-offscreen For example, writing your own draw method with Core Graphics means your rendering will technically be done in software (offscreen) as opposed to being hardware accelerated like it is when you use a normal CALayer. This is why manually rendering a UIImage with a CGContext is slower than just assigning the image to a UIImageView. https://github.com/seedante/OptimizationForOffscreenRender if layer‚Äôs contents is nil or this contents has a transparent background, you just need to set cornerRadius. For UILabel, UITextView and UIButton, you can just set layer‚Äôs backgroundColor and cornerRadius to get a rounded corner. Note: UILabel‚Äôs backgroundColor is not its layer‚Äôs backgroundColor.","link":"/blog/How-to-set-corner-radius-in-iOS/"},{"title":"How to scan up to character in Swift","text":"Issue #335 This is useful when we want to get the first meaningful line in a big paragraph 1234let scanner = Scanner(string: text)var result: NSString? = \"\"scanner.scanUpTo(\"\\n\", into: &amp;result)return result as String?","link":"/blog/How-to-scan-up-to-character-in-Swift/"},{"title":"How to select cluster annotation in MapKit","text":"Issue #182 123456789func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) { guard let coordinate = view.annotation?.coordinate else { return } if (view.annotation is MKClusterAnnotation) { zoomInDouble(coordinate: coordinate) }}","link":"/blog/How-to-select-cluster-annotation-in-MapKit/"},{"title":"How to set date color in UIDatePicker in iOS 13","text":"Issue #535 12datePicker.setValue(UIColor.green, forKey: \"textColor\")datePicker.setValue(false, forKey: \"highlightsToday\") Inspect attributes https://developer.apple.com/documentation/objectivec/nsobject/1415656-attributekeys","link":"/blog/How-to-set-date-color-in-UIDatePicker-in-iOS-13/"},{"title":"How to setup multiple git accounts for GitHub and Bitbucket","text":"Issue #514 Generate SSH keys123456789ssh-keygen -t rsa -C &quot;onmyway133@gmail.com&quot; -f &quot;id_rsa_github&quot;ssh-keygen -t rsa -C &quot;onmyway133bitbucket@gmail.com&quot; -f &quot;id_rsa_bitbucket&quot;pbcopy &lt; ~/.ssh/id_rsa_github.pubpbcopy &lt; ~/.ssh/id_rsa_bitbucket.pubssh-add -Dssh-add id_rsa_githubssh-add id_rsa_bitbucket 12345678910111213vim ~/.ssh/config#Github (personal) Host gh HostName github.com User git IdentityFile ~/.ssh/id_rsa_github#Bitbucket (work) Host bb HostName bitbucket.org User git IdentityFile ~/.ssh/id_rsa_bitbucket Config12git config --global user.email &quot;onmyway133@gmail.com&quot;git config --local user.email &quot;onmyway133bitbucket@gmail.com&quot; Read more https://medium.com/avocoders/github-and-bitbucket-accounts-in-a-same-pc-5f8c67fd89d2 https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config","link":"/blog/How-to-setup-multiple-git-accounts-for-GitHub-and-Bitbucket/"},{"title":"How to show context popover from SwiftUI for macOS","text":"Issue #630 For SwiftUI app using NSPopover, to show context popover menu, we can ask for windows array, get the _NSPopoverWindow and calculate the position. Note that origin of macOS screen is bottom left 1234(lldb) po NSApp.windows‚ñø 2 elements - 0 : &lt;NSStatusBarWindow: 0x101a02700&gt; - 1 : &lt;_NSPopoverWindow: 0x101c01060&gt; 12345678910let handler = MenuHandler()handler.add(title: \"About\", action: onAbout)handler.add(title: \"Quit\", action: onQuit)guard let window = NSApp.windows.last else { return }let position = CGPoint( x: window.frame.maxX - 100, y: window.frame.minY + 80)handler.menu.popUp(positioning: nil, at: position, in: nil)","link":"/blog/How-to-show-context-popover-from-SwiftUI-for-macOS/"},{"title":"How to set font to NSTextField in macOS","text":"Issue #591 Use NSTextView instead","link":"/blog/How-to-set-font-to-NSTextField-in-macOS/"},{"title":"How to send message from bot to Slack in Swift","text":"Issue #560 Create a bot https://slack.com/intl/en-no/help/articles/115005265703-create-a-bot-for-your-workspace https://api.slack.com/bot-users#setup-events-api https://api.slack.com/bot-users#installing-bot Post messageAfter adding bot to workspace, we‚Äôll get OAuth Access Token and Bot User OAuth Access Token. Use Bot User OAuth Access Token to test drive bot message sending https://api.slack.com/methods/chat.postMessage/test The request url is like 1https://slack.com/api/chat.postMessage?token=xoxb-7212342835698-890815481123-abcdGgDEFfm2joQs1Vj5mABC&amp;channel=random&amp;text=hello&amp;pretty=1 Code from Puma 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115import Foundationpublic class Slack { public var name: String = \"Send message to Slack\" public var isEnabled = true private var message: Message? public init(_ closure: (Slack) -&gt; Void = { _ in }) { closure(self) }}public extension Slack { struct Message { let token: String let channel: String let text: String let username: String? public init( token: String, channel: String, text: String, username: String ) { self.token = token self.channel = channel self.text = text self.username = username } } func post(message: Message) { self.message = message }}extension Slack: Task { public func run(workflow: Workflow, completion: @escaping TaskCompletion) { guard let message = message else { completion(.failure(PumaError.invalid)) return } let sender = MessageSender() sender.send(message: message, completion: { result in switch result { case .success: Deps.console.success(\"Message posted successfully\") case .failure(let error): Deps.console.error(\"Failed: \\(error.localizedDescription)\") } completion(result) }) }}private class MessageSender { struct Response: Decodable { let ok: Bool let error: String? } func send(message: Slack.Message, completion: @escaping (Result&lt;(), Error&gt;) -&gt; Void) { guard let baseUrl = URL(string: \"https://slack.com/api/chat.postMessage\") else { completion(.failure(PumaError.invalid)) return } var components = URLComponents(url: baseUrl, resolvingAgainstBaseURL: false) components?.queryItems = [ URLQueryItem(name: \"token\", value: message.token), URLQueryItem(name: \"channel\", value: message.channel), URLQueryItem(name: \"text\", value: message.text), URLQueryItem(name: \"pretty\", value: \"1\") ] if let username = message.username { components?.queryItems?.append( URLQueryItem(name: \"username\", value: username) ) } guard let requestUrl = components?.url else { completion(.failure(PumaError.invalid)) return } var request = URLRequest(url: requestUrl) request.allHTTPHeaderFields = [ \"Accept\": \"application/json\" ] let task = URLSession.shared.dataTask(with: request, completionHandler: { data, response, error in guard let data = data else { completion(.failure(error ?? PumaError.invalid)) return } do { let response = try JSONDecoder().decode(Response.self, from: data) if response.ok { completion(.success(())) } else { completion(.failure(PumaError.from(string: response.error))) } } catch { completion(.failure(error)) } }) task.resume() }} Read more slackbot-yoda Slack bot in Nodejs","link":"/blog/How-to-send-message-from-bot-to-Slack-in-Swift/"},{"title":"How to shake NSView in macOS","text":"Issue #233 Animation on macOS using CAAnimationShake 12345678910let midX = box.layer?.position.x ?? 0let midY = box.layer?.position.y ?? 0let animation = CABasicAnimation(keyPath: \"position\")animation.duration = 0.06animation.repeatCount = 4animation.autoreverses = trueanimation.fromValue = CGPoint(x: midX - 10, y: midY)animation.toValue = CGPoint(x: midX + 10, y: midY)box.layer?.add(animation, forKey: \"position\") Animation on macOS using NSAnimationContextWiggle 1234567891011121314NSAnimationContext.runAnimationGroup({ context in let animation = CAKeyframeAnimation(keyPath: \"transform\") animation.beginTime = CACurrentMediaTime() + 5.0 animation.duration = 0.1 animation.autoreverses = true let wobbleAngle: CGFloat = 0.08 animation.values = [ NSValue(caTransform3D: CATransform3DMakeRotation(wobbleAngle, 0.0, 0.0, 1.0)), NSValue(caTransform3D: CATransform3DMakeRotation(-wobbleAngle, 0.0, 0.0, 1.0)) ] view.layer?.add(animation, forKey: \"transform\")}, completionHandler: { self.makeAnimation(view: view)}) Animation on iOS using UIView animation block12345678extension UIView { func shake() { self.transform = CGAffineTransform(translationX: 16, y: 0) UIView.animate(withDuration: 0.4, delay: 0, usingSpringWithDamping: 0.2, initialSpringVelocity: 1, options: .curveEaseInOut, animations: { self.transform = CGAffineTransform.identity }, completion: nil) }}","link":"/blog/How-to-shake-NSView-in-macOS/"},{"title":"How to show context menu from NSButton in macOS","text":"Issue #435 Use NSMenu and popUp 1234567891011121314151617181920212223242526func showQuitMenu() { let menu = NSMenu() let aboutItem = NSMenuItem( title: \"About\", action: #selector(onAboutTouched(_:)), keyEquivalent: \"\" ) let quitItem = NSMenuItem( title: \"Quit Hacker Pad\", action: #selector(onQuitTouched(_:)), keyEquivalent: \"\" ) aboutItem.target = self quitItem.target = self menu.addItem(aboutItem) menu.addItem(quitItem) menu.popUp( positioning: aboutItem, at: bottomView.quitButton.frame.origin, in: bottomView )} Use Omnia 12345678910let menuHandler = MenuHandler()menuHandler.add(title: \"About\", action: { NSWorkspace.shared.open(URL(string: \"https://onmyway133.github.io/\")!)})menuHandler.add(title: \"Quit Hacker Pad\", action: { NSApp.terminate(nil)})menuHandler.show(from: self.bottomView.gearButton, in: self.bottomView)","link":"/blog/How-to-show-context-menu-from-NSButton-in-macOS/"},{"title":"How to show documentations for GitHub projects","text":"Issue #481 Use jazzy to generate documentation which the generated artifacts in docs folder GitHub has a nifty feature to use docs as GitHub pages","link":"/blog/How-to-show-documentations-for-GitHub-projects/"},{"title":"How to show dropdown from NSSegmentedControl in AppKit","text":"Issue #331 From NSSegmentedControl The features of a segmented control include the following:A segment can have an image, text (label), menu, tooltip, and tag.A segmented control can contain images or text, but not both. 1234567891011121314151617181920212223242526272829let languageMenu = NSMenu(title: \"\")let languages = [\"Swift\", \"Javascript\"]languages.forEach { let item = NSMenuItem(title: $0, action: #selector(handleSelectLanguage(_:)), keyEquivalent: \"\") item.target = self item.isEnabled = true languageMenu.addItem(item)}let themeMenu = NSMenu(title: \"\")let themes = [\"one dark\", \"one light\"]themes.forEach { let item = NSMenuItem(title: $0, action: #selector(handleSelectLanguage(_:)), keyEquivalent: \"\") item.target = self item.isEnabled = true themeMenu.addItem(item)}segment.segmentCount = 2segment.selectedSegmentBezelColor = NSColor.redsegment.setLabel(\"Language\", forSegment: 0)segment.setLabel(\"Theme\", forSegment: 1segment.setMenu(languageMenu, forSegment: 0)segment.setMenu(themeMenu, forSegment: 1segment.showsMenuIndicator(forSegment: 0)segment.showsMenuIndicator(forSegment: 1)","link":"/blog/How-to-show-dropdown-from-NSSegmentedControl-in-AppKit/"},{"title":"How to show dropdown in AppKit","text":"Issue #336 Use NSPopUpButton var pullsDown: Bool A Boolean value indicating whether the button displays a pull-down or pop-up menu. func addItem(withTitle: String)Adds an item with the specified title to the end of the menu. Should disable pullsDown if we want to set title automatically and not scale button for title Read more Managing Pop-Up Buttons and Pull-Down Lists","link":"/blog/How-to-show-dropdown-in-AppKit/"},{"title":"How to show error message like Snack Bar in iOS","text":"Issue #472 Build error viewUse convenient code from Omnia To make view height dynamic, pin UILabel to edges and center 12345678910111213141516171819202122232425262728293031323334353637383940414243import UIKitfinal class ErrorMessageView: UIView { let box: UIView = { let view = UIView() view.backgroundColor = R.color.primary view.layer.cornerRadius = 6 return view }() let label: UILabel = { let label = UILabel() label.styleAsText() label.textColor = R.color.darkText label.numberOfLines = 0 return label }() override init(frame: CGRect) { super.init(frame: frame) setup() } required init?(coder: NSCoder) { fatalError() } private func setup() { addSubviews([box, label]) NSLayoutConstraint.on([ box.pinEdges(view: self, inset: UIEdgeInsets.all(16)), label.pinEdges(view: box, inset: UIEdgeInsets.all(8)) ]) NSLayoutConstraint.on([ box.heightAnchor.constraint(greaterThanOrEqualToConstant: 48) ]) NSLayoutConstraint.on([ label.centerYAnchor.constraint(equalTo: centerYAnchor) ]) }} Show and hideUse Auto Layout and basic UIView animation. Use debouncer to avoid hide gets called for the new show. Use debouncer instead of DispatchQueue.main.asyncAfter because it can cancel the previous DispatchWorkItem 12345678910111213141516171819202122232425262728293031323334353637383940414243import UIKitfinal class ErrorMessageHandler { let view: UIView let errorMessageView = ErrorMessageView() let debouncer = Debouncer(delay: 0.5) init(view: UIView) { self.view = view } func show(text: String) { self.errorMessageView.label.text = text view.addSubview(errorMessageView) NSLayoutConstraint.on([ errorMessageView.leftAnchor.constraint(equalTo: view.leftAnchor), errorMessageView.rightAnchor.constraint(equalTo: view.rightAnchor), errorMessageView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor) ]) toggle(shows: true) debouncer.run { self.hide() } } func hide() { toggle(shows: false) } private func toggle(shows: Bool) { self.errorMessageView.alpha = shows ? 0 : 1.0 UIView.animate(withDuration: 0.25, animations: { self.errorMessageView.alpha = shows ? 1.0 : 0 }, completion: { _ in if shows { self.view.bringSubviewToFront(self.errorMessageView) } else { self.errorMessageView.removeFromSuperview() } }) }} Handle keyboardIf we add this error message on UIView in ViewController and we use KeyboardHandler to scroll the entire view, then this snack bar will move up as well 12345678910final class ErrorMessageHandler { private let errorMessageView = ErrorMessageView() private var view = UIView() private var bottomOffset: CGFloat = 0 func on(view: UIView, bottomOffset: CGFloat) { self.view = view self.bottomOffset = bottomOffset }} UIView animation completionOne tricky thing is that if we call hide and then show immediately, the completion of hide will be called after and then remove the view. When we start animation again, the previous animation is not finished, so we need to check Read UIView.animate completionA block object to be executed when the animation sequence ends. This block has no return value and takes a single Boolean argument that indicates whether or not the animations actually finished before the completion handler was called. If the duration of the animation is 0, this block is performed at the beginning of the next run loop cycle. This parameter may be NULL. 1234567891011121314private func toggle(shows: Bool) { self.errorMessageView.alpha = shows ? 0 : 1.0 UIView.animate(withDuration: 0.25, delay: 0, options: .curveEaseInOut, animations: { self.errorMessageView.alpha = shows ? 1.0 : 0 }, completion: { finished in if shows { self.view.bringSubviewToFront(self.errorMessageView) } else if finished { self.errorMessageView.removeFromSuperview() } else { // No op } })}","link":"/blog/How-to-show-error-message-like-Snack-Bar-in-iOS/"},{"title":"How to show context menu in NSCollectionView","text":"Issue #321 Detect locationInWindow in NSEvent1234567891011121314151617181920212223242526272829303132333435class ClickedCollectionView: NSCollectionView { var clickedIndex: Int? override func menu(for event: NSEvent) -&gt; NSMenu? { clickedIndex = nil let point = convert(event.locationInWindow, from: nil) for index in 0..&lt;numberOfItems(inSection: 0) { let frame = frameForItem(at: index) if NSMouseInRect(point, frame, isFlipped) { clickedIndex = index break } } return super.menu(for: event) }}let menu = NSMenu()menu.addItem(NSMenuItem(title: \"Delete\", action: #selector(didSelectDelete(_:)), keyEquivalent: \"\"))collectionView.menu = menu@objc func didSelectDelete(_ item: NSMenuItem) { guard let index = collectionView.clickedIndex, index &lt; notes.count else { return } let indexPath = IndexPath(item: index, section: 0) notes.remove(at: index) collectionView.deleteItems(at: Set(arrayLiteral: indexPath))} For NSCollectionView with more than 1 sections 1let frame = layoutAttributesForItem(at: IndexPath(item: index, section: 0))?.frame ?? .zero Use OmniaOmnia supports clicked indexPath for multi section NSCollectionView 123collectionViewHandler.addMenuItem(title: \"Add to Favorite\", action: { item in print(item) })","link":"/blog/How-to-show-context-menu-in-NSCollectionView/"},{"title":"How to show generic list in Fragment in Android","text":"Issue #378 After having a generic RecyclerView, if we want to show multiple kinds of data in Fragment, we can use generic. We may be tempted to use interface or protocol, but should prefer generic. 12345678910111213141516171819class FeedFragment() : Fragment() { override fun onActivityCreated(savedInstanceState: Bundle?) { super.onActivityCreated(savedInstanceState) val mainViewModel: MainViewModel = ViewModelProviders.of(activity!!).get(MainViewModel::class.java) mainViewModel.resId.observe(viewLifecycleOwner, Observer { when (it) { R.id.gitHub -&gt; { handleGitHub() } R.id.hackerNews -&gt; { handleHackerNews() } R.id.reddit -&gt; { handleReddit() } R.id.dev -&gt; { handleDev() } R.id.productHunt -&gt; { handleProductHunt() } else -&gt; {} } }) recyclerView.layoutManager = LinearLayoutManager(context) }} The difference between each kind are The type of model The type of Adapter How to observe from viewModel How to load from viewModel Here we also use lifecycleScope from lifecycle runtime ktx 1implementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha01\" 12345678910111213141516171819202122232425private fun &lt;T&gt; handle( makeResId: () -&gt; Int, makeAdapter: () -&gt; com.myapp.Adapter&lt;T&gt;, observe: ((ArrayList&lt;T&gt;) -&gt; Unit) -&gt; Unit, load: suspend () -&gt; Unit) { (activity as AppCompatActivity).toolbar.title = getString(makeResId()) val adapter = makeAdapter() recyclerView.adapter = adapter observe { adapter.update(it) } fun doLoad() { viewLifecycleOwner.lifecycleScope.launch { progressBar.visibility = View.VISIBLE load() progressBar.visibility = View.GONE swipeRefreshLayout.isRefreshing = false } } doLoad() swipeRefreshLayout.setOnRefreshListener { doLoad() }} Then we just need to provide the required data 123456789101112131415private fun handleDev() { val viewModel: com.myapp.ViewModel by viewModel() handle( { R.string.menu_dev }, { com.myapp.Adapter(items = arrayListOf()) }, { completion -&gt; viewModel.items.observe(viewLifecycleOwner, Observer { completion(it) }) }, { viewModel.load() } )} Read more Use Kotlin coroutines with Architecture components","link":"/blog/How-to-show-generic-list-in-Fragment-in-Android/"},{"title":"How to show flag emoji from country code in Swift","text":"Issue #532 12345678func flag(from country: String) -&gt; String { let base : UInt32 = 127397 var s = \"\" for v in country.uppercased().unicodeScalars { s.unicodeScalars.append(UnicodeScalar(base + v.value)!) } return s} Read moree Swift turn a country code into a emoji flag via unicode https://github.com/onmyway133/Smile","link":"/blog/How-to-show-flag-emoji-from-country-code-in-Swift/"},{"title":"How to show full screen window programmatically in macOS","text":"Issue #242 12345let window = NSWindow(contentRect: mainScreen.frame, styleMask: .borderless, backing: .buffered, defer: false)window.level = .floatingwindow.contentView = NSView()window.makeKeyAndOrderFront(NSApp)NSApp.activate(ignoringOtherApps: true) and then later hide it 1window.orderOut(NSApp)","link":"/blog/How-to-show-full-screen-window-programmatically-in-macOS/"},{"title":"How to select file in its directory in AppKit","text":"Issue #407 https://developer.apple.com/documentation/appkit/nsworkspace/1524399-selectfile In macOS 10.5 and later, this method does not follow symlinks when selecting the file. If the fullPath parameter contains any symlinks, this method selects the symlink instead of the file it targets. If you want to select the target file, use the resolvingSymlinksInPath method to resolve any symlinks before calling this method. It is safe to call this method from any thread of your app. 123NSWorkspace.shared.selectFile( url.path, inFileViewerRootedAtPath: url.deletingLastPathComponent().path)","link":"/blog/How-to-select-file-in-its-directory-in-AppKit/"},{"title":"How to show image picker in SwiftUI","text":"Issue #485 The easiest way to show image picker in iOS is to use UIImagePickerController, and we can bridge that to SwiftUI via UIViewControllerRepresentable First attempt, use EnvironmentWe conform to UIViewControllerRepresentable and make a Coordinator, which is the recommended way to manage the bridging with UIViewController. There‚Äôs some built in environment property we can use, one of those is presentationMode where we can call dismiss to dismiss the modal. My first attempt looks like below 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import SwiftUIimport UIKitpublic struct ImagePicker: UIViewControllerRepresentable { @Environment(\\.presentationMode) private var presentationMode @Binding var image: UIImage? public func makeCoordinator() -&gt; ImagePicker.Coordinator { return ImagePicker.Coordinator( presentationMode: presentationMode, image: $image ) } public func makeUIViewController(context: UIViewControllerRepresentableContext&lt;ImagePicker&gt;) -&gt; UIImagePickerController { let controller = UIImagePickerController() controller.delegate = context.coordinator return controller } public func updateUIViewController(_ uiViewController: UIImagePickerController, context: UIViewControllerRepresentableContext&lt;ImagePicker&gt;) { // No op }}public extension ImagePicker { class Coordinator: NSObject, UINavigationControllerDelegate { @Binding var presentationMode: PresentationMode @Binding var image: UIImage? public init(presentationMode: Binding&lt;PresentationMode&gt;, image: Binding&lt;UIImage?&gt;) { self._presentationMode = presentationMode self._image = image } }}extension ImagePicker.Coordinator: UIImagePickerControllerDelegate { public func imagePickerController( _ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]) { self.image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage presentationMode.dismiss() } public func imagePickerControllerDidCancel(_ picker: UIImagePickerController) { presentationMode.dismiss() }} SignaturesWe need to be aware of the types of these property wrappers Where we declare environment, presentationMode is of type Binding&lt;PresentationMode&gt; 1@Environment(\\.presentationMode) private var presentationMode Given a Binding declaration, for example @Binding var image: UIImage?, image is of type UIImage? but $image is Binding&lt;UIImage?&gt; 123456public func makeCoordinator() -&gt; ImagePicker.Coordinator { return ImagePicker.Coordinator( image: $image, isPresented: $isPresented )} When we want to assign to variables in init, we use _image to use mutable Binding&lt;UIImage?&gt; because self.$image gives us immutable Binding&lt;UIImage?&gt; 123456789class Coordinator: NSObject, UINavigationControllerDelegate { @Binding var presentationMode: PresentationMode @Binding var image: UIImage? public init(presentationMode: Binding&lt;PresentationMode&gt;, image: Binding&lt;UIImage?&gt;) { self._presentationMode = presentationMode self._image = image }} How to useTo show modal, we use sheet and use a state @State var showImagePicker: Bool = false to control its presentation 12345678Button(action: { self.showImagePicker.toggle()}, label: { Text(\"Choose image\")}).sheet(isPresented: $showImagePicker, content: { ImagePicker(image: self.$image)}) Environment outside bodyIf we run the above code, it will crash because of we access environment value presentationMode in makeCoordinator and this is outside body Fatal error: Reading Environment&lt;Binding&gt; outside View.body 123456public func makeCoordinator() -&gt; ImagePicker.Coordinator { return ImagePicker.Coordinator( presentationMode: presentationMode, image: $image )} Second attempt, pass closureSo instead of passing environment presentationMode, we can pass closure, just like in React where we pass functions to child component. So ImagePicker can just accept a closure called onDone, and the component that uses it can do the dismissal. 12345678910Button(action: { self.showImagePicker.toggle()}, label: { Text(\"Choose image\")}).sheet(isPresented: $showImagePicker, content: { ImagePicker(image: self.$image, onDone: { self.presentationMode.wrappedValue.dismiss() })}) Unfortunately, although the onDone gets called, the modal is not dismissed. Use Binding instead of EnvironmentMaybe there are betters way, but we can use Binding to replace usage of Environment. We can do that by accepting Binding and change the isPresented state 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import SwiftUIimport UIKitpublic struct ImagePicker: UIViewControllerRepresentable { @Binding var image: UIImage? @Binding var isPresented: Bool public func makeCoordinator() -&gt; ImagePicker.Coordinator { return ImagePicker.Coordinator( image: $image, isPresented: $isPresented ) } public func makeUIViewController(context: UIViewControllerRepresentableContext&lt;ImagePicker&gt;) -&gt; UIImagePickerController { let controller = UIImagePickerController() controller.delegate = context.coordinator return controller } public func updateUIViewController(_ uiViewController: UIImagePickerController, context: UIViewControllerRepresentableContext&lt;ImagePicker&gt;) { // No op }}public extension ImagePicker { class Coordinator: NSObject, UINavigationControllerDelegate { @Binding var isPresented: Bool @Binding var image: UIImage? public init(image: Binding&lt;UIImage?&gt;, isPresented: Binding&lt;Bool&gt;) { self._image = image self._isPresented = isPresented } }}extension ImagePicker.Coordinator: UIImagePickerControllerDelegate { public func imagePickerController( _ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]) { self.image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage isPresented = false } public func imagePickerControllerDidCancel(_ picker: UIImagePickerController) { isPresented = false }} How to use it 12345678Button(action: { self.showImagePicker.toggle()}, label: { Text(\"Choose image\")}).sheet(isPresented: $showImagePicker, content: { ImagePicker(image: self.$image, isPresented: self.$showImagePicker)}) Pass ImagePicker to Coordinator Using coordinators to manage SwiftUI view controllers So that we can call parent.presentationMode.wrappedValue.dismiss()","link":"/blog/How-to-show-image-picker-in-SwiftUI/"},{"title":"How to show list with section in SwiftUI","text":"Issue #511 12345678910111213141516171819202122232425struct CountriesView: View { let groups: [Group] init(countries: [Country]) { self.groups = CountryManager.shared.groups(countries: countries) } var body: some View { List { ForEach(groups) { group in Section( header: Text(group.initial) .foregroundColor(Color.yellow) .styleTitle(), content: { ForEach(group.countries) { country in CountryRow(country: country) } } ) } } }}","link":"/blog/How-to-show-list-with-section-in-SwiftUI/"},{"title":"How to show popover for item in ForEach in SwiftUI","text":"Issue #618 Create custom Binding 12345678910111213141516List { ForEach(self.items) { (item: item) in ItemRowView(item: item) .popover(isPresented: self.makeIsPresented(item: item)) { ItemDetailView(item: item) } }}func makeIsPresented(item: Item) -&gt; Binding&lt;Bool&gt; { return .init(get: { return self.selectedId == item.id }, set: { _ in self.selectedId = nil })}","link":"/blog/How-to-show-popover-for-item-in-ForEach-in-SwiftUI/"},{"title":"How to show loading indicator in SwiftUI","text":"Issue #486 1234567891011121314151617181920import SwiftUIstruct ActivityIndicator: UIViewRepresentable { @Binding var isAnimating: Bool let style: UIActivityIndicatorView.Style func makeUIView(context: UIViewRepresentableContext&lt;ActivityIndicator&gt;) -&gt; UIActivityIndicatorView { return UIActivityIndicatorView(style: style) } func updateUIView(_ uiView: UIActivityIndicatorView, context: UIViewRepresentableContext&lt;ActivityIndicator&gt;) { isAnimating ? uiView.startAnimating() : uiView.stopAnimating() }}struct ActivityIndicator_Previews: PreviewProvider { static var previews: some View { ActivityIndicator(isAnimating: .constant(true), style: .large) }}","link":"/blog/How-to-show-loading-indicator-in-SwiftUI/"},{"title":"How to show log in Apple Script","text":"Issue #436 Open Script Editor, use log command and look for 4 tabs in bottom panel Result, Messages, Events and Replies 1log &quot;hello world&quot;","link":"/blog/How-to-show-log-in-Apple-Script/"},{"title":"How to show location in Apple Maps and Google Maps app in iOS","text":"Issue #309 Apple Maps1234let placemark = MKPlacemark(coordinate: coordinate, addressDictionary: nil)let mapItem = MKMapItem(placemark: placemark)mapItem.name = shop.namemapItem.openInMaps(launchOptions: [:]) Google Maps https://developers.google.com/maps/documentation/urls/ios-urlscheme Use q to show pin Since iOS 9, we need to declare LSApplicationQueriesSchemes 1234&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;&lt;array&gt; &lt;string&gt;comgooglemaps&lt;/string&gt;&lt;/array&gt; 12345678910var string = \"comgooglemaps://\"string += \"?q=Food\"string += \"&amp;center=\\(coordinate.latitude),\\(coordinate.longitude)\"string += \"&amp;zoom=15\"let googleUrl = URL(string: string)!if UIApplication.shared.canOpenURL(URL(string: \"comgooglemaps://\")!) { UIApplication.shared.open(googleUrl)}","link":"/blog/How-to-show-location-in-Apple-Maps-and-Google-Maps-app-in-iOS/"},{"title":"How to show localized text in SwiftUI","text":"Issue #533 123456789101112struct ContentView: View { @Environment(\\.locale) var locale: Locale var body: some View { VStack { Text(LocalizedStringKey(\"hello\")) .font(.largeTitle) Text(flag(from: locale.regionCode!)) .font(.largeTitle) } }}","link":"/blog/How-to-show-localized-text-in-SwiftUi/"},{"title":"How to show web content as QR code in SwiftUI in watchOS","text":"Issue #449 WatchKit does not have Web component, despite the fact that we can view web content https://www.imore.com/how-view-web-pages-apple-watch-watchos-5 A workaround is to show url as QR code 1234567891011121314151617181920212223import SwiftUIstruct QRCodeView: View { let title: String let url: URL var body: some View { GeometryReader { geometry in VStack { self.makeImage(size: geometry.size) .padding(.top, 10) Text(\"Scan to open\") .font(.system(.footnote)) }.navigationBarTitle(self.title) } } private func makeImage(size: CGSize) -&gt; some View { let value = size.height - 30 return RemoteImage(url: self.url) .frame(width: value, height: value, alignment: .center) }}","link":"/blog/How-to-show-web-content-as-QR-code-in-SwiftUI-in-watchOS/"},{"title":"How to simplify UIApplication life cycle observation in iOS","text":"Issue #375 1234567891011121314151617final class LifecyclerHandler { private var observer: AnyObject! var action: (() -&gt; Void)? private let debouncer = Debouncer(delay: 1.0) func setup() { observer = NotificationCenter.default.addObserver( forName: UIApplication.didBecomeActiveNotification, object: nil, queue: .main, using: { [weak self] _ in self?.debouncer.run { self?.action?() } }) }} 123456789101112private let lifecycleHandler = LifecyclerHandler()override func viewDidLoad() { super.viewDidLoad() lifecycleHandler.action = { Deps.userHandler.refreshToken() } lifecycleHandler.setup()}","link":"/blog/How-to-simplify-UIApplication-life-cycle-observation-in-iOS/"},{"title":"How to show save panel in AppKit","text":"Issue #405 Enable Read/Write for User Selected File under Sandbox to avoid bridge absent error 12345678910111213141516171819202122232425262728func save() { let panel = NSSavePanel() // 3 panel.directoryURL = FileManager.default.homeDirectoryForCurrentUser // 4 panel.nameFieldStringValue = \"abc.gif\" // 5 guard let window = view.window else { return } panel.beginSheetModal(for: window) { (result) in guard result == .OK, let url = panel.url else { self.showAlert() return } }}func showAlert() { let alert = NSAlert() alert.messageText = \"Hello world\" alert.informativeText = \"Information text\" alert.addButton(withTitle: \"OK\") alert.addButton(withTitle: \"Cancel\") alert.runModal()} To save multiple files, use NSOpenPanel 12345let panel = NSOpenPanel()panel.canChooseFiles = falsepanel.allowsMultipleSelection = falsepanel.canChooseDirectories = truepanel.directoryURL = FileManager.default.homeDirectoryForCurrentUser Read more https://www.raywenderlich.com/666-filemanager-class-tutorial-for-macos-getting-started-with-the-file-system https://stackoverflow.com/questions/47954418/using-cocoa-nssavepanel-in-sandbox-causes-assertion-failure https://stackoverflow.com/questions/18417432/how-to-show-alert-pop-up-in-in-cocoa","link":"/blog/How-to-show-save-panel-in-AppKit/"},{"title":"How to simplify anchor with NSLayoutConstraint in iOS","text":"Issue #368 See https://github.com/onmyway133/Omnia/blob/master/Sources/iOS/NSLayoutConstraint.swift 1234567891011121314151617181920212223242526272829303132extension NSLayoutConstraint { /// Disable auto resizing mask and activate constraints /// /// - Parameter constraints: constraints to activate static func on(_ constraints: [NSLayoutConstraint]) { constraints.forEach { ($0.firstItem as? UIView)?.translatesAutoresizingMaskIntoConstraints = false $0.isActive = true } } static func on(_ constraintsArray: [[NSLayoutConstraint]]) { let constraints = constraintsArray.flatMap({ $0 }) NSLayoutConstraint.on(constraints) } func priority(_ value: Float) -&gt; NSLayoutConstraint { priority = UILayoutPriority(value) return self }}extension Array where Element == NSLayoutConstraint { func priority(_ value: Float) -&gt; [NSLayoutConstraint] { forEach { $0.priority = UILayoutPriority(value) } return self }} 12345678910extension UILayoutGuide { func pinEdges(view: UIView, inset: UIEdgeInsets = UIEdgeInsets.zero) -&gt; [NSLayoutConstraint] { return [ leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: inset.left), trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: inset.right), topAnchor.constraint(equalTo: view.topAnchor, constant: inset.top), bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: inset.bottom) ] }} 1234567891011121314151617181920212223242526272829303132333435363738394041424344extension UIView { func pinEdges(view: UIView, inset: UIEdgeInsets = UIEdgeInsets.zero) -&gt; [NSLayoutConstraint] { return [ leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: inset.left), trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: inset.right), topAnchor.constraint(equalTo: view.topAnchor, constant: inset.top), bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: inset.bottom) ] } func pinCenter(view: UIView, offset: CGPoint = .zero) -&gt; [NSLayoutConstraint] { return [ centerXAnchor.constraint(equalTo: view.centerXAnchor, constant: offset.x), centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: offset.y) ] } func padding(view: UIView, _ constant: CGFloat = 0) -&gt; [NSLayoutConstraint] { return [ leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: constant), trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -constant) ] } func size(_ constant: CGFloat) -&gt; [NSLayoutConstraint] { return [ widthAnchor.constraint(equalToConstant: constant), heightAnchor.constraint(equalToConstant: constant) ] } func size(_ width: CGFloat, _ height: CGFloat) -&gt; [NSLayoutConstraint] { return [ widthAnchor.constraint(equalToConstant: width), heightAnchor.constraint(equalToConstant: height) ] } func addSubviews(_ views: [UIView]) { views.forEach { addSubview($0) } }}","link":"/blog/How-to-simplify-anchor-with-NSLayoutConstraint-in-iOS/"},{"title":"How to simplify pager interaction with Rx","text":"Issue #333 In a traditional pager with many pages of content, and a bottom navigation with previous and next button. Each page may have different content, and depending on each state, may block the next button. The state of next button should state in real time depending on state in each page content, and when user moves back and forth between pages, the state of next button should be reflected as well. We might have 12345678910111213141516extension ViewController: BottomNavigationDelegate { func bottomNavigationCanGoNext(currentIndex: Int) -&gt; Bool {} func bottomNavigationDidMoveTo(index: Int) {}}extension ViewController: PreferencePageDelegate { func preferencePageDidSelect(itemCount: Int) {}}extension ViewController: FormPageDelegate { func formPageDidCheck(valid: Bool) {}}extension ViewController: ConsentPageDelegate { func consentPageDidAccept(agree: Bool) {}} The indirect communications between each page, bottom navigation and ViewController get complicated and out of hands very quickly. This is a perfect problem for Rx to solve. If we look closely, the state of next button is a derivative of current index, how many items selected in preferences, valid form and agreement status. 12345678910111213141516171819202122232425262728class BottomNavigation { let index = PublishSubject&lt;Int&gt;()}class PreferencePage { let itemCount = PublishSubject&lt;Int&gt;()}class FormPage { let valid = PublishSubject&lt;Bool&gt;()}class ConsentPage { let agree = PublishSubject&lt;Bool&gt;()}let canNext = Observable .combineLatest(bottomNavigation.index, preferencePage.itemCount, formPage.valid, consentPage.agree) .map({ (index, itemCount, valid, agree) -&gt; Bool in // Logic goes here to reduce, for example switch index { case 0: return true case 1: return itemCount &gt; 2 case 2: return valid case 3: Return agree default: return false } })","link":"/blog/How-to-simplify-pager-interaction-with-Rx/"},{"title":"How to simplify get GRPC streaming in Swift","text":"Issue #360 Given a streaming service 123service Server { rpc GetUsers(GetUsersRequest) returns (stream GetUsersResponse);} To get a response list in Swift, we need to do observe stream, which is a subclass of ClientCallServerStreaming 123456789101112131415161718192021222324252627282930func getUsers(roomId: String, completion: @escaping (Result&lt;[User], Error&gt;) -&gt; Void) { let request = withValue(Server_GetUsersRequest()) { $0.roomId = roomId } DispatchQueue.global().async { var users = [User]() do { var streaming = true let stream = try self.client.getUsers(request, completion: { _ in streaming = false }) while streaming { if let response = try stream.receive() { users.append(response.user) } } DispatchQueue.main.async { completion(.success(users)) } } catch { DispatchQueue.main.async { completion(.failure(error)) } } }} This can get repetitive very fast. To avoid the duplication, we can make a generic function 123456789101112131415161718192021222324252627282930313233import SwiftGRPCfunc getStream&lt;Streaming, Response&gt;( makeStream: @escaping (@escaping () -&gt; Void) throws -&gt; Streaming, receive: @escaping (Streaming) throws -&gt; Response?, completion: @escaping (Result&lt;[Response], Error&gt;) -&gt; Void) { DispatchQueue.global().async { var responses = [Response]() do { var streaming = true let stream = try makeStream({ streaming = false }) while streaming { if let response = try receive(stream) { responses.append(response) } } DispatchQueue.main.async { completion(.success(responses)) } } catch { DispatchQueue.main.async { completion(.failure(error)) } } }} Since swift-grpc generates very concrete structs, we need to use generic. The difference is the Streaming class and Response struct 12345678910111213141516func getUsers(roomId: String, completion: @escaping (Result&lt;[User], Error&gt;) -&gt; Void) { let request = withValue(Server_GetUsersRequest()) { $0.roomId = roomId } getStream( makeStream: { completion in return try self.client.getUsers(request, completion: { _ in completion() }) }, receive: { stream in return try stream.receive() }, completion: { result in completion(result.map { $0.map { $0.user }}) })} Handle CallResult1234567891011import SwiftGRPCimport SwiftProtobufextension CallResult { func toError() -&gt; NSError { return NSError(domain: \"com.myApp\", code: statusCode.rawValue, userInfo: [ \"status_code\": statusCode, \"status_message\": statusMessage ?? \"\" ]) }}","link":"/blog/How-to-simplify-get-GRPC-streaming-in-Swift/"},{"title":"How to simplify struct mutating in Swift","text":"Issue #354 In Construction, we have a build method to apply closure to inout struct. We can explicitly define that with withValue 12345func withValue&lt;T&gt;(_ value: T, closure: (inout T) -&gt; Void) -&gt; T { var mutableValue = value closure(&amp;mutableValue) return mutableValue} So we can modify Protobuf structs easily 123456user.book = withValue(Book()) { $0.price = 300 $0.author = withValue(Author()) { $0.name = \"Thor\" }}","link":"/blog/How-to-simplify-struct-mutating-in-Swift/"},{"title":"How to specify locale in Swift","text":"Issue #578 LocaleRead Language and Locale IDs 12zh-Hans_HK[language designator]-[script designator]_[region designator] Language IDs A language ID identifies a language used in many regions, a dialect used in a specific region, or a script used in multiple regions. To specify a language used in many regions, use a language designator by itself. To specify a specific dialect, use a hyphen to combine a language designator with a region designator. To specify a script, combine a language designator with a script designator. For example, to specify common English, use the en language designator as the language ID. To specify the English language as it is used in the United Kingdom, use en-GB as the language ID. Locale IDs A locale ID identifies a specific region and its cultural conventions‚Äîsuch as the formatting of dates, times, and numbers. To specify a locale, use an underscore character to combine a language ID with a region designator, as shown in Table B-5. For example, the locale ID for English-language speakers in the United Kingdom is en_GB, while the locale for English-speaking residents of the United States is en_US. Example 12345678910let formatter = DateFormatter()formatter.dateStyle = .mediumformatter.timeStyle = .shortformatter.locale = Locale.current10. jan. 2018, 16:50 // nb_NO10. jan. 2018, 16:50 // nb_US iOS 1210. jan. 2018, 4:50 pm // nb_US iOS 1310 Jan 2018 at 16:50 // en_NOJan 10, 2018 at 4:50 PM // en_US Date formatUse DateFormatter Style Example short Specifies a short style, typically numeric only, such as ‚Äú11/23/37‚Äù or ‚Äú3:30 PM‚Äù. Example medium Specifies a medium style, typically with abbreviated text, such as ‚ÄúNov 23, 1937‚Äù or ‚Äú3:30:32 PM‚Äù. From template https://stackoverflow.com/questions/5135482/how-to-determine-if-locales-date-format-is-month-day-or-day-month https://developer.apple.com/documentation/foundation/dateformatter If you need to define a format that cannot be achieved using the predefined styles, you can use the setLocalizedDateFormatFromTemplate(_:) to specify a localized date format from a template. 123456789101112let dateFormatter = DateFormatter()let date = Date(timeIntervalSinceReferenceDate: 410220000) // US English Locale (en_US)dateFormatter.locale = Locale(identifier: \"en_US\")dateFormatter.setLocalizedDateFormatFromTemplate(\"MMMMd\") // set template after setting localeprint(dateFormatter.string(from: date)) // December 31 // British English Locale (en_GB)dateFormatter.locale = Locale(identifier: \"en_GB\")dateFormatter.setLocalizedDateFormatFromTemplate(\"MMMMd\") // // set template after setting localeprint(dateFormatter.string(from: date)) // 31 December Read more https://nsdateformatter.com/ https://albertodebortoli.com/2020/01/06/the-ios-internationalization-basics-i-keep-forgetting/","link":"/blog/How-to-specify-locale-in-Swift/"},{"title":"How to set language and locale with xcodebuild","text":"Issue #540 testLanguage and testRegion1234567-testLanguage language Specifies ISO 639-1 language during testing. This overrides the setting for the test action of a scheme in a workspace.-testRegion region Specifies ISO 3166-1 region during testing. This overrides the setting for the test action of a scheme in a workspace. 1xcodebuild -project 'TestApp.xcodeproj' -scheme 'TestAppUITests' -configuration Debug -sdk iphonesimulator -UseModernBuildSystem=YES -destination 'OS=13.2.2,name=iPhone 11,platform=iOS Simulator' -testLanguage ja -testRegion ja_JP test","link":"/blog/How-to-set-language-and-locale-with-xcodebuild/"},{"title":"How to sort strings with number in Javascript","text":"Issue #251 123456789101112131415161718192021222324252627282930313233function sort() { const string = `- Favorite WWDC 2017 sessions https://github.com/onmyway133/blog/issues/56- Favorite WWDC 2018 sessions https://github.com/onmyway133/blog/issues/245- How to do clustering with Google Maps in iOS https://github.com/onmyway133/blog/issues/191` const lines = string .split('\\n') .filter((line) =&gt; { return line.length &gt; 0 }) .map((line) =&gt; { let parts = line.trimEnd().split(' ') let lastPart = parts[parts.length-1] let number = lastPart.replace('https://github.com/onmyway133/blog/issues/', '') return { line, number: parseInt(number) } }) lines.sort((a, b) =&gt; { return (a.number &lt; b.number) ? -1 : 1 }) const sortedString = lines .map((tuple) =&gt; { return tuple.line }) .join('\\n') console.log(sortedString)} Then node index.js","link":"/blog/How-to-sort-strings-with-number-in-Javascript/"},{"title":"How to stop implicit animation when title change on UIButton","text":"Issue #345 UIButton with system type has implicit animation for setTitle(_:for:) Use this method to set the title for the button. The title you specify derives its formatting from the button‚Äôs associated label object. If you set both a title and an attributed title for the button, the button prefers the use of the attributed title over this one. At a minimum, you should set the value for the normal state. If a title is not specified for a state, the default behavior is to use the title associated with the normal state. If the value for normal is not set, then the property defaults to a system value. 1234UIView.performWithoutAnimation { button.setTitle(title, for: .normal) button.layoutIfNeeded()}","link":"/blog/How-to-stop-implicit-animation-when-title-change-on-UIButton/"},{"title":"How to specify year in date formatter in Swift","text":"Issue #565 Serious Security: The decade-ending Y2K bug that wasnt Challenges of DateFormatters","link":"/blog/How-to-specify-year-in-date-formatter-in-Swift/"},{"title":"How to style NSButton in AppKit","text":"Issue #297 1234567891011121314151617let button = NSButton()button.wantsLayer = truebutton.isBordered = falsebutton.setButtonType(.momentaryChange)button.attributedTitle = NSAttributedString( string: \"Click me\", attributes: [ NSAttributedString.Key.foregroundColor: NSColor.white, NSAttributedString.Key.font: NSFont.labelFont(ofSize: 13) ]button.layer?.backgroundColor = NSColor.orange.cgColorbutton.layer?.cornerRadius = 12activate( button.anchor.height.equal.to(32), button.anchor.width.equal.to(100)) To make it have native rounded rect 1234button.imageScaling = .scaleProportionallyDownbutton.setButtonType(.momentaryPushIn)button.bezelStyle = .roundedbutton.isBordered = true 1234567891011121314151617181920import AppKitimport Omniaextension NSButton { func style(imageName: String) { image = NSImage(named: NSImage.Name(imageName)) isBordered = false imageScaling = .scaleProportionallyDown } func styleAction(title: String) { attributedTitle = NSAttributedString(string: title, attributes: [ NSAttributedString.Key.foregroundColor: NSColor(hex: \"008B80\"), NSAttributedString.Key.font: NSFont.boldSystemFont(ofSize: 13) ]) isBordered = false setButtonType(.momentaryChange) }} Read more https://mackuba.eu/2014/10/06/a-guide-to-nsbutton-styles","link":"/blog/How-to-style-NSButton-in-AppKit/"},{"title":"How to support Swift Package Manager for existing projects","text":"Issue #445 How to add SPM Run swift package init Check enum for version for each platform https://developer.apple.com/documentation/swift_packages/supportedplatform/tvosversion Example https://github.com/onmyway133/Anchors/blob/master/Package.swift 12345678910111213141516171819202122232425262728// swift-tools-version:5.1import PackageDescriptionlet package = Package( name: \"Anchors\", platforms: [ .macOS(.v10_11), .iOS(.v9), .tvOS(.v9) ], products: [ .library( name: \"Anchors\", targets: [\"Anchors\"]), ], targets: [ .target( name: \"Anchors\", dependencies: [], path: \"Sources\" ), .testTarget( name: \"AnchorsTests\", dependencies: [\"Anchors\"]), ], swiftLanguageVersions: [.v5]) To test, swift test to test locally, this should validate Package.swift too Support multiple platformTo support multiple platform, use platform check 123#if canImport(UIKit)import UIKit#endif Use sources in Target https://developer.apple.com/documentation/swift_packages/target/2880339-sources https://github.com/onmyway133/EasyClosure/blob/master/Package.swift If this property is nil, all valid source files in the target‚Äôs path will be included and specified paths are relative to the target path. A path can be a path to a directory or an individual source file. In case of a directory, the Swift Package Manager searches for valid source files recursively inside it. 123456.target( name: \"EasyClosureiOS\", dependencies: [], path: \"Sources\", sources: [\"Shared\", \"iOS\"]) Error error: target ‚ÄòEasyClosuremacOS‚Äô has sources overlapping sources How to use SPM packages are at DerivedData/MyApp/SourcePackages/checkouts Delete DerivedData for Xcode to fetch new contents from GitHub Clean build folder as Xcode often caches changes from frameworks Read more https://dive.github.io/swift-package-manager/ios/2019/01/20/swift_package_manager_vs_ios.html","link":"/blog/How-to-support-Swift-Package-Manager-for-existing-projects/"},{"title":"How to structure classes","text":"Issue #466 iOS 1View Controller -&gt; View Model | Logic Handler -&gt; Data Handler -&gt; Repo Android 1Activity -&gt; Fragment -&gt; View Model | Logic Handler -&gt; Data Handler -&gt; Repo","link":"/blog/How-to-structure-classes/"},{"title":"How to style NSTextView and NSTextField in macOS","text":"Issue #443 12let textField = NSTextField()textField.focusRingType = .none 12345678let textView = NSTextView()textView.insertionPointColor = R.color.carettextView.isRichText = falsetextView.importsGraphics = falsetextView.isEditable = truetextView.isSelectable = truetextView.drawsBackground = falsetextView.allowsUndo = true","link":"/blog/How-to-style-NSTextView-and-NSTextField-in-macOS/"},{"title":"How to submit electron app to AppStore","text":"Issue #342 BeforeInstall electron as dev npm install electron --save-devUpdate electron-packager npm install electron-packager@latest --save-devUse no space in app name Package with electron-packagerFollow https://github.com/electron/electron-osx-sign/wiki/Packaging-and-Submitting-an-Electron-App-to-the-Mac-App-Store 123npx electron-packager . \"MyApp\" --app-bundle-id=com.onmyway133.MyApp --helper-bundle-id=com.onmyway133.MyApp.helper --app-version=1.4.0 --build-version=1.0.100 --platform=mas --arch=x64 --icon=Icon/Icon.icns --overwritenpx electron-osx-sign \"MyApp-mas-x64/MyApp.app\" --verbosenpx electron-osx-flat \"MyApp-mas-x64/MyApp.app\" --verbose If you have multiple developer identities in your keychain: electron-osx-sign searches your keychain for the first signing certificates that it can locate. If you have multiple certificates then it may not know which cert you want to use for signing and you need to explicitly provide the name: 1electron-osx-sign &quot;My App-mas-x64/My App.app&quot; --identity=&quot;3rd Party Mac Developer Application: My Company, Inc (ABCDEFG1234)&quot; --verbose Read moreSign with electron-osx-signRead README https://github.com/electron/electron-osx-sign For distribution in the Mac App Store: Have the provisioning profile for distribution placed in the current working directory and the signing identity installed in the default keychain. CertificateOn developer.apple.com, create Mac App Distribution certificate. Make sure when we download in Keychain Access, it has associated private key Manually upload1/Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m upload -assetFile MyApp/MyApp.pkg -u onmyway133@gmail.com -p mypassword Use Application LoaderUse Using app-specific passwords Troubleshootingelectron Bad CFBundleExecutable. Cannot find executable file ERROR ITMS-90261: ‚ÄúBad CFBundleExecutable. Cannot find executable file that matches the value of CFBundleExecutable in the nested bundle MyApp [com.onmyway133.MyApp.pkg/Payload/MyApp.app/Contents/Frameworks/MyApp (GPU).app] property list file.‚Äù https://github.com/electron/electron-packager/issues?utf8=%E2%9C%93&amp;q=helper Try electron 5.0.0 npm install electron@5.0.0 --save-dev Specifically, we found that when the user closes the main application window there is no menu item to re-open it.https://stackoverflow.com/questions/35008347/electron-close-w-x-vs-right-click-dock-and-quit 12345678910111213141516function createMenu() { const application = { label: \"MyApp\", submenu: [ { label: \"New\", accelerator: \"Command+N\", click: () =&gt; { if (win === null) { createWindow() } } } ] }} ‚Äòelectron-osx-flat@latest‚Äô is not in the npm registry1npm install -g electron-osx-sign@latest App sandbox not enabledelectron-osx-sign Command failed: codesign1ran xattr -cr * Command failed: codesign bundle format is ambiguous Perhaps you accidentally packaged the previous generated app bundle into your newly packaged app? Remove dist folder generated by electron-builder","link":"/blog/How-to-submit-electron-app-to-AppStore/"},{"title":"How to sync multiple CAAnimation","text":"Issue #600 Use same CACurrentMediaTime 12345678910111213141516final class AnimationSyncer { static let now = CACurrentMediaTime() func makeAnimation() -&gt; CABasicAnimation { let animation = CABasicAnimation(keyPath: \"opacity\") animation.fillMode = .forwards animation.fromValue = 0 animation.toValue = 1 animation.repeatCount = .infinity animation.duration = 2 animation.beginTime = Self.now animation.autoreverses = true animation.timingFunction = CAMediaTimingFunction(name: .easeInEaseOut) return animation }}","link":"/blog/How-to-sync-multiple-CAAnimation/"},{"title":"How to support copy paste in electron","text":"Issue #67 After running electron-packager, the app does not accept copy, paste anymore. This is because the release build does not have menu with key binding to the clipboard by default. We can solve this by manually declaring the menu 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475const {app} = require('electron')const Menu = require('electron').Menuapp.on('ready', () =&gt; { createWindow() createMenu()})function createMenu() { const application = { label: \"Application\", submenu: [ { label: \"About Application\", selector: \"orderFrontStandardAboutPanel:\" }, { type: \"separator\" }, { label: \"Quit\", accelerator: \"Command+Q\", click: () =&gt; { app.quit() } } ] } const edit = { label: \"Edit\", submenu: [ { label: \"Undo\", accelerator: \"CmdOrCtrl+Z\", selector: \"undo:\" }, { label: \"Redo\", accelerator: \"Shift+CmdOrCtrl+Z\", selector: \"redo:\" }, { type: \"separator\" }, { label: \"Cut\", accelerator: \"CmdOrCtrl+X\", selector: \"cut:\" }, { label: \"Copy\", accelerator: \"CmdOrCtrl+C\", selector: \"copy:\" }, { label: \"Paste\", accelerator: \"CmdOrCtrl+V\", selector: \"paste:\" }, { label: \"Select All\", accelerator: \"CmdOrCtrl+A\", selector: \"selectAll:\" } ] } const template = [ application, edit ] Menu.setApplicationMenu(Menu.buildFromTemplate(template))} Reference Electron - Enable copy and paste Paste into input field doesn‚Äôt work after packaging up app","link":"/blog/How-to-support-copy-paste-in-electron/"},{"title":"How to support drag and drop in UICollectionView iOS","text":"Issue #411 See DragAndDrop example 1234567891011121314151617181920212223242526272829303132333435363738394041class ViewController: UIViewController, UICollectionViewDropDelegate, UICollectionViewDragDelegate { // MARK: - UICollectionViewDragDelegate func collectionView(_ collectionView: UICollectionView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath) -&gt; [UIDragItem] { let controller = leftController let provider = NSItemProvider( object: controller.imageForCell(indexPath: indexPath) ) let dragItem = UIDragItem(itemProvider: provider) dragItem.localObject = indexPath return [dragItem] } // MARK: - UICollectionViewDropDelegate func collectionView(_ collectionView: UICollectionView, performDropWith coordinator: UICollectionViewDropCoordinator) { let destinationIndexPath: IndexPath if let indexPath = coordinator.destinationIndexPath { destinationIndexPath = indexPath } else { destinationIndexPath = IndexPath(row: 0, section: 0) } let controller = rightController let dragItemIndexPath = coordinator.items.last?.dragItem.localObject as! IndexPath let draggedItem = leftController.items[dragItemIndexPath.item] // remove leftController.items.remove(at: dragItemIndexPath.item) leftController.collectionView.deleteItems(at: [dragItemIndexPath]) // insert controller.items.insert(draggedItem, at: destinationIndexPath.item) controller.collectionView.insertItems(at: [destinationIndexPath]) }}","link":"/blog/How-to-support-drag-and-drop-in-UICollectionView-iOS/"},{"title":"How to sign executable for sandbox","text":"Issue #401 Find identity 1security find-identity Sign with entitlements and identity. For macOS, use 3rd Party Mac Developer Application 1codesign -f -s &quot;3rd Party Mac Developer Application: Khoa Pham (123DK123F2)&quot; --entitlements &quot;MyApp.entitlements&quot; &quot;tool/mytool&quot; To enable harden runtime 1codesign --verbose --force --deep -o runtime --sign","link":"/blog/How-to-sign-executable-for-sandbox/"},{"title":"How to test DispatchQueue in Swift","text":"Issue #646 Sync the DispatchQueuePass DispatchQueue and call queue.sync to sync all async works before asserting Use mockUse DispatchQueueType and in mock, call the work immediately 1234567891011121314151617import Foundationpublic protocol DispatchQueueType { func async(execute work: @escaping @convention(block) () -&gt; Void)}extension DispatchQueue: DispatchQueueType { public func async(execute work: @escaping @convention(block) () -&gt; Void) { async(group: nil, qos: .unspecified, flags: [], execute: work) }}final class MockDispatchQueue: DispatchQueueType { func async(execute work: @escaping @convention(block) () -&gt; Void) { work() }}","link":"/blog/How-to-test-DispatchQueue-in-Swift/"},{"title":"How to take an app from a private framework in macOS","text":"Issue #3 The other day I was browsing through https://github.com/sindresorhus/touch-bar-simulator, it was very brilliant of him to pull IDETouchBarSimulatorHostWindowController from DFRSupportKit.framework. This is worth checking out","link":"/blog/How-to-take-an-app-from-a-private-framework-in-macOS/"},{"title":"How to  take screenshots for UITest in Xcodee","text":"Issue #539 XCUIScreenshot12345678extension XCTestCase { func takeScreenshot(name: String) { let screenshot = XCUIScreen.main.screenshot() let attach = XCTAttachment(screenshot: screenshot) attach.lifetime = .keepAlways add(attach) }} Gather screenshot for localization Creating Great Localized Experiences with Xcode 11 xcresult from Xcode 11 https://www.chargepoint.com/engineering/xcparse/ xcparse Command line tool &amp; Swift framework for parsing Xcode 11+ xcresult xcresulttool Testing in Xcode Test plan WWDC19: Getting Started with Test Plan for XCTest","link":"/blog/How-to-take-screenshots-for-UITest-in-Xcodee/"},{"title":"How to support drag and drop in NSView","text":"Issue #410 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import AppKitimport Anchorsclass DraggingView: NSView { var didDrag: ((FileInfo) -&gt; Void)? let highlightView = NSView() override init(frame frameRect: NSRect) { super.init(frame: frameRect) registerForDraggedTypes([ .fileURL ]) highlightView.isHidden = true addSubview(highlightView) activate(highlightView.anchor.edges) highlightView.wantsLayer = true highlightView.layer?.borderColor = NSColor(hex: \"#FF6CA8\").cgColor highlightView.layer?.borderWidth = 6 } required init?(coder decoder: NSCoder) { fatalError() } override func draggingEntered(_ sender: NSDraggingInfo) -&gt; NSDragOperation { highlightView.isHidden = false return NSDragOperation() } override func draggingEnded(_ sender: NSDraggingInfo) { guard let pathAlias = sender.draggingPasteboard.propertyList(forType: .fileURL) as? String else { return } let url = URL(fileURLWithPath: pathAlias).standardized let fileInfo = FileInfo(url: url) didDrag?(fileInfo) } override func draggingExited(_ sender: NSDraggingInfo?) { highlightView.isHidden = true } override func draggingUpdated(_ sender: NSDraggingInfo) -&gt; NSDragOperation { return NSDragOperation() }} To get information about multiple files 12345678910111213141516override func draggingEnded(_ sender: NSDraggingInfo) { guard let pasteBoardItems = sender.draggingPasteboard.pasteboardItems else { return } let fileInfos: [FileInfo] = pasteBoardItems .compactMap({ return $0.propertyList(forType: .fileURL) as? String }) .map({ let url = URL(fileURLWithPath: $0).standardized return FileInfo(url: url) }) didDrag(fileInfos)}","link":"/blog/How-to-support-drag-and-drop-in-NSView/"},{"title":"How to speed up GMSMarker in Google Maps for iOS","text":"Issue #412 Google Maps with a lot of pin, and no clustering can have bad performance if there are complex view in the marker. The workaround is to use manual layout and rasterization shouldRasterize When the value of this property is true, the layer is rendered as a bitmap in its local coordinate space and then composited to the destination with any other content. Shadow effects and any filters in the filters property are rasterized and included in the bitmap. However, the current opacity of the layer is not rasterized. If the rasterized bitmap requires scaling during compositing, the filters in the minificationFilter and magnificationFilter properties are applied as needed. In the class PinView: UIView 123456789101112131415isOpaque = truelayer.shouldRasterize = truelayer.rasterizationScale = UIScreen.main.scalefinal class StopMarker: GMSMarker { let stop: Stop private let pinView = PinView() init(stop: Stop) { self.stop = stop super.init() self.position = stop.toCoordinate() self.iconView = pinView }} Read more iOS Performance tips I: Drawing shadows When your app needs to draw something on the screen, the GPU takes your layer hierarchy (UIView is just a wrapper on top of CALayer, which in the end are OpenGL textures) and applies one by one on top of each other based on their x,y,z position. In regular rendering, the whole operation happens in special frame buffers that the display will directly read for rendering on the screen, repeating the process at a rate around 60 times per second. Of course the process have some drawbacks as well. The main one is that offscreen rendering requires a context switch (GPU has to change to a different memory area to perform the drawing) and then copying the resulting composited layer into the frame buffer. Every time any of the composited layers change, the cache needs to be redrawn again. This is why in many circumstances offscreen rendering is not a good idea, as it requires additional computation when need to be rerendered. Besides, the layer requires extra video memory which of course is limited, so use it with caution. Getting Pixels onto the Screen https://stackoverflow.com/questions/19405741/when-should-i-set-layer-shouldrasterize-to-yes","link":"/blog/How-to-speed-up-GMSMarker-in-Google-Maps-for-iOS/"},{"title":"How to test drag and drop in UITests","text":"Issue #583 In UITests, we can use press from XCUIElement to test drag and drop 12345let fromCat = app.buttons[\"cat1\"].firstMatchlet toCat = app.buttons[\"cat2\"]let fromCoordinate = fromCat.coordinate(withNormalizedOffset: CGVector(dx: 0, dy: 0))let toCoordinate = toCat.coordinate(withNormalizedOffset: CGVector(dx: 0, dy: -0.5))fromCoordinate.press(forDuration: 1, thenDragTo: toCoordinate) and then take screenshot 12345let screenshot = XCUIScreen.main.screenshot()let attachment = XCTAttachment(screenshot: screenshot)attachment.lifetime = .keepAlwaysattachment.name = nameadd(attachment) Screenshot capturing happens after the action, so it may be too late. One way is to inject launch arguments, like app.launchArguments.append(&quot;--dragdrop&quot;) to alter some code in the app. We can also swizzle gesture recognizer to alter behavior 123456789101112131415161718192021222324extension UILongPressGestureRecognizer { @objc var uiTests_state: UIGestureRecognizer.State { let state = self.uiTests_state if state == .ended { return .changed } else { return state } }}let originalSelector = #selector(getter: UILongPressGestureRecognizer.state)let swizzledSelector = #selector(getter: UILongPressGestureRecognizer.uiTests_state)let originalMethod = class_getInstanceMethod(UILongPressGestureRecognizer.self, originalSelector)!let swizzledMethod = class_getInstanceMethod(UILongPressGestureRecognizer.self, swizzledSelector)!let didAddMethod = class_addMethod(UILongPressGestureRecognizer.self, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))if didAddMethod { class_replaceMethod(UILongPressGestureRecognizer.self, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))} else { method_exchangeImplementations(originalMethod, swizzledMethod)}","link":"/blog/How-to-test-drag-and-drop-in-UITests/"},{"title":"How to test LaunchScreen in iOS","text":"Issue #249 Making splash screen with LaunchScreen.storyboard is now the default way to do in iOS. Testing it with UITests is a bit tricky as this screen is showed the system, and if we test that, we are just testing the system. What we should test is the content we put in the LaunchScreen storyboard. Is it showing correctly on different screen sizes? Is it missing any texts or images? One way to test that is via Unit Test. LaunchScreen storyboard always come with 1 UIViewController configured as an initial view controller 123456789101112class LauncScreenTests: XCTestCase { func testLaunchScreen() { let launchScreen = UIStoryboard(name: \"LaunchScreen\", bundle: nil) let viewController = launchScreen.instantiateInitialViewController()! let label = viewController.view.subviews.compactMap({ $0 as? UILabel }).first! XCTAssertEqual(label.text, \"Welcome to my app\") let imageView = viewController.view.subviews.compactMap({ $0 as? UIImageView }).first! XCTAssertNotNil(imageView.image) }}","link":"/blog/How-to-test-LaunchScreen-in-iOS/"},{"title":"How to test PublishSubject in RxSwift","text":"Issue #218 RxBlocking does not work with Variable and PublishSubject, see https://github.com/ReactiveX/RxSwift/blob/0b66f666ba6955a51cba1ad530311b030fa4db9c/Tests/RxSwiftTests/Observable%2BSubscriptionTest.swift#L165 Use homemade Recorder12345678910111213141516class Recorder&lt;T&gt; { var items = [T]() let bag = DisposeBag() func on(arraySubject: PublishSubject&lt;[T]&gt;) { arraySubject.subscribe(onNext: { value in self.items = value }).disposed(by: bag) } func on(valueSubject: PublishSubject&lt;T&gt;) { valueSubject.subscribe(onNext: { value in self.items.append(value) }).disposed(by: bag) }} Then test 12345678910111213141516final class BookViewModelTests: XCTestCase { func testBooks() throws { let expectation = self.expectation(description: #function) let recorder = Recorder&lt;Book&gt;() let viewModel = BookViewModel(bookClient: MockBookClient()) recorder.on(arraySubject: viewModel.books) viewModel.load() DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.5, execute: { expectation.fulfill() }) wait(for: [expectation], timeout: 2) XCTAssertEqual(recorder.items.count, 3) }} Need to use great timeout value as DispatchQueue is not guaranteed to be precise, a block needs to wait for the queue to be empty before it can be executed Make expectation less cumbersome1234567891011extension XCTestCase { func waitOrFail(timeout: TimeInterval) { let expectation = self.expectation(description: #function) DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + timeout, execute: { expectation.fulfill() }) wait(for: [expectation], timeout: timeout + 2) }}","link":"/blog/How-to-test-PublishSubject-in-RxSwift/"},{"title":"How to toggle with animation in SwiftUI","text":"Issue #632 Use Group 12345678910111213141516171819private func makeHeader() -&gt; some View { Group { if showsSearch { SearchView( onSearch: onSearch ) .transition(.move(edge: .leading)) } else { InputView( onAdd: onAdd ) .transition(.move(edge: .leading)) } }}withAnimation { self.showsSearch.toggle()}","link":"/blog/How-to-toggle-with-animation-in-SwiftUI/"},{"title":"How to trigger onAppear in SwiftUI for macOS","text":"Issue #626 SwiftUI does not trigger onAppear and onDisappear like we expect. We can use NSView to trigger 12345678910111213141516171819202122232425262728import SwiftUIstruct AppearAware: NSViewRepresentable { var onAppear: () -&gt; Void func makeNSView(context: NSViewRepresentableContext&lt;AppearAware&gt;) -&gt; AwareView { let view = AwareView() view.onAppear = onAppear return view } func updateNSView(_ nsView: AwareView, context: NSViewRepresentableContext&lt;AppearAware&gt;) { }}final class AwareView: NSView { private var trigged: Bool = false var onAppear: () -&gt; Void = {} override func viewDidMoveToSuperview() { super.viewDidMoveToSuperview() guard !trigged else { return } trigged = true onAppear() }} Then we can use it as an hidden view, like in a ZStack 12345678ZStack { AppearAware(onAppear: { LocalImageCache.shared.load(url: url) { image in self.image = image } }) Image(image)}","link":"/blog/How-to-trigger-onAppear-in-SwiftUI-for-macOS/"},{"title":"How to update FetchRequest with predicate in SwiftUI","text":"Issue #621 Make subview that accepts FetchRequest. Trigger search by setting property 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374struct SideView: View { @Environment(\\.managedObjectContext) var context @State var search: Search? var body: some View { VStack(alignment: .leading) { SearchView( onSearch: self.onSearch ) InsideListView(fetchRequest: makeFetchRequest()) } } private func makeFetchRequest() -&gt; FetchRequest&lt;Book&gt; { let predicate: NSPredicate? if let search = search { let textPredicate = NSPredicate(format: \"string CONTAINS[cd] %@\", search.text) let appPredicate = NSPredicate(format: \"appName == %@\", search.app) let typePredicate = NSPredicate(format: \"type == %@\", search.type) var predicates: [NSPredicate] = [] if search.text.count &gt;= 3 { predicates.append(textPredicate) } if search.app != Constants.all { predicates.append(appPredicate) } if search.type != Constants.all { predicates.append(typePredicate) } predicate = NSCompoundPredicate(andPredicateWithSubpredicates: predicates) } else { predicate = nil } return FetchRequest&lt;Book&gt;( entity: Book.entity(), sortDescriptors: [ NSSortDescriptor(keyPath: \\Book.date, ascending: false) ], predicate: predicate ) } private func onSearch(_ search: Search) { if search.text.count &lt; 3 &amp;&amp; search.type != Constants.all &amp;&amp; search.app != Constants.all { self.search = nil } else { self.search = search } }}private struct InsideListView: View { @Environment(\\.managedObjectContext) var context var fetchRequest: FetchRequest&lt;Book&gt; var body: some View { List(items) { ForEach } } private var items: FetchedResults&lt;Book&gt; { fetchRequest.wrappedValue }}","link":"/blog/How-to-update-FetchRequest-with-predicate-in-SwiftUI/"},{"title":"How to test a developing package with Swift Package Manager","text":"Issue #525 Use macOS Command Line projectExample Puma Create a new macOS project, select Command Line Tool Drag Puma.xcodeproj as a sub project of our test project Go to our TestPuma target, under Link Binary with Libraries, select Puma framework Puma has dependencies on PumaCore and PumaiOS, but in Xcode we only need to select Puma framework In code, we need to explicitly import PumaiOS framework if we use any of its classes 1234567891011import Foundationimport Pumaimport PumaiOSfunc testDrive() { run { SetVersionNumber { $0.buildNumberForAllTarget(\"1.1\") } }} As our Puma.xcodeproj is inside this test project, we can drill down into our Puma.xcodeproj and update the code. WorkspaceInstead of dragging Puma as a subproject of TestPuma, we can use workspace, and link Puma frameworks TroubleshootingCode signing for frameworksTo avoid signing issue, we need to select a Team for all frameworks not valid for use in process using Library Validation: mapped file has no Team ID and is not a platform binary (signed with custom identity or adhoc? Library not loadedNeed to set runpath search path, read https://stackoverflow.com/questions/28577692/macos-command-line-tool-with-swift-cocoa-framework-library-not-loaded Specify LD_RUNPATH_SEARCH_PATHS = @executable_path in Build Settings missing required module ‚Äòclibc‚ÄôTake a look at Puma -&gt; SPMLibc, there‚Äôs header search path 1$(SRCROOT)/.build/checkouts/swift-package-manager/Sources/clibc/include which is at the .build folder inside root So for our TestPuma target, we need to add this header search path with the correct path 1$(SRCROOT)/../../.build/checkouts/swift-package-manager/Sources/clibc/include Read more Swift Package Manager Developing using Xcode Editing A Swift Package","link":"/blog/How-to-test-a-developing-package-with-Swift-Package-Manager/"},{"title":"How to test drive view in iOS","text":"Issue #303 Instead of setting up custom framework and Playground, we can just display that specific view as root view controller 1234567891011121314151617181920window.rootViewController = makeTestPlayground()func makeTestPlayground() -&gt; UIViewController { let content = UserCell() content.nameLabel.text = \"Thor\" content.streetLabel.text = \"Asgard\" content.weaponLabel.text = \"Hammer\" let viewController = UIViewController() viewController.view.backgroundColor = .white viewController.view.addSubview(content) NSLayoutConstraint.on([ content.centerXAnchor.constraint(equalTo: viewController.view.centerXAnchor), content.centerYAnchor.constraint(equalTo: viewController.view.centerYAnchor), content.widthAnchor.constraint(equalTo: viewController.view.widthAnchor, multiplier0.9), content.heightAnchor.constraint(equalToConstant: 200) ] return viewController}","link":"/blog/How-to-test-drive-view-in-iOS/"},{"title":"How to test for viewDidLoad in iOS","text":"Issue #52 Suppose we have the following view controller 123456class ListController: UIViewController { override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = .white }} Get to know viewDidLoadWe know that viewDidLoad is called when view is created the first time. So in the the Unit Test, if you use viewDidLoad to trigger, you will fall into a trap 1234func testSetup() { let controller = ListController() controller.viewDidLoad()} Why is viewDidLoad called twice? It is called once in your test And in your viewDidLoad method, you access view, which is created the first time, hence it will trigger viewDidLoad again The correct wayThe best practice is not to trigger events yourself, but do something to make event happen. In Unit Test, we just access view to trigger viewDidLoad 1234func testSetup() { let controller = ListController() let _ = controller.view}","link":"/blog/How-to-test-for-viewDidLoad-in-iOS/"},{"title":"How to use Applications folder in macOS","text":"Issue #573 There are 2 Applications folder /System/Applications: contains Notes, Books, Calculator, ‚Ä¶ /Applications: contains Safari, Xcode, Keynote, ‚Ä¶","link":"/blog/How-to-use-Applications-folder-in-macOS/"},{"title":"How to sync an async function in Swift","text":"Issue #547 1234567891011121314func sync&lt;T&gt;(_ work: (@escaping ([T]) -&gt; Void) -&gt; Void) -&gt; [T] { let semaphore = DispatchSemaphore(value: 1) var results = [T]() work { values in results = values semaphore.signal() } return results}sync({ completion in service.load(completion)})","link":"/blog/How-to-sync-an-async-function-in-Swift/"},{"title":"How to update NSMenuItem while NSMenu is showing in macOS","text":"Issue #213 Use Runloop 123456timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true, block: { [weak self] _ in let date = Date() self?.updateStopItem(seconds: finishDate.timeIntervalSince1970 - date.timeIntervalSince1970)}) RunLoop.main.add(timer!, forMode: .common) Use Dispatch 123456timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true, block: { [weak self] _ in let date = Date() DispatchQueue.main.async { self?.updateStopItem(seconds: finishDate.timeIntervalSince1970 - date.timeIntervalSince1970) }})","link":"/blog/How-to-update-NSMenuItem-while-NSMenu-is-showing-in-macOS/"},{"title":"How to use AnyHashable in Swift","text":"Issue #453 From documentation A type-erased hashable value. DiscussionThe AnyHashable type forwards equality comparisons and hashing operations to an underlying hashable value, hiding its specific underlying type.You can store mixed-type keys in dictionaries and other collections that require Hashable conformance by wrapping mixed-type keys in AnyHashable instances 12345678910let descriptions: [AnyHashable: Any] = [ AnyHashable(\"üòÑ\"): \"emoji\", AnyHashable(42): \"an Int\", AnyHashable(Int8(43)): \"an Int8\", AnyHashable(Set([\"a\", \"b\"])): \"a set of strings\"]print(descriptions[AnyHashable(42)]!) // prints \"an Int\"print(descriptions[AnyHashable(43)]) // prints \"nil\"print(descriptions[AnyHashable(Int8(43))]!) // prints \"an Int8\"print(descriptions[AnyHashable(Set([\"a\", \"b\"]))]!) // prints \"a set of strings\" We don‚Äôt necessarily need to map from [AnyHashable: Any] to [String: Any], we can just access via string key 1userInfo[\"aps\"]","link":"/blog/How-to-use-AnyHashable-in-Swift/"},{"title":"How to test UserDefaults in iOS","text":"Issue #518 12let userDefaults = UserDefaults(suiteName: suiteName)userDefaults.removePersistentDomain(forName: suiteName) https://developer.apple.com/documentation/foundation/userdefaults/1417339-removepersistentdomain Calling this method is equivalent to initializing a user defaults object with init(suiteName:) passing domainName, and calling the removeObject(forKey:) method on each of its keys. Read more https://www.swiftbysundell.com/articles/the-power-of-userdefaults-in-swift/ http://dscoder.com/defaults.html https://medium.com/swift-india/userdefaults-under-the-hood-457461c8d262","link":"/blog/How-to-test-UserDefaults-in-iOS/"},{"title":"How to use Apple certificate in Xcode 11","text":"Issue #458 For push notification, we can now use just Production Certificate for 2 environments (production and sandbox) instead of Development and Production certificates. Now for code signing, with Xcode 11 https://developer.apple.com/documentation/xcode_release_notes/xcode_11_release_notes we can just use Apple Development and Apple Distribution certificate for multiple platforms Signing and capabilities settings are now combined within a new Signing &amp; Capabilities tab in the Project Editor. The new tab enables using different app capabilities across multiple build configurations. The new capabilities library makes it possible to search for available capabilities Xcode 11 supports the new Apple Development and Apple Distribution certificate types. These certificates support building, running, and distributing apps on any Apple platform. Preexisting iOS and macOS development and distribution certificates continue to work, however, new certificates you create in Xcode 11 use the new types. Previous versions of Xcode don‚Äôt support these certificates","link":"/blog/How-to-use-Apple-certificate-in-Xcode-11/"},{"title":"How to use AppFlowController in iOS","text":"Issue #364 AppFlowController.swift 1234567891011121314151617181920212223242526272829303132333435363738394041import UIKitimport GoogleMapsimport Stripefinal class AppFlowController: UIViewController { private lazy var window = UIWindow(frame: UIScreen.main.bounds) func configure() { GMSServices.provideAPIKey(Constant.googleMapsApiKey) STPPaymentConfiguration.shared().publishableKey = Constant.stripeKey } func start() { if Deps.onboardingHandler.hasOnboarded { startMain() } else { startOnboarding() } window.makeKeyAndVisible() } func startOnboarding() { let controller = OnboardingController() controller.delegate = self window.rootViewController = controller } func startMain() { let controller = MainFlowController() window.rootViewController = controller controller.start() }}extension AppFlowController: OnboardingControllerDelegate { func onboardingControllerDidFinish(_ controller: OnboardingController) { Deps.onboardingHandler.hasOnboarded = true startMain() }} AppDelegate.swift 123456789101112131415@UIApplicationMainclass AppDelegate: UIResponder, UIApplicationDelegate { private let appFlowController = AppFlowController() func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { appFlowController.configure() appFlowController.start() UIApplication.shared.registerForRemoteNotifications() FirebaseApp.configure() return true }}","link":"/blog/How-to-use-AppFlowController-in-iOS/"},{"title":"How to use Controller and View in iOS","text":"Issue #37 I like to write UI in code, and with Auto Layout, it is an easy task. However that leaves ViewController with a lots of code. One way we can do is to separate V from C in MVC, by using a dedicated view We can do that with generic, that initialises a view and replace the view, let‚Äôs call it root 123456789import UIKitclass BaseController&lt;T: UIView&gt;: UIViewController { let root = T() override func loadView() { view = root }} Now we can have a UIView subclass, like LoginView 123456789101112131415161718192021222324252627282930313233343536final class LoginView: UIView { lazy var textField: UITextField = UITextField().then { $0.textAlignment = .center $0.borderStyle = .roundedRect $0.keyboardType = .phonePad } lazy var button: UIButton = UIButton().then { $0.setTitleColor(.black, for: .normal) $0.backgroundColor = .lightGray } override init(frame: CGRect) { super.init(frame: frame) addSubviews( textField, button ) Constraint.on( textField.centerXAnchor.constraint(equalTo: textField.superview!.centerXAnchor), textField.centerYAnchor.constraint(equalTo: textField.superview!.centerYAnchor), textField.widthAnchor.constraint(equalTo: textField.superview!.widthAnchor, constant: -20), button.topAnchor.constraint(equalTo: textField.bottomAnchor, constant: 20), button.centerXAnchor.constraint(equalTo: button.superview!.centerXAnchor), button.widthAnchor.constraint(equalTo: textField.widthAnchor, multiplier: 0.8), button.heightAnchor.constraint(equalToConstant: 44) ) } required init?(coder aDecoder: NSCoder) { fatalError() }} And then the LoginController 1234567891011121314151617181920final class LoginController: BaseController&lt;LoginView&gt; { override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = .white let gr = UITapGestureRecognizer(target: self, action: #selector(viewTapped)) root.addGestureRecognizer(gr) root.button.setTitle(\"Login\", for: .normal) root.button.addTarget(self, action: #selector(loginButtonTouched), for: .touchUpInside) root.button.isEnabled = false root.button.showsTouchWhenHighlighted = true root.textField.placeholder = \"Phone number\" root.textField.delegate = self root.textField.text = dependencyContainer.phoneService.prefix root.textField.addTarget(self, action: #selector(textFieldDidChange), for: .editingChanged) }} And this is how we declare the LoginController 12let loginController = LoginController()navigationController.viewControllers = [loginController]","link":"/blog/How-to-use-Controller-and-View-in-iOS/"},{"title":"How to use CAReplicatorLayer to make activity indicator in iOS","text":"Issue #230 CAReplicatorLayer is a layer that creates a specified number of sublayer copies with varying geometric, temporal, and color transformations Here we use instanceTransform which applies transformation matrix around the center of the replicator layer Below is how we use replicatorLayer to replicate lots of line and rotate them around the center. 12345678910111213141516171819202122232425262728293031323334let replicatorLayer = CAReplicatorLayer()let animation = CABasicAnimation(keyPath: #keyPath(CALayer.opacity))let line = CALayer()let lineCount: Int = 12let duration: TimeInterval = 1.0let lineSize: CGSize = CGSize(width: 20, height: 6)let lineColor: UIColor = UIColor.darkGraylet angle = CGFloat.pi * 2 / CGFloat(lineCount)let rotation = CATransform3DMakeRotation(angle, 0, 0, 1.0)replicatorLayer.instanceTransform = rotationreplicatorLayer.instanceCount = lineCountreplicatorLayer.instanceDelay = duration / TimeInterval(lineCount)line.backgroundColor = lineColor.cgColorline.frame.size = lineSizeline.cornerRadius = lineSize.height / 2animation.fromValue = 1.0animation.toValue = 0.0animation.repeatCount = Float.greatestFiniteMagnitudeanimation.timingFunction = CAMediaTimingFunction(name: .linear)animation.duration = durationreplicatorLayer.addSublayer(line)layer.addSublayer(replicatorLayer)// x: // y: half the height, changing affects rotation of linesline.position = CGPoint(x: 48, y: 75)line.add(animation, forKey: nil) Pay attention to position of the line. The larger the x, the closer to center. y should be half the height of the replicator layer size, changing it affects the skewness of the line.","link":"/blog/How-to-use-CAReplicatorLayer-to-make-activity-indicator-in-iOS/"},{"title":"How to use CreateML to classify images","text":"Issue #491 CreateMLUI Playground Read more https://developer.apple.com/documentation/createml/creating_an_image_classifier_model https://captechconsulting.com/blogs/hands-on-with-the-all-new-create-ml-app-machine-learning-for-the-masses Training Sound Classification Models in Create ML - WWDC 2019 Building Activity Classification Models in Create ML - WWDC 2019 Create ML for Everyone","link":"/blog/How-to-use-CreateML-to-classify-images/"},{"title":"How to use Firebase Crashlytics in macOS app","text":"Issue #585 New Firebase CrashlyticsFollow the new Firebase Crashlytics guide Get started with Firebase Crashlytics using the Firebase Crashlytics SDK CocoaPodsSpecify FirebaseCore for community managed macOS version of Firebase 12345678910platform :osx, '10.13'target 'MyMacApp' do # Comment the next line if you don't want to use dynamic frameworks use_frameworks! pod 'FirebaseCore' pod 'Firebase/Crashlytics'end Signing and capabilitiesUnder Hardware runtime, check Disable library validationUnder App sandbox, enable Outgoing connections (Client) Run scriptAdd a new run script build phrase to the last 1&quot;${PODS_ROOT}/FirebaseCrashlytics/run&quot; In that build phase, under Input Files, specify dsym and info plist file for dsym to be recognized 12$(SRCROOT)/$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Resources/DWARF/${TARGET_NAME} AppDelegate1234import FirebaseCoreimport FirebaseCrashlyticsFirebaseApp.configure()","link":"/blog/How-to-use-Firebase-Crashlytics-in-macOS-app/"},{"title":"How to use Codable to store preferences in Swift","text":"Issue #462 Using object, we don‚Äôt need to care about nil vs false like in UserDefaults, our object is the source of truth 1234567891011121314151617181920212223class StoringHandler&lt;T: Codable&gt; { private let key: Storage.Keys private let storage = Deps.storage init(key: Storage.Keys) { self.key = key load() } var object: T? { didSet { if let object = object { try? storage.save(object: object, key: key) } else { try? storage.clear(key: key) } } } private func load() { self.object = try? storage.load(key: key, as: T.self) }} Then subclass StoringHandler 12345678910111213141516struct OnboardInfo: Codable { let hasOnboarded: Bool}final class OnboardingHandler: StoringHandler&lt;OnboardInfo&gt; { let storage = Deps.storage var hasOnboarded: Bool { get { return object?.hasOnboarded ?? false } set { object = OnboardInfo(hasOnboarded: newValue) } }}","link":"/blog/How-to-use-Codable-to-store-preferences-in-Swift/"},{"title":"How to use Firebase AutoML Vision Edge to classify images","text":"Issue #490 Create project on Firebase and choose Vision EdgeVision Edge is part of MLKit, but for custom images training https://console.firebase.google.com/u/0/project/avengers-ad2ce/ml/ Model Avengers_dataset_2019114133437 is training and may take several hours. You will receive an email once training is complete.","link":"/blog/How-to-use-Firebase-AutoML-Vision-Edge-to-classify-images/"},{"title":"How to use Firebase PhoneAuth in iOS","text":"Issue #350 Read Authenticate with Firebase on iOS using a Phone Number Disable swizzlingInfo.plist 12&lt;key&gt;FirebaseAppDelegateProxyEnabled&lt;/key&gt;&lt;string&gt;NO&lt;/string&gt; Enable remote notificationEnable Capability -&gt; Background mode -&gt; Remote notification AppDelegate.swift 1234567891011121314151617181920212223242526272829303132333435363738394041import Firebaseimport UIKitimport FirebaseAuth@UIApplicationMainclass AppDelegate: UIResponder, UIApplicationDelegate { private let appFlowController = AppFlowController() func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { UIApplication.shared.registerForRemoteNotifications() FirebaseApp.configure() return true } // MARK: - Remote Notification func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) { Auth.auth().setAPNSToken(deviceToken, type: .unknown) } func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) { print(error) } func application( _ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -&gt; Void) { completionHandler(.noData) } func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -&gt; Bool { if Auth.auth().canHandle(url) { return true } else { return false } }} Firebase push message looks like 12345678‚ñø 1 element ‚ñø 0 : 2 elements ‚ñø key : AnyHashable(&quot;com.google.firebase.auth&quot;) - value : &quot;com.google.firebase.auth&quot; ‚ñø value : 1 element ‚ñø 0 : 2 elements - key : warning - value : This fake notification should be forwarded to Firebase Auth. CaptchaTo disable captcha during testing 1Auth.auth().settings?.isAppVerificationDisabledForTesting = true","link":"/blog/How-to-use-Firebase-PhoneAuth-in-iOS/"},{"title":"How to use CommonCrypto in iOS","text":"Issue #480 Use modulemapmodulemap approachI use modulemap in my wrapper around CommonCrypto https://github.com/onmyway133/arcane, https://github.com/onmyway133/Reindeer For those getting header not found, please take a look https://github.com/onmyway133/Arcane/issues/4 or run xcode-select --install Make a folder CCommonCrypto containing module.modulemap module CCommonCrypto { header &quot;/usr/include/CommonCrypto/CommonCrypto.h&quot; export * } Go to Built Settings -&gt; Import Paths ${SRCROOT}/Sources/CCommonCryptoCocoapods with modulemap approach Here is the podspec https://github.com/onmyway133/Arcane/blob/master/Arcane.podspec s.source_files = &apos;Sources/**/*.swift&apos; s.xcconfig = { &apos;SWIFT_INCLUDE_PATHS&apos; =&gt; &apos;$(PODS_ROOT)/CommonCryptoSwift/Sources/CCommonCrypto&apos; } s.preserve_paths = &apos;Sources/CCommonCrypto/module.modulemap&apos; Using module_map does not work, see https://github.com/CocoaPods/CocoaPods/issues/5271 Using Local Development Pod with path does not work, see https://github.com/CocoaPods/CocoaPods/issues/809 That‚Äôs why you see that my Example Podfile https://github.com/onmyway133/CommonCrypto.swift/blob/master/Example/CommonCryptoSwiftDemo/Podfile points to the git repo target &apos;CommonCryptoSwiftDemo&apos; do pod &apos;CommonCryptoSwift&apos;, :git =&gt; &apos;https://github.com/onmyway133/CommonCrypto.swift&apos; end public header approach Ji is a wrapper around libxml2, and it uses public header approach It has a header file https://github.com/honghaoz/Ji/blob/master/Source/Ji.h with Target Membership set to Public It has a list of header files for libxml2 https://github.com/honghaoz/Ji/tree/master/Source/Ji-libxml It has Build Settings -&gt; Header Search Paths $(SDKROOT)/usr/include/libxml2 It has Build Settings -&gt; Other Linker Flags -lxml2 Cocoapods with public header approach Take a look at the podspec https://github.com/honghaoz/Ji/blob/master/Ji.podspec 12s.libraries = &quot;xml2&quot;s.xcconfig = { 'HEADER_SEARCH_PATHS' =&gt; '$(SDKROOT)/usr/include/libxml2', 'OTHER_LDFLAGS' =&gt; '-lxml2' } üêù Interesting related posts https://stackoverflow.com/questions/24004732/how-to-call-c-from-swift https://spin.atomicobject.com/2015/02/23/c-libraries-swift/ CommonCrypto from Xcode 10From Xcode 10, we can just 1import CommonCrypto Code https://github.com/onmyway133/Arcane https://stackoverflow.com/questions/25248598/importing-commoncrypto-in-a-swift-framework/37125785#37125785","link":"/blog/How-to-use-CommonCrypto-in-iOS/"},{"title":"How to use EnvironmentObject in SwiftUI for watchOS","text":"Issue #467 Declare top dependencies in ExtensionDelegate 1234567class ExtensionDelegate: NSObject, WKExtensionDelegate { let storeContainer = StoreContainer() func applicationDidEnterBackground() { storeContainer.save() }} Reference that in HostingController. Note that we need to change from generic MainView to WKHostingController&lt;AnyView&gt; as environmentObject returns View protocol 1234567891011121314class HostingController: WKHostingController&lt;AnyView&gt; { var storeContainer: StoreContainer! override func awake(withContext context: Any?) { super.awake(withContext: context) self.storeContainer = (WKExtension.shared().delegate as! ExtensionDelegate).storeContainer } override var body: AnyView { return AnyView(MainView() .environmentObject(storeContainer) ) }} In theory, the environment object will be propagated down the view hierarchy, but in practice it throws error. So a workaround now is to just pass that environment object down manually Fatal error: No ObservableObject of type SomeType foundA View.environmentObject(_:) for StoreContainer.Type may be missing as an ancestor of this view 12345678910111213141516171819202122232425struct MainView: View { @EnvironmentObject var storeContainer: StoreContainer var body: some View { VStack { List(services.map({ AnyService($0) })) { anyService in NavigationLink(destination: ItemsView(service: anyService.service) .navigationBarTitle(anyService.service.name) .onDisappear(perform: { anyService.service.requestCancellable?.cancel() }) .environmentObject(storeContainer) ) { HStack { Image(anyService.service.name) .resizable() .frame(width: 30, height: 30, alignment: .leading) Text(anyService.service.name) } } }.listStyle(CarouselListStyle()) } }}","link":"/blog/How-to-use-EnvironmentObject-in-SwiftUI-for-watchOS/"},{"title":"How to use Derived data in Xcode","text":"Issue #543 WorkspaceWorkspace has its own DerivedData folder 1234567891011121314151617181920212223DerivedData ModuleCache.noindex workspace_name Build Products Debug-iphonesimulator Cat Dog Dog2 Index Info.plist Logs Build Debug Install Issues Package Test LogStoreManifest.plist Test-scheme_name-2019.12.15_21-08-32-+0100.xcresult scm.plist SourcePackages TextIndex Note that workspace always needs a scheme to work 1xcodebuild: error: If you specify a workspace then you must also specify a scheme. Use -list to see the schemes in this workspace. ProjectProject has its own DerivedData folder. If run a scheme within workspace, we see build folder for workspace. But if we open a project and run a scheme within project, we see build folder for that project. The structure is the same, with project_name instead workspace_name","link":"/blog/How-to-use-Derived-data-in-Xcode/"},{"title":"How to test Date with timezone aware in Swift","text":"Issue #402 I want to test if a date has passed another date 12let base = Date(timeIntervalSince1970: 1567756697)XCTAssertEqual(validator.hasPassed(event: event, date: base), true) My hasPassed is using Calendar.current 12345func minuteSinceMidnight(date: Date) -&gt; MinuteSinceMidnight { let calendar = Calendar.current let start = calendar.startOfDay(for: date) return Int(date.timeIntervalSince(start)) / 60} But the minute is always having timezone applied. Even if I try with DateComponents 12345678func minuteSinceMidnight(date: Date) -&gt; MinuteSinceMidnight { let components = calendar.dateComponents([.hour, .minute], from: date) guard let hour = components.hour, let minute = components.minute else { return 0 } return hour * 60 + minute} As long as I use Calendar, it always has timezone applied. Checking this time interval 1567756697 on https://www.epochconverter.com/ Assuming that this timestamp is in seconds:GMT: Friday, September 6, 2019 7:58:17 PMYour time zone: Friday, September 6, 2019 9:58:17 PM GMT+02:00 DST Because I have GMT+2, there will always be 2 hours offset. This works in app, but not in test because of the way I construct Date with time interval. One way is to have test data using string construction, and provide timezone to DateFormatter 123let formatter = ISO8601DateFormatter()let date = formatter.date(from: \"2019-07-58T12:39:00Z\")let string = formatter.string(from: Date()) Another way is to have a fixed timezone for Calendar 12var calendar = Calendar.currentcalendar.timeZone = TimeZone(secondsFromGMT: 0)! Another way is to adjust existing date 1calendar.date(bySettingHour: 20, minute: 02, second: 00, of: Date()","link":"/blog/How-to-test-Date-with-timezone-aware-in-Swift/"},{"title":"How to use ForEach with ScrollView in SwiftUI","text":"Issue #517 Use ScrollView -&gt; VStack -&gt; ForEach -&gt; Content 123456789101112131415161718192021222324struct SearchScreen: View { @State var searchObjects: [SearchObject] = [ SearchObject(name: \"By name\", search: { CountryManager.shared.search(byName: $0) }), SearchObject(name: \"By calling code\", search: { CountryManager.shared.search(byCallingCode: $0) }), SearchObject(name: \"By domain\", search: { CountryManager.shared.search(byDomain: $0) }), SearchObject(name: \"By language\", search: { CountryManager.shared.search(byLanguage: $0) }) ] var body: some View { ScrollView { VStack(alignment: .leading) { ForEach(searchObjects.enumerated().map({ $0 }), id: \\.element.name, content: { index, searchObject in VStack(alignment: .leading) { Text(searchObject.name) .styleLabel() TextField(searchObject.textFieldName, text: self.$searchObjects[index].text) .styleTitle() self.makeButton(searchObject: self.searchObjects[index]) } }) } } }}","link":"/blog/How-to-use-ForEach-with-ScrollView-in-SwiftUI/"},{"title":"How to use Google AutoML to classify images","text":"Issue #489 Create bucket on Google Cloud Storagehttps://console.cloud.google.com/storage Create dataset by uploading images to Google AutoML Visionhttps://console.cloud.google.com/vision","link":"/blog/How-to-use-Google-AutoML-to-classify-images/"},{"title":"How to use Function Literals with Receiver in Kotlin","text":"Issue #139 From https://kotlinlang.org/docs/reference/lambdas.html 1234567891011121314class HTML { fun body() { ... }}fun html(init: HTML.() -&gt; Unit): HTML { val html = HTML() // create the receiver object html.init() // pass the receiver object to the lambda return html}html { // lambda with receiver begins here body() // calling a method on the receiver object} From https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt 12345678910111213@kotlin.internal.InlineOnlypublic inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T { contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) } block() return this}val person = Person().apply { name = \"Superman\" age = 20} From https://academy.realm.io/posts/kau-jake-wharton-testing-robots/ 1234567891011121314151617181920212223242526272829fun payment(func: PaymentRobot.() -&gt; Unit) = PaymentRobot().apply { func() }class PaymentRobot { fun amount(amount: Long) { } fun recipient(recipient: String) { } infix fun send(func: ResultRobot.() -&gt; Unit): ResultRobot { // ... return ResultRobot().apply { func() } }}class ResultRobot { func isSuccess() { }}payment { amount(4200) recipient(superman@google.com)} send { isSuccess()}","link":"/blog/How-to-use-Function-Literals-with-Receiver-in-Kotlin/"},{"title":"How to use Given When Then in Swift tests","text":"Issue #73 SpecUsing spec testing framework like Quick is nice, which enables BDD style. 1234567891011121314describe(\"the 'Documentation' directory\") { it(\"has everything you need to get started\") { let sections = Directory(\"Documentation\").sections expect(sections).to(contain(\"Organized Tests with Quick Examples and Example Groups\")) expect(sections).to(contain(\"Installing Quick\")) } context(\"if it doesn't have what you're looking for\") { it(\"needs to be updated\") { let you = You(awesome: true) expect{you.submittedAnIssue}.toEventually(beTruthy()) } }} But in case you don‚Äôt want additional frameworks, and want to live closer to Apple SDKs as much as possible, here are few tips. NamingThis is from the book that I really like The Art of Unit Testing. If you don‚Äôt mind the underscore, you can follow UnitOfWork_StateUnderTest_ExpectedBehavior structure 123func testSum_NegativeNumberAs1stParam_ExceptionThrown()func testSum_NegativeNumberAs2ndParam_ExceptionThrown()func testSum_simpleValues_Calculated() Given When ThenThis is from BDD, and practised a lot in Cucumber. You can read more on https://martinfowler.com/bliki/GivenWhenThen.html. First, add some more extensions to XCTestCase 123456789101112131415import XCTestextension XCTestCase { func given(_ description: String, closure: () throws -&gt; Void) throws { try closure() } func when(_ description: String, closure: () throws -&gt; Void) throws { try closure() } func then(_ description: String, closure: () throws -&gt; Void) throws { try closure() }} Then, in order to test, just follow given when then 12345678910111213141516171819func testRemoveObject() throws { try given(\"set to storage\") { try storage.setObject(testObject, forKey: key) } try when(\"remove object from storage\") { try storage.removeObject(forKey: key) } try then(\"there is no object in memory\") { let memoryObject = try? storage.memoryCache.object(forKey: key) as User XCTAssertNil(memoryObject) } try then(\"there is no object on disk\") { let diskObject = try? storage.diskCache.object(forKey: key) as User XCTAssertNil(diskObject) }} I find this more interesting than comments. All are code and descriptive. It can also be developed further to throw the description text.","link":"/blog/How-to-use-Given-When-Then-in-Swift-tests/"},{"title":"How to use Firebase in macOS","text":"Issue #501 Use Catalyst Add to CocoaPods 123456789platform :ios, '13.0'target 'MyApp' do use_frameworks! pod 'FirebaseCore' pod 'Firebase/Firestore'end TroubleshootingSelect a team for gRPC-C++-gRPCCertificates-Cpp FIRAnalyticsConnector: building for Mac Catalyst, but linking in object file built for iOS Simulatorhttps://stackoverflow.com/questions/57666155/firanalyticsconnector-building-for-mac-catalyst-but-linking-in-object-file-bui The problem was related to the difference between Firebase/Core and FirebaseCore. The first is a subspec of the Firebase pod that depends on FirebaseAnalytics. The second is only the FirebaseCore pod. Only the latter should be used for macOS.","link":"/blog/How-to-use-Firebase-in-macOS/"},{"title":"How to use Hexo to deploy static site","text":"Issue #392 It‚Äôs been a long journey since https://github.com/onmyway133/blog/issues/1, next step is to keep GitHub issues as source, and mirror those to a static site. Use 2 repos https://github.com/onmyway133/web for source https://github.com/onmyway133/onmyway133.github.io for generated content 1234npm install -g hexo-cliecho $PATH=$PATH:/Users/khoa/.nodenv/versions/10.15.2/bin/hexohexo init blognpm install hexo-deployer-git --save Update _config.yml 1234deploy: type: git repo: https://github.com/onmyway133/onmyway133.github.io.git branch: master 12hexo cleanhexo deploy Read more https://hexo.io/docs/deployment.html https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39","link":"/blog/How-to-use-Hexo-to-deploy-static-site/"},{"title":"How to use Input and output container in Swift","text":"Issue #87 This is a very nifty trick from ios-oss which was built around MVVM pattern. It uses protocol to define input and output, and a container protocol to contain them. Take https://github.com/kickstarter/ios-oss/blob/1f5643f6a769995ccd1bb3826699745e64597ab7/Library/ViewModels/LoginViewModel.swift for example public protocol LoginViewModelInputs { } public protocol LoginViewModelOutputs { } public protocol LoginViewModelType { var inputs: LoginViewModelInputs { get } var outputs: LoginViewModelOutputs { get } } public final class LoginViewModel: LoginViewModelType, LoginViewModelInputs, LoginViewModelOutputs { public var inputs: LoginViewModelInputs { return self } public var outputs: LoginViewModelOutputs { return self } } Look how LoginViewModel conforms to 3 protocols. And when you access its input or output properties, you are constrained to only LoginViewModelInputs and LoginViewModelOutputs","link":"/blog/How-to-use-Input-and-output-container-in-Swift/"},{"title":"How to use JSON Codable in Swift 4","text":"Issue #63 Codable in Swift 4 changes the game. It deprecates lots of existing JSON libraries. Generic modelAPI responses is usually in form of an object container with a key. Then it will be either nested array or object. We can deal with it by introducing a data holder. Take a look DataHolder 12345678910{ \"data\": [ { \"comment_id\": 1 }, { \"comment_id\": 2 } ]} 123456789101112131415struct ListHolder&lt;T: Codable&gt;: Codable { enum CodingKeys: String, CodingKey { case list = \"data\" } let list: [T]}struct OneHolder&lt;T: Codable&gt;: Codable { enum CodingKeys: String, CodingKey { case one = \"data\" } let one: T} then with Alamofire, we can just parse to data holder 12345678910111213141516func loadComments(mediaId: String, completion: @escaping ([Comment]) -&gt; Void) { request(\"https://api.instagram.com/v1/media/\\(mediaId)/comments\", parameters: parameters) .responseData(completionHandler: { (response) in if let data = response.result.value { do { let holder = try JSONDecoder().decode(ListHolder&lt;Comment&gt;.self, from: data) DispatchQueue.main.async { completion(holder.list) } } catch { print(error) } } })} Read more http://benscheirman.com/2017/06/ultimate-guide-to-json-parsing-with-swift-4/","link":"/blog/How-to-use-JSON-Codable-in-Swift-4/"},{"title":"How to use NSSecureCoding in Swift","text":"Issue #334 NSSecureCoding has been around since iOS 6 and has had some API changes in iOS 12 A protocol that enables encoding and decoding in a manner that is robust against object substitution attacks. https://developer.apple.com/documentation/foundation/nscoder/2292924-decodeobject If the coder responds true to requiresSecureCoding, then the coder calls failWithError(_:) in either of the following cases:The class indicated by cls doesn‚Äôt implement NSSecureCoding.The unarchived class doesn‚Äôt match cls, nor do any of its superclasses. If the coder doesn‚Äôt require secure coding, it ignores the cls parameter and does not check the decoded object. The class must subclass from NSObject and conform to NSSecureCoding 1234567891011121314151617181920212223242526272829303132class Note: NSObject, NSSecureCoding { static var supportsSecureCoding: Bool = true func encode(with aCoder: NSCoder) { aCoder.encode(id, forKey: \"id\") aCoder.encode(text, forKey: \"text\") aCoder.encode(date, forKey: \"date\") } required init?(coder aDecoder: NSCoder) { guard let id = aDecoder.decodeObject(of: [NSString.self], forKey: \"id\") as? String, let text = aDecoder.decodeObject(of: [NSString.self], forKey: \"text\") as? String, let date = aDecoder.decodeObject(of: [NSDate.self], forKey: \"date\") as? Date else { return nil } self.id = id self.text = text self.date = date } let id: String var text = \"untitled\" var date: Date = Date() override init() { id = UUID().uuidString super.init() }} First, we need to serialize to Data, then use EasyStash for easy persistency 123456789101112131415161718do { let securedItems = items.map({ SecuredClientLoggerItem(item: $0) }) if #available(iOS 11.0, *) { let data = try NSKeyedArchiver.archivedData( withRootObject: securedItems, requiringSecureCoding: true ) try data.write(to: fileUrl) } else { _ = NSKeyedArchiver.archiveRootObject( securedItems, toFile: fileUrl.path ) }} catch { print(error)} Then we can use unarchiveTopLevelObjectWithData to unarchive array 1234567do { let data = try Data(contentsOf: fileUrl) let notes = try NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(data) as? [Note] // notes is of type [Note]?} catch { print(error)} Note that for UUID, NSCoding seems to convert to UUID instead of String 1234let id = aDecoder.decodeObject( of: [NSUUID.self], forKey: \"id\") as? UUID,","link":"/blog/How-to-use-NSSecureCoding-in-Swift/"},{"title":"How to use KVO in Swift","text":"Issue #554 A class must inherit from NSObject, and we have 3 ways to trigger property change Use setValue(value: AnyObject?, forKey key: String) from NSKeyValueCoding class MyObjectToObserve: NSObject { var myDate = NSDate() func updateDate() { setValue(NSDate(), forKey: &quot;myDate&quot;) } }Use willChangeValueForKey and didChangeValueForKey from NSKeyValueObserving class MyObjectToObserve: NSObject { var myDate = NSDate() func updateDate() { willChangeValueForKey(&quot;myDate&quot;) myDate = NSDate() didChangeValueForKey(&quot;myDate&quot;) } }Use dynamic. See Swift Type Compatibility You can also use the dynamic modifier to require that access to members be dynamically dispatched through the Objective-C runtime if you‚Äôre using APIs like key‚Äìvalue observing that dynamically replace the implementation of a method. class MyObjectToObserve: NSObject { dynamic var myDate = NSDate() func updateDate() { myDate = NSDate() } }And property getter and setter is called when used. You can verify when working with KVO. This is an example of computed property class MyObjectToObserve: NSObject { var backing: NSDate = NSDate() dynamic var myDate: NSDate { set { print(&quot;setter is called&quot;) backing = newValue } get { print(&quot;getter is called&quot;) return backing } } }Read more https://stackoverflow.com/questions/24092285/is-key-value-observation-kvo-available-in-swift/34873979#34873979","link":"/blog/How-to-use-KVO-in-Swift/"},{"title":"How to use MainController in iOS","text":"Issue #36 Usually in an app, we have these flows: onboarding, login, main. And we usually set OnboardingController, LoginController and MainController as the root view controller respectively depending on the state. I find it useful to have the MainController as the container for main flow. It can be a tab controller, swipe menu controller or contains just 1 child view controller. The screens are provided by child view controllers, but the MainController does the following jobs Status bar style We usually need to call preferredStatusBarStyle on the parent controller. See https://stackoverflow.com/questions/19022210/preferredstatusbarstyle-isnt-called App did become active Usually when app is brought to foreground, we need to fetch logged in user profile to see if there‚Äôs changes. We do this by listening to app did become active in MainController. Mock to open This can be anti pattern. But in UI Tests, for laziness, we can just use some launch arguments and check to present some specific screens to test, because MainController is the root for main flow. Logout Because things originate from MainController, things can terminate in MainController. We can handle logout, clear states, and tell MainController to tell AppDelegate to switch to another root controller","link":"/blog/How-to-use-MainController-in-iOS/"},{"title":"How to use Gradle Kotlin DSL in Android","text":"Issue #285 ktssettings.gradle.kts 1include(\":app\") build.gradle.kts 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788import org.gradle.kotlin.dsl.applyimport org.gradle.kotlin.dsl.dependenciesimport org.gradle.kotlin.dsl.kotlinimport org.gradle.kotlin.dsl.*import org.jetbrains.kotlin.config.KotlinCompilerVersionplugins { id(\"com.android.application\") kotlin(\"android\") kotlin(\"android.extensions\")}//apply {// from(\"$rootDir/tools/grgit.gradle\")// from(\"$rootDir/buildSrc/quality.gradle.kts\")// from(\"$rootDir/tools/ktlint.gradle\")// from(\"$rootDir/tools/detekt.gradle\")//}android { compileSdkVersion(28) flavorDimensions(\"default\") defaultConfig { applicationId = \"com.onmyway133.myapp\" minSdkVersion(26) targetSdkVersion(28)// versionCode = ext.get(\"gitCommitCount\") as? Int versionCode = 1 versionName = \"1.0\" testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\" } signingConfigs { create(\"release\") { keyAlias = \"keyalias\" keyPassword = \"keypassword\" storePassword = \"storepassword\" storeFile = file(\"/Users/khoa/Android/Key/keystore\") } } buildTypes { getByName(\"debug\") { signingConfig = signingConfigs.getByName(\"debug\") isMinifyEnabled = true proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"$project.rootDir/tools/proguard-rules-debug.pro\") } getByName(\"release\") { signingConfig = signingConfigs.getByName(\"release\") isMinifyEnabled = true isShrinkResources = true proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"$project.rootDir/tools/proguard-rules.pro\") } } productFlavors { create(\"staging\") { } create(\"production\") { } } lintOptions { lintConfig = file(\"$project.rootDir/tools/lint-rules.xml\") htmlOutput = file(\"$project.buildDir/outputs/lint/lint.html\") xmlReport = false htmlReport = true }}dependencies { implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\")))) implementation(kotlin(\"stdlib-jdk7\", KotlinCompilerVersion.VERSION)) implementation(\"androidx.appcompat:appcompat:1.0.2\") implementation(\"androidx.core:core-ktx:1.0.2\") implementation(\"androidx.constraintlayout:constraintlayout:1.1.3\") implementation(\"com.google.android.material:material:1.0.0\") testImplementation(\"junit:junit:4.12\") androidTestImplementation(\"androidx.test:runner:1.1.1\") androidTestImplementation(\"androidx.test.espresso:espresso-core:3.1.1\")}tasks.getByName(\"check\").dependsOn(\"lint\") tools/quality.gradle.kts 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455plugins { id(\"findbugs\") id(\"pmd\") id(\"checkstyle\")}tasks { val findbugs by registering(FindBugs::class) { ignoreFailures = false effort = \"max\" reportLevel = \"low\" classes = files(\"$project.buildDir/intermediates/javac\") setExcludeFilter(file(\"$rootProject.rootDir/tools/findbugs-exclude.xml\")) source = fileTree(\"src/main/java/\") classpath = files() reports { xml.isEnabled = false html.isEnabled = true html.destination = file(\"$project.buildDir/outputs/findbugs/findbugs-output.html\") } } val pmd by registering(Pmd::class) { ruleSetFiles = files(\"${project.rootDir}/tools/pmd-rules.xml\") ignoreFailures = false ruleSets = listOf&lt;String&gt;() fileTree() source(fileTree(baseDir = \"src/main/java\")) include(\"**/*.kt\") exclude(\"**/gen/**\") reports { xml.isEnabled = false html.isEnabled = true html.destination = file(\"$project.buildDir/outputs/pmd/pmd.html\") } } val checkstyle by registering(Checkstyle::class) { description = \"Check code standard\" group = \"verification\" configFile = file(\"$project.rootDir/tools/checkstyle.xml\") source(fileTree(baseDir = \"src\")) include(\"**/*.kt\") exclude(\"**/gen/**\") classpath = files() ignoreFailures = false }} Reference https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin https://github.com/gradle/kotlin-dsl/blob/master/samples/hello-android/app/build.gradle.kts About Gradle Understanding Android Gradle build files Configure your build","link":"/blog/How-to-use-Gradle-Kotlin-DSL-in-Android/"},{"title":"How to use NSStepper in Appkit","text":"Issue #409 123456789101112131415let stepper = NSStepper()let textField = NSTextField(wrappingLabelWithString: \"\\(myLocalCount)\")stepper.integerValue = myLocalCountstepper.minValue = 5stepper.maxValue = 24stepper.valueWraps = falsestepper.target = selfstepper.action = #selector(onStepperChange(_:))@objc func onStepperChange(_ sender: NSStepper) { myLocalCount = sender.integerValue textField.stringValue = \"\\(sender.integerValue)\"}","link":"/blog/How-to-use-NSStepper-in-Appkit/"},{"title":"How to use Picker with enum in SwiftUI","text":"Issue #611 1234567891011enum WindowPosition: String, CaseIterable { case left case top case bottom case right}Picker(selection: $preference.position, label: Text(\"Position\")) { ForEach(WindowPosition.allCases, id: \\.self) { Text($0.rawValue) }}","link":"/blog/How-to-use-Picker-with-enum-in-SwiftUI/"},{"title":"How to use One Dark theme and Fira Code font for IDEs","text":"Issue #281 Original post https://medium.com/fantageek/one-dark-theme-and-fira-code-font-for-ides-d67bbe2ac8cb A good theme and font can increase your development happiness a lot. Ever since using Atom, I liked its One Dark theme. The background and text colors are just elegant and pleasant to the eyes. One DarkOriginal designed for Atom, one-dark-ui that claims to adapt to most syntax themes, used together with Fira Mono font from mozilla. There is also Dracula which is popular, but the contrast seem too high for my eyes. FiraI like FiraCode font the most, it is just beautiful and supports ligatures. Alternatively, you can browse ProgrammingFonts or other ligature fonts like Hasklig to see which font suits you. Theme and font are completely personal taste, but if you like me, please give One Dark and Fira a try, here is how to do that in Xcode, Android Studio and Visual Studio Code, which are editors that I use daily. XcodeFirstly, you need to install the latest compiled font of FiraCode I used to have my own replication of One Dark, called DarkSide, this was how I learned how to make Xcode theme. For now, I find xcode-one-dark good enough. Xcode theme is just xml file with .xccolortheme extension and is placed into ~/Library/Developer/Xcode/UserData/FontAndColorThemes After installing the theme, you should be able to select it from Preferences -&gt; Fonts &amp; Colors And it looks like below. Android StudioAndroid Studio defaults to have only Default and Dracula theme. Let‚Äôs choose Darcula for now. I hope there will be One Dark support. Also, Android Studio can preferably selects Fira Code, which we should have already installed. Remember to select Enable font ligatures to stay cool It looks like this Visual Studio CodeInstalling theme in VSCode is easy with extensions. There is this One Dark Pro that we can install directly from Extensions panel in VS Code. Alternatively, you can also choose Atom One Dark Theme Then go to Preferences -&gt; Settings to specify Fira Code . Remember to check for Font Ligatures The result should look like this","link":"/blog/How-to-use-One-Dark-theme-and-Fira-Code-font-for-IDEs/"},{"title":"How to use Navigation component with DrawerLayout in Android","text":"Issue #349 build.gradle 123dependencies { classpath 'android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0-alpha05'} app/build.gradle 12345678910apply plugin: 'androidx.navigation.safeargs'dependencies { def navigationVersion = \"2.0.0\" def drawerLayoutVersion = \"1.0.0\" implementation \"androidx.drawerlayout:drawerlayout:$drawerLayoutVersion\" implementation \"androidx.navigation:navigation-fragment-ktx:$navigationVersion\" implementation \"androidx.navigation:navigation-ui-ktx:$navigationVersion\"} main_activity.xml Use CoordinatorLayout and ToolBar Define layout_gravity for NavigationView 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;androidx.drawerlayout.widget.DrawerLayout android:layout_height=\"match_parent\" android:layout_width=\"match_parent\" xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/drawerLayout\" tools:context=\".MainActivity\"&gt; &lt;androidx.coordinatorlayout.widget.CoordinatorLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;com.google.android.material.appbar.AppBarLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"&gt; &lt;androidx.appcompat.widget.Toolbar android:layout_width=\"match_parent\" android:layout_height=\"?attr/actionBarSize\" android:id=\"@+id/toolbar\"/&gt; &lt;/com.google.android.material.appbar.AppBarLayout&gt; &lt;fragment android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:id=\"@+id/hostFragment\" android:name=\"androidx.navigation.fragment.NavHostFragment\" app:defaultNavHost=\"true\" app:navGraph=\"@navigation/navigation_graph\"/&gt; &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt; &lt;com.google.android.material.navigation.NavigationView android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:id=\"@+id/navigationView\" android:fitsSystemWindows=\"true\" android:layout_gravity=\"start\" app:menu=\"@menu/drawer_menu\"/&gt;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt; navigation/navigation_graph.xml 123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;navigation xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/navigationGraph\" xmlns:tools=\"http://schemas.android.com/tools\" app:startDestination=\"@id/aboutFragment\"&gt; &lt;fragment android:id=\"@+id/aboutFragment\" android:name=\"com.onmyway133.whatsupintech.AboutFragment\" android:label=\"@string/menu_about\" tools:layout=\"@layout/about_fragment\" /&gt; &lt;fragment android:id=\"@+id/feedFragment\" android:name=\"com.onmyway133.whatsupintech.FeedFragment\" android:label=\"@string/menu_git_hub\" tools:layout=\"@layout/feed_fragment\" /&gt; &lt;fragment android:id=\"@+id/webFragment\" android:name=\"com.onmyway133.whatsupintech.WebFragment\" tools:layout=\"@layout/web_fragment\"/&gt;&lt;/navigation&gt; menu/drawer_menu.xml 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;group android:checkableBehavior=\"single\"&gt; &lt;item android:id=\"@+id/about\" android:title=\"@string/menu_about\" /&gt; &lt;item android:id=\"@+id/hackerNews\" android:title=\"@string/menu_hacker_news\" /&gt; &lt;item android:id=\"@+id/reddit\" android:title=\"@string/menu_reddit\" /&gt; &lt;item android:id=\"@+id/dev\" android:title=\"@string/menu_dev\" /&gt; &lt;item android:id=\"@+id/gitHub\" android:title=\"@string/menu_git_hub\" /&gt; &lt;/group&gt;&lt;/menu&gt; MainActivity.kotlin Use AppBarConfiguration to define multiple top level destinations Convert Toolbar to ActionBar 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.onmyway133.whatsupintechimport android.os.Bundleimport androidx.appcompat.app.AppCompatActivity;import androidx.core.view.GravityCompatimport androidx.navigation.findNavControllerimport androidx.navigation.ui.AppBarConfigurationimport androidx.navigation.ui.navigateUpimport androidx.navigation.ui.setupActionBarWithNavControllerimport androidx.navigation.ui.setupWithNavControllerimport kotlinx.android.synthetic.main.main_activity.*class MainActivity : AppCompatActivity() { lateinit var appBarConfig: AppBarConfiguration override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.main_activity) setupNavigationController() } fun setupNavigationController() { val navigationController = findNavController(R.id.hostFragment) setSupportActionBar(toolbar) appBarConfig = AppBarConfiguration(setOf(R.id.aboutFragment, R.id.feedFragment), drawerLayout) setupActionBarWithNavController(navigationController, appBarConfig) navigationView.setupWithNavController(navigationController) navigationView.setNavigationItemSelectedListener { menuItem -&gt; drawerLayout.closeDrawers() menuItem.isChecked = true when (menuItem.itemId) { R.id.about -&gt; navigationController.navigate(R.id.aboutFragment) R.id.gitHub, R.id.reddit, R.id.hackerNews, R.id.dev -&gt; navigationController.navigate(R.id.feedFragment) } true } } override fun onSupportNavigateUp(): Boolean { val navigationController = findNavController(R.id.hostFragment) return navigationController.navigateUp(appBarConfig) || super.onSupportNavigateUp() } override fun onBackPressed() { if (drawerLayout.isDrawerOpen(GravityCompat.START)) { drawerLayout.closeDrawer(GravityCompat.START) } else { return super.onBackPressed() } }} Update UI components with NavigationUITie destinations to menu items NavigationUI also provides helpers for tying destinations to menu-driven UI components. NavigationUI contains a helper method, onNavDestinationSelected(), which takes a MenuItem along with the NavController that hosts the associated destination. If the id of the MenuItem matches the id of the destination, the NavController can then navigate to that destination. Add a navigation drawer The drawer icon is displayed on all top-level destinations that use a DrawerLayout. Top-level destinations are the root-level destinations of your app. They do not display an Up button in the app bar. Read more Android Navigation TypeSafe Arguments Gradle Plugin Get started with the Navigation component Conditional navigation Navigation Drawer with New JetPacks Navigation Component","link":"/blog/How-to-use-Navigation-component-with-DrawerLayout-in-Android/"},{"title":"How to use NSProgressIndicator in AppKit","text":"Issue #406 1234let progressIndicator = NSProgressIndicator()progressIndicator.isIndeterminate = trueprogressIndicator.style = .spinningprogressIndicator.startAnimation(nil)","link":"/blog/How-to-use-NSProgressIndicator-in-AppKit/"},{"title":"How to use ObjC in Swift Package Manager","text":"Issue #575 Create Objc target http://ankit.im/swift/2016/05/21/creating-objc-cpp-packages-with-swift-package-manager/ Check runtimeCheck for example _runtime(_ObjC) or os(macOS if you plan to use platform specific feature https://github.com/Quick/Quick/blob/master/Package.swift https://github.com/Quick/Quick/pull/687/files For example, in test we use XCTest which is run via Xcode and is a macOS framework, so we need to check for os(macOS) Note that in Objc framework, the header files must be in include folder 12345678910111213141516171819202122232425262728targets: { var targets: [Target] = [ .testTarget( name: \"QuickTests\", dependencies: [ \"Quick\", \"Nimble\" ], exclude: [ \"QuickAfterSuiteTests/AfterSuiteTests+ObjC.m\", \"QuickFocusedTests/FocusedTests+ObjC.m\", \"QuickTests/FunctionalTests/ObjC\", \"QuickTests/Helpers/QCKSpecRunner.h\", \"QuickTests/Helpers/QCKSpecRunner.m\", \"QuickTests/Helpers/QuickTestsBridgingHeader.h\", \"QuickTests/QuickConfigurationTests.m\", ] ), ]#if os(macOS) targets.append(contentsOf: [ .target(name: \"QuickSpecBase\", dependencies: []), .target(name: \"Quick\", dependencies: [ \"QuickSpecBase\" ]), ])#else targets.append(contentsOf: [ .target(name: \"Quick\", dependencies: []), ])#endif return targets }(),","link":"/blog/How-to-use-ObjC-in-Swift-Package-Manager/"},{"title":"How to use R.swift in UITest in iOS","text":"Issue #138 Here is how to use R.swift in UITest target Add Localizable.strings to UITest target Declare pod 123target 'MyAppUITests' do pod 'R.swift', '~&gt; 4.0'end In UITest target settings, add $(FRAMEWORK_SEARCH_PATHS) to Runpath Search Path Add R.generated.swift to UITest target","link":"/blog/How-to-use-R.swift-in-UITest-in-iOS/"},{"title":"How to use React JSX with Babel in Electron","text":"Issue #352 For a normal electron app created with npm init, we can use all features of ES6, but not the JSX syntax for React. We can use just Babel to transpile JSX, as used in IconGenerator .babelrc 123456{ \"plugins\": [ \"transform-react-jsx-source\" ], \"presets\": [\"env\", \"react\"]} And in package.json, call babel to transpile src to dist 12345\"main\": \"dist/main.js\",\"scripts\": { \"start\": \"npm run babel &amp;&amp; electron .\", \"babel\": \"babel ./src --out-dir ./dist --copy-files\"}, Remember to use dist/main.js as our starting point, and in index.html, specify ./dist/renderer.js 123456&lt;body&gt; &lt;div id=\"root\" /&gt; &lt;script type=\"text/javascript\"&gt; require('./dist/renderer.js') &lt;/script&gt;&lt;/body&gt;","link":"/blog/How-to-use-React-JSX-with-Babel-in-Electron/"},{"title":"How to use Product Hunt GraphQL API with Retrofit","text":"Issue #370 Define response model 1234567891011121314151617181920212223242526272829303132import com.squareup.moshi.Jsondata class Response( @field:Json(name=\"data\") val data: ResponseData)data class ResponseData( @field:Json(name=\"posts\") val posts: Posts)data class Posts( @field:Json(name=\"edges\") val edges: List&lt;Edge&gt;)data class Edge( @field:Json(name=\"node\") val node: Item)data class Item( @field:Json(name=\"id\") val id: String, @field:Json(name=\"name\") val name: String, @field:Json(name=\"url\") val url: String, @field:Json(name=\"tagline\") val tagline: String, @field:Json(name=\"featuredAt\") val featuredAt: String, @field:Json(name=\"votesCount\") val votesCount: Int, @field:Json(name=\"commentsCount\") val commentsCount: Int, @field:Json(name=\"thumbnail\") val thumbnail: Thumbnail)data class Thumbnail( @field:Json(name=\"url\") val ur: String) Here is the query 123456789101112131415161718{ posts { edges { node { id name url tagline featuredAt votesCount commentsCount thumbnail { url } } } }} Here‚Äôs how request looks in Insomnia 12345678910&gt; POST /v2/api/graphql HTTP/1.1&gt; Host: api.producthunt.com&gt; User-Agent: insomnia/6.6.2&gt; Cookie: __cfduid=d9a588136cbb286b156d8e4a873d52a301566795296&gt; Accept: application/json&gt; Content-Type: application/json&gt; Authorization: Bearer 068665d215cccad9123449841463b1248da07123418915a192a1233dedfd23b2&gt; Content-Length: 241| {&quot;query&quot;:&quot;{\\n posts {\\n edges {\\n node {\\n id\\n name\\n url\\n tagline\\n featuredAt\\n votesCount\\n commentsCount\\n thumbnail {\\n url\\n }\\n }\\n }\\n }\\n}&quot;} To post as json, need to use object for Moshi to convert 123456789101112131415161718data class GetTopBody( @field:Json(name=\"query\") val queryString: String)interface Api { @Headers( \"Content-Type: application/json\", \"Accept: application/json\", \"Authorization: Bearer 068665d215cccad9123449841463b1248da07123418915a192a1233dedfd23b2\", \"Host: api.producthunt.com\", \"User-Agent: insomnia/6.6.2\" ) @POST(\"./\") suspend fun getTop( @Body body: GetTopBody ): Response} And consume it in ViewModel. Use multiline string interpolation. No need to set contentLength 1234567891011121314151617181920212223242526272829303132333435class ViewModel(val repo: Repo): ViewModel() { val items = liveData { val queryString = \"\"\"{ posts { edges { node { id name url tagline featuredAt votesCount commentsCount thumbnail { url } } } }} \"\"\".trimIndent() val body = GetTopBody(queryString) try { val response = repo.api().getTop(body) val items = response.data.posts.edges.map { it.node } emit(items.toCollection(ArrayList())) } catch (e: Exception) { emit(arrayListOf&lt;Item&gt;()) } }} The response looks like 123456789101112131415161718192021222324252627282930313233343536{ \"data\": { \"posts\": { \"edges\": [ { \"node\": { \"id\": \"158359\", \"name\": \"Toast\", \"url\": \"https://www.producthunt.com/posts/toast-2?utm_campaign=producthunt-api&amp;utm_medium=api-v2&amp;utm_source=Application%3A+PH+API+Explorer+%28ID%3A+9162%29\", \"tagline\": \"Organise tabs into organised sessions\", \"featuredAt\": \"2019-08-25T07:00:00Z\", \"votesCount\": 318, \"commentsCount\": 16, \"thumbnail\": { \"url\": \"https://ph-files.imgix.net/a169654a-850d-4b1c-80ba-be289f973fb7?auto=format&amp;fit=crop\" } } }, { \"node\": { \"id\": \"165621\", \"name\": \"Tree\", \"url\": \"https://www.producthunt.com/posts/tree-2?utm_campaign=producthunt-api&amp;utm_medium=api-v2&amp;utm_source=Application%3A+PH+API+Explorer+%28ID%3A+9162%29\", \"tagline\": \"Write documents in tree-like organisation with Markdown\", \"featuredAt\": \"2019-08-25T09:10:53Z\", \"votesCount\": 227, \"commentsCount\": 11, \"thumbnail\": { \"url\": \"https://ph-files.imgix.net/68b1f007-e630-4c79-8a27-756ec364343f?auto=format&amp;fit=crop\" } } } ] } }} MapInstead of using an object, we can use Map. If using HashMap, I get Unable to create @Body converter for java.util.HashMap&lt;java.lang.String, java.lang.String&gt; 123456@POST(\"./\")suspend fun getTop( @Body body: Map&lt;String, String&gt;): Responseval body = mapOf(\"query\" to queryString) TroubleshootingUse Network Profiler to inspect failure View &gt; Tool Windows &gt; Profiler Read more Product Hunt API Docs https://api.producthunt.com/v2/docs API Explorer https://ph-graph-api-explorer.herokuapp.com/ Posts http://api-v2-docs.producthunt.com.s3-website-us-east-1.amazonaws.com/object/post/ https://stackoverflow.com/questions/21398598/how-to-post-raw-whole-json-in-the-body-of-a-retrofit-request","link":"/blog/How-to-use-Product-Hunt-GraphQL-API-with-Retrofit/"},{"title":"How to use Retrofit in Android","text":"Issue #366 Code uses Retrofit 2.6.0 which has Coroutine support app/build.gradle 123456implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha01\"implementation \"com.squareup.moshi:moshi:$Version.moshi\"implementation \"com.squareup.retrofit2:retrofit:$Version.retrofit\"implementation \"com.squareup.retrofit2:converter-moshi:$Version.retrofit\" Api.kt 123456import retrofit2.http.GETinterface Api { @GET(\"api/articles\") suspend fun getArticles(): List&lt;Article&gt;} Repo.kt 123456789101112import retrofit2.Retrofitimport retrofit2.converter.moshi.MoshiConverterFactoryclass Repo { fun get(): Api { return Retrofit.Builder() .baseUrl(\"https://dev.to\") .addConverterFactory(MoshiConverterFactory.create()) .build() .create(Api::class.java) }} ViewModel.kt 123456789import androidx.lifecycle.ViewModelimport androidx.lifecycle.liveDataimport kotlinx.coroutines.Dispatchersclass ViewModel(val repo: Repo): ViewModel() { val articles = liveData(Dispatchers.Main) { emit(repo.get().getArticles().toCollection(ArrayList())) }} Article.kt 123456import com.squareup.moshi.Jsondata class Article( @field:Json(name=\"type_of\") val typeOf: String, @field:Json(name=\"title\") val title: String)","link":"/blog/How-to-use-Retrofit-in-Android/"},{"title":"How to use Sonarqube in Swift projects","text":"Issue #216 Install Sonarqubehttps://docs.sonarqube.org/latest/setup/get-started-2-minutes/ Download Sonarqube for macOS https://www.sonarqube.org/downloads/ Put it in ~/sonarqube Run localhost server ~/sonarqube/bin/macosx-universal-64/sonar.sh console Login http://localhost:9000 with admin/admin Create new project Install Sonar scannerhttps://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner Download for macOS 64 bit Put it in ~/sonarscanner export PATH=$PATH:/Users/khoa/sonarscanner/bin Go to project, create sonar-project.properties 123456789101112# must be unique in a given SonarQube instancesonar.projectKey=my-app# this is the name and version displayed in the SonarQube UI. Was mandatory prior to SonarQube 6.1.sonar.projectName=My Appsonar.projectVersion=1.0 # Path is relative to the sonar-project.properties file. Replace &quot;\\&quot; by &quot;/&quot; on Windows.# This property is optional if sonar.modules is set. sonar.sources=. # Encoding of the source code. Default is default system encoding#sonar.sourceEncoding=UTF-8 Run sonar-scanner Install swift pluginhttps://github.com/Backelite/sonar-swift Download jar file https://github.com/Backelite/sonar-swift/releases Follow https://docs.sonarqube.org/latest/setup/install-plugin/ Put jar file into ~/sonarqube/extensions/plugins Restart server Copy run-sonar-swift.sh https://github.com/Backelite/sonar-swift/blob/develop/sonar-swift-plugin/src/main/shell/run-sonar-swift.sh to project folder Go to Quality Profile http://localhost:9000/profiles?language=swift Skip some toolsModify run-sonar-swift.sh 123456789vflag=&quot;&quot;nflag=&quot;&quot;unittests=&quot;on&quot;swiftlint=&quot;on&quot;tailor=&quot;off&quot;lizard=&quot;on&quot;oclint=&quot;off&quot;fauxpas=&quot;off&quot;sonarscanner=&quot;&quot; Git ignore123.scannerwork/sonar-reports/compile_commands.json run-sonar-swift.sh Update sonar-project.properties 1234sonar.swift.appScheme=MyApp Stagingsonar.swift.project=MyApp.xcodeprojsonar.swift.workspace=MyApp.xcworkspacesonar.swift.simulator=platform=iOS Simulator,name=iPhone X Ä Run chmod +x run-sonar-swift.sh Run ./run-sonar-swift.sh Troubleshootingfailed with error code: 64 https://github.com/Backelite/sonar-swift/issues/222When run ./run-sonar-swift.sh 1234xcodebuild: error: ''MyApp.xcodeproj'' does not exist.2019-04-29 12:10:17.486 defaults[4134:569992]Domain CFBundleShortVersionString does not exist.Extracting Xcode project informationxcodebuild: error: option 'Destination' requires at least one parameter of the form 'key=value' üëâ Remove quotes in sonar-project.propertiesüëâ Modify run-sonar-swift.sh, add these before Check for mandatory parameters section Surround by double quotes 1234projectFile=&quot;\\&quot;$projectFile\\&quot;&quot;workspaceFile=&quot;\\&quot;$workspaceFile\\&quot;&quot;appScheme=&quot;\\&quot;$appScheme\\&quot;&quot;destinationSimulator=&quot;\\&quot;$destinationSimulator\\&quot;&quot; üò¢ Does not worküëâ Need to create a scheme name without space Error code 65üëâSpecify team in Xcode project destinationNeed double quotes destinationSimulator=&quot;\\&quot;$destinationSimulator\\&quot;&quot; Use equal sign = 1-destination=&quot;$destinationSimulator&quot; instead of space ‚Äò ‚Äò 1-destination &quot;$destinationSimulator&quot; Metric ‚Äòfiles‚Äô should not be computed by a SensorWhen run sonar-scanner https://github.com/Backelite/sonar-swift/issues/212 1234567891011121314151617181920212223242526272829303132333435363738394041424311:01:14.406 INFO: Sensor JaCoCo XML Report Importer [jacoco]11:01:14.409 DEBUG: No reports found11:01:14.409 INFO: Sensor JaCoCo XML Report Importer [jacoco] (done) | time=3ms11:01:14.409 INFO: Sensor SwiftLint [backelitesonarswiftplugin]11:01:14.417 INFO: Sensor SwiftLint [backelitesonarswiftplugin] (done) | time=8ms11:01:14.417 INFO: Sensor Tailor [backelitesonarswiftplugin]11:01:14.418 INFO: Sensor Tailor [backelitesonarswiftplugin] (done) | time=1ms11:01:14.418 INFO: Sensor OCLint [backelitesonarswiftplugin]11:01:14.419 INFO: Sensor OCLint [backelitesonarswiftplugin] (done) | time=1ms11:01:14.419 INFO: Sensor FauxPas [backelitesonarswiftplugin]11:01:14.419 INFO: Sensor FauxPas [backelitesonarswiftplugin] (done) | time=0ms11:01:14.419 INFO: Sensor Swift Squid [backelitesonarswiftplugin]11:01:14.526 INFO: ------------------------------------------------------------------------11:01:14.526 INFO: EXECUTION FAILURE11:01:14.526 INFO: ------------------------------------------------------------------------11:01:14.527 INFO: Total time: 6.180s11:01:14.603 INFO: Final Memory: 25M/566M11:01:14.603 INFO: ------------------------------------------------------------------------11:01:14.603 ERROR: Error during SonarQube Scanner executionjava.lang.UnsupportedOperationException: Metric 'files' should not be computed by a Sensor at org.sonar.scanner.sensor.DefaultSensorStorage.saveMeasure(DefaultSensorStorage.java:168)``` üëâInstall maven https://maven.apache.org/download.cgiEdit `ObjectiveCSquidSensor.java` and `SwiftSquidSensor`, remove line with `CoreMetrics.FILES`Run `export PATH=$PATH:/Users/khoa/apache-maven/bin`Run `./build-and-deploy.sh`Or `~/apache-maven/bin/mvn clean install`üéâ Built jar is in `sonar-swift-plugin/target/backelite-sonar-swift-plugin-0.4.4.jar`, copy back to `extensions/plugins`### How to enable SwiftLint as default profile ü§îüëâ Need to close current Sonar tab and restart server### Testing failed: unable to attach DBModify `run-sonar-swift.sh` to add `-UseModernBuildSystem=NO` to `buildCmd+=(-destination`### slather No coverage directory foundTry running slather coverage ‚Äìinput-format profdata ‚Äìcobertura-xml ‚Äìoutput-directory sonar-reports ‚Äìworkspace MyApp.xcworkspace ‚Äìscheme MyAppStaging MyApp.xcodeproj 12345678üëâ Enable coverage option in scheme -&gt; Test![](https://github.com/SlatherOrg/slather/raw/master/README_Images/test_scheme.png)Optional: declare `.slather.yml` file https://github.com/SlatherOrg/slather### Unable to execute SonarQube 14:53:23.251 ERROR: Error during SonarQube Scanner executionorg.sonarsource.scanner.api.internal.ScannerException: Unable to execute SonarQube at org.sonarsource.scanner.api.internal.IsolatedLauncherFactory.lambda$createLauncher$0(IsolatedLauncherFactory.java:85) 1234üëâStart sonar server### LizardReportParser$SwiftFunction cannot be cast Error during SonarQube Scanner executionjava.lang.ClassCastException: com.backelite.sonarqube.swift.complexity.LizardReportParser$SwiftFunction cannot be cast to org.sonar.api.batch.fs.internal.DefaultInputComponent 12üëâ Run [lizard](https://github.com/terryyin/lizard) manually lizard ‚Äìxml sonar-reports/lizard-report.xml```","link":"/blog/How-to-use-Sonarqube-in-Swift-projects/"},{"title":"How to use TabView with enum in SwiftUI","text":"Issue #599 Specify tag 123456789101112131415161718enum Authentication: Int, Codable { case key case certificate}TabView(selection: $authentication) { KeyAuthenticationView() .tabItem { Text(\"üîë Key\") } .tag(Authentication.key) CertificateAuthenticationView() .tabItem { Text(\"üì∞ Certificate\") } .tag(Authentication.certificate)}","link":"/blog/How-to-use-TabView-with-enum-in-SwiftUI/"},{"title":"How to use SurveyMonkey in React Native","text":"Issue #521 12345#import &lt;React/RCTBridgeModule.h&gt;@interface RNSurveyManager : NSObject &lt;RCTBridgeModule&gt;@end 12345678910111213141516171819202122232425262728293031323334353637383940414243#import \"RNSurveyManager.h\"#import &lt;React/RCTLog.h&gt;#import &lt;SurveyMonkeyiOSSDK/SurveyMonkeyiOSSDK.h&gt;@interface RNSurveyManager()&lt;SMFeedbackDelegate&gt;@property (nonatomic, strong) SMFeedbackViewController * feedbackController;@end@implementation RNSurveyManager- (instancetype)init { self = [super init]; if (self) { self.feedbackController = [[SMFeedbackViewController alloc] initWithSurvey:@\"VV8X5QA\"]; self.feedbackController.delegate = self; } return self;}+ (BOOL)requiresMainQueueSetup { return YES;}- (dispatch_queue_t)methodQueue { return dispatch_get_main_queue();}RCT_EXPORT_MODULE(SurveyManager);- (void)respondentDidEndSurvey:(SMRespondent *)respondent error:(NSError *)error { NSLog(@\"respondent %@ error %@\", respondent, error);}RCT_EXPORT_METHOD(show:(RCTResponseSenderBlock)callback) { [UIApplication.sharedApplication.keyWindow.rootViewController presentViewController:self.feedbackController animated:YES completion:^() { callback(@[]); }];}@end 12345678910// @flowimport { NativeModules } from 'react-native'type SurveyManagerType = { show: () =&gt; void}const SurveyManager: SurveyManagerType = NativeModules.SurveyManagerexport default SurveyManager","link":"/blog/How-to-use-SurveyMonkey-in-React-Native/"},{"title":"How to use Swift package manager in watchOS","text":"Issue #474 SPMGo to Project -&gt; Swift Packages, add package. For example https://github.com/onmyway133/EasyStash Select your WatchKit Extension target, under Frameworks, Libraries and Embedded Content add the library CocoaPodsIf we use CocoaPods, then it needs to be in WatchKit Extension 1234target 'MyApp WatchKit Extension' do use_frameworks! pod 'EasyStash', :git =&gt; 'https://github.com/onmyway133/EasyStash'end","link":"/blog/How-to-use-Swift-package-manager-in-watchOS/"},{"title":"How to use Timer and RunLoop in Swift","text":"Issue #562 Run Timer in command line application12345Timer.scheduledTimer(withTimeInterval: seconds, repeats: false, block: { _ in completion(.success(()))})RunLoop.current.run() Read more https://www.hackingwithswift.com/articles/117/the-ultimate-guide-to-timer https://learnappmaking.com/timer-swift-how-to/","link":"/blog/How-to-use-Timer-and-RunLoop-in-Swift/"},{"title":"How to use UICollectionViewLayout","text":"Issue #546 Using the Flow Layout Customizing Collection View Cell Insertion Animations","link":"/blog/How-to-use-UICollectionViewLayout/"},{"title":"How to use Xcode","text":"Issue #499 Build settingBuild Library For Distribution Binary Frameworks in Swift It turns on all the features that are necessary to build your library in such a way that it can be distributed What does this error actually mean? Well, when the Swift compiler goes to import a module, it looks for a file called the Compiled Module for that library. If it finds one of these files, it reads off the manifest of public APIs that you can call into, and lets you use them. Now, this Compiled Module Format is a binary format that basically contains internal compiler data structures. And since they‚Äôre just internal data structures, they‚Äôre subject to change with every version of the Swift Compiler. So what this means is that if one person tries to import a module using one version of Swift, and that module was created by another version of Swift, their compiler can‚Äôt understand it, and they won‚Äôt be able to use it. Well, in order to solve this version lock, Xcode 11 introduces a new format for Swift Modules, called Swift Module Interfaces. And just like the Compiled Module Format, they list out all the public APIs of a module, but in a textual form that behaves more like source code. And since they behave like source code, then future versions of the Swift Compiler will be able to import module interfaces created with older versions. And when you enable Build Libraries for Distribution, you‚Äôre telling the compiler to generate one of these stable interfaces whenever it builds your framework","link":"/blog/How-to-use-Xcode/"},{"title":"How to use Timer in Swift","text":"Issue #212 Pre iOS 10 12345678910func schedule() { DispatchQueue.main.async { self.timer = Timer.scheduledTimer(timeInterval: 20, target: self, selector: #selector(self.timerDidFire(timer:)), userInfo: nil, repeats: false) }}@objc private func timerDidFire(timer: Timer) { print(timer)} iOS 10+ 12345DispatchQueue.main.async { self.timer = Timer.scheduledTimer(withTimeInterval: 20, repeats: false) { timer in print(timer) }} Note that It needs to be on the main queue Callback function can be public, private, ‚Ä¶ Callback function needs to be @objc Original answer https://stackoverflow.com/a/42273141/1418457","link":"/blog/How-to-use-Timer-in-Swift/"},{"title":"How to use application will terminate in macOS","text":"Issue #601 On Xcode 11, applicationWillTerminate is not called because of default automatic termination on in Info.plist. Removing NSSupportsSuddenTermination to trigger will terminate notification 123func applicationWillTerminate(_ notification: Notification) { save()} 1234&lt;key&gt;NSSupportsAutomaticTermination&lt;/key&gt;&lt;true/&gt;&lt;key&gt;NSSupportsSuddenTermination&lt;/key&gt;&lt;true/&gt;","link":"/blog/How-to-use-application-will-terminate-in-macOS/"},{"title":"How to use Firebase ID token","text":"Issue #424 https://medium.com/@jwngr/demystifying-firebase-auth-tokens-e0c533ed330c One confusing point here that people often do not realize is that even though the custom token itself expires after one hour, a modern client SDK authenticated with that custom token will stay authenticated beyond that hour! What happens under the hood is that the custom token is sent to the Firebase Auth service in exchange for an ID token and refresh token pair which are used to keep the client SDK authenticated As with custom tokens, ID tokens are short-lived JWTs, lasting for just one hour. In order to allow end users to stay logged in for more than one hour, the modern SDKs transparently refresh a user‚Äôs ID token on your behalf using a refresh token If your app includes a custom backend server, ID tokens can and should be used to communicate securely with it. Instead of sending requests with a user‚Äôs raw uid which can be easily spoofed by a malicious client, send the user‚Äôs ID token which can be verified via a Firebase Admin SDK https://firebase.google.com/docs/auth/admin/verify-id-tokens#retrieve_id_tokens_on_clients When a user or device successfully signs in, Firebase creates a corresponding ID token that uniquely identifies them and grants them access to several resources, such as Firebase Realtime Database and Cloud Storage. You can re-use that ID token to identify the user or device on your custom backend server. To retrieve the ID token from the client, make sure the user is signed in and then get the ID token from the signed-in user:","link":"/blog/How-to-use-Firebase-ID-token/"},{"title":"How to use async function as parameter in TypeScript","text":"Issue #640 1234567891011121314151617async function useCache( collectionName: string, key: string, response: functions.Response&lt;any&gt;, fetch: () =&gt; Promise&lt;any&gt;): Promise&lt;any&gt; { const existing = await db.collection(collectionName).doc(key).get() if (existing.exists) { response.send(existing.data()) return } const object = await fetch() const json = Object.assign({}, object) await db.collection(collectionName).doc(key).set(json) response.send(object)} 123456789useCache( \"books\", key, response, async () =&gt; { const service = new Service() return await service.doSomething(key) })","link":"/blog/How-to-use-async-function-as-parameter-in-TypeScript/"},{"title":"How to use assertionFailure and Optimization Level in iOS","text":"Issue #39 We used to use assertionFailure to mark programmer error or something that shouldn‚Äôt happen. From assertionFailure Indicates that an internal sanity check failed. Use this function to stop the program, without impacting the performance of shipping code, when control flow is not expected to reach the call‚Äîfor example, in the default case of a switch where you have knowledge that one of the other cases must be satisfied. To protect code from invalid usage in Release builds, see preconditionFailure(_:file:line:). In playgrounds and -Onone builds (the default for Xcode‚Äôs Debug configuration), stop program execution in a debuggable state after printing message. In -O builds, has no effect. In -Ounchecked builds, the optimizer may assume that this function is never called. Failure to satisfy that assumption is a serious programming error. So go to your target settings, and check Optimization Level, make sure it is not -Onone for release configuration. The difference between debug and release is this SWIFT_OPTIMIZATION_LEVEL. If -Onone then your configuration is considered debug, and assertionFailure will crash your apps Read more http://blog.krzyzanowskim.com/2015/03/09/swift-asserts-the-missing-manual/","link":"/blog/How-to-use-assertionFailure-and-Optimization-Level-in-iOS/"},{"title":"How to use background in iOS","text":"Issue #631 beginBackgroundTaskhttps://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/extending_your_app_s_background_execution_time When your app moves to the background, the system calls your app delegate‚Äôs applicationDidEnterBackground(_:) method. That method has five seconds to perform any tasks and return. Shortly after that method returns, the system puts your app into the suspended state. For most apps, five seconds is enough to perform any crucial tasks, but if you need more time, you can ask UIKit to extend your app‚Äôs runtime. You extend your app‚Äôs runtime by calling the beginBackgroundTask(withName:expirationHandler:) method. Calling this method gives you extra time to perform important tasks. BackgroundTasks https://stackoverflow.com/questions/57197958/xcode-11-what-is-the-new-background-processing-background-mode https://developer.apple.com/documentation/backgroundtasks Use the BackgroundTasks framework to keep your app content up to date and run tasks requiring minutes to complete while your app is in the background. Longer tasks can optionally require a powered device and network connectivity. Register launch handlers for tasks when the app launches and schedule them as required. The system will launch your app in the background and execute the tasks. https://www.andyibanez.com/posts/modern-background-tasks-ios13/ The main API for using this framework is the BGTaskScheduler . This API constantly monitors the system state such as battery level, background usage, and more, so it chooses the optimal time to run your tasks. To use this API, you begin working when your app is on the foreground. You need to create Background task request. The framework provides an abstract class BGTask, you never use this task directly. Instead, the framework provides two concrete subclasses you can interact with: BGProcessingTask, for long running and maintenance tasks such backup and cleanup, and BGAppRefreshTask to keep your app up-to-date throughout the day. URLSession background https://agostini.tech/2018/04/08/background-transfers-using-urlsession/ When you create your background download or upload tasks with URLSession, you‚Äôre actually scheduling a download (or upload) with the ‚Äònsurlsessiond‚Äô which is a daemon service that runs as a separate process.","link":"/blog/How-to-use-background-in-iOS/"},{"title":"How to use UserNotificationsUI in iOS","text":"Issue #454 From documentation https://developer.apple.com/documentation/usernotificationsui Customize how local and remote notifications appear on the user‚Äôs device by adding a notification content app extension to the bundle of your iOS app. Your extension manages a custom view controller, which you use to present the content from incoming notifications. When a notification arrives, the system displays your view controller in addition to, or in place of, the default system interface. https://developer.apple.com/documentation/usernotificationsui/customizing_the_appearance_of_notifications When an iOS device receives a notification containing an alert, the system displays the contents of the alert in two stages. Initially, it displays an abbreviated banner with the title, subtitle, and two to four lines of body text from the notification. If the user presses the abbreviated banner, iOS displays the full notification interface, including any notification-related actions. The system provides the interface for the abbreviated banner, but you can customize the full interface using a notification content app extension. Use Notification Content Extension 1234func didReceive(_ notification: UNNotification) { self.bodyText?.text = notification.request.content.body self.headlineText?.text = notification.request.content.title}","link":"/blog/How-to-use-UserNotificationsUI-in-iOS/"},{"title":"How to use ViewModel and ViewModelsProviders in Android","text":"Issue #363 ViewModels a simple examplehttps://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e Rotating a device is one of a few configuration changes that an app can go through during its lifetime, including keyboard availability and changing the device‚Äôs language. All of these configuration changes cause the Activity to be torn down and recreated The ViewModel class is designed to hold and manage UI-related data in a life-cycle conscious way. This allows data to survive configuration changes such as screen rotations. The ViewModel exists from when the you first request a ViewModel (usually in the onCreate the Activity) until the Activity is finished and destroyed. onCreate may be called several times during the life of an Activity, such as when the app is rotated, but the ViewModel survives throughout. Storing an Application context in a ViewModel is okay because an Application context is tied to the Application lifecycle. This is different from an Activity context, which is tied to the Activity lifecycle. In fact, if you need an Application context, you should extend AndroidViewModel which is simply a ViewModel that includes an Application reference. The first time the ViewModelProviders.of method is called by MainActivity, it creates a new ViewModel instance. When this method is called again, which happens whenever onCreate is called, it will return the pre-existing ViewModel associated with the specific Court-Counter MainActivity 1ViewModelProviders.of(&lt;THIS ARGUMENT&gt;).get(ScoreViewModel.class); This allows you to have an app that opens a lot of different instances of the same Activity or Fragment, but with different ViewModel information Dive deep into Android‚Äôs ViewModel ‚Äî Android Architecture Componentshttps://android.jlelse.eu/dive-deep-into-androids-viewmodel-android-architecture-components-e0a7ded26f70 1234567891011121314151617181920212223/** * Utilities methods for {@link ViewModelStore} class. */public class ViewModelProviders {/** * Creates a {@link ViewModelProvider}, which retains ViewModels while a scope of given Activity * is alive. More detailed explanation is in {@link ViewModel}. * &lt;p&gt; * It uses {@link ViewModelProvider.AndroidViewModelFactory} to instantiate new ViewModels. * * @param activity an activity, in whose scope ViewModels should be retained * @return a ViewModelProvider instance */ @NonNull @MainThread public static ViewModelProvider of(@NonNull FragmentActivity activity) { ViewModelProvider.AndroidViewModelFactory factory = ViewModelProvider.AndroidViewModelFactory.getInstance( checkApplication(activity)); return new ViewModelProvider(ViewModelStores.of(activity), factory); } } It seems like ViewModelProviders.of is just a factory of ViewModelProvider, which depends upon ViewModelFactory and a ViewModelStore. 12MyViewModelFactory factory = new MyViewModelFactory(data1, data2);ViewModelProviders.of(this, factory).get(MyViewModel.class); 123public class ViewModelStore { private final HashMap&lt;String, ViewModel&gt; mMap = new HashMap&lt;&gt;();} HolderFragment HolderFragment is a regular Android Headless Fragment. It is the scope where all ViewModels inside the ViewModelStore will live. 12345public class HolderFragment extends Fragment implements ViewModelStoreOwner { private static final HolderFragmentManager sHolderFragmentManager = new HolderFragmentManager(); private ViewModelStore mViewModelStore = new ViewModelStore();} 1234static class HolderFragmentManager { private Map&lt;Activity, HolderFragment&gt; mNotCommittedActivityHolders = new HashMap&lt;&gt;(); private Map&lt;Fragment, HolderFragment&gt; mNotCommittedFragmentHolders = new HashMap&lt;&gt;();} Who owns the HolderFragment? The HolderFragment has an inner static class named HolderFragmentManager. The HolderFragmentManager creates and manages HolderFragment instances.After creating the instances it associates them with an Activity or Fragment. The whole process is done using the methods holderFragmentFor(Activity) and holderFragmentFor(Fragment). How does HolderFragment retains the state ? By setting retain instance to true and not providing a view, the HolderFragment becomes essentially a headless Fragment that is retained for as long as the Activity is not destroyed. 123public HolderFragment() { setRetainInstance(true);} void setRetainInstance (boolean retain) Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). This can only be used with fragments not in the back stack. If set, the fragment lifecycle will be slightly different when an activity is recreated: Retrieving ViewModel instance1get(MyViewModel.class) It tries to retrieve a MyViewModel instance from the store. If none is there, it uses the factory to create it and then stores it into HashMap&lt;String, ViewModel&gt;. In order to retrieve the already created ViewModel, it generates a key from the class qualified name.","link":"/blog/How-to-use-ViewModel-and-ViewModelsProviders-in-Android/"},{"title":"How to use addSubview in iOS","text":"Issue #344 addSubview can trigger viewDidLayoutSubviews, so be careful to just do layout stuff in viewDidLayoutSubviews This method establishes a strong reference to view and sets its next responder to the receiver, which is its new superview. Views can have only one superview. If view already has a superview and that view is not the receiver, this method removes the previous superview before making the receiver its new superview. When the bounds change for a view controller‚Äô¬Ä¬ôs view, the view adjusts the positions of its subviews and then the system calls this method. However, this method being called does not indicate that the individual layouts of the view‚Äô¬Ä¬ôs subviews have been adjusted. Each subview is responsible for adjusting its own layout. Your view controller can override this method to make changes after the view lays out its subviews. The default implementation of this method does nothing.","link":"/blog/How-to-use-addSubview-in-iOS/"},{"title":"How to use bundle with rbenv","text":"Issue #534 Workaround 1/Users/khoa/.rbenv/shims/bundler install","link":"/blog/How-to-use-bundle-with-rbenv/"},{"title":"How to use coroutine LiveData in Android","text":"Issue #358 app/build.gradle 1implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha01\" 12345678910111213import androidx.lifecycle.ViewModelimport androidx.lifecycle.liveDataimport kotlinx.coroutines.Dispatchersclass MainViewModel : ViewModel() { val repository: TodoRepository = TodoRepository() val firstTodo = liveData(Dispatchers.IO) { val retrivedTodo = repository.getTodo(1) emit(retrivedTodo) }} Use coroutines with LiveDatahttps://developer.android.com/topic/libraries/architecture/coroutines The liveData building block serves as a structured concurrency primitive between coroutines and LiveData. The code block starts executing when LiveData becomes active and is automatically canceled after a configurable timeout when the LiveData becomes inactive. Source codehttps://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev/lifecycle/lifecycle-livedata-ktx/src/main/java/androidx/lifecycle/CoroutineLiveData.kthttps://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev/lifecycle/lifecycle-livedata-ktx/src/main/java/androidx/lifecycle/FlowLiveData.kt CoroutineLiveData.kt 123456@UseExperimental(ExperimentalTypeInference::class)fun &lt;T&gt; liveData( context: CoroutineContext = EmptyCoroutineContext, timeoutInMs: Long = DEFAULT_TIMEOUT, @BuilderInference block: suspend LiveDataScope&lt;T&gt;.() -&gt; Unit): LiveData&lt;T&gt; = CoroutineLiveData(context, timeoutInMs, block) a LiveData that tries to load the User from local cache first and then tries from the server and also yields the updated value 12345678910111213141516val user = liveData { // dispatch loading first emit(LOADING(id)) // check local storage val cached = cache.loadUser(id) if (cached != null) { emit(cached) } if (cached == null || cached.isStale()) { val fresh = api.fetch(id) // errors are ignored for brevity cache.save(fresh) emit(fresh) }} Read more Suspend what you‚Äôre doing: Retrofit has now Coroutines support! Exploring new Coroutines and Lifecycle Architectural Components integration on Android Coroutine in Android: Working with Lifecycle","link":"/blog/How-to-use-coroutine-LiveData-in-Android/"},{"title":"How to use custom font in SwiftUI","text":"Issue #586 In macOSAdd fonts to target. In Info.plist, just need to specify font locations, most of the time they are at Resources folder ATSApplicationFontsPath (String - macOS) identifies the location of a font file or directory of fonts in the bundle‚Äôs Resources directory. If present, macOS activates the fonts at the specified path for use by the bundled app. The fonts are activated only for the bundled app and not for the system as a whole. The path itself should be specified as a relative directory of the bundle‚Äôs Resources directory. For example, if a directory of fonts was at the path /Applications/MyApp.app/Contents/Resources/Stuff/MyFonts/, you should specify the string Stuff/MyFonts/ for the value of this key. 12&lt;key&gt;ATSApplicationFontsPath&lt;/key&gt;&lt;string&gt;.&lt;/string&gt; Define font weight as enums, and base on ContentSizeCategory 12345678910111213141516171819202122232425262728293031323334353637383940enum OpenSans: String { case bold = \"OpenSans-Bold\" case semiBold = \"OpenSans-SemiBold\" case extraBold = \"OpenSans-ExtraBold\" case light = \"OpenSans-Light\" case regular = \"OpenSans-Regular\"}enum FiraCode: String { case bold = \"FiraCode-Bold\" case medium = \"FiraCode-Medium\" case light = \"FiraCode-Light\" case regular = \"FiraCode-Regular\" case retina = \"FiraCode-Retina\"}extension ContentSizeCategory { var size: CGFloat { switch self { case .small: return 14 case .medium: return 16 case .large: return 20 default: return 14 } }}extension View { func customFont(_ font: OpenSans, category: ContentSizeCategory) -&gt; some View { return self.customFont(font.rawValue, category: category) } func customFont(_ name: String, category: ContentSizeCategory) -&gt; some View { return self.font(.custom(name, size: category.size)) }} Then we can specify font weight, thanks to function overloading 12Text(\"Welcome\") .customFont(OpenSans.bold, category: .large) In iOSObserve @Environment(\\.sizeCategory) var sizeCategory in ViewModifier Read more https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-dynamic-type-with-a-custom-font","link":"/blog/How-to-use-custom-font-in-SwiftUI/"},{"title":"How to use custom domain for GitHub pages","text":"Issue #423 In DNS settingsAdd 4 A records 1234A @ 185.199.110.153A @ 185.199.111.153A @ 185.199.108.153A @ 185.199.109.153 and 1 CNAME record 1CNAME www learntalks.github.io In GitHub Select custom domain and type learntalks.com In sourcepublic/CNAME 1learntalks.com","link":"/blog/How-to-use-custom-domain-for-GitHub-pages/"},{"title":"How to use decoration view in UICollectionView","text":"Issue #529 indexPathhttps://developer.apple.com/documentation/uikit/uicollectionviewlayoutattributes/1617786-layoutattributesfordecorationvie It is up to you to decide how to use the indexPath parameter to identify a given decoration view. Typically, you use the decorationViewKind parameter to identify the type of the decoration view and the indexPath information to distinguish between different instances of that view. Posts Add separator https://gist.github.com/tomaskraina/1eb291e4717f14ad6e0f8e60ffe9b7d3","link":"/blog/How-to-use-decoration-view-in-UICollectionView/"},{"title":"How to use custom font as resource in Android","text":"Issue #380 Downloadable fontshttps://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts Android 8.0 (API level 26) and Android Support Library 26 introduce support for APIs to request fonts from a provider application instead of bundling files into the APK or letting the APK download fonts. The feature is available on devices running Android API versions 14 and higher through the Support Library 26 Before Select File -&gt; New -&gt; Folder -&gt; Assets Folder to create src/main/assets/fonts 12al myTypeface = Typeface.createFromAsset(assets, \"fonts/myFont.ttf\")myTextView.typeface = myTypeface In resCreate font directory Right click res -&gt; New -&gt; Android Resource Directory, select font and name the folder font Add custom fonts to res/font folder. Note that name must be lower case and underscore, like opensans_extrabolditalic.ttf Right click res/font -&gt; New -&gt; Font resource file to create font family opensans.xml 1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;font-family xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" &gt; &lt;font android:font=\"@font/opensans_regular\" android:fontStyle=\"normal\" android:fontWeight=\"400\" app:fontFamily=\"@font/opensans_regular\" app:fontStyle=\"normal\" app:fontWeight=\"400\" /&gt; &lt;font android:font=\"@font/opensans_semibold\" android:fontStyle=\"normal\" android:fontWeight=\"400\" app:fontFamily=\"@font/opensans_semibold\" app:fontStyle=\"normal\" app:fontWeight=\"400\" /&gt; &lt;font android:font=\"@font/opensans_bold\" android:fontStyle=\"normal\" android:fontWeight=\"400\" app:fontFamily=\"@font/opensans_bold\" app:fontStyle=\"normal\" app:fontWeight=\"400\" /&gt;&lt;/font-family&gt;``` Then use```xml&lt;TextView android:fontFamily=\"@font/opensans_bold\" android:textSize=\"26dp\"/&gt; Read more https://stackoverflow.com/questions/5583608/difference-between-res-and-assets-directories https://www.raywenderlich.com/213-custom-and-downloadable-fonts-on-android https://stackoverflow.com/questions/27588965/how-to-use-custom-font-in-a-project-written-in-android-studio","link":"/blog/How-to-use-custom-font-as-resource-in-Android/"},{"title":"How to use custom font in AppKit","text":"Issue #319 Add fonts to targets Declare in Info.plist https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/GeneralPurposeKeys.html#//apple_ref/doc/uid/TP40009253-SW8 ATSApplicationFontsPath (String - macOS) identifies the location of a font file or directory of fonts in the bundle‚Äôs Resources directory. If present, macOS activates the fonts at the specified path for use by the bundled app. The fonts are activated only for the bundled app and not for the system as a whole. The path itself should be specified as a relative directory of the bundle‚Äôs Resources directory. For example, if a directory of fonts was at the path /Applications/MyApp.app/Contents/Resources/Stuff/MyFonts/, you should specify the string Stuff/MyFonts/ for the value of this key. 12&lt;key&gt;ATSApplicationFontsPath&lt;/key&gt;&lt;string&gt;.&lt;/string&gt; Reference by name 1NSFont(name: \"FiraCode-Bold\", size: 14)","link":"/blog/How-to-use-custom-font-in-AppKit/"},{"title":"How to use Firebase RemoteConfig","text":"Issue #493 Declare in Podfile 12pod 'Firebase/Core'pod 'Firebase/RemoteConfig' Use RemoteConfigHandler to encapsulate logic. We introduce Key with CaseIterable and defaultValue of type NSNumber to manage default values. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import Firebaseimport FirebaseRemoteConfigfinal class RemoteConfigHandler { let remoteConfig: RemoteConfig enum Key: String, CaseIterable { case interval = \"fetch_interval\" var defaultValue: NSNumber { switch self { case .periodicGetSalons: return NSNumber(value: 300) } } } init() { self.remoteConfig = RemoteConfig.remoteConfig() let settings = RemoteConfigSettings() settings.minimumFetchInterval = 0 self.remoteConfig.configSettings = settings let map = Key.allCases.reduce([String: NSObject](), { map, key in var map = map map[key.rawValue] = key.defaultValue return map }) self.remoteConfig.setDefaults(map) } func update() { self.remoteConfig.fetchAndActivate(completionHandler: { status, error in print(status, error as Any) }) } var fetchInterval: TimeInterval { return getValue(key: .interval, transform: { $0.doubleValue }) } private func getValue&lt;T&gt;(key: Key, transform: (NSNumber) -&gt; T) -&gt; T { let number = remoteConfig.configValue(forKey: key.rawValue).numberValue ?? key.defaultValue return transform(number) }}","link":"/blog/How-to-use-Firebase-RemoteConfig/"},{"title":"How to use custom UINavigationBar in iOS","text":"Issue #102 Today I was reading the project in IGListKit Tutorial: Better UICollectionViews, I encounter something I often overlook 12let nav = UINavigationController(navigationBarClass: CustomNavigationBar.self, toolbarClass: nil)nav.pushViewController(FeedViewController(), animated: false) So we can provide custom navigationBarClass and toolbarClass for UINavigationController. This RRMaterialNavigationBar also has cool implementation of a material UINavigationBar. Together with UINavigationBarDelegate we can do some cool things","link":"/blog/How-to-use-custom-UINavigationBar-in-iOS/"},{"title":"How to use custom fonts in iOS","text":"Issue #225 12345678910111213&lt;key&gt;UIAppFonts&lt;/key&gt;&lt;array&gt; &lt;string&gt;OpenSans-Bold.ttf&lt;/string&gt; &lt;string&gt;OpenSans-BoldItalic.ttf&lt;/string&gt; &lt;string&gt;OpenSans-ExtraBold.ttf&lt;/string&gt; &lt;string&gt;OpenSans-ExtraBoldItalic.ttf&lt;/string&gt; &lt;string&gt;OpenSans-Italic.ttf&lt;/string&gt; &lt;string&gt;OpenSans-Light.ttf&lt;/string&gt; &lt;string&gt;OpenSans-LightItalic.ttf&lt;/string&gt; &lt;string&gt;OpenSans-Regular.ttf&lt;/string&gt; &lt;string&gt;OpenSans-SemiBold.ttf&lt;/string&gt; &lt;string&gt;OpenSans-SemiBoldItalic.ttf&lt;/string&gt;&lt;/array&gt; Read Adding a Custom Font to Your App The name of the font isn‚Äôt always obvious, and rarely matches the font file name. A quick way to find the font name is to get the list of fonts available to your app, which you can do with the following code: 1234for family in UIFont.familyNames.sorted() { let names = UIFont.fontNames(forFamilyName: family) print(\"Family: \\(family) Font names: \\(names)\")}","link":"/blog/How-to-use-custom-fonts-in-iOS/"},{"title":"How to use deep link and universal link in iOS","text":"Issue #548 https://stackoverflow.com/questions/35522618/universal-links-on-ios-vs-deep-links-url-schemes","link":"/blog/How-to-use-deep-link-and-universal-link-in-iOS/"},{"title":"How to use ext in gradle in Android","text":"Issue #338 Gradle uses Groovy and it has ext, also known as ExtraPropertiesExtension Additional, ad-hoc, properties for Gradle domain objects. Extra properties extensions allow new properties to be added to existing domain objects. They act like maps, allowing the storage of arbitrary key/value pairs. All ExtensionAware Gradle domain objects intrinsically have an extension named ‚Äúext‚Äù of this type. 123456789project.ext { myprop = \"a\"}assert project.myprop == \"a\"assert project.ext.myprop == \"a\"project.myprop = \"b\"assert project.myprop == \"b\"assert project.ext.myprop == \"b\" In root build.gradle, ext adds extra property to rootProject object. There we can access rootProject.ext or just ext 123ext { myLibraryVersion = '1.0.0'} In module app/build.gradle, ext adds extra property to project object. There we can access project.ext or just ext 123ext { myLibraryVersion = '1.0.0'}","link":"/blog/How-to-use-ext-in-gradle-in-Android/"},{"title":"How to use flatMap and compactMap in Swift","text":"Issue #425 flatMap: map and flatten array of arrayscompactMap: map and flatten array of optionals","link":"/blog/How-to-use-flatMap-and-compactMap-in-Swift/"},{"title":"How to use flipper","text":"Issue #519 Run the app https://github.com/facebook/flipperhttps://facebook.github.io/watchman/docs/install.html#installing-on-os-x-via-homebrew 1234567brew install watchmangit clone https://github.com/facebook/flipper.gitcd flipperyarnyarn start","link":"/blog/How-to-use-flipper/"},{"title":"How to use external display in iOS","text":"Issue #473 Before iOS 13Use UIScreen.didConnectNotification 12345678910111213141516NotificationCenter.default.addObserver(forName: UIScreen.didConnectNotification, object: nil, queue: nil) { (notification) in // Get the new screen information. let newScreen = notification.object as! UIScreen let screenDimensions = newScreen.bounds // Configure a window for the screen. let newWindow = UIWindow(frame: screenDimensions) newWindow.screen = newScreen // Install a custom root view controller in the window. self.configureAuxilliaryInterface(with: newWindow) // You must show the window explicitly. newWindow.isHidden = false // Save a reference to the window in a local array. self.additionalWindows.append(newWindow)} From iOS 13Handle configurationForConnecting 123456789101112131415161718192021222324252627282930@UIApplicationMainclass AppDelegate: UIResponder, UIApplicationDelegate {var newWindow: UIWindow! // MARK: UISceneSession Lifecycle func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -&gt; UISceneConfiguration { // Called when a new scene session is being created. // Use this method to select a configuration to create the new scene with. print(UIApplication.shared.connectedScenes) let scene = UIWindowScene(session: connectingSceneSession, connectionOptions: options) // Configure a window for the screen. self.newWindow = UIWindow(frame: CGRect(x: 0, y: 0, width: 1000, height: 500)) // self.newWindow.backgroundColor = UIColor.yellow // Install a custom root view controller in the window. let viewController = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(identifier: \"other\") as! OtherViewController self.newWindow.rootViewController = viewController self.newWindow.windowScene = scene // You must show the window explicitly. self.newWindow.isHidden = false return UISceneConfiguration(name: \"External configuration\", sessionRole: connectingSceneSession.role) }} Or we can declare in plist 1234567891011121314151617181920212223242526272829&lt;dict&gt; &lt;key&gt;UIApplicationSupportsMultipleScenes&lt;/key&gt; &lt;false/&gt; &lt;key&gt;UISceneConfigurations&lt;/key&gt; &lt;dict&gt; &lt;key&gt;UIWindowSceneSessionRoleApplication&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;UISceneConfigurationName&lt;/key&gt; &lt;string&gt;Default Configuration&lt;/string&gt; &lt;key&gt;UISceneDelegateClassName&lt;/key&gt; &lt;string&gt;$(PRODUCT_MODULE_NAME).SceneDelegate&lt;/string&gt; &lt;key&gt;UISceneStoryboardFile&lt;/key&gt; &lt;string&gt;Main&lt;/string&gt; &lt;/dict&gt; &lt;/array&gt; &lt;key&gt;UIWindowSceneSessionRoleExternalDisplay&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;UISceneConfigurationName&lt;/key&gt; &lt;string&gt;External configuration&lt;/string&gt; &lt;key&gt;UISceneDelegateClassName&lt;/key&gt; &lt;string&gt;$(PRODUCT_MODULE_NAME).OtherSceneDelegate&lt;/string&gt; &lt;key&gt;UISceneStoryboardFile&lt;/key&gt; &lt;string&gt;Other&lt;/string&gt; &lt;/dict&gt; &lt;/array&gt; &lt;/dict&gt;&lt;/dict&gt; Read more External Display Support on iOS Supporting External Displays Building iPad Pro features in Swift How can I display different content on different screens in iOS 13? Displaying Content on a Connected Screen Adding External Display Support To Your iOS App Is Ridiculously Easy","link":"/blog/How-to-use-external-display-in-iOS/"},{"title":"How to use flow in Kotlin","text":"Issue #388 Asynchronous Flowhttps://kotlinlang.org/docs/reference/coroutines/flow.html Using List result type we can only return all the values at once. To represent the stream of values that are being asynchronously computed we can use Flow type similarly to the Sequence type for synchronously computed values:","link":"/blog/How-to-use-flow-in-Kotlin/"},{"title":"How to use flow type in Javascript","text":"Issue #389 Prefer flow over TypeScript for simplicity Javascript primitive types number and string are too general and do not express the domain objects. Because lack of type alias in Javascript, we can use flow 123456789101112131415161718192021222324export type Centimeter = numberexport type Color = stringexport type ImageSource = numberexport type Kilogram = numberexport type Kilocalorie = number // 1 cal = 4.1840 Jexport type Second = numberexport type SecondsSince1970 = numberexport type Minute = numberexport type DateString = string // 2018-11-20export type DateTimeString = string // 2018-11-20T00:00:00export type YearWeekString = string // 201838export type FunctionWithVoid = () =&gt; voidexport type FunctionWithString = (string) =&gt; voidexport type FunctionWithBoolean = (boolean) =&gt; voidexport type FunctionWithNumber = (number) =&gt; voidexport type JSONObject = anyexport type JSONString = stringexport type StringToString = anyexport type Degree = numberexport type Radian = numberexport type Animal = 'cat' | 'dog' | 'cow'","link":"/blog/How-to-use-flow-type-in-Javascript/"},{"title":"How to use array of strings in ForEach in SwiftUI","text":"Issue #483 Every item in list must be uniquely identifiable 123456789101112List { ForEach(books, id: \\.bookId) { book in NavigationLink(destination: BookView(book: book) .navigationBarTitle(book.name) ) { VStack { Text(book.name) } } }} In case of primitive, we can just provide id to conform to Identifiable 12345extension String: Identifiable { public var id: String { return self }}","link":"/blog/How-to-use-array-of-strings-in-ForEach-in-SwiftUI/"},{"title":"How to use generic NSCollectionView in macOS","text":"Issue #427 See CollectionViewHandler Use ClickedCollectionView to detect clicked index for context menu.Embed NSCollectionView inside NSScrollView to enable scrolling 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778import AppKitpublic class CollectionViewHandler&lt;Item: Equatable, Cell: NSCollectionViewItem&gt;: NSObject, NSCollectionViewDataSource, NSCollectionViewDelegateFlowLayout { public let layout = NSCollectionViewFlowLayout() public let scrollView = NSScrollView() public let collectionView = ClickedCollectionView() public var items = [Item]() public var itemSize: () -&gt; CGSize = { .zero } public var configure: (Item, Cell) -&gt; Void = { _, _ in } override init() { super.init() layout.minimumLineSpacing = 4 layout.sectionInset = NSEdgeInsets(top: 4, left: 4, bottom: 4, right: 4) collectionView.dataSource = self collectionView.delegate = self collectionView.collectionViewLayout = layout collectionView.allowsMultipleSelection = false collectionView.backgroundColors = [.clear] collectionView.isSelectable = true collectionView.register(Cell.self, forItemWithIdentifier: Cell.itemId) scrollView.documentView = collectionView } // MARK: - Items public func add(item: Item) { items.insert(item, at: 0) let indexPath = IndexPath(item: 0, section: 0) collectionView.animator().insertItems(at: Set(arrayLiteral: indexPath)) } public func remove(item: Item) { guard let index = items.firstIndex(where: { $0 == item }) else { return } remove(index: index) } public func remove(index: Int) { items.remove(at: index) let indexPath = IndexPath(item: index, section: 0) collectionView.animator().deleteItems(at: Set(arrayLiteral: indexPath)) } // MARK: - NSCollectionViewDataSource public func numberOfSections(in collectionView: NSCollectionView) -&gt; Int { return 1 } public func collectionView(_ collectionView: NSCollectionView, numberOfItemsInSection section: Int) -&gt; Int { return items.count } public func collectionView(_ collectionView: NSCollectionView, itemForRepresentedObjectAt indexPath: IndexPath) -&gt; NSCollectionViewItem { let cell = collectionView.makeItem(withIdentifier: Cell.itemId, for: indexPath) as! Cell let item = items[indexPath.item] configure(item, cell) return cell } // MARK: - NSCollectionViewDelegateFlowLayout public func collectionView(_ collectionView: NSCollectionView, layout collectionViewLayout: NSCollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; NSSize { return itemSize() }}","link":"/blog/How-to-use-generic-NSCollectionView-in-macOS/"},{"title":"How to use function builder in Swift 5.1","text":"Issue #361 12345678910111213141516171819protocol Task {}struct Build: Task {}struct Test: Task {}@_functionBuilderpublic struct TaskBuilder { public static func buildBlock(_ tasks: Task...) -&gt; [Task] { tasks }}public func run(@TaskBuilder builder: () -&gt; [Task]) { MyManager.run(tasks: builder())}public func run(@TaskBuilder builder: () -&gt; Task) { MyManager.run(tasks: [builder()])} 1234run { Build() Test()} Read more The Swift 5.1 features that power SwiftUI‚Äôs API","link":"/blog/How-to-use-function-builder-in-Swift-5.1/"},{"title":"How to use  iTMSTransporter","text":"Issue #563 Transporter app Transporter Now Available on the Mac App Store The new Transporter app for macOS makes it easy to upload your binary to App Store Connect. To get started, download Transporter from the Mac App Store, and simply drag and drop your binaries into the upload window. With Transporter you can https://stackoverflow.com/questions/8094317/where-to-find-application-loader-app-in-mac/40419328 12345678As of Xcode 11, &quot;Application Loader is no longer included with Xcode&quot;, per the Xcode 11 Release Notes:Xcode supports uploading apps from the Organizer window or from the command line with xcodebuild or xcrun altool. Application Loader is no longer included with Xcode. (29008875)The Xcode Help page, Upload an app to App Store Connect, explains how to upload from the Xcode Archives Organizer.TransporterIn October 2019, Apple announced the Transporter app for macOS, now available in the Mac App Store. Find path1234567891011121314151617181920212223242526public struct Transporter { var arguments: [String] = [] func run(workflow: Workflow) throws { guard Folder.directoryExists(path: \"/Applications/Transporter.app\") else { Deps.console.warn(\"You need to install Transporter\") throw PumaError.invalid } try CommandLine().runBash( workflow: workflow, program: transportPath(), arguments: arguments ) } private func transportPath() throws -&gt; String { if Folder.directoryExists(path: \"/Applications/Transporter.app\") { return \"/Applications/Transporter.app/Contents/itms/bin/iTMSTransporter\" } else if Folder.directoryExists(path: \"/Applications/Xcode.app/Contents/Applications/Application Loader.app/\") { return \"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/MacOS/itms/bin/iTMSTransporter\" } else { throw PumaError.invalid } }} Help1234567891011121314151617181920212223242526272829303132usage: iTMSTransporter [-help &lt;arg&gt; | -info | -m &lt;arg&gt; | -version] [-o &lt;arg&gt;] [-v &lt;arg&gt;] [-WONoPause &lt;arg&gt;] [-Xmx4096m]iTMSTransporter : iTunes Store Transporter 2.0.0 -help &lt;arg&gt; Show this help. If a mode value is specified, show help specific to that mode. -info The -info option should be used by itself and returns the copyright notice and acknowledgements. -m &lt;arg&gt; The -m option specifies the tool's mode. The valid values are: verify, upload, provider, diagnostic, lookupMetadata, createArtist, lookupArtist, status, statusAll, createMetadataTicket, queryTickets, generateSchema, transferTest, downloadMetadataGuides, listReports, requestReport -o &lt;arg&gt; The -o option specifies the directory and filename you want to use to log output information. By default, Transporter logs output information to standard out. If you specify a filename, Transporter logs the output to the specified file, as well as to standard out. -v &lt;arg&gt; The -v option specifies the level of logging. The five values are: off, detailed, informational, critical, eXtreme. -version The -version option should be used by itself and returns the version of the tool. -WONoPause &lt;arg&gt; The -WONoPause option is only valid on Windows and its value can be 'true' or 'false'. If an error occurs during script execution, the process idles because the message 'Press any key...' is displayed on the console and the system awaits a keypress. To avoid this behavior, set this property to true -Xmx4096m Specifies that you want to change the Java Virtual Machine's (JVM) allocated memory by increasing the JVM heap size. By default, Transporter uses a 2048MB heap size. You can use the -Xmx4096m option to specify a 4-gigabyte (GB) heap size. Apple recommends, if needed, increasing the heap size to 4096MB by specifying the -Xmx4096m (or -Xmx4g) option and adjusting as needed. Read more https://bou.io/UploadingScreenshotsWithITMSTransporter.html https://itunespartner.apple.com/en/movies/faq/Transporter_Getting%20Set%20Up https://gist.github.com/michaeltyson/0e82e24e5a3a7a42a6ad https://medium.com/ynap-tech/using-apples-itms-transporter-api-to-upload-builds-to-testflight-60dba18b07bc","link":"/blog/How-to-use-iTMSTransporter/"},{"title":"How to use new APIs  in iOS","text":"Issue #313 iOS 10‚ûïUserNotifications Push user-facing notifications to the user‚Äôs device from a server, or generate them locally from your app. ‚ûïUIViewPropertyAnimator A class that animates changes to views and allows the dynamic modification of those animations. ‚ûïNSPersistentContainer A container that encapsulates the Core Data stack in your app. ‚ûïUIFeedbackGenerator The abstract superclass for all feedback generators. iOS 10.3‚ûïSKStoreReviewController An object that controls the process of requesting App Store ratings and reviews from users. iOS 11‚ûïsafeAreaLayoutGuide The layout guide representing the portion of your view that is unobscured by bars and other content. ‚ûïCoreML Integrate machine learning models into your app. ‚ûïVision Apply computer vision algorithms to perform a variety of tasks on input images and video. ‚ûïARKit Integrate iOS device camera and motion features to produce augmented reality experiences in your app or game. ‚ûïDeviceCheck Access per-device, per-developer data that your associated server can use in its business logic. ‚ûïDrag and Drop Bring drag and drop to your app by using interaction APIs with your views. ‚ûïCoreNFC Detect NFC tags and read messages that contain NDEF data. ‚ûïmaskedCorners Animatable corner radius iOS 12‚ûïAuthenticationServices Make it easy for users to log into apps and services. iOS 13 https://www.hackingwithswift.com/articles/193/whats-new-in-ios-13 https://onesignal.com/blog/ios-13-introduces-4-breaking-changes-to-notifications/ ‚ûïSwiftUI Declare the user interface and behavior for your app on every platform. ‚ûïCombine Customize handling of asynchronous events by combining event-processing operators. ‚ûïCryptoKit Perform cryptographic operations securely and efficiently. ‚ûïUISearchTextField Expose UISearchTextField on UISearchBar ‚ûïMetricKit ‚ûïCoreSVG https://github.com/SDWebImage/SDWebImageSVGCoder","link":"/blog/How-to-use-new-APIs-in-iOS/"},{"title":"How to use lessThan and greaterThan in Auto Layout in iOS","text":"Issue #386 When it comes to right and bottom side, we should use negative values, and use lessThan, as it means less than a negative value","link":"/blog/How-to-use-lessThan-and-greaterThan-in-Auto-Layout-in-iOS/"},{"title":"How to use index in SwiftUI list","text":"Issue #515 Use enumerated and id: \\.element.name 1234567891011121314151617181920struct CountriesView: View { let countries: [Country] var body: some View { let withIndex = countries.enumerated().map({ $0 }) return List(withIndex, id: \\.element.name) { index, country in NavigationLink( destination: CountryView(country: country), label: { VStack(alignment: .leading) { Text(country.name) .styleMultiline() } .paddingVertically() } ) } }}","link":"/blog/How-to-use-index-in-SwiftUI-list/"},{"title":"How to use media query in CSS","text":"Issue #314 12345678910111213141516&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;@media only screen and (max-width: 600px) { div.container { margin: 0 auto; width: 70%; margin-top: 60%; } }body { background-image: url(\"../images/wallpaper.png\"); background-position: top right; background-attachment: fixed; background-size: cover;}","link":"/blog/How-to-use-media-query-in-CSS/"},{"title":"How to use method from protocol extension in Swift","text":"Issue #524 1234567891011121314151617181920/// Any task that uses command linepublic protocol UsesCommandLine: AnyObject { var program: String { get } var arguments: Set&lt;String&gt; { get set }}public extension UsesCommandLine { func run() throws { let command = \"\\(program) \\(arguments.joined(separator: \" \"))\" Log.command(command) _ = try Process().run(command: command) }}class Build: UsesCommandLine { public func run() throws { arguments.insert(\"build\") try (self as UsesCommandLine).run() }}","link":"/blog/How-to-use-method-from-protocol-extension-in-Swift/"},{"title":"How to use point in dp programmatically in Android","text":"Issue #382 12345678910import android.content.Contextfun Int.toDp(context: Context?): Int { if (context != null) { val scale = context.resources.displayMetrics.density return (this.toFloat() * scale + 0.5f).toInt() } else { return 0 }} 12val set = ConstraintSet()set.setMargin(imageView.id, ConstraintSet.RIGHT, rightMargin.toDp(150)) Read more https://stackoverflow.com/questions/5255184/android-and-setting-width-and-height-programmatically-in-dp-units","link":"/blog/How-to-use-point-in-dp-programmatically-in-Android/"},{"title":"How to use objectWillChange in Combine","text":"Issue #513 A publisher that emits before the object has changed Use workaround DispatchQueue to wait another run loop to access newValue 123456789.onReceive(store.objectWillChange, perform: { DispatchQueue.main.async { self.reload() }})func reload() { self.isFavorite = store.isFavorite(country: country)} Read more https://forums.swift.org/t/combine-observableobject-in-uikit/28433 https://twitter.com/luka_bernardi/status/1155944329363349504","link":"/blog/How-to-use-objectWillChange-in-Combine/"},{"title":"How to use precondition and assert in Swift","text":"Issue #553 Read Swift asserts - the missing manual 1234567 debug release releasefunction -Onone -O -Ouncheckedassert() YES NO NOassertionFailure() YES NO NO**precondition() YES YES NOpreconditionFailure() YES YES YES**fatalError()* YES YES YES And from Interesting discussions on Swift Evolution ‚Äì assert: checking your own code for internal errors ‚Äì precondition: for checking that your clients have given you valid arguments. Read more https://stackoverflow.com/a/34379407/1418457","link":"/blog/How-to-use-precondition-and-assert-in-Swift/"},{"title":"How to use provisional notification in iOS  12","text":"Issue #456 From WWDC 2018 What‚Äôs New in User Notifications Instead, the notifications from your app will automatically start getting delivered. Notifications that are delivered with provisional authorization will have a prompt like this on the notification itself. And this will help the users decide after having received a few notifications whether they want to keep getting these notifications or whether they want to turn them off It‚Äôs an automatic trial of the notifications from your app to help your users make a more informed decision about whether they want these notifications. 123notificationCenter.requestAuthorization( options:[.badge, .sound, .alert, .provisional]) { } From http://info.localytics.com/blog/ios-12-brings-new-power-to-push-notifications Provisional Authorization takes advantage of another new feature in iOS 12: the ability for messages to be ‚Äúdelivered quietly.‚Äù When a notification is delivered quietly, it can only be seen in the iOS Notification Center, which the user accesses by swiping down from the top of their phone. They don‚Äôt appear as banners or show up on the lock screen. As you might have guessed, quiet notifications also don‚Äôt make a sound. If a user taps the ‚ÄúKeep‚Äù button, they can decide whether they want your app‚Äôs notifications to start getting delivered prominently (i.e. fully opt-in to push notifications) or continue to receive them quietly (i.e. pushes continue to get sent directly to the Notification Center). The intent of Provisional Authorization is to give users a trial run with your app‚Äôs notifications. Apple created Provisional Authorization because it realized that it‚Äôs impossible for users to make an informed choice about whether or not they want to receive push notifications from an app until they‚Äôve seen what kinds of messages the app is going to send them.","link":"/blog/How-to-use-provisional-notification-in-iOS-12/"},{"title":"How to use moveItem in NSCollectionView in AppKit","text":"Issue #332 From moveItem(at:to:) Moves an item from one location to another in the collection view. After rearranging items in your data source object, use this method to synchronize those changes with the collection view. Calling this method lets the collection view know that it must update its internal data structures and possibly update its visual appearance. You can move the item to a different section or to a new location in the same section. The collection view updates the layout as needed to account for the move, animating cells into position in response. When inserting or deleting multiple sections and items, you can animate all of your changes at once using the performBatchUpdates(_:completionHandler:) method. 123456notes.swapAt(index, 0)collectionView.animator().moveItem( at: index.toIndexPath(), to: 0.toIndexPath()) There may be unknown reasons or bug that make other cells stay in incorrect state. The fix is to reload the rest cells 12let set = Set((1..&lt;notes.count).map({ $0.toIndexPath() }))collectionView.reloadItems(at: set)","link":"/blog/How-to-use-moveItem-in-NSCollectionView-in-AppKit/"},{"title":"How to use protocol in List in SwiftUI","text":"Issue #446 Suppose we have Service protocol, and want to use in List 123protocol Service { var name: String { get }} 123456789101112131415struct MainView: View { let services = [ Car() Plane() ] var body: some View { List(services) { service in HStack { Image(service.name) Text(service.name) } } }} This is not possible because item in List needs to conform to Identifiable Protocol type ‚ÄòService‚Äô cannot conform to ‚ÄòIdentifiable‚Äô because only concrete types can conform to protocols Type eraserIn the same way that SwiftUI uses type eraser, for example AnyView, we can introduce AnyService to work around this 1234567var body: some View { if useImage { return AnyView(Image(\"my image\")) } else { return AnyView(Text(\"my text\")) }} Make AnyService conform to Identifiable 123456789struct AnyService: Identifiable { let id: String let service: Service init(_ service: Service) { self.service = service self.id = service.name }} Then in our View, we just need to declare services wrapped inside AnyService 123456789101112131415struct MainView: View { let services = [ AnyService(Car()), AnyService(Plane()) ] var body: some View { List(services) { anyService in HStack { Image(anyService.service.name) Text(anyService.service.name) } } }} A bit refactoring, we can just declare normal services and map them 123456789101112131415struct MainView: View { let services: [Service] = [ Car(), Plane() ] var body: some View { List(services.map({ AnyService($0 })) { anyService in HStack { Image(anyService.service.name) Text(anyService.service.name) } } }}","link":"/blog/How-to-use-protocol-in-List-in-SwiftUI/"},{"title":"How to use safeAreaInsets in iOS","text":"Issue #561 Read more https://medium.com/rosberryapps/ios-safe-area-ca10e919526f https://blog.smartnsoft.com/layout-guide-margins-insets-and-safe-area-demystified-on-ios-10-11-d6e7246d7cb8 https://www.matrixprojects.net/p/safe-area-insets/ https://stackoverflow.com/questions/37796884/on-ios-what-are-the-differences-between-margins-edge-insets-content-insets-a/47614397","link":"/blog/How-to-use-safeAreaInsets-in-iOS/"},{"title":"How to use regular expression in Swift","text":"Issue #551 Find matches12345678910111213141516171819202122232425import Foundationpublic extension String { func matches(pattern: String) throws -&gt; [String] { let regex = try NSRegularExpression(pattern: pattern) let results = regex.matches(in: self, options: [], range: NSRange(self.startIndex..., in: self)) return results.compactMap({ result in if let range = Range(result.range, in: self) { return String(self[range]) } else { return nil } }) } func hasPattern(pattern: String) throws -&gt; Bool { return try !matches(pattern: pattern).isEmpty }}func testRegex() throws { let string = \"iPad Air (11.0.1) [7A5EAD29-D870-49FB-9A9B-C81079620AC9] (Simulator)\" let matches = try string.matches(pattern: #\"\\[.+\\]\"#) XCTAssertEqual(matches.first, \"[7A5EAD29-D870-49FB-9A9B-C81079620AC9]\")} Range and NSRange12let string: Stringlet nsRange: NSRange = NSRange(string.startIndex..., in: string) 1234let string: Stringlet nsRange: NSRangelet range: Range = Range(nsRange, in: string)let substring: Substring = string[range] Common expressionVersion123#\"\\((\\d+\\.)?(\\d+\\.)?(\\*|\\d+)\\)\"#(11.0.1) Read more NSHipster Swift Regular Expression How to convert an NSRange to a Swift string index Regex 101 How to capture Regex group values in Swift","link":"/blog/How-to-use-regular-expression-in-Swift/"},{"title":"How to use remote theme for GitHub Pages","text":"Issue #248 Visit https://github.com/onmyway133/onmyway133.github.io https://github.blog/2017-11-29-use-any-theme-with-github-pages/ Starting today, you can use any of the hundreds of community-curated themes on GitHub.com. To build your site with any public, GitHub-hosted theme, add the following to your site‚Äôs _config.yml file: 1remote_theme: owner/name Browse themes https://github.com/topics/jekyll-themeExample config file with navigation https://github.com/daviddarnes/alembic/blob/master/_config.yml Link to a new pageEach page must have a description. Link must point to generated html file 1Apps: /apps.html Do not specify layout: default to keep overall theme 1234---title: Another Pagedescription:---","link":"/blog/How-to-use-remote-theme-for-GitHub-Pages/"},{"title":"How to use marked in WKWebView in AppKit","text":"Issue #429 Use https://github.com/markedjs/marked 123456789101112131415&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"/&gt; &lt;title&gt;Marked in the browser&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"content\"&gt;&lt;/div&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"&gt;&lt;/script&gt; &lt;script&gt; document.getElementById('content').innerHTML = marked(`# Marked in the browser\\n\\nRendered by **marked**.`); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Should use back tick instead of ' to deal with multiline string, and escape back tick 1234let markdown = markdown.replacingOccurrences(of: \"`\", with: \"\\\\`\")marked(`\\(markdown)`);webView.loadHTMLString(string, baseURL: nil) For WKWebView to load even local content, need to enable Outgoing connections, and maybe Incoming connections in Sandbox","link":"/blog/How-to-use-marked-in-WKWebView-in-AppKit/"},{"title":"How to use shared AppGroup UserDefaults in macOS and Xcode extension","text":"Issue #201 Go to both app and extension target, under Capabilities, enable AppGroup Specify $(TeamIdentifierPrefix)group.com.onmyway133.MyApp $(TeamIdentifierPrefix) will expand to something like T78DK947F3., with . Then using is like a normal UserDefaults 1234let defaults = UserDefaults(suiteName: \"T78DK947F3 .group.com.onmyway133.MyApp\")defaults?.set(true, forKey: \"showOptions\")defaults?.synchronize()","link":"/blog/How-to-use-shared-AppGroup-UserDefaults-in-macOS-and-Xcode-extension/"},{"title":"How to use standalone UINavigationBar in iOS","text":"Issue #144 There are times we want the same UIViewController to look good when it‚Äôs presented modally or pushed from UINavigationController stack. Take a look at BarcodeScanner and the PR https://github.com/hyperoslo/BarcodeScanner/pull/82 When it is presented, we need a header view so that we can show a title and a close button. We can create a custom HeaderView that inherits from UIView or either embed it in a UINavigationController before presenting. If we go with the controller being embedded in UINavigationController approach, it will collide with the other UINavigationController when it is pushed. If we go with custom HeaderView, then we need to layout the view so that it looks good on both portrait and landscape, and on iPhone X that as safeAreaLayoutGuide. Using standalone UINavigationBarSince UINavigationController uses UINavigationBar under the hood, which uses UINavigationItem info to present the content. We can imitate this behavior by using a standalone UINavigationBar. See Adding Content to a Standalone Navigation Bar In the vast majority of scenarios you will use a navigation bar as part of a navigation controller. However, there are situations for which you might want to use the navigation bar UI and implement your own approach to content navigation. In these situations, you can use a standalone navigation bar. A navigation bar manages a stack of UINavigationItem objects The beauty is that our standalone UINavigationBar and that of UINavigationController are the same, use the same UINavigationItem and no manual layout are needed Declare UINavigationItemWe can just set properties like we did with a normal navigationItem 123let standaloneItem = UINavigationItem()standaloneItem.leftBarButtonItem = UIBarButtonItem(customView: closeButton)standaloneItem.titleView = UILabel() Adding UINavigationBarCustomise your bar, then declare layout constraints. You only need to pin left, right, and top. Note that you need to implement UINavigationBarDelegate to attach bar to status bar, so that it appears good on iPhone X too 123456789101112131415let navigationBar = UINavigationBar()navigationBar.isTranslucent = falsenavigationBar.delegate = selfnavigationBar.backgroundColor = .whitenavigationBar.items = [standaloneItem] navigationBar.translatesAutoresizingMaskIntoConstraints = falsenavigationBar.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = truenavigationBar.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true if #available(iOS 11, *) { navigationBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor).isActive = true} else { navigationBar.topAnchor.constraint(equalTo: view.topAnchor).isActive = true} 12345extension BarcodeScannerController: UINavigationBarDelegate { public func position(for bar: UIBarPositioning) -&gt; UIBarPosition { return .topAttached }} Inside UINavigationControllerWhen this UIViewController is pushed from a UINavigationController stack, we just need to hide our standalone navigationBar. If we prefer the default back button, we don‚Äôt need to set leftBarButtonItem On iOS 10, you need to call sizeToFit for any items in UINavigationItem for it to get actual size 123456789101112override func viewWillAppear(_ animated: Bool) { super.viewWillAppear(animated) if navigationController != nil { let label = HeaderElement.makeLabel() label.sizeToFit() navigationItem.titleView = label navigationBar.isHidden = true } else { navigationBar.isHidden = false }}","link":"/blog/How-to-use-standalone-UINavigationBar-in-iOS/"},{"title":"How to use safeAreaLayoutGuide in iOS 10","text":"Issue #98 The safeAreaLayoutGuide was introduced in iOS 11. And it is advised to stop using topLayoutGuide bottomLayoutGuide as these are deprecated. To use safeAreaLayoutGuide, you need to do iOS version check 12345if #available(iOS 11.0, *) { headerView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20)} else { headerView.topAnchor.constraint(equalTo: view.topAnchor, constant: 20)} Maybe we can introduce a common property that can be used across many iOS versions, let‚Äôs call it compatibleSafeAreaLayoutGuide 1234567891011121314151617181920212223242526272829303132333435363738394041424344extension UIView { /// Use safeAreaLayoutGuide on iOS 11+, otherwise default to dummy layout guide var compatibleSafeAreaLayoutGuide: UILayoutGuide { if #available(iOS 11, *) { return safeAreaLayoutGuide } else { if let layoutGuide = self.associatedLayoutGuide { return layoutGuide } else { let layoutGuide = UILayoutGuide() Constraint.on( layoutGuide.topAnchor.constraint(equalTo: topAnchor), layoutGuide.bottomAnchor.constraint(equalTo: bottomAnchor), layoutGuide.leftAnchor.constraint(equalTo: leftAnchor), layoutGuide.rightAnchor.constraint(equalTo: rightAnchor) ) self.associatedLayoutGuide = layoutGuide return layoutGuide } } } private struct AssociatedKeys { static var layoutGuide = \"layoutGuide\" } fileprivate var associatedLayoutGuide: UILayoutGuide? { get { return objc_getAssociatedObject(self, &amp;AssociatedKeys.layoutGuide) as? UILayoutGuide } set { if let newValue = newValue { objc_setAssociatedObject( self, &amp;AssociatedKeys.layoutGuide, newValue as UILayoutGuide?, .OBJC_ASSOCIATION_RETAIN_NONATOMIC ) } } }} This way we can simply do 1headerView.topAnchor.constraint(equalTo: view.compatibleSafeAreaLayoutGuide.topAnchor, constant: 20) Read more https://useyourloaf.com/blog/safe-area-layout-guide/","link":"/blog/How-to-use-safeAreaLayoutGuide-in-iOS-10/"},{"title":"How to use test environment variables with shared scheme in Xcode","text":"Issue #557 Use ProcessInfo to access environment variables. 1ProcessInfo().environment[\"username\"] Duplicate main shared scheme TestApp to TestAppWithCredentials, but don‚Äôt share this TestAppWithCredentials scheme","link":"/blog/How-to-use-test-environment-variables-with-shared-scheme-in-Xcode/"},{"title":"How to use throttle and debounce in RxSwift","text":"Issue #426 throttlehttps://rxmarbles.com/#throttle Returns an Observable that emits the first and the latest item emitted by the source Observable during sequential time windows of a specified duration.This operator makes sure that no two elements are emitted in less then dueTime. 1.throttle(.milliseconds(500), scheduler: MainScheduler.instance) In a time window, only the first item gets emitted. üí° In other words, in a time window, take first and discard following. For example, when failure, we show error message but don‚Äôt want to show error messages consecutively. We can use throttle to discard consecutive errors. 123viewModel.fetchBooksFail .observeOn(MainScheduler.instance) .throttle(.seconds(2), scheduler: MainScheduler.instance) debouncehttps://rxmarbles.com/#debounce Ignores elements from an observable sequence which are followed by another element within a specified relative time duration, using the specified scheduler to run throttling timers. 1.debounce(.milliseconds(500), scheduler: MainScheduler.instance) If an element is about to get emitted, wait for a time window to see if there are other elements emitted. If yes, start the waiting again. üí° In other words, in a time window, wait and take last For example, when receiving data, we may need to wait for the final data if there are many data events emitted consecutively 123viewModel.fetchBooks .filter({ !$0.isEmpty }) .debounce(.milliseconds(500), scheduler: MainScheduler.instance)","link":"/blog/How-to-use-throttle-and-debounce-in-RxSwift/"},{"title":"How to use test scheme in Xcode","text":"Issue #541 Scheme actionA scheme, either for app or test, consists of actions RunUsed when Cmd+R. The executable specifies which app target to run TestUsed when Cmd+U. The tests specifies which test target to run Test target recognises app targets via Test application and target dependency When specify test scheme, we are specifying Test action in test scheme, which builds test target, and by dependency, builds app target, then run test action in test scheme, which is the UITest 1xcodebuild -project TestApp.xcodeproj -scheme TestAppUITests test Scheme build settingsInspect build settings from test scheme does not work, need to specify app scheme 1xcodebuild -workspace Animal.xcworkspace -scheme CatUITests -showBuildSettings","link":"/blog/How-to-use-test-scheme-in-Xcode/"},{"title":"How to use visual effect view in NSWindow","text":"Issue #610 Set NSVisualEffectView as contentView of NSWindow, and our main view as subview of it. Remember to set frame or autoresizing mask as non-direct content view does not get full size as the window 1234567891011121314151617181920212223let mainView = MainView() .environment(\\.managedObjectContext, coreDataManager.container.viewContext)window = NSWindow( contentRect: .zero, styleMask: [.fullSizeContentView], backing: .buffered, defer: false)window.titlebarAppearsTransparent = truewindow.center()window.level = .statusBarwindow.setFrameAutosaveName(\"MyApp\")let visualEffect = NSVisualEffectView()visualEffect.blendingMode = .behindWindowvisualEffect.state = .activevisualEffect.material = .appearanceBasedlet hosting = NSHostingView(rootView: mainView)window.contentView = visualEffectvisualEffect.addSubview(hosting)hosting.autoresizingMask = [.width, .height]","link":"/blog/How-to-use-visual-effect-view-in-NSWindow/"},{"title":"How to use webpack to bundle html css js","text":"Issue #645 Install webpack123npm initnpm install webpack webpack-cli --save-devvim webpack.config.js 1234567module.exports = { entry: &quot;./index.js&quot;, mode: 'production', output: { filename: &quot;./index.js&quot; }} To invoke webpack, run below. Your output is dist/index.js 1npx webpack Minify js1npm install babel-minify-webpack-plugin --save-dev Minify html1npm install html-webpack-plugin --save-dev 1234567891011121314151617181920const MinifyPlugin = require('babel-minify-webpack-plugin');const HtmlWebpackPlugin = require('html-webpack-plugin')module.exports = { entry: &quot;./index.js&quot;, mode: 'production', output: { filename: &quot;./index.js&quot; }, plugins: [ new MinifyPlugin(), new HtmlWebpackPlugin({ template: 'index.html', filename: 'index.html', minify: { collapseWhitespace: true } }) ]} Minify cssTBD Copy filesCopy files from dist to public folder so we can use 1npm install copyfiles -g Then in package.json 123&quot;scripts&quot;: { &quot;copy&quot;: &quot;copyfiles -u 1 dist/* ../apps/ &amp;&amp; copyfiles *.css ../apps&quot;} Then run npm run copy","link":"/blog/How-to-use-webpack-to-bundle-html-css-js/"},{"title":"How to weak link Combine in macOS 10.14 and iOS 12","text":"Issue #593 #if canImport(Combine) is not enough, need to specify in Other Linker Flags 1OTHER_LDFLAGS = -weak_framework Combine Read more https://stackoverflow.com/questions/57168931/optional-linking-for-swift-combine-framework-in-xcode-11","link":"/blog/How-to-weak-link-Combine-in-macOS-10.14-and-iOS-12/"},{"title":"How to use type coersion in Javascript","text":"Issue #391 People who make fun of Javascript probably don‚Äôt understand implicit type coersion and when to use triple equal. Javascript is very unexpected, but when we work with this language, we need to be aware. Coercion‚ÄìAutomatically changing a value from one type to another. If x is Number and y is String, return x == ToNumber(y) If x is String or Number and y is Object, return x == ToPrimitive(y) Empty array becomes empty string Read more https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/ https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/","link":"/blog/How-to-use-type-coersion-in-Javascript/"},{"title":"How to use passed launch arguments in UITests","text":"Issue #537 Specify launch argumentsIn xcodebuild, specify launch arguments. You can specify this under Launch Arguments in Run action of the app scheme or UITest scheme 1-AppleLanguages (jp) -AppleLocale (jp_JP) 12345678910111213(lldb) po ProcessInfo().arguments‚ñø 11 elements - 0 : \"/Users/khoa/Library/Developer/CoreSimulator/Devices/561F2B45-26B2-4897-98C4-8A917AEB48D2/data/Containers/Bundle/Application/436E0A43-8323-4F53-BBE0-6F75F674916F/TestAppUITests-Runner.app/TestAppUITests-Runner\" - 1 : \"-AppleLanguages\" - 2 : \"(ja)\" - 3 : \"-AppleTextDirection\" - 4 : \"NO\" - 5 : \"-AppleLocale\" - 6 : \"ja_JP\" - 7 : \"-NSTreatUnknownArgumentsAsOpen\" - 8 : \"NO\" - 9 : \"-ApplePersistenceIgnoreState\" - 10 : \"YES\" In UITests, pass launch arguments from UITest scheme to UITest application 1app.launchArguments += ProcessInfo().arguments Environments1ProcessInfo().environment // [String: String]","link":"/blog/How-to-use-passed-launch-arguments-in-UITests/"},{"title":"How to work with SceneDelegate in iOS 12","text":"Issue #580 Eventsopen url https://stackoverflow.com/questions/58624786/method-applicationopenurloptions-is-not-called Implement scene(_:openURLContexts:) in your scene delegate. If the URL launches your app, you will get scene(_:willConnectTo:options:) instead and it‚Äôs in the options. life cycle https://stackoverflow.com/questions/56508764/app-delegate-methods-arent-being-called-in-ios-13 Here‚Äôs how it works: If you have an ‚ÄúApplication Scene Manifest‚Äù in your Info.plist and your app delegate has a configurationForConnectingSceneSession method, the UIApplication won‚Äôt send background and foreground lifecycle messages to your app delegate. That means the code in these methods won‚Äôt run: applicationDidBecomeActiveapplicationWillResignActiveapplicationDidEnterBackgroundapplicationWillEnterForegroundThe app delegate will still receive the willFinishLaunchingWithOptions: and didFinishLaunchingWithOptions: method calls so any code in those methods will work as before. UIApplication notificationsNotifications still trigger in iOS 13 if adopting SceneDelegate 12UIApplication.didBecomeActiveNotificationUIApplication.willResignActiveNotification https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground Use foreground transitions to prepare your app‚Äôs UI to appear onscreen. An app‚Äôs transition to the foreground is usually in response to a user action. For example, when the user taps the app‚Äôs icon, the system launches the app and brings it to the foreground. Use a foreground transition to update your app‚Äôs UI, acquire resources, and start the services you need to handle user requests. All state transitions result in UIKit sending notifications to the appropriate delegate object: In iOS 13 and later‚ÄîA UISceneDelegate object.In iOS 12 and earlier‚ÄîThe UIApplicationDelegate object. You can support both types of delegate objects, but UIKit always uses scene delegate objects when they are available. UIKit notifies only the scene delegate associated with the specific scene that is entering the foreground. For information about how to configure scene support, see Specifying the Scenes Your App Supports. keyWindowShow most recent activeUIWindow 1UIApplication.shared.keyWindow This property holds the UIWindow object in the windows array that is most recently sent the makeKeyAndVisible() message. AppDelegate vs SceneDelegateGet sceneDelegate from AppDelegate1UIApplication.shared.openSessions.first?.scene?.delegate order1234SceneDelegate.sceneDidBecomeActiveUIApplication.didBecomeActiveNotificationSceneDelegate.sceneWillResignActiveUIApplication.willResignActiveNotification Read more https://www.donnywals.com/add-ios-12-support-to-a-new-xcode-11-project/ https://www.donnywals.com/adding-support-for-multiple-windows-to-your-ipados-app/ https://www.donnywals.com/understanding-the-ios-13-scene-delegate/","link":"/blog/How-to-work-with-SceneDelegate-in-iOS-12/"},{"title":"How to use react-native link and CocoaPods","text":"Issue #476 React Native comes with a default React library, and most CocoaPods libraries for React Native has React as a dependency pod, which causes the conflict https://github.com/react-native-community/react-native-svg/issues/621 https://stackoverflow.com/questions/45296994/difference-between-react-native-link-and-cocoapods https://github.com/onmyway133/notes/issues/486 https://github.com/facebook/react-native/pull/23563","link":"/blog/How-to-use-react-native-link-and-CocoaPods/"},{"title":"How to workaround URLSession issue in watchOS 6.1.1","text":"Issue #577 https://stackoverflow.com/questions/59724731/class-avassetdownloadtask-is-implemented-in-both-cfnetwork-and-avfoundation 123objc[45250]: Class AVAssetDownloadTask is implemented in both /Applications/Xcode.app/Contents/Developer/Platforms/WatchOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/watchOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork (0x4ddd0ec) and /Applications/Xcode.app/Contents/Developer/Platforms/WatchOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/watchOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/AVFoundation.framework/AVFoundation (0x16aea494). One of the two will be used. Which one is undefined.objc[45250]: Class AVAssetDownloadURLSession is implemented in both /Applications/Xcode.app/Contents/Developer/Platforms/WatchOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/watchOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CFNetwork.framework/CFNetwork (0x4dddd44) and /Applications/Xcode.app/Contents/Developer/Platforms/WatchOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/watchOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/AVFoundation.framework/AVFoundation (0x16aea4bc). One of the two will be used. Which one is undefined. Then URLSession stops working. 12020-01-13 22:50:12.430920+0100 MyAppWatch WatchKit Extension[45250:2099229] Task &lt;3CECDE81-59B9-4EDE-A4ED-1BA173646037&gt;.&lt;1&gt; finished with error [-999] Error Domain=NSURLErrorDomain Code=-999 &quot;cancelled&quot; UserInfo={NSErrorFailingURLKey=https://myapp.com/def.json, NSErrorFailingURLStringKey=https://myapp.com/def.json, NSLocalizedDescription=cancelled} The workaround is to remove Combine based API, and use completion block. Instead of dataTaskPublisher which hangs indefinitely, no sink is reported 12345678910111213141516URLSession.shared.dataTaskPublisher(for: url).map({ $0.data }).decode(type: T.self, decoder: JSONDecoder()).eraseToAnyPublisher().receive(on: RunLoop.main).sink(receiveCompletion: { completionStatus in switch completionStatus { case .finished: break case .failure(let error): completion(.failure(error)) }}, receiveValue: { value in completion(.success(value))}) just use normal 123456789let task = URLSession.shared.dataTask(with: url, completionHandler: { data, response, error in if let data = data, let model = try? JSONDecoder().decode(T.self, from: data) { completion(.success(model)) } else { completion(.failure(error ?? ServiceError.noInternet)) }})task.resume()","link":"/blog/How-to-workaround-URLSession-issue-in-watchOS-6.1.1/"},{"title":"How to work around app damaged warning in macOS","text":"Issue #238 ‚ÄúApp‚Äù is damaged and can‚Äôt be opened. You should move it to the Trash. üëâ Disable gate keeper 12sudo spctl --master-disablespctl --status Current workaround is to remove Launch At Login handling code.","link":"/blog/How-to-work-around-app-damaged-warning-in-macOS/"},{"title":"How to zoom in double in MapKit","text":"Issue #183 123456789101112func zoomInDouble(coordinate: CLLocationCoordinate2D) { let region = mapView.region let zoomInRegion = MKCoordinateRegion( center: coordinate, span: MKCoordinateSpan( latitudeDelta: region.span.latitudeDelta * 0.5, longitudeDelta: region.span.longitudeDelta * 0.5 ) ) mapView.setRegion(zoomInRegion, animated: true)}","link":"/blog/How-to-zoom-in-double-in-MapKit/"},{"title":"How to work with git","text":"Issue #531 Expand commits in Sublime Merge1234{ &quot;expand_merge_commits_by_default&quot;: true, &quot;translate_tabs_to_spaces&quot;: true} local hooks .git/hooks vs hooksPath1git config core.hooksPath ~/.git-templates/hooks Only hooksPath gets run. Removing hooksPath make local hooks work https://stackoverflow.com/questions/39332407/git-hooks-applying-git-config-core-hookspath Use git templateshttps://coderwall.com/p/jp7d5q/create-a-global-git-commit-hook Define alias in zshrc123vim ~/.zshrcalias check=&quot;~/.git-templates/hooks/check.sh&quot;source ~/.zshrc pre-commithttps://itnext.io/using-git-hooks-to-enforce-branch-naming-policy-ffd81fa01e5e 1(feature|fix|refactor)\\/[a-z0-9-]+$","link":"/blog/How-to-work-with-git/"},{"title":"How to zoom to fit many coordinates in Google Maps in iOS","text":"Issue #463 12345func zoom(location1: CLLocation, location2: CLLocation) { let bounds = GMSCoordinateBounds(coordinate: location1.coordinate, coordinate: location2.coordinate) let update = GMSCameraUpdate.fit(bounds, withPadding: 16) mapView.animate(with: update)}","link":"/blog/How-to-zoom-to-fit-many-coordinates-in-Google-Maps-in-iOS/"},{"title":"Ikigai","text":"Issue #79 I really like the concept of Ikigai Ikigai (Áîü„ÅçÁî≤Êñê, pronounced [iki…°ai]) is a Japanese concept that means ‚Äúa reason for being.‚Äù It is similar to the French phrase Raison d‚Äô√™tre. Everyone, according to Japanese culture, has an ikigai. Finding it requires a deep and often lengthy search of self. Such a search is important to the cultural belief that discovering one‚Äôs ikigai brings satisfaction and meaning to life.[1] The term ikigai compounds two Japanese words: iki (wikt:Áîü„Åç) meaning ‚Äúlife; alive‚Äù and kai (Áî≤Êñê) ‚Äú(an) effect; (a) result; (a) fruit; (a) worth; (a) use; (a) benefit; (no, little) avail‚Äù (sequentially voiced as gai) ‚Äúa reason for living [being alive]; a meaning for [to] life; what [something that] makes life worth living; a raison d‚Äôetre‚Äù.[3] About college degree https://www.youtube.com/watch?v=e8QY0NDWqzk What you learn is more important Surrounded with smart people Safe way College degree is nothing. But without that, you‚Äôre no thing. Visa Read more Dan Buettnet - How to live to be 100+","link":"/blog/Ikigai/"},{"title":"Indenting Swift code","text":"Issue #93 Hi, here is how I indent my code. Let me know what you think üòâ Using 2 spaces indentationWhen possible, configure your editor to use 2 spaces for tab size. You will love it ‚ù§Ô∏è Move first parameter to new lineIf there are many parameters, move the first parameter to a new line, and align the other parameters. Remember that the last parenthesis ) should align to the function call 1234567let event = NSAppleEventDescriptor( eventClass: UInt32(kASAppleScriptSuite), eventID: UInt32(kASSubroutineEvent), targetDescriptor: target, returnID: Int16(kAutoGenerateReturnID), transactionID: Int32(kAnyTransactionID)) You can do the same for function declaration 123456func collectionView( _ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -&gt; UICollectionReusableView { // your code goes here} Shouldn‚Äôt use trailing closure if there are more than 2 closuresHere is how to use UIView.animate 12345678910111213UIView.animate( withDuration: 5, delay: 5, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseIn, animations: { self.tableView.alpha = 1 }, completion: { _ in self.view.isHidden = true }) Here is how to use RxSwift subscribe 1234567891011121314friendsObservable.subscribe( onNext: { friends in }, onError: { error in }, onCompleted: { }, onDisposed: { }) Shouldn‚Äôt use trailing closure when chaining methodsAlso, the next method call should start on same line 12345678let items = [1, 2, 3, 4, 5]let results = items.map({ return String($0)}).flatMap({ return Int($0)}).filter({ return $0 &gt; 2}).sorted()","link":"/blog/Indenting-Swift-code/"},{"title":"Interesting, how did you managed to plug GitHub issues into the dev.to platform","text":"Issue #163 I‚Äôve found your post https://dev.to/onmyway133/changing-electron-app-icon and fist thought there is some static site generator which uses GitHub‚Äôs issues as a datasource. Am I right?","link":"/blog/Interesting-how-did-you-managed-to-plug-GitHub-issues-into-the-dev.to-platform/"},{"title":"It&#39;s good to have a CI","text":"Issue #101 I have Unit tests and UI tests pass on my simulator and device, locally. But when I make the build on Buddybuild, it fails with the reason Activity cannot be used after its scope has completed. People seem to have the same issue too. Taking a look at the log in Buddybuild 123456789101112131415161718192021222324252627 t = 8.89s Staging: UIStatusBarWindowt = 8.95s Staging: (CoreFoundation) Sending Updated Preferences to System CFPrefsDt = 8.95s Staging: Setup BuddybuildSDKt = 8.98s Staging: [BuddyBuildSDK] In app store - Instant Replay Disabledt = 8.98s Staging: Setting up the remote notifications for UI Tests video recordingt = 9.07s CL: CLLocationManagert = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Client] {&quot;msg&quot;:&quot;CLLocationManager&quot;, &quot;event&quot;:activity, &quot;_cmd&quot;:initWithEffectiveBundleIdentifier:bundle:, &quot;self&quot;:&quot;0x600000205140&quot;, &quot;identifier&quot;:(null), &quot;bundle&quot;:(null)}t = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Core] {&quot;msg&quot;:&quot;state transition&quot;, &quot;event&quot;:state_transition, &quot;state&quot;:LocationManager, &quot;id&quot;:&quot;0x600000205140&quot;, &quot;property&quot;:init, &quot;new&quot;:'00 00 00 00 00 00 F0 BF 00 00 00 00 00 00 F0 BF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 3F 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00'}t = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Core] {&quot;msg&quot;:&quot;state transition&quot;, &quot;event&quot;:state_transition, &quot;state&quot;:LocationManager, &quot;id&quot;:&quot;0x600000205140&quot;, &quot;property&quot;:lifecycle, &quot;old&quot;:&quot;0x0&quot;, &quot;new&quot;:&quot;0x6040000ddd50&quot;}t = 9.07s CL: _CLClientCreateWithBundleIdentifierAndPatht = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Client] {&quot;msg&quot;:&quot;_CLClientCreateWithBundleIdentifierAndPath&quot;, &quot;event&quot;:activity, &quot;effectiveBundleIdentifier&quot;:(null), &quot;effectiveBundlePath&quot;:(null)}t = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Client] {&quot;msg&quot;:&quot;client allocated&quot;, &quot;client&quot;:&quot;0x7f84c64e0990&quot;}t = 9.07s CL: _CLClientCreateConnectiont = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Client] {&quot;msg&quot;:&quot;_CLClientCreateConnection&quot;, &quot;event&quot;:activity, &quot;client&quot;:&quot;0x7f84c64e0990&quot;}t = 9.07s CL: Sending cached messages to daemont = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Client] {&quot;msg&quot;:&quot;Sending cached messages to daemon&quot;, &quot;event&quot;:activity}t = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Client] #Warning No cached registration messaget = 9.07s Staging: (CoreLocation) [com.apple.locationd.Core.Core] {&quot;msg&quot;:&quot;state transition&quot;, &quot;event&quot;:state_transition, &quot;state&quot;:LocationManager, &quot;id&quot;:&quot;0x600000205140&quot;, &quot;property&quot;:pausesLocationUpdatesAutomatically, &quot;old&quot;:0, &quot;new&quot;:1}t = 9.10s CL: CLLocationManagert = 9.11s Staging: (CoreLocation) [com.apple.locationd.Core.Client] {&quot;msg&quot;:&quot;CLLocationManager&quot;, &quot;event&quot;:activity, &quot;_cmd&quot;:setDelegate:, &quot;self&quot;:&quot;0x600000205140&quot;, &quot;delegate&quot;:&quot;0x60400028bef0&quot;}t = 9.12s error: unexpectedly found nil while unwrapping an Optional valuet = 9.12s Unable to monitor event loopt = 10.13s Tap &quot;Onboarding.Continue&quot; Buttont = 10.13s Wait for no.hyper.MyApp-Staging to idlet = 10.16s Find the &quot;Onboarding.Continue&quot; Buttont = 11.28s Assertion Failure: &lt;unknown&gt;:0: no.hyper.MyApp-Staging crashed in MyApp_Staging.AppDelegate.(makeDependencyContainer in _5D394B3D7D393F9C3C550E61780517BB)() -&gt; MyApp_Staging.DependencyContainert = 11.33s Wait for com.apple.springboard to idle Did you see unexpectedly found nil while unwrapping an Optional value? It crashed in CLLocationManager. It is because when location changes, CLLocationManager needs to report it via didUpdateLocations function, but we haven‚Äôt implemented it. Strangely that it didn‚Äôt happen when testing locally. The proposed fix is to implement a dummy method with no operation 123func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) { // No op} But it is not the solution. It appears that BuddyBuild is doing some hacks with how push notification and UIWindow, hence causing the issue.","link":"/blog/It's-good-to-have-a-CI/"},{"title":"Introducing Learn Talks‚Ää‚Äî‚ÄäAwesome conference and meetup talks","text":"Issue #269 Original post https://medium.com/swlh/introducing-learn-talks-awesome-conference-and-meetup-talks-e97c8cf7e0f Product Hunt https://www.producthunt.com/posts/learn-talks Hi, it‚Äôs Khoa here. I‚Äôm so glad to finally launch LearnTalks, in order to help others and myself to catch up with new conference and meetup talks. Being one who is extremely passionate about making things and writing , I also love to learn about every new thing in tech. Tech moves so fast, what we learn today may be deprecated very soon, and only continuous learning can keep us move forward. Tech conference and meetup are best places to learn about new things and tips, although there are some rises and falls ‚Ä¶, they are still growing and provides valuable resources for lots of people. There are lots of conferences and meetups that one can‚Äôt go to all, this can give fear of missing out feeling. Fortunately people are kind enough to always publish videos publicly so others can learn from. I have been for a long time curating a list‚Ä¶ to keep track of all cool videos, but it get out of hand very quickly. That‚Äôs why I make LearnTalks.com as a convenient place to search and explore new tech talks. The features include Easy search for talk, author and event See upcoming events Explore tags of topics and technologies Mobile friendly Firstly, thanks to all the people who helped me alpha test the website and provided valuable feedback. I addressed and fixed many issues.And thanks a lot to many conference organisers who gave me a yes, support and encouragement promptly after I sent emails. Thanks a lot for spending your free time organising cool events and sharing the videos to the community. I really appreciate. This website is just a curation to videos, it does not repost or claim copyright of any of the videos. And there are links back to conference and meetup pages. It is free to use and has no commercial purpose. Hope you find the website useful as I do. There are of course many things needed to improve, I‚Äôm looking forward to receiving feedbacks and support from you ‚ù§Ô∏è If there are any issues or copyright violations, please feel free to drop me a message.","link":"/blog/Introducing-Learn-Talks-Awesome-conference-and-meetup-talks/"},{"title":"Law of Jante","text":"Issue #9 The other day I was watching Inside Sweden‚Äôs Silicon Valley, and he mentions Law of Jante It is pretty much this You‚Äôre not to think you are anything special. You‚Äôre not to think you are as good as we are. You‚Äôre not to think you are smarter than we are. You‚Äôre not to convince yourself that you are better than we are. You‚Äôre not to think you know more than we do. You‚Äôre not to think you are more important than we are. You‚Äôre not to think you are good at anything. You‚Äôre not to laugh at us. You‚Äôre not to think anyone cares about you. You‚Äôre not to think you can teach us anything. This is controversial, there are many discussions about this http://www.ibtimes.com/law-jante-how-swedish-cultural-principle-drives-ikea-ericsson-volvo-beat-financial-1397589 https://www.quora.com/Is-answering-publicly-on-Quora-incompatible-with-the-Law-of-Jante https://www.quora.com/Would-global-application-of-Jantes-laws-be-beneficial http://www.lifeinnorway.net/2015/06/what-exactly-is-janteloven/ Putting on your black hat, it sounds negative. Putting on your yellow hat, it sounds positiveBut what I learn about it is the team work. No one lives alone, everyone lives among the others. It is about to be humble and learn collaboration","link":"/blog/Law-of-Jante/"},{"title":"Jitter buffer in VoIP","text":"Issue #157 This post was from long time ago when I did pjsip A jitter buffer temporarily stores arriving packets in order to minimize delay variations. If packets arrive too late then they are discarded. A jitter buffer may be mis-configured and be either too large or too small. ImpactIf a jitter buffer is too small then an excessive number of packets may be discarded, which can lead to call quality degradation. Lower settings cause less delay in the meeting, but meetings with lower settings are more susceptible to jitter effects caused by network congestion. Less data is buffered, increasing the likelihood that delayed or lost packets will produce a jitter effect in the media stream. If a jitter buffer is too large then the additional delay can lead to conversational difficulty. Higher settings are more effective at reducing jitter effects. With higher settings, more data is buffered, which allows more time for delayed packets to arrive at the client. However, higher settings also result in more delay (or latency) in the meeting. A user who is speaking will not be heard immediately by the other meeting participants. The delay in the meeting increases with the amount of time that data is held in the buffer. ResolutionA typical jitter buffer configuration is 30mS to 50mS in size. In the case of an adaptive jitter buffer then the maximum size may be set to 100-200mS. Note that if the jitter buffer size exceeds 100mS then the additional delay introduced can lead to conversational difficulty. Reference lib.boulder.ibm.com/infocenter/sametime http://www.voiptroubleshooter.com","link":"/blog/Jitter-buffer-in-VoIP/"},{"title":"Learning from Open Source  Hit testing with UIWindow","text":"Issue #132 From https://github.com/Flipboard/FLEX/blob/master/Classes/ExplorerInterface/FLEXWindow.m 12345678910111213141516171819202122- (id)initWithFrame:(CGRect)frame{ self = [super initWithFrame:frame]; if (self) { self.backgroundColor = [UIColor clearColor]; // Some apps have windows at UIWindowLevelStatusBar + n. // If we make the window level too high, we block out UIAlertViews. // There's a balance between staying above the app's windows and staying below alerts. // UIWindowLevelStatusBar + 100 seems to hit that balance. self.windowLevel = UIWindowLevelStatusBar + 100.0; } return self;}- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event{ BOOL pointInside = NO; if ([self.eventDelegate shouldHandleTouchAtPoint:point]) { pointInside = [super pointInside:point withEvent:event]; } return pointInside;} From https://github.com/Flipboard/FLEX/blob/master/Classes/ExplorerInterface/FLEXExplorerViewController.m 12345678910111213141516171819202122232425262728- (BOOL)shouldReceiveTouchAtWindowPoint:(CGPoint)pointInWindowCoordinates{ BOOL shouldReceiveTouch = NO; CGPoint pointInLocalCoordinates = [self.view convertPoint:pointInWindowCoordinates fromView:nil]; // Always if it's on the toolbar if (CGRectContainsPoint(self.explorerToolbar.frame, pointInLocalCoordinates)) { shouldReceiveTouch = YES; } // Always if we're in selection mode if (!shouldReceiveTouch &amp;&amp; self.currentMode == FLEXExplorerModeSelect) { shouldReceiveTouch = YES; } // Always in move mode too if (!shouldReceiveTouch &amp;&amp; self.currentMode == FLEXExplorerModeMove) { shouldReceiveTouch = YES; } // Always if we have a modal presented if (!shouldReceiveTouch &amp;&amp; self.presentedViewController) { shouldReceiveTouch = YES; } return shouldReceiveTouch;}","link":"/blog/Learning-from-Open-Source-Hit-testing-with-UIWindow/"},{"title":"Learning flexbox","text":"Issue #62 CSS body height https://www.kirupa.com/html5/make_body_take_up_full_browser_height.htm Flexbox Properties of flex https://codepen.io/enxaneta/full/adLPwv Visual guide to flexbox https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties align-items vs align-content https://stackoverflow.com/questions/27539262/whats-the-difference-between-align-content-and-align-items align-items vs justify-content https://stackoverflow.com/questions/35049262/difference-between-justify-content-vs-align-items multiple line https://stackoverflow.com/questions/41789278/first-child-full-width-in-flexbox","link":"/blog/Learning-flexbox/"},{"title":"Learning from Open Source  Generic Factory","text":"Issue #148 From https://github.com/devxoul/Pure/blob/master/Sources/Pure/FactoryModule.swift 12345678public protocol FactoryModule: Module { /// A factory for `Self`. associatedtype Factory = Pure.Factory&lt;Self&gt; /// Creates an instance of a module with a dependency and a payload. init(dependency: Dependency, payload: Payload)} From https://github.com/devxoul/Pure/blob/master/Sources/Pure/Factory.swift 12345678910111213141516171819202122open class Factory&lt;Module: FactoryModule&gt; { private let dependencyClosure: () -&gt; Module.Dependency /// A static dependency of a module. open var dependency: Module.Dependency { return self.dependencyClosure() } /// Creates an instance of `Factory`. /// /// - parameter dependency: A static dependency which should be resolved in a composition root. public init(dependency: @autoclosure @escaping () -&gt; Module.Dependency) { self.dependencyClosure = dependency } /// Creates an instance of a module with a runtime parameter. /// /// - parameter payload: A runtime parameter which is required to construct a module. open func create(payload: Module.Payload) -&gt; Module { return Module.init(dependency: self.dependency, payload: payload) }} From https://github.com/devxoul/Pure/blob/master/Tests/PureTests/PureSpec.swift#L72 123456let factory = FactoryFixture&lt;Dependency, Payload&gt;.Factory(dependency: .init( networking: \"Networking A\"))let instance = factory.create(payload: .init(id: 100))expect(instance.dependency.networking) == \"Networking A\"expect(instance.payload.id) == 100","link":"/blog/Learning-from-Open-Source-Generic-Factory/"},{"title":"Learning from Open Source  Colocate test files","text":"Issue #160 Why you should co-locate your Xcode tests Files https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/ViewModels/RootViewModel.swifthttps://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/ViewModels/RootViewModelTests.swift","link":"/blog/Learning-from-Open-Source-Colocate-test-files/"},{"title":"Learning from Open Source  Making Deferred in Kotlin","text":"Issue #135 From https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter/blob/master/src/main/java/com/jakewharton/retrofit2/adapter/kotlin/coroutines/experimental/CoroutineCallAdapterFactory.kt#L86 12345678910111213141516171819202122232425override fun adapt(call: Call&lt;T&gt;): Deferred&lt;T&gt; { val deferred = CompletableDeferred&lt;T&gt;() deferred.invokeOnCompletion { if (deferred.isCancelled) { call.cancel() } } call.enqueue(object : Callback&lt;T&gt; { override fun onFailure(call: Call&lt;T&gt;, t: Throwable) { deferred.completeExceptionally(t) } override fun onResponse(call: Call&lt;T&gt;, response: Response&lt;T&gt;) { if (response.isSuccessful) { deferred.complete(response.body()!!) } else { deferred.completeExceptionally(HttpException(response)) } } }) return deferred}","link":"/blog/Learning-from-Open-Source-Making-Deferred-in-Kotlin/"},{"title":"Learning from Open Source  Making macOS app in code","text":"Issue #91 I‚Äôm familiar with the whole app structure that Xcode gives me when I‚Äôm creating new macOS project, together with Storyboard. The other day I was reading touch-bar-simulator and see how it declares app using only code. See this main.swift 123456789let app = NSApplication.sharedlet delegate = AppDelegate()app.delegate = delegateapp.run()final class AppDelegate: NSObject, NSApplicationDelegate, NSWindowDelegate { let controller = IDETouchBarSimulatorHostWindowController.simulatorHostWindowController()! lazy var window: NSWindow = self.controller.window!}","link":"/blog/Learning-from-Open-Source-Making-macOS-app-in-code/"},{"title":"Learning from Open Source  Using Coordinator","text":"Issue #97 The Coordinator pattern can be useful to manage dependencies and handle navigation for your view controllers. It can be seen from BackchannelSDK-iOS, take a look at BAKCreateProfileCoordinator for example 123456789101112131415161718192021222324252627282930@implementation BAKCreateProfileCoordinator- (instancetype)initWithUser:(BAKUser *)user navigationController:(UINavigationController *)navigationController configuration:(BAKRemoteConfiguration *)configuration { self = [super init]; if (!self) return nil; _navigationController = navigationController; _user = user; _profileViewController = [[BAKProfileFormViewController alloc] init]; [self configureProfileForm]; _configuration = configuration; return self;}- (void)start { [self.profileViewController updateDisplayName:self.user.displayName]; [self.navigationController pushViewController:self.profileViewController animated:YES];}- (void)profileViewControllerDidTapAvatarButton:(BAKProfileFormViewController *)profileViewController { BAKChooseImageCoordinator *imageChooser = [[BAKChooseImageCoordinator alloc] initWithViewController:self.navigationController]; imageChooser.delegate = self; [self.childCoordinators addObject:imageChooser]; [imageChooser start];}- (void)imageChooserDidCancel:(BAKChooseImageCoordinator *)imageChooser { [self.childCoordinators removeObject:imageChooser];} Look how it holds navigationController as root element to do navigation, and how it manages childCoordinators Read more Coordinators ‚Äì Soroush Khanlou","link":"/blog/Learning-from-Open-Source-Using-Coordinator/"},{"title":"Learning from Open Source  Using Playground","text":"Issue #94 One thing I like about kickstarter-ios is how they use Playground to quickly protoyping views. We use Swift Playgrounds for iterative development and styling. Most major screens in the app get a corresponding playground where we can see a wide variety of devices, languages and data in real time. This way we don‚Äôt need Injection or using React Native anymore. Take a look at all the pages https://github.com/kickstarter/ios-oss/tree/master/Kickstarter-iOS.playground/Pages Read more Playground-Driven Development at Kickstarter FrenchKit 2017 - Playground Driven Development Finding Happiness in Functional Programming","link":"/blog/Learning-from-Open-Source-Using-Playground/"},{"title":"Learning from Open Source  Managing dependencies","text":"Issue #96 Another cool thing about ios-oss is how it manages dependencies. Usually you have a lot of dependencies, and it‚Äôs good to keep them in one place, and inject it to the objects that need. The Environment is simply a struct that holds all dependencies throughout the app 123456789101112131415161718/** A collection of **all** global variables and singletons that the app wants access to. */public struct Environment { /// A type that exposes endpoints for fetching Kickstarter data. public let apiService: ServiceType /// The amount of time to delay API requests by. Used primarily for testing. Default value is `0.0`. public let apiDelayInterval: DispatchTimeInterval /// A type that exposes how to extract a still image from an AVAsset. public let assetImageGeneratorType: AssetImageGeneratorType.Type /// A type that stores a cached dictionary. public let cache: KSCache /// ...} Then there‚Äôs global object called AppEnvironment that manages all these Environment in a stack 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public struct AppEnvironment { /** A global stack of environments. */ fileprivate static var stack: [Environment] = [Environment()] /** Invoke when an access token has been acquired and you want to log the user in. Replaces the current environment with a new one that has the authenticated api service and current user model. - parameter envelope: An access token envelope with the api access token and user. */ public static func login(_ envelope: AccessTokenEnvelope) { replaceCurrentEnvironment( apiService: current.apiService.login(OauthToken(token: envelope.accessToken)), currentUser: envelope.user, koala: current.koala |&gt; Koala.lens.loggedInUser .~ envelope.user ) } /** Invoke when we have acquired a fresh current user and you want to replace the current environment's current user with the fresh one. - parameter user: A user model. */ public static func updateCurrentUser(_ user: User) { replaceCurrentEnvironment( currentUser: user, koala: current.koala |&gt; Koala.lens.loggedInUser .~ user ) } public static func updateConfig(_ config: Config) { replaceCurrentEnvironment( config: config, koala: AppEnvironment.current.koala |&gt; Koala.lens.config .~ config ) } // Invoke when you want to end the user's session. public static func logout() { let storage = AppEnvironment.current.cookieStorage storage.cookies?.forEach(storage.deleteCookie) replaceCurrentEnvironment( apiService: AppEnvironment.current.apiService.logout(), cache: type(of: AppEnvironment.current.cache).init(), currentUser: nil, koala: current.koala |&gt; Koala.lens.loggedInUser .~ nil ) } // The most recent environment on the stack. public static var current: Environment! { return stack.last }} Then whenever there‚Äôs event that triggers dependencies update, we call it like 12345self.viewModel.outputs.logIntoEnvironment .observeValues { [weak self] accessTokenEnv in AppEnvironment.login(accessTokenEnv) self?.viewModel.inputs.environmentLoggedIn()} The cool thing about Environment is that we can store and retrieve them 123456// Returns the last saved environment from user defaults.public static func fromStorage(ubiquitousStore: KeyValueStoreType, userDefaults: KeyValueStoreType) -&gt; Environment { // retrieval} And we can mock in tests 123456789AppEnvironment.replaceCurrentEnvironment( apiService: MockService( fetchDiscoveryResponse: .template |&gt; DiscoveryEnvelope.lens.projects .~ [ .todayByScottThrift, .cosmicSurgery, .anomalisa ] ))","link":"/blog/Learning-from-Open-Source-Managing-dependencies/"},{"title":"Learning sine","text":"Issue #146 To be written ‚Ä¶ Old math equations become useful today üòç v = 1 - x From https://www.desmos.com/calculator","link":"/blog/Learning-sine/"},{"title":"Learning from Open Source  Using dylib in macOS applications","text":"Issue #134 https://github.com/mortenjust/androidtool-mac https://github.com/mortenjust/droptogif","link":"/blog/Learning-from-Open-Source-Using-dylib-in-macOS-applications/"},{"title":"Links for Design","text":"Issue #317 UI Why Your App Looks Better in Sketch 8 Tips for Dark Theme Design UX Duolingo User Retention Design Details 30 Things We Often Forget When Designing Mobile Apps Case study club Showcase https://saaspages.xyz/ Resources https://shape.so/ https://icons8.com/ https://icons8.com/animated-icons https://icons8.com/vector-creator https://feathericons.com/ https://iconstore.co/ https://streamlineicons.com/ https://illlustrations.co/","link":"/blog/Links-for-Design/"},{"title":"Links for Android","text":"Issue #348 Google Maven Repository https://dl.google.com/dl/android/maven2/index.html Posts https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e https://proandroiddev.com/5-common-mistakes-when-using-architecture-components-403e9899f4cb https://tech.instacart.com/introducing-coil-kotlin-first-image-loading-on-android-f0fdc7a2a99e Coroutine Index https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/index.html https://proandroiddev.com/suspend-what-youre-doing-retrofit-has-now-coroutines-support-c65bd09ba067 https://blog.mindorks.com/mastering-kotlin-coroutines-in-android-step-by-step-guide https://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/ Use Kotlin coroutines with Architecture components https://proandroiddev.com/async-operations-with-kotlin-coroutines-part-1-c51cc581ad33 https://medium.com/@elizarov/coroutine-context-and-scope-c8b255d59055 https://medium.com/@elizarov/structured-concurrency-722d765aa952","link":"/blog/Links-for-Android/"},{"title":"Links for iOS","text":"Issue #384 General iOS Device Display Summary Information Property List Screenshot specifications Blog https://www.pointfree.co/ https://nshipster.com/ https://www.swiftbysundell.com/ Convention Naming Properties and Data Types Swift API Design Guidelines iOS Adoption https://mixpanel.com/trends/ https://developer.apple.com/support/app-store/ Push notification iOS 13 and Xcode 11 Changes That Affect Push Notifications Apple Push Notification Service Update https://medium.com/@tonisucic/pitfalls-to-avoid-when-implementing-push-notifications-784965f078ab Accessibility SwiftUI Accessibility Auto Layout Detail-oriented UI with Layout Margins Modern Auto Layout Easier Scrolling With Layout Guides https://www.vadimbulavin.com/collection-view-cells-self-sizing/ High Performance Auto Layout Catalyst Beyond the Checkbox with Catalyst and AppKit Operation https://williamboles.me/building-a-networking-layer-with-operations/ AsyncOperation.swift Security https://talk.objc.io/episodes/S01E57-certificate-pinning HTTPS Server Trust Evaluation https://promon.co/security-news/ios-jailbreak/ https://blog.datatheorem.com/blog/sleeping-with-the-friend-enemy-mobile-apps-and-their-sdks Secret Management on iOS Trusting third party SDKs Review Additional Details on the New App Store Review Features https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/ratings-and-reviews/ https://developer.apple.com/app-store/ratings-and-reviews/ Compile time https://github.com/fastred/Optimizing-Swift-Build-Times https://shashikantjagtap.net/xcode-new-build-system-speedy-swift-builds/ https://medium.com/xcblog/wwdc18-modern-tips-for-optimising-swift-build-time-in-xcode-10-a81de3a9be6d https://github.com/igor-makarov/DemoLargeNumberOfSwiftFiles https://medium.com/freelancer-engineering/modular-architecture-on-ios-and-how-i-decreased-build-time-by-50-23c7666c6d2f Optimizing Build Times in Swift 4 The Swift Driver, Compilation Model, and Command-Line Experience Safe area Positioning Content Relative to the Safe Area Performance https://github.com/layoutBox/LayoutFrameworkBenchmark https://github.com/bwhiteley/JSONShootout https://texturegroup.org/docs/corner-rounding.html https://yalantis.com/blog/mastering-uikit-performance/ https://www.hackingwithswift.com/articles/79/how-to-find-and-fix-slow-drawing-using-instruments https://alistra.ghost.io/2014/10/01/aligned-uiviews/ https://stackoverflow.com/questions/6731545/when-does-a-view-or-layer-require-offscreen-rendering Frameworks https://instabug.com/blog/ios-binary-framework/ Debugging https://medium.com/@dmytro.anokhin/overview-of-developer-tools-for-ui-debugging-122e4995f972 SwiftKeypath Swift 4 KeyPaths and You SwiftUIBlogs https://netsplit.com/category/swiftui/ Posts Redux-like state container in SwiftUI SwiftUI: Setting Environment Values SwiftUI Layout System SwiftUI tips and tricks Understanding SwiftUI Data Flow SwiftUI Accessibility SwiftUI Data Flow SwiftUI and State Management Corrections What‚Äôs the difference between @ObservedObject, @State, and @EnvironmentObject? SwiftUI optionals Tips How to create 3D effects like Cover Flow using ScrollView and GeometryReader Talks Animations with SwiftUI - Chris Eidhof SwiftUI Everywhere Code https://github.com/xtabbas/calculator-checklist https://github.com/alfianlosari/SwiftUI-MovieDB https://github.com/unixzii/SwiftUI-2048 https://github.com/mecid/swiftui-recipes-app https://github.com/nickffox/KeyboardObserving SemanticUI Combine https://github.com/learncombine/Combine101 Property wrapper Swift Dependency Injection via Property Wrapper","link":"/blog/Links-for-iOS/"},{"title":"Links for tools","text":"Issue #509 Xcode Engineering best practices https://fbflipper.com/ https://www.wtfautolayout.com/ https://quicktype.io/ https://github.com/woshiccm/Pecker https://github.com/rockbruno/SwiftInfo https://github.com/IBDecodable/IBLinter https://github.com/ChargePoint/xcparse Terminal https://github.com/ggreer/the_silver_searcher https://github.com/nodenv/nodenv https://github.com/rbenv/rbenv https://github.com/pyenv/pyenv https://ohmyz.sh/ https://brew.sh/ Apps https://sherlock.inspiredcode.io/ https://www.mowglii.com/itsycal/ https://github.com/eczarny/spectacle https://www.sublimemerge.com/","link":"/blog/Links-for-tools/"},{"title":"Links for Javascript","text":"Issue #372 https://www.freecodecamp.org/news/explaining-the-best-javascript-meme-i-have-ever-seen/ https://www.freecodecamp.org/news/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8/ https://www.freecodecamp.org/news/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26/","link":"/blog/Links-for-Javascript/"},{"title":"How to work with Hardened runtime and sandbox in macOS","text":"Issue #413 Hardened Runtime and Sandboxing Resolving Common Notarization Issues macOS Code Signing In Depth","link":"/blog/How-to-work-with-Hardened-runtime-and-sandbox-in-macOS/"},{"title":"Links for OSS","text":"Issue #189 https://github.com/digipost/ios https://github.com/wwdc/2019 https://github.com/google/science-journal-ios","link":"/blog/Links-for-OSS/"},{"title":"Links for WWDC","text":"Issue #313 iOS 10‚ûïUserNotifications Push user-facing notifications to the user‚Äôs device from a server, or generate them locally from your app. ‚ûïUIViewPropertyAnimator A class that animates changes to views and allows the dynamic modification of those animations. ‚ûïNSPersistentContainer A container that encapsulates the Core Data stack in your app. ‚ûïUIFeedbackGenerator The abstract superclass for all feedback generators. iOS 10.3‚ûïSKStoreReviewController An object that controls the process of requesting App Store ratings and reviews from users. iOS 11‚ûïsafeAreaLayoutGuide The layout guide representing the portion of your view that is unobscured by bars and other content. ‚ûïCoreML Integrate machine learning models into your app. ‚ûïVision Apply computer vision algorithms to perform a variety of tasks on input images and video. ‚ûïARKit Integrate iOS device camera and motion features to produce augmented reality experiences in your app or game. ‚ûïDeviceCheck Access per-device, per-developer data that your associated server can use in its business logic. ‚ûïDrag and Drop Bring drag and drop to your app by using interaction APIs with your views. ‚ûïCoreNFC Detect NFC tags and read messages that contain NDEF data. ‚ûïmaskedCorners Animatable corner radius iOS 12‚ûïAuthenticationServices Make it easy for users to log into apps and services. iOS 13 https://www.hackingwithswift.com/articles/193/whats-new-in-ios-13 https://onesignal.com/blog/ios-13-introduces-4-breaking-changes-to-notifications/ ‚ûïSwiftUI Declare the user interface and behavior for your app on every platform. ‚ûïCombine Customize handling of asynchronous events by combining event-processing operators. ‚ûïCryptoKit Perform cryptographic operations securely and efficiently. ‚ûïUISearchTextField Expose UISearchTextField on UISearchBar ‚ûïMetricKit ‚ûïCoreSVG https://github.com/SDWebImage/SDWebImageSVGCoder","link":"/blog/Links-for-WWDC/"},{"title":"Links for Xcode","text":"Issue #499 Build settingBuild Library For Distribution Binary Frameworks in Swift It turns on all the features that are necessary to build your library in such a way that it can be distributed What does this error actually mean? Well, when the Swift compiler goes to import a module, it looks for a file called the Compiled Module for that library. If it finds one of these files, it reads off the manifest of public APIs that you can call into, and lets you use them. Now, this Compiled Module Format is a binary format that basically contains internal compiler data structures. And since they‚Äôre just internal data structures, they‚Äôre subject to change with every version of the Swift Compiler. So what this means is that if one person tries to import a module using one version of Swift, and that module was created by another version of Swift, their compiler can‚Äôt understand it, and they won‚Äôt be able to use it. Well, in order to solve this version lock, Xcode 11 introduces a new format for Swift Modules, called Swift Module Interfaces. And just like the Compiled Module Format, they list out all the public APIs of a module, but in a textual form that behaves more like source code. And since they behave like source code, then future versions of the Swift Compiler will be able to import module interfaces created with older versions. And when you enable Build Libraries for Distribution, you‚Äôre telling the compiler to generate one of these stable interfaces whenever it builds your framework","link":"/blog/Links-for-Xcode/"},{"title":"Make to make rounded background UIButton in iOS","text":"Issue #373 UIButton.contentEdgeInsets does not play well with Auto Layout, we need to use intrinsicContentSize 12345678910111213141516171819202122final class InsetButton: UIButton { required init(text: String) { super.init(frame: .zero) titleLabel?.textColor = .white setTitle(text, for: .normal) layer.cornerRadius = 15 layer.masksToBounds = true backgroundColor = .black isUserInteractionEnabled = false } required init?(coder aDecoder: NSCoder) { fatalError() } override var intrinsicContentSize: CGSize { let size = super.intrinsicContentSize return CGSize(width: size.width + 24, height: size.height) }}","link":"/blog/Make-to-make-rounded-background-UIButton-in-iOS/"},{"title":"Markdown editor","text":"Issue #6 I like writing with markdown, it gives me comfortable experience with complete control over what I want to write. I recommend vmd which renders exactly as GitHub. vmd is for rendering only, you need an editor to write, I use Sublime Text because it opens very fast I also recommend using spectacle to easily split and organize windows","link":"/blog/Markdown-editor/"},{"title":"NSApplicationDelegate and notification","text":"Issue #34 In an iOS project, we often see this in AppDelegate 12345678910@UIApplicationMainclass AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool { return true }} But in a Cocoa project, we see this instead 12345678910111213@NSApplicationMainclass AppDelegate: NSObject, NSApplicationDelegate { func applicationDidFinishLaunching(aNotification: NSNotification) { // Insert code here to initialize your application } func applicationWillTerminate(aNotification: NSNotification) { // Insert code here to tear down your application }} In this case the param is of type NSNotification Delegate and notificationReading Cocoa Core Competencies - Delegation The delegate of most Cocoa framework classes is automatically registered as an observer of notifications posted by the delegating object. The delegate need only implement a notification method declared by the framework class to receive a particular notification message. Following the example above, a window object posts an NSWindowWillCloseNotification to observers but sends a windowShouldClose: message to its delegate. So the pattern is that the delegate should strip the NS and Notification, like NSWindowWillCloseNotification to windowShouldClose:","link":"/blog/NSApplicationDelegate-and-notification/"},{"title":"OSS","text":"Issue #189 https://github.com/digipost/ios https://github.com/wwdc/2019 https://github.com/google/science-journal-ios","link":"/blog/OSS/"},{"title":"Open Source","text":"Issue #5 https://onmyway133.github.io/opensource/","link":"/blog/Open-Source/"},{"title":"Optional of optional in Swift","text":"Issue #58 Do you know that an optional can itself contain an optional, that contains another optional? In that case, we need to unwrap multiple times You mostly see it when you try to access window 1let window = UIApplication.shared.delegate?.window // UIWindow?? It is because delegate can be nil, and its window can be nil too. 1window??.backgroundColor = .yellow","link":"/blog/Optional-of-optional-in-Swift/"},{"title":"Package node.js application","text":"Issue #57 I like node.js because it has many cool packages. I wish the same goes for macOS. Fortunately, the below solutions provide a way to package node.js modules and use them inside macOS applications. It can be slow, but you save time by using existing node.js modules. Let‚Äôs give it a try. pkg Package your Node.js project into an executable üöÄ nexe create a single executable out of your node.js apps enclose js Compile your Node.js project into an executable http://enclosejs.com","link":"/blog/Package-node.js-application/"},{"title":"Netcut and ARP","text":"Issue #153 Bad people can use Netcut to limit other ‚Äòs internet access in same network How does Netcut workNetcut uses attacking technique called ARP Spoofing. ARP (Address Resolution Protocol) is a link layer procotol, it is used for resolving network layer address (IP) into link layer address (MAC). When we want to send IP packet to another host (a computer in the same LAN, or the Gateway), we must know the destination IP address. In order for the packet to reach the destination, the destination IP address must be converted to the corresponding MAC address, so the transmission can be processed in the data link layer. To setup this mapping IP-MAC in the ARP table, we must first send ARP request as broadcast one to the LAN. In the happy case, the one with the IP in the ARP request will reply us with his MAC address. Unfortunately, ARP is a stateless protocol. This means we continue to accept ARP replies and overwrite the old ones, even they have not expired yet. Worse, ARP does not define any authentication method to check whether the replies come from the trusted one (the one we want to receive the replies). These offer chances for the attacker to perform ARP Spoofing. The theory behind ARP SpoofingFrom the machine in the LAN, the attacker associate his MAC address and IP address of the target host (usually the Gateway), so that any traffic sent to that target host will come to the attacker. Here the attacker can decide whether to modify the packet, send or not. There are 3 types of ARP Spoofing Spoof the host computer Spoof the Gateway Spoof both the host computer and the Gateway To see the ARP tableOpen Command line (Windows) or Terminal (Mac OSX), and type 1arp -a This will list the MAC address associated with a specific IP. Note that some mappings maybe wrong due to ARP Spoofing How to prevent against this ?To prevent spoofing our computer, we can use softwares (search for Anti Netcut, Anti ARP spoofing, ‚Ä¶) or set the static ARP ourselves. In fact, those softwares are based on setting static ARP. This way we set the static mapping IP-MAC for a specific host (computer or Gateway), and the OS definitely ignores all ARP replies for that IP. Example of static ARP mapping associated with the Gateway, performed on the computer host 1192.168.1.1 B4-B3-62-7C-CE-55 Here 192.168.1.1 and B4-B3-62-7C-CE-55 are the Gateway‚Äôs IP and MAC address To prevent spoofing the Gateway, we must set static ARP on that Gateway. Go to the Gateway/Router interface, in its ARP setting, fill in the mapping IP-MAC for a specific host Look for that Gateway manual or the related guide on how to perform this. This is devices dependent-method, but the theory remains the same. Example of static ARP mapping associated with the computer host, performed on the Gateway 1192.168.1.2 64-70-02-B2-9B-E1 Here 192.168.1.2 and 64-70-02-B2-9B-E1 are the machine host ‚Äòs IP and MAC address. The machine host can be any computer in the LAN How to set static ARPProposed that 192.168.1.1 The destination host ‚Äòs IP B4-B3-62-7C-CE-55 The destination host ‚Äòs MAC Local Area Connection Our network interface name Open Terminal (Mac OSX) To delete specific mapping 1sudo arp -d 192.168.1.1 To set specific mapping 1sudo arp -s 192.168.1.1 B4-B3-62-7C-CE-55 Reference http://en.wikipedia.org/wiki/ARP_spoofing","link":"/blog/Netcut-and-ARP/"},{"title":"Pixel and point","text":"Issue #59 TL;DR: Don‚Äôt use nativeScale and nativeBounds, unless you‚Äôre doing some very low level stuff What is point and pixelFrom https://developer.apple.com/library/content/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html In iOS there is a distinction between the coordinates you specify in your drawing code and the pixels of the underlying device The purpose of using points (and the logical coordinate system) is to provide a consistent size of output that is device independent. For most purposes, the actual size of a point is irrelevant. The goal of points is to provide a relatively consistent scale that you can use in your code to specify the size and position of views and rendered content On a standard-resolution screen, the scale factor is typically 1.0. On a high-resolution screen, the scale factor is typically 2.0 How about scale and nativeScaleFrom https://developer.apple.com/documentation/uikit/uiscreen var bounds: CGRect: The bounding rectangle of the screen, measured in points. var nativeBounds: CGRect: The bounding rectangle of the physical screen, measured in pixels. var scale: CGFloat: The natural scale factor associated with the screen. var nativeScale: CGFloat: The native scale factor for the physical screen. The scale factor and display modeSee this for a whole list of devices and their scale factors https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions The iPhone 6 and 6+ introduced display mode https://www.cnet.com/how-to/explaining-display-zoom-on-iphone-6-and-6-plus/ You can see that currently the iPhone 6+, 6s+, 7+ phones have scale factor of 2.88 in zoomed mode, and 2.6 in standard mode You can also see that in zoomed mode, iPhone 6 has the same logical size as the iPhone 5 Simulator vs deviceThis is to show you the differences in nativeScale in simulators and devices in zoomed mode, hence differences in nativeBounds. iPhone 6+ simulator 1234567891011121314151617181920212223(lldb) po UIScreen.main.scale3.0(lldb) po UIScreen.main.bounds‚ñø (0.0, 0.0, 414.0, 736.0) ‚ñø origin : (0.0, 0.0) - x : 0.0 - y : 0.0 ‚ñø size : (414.0, 736.0) - width : 414.0 - height : 736.0(lldb) po UIScreen.main.nativeScale3.0(lldb) po UIScreen.main.nativeBounds‚ñø (0.0, 0.0, 1242.0, 2208.0) ‚ñø origin : (0.0, 0.0) - x : 0.0 - y : 0.0 ‚ñø size : (1242.0, 2208.0) - width : 1242.0 - height : 2208.0 iPhone 6+ device 1234567891011121314151617181920212223(lldb) po UIScreen.main.scale3.0(lldb) po UIScreen.main.bounds‚ñø (0.0, 0.0, 375.0, 667.0) ‚ñø origin : (0.0, 0.0) - x : 0.0 - y : 0.0 ‚ñø size : (375.0, 667.0) - width : 375.0 - height : 667.0(lldb) po UIScreen.main.nativeScale2.88(lldb) po UIScreen.main.nativeBounds‚ñø (0.0, 0.0, 1080.0, 1920.0) ‚ñø origin : (0.0, 0.0) - x : 0.0 - y : 0.0 ‚ñø size : (1080.0, 1920.0) - width : 1080.0 - height : 1920.0","link":"/blog/Pixel-and-point/"},{"title":"How to use synthetic property in Kotlin Android Extension","text":"Issue #555 Synthetic properties generated by Kotlin Android Extensions plugin needs a view for Fragment/Activity to be set before hand. In your case, for Fragment, you need to use view.btn_K in onViewCreated override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? { super.onCreateView(inflater, container, savedInstanceState) val view = inflater.inflate(R.layout.fragment_card_selector, container, false) view.btn_K.setOnClickListener{} // access with `view` return view }Or better, you should only access synthetic properties in onViewCreated override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? { super.onCreateView(inflater, container, savedInstanceState) return inflater.inflate(R.layout.fragment_card_selector, container, false) } override fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) btn_K.setOnClickListener{} // access without `view` }Please notice that savedInstanceState parameter should be nullable Bundle?, and also check Importing synthetic properties It is convenient to import all widget properties for a specific layoutin one go: import kotlinx.android.synthetic.main.&lt;layout&gt;.* Thus if the layout filename is activity_main.xml, we‚Äôd importkotlinx.android.synthetic.main.activity_main.*. If we want to call the synthetic properties on View, we should alsoimport kotlinx.android.synthetic.main.activity_main.view.*. Read more https://stackoverflow.com/questions/34541650/nullpointerexception-when-trying-to-access-views-in-a-kotlin-fragment/51674381#51674381","link":"/blog/How-to-use-synthetic-property-in-Kotlin-Android-Extension/"},{"title":"Norsk","text":"Issue #68 Ordbok lexin Bok https://mernorsk.portfolio.no/ https://norskna.portfolio.no/ http://praktisknorsk.cappelendamm.no/ https://steinpastein.cappelendamm.no/ http://ord.cappelendamm.no/ http://www.herborvi.cappelendamm.no/ https://klartdet.portfolio.no/ http://jobbisikte.cappelendamm.no/ Informasjon https://www.kompetansenorge.no/ Kurs Norwegian on the web Norwegian on the web 2 Norsk i bruk Norskl√¶rer Karense Lesning http://www.klartale.no/ http://grammatikk.com/ http://www.nyinorge.no/no/ http://www.samfunnskunnskap.no/?lang=no http://www.norgeshistorie.no/ Pr√∏ve https://www.kompetansenorge.no/norskprove/ https://enovate.no/voxdemo/norsk/ üöÄ https://udeoslovo.pameldingssystem.no/samfo-100 Bilder Bilder tema Lytting https://radio.nrk.no/ üöÄ http://www.klartale.no/klartale-podcast https://shifter.no/kategori/podcast/ Se p√• http://kunnskapsfilm.no/series/ https://tv.nrk.no/serie/folkeopplysningen/KMTE50009315/sesong-3/episode-5 NRK Super NRK Skole üöÄ üöÄ http://tekstlab.uio.no/igin/","link":"/blog/Norsk/"},{"title":"Please reconsidering your choice of libraries","text":"Issue #105 Are you willing to take vaccines you don‚Äôt know about? I like open source. I ‚Äòve made some and contributed to some. I also use other people ‚Äòs open source libraries and learn a lot from them üòá Open source can help us build better, faster and maybe more performant software by basing on other people ‚Äòs hard work. We can also collaborate and make it better. But it‚Äôs also a double edges sword if you‚Äôre not judging carefully. Putting a little bit more dedicationYou can skip this post if your project is just for fun, and you don‚Äôt care about future maintenance. If you‚Äôre making client or product projects, you should care and put a little more dedication into it. The company and your teammates trust you to do the good work. I‚Äôve admitted that I ‚Äòve done node.js and electron.js. The choice is because it‚Äôs just a utility that I want to make quickly, and there ‚Äòs many node.js packages that I can use immediately. I have little experience in node.js, so I accept the risk do get the work done. But if you‚Äôre experienced developer in your platform, and it‚Äôs your important project, then it‚Äôs a different story üí• I‚Äôm kind of experimental person, so I always want to try new things. But I also learn the hard way to not over engineer, and to live as close to the system as possible. I just read Much ado about iOS app architecture and I agree with most of the points, that we shouldn‚Äôt fight the SDK and replace system frameworks. To me, using 3rd libraries is like giving your life to someone else ‚Äòs hands, that you can‚Äôt make any decision for your future. Please don‚Äôt just pod install and consider it done üôè What about the starsPeople tend to follow those that have lots of followers, and to star a project with lots of stars. Don‚Äôt trust the stars. It means nearly nothing. The star is just the result of some marketing effort. Being featured or not in a newsletter can make 1k stars difference. Just because it was featured in a newsletter does not necessarily mean that it is good üò¨ You should judge it yourself by checking how good the source code is, how many documentation are available, and whether there is unit tests or not. The author is just human, so he can‚Äôt help maintain the library forever. You‚Äôre taking a big risk if you don‚Äôt have good picture of the library. The system, especially iOS, changes very often. There are some libraries that try to ‚Äúreplicate‚Äù system APIs or perform type checking for every possible types. It can be that the author pick the most common use cases, or just trying to provide a cleaner APIs to the user. But if things change, will that author be willing to fix that? Will you be stuck there and making another issue asking for help? We‚Äôre making life better, not traps for everyone to fall into üôÄ Here I don‚Äôt try to blame anyone, ‚Äúyou is not your work‚Äù. I just say that you should check it more thoroughly. You can consult your colleagues and discuss if it‚Äôs good to integrate. Most of the time, pulling a huge library just for some tiny syntactic sugar does not worth it I just put some random links here and you can determine if you like or not https://github.com/radex/SwiftyUserDefaults/blob/master/Sources/SwiftyUserDefaults.swift#L145 https://github.com/jiecao-fm/SwiftTheme/blob/master/Source/UIKit%2BTheme.swift#L183 https://github.com/erichoracek/Motif/blob/7ec2dfce45cd93cb5ae22f4f512a41a499138fd5/Examples/ButtonsExample/ThemeThemeSymbols.m#L10 https://github.com/vhesener/Closures/blob/master/Xcode/Closures/Source/UITableView.swift#L251 https://github.com/Draveness/DKNightVersion/blob/master/DKNightVersion/UIKit/UITableView%2BNight.m#L29 https://github.com/tombenner/nui/blob/master/NUI/Core/NUISwizzler.m#L15 https://github.com/square/SuperDelegate/blob/master/Sources/SuperDelegate%2BLocalNotifications.swift#L53 https://github.com/orta/ARAnalytics/blob/master/ARDSL.m#L113 https://github.com/SnapKit/SnapKit/blob/develop/Source/ConstraintMakerRelatable.swift#L43 https://github.com/saoudrizwan/DynamicJSON/blob/master/Sources/DynamicJSON.swift#L54 PleaseWould you take a very big risk for so little return ? Always implement and imagine that you will be the next maintainer for the project, then you will act differently. So the next time, please reconsider your choice of libraries. Take 1 step back and analyse a bit ‚ù§Ô∏è","link":"/blog/Please-reconsidering-your-choice-of-libraries/"},{"title":"Primary key in Realm","text":"Issue #4 Realm is great. But without primary key, it will duplicate the record, like https://github.com/realm/realm-java/issues/2730, http://stackoverflow.com/questions/32322460/should-i-define-the-primary-key-for-each-entity-in-realm, ‚Ä¶ So to force ourselves into the good habit of declaring primary key, we can leverage Swift protocol Create primary constrain protocol like this 1234protocol PrimaryKeyAware { var id: Int { get } static func primaryKey() -&gt; String?} and conform it in out Realm object 12345678910class Profile: Object, PrimaryKeyAware { dynamic var firstName: String = \"\" dynamic var lastName: String = \"\" dynamic var id: Int = 0 override static func primaryKey() -&gt; String? { return \"id\" }} This way, when using that object in out RealmStorage, we are safe to say that it has a primary key 12345678910111213class RealmStorage&lt;T: Object&gt; where T: PrimaryKeyAware { let realm: Realm init(realm: Realm = RealmProvider.realm()) { self.realm = realm } func save(_ objects: [T]) { try? realm.write { realm.add(objects, update: true) } }} The usage is like this 123let profile = Profile()let storage = RealmStorage&lt;Profile&gt;()storage.save([profile])","link":"/blog/Primary-key-in-Realm/"},{"title":"Request and Task","text":"Issue #161 https://developer.apple.com/documentation/foundation/urlsessionhttps://developer.apple.com/documentation/speech","link":"/blog/Request-and-Task/"},{"title":"Some interesting repositories","text":"Issue #150 Cool https://github.com/GoogleChrome/puppeteer üôÑ https://github.com/kelseyhightower/nocode https://github.com/jackdclark/five https://github.com/auchenberg/volkswagen","link":"/blog/Some-interesting-repositories/"},{"title":"Reading list","text":"Issue #78 These are my favorite books, screencasts, languages, tech and services that I have been exploring BooksProgramming Clean Code: A Handbook of Agile Software Craftsmanship The Pragmatic Programmer: From Journeyman to Master Code Complete: A Practical Handbook of Software Construction, Second Edition 2nd Edition The Clean Coder: A Code of Conduct for Professional Programmers Refactoring: Improving the Design of Existing Code Agile Principles, Patterns, and Practices in C# Refactoring to Patterns The Art of Unit Testing: with examples in C# Clean Architecture: A Craftsman‚Äôs Guide to Software Structure and Design Head First Design Patterns Clean Architecture: A Craftsman‚Äôs Guide to Software Structure and Design Living by the Code Java Effective Java (3rd Edition) Javascript Eloquent Javascript Mostly adequate guide to Functional Programming in Javascript iOS Effective Objective-C 2.0 Advanced Swift Design Patterns by Tutorials App Architecture Haskell Learn you a Haskell for great good Life Smart and Gets Things Done: Joel Spolsky‚Äôs Concise Guide to Finding the Best Technical Talent The Power of Habit: Why We Do What We Do in Life and Business Hired fast Never Eat Alone The shape of ideas So Good They Can‚Äôt Ignore You: Why Skills Trump Passion in the Quest for Work You Love Screencasts Pointfree Clean coders BaseCode Destroy All Software Can it be done in React Native? Blog Pointfree NSHipster Objc.io Swift by Sundell Khanlou Ole Begemann Matt Diephouse Overreacted kode24 Ben Sandofsky Language C C++ Objective C Swift C# Java Kotlin Javascript Applescript Dart Go Haskell Tech &amp; Service iOS, macOS tvOS, watchOS react.js electron.js Android Flutter React Native Chrome extension Sketch plugin Xcode extension Slack bot Windows Phone Windows Mobile 6 Symbian J2ME Windows Metro ASP.NET XNA Unity node.js Docker Kubernetes Heroku Google Cloud Firebase TravisCI, CircleCI, Bitrise, BuddyBuild, Jenkins GitHub, Bitbucket JIRA, Pivotal, Trello Sketch GRPC Protobuf","link":"/blog/Reading-list/"},{"title":"Some Windows Phone 7 development tips","text":"Issue #156 This post was from long time ago when I did Windows Phone 7 Welcome back, today I will start writing all stuff, all the secret I ‚Äòve revealed when developing for Windows Phone 7. When setting UIElement‚Äòs Visibility to Collapsed, the OS set its Height to 0. So if you need to have a Height of 0, simply set Height=&quot;0&quot;, which is faster in term of show time. When clearing data source, ListBox which uses VirtualizingStackPanel does not rememeber its last view, whereas StackPanel does ListBox which is inside ScrollViewer will lose its UI virtualization, even if you use VirtualizingStackPanel Using GestureListener incorrectly will cause other UIElement to not work, i.e Slider, ‚Ä¶ AdControl, ContextMenu may be a source of memory leak. Panorama control still enable swiping when there is only 1 PanoramaItem, whereas Pivot does not. Pivot control will load the current PivotItem, as well as its direct left and right PivotItem. Sometimes SIP keyboard does not show up, check your phone for physical keyboard problem. There is no way to rate a Song for 3rd app When emulator rendering has overlap issue, the workaround is to set LayoutRoot ‚Äòs Background to a solid color Supposed you‚Äôre using ObservableCollection bindSource as binding source for ListBox. When adding items to bindSource quickly, ListBox seems to suppress creating ListBoxItem until all items are added. It is advised to add items in batch WebBrowser control does not have scroll bar Using StoryBoard when ever possible, because all of its animation is done in Compositor Thread, which leverages GPU Use ProgressIndicator for best performance and UX familiarity Collapse unimportant UIElement to decrease load time, and show them when Page is completely loaded. Always unsubscribe to event source that can continue to run when the Page is navigated from, because that may cause memory leak. Examples are timer, BackgroundAudioPlayer.PlayeStateChanged, ‚Ä¶ Using file is much faster than Local Database Remember the limit 260 characters of query string","link":"/blog/Some-Windows-Phone-7-development-tips/"},{"title":"Some investment stories","text":"Issue #42 We will never know how life will go Apple at 40: Spare a thought for co-founder Ronald Wayne, Steve Jobs‚Äô pal who threw away $62bn Someone in 2010 bought 2 pizzas with 10,000 bitcoins ‚Äî which today would be worth $20 million Facebook Graffiti Artist Could be Worth $500 Million","link":"/blog/Some-investment-stories/"},{"title":"Some Swift tips","text":"Issue #136 Adding final https://gist.github.com/krzysztofzablocki/8c9a6c428cf5fcf19effca223a5548cd","link":"/blog/Some-Swift-tips/"},{"title":"String manipulation in Apple Script","text":"Issue #89 Today I find that AppleScript allows us to import Foundation, with that we have lots of power, including NSString. See my script 123use scripting additionsuse framework &quot;Foundation&quot;property NSString : a reference to current application's NSString Here is how I can remove last path component from a string 12345on myRemoveLastPath(myPath) set myString to NSString's stringWithString:myPath set removedLastPathString to myString's stringByDeletingLastPathComponent removedLastPathString as textend myRemoveLastPath You need to cast to NSString with NSString's stringWithString: and cast back to Apple Script string with as text. The 's is how you can invoke functions. One more thing is that we can support parameters to function, like this script 12345on remove:remove_string fromString:source_string set s_String to NSString's stringWithString:source_string set r_String to NSString's stringWithString:remove_string return s_String's stringByReplacingOccurrencesOfString:r_String withString:&quot;&quot;end remove:fromString:","link":"/blog/String-manipulation-in-Apple-Script/"},{"title":"Testimonial","text":"Issue #169 https://medium.com/@kylpo/wow-i-learned-so-much-from-this-article-thank-you-595f29077633 https://stackoverflow.com/questions/34990175/test-target-x-encountered-an-error-early-unexpected-exit-operation-never-finis/36343395?noredirect=1#comment94467666_36343395 https://github.com/onmyway133/notes/issues/2 https://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects/26034755#26034755 https://stackoverflow.com/a/46122458/1418457","link":"/blog/Testimonial/"},{"title":"Swift snippets","text":"Issue #17 I always forget how to write correct #available( or #if swift(&gt;=3.0) or just lazy to write required init?(coder aDecoder: NSCoder) every time I make a subclass. That‚Äôs why I made SwiftSnippets to save time for these tedious tasks. Installation is easy with script, so you should give it a try. I can‚Äôt recommend this enough, it saves me tons of time","link":"/blog/Swift-snippets/"},{"title":"Talks","text":"Issue #111 Please visit https://onmyway133.github.io/speaking","link":"/blog/Talks/"},{"title":"Testing keychain in iOS","text":"Issue #92 Today I was upgrading Keychain to swift 4, and take this opportunity to fix the test. The tests pass on macOS, but on iOS, I get -25300 error for 1var status = SecItemCopyMatching(query as CFDictionary, nil) It is because there is no Keychain entitlement for test target. But this is a framework, how can I add entitlement ü§î The solution is to use a Test Host to host the XCTest tests. See my pull request Create test host target First create an iOS app to act as a test host, you can name it TestHost_iOS Enable Keychain capability Then enable Keychain capability to let Xcode automatically create an entitlement file for you. Note that you can just enter the Keychain group. You don‚Äôt need go to Apple Developer dashboard to configure anything Specify Test Host Then in you test target, specify Test Host by using $(BUILT_PRODUCTS_DIR)/TestHost_iOS.app/TestHost_iOS Now run your test again, it should pass üéâ","link":"/blog/Testing-keychain-in-iOS/"},{"title":"Sync and async code in Swift","text":"Issue #75 We should use DispatchQueue to build thread safe code. The idea is to prevent two read and write from happening at the same time from 2 different threads, which cause data corruption and unexpected behaviors. Note that you should try to avoid deadlock https://stackoverflow.com/questions/15381209/how-do-i-create-a-deadlock-in-grand-central-dispatch All syncUse try catch, together with serial queue. Use sync function to block current queue. 1234567891011121314func getUser(id: String) throws -&gt; User { var user: User! try serialQueue.sync { user = try storage.getUser(id) } return user}func setUser(_ user: User) throws { try serialQueue.sync { try storage.setUser(user) }} All asyncUse Result, toget with serial queue. Use async function to return to current queue. 12345678910111213141516171819202122232425262728enum Result&lt;T&gt; { case value(T) case error(Error)}func getUser(id: String, completion: (Result&lt;User&gt;) - Void) { try serialQueue.async { do { user = try storage.getUser(id) completion(.value(user)) } catch { completion(.error(error)) } } return user}func setUser(_ user: User, completion: (Result&lt;()&gt;) -&gt; Void) { try serialQueue.async { do { try storage.setUser(user) completion(.value(()) } catch { completion(.error(error)) } }} Sync read, async writeUse try catch for read, Result for write, together with concurrent queue. Use sync function for read to block current thread, while using async function with barrier flag for write to return to current queue. This is good for when multiple reads is preferred when there is no write. When write with barrier comes into the queue, other operations must wait. 12345678910111213141516171819func getUser(id: String) throws -&gt; User { var user: User! try concurrentQueue.sync { user = try storage.getUser(id) } return user}func setUser(_ user: User, completion: (Result&lt;()&gt;) -&gt; Void) { try concurrentQueue.async(flags: .barrier) { do { try storage.setUser(user) completion(.value(()) } catch { completion(.error(error)) } }} Testing for asynchronyBefore we could use dispatch_apply to submits a block to a dispatch queue for multiple invocations. Starting with Swift, the equivalence is concurrentPerform 1234DispatchQueue.concurrentPerform(iterations: 1000) { index in let last = array.last ?? 0 array.append(last + 1)} Reference http://basememara.com/creating-thread-safe-arrays-in-swift/ https://oleb.net/blog/2013/07/parallelize-for-loops-gcd-dispatch_apply/","link":"/blog/Sync-and-async-code-in-Swift/"},{"title":"The luxury of free time","text":"Issue #15 What to see https://feedly.com/i/latest https://news.ycombinator.com/ https://medium.com/ https://github.com/onmyway133/fantastic-design#inspiration CS Dojo How https://www.raywenderlich.com/167015/learning-techniques-programmers","link":"/blog/The-luxury-of-free-time/"},{"title":"Trying IBM Watson","text":"Issue #162","link":"/blog/Trying-IBM-Watson/"},{"title":"Understanding CanvasRenderingContext2D and UIBezierPath","text":"Issue #180 CanvasRenderingContext2Dhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic B√©zier curve to the current sub-path. It requires three points: the first two are control points and the third one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the B√©zier curve. 1void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y); Where order is control point 1, control point 2 and end point UIBezierPathhttps://developer.apple.com/documentation/uikit/uibezierpath/1624357-addcurve Appends a cubic B√©zier curve to the receiver‚Äôs path. 1addCurve(to:controlPoint1:controlPoint2:) The same for void ctx.quadraticCurveTo(cpx, cpy, x, y); and addQuadCurve(to:controlPoint:)","link":"/blog/Understanding-CanvasRenderingContext2D-and-UIBezierPath/"},{"title":"UITableViewCell and Model","text":"Issue #154 The most common UI element in iOS is UITableView, and the most common task is to display the UITableViewCell using the model. Although the title specifies UITableViewCell, but the problem involves other views (UICollectionView, custom view, ‚Ä¶) as well There are many debates about this, so here I want to make a summary, all in my opinion It started withUITableViewCell Is Not a ControllerThis article follows strict MVC and states we should not pass model object to cell and let cell manipulate directly on the model. He shows several examples that point out this job is not suitable for the cell. Instead this job should be done on the Controller (UIViewController, UITableViewDataSource, ‚Ä¶) Category for simple caseSkinnier Controllers Using View CategoriesThis article states that we should keep ViewController skinnier by transfering the job (mapping model object to cell) to the cell category Using subclassingUITableViewCell Is Not a Controller, But‚Ä¶This articles explains the beauty of subclassing to take advantage of Polymorphism. In the theming example he gives, we see that Controller ‚Äòs job now is to select the correct cell subclass, and the subclass ‚Äòs job is to know how to use the model‚ÄúWhen a UITableViewCell subclass accepts a model object parameter and updates its constituent subviews as I have described, it is behaving as a data transformer, not a controller‚Äù Model PresenterModel View Controller PresenterThis article shows that using subclassing and category will have duplication implementation when you have more cells and models. After several optimizations, he finally gets to the Model Presenter, which is the center object who knows how to represent the model in different view.‚ÄúThis is an object that knows how to represent every aspect of a certain model‚Äù MVVMMVC, MVVM, FRP, And Building BridgesThis article explains MVVM but it touches our problem directly. The problem with cell and model actually is How to map the model to the cell Who will do this job? The cell, Controller or another Model Mapping object ? The ViewModel is actually who does this work, which is to transform the model to something the view can easily use ‚ÄúA table view data source is none of these things. It‚Äôs purely a layer between the table view and the model. The model defines lists of things, but the table view data source transform those lists into sections and rows. It also returns the actual table view cells, but that‚Äôs not what I‚Äôm focusing on here. The key is its role as a middle-tier data transformer.‚Äù Do we access the cell ‚Äòs subviewsPaul on UITableViewCellBrent follows with another post explaining how cell ‚Äòs subviews should not be accessed outside of the cell Data SourceClean table view codeThis article deals with Bridging the Gap Between Model Objects and Cells.‚ÄúAt some point we have to hand over the data we want to display into the view layer. Since we still want to maintain a clear separation between the model and the view, we often offload this task to the table view‚Äôs data source. This kind of code clutters the data source with specific knowledge about the design of the cell. We are better off factoring this out into a category of the cell class‚Äù This together with Lighter View Controllers shows a practical example that deals with most cases Reference Should UITableViewCells Know About Model Objects?","link":"/blog/UITableViewCell-and-Model/"},{"title":"Understanding AVFoundation and MediaPlayer frameworks in iOS","text":"Issue #210 Depending on what features we want to achieve, we need to go with either AVFoundation or MediaPlayer framework. As someone who worked with many apps that involve media playback, here are some of my observations MPMoviePlayerController vs AVPlayerAt first, I use MPMoviePlayerController because it is very simple, in fact, it is a wrapper around AVPlayer. It offers a lot of useful notifications and properties. But when my requirements change, a lot more features are needed, I need to change to AVPlayer to have more control. And that is the wisest decision I‚Äôve ever made You should use AVPlayer as soon as possible. Using it cost you just a little longer time than MPMoviePlayerController, but you have a lot of control. Custom controlsWhen building your own player, the built in controls of MPMoviePlayerController may not satisfy your need. I see many questions on SO are about custom controls. MPMoviePlayerControllerYou have to set controlStyle to MPMovieControlStyleNone, set up Timer because currentPlaybackTime is not KVO compliance AVPlayerAVPlayer has no built in controls, but it has addPeriodicTimeObserverForInterval:queue:usingBlock: that makes handling the current time easily. The nicer thing about periodTimeObserver is that ‚ÄúThe block is also invoked whenever time jumps and whenever playback starts or stops‚Äù NotificationMPMoviePlayerControllerIt has a lot of useful notifications, like MPMoviePlayerNowPlayingMovieDidChangeNotification, MPMoviePlayerLoadStateDidChangeNotification, MPMovieDurationAvailableNotification, ‚Ä¶ AVPlayerThe AVPlayerItem has some notifications AVPlayerItemDidPlayToEndTimeNotification, AVPlayerItemPlaybackStalledNotification, ‚Ä¶If you want to have those same notifications as MPMoviePlayerController, you have to KVO some properties of AVPlayer like currentItem, currentTime, duration, ‚Ä¶ You have to read documents to make sure which property is KVO compliance SeekMPMoviePlayerControllerYou can change the currentPlaybackTime to seek, but it results in jumping, because of efficiency and buffer status. I have to manually disable slider during seeking AVPlayerAVPlayer has this seekToTime:toleranceBefore:toleranceAfter:completionHandler: which allows you to specify the tolerance. Very nice SubtitleMPMoviePlayerControllerI have to schedule a timer that ‚Äúwake‚Äù and ‚Äúsleep‚Äù at the beginning and end time of a certain subtitle marker, respectively. AVPlayerAVPlayer has this addBoundaryTimeObserverForTimes:queue:usingBlock: that perfectly suits my need. I setup 2 boundary time observers, 1 for the beginning times, 1 for the end times. The beginning times is an array containing all beginning timestamps that a subtitle marker appears. Time scaleAVPlayer uses CMTime that offers timescale, which is a more comfortable way to specify more accurate time VolumeAVPlayer has volume property (relative to system volume) that allows me to programmatically changes the player volume Playable durationMPMoviePlayerControllerIt has playableDuration property AVPlayerYou have to compute yourself. See http://stackoverflow.com/questions/6815316/how-can-i-get-the-playable-duration-of-avplayer Full screenMPMoviePlayerController achieves full screen mode by creating another UIWindow, you learn from this to support full screen using AVPlayer, too Movie Source TypeMPMoviePlayerControllerIt has movieSourceType that provides clues to the playback system, hence improving load time ‚Äú If you know the source type of the movie, setting the value of this property before playback begins can improve the load times for the movie content.‚Äù AVPlayerRead Handling Different Types of Asset on AV Foundation Programming Guide ‚ÄúTo create and prepare an HTTP live stream for playback. Initialize an instance of AVPlayerItem using the URL. (You cannot directly create an AVAsset instance to represent the media in an HTTP Live Stream.)‚Äù AVAssetAVPlayer allows you to access AVAsset, which provides you more information about the playback and load state Allow a range within a video to be playableAVPlayerItem has forwardPlaybackEndTime and reversePlaybackEndTime that is used to specify a range that the player can play. When forwardPlaybackEndTime is specified and the playhead passes this points, AVPlayerItem will trigger AVPlayerItemDidPlayToEndTimeNotification But it doesn‚Äôt work in my case forwardPlaybackEndTime does not work You can have many instances of AVPlayer playing at the same timeRead more AV Foundation Programming Guide WWDC 2011 Session 405 Exploring AV Foundation WWDC 2011 Session 415 Working With Media In AV Foundation WWDC 2014 Session 503 Mastering Modern Media Playback WWDC 2011 Session 406 AirPlay and External Displays in iOS apps AVPlayerDemo VKVideoPlayer ALMoviePlayerController AV Foundation Playing Videos AVPlayer and MPMoviePlayerController differences MPMoviePlayer Tips","link":"/blog/Understanding-AVFoundation-and-MediaPlayer-frameworks-in-iOS/"},{"title":"Understanding Instance property vs parameter in Swift","text":"Issue #72 The other day I was refactor my code. I have 12345678extension MainController: TabBarViewDelegate { func buttonDidPress index: Int) { let initialIndex = tabBarView.selectedIndex let wholeAppContentView = updateWholeAppContentView() view.addSubview(wholeAppContentView) }} The delegate method does not look right, as it‚Äôs hard to tell between required delegate method, or just instance method. Also it lacks a subject. I like this post API Design, you can read section Rule 19: Always say who‚Äôs talking This is a simple rule, and an equally simple mistake to make. In your delegate methods, always pass the sender as a parameter. Always. Even for singletons. Even for things you cannot conceive would ever be used more than once simultaneously. No exceptions. So I refactor the delegate, and conform to it. 12345678extension MainController: TabBarViewDelegate { func tabBarView(_ view: TabBarView, buttonDidPress index: Int) { let initialIndex = tabBarView.selectedIndex let wholeAppContentView = updateWholeAppContentView() view.addSubview(wholeAppContentView) // This is the culprit ‚ö†Ô∏è }} Even with just 1 line change in MainController.swift, the whole UI breaks, as all the views were added to the tab bar. Strange üò° . It didn‚Äôt take long until I remember that parameter takes precedence over instance property if they have same name. So in this case, the compiler, without warning, assume you‚Äôre dealing with view from TabBarView ‚ö†Ô∏è That‚Äôs why you often use self to disambiguate. 123456789struct User: Codable, Equatable { let firstName: String let lastName: String init(firstName: String, lastName: String) { self.firstName = firstName self.lastName = lastName }} Back to our code. The workaround is to specify self to specify view of MainController 1self.view.addSubview(wholeAppContentView) Well, you may say, who should add view again in case of tab bar changes üò¨ This is a bad example, but the lesson is learned üòá","link":"/blog/Understanding-Instance-property-vs-parameter-in-Swift/"},{"title":"Understanding device and OS share for iOS and Android","text":"Issue #316 Browsers and devices used in 2018 AppStore measurement","link":"/blog/Understanding-device-and-OS-share-for-iOS-and-Android/"},{"title":"Understanding SDK and Deployment Target in iOS","text":"Issue #33 I see that my answer to the question What‚Äôs the meaning of Base SDK, iOS deployment target, Target, and Project in xcode gets lots of views, so I think I need to elaborate more about it Good read iOS 7 TechTalk - Architecting Modern Apps, Part 2 Configuring a Project for SDK-Based Development Base SDK We can‚Äôt configure this anymore, as Xcode will use the latest SDK. For Xcode 7, the SDK is iOS 9 If we upgrade Xcode, it will use the newer version of the SDK. Like Xcode 7.2, the SDK is iOS 9.1 Choosing the latest SDK for your project lets you use the new APIs introduced in the OS update that corresponds to that SDK. When new functionality is added as part of a system update, the system update itself does not typically contain updated header files reflecting the change. The SDKs, however, do contain updated header files. Deployment Target We can set in Xcode -&gt; Target -&gt; Deployment Info -&gt; Deployment Target State that we support this iOS version What does it mean So, a modern App might use iOS 9 as the Target SDK, and iOS 7 as the deployment target. This means that you can run on iOS 7, iOS 8 and iOS 9, and that you have available to you any iOS 9 calls when actually running on iOS 9. . Each .sdk directory resembles the directory hierarchy of the operating system release it represents: It has usr, System, and Developer directories at its top level. OS X .sdk directories also contain a Library directory. Each of these directories in turn contains subdirectories with the headers and libraries that are present in the corresponding version of the operating system with Xcode installed. . The libraries in an iOS or OS X SDK are stubs for linking only; they do not contain executable code but just the exported symbols. SDK support works only with native build targets. So the SDK is just like stub and header only. It means that we can use certain APIs, but on OS that does not have the real symbols for those APIs, it crashes availableSwift 2 introduces available construct that guards against failure when trying to use newer APIs. Note that available is runtime, not compile time. All the code is inside your executable 12345if #available(iOS 9, OSX 10.10, *) { // Code to execute on iOS 9, OS X 10.10} else {} deprecated APIs Finding Instances of Deprecated API Usage Always check to see if you are using deprecated APIs; though still available, deprecated APIs are not guaranteed to be available in the future Compile time vs Runtime Conditionally Compiling for Different SDKs 12345#if (arch(i386) || arch(x86_64)) &amp;&amp; os(iOS) // code inside gets inserted into executable when builds for simulator#else // code inside gets inserted into executable when builds for device#endif 12345#if os(OSX) import Cocoa#elseif os(iOS) import UIKit#endif 123456// All the code gets inserted into executable, but is run depending on the version of the OSif #available(iOS 9, *) { // use UIStackView} else { // show your manual Auto Layout skill} Weakly vs strongly linked Weak Linking and Apple Frameworks What does it mean to ‚Äúweak-link‚Äù a framework? Frameworks and Weak Linking For example, suppose in Xcode you set the deployment target (minimum required version) to ‚ÄúOS X v10.5‚Äù and the base SDK (maximum allowed version) to ‚ÄúOS X v10.6‚Äù. During compilation, the compiler would weakly link interfaces that were introduced in OS X v10.6 while strongly linking interfaces defined in earlier versions of the OS. This would allow your application to run in OS X v10.5 and take advantage of newer features when available. . None of the (platform) frameworks is really ‚Äúincluded in the bundle‚Äù. Instead, your app has a reference (‚Äúlink‚Äù) to a framework once you add it to the ‚ÄúLink Binary with Library‚Äù build phase. The frameworks are pre-installed on the devices. When you run an app, all the app‚Äôs framework references are resolved by the dynamic linker (on the device), which means the framework code is loaded so your app can use it. Reference Checking API Availability With Swift","link":"/blog/Understanding-SDK-and-Deployment-Target-in-iOS/"},{"title":"Understanding let, apply, with, run in Kotlin","text":"Issue #114 Picture worths thousand words. Code worths thousand pictures. I don‚Äôt understand much until I take a look at Standard.kt in Kotlin standard library. 12345678910111213141516171819202122/** * Calls the specified function [block] with `this` value as its receiver and returns `this` value. */@kotlin.internal.InlineOnlypublic inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T { contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) } block() return this}/** * Calls the specified function [block] with `this` value as its argument and returns its result. */@kotlin.internal.InlineOnlypublic inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R { contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) } return block(this)} apply returns T and accepts a block of type T.() -&gt; Unit. This is called Function Literals with Receiver Kotlin provides the ability to call a function literal with a specified receiver object. Inside the body of the function literal, you can call methods on that receiver object without any additional qualifiers. This is similar to extension functions, which allow you to access members of the receiver object inside the body of the function let returns R and accepts a block of type T -&gt; R. Inside the block, you can access it which is it: implicit name of a single parameter","link":"/blog/Understanding-let-apply-with-run-in-Kotlin/"},{"title":"Understanding push and pull signal in reactive paradigm","text":"Issue #28 The idea of Signal may originate from Elm Reactivity, and it has now been widely adopted in iOS I once asked What are examples of hot and cold signal in ReactiveCocoa? When to use IEnumerable vs IObservable? [ReactiveCocoa Framework Overview](Framework Overview) Rx ‚Äì for beginners (part 9): Hot Vs. Cold observable RxSwift Hot and Cold Observables Whether it is hot vs cold, Signal vs Signal Producer, Observable vs Enumerable, ‚Ä¶ it‚Äôs good to understand how it gets implemented, so that to have a good sense of how they work Monad Understanding Monad Basically, Signal and its Result are just monads, which are thing that can be mapped and chained. Signal makes use of deferred execution callback blocks, and push vs pull is just how the Signal updates its value and the order the callbacks are called Execution callback block is that we pass a function to another function, and it will get called when appropriated Sync vs AsyncMonad can be in either sync or async mode. Sync is easier to understand, but async is somewhat you‚Äôre already familiar and used in practice Basically, Sync: you get the returned value right away via return Aync: you get the returned value via callback block Here is an example of a simple function 123456789101112// Syncfunc sum(a: Int, b: Int) -&gt; Int { return a + b}// Asyncfunc sum(a: Int, b: Int, completion: Int -&gt; Void) { // Assumed it is a very long task to get the result let result = a + b completion(result)} Here is an example of Event 1234567891011121314151617181920212223// Syncpublic func map&lt;U&gt;(@noescape f: T -&gt; U) -&gt; Event&lt;U&gt; { switch self { case let .Next(value): return .Next(value: f(value)) case let .Failed(error): return .Failed(error: error) }}// Asyncpublic func map&lt;U&gt;(f: (T, U -&gt; Void) -&gt; Void) -&gt; ((Event&lt;U&gt; -&gt; Void) -&gt; Void) { return { g in // g: Event&lt;U&gt; -&gt; Void switch self { case let .Next(value): f(value) { transformedValue in // transformedValue: U g(.Next(value: transformedValue)) } case let .Failed(error): g(.Failed(error: error)) } } } Push Signal Signal.swift UIKonf 2015 - Jens Ravens: Functional Reactive Programming without Black Magic Take a look at my Push Signal, called Signal, it is like how Promise A+ Then works Implementation12345678910111213141516171819202122232425262728293031323334353637383940414243public final class Signal&lt;T&gt; { var event: Event&lt;T&gt;? var callbacks: [Event&lt;T&gt; -&gt; Void] = [] func notify() { guard let event = event else { return } callbacks.forEach { callback in callback(event) } } func update(event event: Event&lt;T&gt;) { dispatch_sync(lockQueue) { self.event = event } notify() } public func subscribe(f: Event&lt;T&gt; -&gt; Void) -&gt; Signal&lt;T&gt; { // Callback if let event = event { f(event) } callbacks.append(f) return self } public func map&lt;U&gt;(f: T -&gt; U) -&gt; Signal&lt;U&gt; { let signal = Signal&lt;U&gt;() subscribe { event in signal.update(event: event.map(f)) } return signal }} Usage12345678910111213let signal = Signal&lt;String&gt;()signal.map { value in return value.characters.count }.subscribe { event in if case let .Next(value) = event { XCTAssert(value == 4) } else { XCTAssert(false) }}signal.sendNext(\"test\") CallbacksGiven a chained signals like this A -(map)-&gt; B -(flatMap)-&gt; C -(flatMap)-&gt; D -(subscribe) The idea is we send event to the source signal, and it propagates events through via callbacks. Triggered by sending event to the source signal. We must keep A as it keeps the others around We subscribe the last D We send event to the first A A ‚Äòs callback gets called, it it in turn calls callback of B with the result of A ‚Äòs map, then B ‚Äòs callback calls C ‚Äòs callback with the result of B‚Äòs flatMap, ‚Ä¶ Pull Signal Future.swift Swift Sync and Async Error Handling - iOS Conf SG 2015 Take a look at my Pull Signal, called Future ImplementationHere operation is a task, when called and completed, will notify its completion 123456789101112131415161718192021public struct Future&lt;T&gt; { let operation: (Event&lt;T&gt; -&gt; Void) -&gt; Void public init(operation: (Event&lt;T&gt; -&gt; Void) -&gt; Void) { self.operation = operation } public func start(completion: Event&lt;T&gt; -&gt; Void) { operation() { event in completion(event) } } public func map&lt;U&gt;(f: T -&gt; U) -&gt; Future&lt;U&gt; { return Future&lt;U&gt; { completion in self.start { event in completion(event.map(f)) } } }} Usage12345678910111213let _ = Future&lt;String&gt; { completion in // There is some work here completion(Event(value: &quot;test&quot;)) } .map { value in value.characters.count }.start { event in if case let .Next(value) = event { XCTAssert(value == 4) } else { XCTAssert(false) } } CallbacksGiven a chained signals like this A -(map)-&gt; B -(flatMap)-&gt; C -(flatMap)-&gt; D -(subscribe) The idea is we subscribe to the final signal D, and it cause the previous signals to action. Triggered by subscribing to the final signal. We must keep D as it keeps the others around We subscribe the last D D ‚Äòs operation actions, and it cause C ‚Äòs operation to action, ‚Ä¶ then A ‚Äòs operation actions. It is in A that the task is performed (like fetching network, retrieving database, file access, heavy computation, ‚Ä¶) to get the result, and A ‚Äòs completion gets called. Then A‚Äôs completion calls B ‚Äòs completion with the result mapped by B ‚Äòs map, ‚Ä¶ all the way to the subscriber ‚Äòs completion block","link":"/blog/Understanding-push-and-pull-signal-in-reactive-paradigm/"},{"title":"Using Playground with CocoaPods","text":"Issue #113 This is a follow up from my post Learning from Open Source: Using Playground on how to actually add a playground to your production project. The idea is simple: create a framework so that Playground can access the code. This demo an iOS project with CocoaPods. See the demo https://github.com/onmyway133/UsingPlayground This is also my question to this question https://stackoverflow.com/questions/47589855/how-to-expose-your-project-code-to-a-xcode-playground-when-using-cocoapods/47595120#47595120 1. Add a podCreate a new project called UsingPlayground. Create a Podfile with a pod Cheers because we want something fun üòÑ 123456platform :ios, '9.0'use_frameworks!pod 'Cheers'target 'UsingPlayground' 2. Use the pod in your projectThis is very straightforward. Just to make sure the pod work 12345678910111213141516171819import UIKitimport Cheersclass ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let cheerView = CheerView() view.addSubview(cheerView) cheerView.frame = view.bounds // Configure cheerView.config.particle = .confetti // Start cheerView.start() }} Build and run the project to enjoy a very fascinating confetti üéä 3. Add a CocoaTouch frameworkIn your workspace, select the UsingPlayground project, add new CocoaTouch framework. Let‚Äôs call it AppFramework. Then add source files to this framework. For now, just check file ViewController.swift add add it to the AppFramework target too. 4. PublicSwift types and methods are internal by default. So in order for them to be visible in the Playground, we need to declare them as public. 123public class ViewController: UIViewController { ...} 5. Add pod to AppFrameworkIn order for AppFramework to use our pods, we need to add those pods into framework target as well. Add target 'AppFramework' to your Podfile 123456789platform :ios, '9.0'use_frameworks!pod 'Cheers'target 'UsingPlayground'target 'AppFramework' Now run pod install again. In some rare cases, you need to run pod deintegrate and pod install to start from a clean slate 6. Add a PlaygroundAdd a Playground and drag that to our workspace. Let‚Äôs call it MyPlayground 6. EnjoyNow edit our MyPlayground. You can import frameworks from pod and our AppFramework 1234567891011121314151617import UIKitimport Cheersimport AppFrameworkimport PlaygroundSupportlet cheerView = CheerView()cheerView.frame = CGRect(x: 0, y: 50, width: 200, height: 400)// ConfigurecheerView.config.particle = .confetti// StartcheerView.start()let myController = ViewController()PlaygroundPage.current.liveView = myController.view Remember to toggle Editor Mode so you can see Playground result","link":"/blog/Using-Playground-with-CocoaPods/"},{"title":"Understanding socket and port in TCP","text":"Issue #287 When digging into the world of TCP, I get many terminologies I don‚Äôt know any misconceptions. But with the help of those geeks on SO, the problems were demystified. Now it‚Äôs time to sum up and share with others :D What defines a unique connection ?There are 5 elements that identify a connection. They call them 5-tuple Protocol. This is often omitted as it is understood that we are talking about TCP, which leaves 4. Source IP address. Source port. Target P address. Target port. Does TCP listen on one port and talk on another port ?No. This is a common misconception. TCP listens on 1 port and talk on that same port. If clients make multiple TCP connection to server. It‚Äôs the client OS that must generate different random source ports, so that server can see them as unique connections What is the maximum number of concurrent TCP connections that a server can handle, in theory ?A single listening port can accept more than one connection simultaneously.There is a ‚Äò64K‚Äô limit that is often cited, but that is per client per server port, and needs clarifying. If a client has many connections to the same port on the same destination, then three of those fields will be the same ‚Äî only source_port varies to differentiate the different connections. Ports are 16-bit numbers, therefore the maximum number of connections any given client can have to any given host port is 64K. However, multiple clients can each have up to 64K connections to some server‚Äôs port, and if the server has multiple ports or either is multi-homed then you can multiply that further So the real limit is file descriptors. Each individual socket connection is given a file descriptor, so the limit is really the number of file descriptors that the system has been configured to allow and resources to handle. The maximum limit is typically up over 300K, but is configurable e.g. with sysctl Concurrent connection request vs Concurrent open connectionWhen clients want to make TCP connection with server, this request will be queued in server ‚Äòs backlog queue. This backlog queue size is small (about 5‚Äì10), and this size limits the number of concurrent connection requests. However, server quickly pick connection request from that queue and accept it. Connection request which is accepted are called open connection. The number of concurrent open connections is limited by server ‚Äòs resources allocated for file descriptor. Why connection is rejected after successful TCP handshake ?It‚Äôs normal. When server receive connection request from client (by receiving SYN), it will then response with SYN, ACK, hence cause successful TCP handshake. But this request are stills in backlog queue. But, if the application process exceeds the limit of max file descriptors it can use, then when server calls accept, then it realizes that there are no file descriptors available to be the allocated for the socket and fails the accept call and the TCP connection sending a FIN to other side What are active and passive socket ?Sockets come in two primary flavors. An active socket is con¬≠nect¬≠ed to a remote active socket via an open data con¬≠nec¬≠tion‚Ä¶ A passive socket is not con¬≠nect¬≠ed, but rather awaits an in¬≠com¬≠ing con¬≠nec¬≠tion, which will spawn a new active socket once a con¬≠nec¬≠tion is es¬≠tab¬≠lished Each port can have a single passive socket binded to it, await¬≠ing in¬≠com¬≠ing con¬≠nec¬≠tions, and mul¬≠ti¬≠ple active sockets, each cor¬≠re¬≠spond¬≠ing to an open con¬≠nec¬≠tion on the port. It‚Äôs as if the factory worker is waiting for new mes¬≠sages to arrive (he rep¬≠re¬≠sents the passive socket), and when one message arrives from a new sender, he ini¬≠ti¬≠ates a cor¬≠re¬≠spon¬≠dence (a con¬≠nec¬≠tion) with them by del¬≠e¬≠gat¬≠ing someone else (an active socket) to ac¬≠tu¬≠al¬≠ly read the packet and respond back to the sender if nec¬≠es¬≠sary. This permits the factory worker to be free to receive new packets Where to go from hereHere are some more links to help you explore further What is the difference between a port and a socket? Passive and active sockets Why will a TCP Server send a FIN immediately after accepting a connection? What is the theoretical maximum number of open TCP connections that a modern Linux box can have socket listen backlog parameter, how to determine this value? Question about listening and backlog for sockets Rejecting a TCP connection before it‚Äôs being accepted? Best way to generate million tcp connection Max parallel http connections in a browser? How to retain one million simultaneous TCP connections? TCP RST packet details How many tuples are there in a connection? Does TCP use another port for sending data?","link":"/blog/Understanding-socket-and-port-in-TCP/"},{"title":"Understanding suspend function in Kotlin Coroutine in Android","text":"Issue #123 Getting to know CoroutineFrom https://kotlinlang.org/docs/reference/coroutines.html To continue the analogy, await() can be a suspending function (hence also callable from within an async {} block) that suspends a coroutine until some computation is done and returns its result: From https://kotlinlang.org/docs/tutorials/coroutines-basic-jvm.html We are using the delay() function that‚Äôs like Thread.sleep(), but better: it doesn‚Äôt block a thread, but only suspends the coroutine itself. The thread is returned to the pool while the coroutine is waiting, and when the waiting is done, the coroutine resumes on a free thread in the pool. await() can not be called outside a coroutine, because it needs to suspend until the computation finishes, and only coroutines can suspend in a non-blocking way What does suspend function mean in Kotlin Coroutine ü§îhttps://stackoverflow.com/questions/47871868/what-does-suspend-function-mean-in-kotlin-coroutine I‚Äôm reading Kotlin Coroutine and know that it is based on suspend function. But what does suspend mean? Coroutine or function gets suspended? From https://kotlinlang.org/docs/reference/coroutines.html Basically, coroutines are computations that can be suspended without blocking a thread I heard people often say ‚Äúsuspend function‚Äù. But I think it is the coroutine who gets suspended because it is waiting for the function to finished? ‚Äúsuspend‚Äù usually means ‚Äúcease operation‚Äù, in this case the coroutine is idle. Should we say the coroutine is suspended ? Which coroutine gets suspended? From https://kotlinlang.org/docs/reference/coroutines.html To continue the analogy, await() can be a suspending function (hence also callable from within an async {} block) that suspends a coroutine until some computation is done and returns its result: 123456async { // Here I call it the outer async coroutine ... // Here I call computation the inner coroutine val result = computation.await() ...} ü§î It says ‚Äúthat suspends a coroutine until some computation is done‚Äù, but coroutine is like a lightweight thread. So if the coroutine is suspended, how can the computation is done ? We see await is called on computation, so it might be async that returns Deferred, which means it can start another coroutine 12345fun computation(): Deferred&lt;Boolean&gt; { return async { true }} ü§î The quote say that suspends a coroutine. Does it mean suspend the outer async coroutine, or suspend the inner computation coroutine? Does suspend mean that while outer async coroutine is waiting (await) for the inner computation coroutine to finish, it (the outer async coroutine) idles (hence the name suspend) and returns thread to the thread pool, and when the child computation coroutine finishes, it (the outer async coroutine) wakes up, takes another thread from the pool and continues? The reason I mention the thread is because of https://kotlinlang.org/docs/tutorials/coroutines-basic-jvm.html The thread is returned to the pool while the coroutine is waiting, and when the waiting is done, the coroutine resumes on a free thread in the pool Understanding asyncFrom https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md Conceptually, async is just like launch. It starts a separate coroutine which is a light-weight thread that works concurrently with all the other coroutines. The difference is that launch returns a Job and does not carry any resulting value, while async returns a Deferred ‚Äì a light-weight non-blocking future that represents a promise to provide a result later. You can use .await() on a deferred value to get its eventual result, but Deferred is also a Job, so you can cancel it if needed. 12345678fun main(args: Array&lt;String&gt;) = runBlocking&lt;Unit&gt; { val time = measureTimeMillis { val one = async { doSomethingUsefulOne() } val two = async { doSomethingUsefulTwo() } println(\"The answer is ${one.await() + two.await()}\") } println(\"Completed in $time ms\")} There is a laziness option to async using an optional start parameter with a value of CoroutineStart.LAZY. It starts coroutine only when its result is needed by some await or if a start function is invoked. Run the following example that differs from the previous one only by this option: 12345678fun main(args: Array&lt;String&gt;) = runBlocking&lt;Unit&gt; { val time = measureTimeMillis { val one = async(start = CoroutineStart.LAZY) { doSomethingUsefulOne() } val two = async(start = CoroutineStart.LAZY) { doSomethingUsefulTwo() } println(\"The answer is ${one.await() + two.await()}\") } println(\"Completed in $time ms\")} What is the difference between launch/join and async/await in Kotlin coroutineshttps://stackoverflow.com/a/48079738/1418457 I find this guide https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md to be useful. I will quote the essential parts ü¶Ñ coroutine Essentially, coroutines are light-weight threads. So you can think of coroutine as something that manages thread in a very efficient way. üê§ launch 12345678fun main(args: Array&lt;String&gt;) { launch { // launch new coroutine in background and continue delay(1000L) // non-blocking delay for 1 second (default time unit is ms) println(\"World!\") // print after delay } println(\"Hello,\") // main thread continues while coroutine is delayed Thread.sleep(2000L) // block main thread for 2 seconds to keep JVM alive} So launch starts a background thread, does something, and returns a token immediately as Job. You can call join on this Job to block until this launch thread completes 12345678fun main(args: Array&lt;String&gt;) = runBlocking&lt;Unit&gt; { val job = launch { // launch new coroutine and keep a reference to its Job delay(1000L) println(\"World!\") } println(\"Hello,\") job.join() // wait until child coroutine completes} ü¶Ü async Conceptually, async is just like launch. It starts a separate coroutine which is a light-weight thread that works concurrently with all the other coroutines. The difference is that launch returns a Job and does not carry any resulting value, while async returns a Deferred ‚Äì a light-weight non-blocking future that represents a promise to provide a result later. So async starts a background thread, does something, and returns a token immediately as Deferred. 12345678fun main(args: Array&lt;String&gt;) = runBlocking&lt;Unit&gt; { val time = measureTimeMillis { val one = async { doSomethingUsefulOne() } val two = async { doSomethingUsefulTwo() } println(\"The answer is ${one.await() + two.await()}\") } println(\"Completed in $time ms\")} You can use .await() on a deferred value to get its eventual result, but Deferred is also a Job, so you can cancel it if needed. So Deferred is actually a Job. See https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/-deferred/index.html 1interface Deferred&lt;out T&gt; : Job (source) ü¶ã async is eager by default There is a laziness option to async using an optional start parameter with a value of CoroutineStart.LAZY. It starts coroutine only when its result is needed by some await or if a start function is invoked. Understand Kotlin Coroutines on Android (Google I/O‚Äô19)https://www.youtube.com/watch?v=BOHK_w09pVA","link":"/blog/Understanding-suspend-function-in-Kotlin-Coroutine-in-Android/"},{"title":"UnsafePointer in Swift","text":"Issue #130 Code is in Swift 4 Constructing UnsafeMutablePointer12let byteCount = 32let result = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: byteCount) Data to UnsafePointer123456789101112131415extension Data { func toPointer() -&gt; UnsafePointer&lt;UInt8&gt;? { let buffer = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: count) let stream = OutputStream(toBuffer: buffer, capacity: count) stream.open() withUnsafeBytes({ (p: UnsafePointer&lt;UInt8&gt;) -&gt; Void in stream.write(p, maxLength: count) }) stream.close() return UnsafePointer&lt;UInt8&gt;(buffer) }} UnsafePointer to Data12345extension UnsafePointer { func toData() -&gt; Data { return Data(bytes: UnsafeRawPointer(self), count: 32) }} Dealing with C APIThis is how to do keccak hash using C API from https://github.com/ethereum/ethash/blob/master/src/libethash/sha3.c 12345678910111213class KeccakHash { func hash(data: Data) throws -&gt; Data { guard let dataPointer = data.toPointer() else { throw InteralError.invalid } let byteCount = 32 let result = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: byteCount) sha3_256(result, byteCount, dataPointer, data.count) return result.toData() }} Read more See https://github.com/onmyway133/Reindeers/blob/master/Sources/Extensions.swift How to import a C library in Swift using the Swift Package Manager","link":"/blog/UnsafePointer-in-Swift/"},{"title":"Using assembly","text":"Issue #112 I‚Äôm very fascinated when people use assembly to perform investigation, that‚Äôs just mind blowing üí• . Here are some of the favorite use cases Why blank Gets You Root","link":"/blog/Using-assembly/"},{"title":"Understanding weak and strong in Objective C","text":"Issue #164 From my own blog post https://github.com/Fantageek/fantageek.github.io/blob/source/source/_posts/2014-06-27-understanding-weak-self-and-strong-self.markdown Blocks are wonderful. To avoid retain cycle you often see the weakSelf - strongSelf dance like this 123456__weak __typeof__(self) weakSelf = self; self.block = ^{ __typeof__(self) strongSelf = weakSelf; [strongSelf doSomething]; [strongSelf doSomethingElse]; }; When block is createdBlock is object when it is copiedBlocks are created on the stack and will go away when their stack frame returns. While on the stack, a block has no effect on the storage or lifetime of anything it accesses. If blocks need to exist after the stack frame returns, they can be copied to the heap and this action is an explicit operation. This way, a block will gain reference-counting as all objects in Cocoa. When they are copied, they take their captured scope with them, retaining any objects they refer Blocks can capture values from the enclosing scopeAs well as containing executable code, a block also has the ability to capture state from its enclosing scope. Note that block captures the variable along with its decorators (i.e. weak qualifier), =&gt; This explains why you need to declare self as __weak When block is executedWhen block is executed, it is possible for weakSelf to be non-nil for the first method (doSomething), but not for the second (doSomethingElse) You may think, at first, this is a trick to use self inside the block avoiding the retain cycle warning. This is not the case. The strong reference to self is created at block execution time while using self in the block is evaluated at block declaration time, thus retaining the object. For best practice, however, you should create a strong reference of your object using the weak one. This won‚Äôt create a retain cycle either as the strong pointer within the block will only exist until the block completes (it‚Äôs only scope is the block itself). =&gt; This explains why you need to declare another __strong self More explanationThis is my answer to reader Nikita As many people point out, ‚ÄúBlocks are created on the stack and will go away when their stack frame returns. While on the stack, a block has no effect on the storage or lifetime of anything it accesses.‚ÄùEven if block (declared on the stack) increase reference count to all the object it accesses, this would be useless, because this block will be discard when function returns When block are copied (You see that people usually declare property (copy) for block), it will increase reference count to all the objects it accesses. Why? because block are mean to be executed at a later time, so it need to keep strong reference to all the object it access. Block can be executed MANY TIMES, so IT WON‚ÄôT RELEASE self AFTER this ran. When you nil out the block, it will be dealloc, hence it will decrease the reference count to all the objects it access. AFNetworking nil out the block after it is called, so you don‚Äôt have to use weakself inside block http://www.fantageek.com/1376/afnetworking-gotcha-2/ So there are cases when you don‚Äôt have to use weakself inside blocka. Make sure the block is not copied, you simply declare and run itb. Make sure the block is nil out after it is called Reference I finally figured out weakSelf and strongSelf Working with Blocks Objective-C Blocks Caveat Objective-C Blocks Under the Hood A look inside blocks: Episode 1 A look inside blocks: Episode 2 A look inside blocks: Episode 3 From C Declarators to Objective-C Blocks Syntax The Syntax of Objective-C Blocks Referring to weak self inside a nested block Capturing My(self)","link":"/blog/Understanding-weak-and-strong-in-Objective-C/"},{"title":"Using camelCase for abbreviations","text":"Issue #147 Each language and platform has its own coding style guide. This goes true when it comes to abbreviations. I‚Äôve had some debates about whether to use JSON or Json, URL or Url, HTTP or Http. I personally prefer camelCase, so I‚Äôm very happy to see that Kotlin is on my side. See Kotlin Style guide, I think this guide should be applied in other languages, such as Swift üòõ Sometimes there is more than one reasonable way to convert an English phrase into camel case, such as when acronyms or unusual constructs like ‚ÄúIPv6‚Äù or ‚ÄúiOS‚Äù are present. To improve predictability, use the following scheme. Beginning with the prose form of the name: Convert the phrase to plain ASCII and remove any apostrophes. For example, ‚ÄúM√ºller‚Äôs algorithm‚Äù might become ‚ÄúMuellers algorithm‚Äù. Divide this result into words, splitting on spaces and any remaining punctuation (typically hyphens). Recommended: if any word already has a conventional camel-case appearance in common usage, split this into its constituent parts (e.g., ‚ÄúAdWords‚Äù becomes ‚Äúad words‚Äù). Note that a word such as ‚ÄúiOS‚Äù is not really in camel case per se; it defies any convention, so this recommendation does not apply. Now lowercase everything (including acronyms), then uppercase only the first character of: ‚Ä¶each word, to yield pascal case, or ‚Ä¶each word except the first, to yield camel case Finally, join all the words into a single identifier. Note that the casing of the original words is almost entirely disregarded. Prose form Correct Incorrect ‚ÄúXML Http Request‚Äù XmlHttpRequest XMLHTTPRequest ‚Äúnew customer ID‚Äù newCustomerId newCustomerID ‚Äúinner stopwatch‚Äù innerStopwatch innerStopWatch ‚Äúsupports IPv6 on iOS‚Äù supportsIpv6OnIos supportsIPv6OnIOS ‚ÄúYouTube importer‚Äù YouTubeImporterYoutubeImporter* About iOS or IOS, I think I would go with IOS. I think React Native thinks so too NavigatorIOS looks and feels just like UINavigationController, because it is actually built on top of it. Read more https://softwareengineering.stackexchange.com/questions/186277/should-the-variable-be-named-id-or-id https://swift.org/documentation/api-design-guidelines/#promote-clear-usage https://github.com/raywenderlich/swift-style-guide#naming","link":"/blog/Using-camelCase-for-abbreviations/"},{"title":"Using CircleCI 2.0","text":"Issue #158 We ‚Äòve been using CircleCI for many of our open source projects. Since the end of last year 2017, version 2.0 began to come out, and we think it‚Äôs good time to try it now together with Swift 4.1 and Xcode 9.3 The problem with version 2.0 is it‚Äôs so powerful and has lots of cool new features like jobs and workflows, but that requires going to documentation for how to migrate configuration file, especially Search and Replace Deprecated 2.0 Keys Creating config.ymlThe first thing is to create a new config.yml inside folder .circleci Copy your existing circle.yml file into a new directory called .circleci at the root of your project repository. Next is to declare version and jobs Add version: 2 to the top of the .circleci/config.yml file. Checking xcodebuildFor simple cases, we just use xcodebuild to build and test the project, so it‚Äôs good to try it locally to avoid lots of trial commits to trigger CircleCI. You can take a look at this PR https://github.com/hyperoslo/Cheers/pull/20 Before our configuration file for version 1.0 looks like this 1- set -o pipefail &amp;&amp; xcodebuild -project Cheers.xcodeproj -scheme \"Cheers-iOS\" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 8,OS=11.0' -enableCodeCoverage YES test Now we should put pipefail inside shell, follow https://github.com/CircleCI-Public/circleci-demo-ios/blob/master/.circleci/config.yml shell: /bin/bash ‚Äìlogin -o pipefail Now is the actual trying xcodebuild, after many failures due to destination param 123456xcodebuild: error: Unable to find a destination matching the provided destination specifier: { platform:iOS Simulator, OS:11.3 } Missing required device specifier option. The device type ‚ÄúiOS Simulator‚Äù requires that either ‚Äúname‚Äù or ‚Äúid‚Äù be specified. Please supply either ‚Äúname‚Äù or ‚Äúid‚Äù. 1xcodebuild: error: option 'Destination' requires at least one parameter of the form 'key=value' I found this to work, run this in the same folder as your xcodeproj 1xcodebuild -project Cheers.xcodeproj -scheme \"Cheers-iOS\" -sdk iphonesimulator -destination \"platform=iOS Simulator,OS=11.3,name=iPhone X\" -enableCodeCoverage YES test Adding workflowVersion 2.0 introduces workflow which helps organising jobs A workflow is a set of rules for defining a collection of jobs and their run order. Workflows support complex job orchestration using a simple set of configuration keys to help you resolve failures sooner. For our simple use cases, we add this workflow 12345workflows: version: 2 build-and-test: jobs: - build-and-test Collecting Test Metadata https://circleci.com/docs/2.0/collect-test-data/ CircleCI collects test metadata from XML files and uses it to provide insights into your job FinalUse below as template 12345678910111213141516171819202122version: 2.1jobs: build_test: macos: xcode: \"11.0\" shell: /bin/bash --login -o pipefail steps: - checkout - run: command: | curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf pod install - run: command: xcodebuild -workspace MyApp.xcworkspace -scheme \"MyApp\" -sdk iphonesimulator -destination \"platform=iOS Simulator,name=iPhone X,OS=12.2\" -enableCodeCoverage YES test - store_test_results: path: test-resultsworkflows: version: 2.1 primary: jobs: - build_test Read more https://circleci.com/docs/2.0/ios-migrating-from-1-2/","link":"/blog/Using-CircleCI-2.0/"},{"title":"Using dlopen in iOS","text":"Issue #133 With dlopen we can make uses of some private frameworks. It will be fun From iPhone X home button 1234567#import &lt;dlfcn.h&gt;// somewhere in viewDidLoaddlopen([binaryPath cStringUsingEncoding:NSUTF8StringEncoding], RTLD_NOW);UIView *const view = [[NSClassFromString(@\"SBHomeGrabberView\") alloc] init];[view sizeToFit];[self.view addSubview:view];","link":"/blog/Using-dlopen-in-iOS/"},{"title":"What&#39;s new in iOS","text":"Issue #313 iOS 10‚ûïUserNotifications Push user-facing notifications to the user‚Äôs device from a server, or generate them locally from your app. ‚ûïUIViewPropertyAnimator A class that animates changes to views and allows the dynamic modification of those animations. ‚ûïNSPersistentContainer A container that encapsulates the Core Data stack in your app. ‚ûïUIFeedbackGenerator The abstract superclass for all feedback generators. iOS 10.3‚ûïSKStoreReviewController An object that controls the process of requesting App Store ratings and reviews from users. iOS 11‚ûïsafeAreaLayoutGuide The layout guide representing the portion of your view that is unobscured by bars and other content. ‚ûïCoreML Integrate machine learning models into your app. ‚ûïVision Apply computer vision algorithms to perform a variety of tasks on input images and video. ‚ûïARKit Integrate iOS device camera and motion features to produce augmented reality experiences in your app or game. ‚ûïDeviceCheck Access per-device, per-developer data that your associated server can use in its business logic. ‚ûïDrag and Drop Bring drag and drop to your app by using interaction APIs with your views. ‚ûïCoreNFC Detect NFC tags and read messages that contain NDEF data. ‚ûïmaskedCorners Animatable corner radius iOS 12‚ûïAuthenticationServices Make it easy for users to log into apps and services. iOS 13‚ûïSwiftUI Declare the user interface and behavior for your app on every platform. ‚ûïCombine Customize handling of asynchronous events by combining event-processing operators. ‚ûïCryptoKit Perform cryptographic operations securely and efficiently. ‚ûïUISearchTextField Expose UISearchTextField on UISearchBar ‚ûïMetricKit","link":"/blog/What's-new-in-iOS/"},{"title":"What if there is no inheritance?","text":"Issue #77 My question What if there is no inheritance, so that everybody has the same start, does that make life fairer? Hacker News https://news.ycombinator.com/item?id=13857327 Quora https://www.quora.com/What-if-there-is-no-inheritance-so-that-everybody-has-the-same-start-does-that-make-life-fairer","link":"/blog/What-if-there-is-no-inheritance/"},{"title":"What about performance?","text":"Issue #85 That‚Äôs the question I hear often when people are introduced to a new framework. It‚Äôs a valid concern. But it seems to me that they ask this just for fun. To my surprise, most people just don‚Äôt care, and the frameworks with the most stars often perform the worst. Now take a look back at performance. Here are some benchmarks From https://github.com/ibireme/YYModel, compare different JSON mappers for ObjC From https://github.com/bwhiteley/JSONShootout, compare different JSON mappers for Swift From https://github.com/onmyway133/DeepDiff#among-different-frameworks, compare different diffing frameworks I use it because it has many stars Take a look at the stars, the ones with the most stars often perform the slowest üôÄ I don‚Äôt say that more stars mean better. I don‚Äôt believe in stars. Stars may just be a result of your marketing effort. The same framework, without any code change, but after featured in some newsletters, gets additional thousand stars. The code remains the same, so what do stars really tell here? I‚Äôm not talking about closed source. I like open source. When deciding an open source framework, there are many factors. It can be issues and pull requests that indicate how the community care about it. It can be good code and good tests, that make it easy to maintain. It can be good documentation, that says how much dedication the developers have put in. And here‚Äôs the fact, when you see a project with many stars, you tend to star it too üòâ for the sake of bookmarking. Stars mean little, but they give us some ideas on how popular a project is. I just need to get work done OK. What about performance? Honestly, do you really care?","link":"/blog/What-about-performance/"},{"title":"What is Personal team in Xcode","text":"Issue #215 https://developer.apple.com/library/archive/qa/qa1915/_index.html Xcode 7 and Xcode 8 allow you to select the free personal team provided with your Apple ID for signing your app. This team allows you to build apps for your personal use on devices owned by you, but it does not allow you to code sign apps destined for the App Store or for enterprise use.","link":"/blog/What-is-Personal-team-in-Xcode/"},{"title":"Xcode tips","text":"Issue #584 Read more https://dasdom.github.io/a-breakpoint-i-cannot-live-without/","link":"/blog/Xcode-tips/"},{"title":"What you don&#39;t know is what you haven&#39;t learned","text":"Issue #14 Some of my sayings that I like üòâ Mine There are so many many many things to learn The opportunities are endless Everybody has access to the internet. Everybody has nearly the same chances. Your future is yours to decide A dream is not a dream anymore when you don‚Äôt have time for it Being single means free time. Being coupled means memorable time You learn less with the happy path I don‚Äôt like to be at the centre, nor being abandoned Even sense of humour can be trained Youth is your strength. Take advantage of it Easy to please. Hard to impress Don‚Äôt show me the evil sides of the world Please don‚Äôt confuse peace vs boredom What matters is your passion, not your ability The ones that are likely to fail are the ones having the fewest friends. And the ones that have the fewest friends are the ones having the most boring life Life is like a marathon. People run. Some are lucky enough to have support. Some are even luckier, they already crossed the finish line when they were born. Running, however, has its own fun Life is predestined. But you can of course change it Losers are easily the most hot tempered. It is the consequence, not the cause What if there is no inheritance. Will that make everybody the same? Some people become Norwegian when they were born. Others have to apply for the citizenship https://www.udi.no/en/word-definitions/norwegian-by-birth/ Every deck has a chance to win, as long as you believe in the heart of the cards Life is a game. People play on different difficulty levels. ‚ÄúBut mine is much harder‚Äù, said everybody What you don‚Äôt know is what you haven‚Äôt learned Others I don‚Äôt know the key to success. But the key to failure is trying to please everybody ~ Bill Cosby","link":"/blog/What-you-don't-know-is-what-you-haven't-learned/"},{"title":"When to use hamburger menu in iOS","text":"Issue #61 You can read everywhere that hamburger is mostly not recommended. Every navigation structure has their use cases, and for hamburger, I find these posts to have their points As a secondary navigation http://babich.biz/hamburger-good-ux/ When it does not interfere with the existing navigation http://www.ios-coding.com/blog/2015/11/01/maintaining-viewdeck/ Slack app https://slack.com/downloads/ios","link":"/blog/When-to-use-hamburger-menu-in-iOS/"},{"title":"Why is didSelectItem not called in UICollectionView","text":"Issue #550 Check shouldHighlightItem -&gt; shouldSelectItem -&gt; didSelectItem Gesture recognizer isUserInteractionEnabled","link":"/blog/Why-is-didSelectItem-not-called-in-UICollectionView/"},{"title":"Why native?","text":"Issue #100 For now, I still believe in native. Here are some interesting links Why we are not cross-platform developers Why I‚Äôm not a React Native Developer We are ditching Xamarin. Why? https://en.wikipedia.org/wiki/Leaky_abstraction I‚Äôm harvesting credit card numbers and passwords from your site. Here‚Äôs how. How one developer just broke Node, Babel and thousands of projects in 11 lines of JavaScript React Native https://medium.com/snipe-gg/should-you-use-react-native-to-build-your-startups-mobile-app-c0baf9f4d9ad https://blog.discordapp.com/using-react-native-one-year-later-91fd5e949933","link":"/blog/Why-native/"},{"title":"What is new in iOS","text":"Issue #313 iOS 10‚ûïUserNotifications Push user-facing notifications to the user‚Äôs device from a server, or generate them locally from your app. ‚ûïUIViewPropertyAnimator A class that animates changes to views and allows the dynamic modification of those animations. ‚ûïNSPersistentContainer A container that encapsulates the Core Data stack in your app. ‚ûïUIFeedbackGenerator The abstract superclass for all feedback generators. iOS 10.3‚ûïSKStoreReviewController An object that controls the process of requesting App Store ratings and reviews from users. iOS 11‚ûïsafeAreaLayoutGuide The layout guide representing the portion of your view that is unobscured by bars and other content. ‚ûïCoreML Integrate machine learning models into your app. ‚ûïVision Apply computer vision algorithms to perform a variety of tasks on input images and video. ‚ûïARKit Integrate iOS device camera and motion features to produce augmented reality experiences in your app or game. ‚ûïDeviceCheck Access per-device, per-developer data that your associated server can use in its business logic. ‚ûïDrag and Drop Bring drag and drop to your app by using interaction APIs with your views. ‚ûïCoreNFC Detect NFC tags and read messages that contain NDEF data. ‚ûïmaskedCorners Animatable corner radius iOS 12‚ûïAuthenticationServices Make it easy for users to log into apps and services. iOS 13 https://www.hackingwithswift.com/articles/193/whats-new-in-ios-13 https://onesignal.com/blog/ios-13-introduces-4-breaking-changes-to-notifications/ ‚ûïSwiftUI Declare the user interface and behavior for your app on every platform. ‚ûïCombine Customize handling of asynchronous events by combining event-processing operators. ‚ûïCryptoKit Perform cryptographic operations securely and efficiently. ‚ûïUISearchTextField Expose UISearchTextField on UISearchBar ‚ûïMetricKit","link":"/blog/What-is-new-in-iOS/"},{"title":"A taste of MVVM and Reactive paradigm","text":"Issue #120 Original post https://medium.com/flawless-app-stories/a-taste-of-mvvm-and-reactive-paradigm-5288a819cca1 A taste of MVVM and Reactive paradigmI like Swift, like many other object oriented programming languages. Swift allows you to represent real world objects that have some characteristics and can perform some action. I tend to think of an app as a world where each object is a person. They work and communicate. If a person can‚Äôt do the work alone, he needs to ask for help. Take a project, for example, if the manager has to do all of the work by himself, he will go crazy. So there is a need to organise and delegate tasks, and for many persons to collaborate on the project: designer, tester, scrum master, developer. After the task is done, the manager needs to be informed. This may not a good example. But at least you get the importance of communication and delegation in OOP. I was very intrigued by the word ‚Äúarchitecture‚Äù when I started iOS programming. But after doing for a while, it all comes down to identifying and splitting responsibilities. This article tells a bit about MVC and simple Extract Classrefactoring to MVVM, and how to go further with Rx. You are free to create your own architecture, but whatever you do, consistence is key as to not confuse or surprise your teammates. Model View ControllerTake a look at the architecture you know the best, MVC, short for Model View Controller. You always get one when you create a new iOS project. View is where you present your data, using UIView, UIButton, UILabel. Model is just a fancy word for data. It can be your entity, data from networking, object from database, or from cache. The controller is the thing that mediates between the model and the view. UIViewController is the center of the universeThe problem with ViewController is that it tends to be huge. Apple puts it as the center of the universe, where it has lots of properties and responsibilities. There are many things that you can only do with a UIViewController. Things like interacting with storyboard, managing the view, configuring view rotation, state restoration. UIViewController is designed with lots of hooks for you to override and customize. Take a look at the many sections in UIViewController documentation, you can‚Äôt do the following without a UIViewController. func viewDidLoad() var preferredStatusBarStyle: UIStatusBarStyle { get } UITableViewDataSource var presentationController: UIPresentationController? { get } func childViewControllerForScreenEdgesDeferringSystemGestures() -&gt; UIViewController? func didMove(toParentViewController parent: UIViewController?) var systemMinimumLayoutMargins: NSDirectionalEdgeInsets var edgesForExtendedLayout: UIRectEdge var previewActionItems: [UIPreviewActionItem] var navigationItem: UINavigationItem var shouldAutorotate: BoolAs your app grows, we need to add more code for other logic. Such as networking, data source, handling multiple delegates, presenting child view controllers. We can, of course, put all the stuff on the view controller, but that results in big view controller and improvement in your scrolling skill. This is where you lose the big picture of responsibilities because all stuff stays in the mega view controller. You tend to introduce code duplication and bugs are hard to fix because they are all over the places. The same goes with Page in Windows Phone or Activity in Android. They are intended for a screen or partial screen of functionality. There are certain actions that can only be done through them like Page.OnNavigatedTo, Activity.onCreate. The buzzwords of architectureWhat do you do when the ViewController is doing a lot? You offset the work to other components. By the way, if you want another object to do the user input handling, you can use the Presenter. If the Presenter is doing too much, then it can offset the business logic to the Interactor. Also, there are more buzzwords that can be used. let buzzWords = [ &quot;Model&quot;, &quot;View&quot;, &quot;Controller&quot;, &quot;Entity&quot;, &quot;Router&quot;, &quot;Clean&quot;, &quot;Reactive&quot;, &quot;Presenter&quot;, &quot;Interactor&quot;, &quot;Megatron&quot;, &quot;Coordinator&quot;, &quot;Flow&quot;, &quot;Manager&quot; ] let architecture = buzzWords.shuffled().takeRandom() let acronym = architecture.makeAcronym() After all the buzzwords are assembled, we get an architecture. There are many of them, ranging from simple extract class refactoring, embracing MVC or taking inspiration from Clean Code, Rx, EventBus or Redux. The choice depends on project, and some teams prefer one architecture over the other. The pragmatic programmerPeople have different opinion about what is good architecture. For me, it is about clear separation of concern, good communication pattern and being comfortable to use. Each component in the architecture should be identifiable and have a specific role. The communication must be clear so that we know which object is talking to each other. This together with good dependency injection will make testing easier. Things that sound good in theory may not work well in practice. Separated domain objects are cool, protocol extensions are cool, multiple layers of abstraction are cool. But too many of them can be a problem. If you read enough about design patterns, you know they all come down to these simple principles: Encapsulate what varies: identify the aspects of your application that vary and separate them from what stays the same. Program to an interface, not an implementation Prefer composition over inheritance If there‚Äôs one thing we should master, it‚Äôs composition. The key is to identify responsibility and compose them in a reasonable and consistent way. Consult with your team mates on what suits the most. Always writing code with the thought that you will also be the future maintainer. Then you will write it differently. Don‚Äôt fight against the systemSome architectures introduce completely new paradigm. Some of them are cumbersome that there people write scripts to generate boiler plate code. It‚Äôs good that there are many approaches to a problem. But for me sometimes it feels they are fighting the system. Some tasks are made easy while some trivial tasks become extremely hard. We should not constrain ourselves to one architecture simply because it are trendy. Be pragmatic, not dogmatic. In iOS, we should embrace MVC. UIViewController is not meant for a full screen of content. They can contain and be composed to split the functionalities. We can use Coordinator and FlowController to manage dependencies and handle flow. Containerfor state transition, embedded logic controller, part of full screen content. This embracing ViewController approach play nicely with MVC in iOS and is my preferable way of doing. Model View ViewModel Another good-enough way is to offload some of the tasks to another object, let‚Äôs call it ViewModel. The name does not matter, you can name it Reactor, Maestro, Dinosaur. The important thing is your team get an agreed name. ViewModel takes some tasks from the ViewController and reports when it‚Äôs done. There are communication patterns in Cocoa Touch such as delegate, closures to use. ViewModel is self-contained, has no reference to UIKit, and has just input and output. We can put a lot of things into ViewModel like calculation, formatting, networking, business logic. Also, if you don‚Äôt like the ViewModel to become massive, you surely need to create some dedicated objects. ViewModel is the first step to get a slim ViewController. SynchronouslyBelow is a very simple ViewModel, which formats data based on User model. This is done synchronously. class ProfileController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let viewModel = ViewModel(user: user) nameLabel.text = viewModel.name birthdayLabel.text = viewModel.birthdayString salaryLabel.text = viewModel.salary piLabel.text = viewModel.millionthDigitOfPi } }AsynchronouslyWe work with asynchronous API all the time. What if we want to show the user‚Äôs number of Facebook friends? For this to work we need to call Facebook API and this operation takes time. The ViewModel can report back via closure. viewModel.getFacebookFriends { friends in self.friendCountLabel.text = &quot;\\(friends.count)&quot; }Internally, the ViewModel may offload the task to a dedicated Facebook API client object. class ViewModel { func getFacebookFriends(completion: [User] -&gt; Void) { let client = APIClient() client.getFacebookFriends(for: user) { friends in DispatchQueue.main.async { completion(friends) } } } }Jetpack in Android Google introduced Android Architecture Component, now part of Jetpack, at Google IO 2017. It has ViewModel and LiveData, which is also a type of MVVM applied in Android. ViewModel survives through configuration changes, and notify results in terms of LiveData for Activity to consume. class MyActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?, persistentState: PersistableBundle?) { super.onCreate(savedInstanceState, persistentState) val model = ViewModelProviders.of(this).get(MyViewModel::class.java) model.getUsers().observe(this, { users -&gt; // update UI }) } }This is one of the reason I like ViewModel. If we follow ViewModel like this, then code structures between iOS and Android become similar. There should be no need for some random Javascript cross platform solutions. You learn the concept once, and apply it on both iOS and Android. I learn ViewModel, RxSwift on iOS and feel right at home when I work with RxJava and RxBinding on Android. The Kickstarter project also proves that this works well in their iOS and Android apps. BindingTo encapsulate the closure, we can create a class called Binding, which can notify one or multiple listeners. It takes advantage of didSet, and the observable property becomes clear. class Binding&lt;T&gt; { var value: T { didSet { listener?(value) } } private var listener: ((T) -&gt; Void)? init(value: T) { self.value = value } func bind(_ closure: @escaping (T) -&gt; Void) { closure(value) listener = closure } }Here is how to use it inside ViewModel: class ViewModel { let friends = Binding&lt;[User]&gt;(value: []) init() { getFacebookFriends { friends.value = $0 } } func getFacebookFriends(completion: ([User]) -&gt; Void) { // Do the work } }When ever friends are fetched, or changed, the ViewController is updated accordingly. This is called reaction to changes. override func viewDidLoad() { super.viewDidLoad() viewModel.friends.bind { friends in self.friendsCountLabel.text = &quot;\\(friends.count)&quot; } }You often see MVVM introduction with reactive frameworks, and it is for a reason. They offer many chaining operators and make reactive programming easier and more declarative. RxSwiftPerhaps the most common reactive framework in Swift is RxSwift. The thing I like about it is that it follows ReactiveX pattern. So you will feel more familiar if you already use RxJava, RxJs, or RxKotlin. Observable RxSwift unifies sync and async operations through Observable. This is how you make one. class ViewModel { let friends: Observable&lt;[User]&gt; init() { let client = APIClient() friends = Observable&lt;[User]&gt;.create({ subscriber in client.getFacebookFriends(completion: { friends in subscriber.onNext(friends) subscriber.onCompleted() }) return Disposables.create() }) } }The power of RxSwift lies in its numerous operators, which help you chain Observables. Here you can call 2 network requests, wait for both of them to finish, then sum up the friends. This is very streamlined and saves you lots of time. Here you can just subscribe to the Observable, it will be triggered when the request completes: override func viewDidLoad() { super.viewDidLoad() viewModel.friends.subscribe(onNext: { friends in self.friendsCountLabel.text = &quot;\\(friends.count)&quot; }) }Input and outputOne thing that is nice about ViewModel and Rx is that we can separate input and output using Observable, which gives a clear interface. Read more at Learning from Open Source: Input and output container. Below it is clear that we fetch is an input, and friends is the viable output. class ViewModel { class Input { let fetch = PublishSubject&lt;()&gt;() } class Output { let friends: Driver&lt;[User]&gt; } let apiClient: APIClient let input: Input let output: Output init(apiClient: APIClient) { self.apiClient = apiClient // Connect input and output } } class ProfileViewController: BaseViewController&lt;ProfileView&gt; { let viewModel: ProfileViewModelType init(viewModel: ProfileViewModelType) { self.viewModel = viewModel } override func viewDidLoad() { super.viewDidLoad() // Input viewModel.input.fetch.onNext(()) // Output viewModel.output.friends.subscribe(onNext: { friends in self.friendsCountLabel.text = &quot;\\(friends.count)&quot; }) } }How reactive worksIf you feel like Rx, it‚Äôs good to get an understanding of them after using some frameworks for a while. There are some concepts like Signal, SignalProducer, Observable, Promise, Future, Task, Job, Launcher, Async and some people can have a very distinction about them. Here I simply call it Signal, which is something that can signal values. MonadSignal and its Result are just monads, which are thing that can be mapped and chained. Signal makes use of deferred execution callback closures. It can be pushed or pulled. Which is just how the Signal updates its value and the order the callbacks are called. Execution callback closure means that we pass a function to another function. And the passed in function will get called when appropriated. Sync vs AsyncMonad can be in either sync or async mode. Sync is easier to understand, but async is somewhat you‚Äôre already familiar and used in practice. Basically, Sync: you get the returned value right away via return Async: you get the returned value via callback block Here is an example of simple sync and async free functions: // Sync func sum(a: Int, b: Int) -&gt; Int { return a + b } // Async func sum(a: Int, b: Int, completion: Int -&gt; Void) { // Assumed it is a very long task to get the result let result = a + b completion(result) }And how sync and async apply to Result type. Notice the async version, we get the transformed value in a completion closure instead of immediate return from function. enum Result&lt;T&gt; { case value(value: T) case failure(error: Error) // Sync public func map&lt;U&gt;(f: (T) -&gt; U) -&gt; Result&lt;U&gt; { switch self { case let .value(value): return .value(value: f(value)) case let .failure(error): return .failure(error: error) } } // Async public func map&lt;U&gt;(f: @escaping ((T), (U) -&gt; Void) -&gt; Void) -&gt; (((Result&lt;U&gt;) -&gt; Void) -&gt; Void) { return { g in // g: Result&lt;U&gt; -&gt; Void switch self { case let .value(value): f(value) { transformedValue in // transformedValue: U g(.value(value: transformedValue)) } case let .failure(error): g(.failure(error: error)) } } } }Push SignalGiven a chained signals like this: A -(map)-&gt; B -(flatMap)-&gt; C -(flatMap)-&gt; D -(subscribe) Push Signal, means that when the source signal A is sent an event, it propagates that event via callbacks. PushSignal is similar to PublishSubject in RxSwift. Triggered by sending event to the source signal. We must keep A as it keeps the others around We subscribe the last D We send event to the first A A ‚Äòs callback gets called, it it in turn calls callback of B with the result of A ‚Äòs map, then B ‚Äòs callback calls C ‚Äòs callback with the result of B‚Äòs flatMap, and so on. It is similar to Promise A+, you can see my Swift implementation of Promise A+ in my Then framework. For now, here is the Swift 4 implementation of a simple PushSignal. public final class PushSignal&lt;T&gt; { var event: Result&lt;T&gt;? var callbacks: [(Result&lt;T&gt;) -&gt; Void] = [] let lockQueue = DispatchQueue(label: &quot;Serial Queue&quot;) func notify() { guard let event = event else { return } callbacks.forEach { callback in callback(event) } } func update(event: Result&lt;T&gt;) { lockQueue.sync { self.event = event } notify() } public func subscribe(f: @escaping (Result&lt;T&gt;) -&gt; Void) -&gt; Signal&lt;T&gt; { // Callback if let event = event { f(event) } callbacks.append(f) return self } public func map&lt;U&gt;(f: @escaping (T) -&gt; U) -&gt; Signal&lt;U&gt; { let signal = Signal&lt;U&gt;() _ = subscribe { event in signal.update(event: event.map(f: f)) } return signal } }Below is how a PushSignal is used to transform a chain from string to its length, you should see 4, the length of the string ‚Äútest‚Äù printed. let signal = PushSignal&lt;String&gt;() _ = signal.map { value in return value.count }.subscribe { event in if case let .value(value) = event { print(value) } else { print(&quot;error&quot;) } } signal.update(event: .value(value: &quot;test&quot;))Pull SignalGiven a chained signals like this: A -(map)-&gt; B -(flatMap)-&gt; C -(flatMap)-&gt; D -(subscribe) Pull Signal, sometimes called Future, means when we subscribe to the final signal D, it causes the previous signals to action: Triggered by subscribing to the final signal D; We must keep D as it keeps the others around; We subscribe the last D; D ‚Äòs operation runs, and it cause C ‚Äòs operation to runs, ‚Ä¶ then A ‚Äòs operation runs. It is in A that the task is performed (like fetching network, retrieving database, file access, heavy computation, ‚Ä¶) to get the result, and A ‚Äòs completion gets called. Then A‚Äôs completion calls B ‚Äòs completion with the result mapped by B ‚Äòs map, ‚Ä¶ all the way to the subscriber ‚Äòs completion block. Here is a Swift 4 implementation of PullSignal. PullSignal is similar to Observablein RxSwift and SignalProducer in ReactiveSwift. public struct PullSignal&lt;T&gt; { let operation: ((Result&lt;T&gt;) -&gt; Void) -&gt; Void public init(operation: @escaping ((Result&lt;T&gt;) -&gt; Void) -&gt; Void) { self.operation = operation } public func start(completion: (Result&lt;T&gt;) -&gt; Void) { operation() { event in completion(event) } } public func map&lt;U&gt;(f: @escaping (T) -&gt; U) -&gt; PullSignal&lt;U&gt; { return PullSignal&lt;U&gt; { completion in self.start { event in completion(event.map(f: f)) } } } }The chain is inactive until you call start at the last signal in the chain, which triggers operation flow all over to the first signal. Run this snippet and you should see 4, the length of the string ‚Äútest‚Äù printed on the console. let signal = PullSignal&lt;String&gt; { completion in // There should be some long running operation here completion(Result.value(value: &quot;test&quot;)) } signal.map { value in value.count }.start { event in if case let .value(value) = event { print(value) } else { print(&quot;error&quot;) } }I hope those snippets are simple enough to help you understand how signal works under the hood, and how to differentiate hot and cold signals. To get a fully working Signal framework, you need to implement more operations. Such as retry, rebounce, throttle, queue, flatten, filter, delay, combine and add support for UIKit like RxCocoa does. Find out how to implement in my Signal repo. Where to go from hereArchitecture is a very opinionated topic. Hopefully this article gives you some ideas to add into your decision points. MVC is dominant in iOS, MVVM is a good friend and Rx is a powerful tool. Here are some more interesting readings: MVVM is Exceptionally OK Good iOS Application Architecture: MVVM vs. MVC vs. VIPER A Better MVC Taming Great Complexity: MVVM, Coordinators and RxSwift Rx ‚Äî for beginners (part 9): Hot Vs. Cold observable Hot and Cold Observables When to use IEnumerable vs IObservable? Functional Reactive Programming without Black Magic Swift Sync and Async Error Handling","link":"/blog/A-taste-of-MVVM-and-Reactive-paradigm/"},{"title":"Coordinator and FlowController","text":"Issue #106 Every new architecture that comes out, either iOS or Android, makes me very excited. I‚Äôm always looking for ways to structure apps in a better way. But after some times, I see that we‚Äôre too creative in creating architecture, aka constraint, that is too far away from the platform that we‚Äôre building. I often think ‚ÄúIf we‚Äôre going too far from the system, then it‚Äôs very hard to go back‚Äù I like things that embrace the system. One of them is Coordinator which helps in encapsulation and navigation. Thanks to my friend Vadym for showing me Coordinator in action. The below screenshot from @khanlou ‚Äòs talk at CocoaHeads Stockholm clearly says many things about Coordinator But after reading A Better MVC, I think we can leverage view controller containment to do navigation using UIViewController only. Since I tend to call view controllers as LoginController, ProfileController, ... and the term flow to group those related screens, what should we call a Coordinator that inherits from UIViewController ü§î Let‚Äôs call it FlowController üòé . The name is not that important, but the concept is simple. FlowController was also inspired by this Flow Controllers on iOS for a Better Navigation Control back in 2014. The idea is from awesome iOS people, this is just a sum up from my experience üòá So FlowController can just a UIViewController friendly version of Coordinator. Let see how FlowController fits better into MVC ¬´UIViewController is the center of the universe.¬ª‚Äî @onmyway133&mdash; Elvis Nu√±ez (@3lvis) 6. oktober 2017 1. FlowController and AppDelegateYour application starts from AppDelegate, in that you setup UIWindow. So we should follow the same ‚Äútop down‚Äù approach for FlowController, starting with AppFlowController. You can construct all dependencies that your app need for AppFlowController, so that it can pass to other child FlowController. AppDelegate is also considered Composition Root Here is how to declare AppFlowController in AppDelegate 123456789101112131415161718192021222324252627282930313233343536struct DependencyContainer: AuthServiceContainer, PhoneServiceContainer, NetworkingServiceContainer, LocationServiceContainer, MapServiceContainer, HealthServiceContainer { let authService: AuthServiceProtocol let phoneService: PhoneService let networkingService: NetworkingService let locationService: LocationService let mapService: MapService let healthService: HealthService static func make() -&gt; DependencyContainer { // Configure and make DependencyContainer here }}@UIApplicationMainclass AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? var appFlowController: AppFlowController! func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool { appFlowController = AppFlowController( dependencyContainer: DependencyContainer.make() ) window = UIWindow(frame: UIScreen.main.bounds) window?.rootViewController = appFlowController window?.makeKeyAndVisible() appFlowController.start() return true }} Here are some hypothetical FlowController that you may encounter AppFlowController: manages UIWindow and check whether to show onboarding, login or main depending on authentication state OnboardingFlowController: manages UIPageViewController and maybe ask for some permissions LoginFlowController: manages UINavigationController to show login, sms verification, forget password, and optionally start SignUpFlowController MainFlowController: manages UITabBarController with each tab serving main features FeedFlowController: show feed with list of items ProfileFlowController: show profile SettingsFlowController: show settings, and maybe call logout, this will delegates up the FlowController chain. The cool thing about FlowController is it makes your code very self contained, and grouped by features. So it‚Äôs easy to move all related things to its own package if you like. 2. FlowController as container view controller In general, a view controller should manage either sequence or UI, but not both. Basically, FlowController is just a container view controller to solve the sequence, based on a simple concept called composition. It manages many child view controllers in its flow. Let‚Äô say we have a ProductFlowController that groups together flow related to displaying products, ProductListController, ProductDetailController, ProductAuthorController, ProductMapController, ‚Ä¶ Each can delegate to the ProductFlowController to express its intent, like ProductListController can delegate to say ‚Äúproduct did tap‚Äù, so that ProductFlowController can construct and present the next screen in the flow, based on the embedded UINavigationController inside it. Normally, a FlowController just displays 1 child FlowController at a time, so normally we can just update its frame 1234567final class AppFlowController: UIViewController { override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() childViewControllers.first?.view.frame = view.bounds }} 3. FlowController as dependency containerEach view controller inside the flow can have different dependencies, so it‚Äôs not fair if the first view controller needs to carry all the stuff just to be able to pass down to the next view controllers. Here are some dependencies ProductListController: ProductNetworkingService ProductDetailController: ProductNetworkingService, ImageDowloaderService, ProductEditService ProductAuthorController: AuthorNetworkingService, ImageDowloaderService ProductMapController: LocationService, MapService Instead the FlowController can carry all the dependencies needed for that whole flow, so it can pass down to the view controller if needed. 1234567891011121314151617181920212223242526272829struct ProductDependencyContainer { let productNetworkingService: ProductNetworkingService let imageDownloaderService: ImageDownloaderService let productEditService: ProductEditService let authorNetworkingService: AuthorNetworkingService let locationService: LocationService let mapService: MapService}class ProductFlowController { let dependencyContainer: ProductDependencyContainer init(dependencyContainer: ProductDependencyContainer) { self.dependencyContainer = dependencyContainer }}extension ProductFlowController: ProductListControllerDelegate { func productListController(_ controller: ProductListController, didSelect product: Product) { let productDetailController = ProductDetailController( productNetworkingService: dependencyContainer.productNetworkingService, productEditService: dependencyContainer.productEditService, imageDownloaderService: dependencyContainer.imageDownloaderService ) productDetailController.delegate = self embeddedNavigationController.pushViewController(productDetailController, animated: true) }} Here are some ways that you can use to pass dependencies into FlowController Using protocol compositon for dependency injection Dependency injection using factories in Swift 4. Adding or removing child FlowControllerCoordinator With Coordinator, you need to keep an array of child Coordinators, and maybe use address (=== operator) to identify them 1234567891011121314151617181920212223class Coordinator { private var children: [Coordinator] = [] func add(child: Coordinator) { guard !children.contains(where: { $0 === child }) else { return } children.append(child) } func remove(child: Coordinator) { guard let index = children.index(where: { $0 === child }) else { return } children.remove(at: index) } func removeAll() { children.removeAll() }} FlowController With FlowController, since it is UIViewController subclass, it has viewControllers to hold all those child FlowController. Just add these extensions to simplify your adding or removing of child UIViewController 12345678910111213extension UIViewController { func add(childController: UIViewController) { addChildViewController(childController) view.addSubview(childController.view) childController.didMove(toParentViewController: self) } func remove(childController: UIViewController) { childController.willMove(toParentViewController: nil) childController.view.removeFromSuperview() childController.removeFromParentViewController() }} And see in action how AppFlowController work with adding 1234567891011121314151617181920212223final class AppFlowController: UIViewController { func start() { if authService.isAuthenticated { startMain() } else { startLogin() } } private func startLogin() { let loginFlowController = LoginFlowController( loginFlowController.delegate = self add(childController: loginFlowController) loginFlowController.start() } fileprivate func startMain() { let mainFlowController = MainFlowController() mainFlowController.delegate = self add(childController: mainFlowController) mainFlowController.start() }} and with removing when the child FlowController finishes 123456extension AppFlowController: LoginFlowControllerDelegate { func loginFlowControllerDidFinish(_ flowController: LoginFlowController) { remove(childController: flowController) startMain() }} 5. AppFlowController does not need to know about UIWindowCoordinator Usually you have an AppCoordinator, which is held by AppDelegate, as the root of your Coordinator chain. Based on login status, it will determine which LoginController or MainController will be set as the rootViewController, in order to do that, it needs to be injected a UIWindow 1234window = UIWindow(frame: UIScreen.main.bounds)appCoordinator = AppCoordinator(window: window!)appCoordinator.start()window?.makeKeyAndVisible() You can guess that in the start method of AppCoordinator, it must set rootViewController before window?.makeKeyAndVisible() is called. 123456789101112131415final class AppCoordinator: Coordinator { private let window: UIWindow init(window: UIWindow) { self.window = window } func start() { if dependencyContainer.authService.isAuthenticated { startMain() } else { startLogin() } }} FlowController But with AppFlowController, you can treat it like a normal UIViewController, so just setting it as the rootViewController 123456appFlowController = AppFlowController(window = UIWindow(frame: UIScreen.main.bounds)window?.rootViewController = appFlowControllerwindow?.makeKeyAndVisible()appFlowController.start() 6. LoginFlowController can manage its own flowSupposed we have login flow based on UINavigationController that can display LoginController, ForgetPasswordController, SignUpController Coordinator What should we do in the start method of LoginCoordinator? Construct the initial controller LoginController and set it as the rootViewController of the UINavigationController? LoginCoordinator can create this embedded UINavigationController internally, but then it is not attached to the rootViewController of UIWindow, because UIWindow is kept privately inside the parent AppCoordinator. We can pass UIWindow to LoginCoordinator but then it knows too much. One way is to construct UINavigationController from AppCoordinator and pass that to LoginCoordinator 1234567891011121314151617181920212223242526272829final class AppCoordinator: Coordinator { private let window: UIWindow private func startLogin() { let navigationController = UINavigationController() let loginCoordinator = LoginCoordinator(navigationController: navigationController) loginCoordinator.delegate = self add(child: loginCoordinator) window.rootViewController = navigationController loginCoordinator.start() }}final class LoginCoordinator: Coordinator { private let navigationController: UINavigationController init(navigationController: UINavigationController) { self.navigationController = navigationController } func start() { let loginController = LoginController(dependencyContainer: dependencyContainer) loginController.delegate = self navigationController.viewControllers = [loginController] }} FlowController LoginFlowController leverages container view controller so it fits nicely with the way UIKit works. Here AppFlowController can just add LoginFlowController and LoginFlowController can just create its own embeddedNavigationController. 1234567891011121314151617181920212223242526272829303132final class AppFlowController: UIViewController { private func startLogin() { let loginFlowController = LoginFlowController( dependencyContainer: dependencyContainer ) loginFlowController.delegate = self add(childController: loginFlowController) loginFlowController.start() }}final class LoginFlowController: UIViewController { private let dependencyContainer: DependencyContainer private var embeddedNavigationController: UINavigationController! weak var delegate: LoginFlowControllerDelegate? init(dependencyContainer: DependencyContainer) { self.dependencyContainer = dependencyContainer super.init(nibName: nil, bundle: nil) embeddedNavigationController = UINavigationController() add(childController: embeddedNavigationController) } func start() { let loginController = LoginController(dependencyContainer: dependencyContainer) loginController.delegate = self embeddedNavigationController.viewControllers = [loginController] }} 7. FlowController and responder chainCoordinator Sometimes we want a quick way to bubble up message to parent Coordinator, one way to do that is to replicate UIResponder chain using associated object and protocol extensions, like Inter-connect with Coordinator 12345678910111213141516171819202122extension UIViewController { private struct AssociatedKeys { static var ParentCoordinator = \"ParentCoordinator\" } public var parentCoordinator: Any? { get { return objc_getAssociatedObject(self, &amp;AssociatedKeys.ParentCoordinator) } set { objc_setAssociatedObject(self, &amp;AssociatedKeys.ParentCoordinator, newValue, .OBJC_ASSOCIATION_ASSIGN) } }}open class Coordinator&lt;T: UIViewController&gt;: UIResponder, Coordinating { open var parent: Coordinating? override open var coordinatingResponder: UIResponder? { return parent as? UIResponder }} FlowController Since FlowController is UIViewController, which inherits from UIResponder, responder chain happens out of the box Responder objects‚Äîthat is, instances of UIResponder‚Äîconstitute the event-handling backbone of a UIKit app. Many key objects are also responders, including the UIApplication object, UIViewController objects, and all UIView objects (which includes UIWindow). As events occur, UIKit dispatches them to your app‚Äôs responder objects for handling. 8. FlowController and trait collectionFlowController I very much like how Kickstarter uses trait collection in testing. Well, since FlowController is a parent view controller, we can just override its trait collection, and that will affect the size classes of all view controllers inside that flow. As in A Better MVC, Part 2: Fixing Encapsulation The huge advantage of this approach is that system features come free. Trait collection propagation is free. View lifecycle callbacks are free. Safe area layout margins are generally free. The responder chain and preferred UI state callbacks are free. And future additions to UIViewController are also free. From setOverrideTraitCollection When implementing a custom container view controller, you can use this method to change the traits of any embedded child view controllers to something more appropriate for your layout. Making such a change alters other view controller behaviors associated with that child 1234567let trait = UITraitCollection(traitsFrom: [ .init(horizontalSizeClass: .compact), .init(verticalSizeClass: .regular), .init(userInterfaceIdiom: .phone)])appFlowController.setOverrideTraitCollection(trait, forChildViewController: loginFlowController) 9. FlowController and back buttonCoordinator One problem with UINavigationController is that clicking on the default back button pops the view controller out of the navigation stack, so Coordinator is not aware of that. With Coordinator you needs to keep Coordinator and UIViewController in sync, add try to hook up UINavigationControllerDelegate in order to clean up. Like in Back Buttons and Coordinators 1234567891011121314151617extension Coordinator: UINavigationControllerDelegate { func navigationController(navigationController: UINavigationController, didShowViewController viewController: UIViewController, animated: Bool) { // ensure the view controller is popping guard let fromViewController = navigationController.transitionCoordinator?.viewController(forKey: .from), !navigationController.viewControllers.contains(fromViewController) else { return } // and it's the right type if fromViewController is FirstViewControllerInCoordinator) { //deallocate the relevant coordinator } }} Or creating a class called NavigationController that inside manages a list of child coordinators. Like in Navigation coordinators 12345678910111213141516171819202122final class NavigationController: UIViewController { // MARK: - Inputs private let rootViewController: UIViewController // MARK: - Mutable state private var viewControllersToChildCoordinators: [UIViewController: Coordinator] = [:] // MARK: - Lazy views private lazy var childNavigationController: UINavigationController = UINavigationController(rootViewController: self.rootViewController) // MARK: - Initialization init(rootViewController: UIViewController) { self.rootViewController = rootViewController super.init(nibName: nil, bundle: nil) }} FlowController Since FlowController is just plain UIViewController, you don‚Äôt need to manually manage child FlowController. The child FlowController is gone when you pop or dismiss. If we want to listen to UINavigationController events, we can just handle that inside the FlowController 1234567891011121314151617181920final class LoginFlowController: UIViewController { private let dependencyContainer: DependencyContainer private var embeddedNavigationController: UINavigationController! weak var delegate: LoginFlowControllerDelegate? init(dependencyContainer: DependencyContainer) { self.dependencyContainer = dependencyContainer super.init(nibName: nil, bundle: nil) embeddedNavigationController = UINavigationController() embeddedNavigationController.delegate = self add(childController: embeddedNavigationController) }}extension LoginFlowController: UINavigationControllerDelegate { func navigationController(_ navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool) { }} 10. FlowController and callbackWe can use delegate pattern to notify FlowController to show another view controller in the flow 123456789101112extension ProductFlowController: ProductListControllerDelegate { func productListController(_ controller: ProductListController, didSelect product: Product) { let productDetailController = ProductDetailController( productNetworkingService: dependencyContainer.productNetworkingService, productEditService: dependencyContainer.productEditService, imageDownloaderService: dependencyContainer.imageDownloaderService ) productDetailController.delegate = self embeddedNavigationController.pushViewController(productDetailController, animated: true) }} Another approach is to use closure as callback, as proposed by @merowing_, and also in his post Improve your iOS Architecture with FlowControllers Using closures as triggers rather than delegate allows for more readable and specialized implementation, and multiple contexts 12345678910111213final class ProductFlowController { func start() { let productListController = ProductListController( productNetworkingService: dependencyContainer.productNetworkingService ) productListController.didSelectProduct = { [weak self] product in self?.showDetail(for: product) } embeddedNavigationController.viewControllers = [productListController] }} 11. FlowController and deep linkingTBD. In the mean while, here are some readings about the UX Navigation with Back and Up UserNotification","link":"/blog/Coordinator-and-FlowController/"},{"title":"How to add app icons and splash screens to a React Native app in staging and production","text":"Issue #268 Original post https://medium.freecodecamp.org/how-to-add-app-icons-and-splash-screens-to-a-react-native-app-in-staging-and-production-d1dab615e7c6 React Native was designed to be ‚Äúlearn once, write anywhere,‚Äù and it is usually used to build cross platform apps for iOS and Android. And for each app that we build, there are times we need to reuse the same code, build and tweak it a bit to make it work for different environments. For example, we might need multiple skins, themes, a free and paid version, or more often different staging and production environments. And the task that we can‚Äôt avoid is adding app icons and splash screens to our apps. In fact, to add a staging and production environment, and to add app icons, requires us to use Xcode and Android Studio, and we do it the same way we do with native iOS or Android projects. Let‚Äôs call our app MyApp and bootstrap it with react-native init MyApp . There will of course, be tons of libraries to help us with managing different environments. In this post, we will do just like we did with native apps, so that we know the basic steps. Build configuration, target, build types, production flavor, and build variantThere are some terminologies we needed to remember. In iOS, debug and releases are called build configurations, and staging and production are called targets. A build configuration specifies a set of build settings used to build a target‚Äôs product in a particular way. For example, it is common to have separate build configurations for debug and release builds of a product.A target specifies a product to build and contains the instructions for building the product from a set of files in a project or work-space. A target defines a single product; it organizes the inputs into the build system ‚Äî the source files and instructions for processing those source files ‚Äî required to build that product. Projects can contain one or more targets, each of which produces one product In Android, debug and releases are called build types, and staging and production are called product flavors. Together they form build variants. For example, a ‚Äúdemo‚Äù product flavor can specify different features and device requirements, such as custom source code, resources, and minimum API levels, while the ‚Äúdebug‚Äù build type applies different build and packaging settings, such as debug options and signing keys. The resulting build variant is the ‚ÄúdemoDebug‚Äù version of your app, and it includes a combination of the configurations and resources included in the ‚Äúdemo‚Äù product flavor, ‚Äúdebug‚Äù build type, and main/ source set. Staging and production targets in iOSOpen MyApp.xcodeproj inside ios using Xcode. Here is what we get after bootstrapping: React Native creates iOS and tvOS apps, and two test targets. In Xcode, a project can contain many targets, and each target means a unique product with its own build settings ‚Äî Info.plist and app icons. Duplicate targetIf we don‚Äôt need the tvOS app, we can delete the MyApp-tvOS and MyApp-tvOSTests . Let‚Äôs use MyApp target as our production environment, and right click -&gt; Duplicate to make another target. Let‚Äôs call it MyApp Staging. Each target must have unique bundle id. Change the bundle id of MyApp to com.onmyway133.MyApp and MyApp Staging to com.onmyway133.MyApp.Staging. Info.plistWhen we duplicate MyApp target , Xcode also duplicates Info.plist into MyApp copy-Info.plist for the staging target. Change it to a more meaningful name Info-Staging.plist and drag it to the MyApp group in Xcode to stay organised. After dragging, MyApp Staging target can‚Äôt find the plist, so click Choose Info.plist File and point to the Info-Staging.plist. SchemeXcode also duplicates the scheme when we duplicate the target, so we get MyApp copy: Click Manage Schemes in the scheme drop-down to open Scheme manager: I usually delete the generated MyApp copy scheme, then I create a new scheme again for the MyApp Staging target. You need to make sure that the scheme is marked as Shared so that it is tracked into git. For some reason, the staging scheme does not have all the things set up like the production scheme. You can run into issues like ‚ÄòReact/RCTBundleURLProvider.h‚Äô file not found or RN: ‚ÄòReact/RCTBridgeModule.h‚Äô file not found . It is because React target is not linked yet. To solve it, we must disable Parallelise Build and add React target and move it above MyApp Staging. Staging and production product flavors in AndroidOpen the android folder in Android Studio. By default there are only debug and release build types: They are configured in the app module build.gradle: buildTypes { release { minifyEnabled enableProguardInReleaseBuilds proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot; } }First, let‚Äôs change application id to com.onmyway133.MyApp to match iOS. It is not required but I think it‚Äôs good to stay organised. Then create two product flavors for staging and production. For staging, let‚Äôs add .Staging to the application id. From Android Studio 3, ‚Äúall flavors must now belong to a named flavor dimension‚Äù ‚Äî normally we just need default dimensions. Here is how it looks in build.gradle for our app module: android { compileSdkVersion rootProject.ext.compileSdkVersion buildToolsVersion rootProject.ext.buildToolsVersion flavorDimensions &quot;default&quot; defaultConfig { applicationId &quot;com.onmyway133.MyApp&quot; minSdkVersion rootProject.ext.minSdkVersion targetSdkVersion rootProject.ext.targetSdkVersion versionCode 1 versionName &quot;1.0&quot; ndk { abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot; } } splits { abi { reset() enable enableSeparateBuildPerCPUArchitecture universalApk false // If true, also generate a universal APK include &quot;armeabi-v7a&quot;, &quot;x86&quot; } } buildTypes { release { minifyEnabled enableProguardInReleaseBuilds proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot; } } productFlavors { staging { applicationIdSuffix &quot;.Staging&quot; } production { } } }Click Sync Now to let gradle do the syncing job. After that, we can see that we have four build variants: How to run staging and productionTo run the Android app, we can specify a variant like react-native run-android ‚Äî variant=productionDebug, but I prefer to go to Android Studio, select the variant, and run. To run iOS app, we can specify the scheme like react-native run-ios ‚Äî simulator=‚ÄôiPhone X‚Äô ‚Äî scheme=‚ÄùMyApp Staging‚Äù . As of react-native 0.57.0 this does not work. But it does not matter as I usually go to Xcode, select the scheme, and run. Add app icon for iOSAccording to the Human Interface Guideline, we need app icons of different sizes for different iOS versions, device resolutions, and situations (notification, settings, Spring Board). I‚Äôve crafted a tool called IconGenerator, which was previously mentioned in Best Open Source Tools For Developers. Drag the icon that you want ‚Äî I prefer those with 1024x1024 pixels for high resolution app icons ‚Äî to the Icon Generator MacOS app. Click Generate and we get AppIcon.appiconset . This contains app icons of the required sizes that are ready to be used in Asset Catalog. Drag this to Asset Catalog in Xcode. That is for production. For staging, it‚Äôs good practice to add a ‚ÄúStaging‚Äù banner so that testers know which is staging, and which is production. We can easily do this in Sketch. Remember to set a background, so we don‚Äôt get a transparent background. For an app icon with transparent background, iOS shows the background as black which looks horrible. After exporting the image, drag the staging icon to the IconGenerator the same way we did earlier. But this time, rename the generated appiconset to AppIcon-Staging.appiconset. Then drag this to Asset Catalog in Xcode. For the staging target to use staging app icons, open MyApp Staging target and choose AppIcon-Staging as App Icon Source. Add app icon for Android I like to switch to Project view, as it is easier to change app icons. Click res -&gt; New -&gt; Image Asset to open Asset Studio. We can use the same app icons that we used in iOS: Android 8.0 (API level 26) introduced Adaptive Icons so we need to tweak the Resize slider to make sure our app icons look as nice as possible. Android 8.0 (API level 26) introduces adaptive launcher icons, which can display a variety of shapes across different device models. For example, an adaptive launcher icon can display a circular shape on one OEM device, and display a squircle on another device. Each device OEM provides a mask, which the system then uses to render all adaptive icons with the same shape. Adaptive launcher icons are also used in shortcuts, the Settings app, sharing dialogs, and the overview screen. ‚Äî Android developers We are doing for production first, which means the main Res Directory. This step will replace the existing placeholder app icons generated by Android Studio when we bootstrapped React Native projects. Now that we have production app icons, let‚Äôs make staging app icons. Android manages code and assets via convention. Click on src -&gt; New -&gt; Directory and create a staging folder. Inside staging, create a folder called res . Anything we place in staging will replace the ones in main ‚Äî this is called source sets. You can read more here: Build with source sets. You can use source set directories to contain the code and resources you want packaged only with certain configurations. For example, if you are building the ‚ÄúdemoDebug‚Äù build variant, which is the crossproduct of a ‚Äúdemo‚Äù product flavor and ‚Äúdebug‚Äù build type, Gradle looks at these directories, and gives them the following priority:src/demoDebug/ (build variant source set)src/debug/ (build type source set)src/demo/ (product flavor source set)src/main/ (main source set) Right click on staging/res -&gt; New -&gt; Image Asset to make app icons for staging. We also use the same staging app icons like in iOS, but this time we choose staging as Res Directory. This way Android Studio knows how to generate different ic_launcher and put them into staging. Add launch screen for iOSThe splash screen is called a [Launch Screen](http://Launch Screen) in iOS, and it is important. A launch screen appears instantly when your app starts up. The launch screen is quickly replaced with the first screen of your app, giving the impression that your app is fast and responsive In the old days, we needed to use static launch images with different sizes for each device and orientation. Launch Screen storyboardFor now the recommended way is to use Launch Screen storyboard . The iOS project from React Native comes with LaunchScreen.xib but xib is a thing of the past. Let‚Äôs delete it and create a file called Launch Screen.storyboard . Right click on MyApp folder -&gt; New and chose Launch Screen, add it to both targets as usually we show the same splash screen for both staging and production. Image SetOpen asset catalog, right click and select New Image Set . We can name it anything. This will be used in the Launch Screen.storyboard. Open Launch Screen.storyboard and add an UIImageView . If you are using Xcode 10, click the Library button in the upper right corner and choose Show Objects Library. Set image for Image View, and make sure Content Mode is set to Aspect Filled, as this ensures that the image always covers the full screen (although it may be cropped). Then connect ImageView using constraints to the View, not the Safe Area. You do this by Control+drag from the Image View (splash) to the View. Constrains without marginClick into each constraint and uncheck Relative to Margin. This makes our ImageView pin to the very edges of the view and with no margin at all. Now go to both targets and select Launch Screen.storyboard as Launch Screen File: On iOS, the launch screen is often cached, so you probably won‚Äôt see the changes. One way to avoid that is to delete the app and run it again. Add a launcher theme for AndroidThere are several ways to add splash screen for Android, from using launcher themes, Splash Activity, and a timer. For me, a reasonable splash screen for Android should be a very minimal image. As there are many Android devices with different ratios and resolutions, if you want to show a full screen splash image, it will probably not scale correctly for each device. This is just about UX. For the splash screen, let‚Äôs use the launcher theme with splash_background.xml . Learn about Device MetricThere is no single splash image that suits all Android devices. A more logical approach is to create multiple splash images for all common resolutions in portrait and landscape. Or we can design a minimal splash image that works. You can find more info here: Device Metric. Here is how to add splash screen in 4 easy steps: Add splash imageWe usually need a common splash screen for both staging and production. Drag an image into main/res/drawble . Android Studio seems to have a problem with recognising some jpg images for the splash screen, so it‚Äôs best to choose png images. Add splash_background.xmlRight click on drawable -&gt; New -&gt; Drawable resource file . Name it whatever you want ‚Äî I choose splash_background.xml . Choose the root element as layer-list: A [Layer List](http://Layer List) means ‚Äúa Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is drawn on top‚Äù. Here is how splash_background.xml looks like: &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!-- The android:opacity=‚Äùopaque‚Äù line ‚Äî this is critical in preventing a flash of black as your theme transitions. --&gt; &lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:opacity=&quot;opaque&quot;&gt; &lt;!-- The background color, preferably the same as your normal theme --&gt; &lt;item android:drawable=&quot;@android:color/white&quot;/&gt; &lt;!-- Your splash image --&gt; &lt;item&gt; &lt;bitmap android:src=&quot;@drawable/iron_man&quot; android:gravity=&quot;center&quot;/&gt; &lt;/item&gt; &lt;/layer-list&gt;Note that we point to our splash image we added earlier with android:src=‚Äù@drawable/iron_man‚Äù. Declare styleOpen styles.xml and add SplashTheme: &lt;style name=&quot;SplashTheme&quot; parent=&quot;Theme.AppCompat.NoActionBar&quot;&gt; &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/splash_background&lt;/item&gt; &lt;/style&gt;Use SplashThemeGo to Manifest.xml and change the theme of the the launcher activity, which has category android:name=‚Äùandroid.intent.category.LAUNCHER‚Äù . Change it to android:theme=‚Äù@style/SplashTheme‚Äù . For React Native, the launcher activity is usually MainActivity . Here is how Manifest.xml looks: &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.myapp&quot;&gt; &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt; &lt;application android:name=&quot;.MainApplication&quot; android:label=&quot;@string/app_name&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:allowBackup=&quot;false&quot; android:theme=&quot;@style/AppTheme&quot;&gt; &lt;activity android:name=&quot;.MainActivity&quot; android:label=&quot;@string/app_name&quot; android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize&quot; android:theme=&quot;@style/SplashTheme&quot; android:windowSoftInputMode=&quot;adjustResize&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt; &lt;/application&gt; &lt;/manifest&gt;Run the app now and you should see the splash screen showing when the app starts. Managing environment configurationsThe differences between staging and production are just about app names, application ids, and app icons. We probably use different API keys, and backend URL for staging and production. Right now the most popular library to handle these scenarios is react-native-config, which is said to ‚Äúbring some 12 factor love to your mobile apps‚Äù. It requires lots of steps to get started, and I hope there is a less verbose solution. Where to go from hereIn this post, we touched Xcode and Android Studio more than Visual Studio Code, but this was inevitable. I hope this post was useful to you. Here are some more links to read more about this topic: Add App Icons and Launch Screens to React Native Apps (iOS &amp; Android) How to Add a Splash Screen to a React Native App (iOS and Android) Managing Configuration in React Native Adding multiple target pipelines for React Native Apps (and Fastlane CircleCI deployment) pt. 1 The (Complete) Android Splash Screen Guide","link":"/blog/How-to-add-app-icons-and-splash-screens-to-a-React-Native-app-in-staging-and-production/"},{"title":"How to Make Linear Gradient View with Bridging in React Native","text":"Issue #264 Original post https://medium.com/react-native-training/react-native-bridging-how-to-make-linear-gradient-view-83c3805373b7 React Native lets us build mobile apps using only Javascript. It works by providing a common interface that talks to native iOS and Android components. There are enough essentials components to get started, but the cooler thing is that it is easy to build our own, hence we are not limited by React Native. In this post we will implement a linear gradient view, which is not supported by default in React Native, using native UI component, particularly CAGradientLayer in iOS and GradientDrawable in Android. In Javascript there are hundreds of libraries for a single problem and you should check if you really need it or not. A search on Google for linear gradient shows a bunch of libraries, like react-native-linear-gradient. The less dependencies the better. Linear gradient is in fact very easy to build and we probably don‚Äôt need to add extra dependencies. Also integrating and following updates with 3rd libraries are painful, I would avoid that as much as possible. Native UI component vs Native moduleIn React Native, there are native UI component and native module. React Native moves pretty fast so most of the articles will be outdated, it‚Äôs best to consult official documentation for the latest React Native version. This post will try to give you overview of the whole picture because for now the official guide seems not completed. Native Modules in iOS Native Modules in Android Native UI Components in iOS Native UI Components in Android In simple explanation, native UI component is about making UIView in iOS or View in Android available as React.Component and used in render function in Javascript. There are tons of native UI widgets out there ready to be used in the latest apps ‚Äî some of them are part of the platform, others are available as third-party libraries, and still more might be in use in your very own portfolio. React Native has several of the most critical platform components already wrapped, like ScrollView and TextInput, but not all of them, and certainly not ones you might have written yourself for a previous app. Native module is more general in that we make any native class available in Javascript. Sometimes an app needs access to platform API, and React Native doesn‚Äôt have a corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift or C++ code without having to reimplement it in JavaScript, or write some high performance, multi-threaded code such as for image processing, a database, or any number of advanced extensions. View ManagerTo expose native UI views, we use the ViewManager as the bridge, it is RCTViewManager in iOS and SimpleViewManager in Android. Then inside this ViewManager we can just return our custom view. I see it‚Äôs good to use Objective C/Java for the ViewManager to match React Native classes, and the custom view we can use either Swift/Objective C in iOS and Kotlin/Java in Android. I prefer to use Swift, but in this post to remove the overhead of introducing bridging header from Swift to Objective C, we use Objective C for simplicity. We also add the native source code directly into iOS and Android project, but in the future we can extract them easily to a React Native library. For now let ‚Äòs use the name RNGradientViewManager and RNGradientView to stay consistent between iOS and Android. The RN prefix is arbitrary, you can use any prefix you want, but here I use it to indicate that these classes are meant to be used in Javascript side in React Native. Implement in iOSProject structureAdd these Objective-C classes to the projects, I usually place them inside NativeComponents folder Native views are created and manipulated by subclasses of RCTViewManager. These subclasses are similar in function to view controllers, but are essentially singletons - only one instance of each is created by the bridge. They expose native views to the RCTUIManager, which delegates back to them to set and update the properties of the views as necessary. The RCTViewManagers are also typically the delegates for the views, sending events back to JavaScript via the bridge. RNGradientViewManagerCreate a RNGradientViewManager that inherits from RCTViewManager RNGradientViewManager.h #import &lt;React/RCTViewManager.h&gt; @interface RNGradientViewManager : RCTViewManager @endRNGradientViewManager.m #import &quot;RNGradientViewManager.h&quot; #import &quot;RNGradientView.h&quot; [@implementation](http://twitter.com/implementation) RNGradientViewManager RCT_EXPORT_MODULE() - (UIView *)view { return [[RNGradientView alloc] init]; } RCT_EXPORT_VIEW_PROPERTY(progress, NSNumber); RCT_EXPORT_VIEW_PROPERTY(cornerRadius, NSNumber); RCT_EXPORT_VIEW_PROPERTY(fromColor, UIColor); RCT_EXPORT_VIEW_PROPERTY(toColor, UIColor); [@end](http://twitter.com/end)In iOS we use macro RCT_EXPORT_MODULE() to automatically register the module with the bridge when it loads. The optional js_name argument will be used as the JS module name. If omitted, the JS module name will match the Objective-C class name. #define RCT_EXPORT_MODULE(js_name)The ViewManager, not the View, is the facade to the Javascript side, so we expose properties using RCT_EXPORT_VIEW_PROPERTY . Note that we do that inside @implementation RNGradientViewManager Here we specify the types as NSNumber and UIColor , and later in Javascript we can just pass number and color hex string, and React Native can do the conversions for us. In older versions of React Native, we need processColor in Javascript or RCTConvert color in iOS side, but we don‚Äôt need to perform manual conversion now. RNGradientViewIn the Native UI component example for iOS, they use WKWebView but here we make a RNGradientView which subclasses from RCTView to take advantage of many features of React Native views, and to avoid some problems we can get if using a normal UIView RNGradientView.h #import &lt;UIKit/UIKit.h&gt; #import &lt;React/RCTView.h&gt; [@interface](http://twitter.com/interface) RNGradientView : RCTView [@end](http://twitter.com/end)RNGradientView.m #import &quot;RNGradientView.h&quot; #import &lt;UIKit/UIKit.h&gt; [@interface](http://twitter.com/interface) RNGradientView() [@property](http://twitter.com/property) CAGradientLayer *gradientLayer; [@property](http://twitter.com/property) UIColor *_fromColor; [@property](http://twitter.com/property) UIColor *_toColor; [@property](http://twitter.com/property) NSNumber *_progress; [@property](http://twitter.com/property) NSNumber *_cornerRadius; [@end](http://twitter.com/end) [@implementation](http://twitter.com/implementation) RNGradientView // MARK: - Init - (instancetype)initWithFrame:(CGRect)frame { self = [super initWithFrame:frame]; if (self) { self.gradientLayer = [self makeGradientLayer]; [self.layer addSublayer:self.gradientLayer]; self._fromColor = [UIColor blackColor]; self._toColor = [UIColor whiteColor]; self._progress = [@0](http://twitter.com/0).5; [self update]; } return self; } // MARK: - Life cycle - (void)layoutSubviews { [super layoutSubviews]; self.gradientLayer.frame = CGRectMake( 0, 0, self.bounds.size.width*self._progress.floatValue, self.bounds.size.height ); } // MARK: - Properties - (void)setFromColor:(UIColor *)color { self._fromColor = color; [self update]; } - (void)setToColor:(UIColor *)color { self._toColor = color; [self update]; } - (void)setProgress:(NSNumber *)progress { self._progress = progress; [self update]; } - (void)setCornerRadius:(NSNumber *)cornerRadius { self._cornerRadius = cornerRadius; [self update]; } // MARK: - Helper - (void)update { self.gradientLayer.colors = @[ (id)self._fromColor.CGColor, (id)self._toColor.CGColor ]; self.gradientLayer.cornerRadius = self._cornerRadius.floatValue; [self setNeedsLayout]; } - (CAGradientLayer *)makeGradientLayer { CAGradientLayer *gradientLayer = [CAGradientLayer layer]; gradientLayer.masksToBounds = true; gradientLayer.startPoint = CGPointMake(0.0, 0.5); gradientLayer.endPoint = CGPointMake(1.0, 0.5); gradientLayer.anchorPoint = CGPointZero; return gradientLayer; } [@end](http://twitter.com/end)We can implement anything we want in this native view, in this case we use CAGradientLayer to get nicely displayed linear gradient. Since RNGradientViewManager exposes some properties like progress, cornerRadius, fromColor, toColor we need to implement some setters as they will be called by React Native when we update values in Javascript side. In the setter we call setNeedsLayout to tell the view to invalidate the layout, hence layoutSubviews will be called again. requireNativeComponentOpen project in Visual Studio Code, add GradientView.js to src/nativeComponents . The folder name is arbitrary, but it‚Äôs good to stay organised. import { requireNativeComponent } from &apos;react-native&apos; module.exports = requireNativeComponent(&apos;RNGradientView&apos;, null)Here we use requireNativeComponent to load our RNGradientView . We only need this one Javascript file for interacting with both iOS and Android. You can name the module as RNGradientView but I think the practice in Javascript is that we don‚Äôt use prefix, so we name just GradientView . const requireNativeComponent = (uiViewClassName: string): string =&gt; createReactNativeComponentClass(uiViewClassName, () =&gt; getNativeComponentAttributes(uiViewClassName), ); module.exports = requireNativeComponent;Before I tried to use export default for the native component, but this way the view is not rendered at all, even if I wrap it inside React.Component . It seems we must use module.exports for the native component to be properly loaded. Now using it is as easy as declare the GradientView with JSX syntax import GradientView from &apos;nativeComponents/GradientView&apos; export default class Profile extends React.Component { render() { return ( &lt;SafeAreaView style={styles.container}&gt; &lt;GradientView style={styles.progress} fromColor={R.colors.progress.from} toColor={R.colors.progress.to} cornerRadius={5.0} progress={0.8} /&gt; ) } }Implement in AndroidProject structureAdd these Java classes to the projects, I usually place them inside nativeComponents folder RNGradientManagerCreate a RNGradientManager that extends SimpleViewManagerRNGradientManager.java package com.onmyway133.myApp.nativeComponents; import android.support.annotation.Nullable; import com.facebook.react.uimanager.SimpleViewManager; import com.facebook.react.uimanager.ThemedReactContext; import com.facebook.react.uimanager.annotations.ReactProp; public class RNGradientViewManager extends SimpleViewManager&lt;RNGradientView&gt; { [@Override](http://twitter.com/Override) public String getName() { return &quot;RNGradientView&quot;; } [@Override](http://twitter.com/Override) protected RNGradientView createViewInstance(ThemedReactContext reactContext) { return new RNGradientView(reactContext); } // Properties [@ReactProp](http://twitter.com/ReactProp)(name = &quot;progress&quot;) public void setProgress(RNGradientView view, [@Nullable](http://twitter.com/Nullable) float progress) { view.setProgress(progress); } [@ReactProp](http://twitter.com/ReactProp)(name = &quot;cornerRadius&quot;) public void setCornerRadius(RNGradientView view, [@Nullable](http://twitter.com/Nullable) float cornerRadius) { view.setCornerRadius(cornerRadius); } [@ReactProp](http://twitter.com/ReactProp)(name = &quot;fromColor&quot;, customType = &quot;Color&quot;) public void setFromColor(RNGradientView view, [@Nullable](http://twitter.com/Nullable) int color) { view.setFromColor(color); } [@ReactProp](http://twitter.com/ReactProp)(name = &quot;toColor&quot;, customType = &quot;Color&quot;) public void setToColor(RNGradientView view, [@Nullable](http://twitter.com/Nullable) int color) { view.setToColor(color); } }We usually use Color as android.graphics.Color , but for the GradientDrawable that we are going to use, it use color as ARGB integer. So it‚Äôs nifty that React Native deals with Color as int type. We also need to specify customType = ‚ÄúColor‚Äù as Color is something kinda custom. RNGradientViewThis is where we implement our view, we can do that in Kotlin if we like. RNGradientView.java package com.onmyway133.myApp.nativeComponents; import android.content.Context; import android.graphics.drawable.GradientDrawable; import android.graphics.drawable.ScaleDrawable; import android.support.annotation.Nullable; import android.util.AttributeSet; import android.view.Gravity; import android.view.View; public class RNGradientView extends View { float progress; float cornerRadius; int fromColor; int toColor; public RNGradientView(Context context) { super(context); } public RNGradientView(Context context, @Nullable AttributeSet attrs) { super(context, attrs); } public RNGradientView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } public RNGradientView(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) { super(context, attrs, defStyleAttr, defStyleRes); } // update void update() { GradientDrawable gradient = new GradientDrawable(); gradient.setColors(new int[] { this.fromColor, this.toColor }); gradient.setOrientation(GradientDrawable.Orientation.*LEFT_RIGHT*); gradient.setGradientType(GradientDrawable.*LINEAR_GRADIENT*); gradient.setShape(GradientDrawable.*RECTANGLE*); gradient.setCornerRadius(this.cornerRadius * 4); ScaleDrawable scale = new ScaleDrawable(gradient, Gravity.*LEFT*, 1, -1); scale.setLevel((int)(this.progress * 10000)); this.setBackground(scale); } // Getter &amp; setter public void setProgress(float progress) { this.progress = progress; this.update(); } public void setCornerRadius(float cornerRadius) { this.cornerRadius = cornerRadius; this.update(); } public void setFromColor(int fromColor) { this.fromColor = fromColor; this.update(); } public void setToColor(int toColor) { this.toColor = toColor; this.update(); } }Pay attention to the setColors as it use an array of int Sets the colors used to draw the gradient.Each color is specified as an ARGB integer and the array must contain at least 2 colors. If we call setBackground with the GradientDrawable it will be stretched to fill the view. In our case we want to support progress which determines how long the gradient should show. To fix that we use ScaleDrawable which is a Drawable that changes the size of another Drawable based on its current level value. The same value for cornerRadius works in iOS, but for Android we need to use higher values, that‚Äôs why the multiplication in gradient.setCornerRadius(this.cornerRadius * 4) Shape drawableAnother way to implement gradient is to use Shape Drawable with xml , it‚Äôs the equivalent of using xib in iOS. We can create something like gradient.xml and put that inside /res/drawable &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;shape xmlns:android=&quot;[http://schemas.android.com/apk/res/android](http://schemas.android.com/apk/res/android)&quot; android:shape=&quot;rectangle&quot;&gt; &lt;gradient android:startColor=&quot;#3B5998&quot; android:endColor=&quot;#00000000&quot; android:angle=&quot;45&quot;/&gt; &lt;/shape&gt;For more information, you can readAndroid Shape Drawables TutorialHave you ever wanted to reduce your Android application‚Äôs size or make it look more interesting? If yes, then you‚Ä¶android.jlelse.eu We can also use the class directly ShapeDrawable in code A Drawable object that draws primitive shapes. A ShapeDrawable takes a Shape object and manages its presence on the screen. If no Shape is given, then the ShapeDrawable will default to a RectShape.This object can be defined in an XML file with the element. GradientManagerPackageIn iOS we use RCT_EXPORT_MODULE to register the component, but in Android, things are done explicitly using Package . A package can register both native module and native UI component. In this case we deal with just UI component, so let‚Äôs return RNGradientManager in createViewManagers GradientManagerPackage.java package com.onmyway133.myApp.nativeComponents; import com.facebook.react.ReactPackage; import com.facebook.react.bridge.NativeModule; import com.facebook.react.bridge.ReactApplicationContext; import com.facebook.react.uimanager.ViewManager; import java.util.Arrays; import java.util.Collections; import java.util.List; public class RNGradientViewPackage implements ReactPackage { [@Override](http://twitter.com/Override) public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) { return Collections.emptyList(); } [@Override](http://twitter.com/Override) public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) { return Arrays.&lt;ViewManager&gt;asList( new RNGradientViewManager() ); } }Then head over to MainApplication.java to declare our package [@Override](http://twitter.com/Override) protected List&lt;ReactPackage&gt; getPackages() { return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new RNGradientViewPackage() ); }That‚Äôs it for Android. We already have the GradientView.js written earlier, when running the app in Android, it will look up and load our RNGradientView Where to go from hereHope you learn something about native UI component. In the post we only touch the surfaces on what native UI component can do, which is just passing configurations from Javascript to native. There are a lot more to discover, like event handling, thread, styles, custom types, please consult the official documentation for correct guidance. Native UI Components for iOS Native UI Components for Android","link":"/blog/How-to-Make-Linear-Gradient-View-with-Bridging-in-React-Native/"},{"title":"How to make credit card input UI in Swift","text":"Issue #346 We have FrontCard that contains number and expiration date, BackCard that contains CVC. CardView is used to contain front and back sides for flipping transition. We leverage STPPaymentCardTextField from Stripe for working input fields, then CardHandler is used to parse STPPaymentCardTextField content and update our UI. For masked credit card numbers, we pad string to fit 16 characters with ‚óè symbol, then chunk into 4 parts and zip with labels to update. For flipping animation, we use UIView.transition with showHideTransitionViews BackCard.swift 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import UIKitfinal class BackCard: UIView { lazy var rectangle: UIView = { let view = UIView() view.backgroundColor = R.color.darkText return view }() lazy var cvcLabel: UILabel = { let label = UILabel() label.font = R.customFont.medium(14) label.textColor = R.color.darkText label.textAlignment = .center return label }() lazy var cvcBox: UIView = { let view = UIView() view.backgroundColor = R.color.lightText return view }() override init(frame: CGRect) { super.init(frame: frame) setup() } required init?(coder aDecoder: NSCoder) { fatalError() } private func setup() { addSubviews([rectangle, cvcBox, cvcLabel]) NSLayoutConstraint.on([ rectangle.leftAnchor.constraint(equalTo: leftAnchor), rectangle.rightAnchor.constraint(equalTo: rightAnchor), rectangle.heightAnchor.constraint(equalToConstant: 52), rectangle.topAnchor.constraint(equalTo: topAnchor, constant: 30), cvcBox.rightAnchor.constraint(equalTo: rightAnchor, constant: -16), cvcBox.topAnchor.constraint(equalTo: rectangle.bottomAnchor, constant: 16), cvcBox.widthAnchor.constraint(equalToConstant: 66), cvcBox.heightAnchor.constraint(equalToConstant: 30), cvcLabel.centerXAnchor.constraint(equalTo: cvcBox.centerXAnchor), cvcLabel.centerYAnchor.constraint(equalTo: cvcBox.centerYAnchor) ]) }} FrontCard.swift 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import UIKitfinal class FrontCard: UIView { lazy var stackView: UIStackView = { let stackView = UIStackView() stackView.axis = .horizontal stackView.distribution = .equalSpacing return stackView }() lazy var numberLabels: [UILabel] = Array(0..&lt;4).map({ _ in return UILabel() }) lazy var expirationStaticLabel: UILabel = { let label = UILabel() label.font = R.customFont.regular(10) label.textColor = R.color.darkText return label }() lazy var expirationLabel: UILabel = { let label = UILabel() label.font = R.customFont.medium(14) label.textColor = R.color.darkText return label }() override init(frame: CGRect) { super.init(frame: frame) setup() } required init?(coder aDecoder: NSCoder) { fatalError() } private func setup() { addSubview(stackView) numberLabels.forEach { stackView.addArrangedSubview($0) } addSubviews([expirationStaticLabel, expirationLabel]) numberLabels.forEach { $0.font = R.customFont.medium(16) $0.textColor = R.color.darkText $0.textAlignment = .center } NSLayoutConstraint.on([ stackView.heightAnchor.constraint(equalToConstant: 50), stackView.leftAnchor.constraint(equalTo: leftAnchor, constant: 24), stackView.rightAnchor.constraint(equalTo: rightAnchor, constant: -24), stackView.topAnchor.constraint(equalTo: centerYAnchor), expirationStaticLabel.topAnchor.constraint(equalTo: stackView.bottomAnchor), expirationStaticLabel.leftAnchor.constraint(equalTo: rightAnchor, constant: -70), expirationLabel.leftAnchor.constraint(equalTo: expirationStaticLabel.leftAnchor), expirationLabel.topAnchor.constraint(equalTo: expirationStaticLabel.bottomAnchor) ]) }} CardView.swift 123456789101112131415161718192021222324252627282930import UIKitfinal class CardView: UIView { let backCard = BackCard() let frontCard = FrontCard() override init(frame: CGRect) { super.init(frame: frame) setup() } required init?(coder aDecoder: NSCoder) { fatalError() } private func setup() { addSubview(backCard) addSubview(frontCard) [backCard, frontCard].forEach { NSLayoutConstraint.on([ $0.pinEdges(view: self) ]) $0.clipsToBounds = true $0.layer.cornerRadius = 10 $0.backgroundColor = R.color.card.background } }} CardHandler.swift 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import Foundationimport Stripefinal class CardHandler { let cardView: CardView init(cardView: CardView) { self.cardView = cardView } func reset() { cardView.frontCard.expirationStaticLabel.text = R.string.localizable.cardExpiration() cardView.frontCard.expirationLabel.text = R.string.localizable.cardExpirationPlaceholder() cardView.backCard.cvcLabel.text = R.string.localizable.cardCvcPlaceholder() } func showFront() { flip( from: cardView.backCard, to: cardView.frontCard, options: .transitionFlipFromLeft ) } func showBack() { flip( from: cardView.frontCard, to: cardView.backCard, options: .transitionFlipFromRight ) } func handle(_ textField: STPPaymentCardTextField) { handle(number: textField.cardNumber ?? \"\") handle(month: textField.formattedExpirationMonth, year: textField.formattedExpirationYear) handle(cvc: textField.cvc) } private func handle(number: String) { let paddedNumber = number.padding( toLength: 16, withPad: R.string.localizable.cardNumberPlaceholder(), startingAt: 0 ) let chunkedNumbers = paddedNumber.chunk(by: 4) zip(cardView.frontCard.numberLabels, chunkedNumbers).forEach { tuple in tuple.0.text = tuple.1 } } private func handle(cvc: String?) { if let cvc = cvc, !cvc.isEmpty { cardView.backCard.cvcLabel.text = cvc } else { cardView.backCard.cvcLabel.text = R.string.localizable.cardCvcPlaceholder() } } private func handle(month: String?, year: String?) { guard let month = month, let year = year, !month.isEmpty else { cardView.frontCard.expirationLabel.text = R.string.localizable.cardExpirationPlaceholder() return } let formattedYear = year.ifEmpty(replaceWith: \"00\") cardView.frontCard.expirationLabel.text = \"\\(month)/\\(formattedYear)\" } private func flip(from: UIView, to: UIView, options: UIView.AnimationOptions) { UIView.transition( from: from, to: to, duration: 0.25, options: [options, .showHideTransitionViews], completion: nil ) }} String+Extension.swift 12345678910111213extension String { func ifEmpty(replaceWith: String) -&gt; String { return isEmpty ? replaceWith : self } func chunk(by length: Int) -&gt; [String] { return stride(from: 0, to: count, by: length).map { let start = index(startIndex, offsetBy: $0) let end = index(start, offsetBy: length, limitedBy: endIndex) ?? endIndex return String(self[start..&lt;end]) } }}","link":"/blog/How-to-make-credit-card-input-UI-in-Swift/"},{"title":"How to make progress HUD in Swift","text":"Issue #566 Code FantasticDisplay Create a container that has blur effect1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class HUDContainer: UIVisualEffectView, AnimationAware { private let innerContentView: UIView &amp; AnimationAware public let label = UILabel() public var text: String? { didSet { label.text = text label.sizeToFit() label.isHidden = text == nil } } public init(contentView: UIView &amp; AnimationAware) { self.innerContentView = contentView super.init(effect: UIBlurEffect(style: .light)) self.contentView.addSubview(innerContentView) self.contentView.addSubview(label) innerContentView.pinEdgesToSuperview() configure() } public required init?(coder aDecoder: NSCoder) { fatalError() } public func configure() { layer.cornerRadius = 8 layer.masksToBounds = true label.isHidden = false label.font = UIFont.preferredFont(forTextStyle: .body) label.textColor = UIColor.black label.textAlignment = .center label.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activate([ label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8), label.leftAnchor.constraint(equalTo: contentView.leftAnchor, constant: 10), label.rightAnchor.constraint(equalTo: contentView.rightAnchor, constant: -10), ]) } public func startAnimation() { innerContentView.startAnimation() } public func endAnimation() { innerContentView.stopAnimation() }} Make error view with 2 cross lines1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import UIKitpublic class ErrorView: UIView, AnimationAware { public let line1 = CAShapeLayer() public let line2 = CAShapeLayer() public let animation1 = CASpringAnimation(keyPath: #keyPath(CALayer.transform)) public let animation2 = CASpringAnimation(keyPath: #keyPath(CALayer.transform)) public var lineColor: UIColor = UIColor.darkGray public var duration: TimeInterval = 0.75 public override init(frame: CGRect) { super.init(frame: frame) layer.addSublayer(line1) layer.addSublayer(line2) configure() } public required init?(coder aDecoder: NSCoder) { fatalError() } public override func layoutSubviews() { super.layoutSubviews() configureSize() } public func configure() { [line1, line2].forEach { $0.backgroundColor = lineColor.cgColor } [animation1, animation2].forEach { $0.fromValue = 0 $0.damping = 0.33 $0.initialVelocity = 0.01 $0.mass = 0.2 $0.duration = duration $0.valueFunction = CAValueFunction(name: CAValueFunctionName.rotateZ) $0.timingFunction = CAMediaTimingFunction(name: .easeIn) } animation1.toValue = CGFloat.pi / 4 animation2.toValue = -CGFloat.pi / 4 } private func configureSize() { guard line1.frame.width &lt;= 0 else { return } [line1, line2].forEach { $0.cornerRadius = 3 $0.frame.size = CGSize(width: bounds.width*0.6, height: 6) $0.position = layer.position } } public override func didMoveToWindow() { super.didMoveToWindow() line1.transform = CATransform3DIdentity line2.transform = CATransform3DIdentity } public func startAnimation() { line1.transform = CATransform3DMakeRotation(CGFloat.pi/4, 0, 0, 1.0) line2.transform = CATransform3DMakeRotation(-CGFloat.pi/4, 0, 0, 1.0) line1.add(animation1, forKey: nil) line2.add(animation2, forKey: nil) } public func stopAnimation() { line1.removeAllAnimations() line2.removeAllAnimations() }} Make loading progress using replicator layers1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import UIKitpublic class ProgressView: UIView, AnimationAware { public let replicatorLayer = CAReplicatorLayer() public let animation = CABasicAnimation(keyPath: #keyPath(CALayer.opacity)) public let line = CALayer() public var lineCount: Int = 12 public var duration: TimeInterval = 1.0 public var lineSize: CGSize = CGSize(width: 20, height: 6) public var lineColor: UIColor = UIColor.darkGray public override init(frame: CGRect) { super.init(frame: .zero) configure() } public required init?(coder aDecoder: NSCoder) { fatalError() } public func configure() { let angle = CGFloat.pi * 2 / CGFloat(lineCount) let rotation = CATransform3DMakeRotation(angle, 0, 0, 1.0) replicatorLayer.instanceTransform = rotation replicatorLayer.instanceCount = lineCount replicatorLayer.instanceDelay = duration / TimeInterval(lineCount) line.backgroundColor = lineColor.cgColor line.frame.size = lineSize line.cornerRadius = lineSize.height / 2 animation.fromValue = 1.0 animation.toValue = 0.0 animation.repeatCount = Float.greatestFiniteMagnitude animation.timingFunction = CAMediaTimingFunction(name: .linear) animation.duration = duration replicatorLayer.addSublayer(line) layer.addSublayer(replicatorLayer) // x: the larger, the closer to center // y: half the height, changing affects rotation of lines line.position = CGPoint(x: 48, y: 75) } public override func layoutSubviews() { super.layoutSubviews() replicatorLayer.frame = bounds } public func startAnimation() { line.add(animation, forKey: nil) } public func stopAnimation() { line.removeAllAnimations() }} Make success view with check mark animation123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import UIKitpublic class SuccessView: UIView, AnimationAware { public let shapeLayer = CAShapeLayer() public let animation = CABasicAnimation(keyPath: #keyPath(CAShapeLayer.strokeEnd)) public var lineColor: UIColor = UIColor.darkGray public var duration: TimeInterval = 0.25 public override init(frame: CGRect) { super.init(frame: frame) layer.addSublayer(shapeLayer) configure() } public required init?(coder aDecoder: NSCoder) { fatalError() } public override func layoutSubviews() { super.layoutSubviews() configurePath() } public func configure() { shapeLayer.lineCap = .round shapeLayer.lineJoin = .round shapeLayer.fillColor = nil shapeLayer.strokeColor = lineColor.cgColor shapeLayer.lineWidth = 6 animation.timingFunction = CAMediaTimingFunction(name: .easeIn) animation.fromValue = 0.0 animation.toValue = 1.0 animation.duration = duration } private func configurePath() { let size = CGSize(width: 80, height: 60) shapeLayer.frame = CGRect(origin: .zero, size: size) shapeLayer.position = layer.position let path = UIBezierPath() path.move(to: CGPoint(x: size.width * 0, y: size.height * 0.48)) path.addLine(to: CGPoint(x: size.width * 0.38, y: size.height)) path.addLine(to: CGPoint(x: size.width, y: size.height * 0.01)) shapeLayer.path = path.cgPath } public override func didMoveToWindow() { super.didMoveToWindow() shapeLayer.strokeEnd = 0.0 } public func startAnimation() { shapeLayer.strokeEnd = 1.0 shapeLayer.add(animation, forKey: nil) } public func stopAnimation() { shapeLayer.removeAllAnimations() }}","link":"/blog/How-to-make-progress-HUD-in-Swift/"},{"title":"How to make simple adapter for delegate and datasource for UICollectionView and UITableView","text":"Issue #567 Code Upstream Make open Adapter https://github.com/onmyway133/Upstreamimport UIKitpublic protocol AdapterDelegate: class { /// Apply model to view func configure(model: Any, view: UIView, indexPath: IndexPath) /// Handle view selection func select(model: Any) /// Size the view func size(model: Any, containerSize: CGSize) -&gt; CGSize}/// Act as DataSource and Delegate for UICollectionView, UITableViewopen class Adapter: NSObject, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout,UITableViewDataSource, UITableViewDelegate { public var sections: [Section] = [] public weak var collectionView: UICollectionView? public weak var tableView: UITableView? public weak var delegate: AdapterDelegate? let registryService = RegistryService() // MARK: - Initialiser public required init(collectionView: UICollectionView) { self.collectionView = collectionView super.init() } public required init(tableView: UITableView) { self.tableView = tableView super.init() } // MARK: - UICollectionViewDataSource open func numberOfSections(in collectionView: UICollectionView) -&gt; Int { return sections.count } open func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int { return sections[section].items.count } open func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell { let item = sections[indexPath.section].items[indexPath.row] let cell = collectionView.dequeueReusableCell( withReuseIdentifier: item.cellType.typeName, for: indexPath) delegate?.configure(model: item.model, view: cell, indexPath: indexPath) return cell } open func collectionView( _ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -&gt; UICollectionReusableView { if let header = sections[indexPath.section].header, kind == UICollectionElementKindSectionHeader { let view = collectionView.dequeueReusableSupplementaryView( ofKind: UICollectionElementKindSectionHeader, withReuseIdentifier: header.viewType.typeName, for: indexPath ) delegate?.configure(model: header.model, view: view, indexPath: indexPath) return view } else if let footer = sections[indexPath.section].footer, kind == UICollectionElementKindSectionFooter { let view = collectionView.dequeueReusableSupplementaryView( ofKind: UICollectionElementKindSectionFooter, withReuseIdentifier: footer.viewType.typeName, for: indexPath ) delegate?.configure(model: footer.model, view: view, indexPath: indexPath) return view } else { let view = DummyReusableView() view.isHidden = true return view } } // MARK: - UICollectionViewDelegate open func collectionView( _ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) { let item = sections[indexPath.section].items[indexPath.row] delegate?.select(model: item.model) collectionView.deselectItem(at: indexPath, animated: true) } open func collectionView( _ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize { let item = sections[indexPath.section].items[indexPath.row] if let size = delegate?.size(model: item.model, containerSize: collectionView.frame.size) { return size } if let size = (collectionViewLayout as? UICollectionViewFlowLayout)?.itemSize { return size } return collectionView.frame.size } open func collectionView( _ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -&gt; CGSize { guard let header = sections[section].header else { return .zero } guard let size = delegate?.size(model: header.model, containerSize: collectionView.frame.size) else { return .zero } return size } open func collectionView( _ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -&gt; CGSize { guard let footer = sections[section].footer else { return .zero } guard let size = delegate?.size(model: footer.model, containerSize: collectionView.frame.size) else { return .zero } return size } // MARK: - Reload open func reload(sections: [Section]) { // Registry registryService.registerIfNeeded( collectionView: collectionView, tableView: tableView, sections: sections ) self.sections = sections collectionView?.reloadData() tableView?.reloadData() } // MARK: - UITableViewDataSource open func numberOfSections(in tableView: UITableView) -&gt; Int { return sections.count } open func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return sections[section].items.count } open func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let item = sections[indexPath.section].items[indexPath.row] let cell = tableView.dequeueReusableCell( withIdentifier: item.cellType.typeName, for: indexPath ) delegate?.configure(model: item.model, view: cell, indexPath: indexPath) return cell } // MARK: - UITableViewDelegate open func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { let item = sections[indexPath.section].items[indexPath.row] delegate?.select(model: item.model) tableView.deselectRow(at: indexPath, animated: true) } open func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat { let item = sections[indexPath.section].items[indexPath.row] if let size = delegate?.size(model: item.model, containerSize: tableView.frame.size) { return size.height } return 0 } open func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat { guard let header = sections[section].header else { return 0 } guard let size = delegate?.size(model: header.model, containerSize: tableView.frame.size) else { return 0 } return size.height } open func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -&gt; CGFloat { guard let footer = sections[section].footer else { return 0 } guard let size = delegate?.size(model: footer.model, containerSize: tableView.frame.size) else { return 0 } return size.height } open func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? { guard let header = sections[section].header else { return nil } guard let view = tableView.dequeueReusableHeaderFooterView(withIdentifier: header.viewType.typeName) else { return nil } delegate?.configure(model: header.model, view: view, indexPath: IndexPath(row: 0, section: section)) return view } open func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -&gt; UIView? { guard let footer = sections[section].footer else { return nil } guard let view = tableView.dequeueReusableHeaderFooterView(withIdentifier: footer.viewType.typeName) else { return nil } delegate?.configure(model: footer.model, view: view, indexPath: IndexPath(row: 0, section: section)) return view }} Declare data12345678910111213141516171819let sections: [Section] = [ Section( header: Header(model: Model.header(\"Information\"), viewType: HeaderView.self), items: [ Item(model: Model.avatar(avatarUrl), cellType: AvatarCell.self), Item(model: Model.name(\"Thor\"), cellType: NameCell.self), Item(model: Model.location(\"Asgard\"), cellType: NameCell.self) ] ), Section( header: Header(model: Model.header(\"Skills\"), viewType: HeaderView.self), items: [ Item(model: Model.skill(\"iOS\"), cellType: SkillCell.self), Item(model: Model.skill(\"Android\"), cellType: SkillCell.self) ] )]adapter.reload(sections: sections) Configure required blocks12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849extension ProfileViewController: AdapterDelegate { func configure(model: Any, view: UIView, indexPath: IndexPath) { guard let model = model as? Model else { return } switch (model, view) { case (.avatar(let string), let cell as Avatarcell): cell.configure(string: string) case (.name(let name), let cell as NameCell): cell.configure(string: name) case (.header(let string), let view as HeaderView): view.configure(string: string) default: break } } func select(model: Any) { guard let model = model as? Model else { return } switch model { case .skill(let skill): let skillController = SkillController(skill: skill) navigationController?.pushViewController(skillController, animated: true) default: break } } func size(model: Any, containerSize: CGSize) -&gt; CGSize { guard let model = model as? Model else { return .zero } switch model { case .name: return CGSize(width: containerSize.width, height: 40) case .avatar: return CGSize(width: containerSize.width, height: 200) case .header: return CGSize(width: containerSize.width, height: 30) default: return .zero } }} Extending Manager12345678910111213141516171819class AccordionManager&lt;T&gt;: Manager&lt;T&gt; { private var collapsedSections = Set&lt;Int&gt;() override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return collapsedSections.contains(section) ? 0 : sections[section].items.count } func toggle(section: Int) { if collapsedSections.contains(section) { collapsedSections.remove(section) } else { collapsedSections.insert(section) } let indexSet = IndexSet(integer: section) tableView?.reloadSections(indexSet, with: .automatic) }}","link":"/blog/How-to-make-simple-adapter-for-delegate-and-datasource-for-UICollectionView-and-UITableView/"},{"title":"How to make tag selection view in React Native","text":"Issue #271 Original post https://hackernoon.com/how-to-make-tag-selection-view-in-react-native-b6f8b0adc891 Besides React style programming, Yoga is another cool feature of React Native. It is a cross-platform layout engine which implements Flexbox so we use the same layout code for both platforms. As someone who uses Auto Layout in iOS and Constraint Layout in Android, I find Flexbox bit hard to use at first, but there are many tasks that Flexbox does very well, they are distribute elements in space and flow layout. In this post we will use Flexbox to build a tag selection view using just Javascript code. This is very easy to do so we don‚Äôt need to install extra dependencies. Our tag view will support both multiple selection and exclusive selection. First, we need a custom Button . Button with BackgroundButton is of the basic elements in React Native, but it is somewhat limited if we want to have custom content inside the button, for example texts, images and background import { Button } from &apos;react-native&apos; ... &lt;Button onPress={onPressLearnMore} title=&quot;Learn More&quot; color=&quot;#841584&quot; accessibilityLabel=&quot;Learn more about this purple button&quot; /&gt;TouchableOpacityLuckily we have TouchableOpacity, which is a wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, dimming it. To implement button in our tag view, we need to a button with background a check image. Create a file called BackgroundButton.js import React from &apos;react&apos; import { TouchableOpacity, View, Text, StyleSheet, Image } from &apos;react-native&apos; import R from &apos;res/R&apos; export default class BackgroundButton extends React.Component { render() { const styles = this.makeStyles() return ( &lt;TouchableOpacity style={styles.touchable} onPress={this.props.onPress}&gt; &lt;View style={styles.view}&gt; {this.makeImageIfAny(styles)} &lt;Text style={styles.text}&gt;{this.props.title}&lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ) } makeImageIfAny(styles) { if (this.props.showImage) { return &lt;Image style={styles.image} source={R.images.check} /&gt; } } makeStyles() { return StyleSheet.create({ view: { flexDirection: &apos;row&apos;, borderRadius: 23, borderColor: this.props.borderColor, borderWidth: 2, backgroundColor: this.props.backgroundColor, height: 46, alignItems: &apos;center&apos;, justifyContent: &apos;center&apos;, paddingLeft: 16, paddingRight: 16 }, touchable: { marginLeft: 4, marginRight: 4, marginBottom: 8 }, image: { marginRight: 8 }, text: { fontSize: 18, textAlign: &apos;center&apos;, color: this.props.textColor, fontSize: 16 } }) } }Dynamic stylesNormally we use const styles = StyleSheet.create({}) but since we want our button to be configurable, we make styles into a function, so on every render we get a new styles with proper configurations. The properties we support are borderColor, textColor, backgroundColor and showImage In the makeImageIfAny we only need to return Image if the view is selected. We don‚Äôt have the else case, so in if showImage is false, this returns undefined and React won‚Äôt render any element makeImageIfAny(styles) { if (this.props.showImage) { return &lt;Image style={styles.image} source={R.images.check} /&gt; } }padding and marginTo understand padding and margin, visit CSS Box Model. Basically padding means clearing an area around the content and padding is transparent, while margin means clearing an area outside the border and the margin also is transparent. Pay attention to styles . We have margin for touchable so that each tag button have a little margin outside each other. touchable: { marginLeft: 4, marginRight: 4, marginBottom: 8 }In the view we need flexDirection as row because React Native has flexDirection as column by default. And a row means we have Image and Text side by side horizontally inside the button. We also use alignItems and justifyContent to align elements centeredly on both main and cross axises. The padding is used to have some spaces between the inner text and the view. view: { flexDirection: &apos;row&apos;, height: 46, alignItems: &apos;center&apos;, justifyContent: &apos;center&apos;, paddingLeft: 16, paddingRight: 16 }Tag ViewCreate a file called TagsView.js This is where we parse tags and show a bunch of BackgroundButton import React from &apos;react&apos; import { View, StyleSheet, Button } from &apos;react-native&apos; import R from &apos;res/R&apos; import BackgroundButton from &apos;library/components/BackgroundButton&apos; import addOrRemove from &apos;library/utils/addOrRemove&apos; export default class TagsView extends React.Component { constructor(props) { super(props) this.state = { selected: props.selected } } render() { return ( &lt;View style={styles.container}&gt; {this.makeButtons()} &lt;/View&gt; ) } onPress = (tag) =&gt; { let selected if (this.props.isExclusive) { selected = [tag] } else { selected = addOrRemove(this.state.selected, tag) } this.setState({ selected }) } makeButtons() { return this.props.all.map((tag, i) =&gt; { const on = this.state.selected.includes(tag) const backgroundColor = on ? R.colors.on.backgroundColor : R.colors.off.backgroundColor const textColor = on ? R.colors.on.text : R.colors.off.text const borderColor = on ? R.colors.on.border : R.colors.off.border return ( &lt;BackgroundButton backgroundColor={backgroundColor} textColor={textColor} borderColor={borderColor} onPress={() =&gt; { this.onPress(tag) }} key={i} showImage={on} title={tag} /&gt; ) }) } } const styles = StyleSheet.create({ container: { flex: 1, flexDirection: &apos;row&apos;, flexWrap: &apos;wrap&apos;, padding: 20 } })We parse an array of tags to build BackgroundButton . We keep the selected array in state because this is mutated inside the TagsView component. If it is isExclusive then the new selected contains just the new selected tag. If it is multiple selection, then we add the new selected tag into the selected array. The addOrRemove is a our homegrown utility function to add an item into an array if it does not exists, or remove if it exists, using the high orderfilter function. const addOrRemove = (array, item) =&gt; { const exists = array.includes(item) if (exists) { return array.filter((c) =&gt; { return c !== item }) } else { const result = array result.push(item) return result } }Flex wrapPay attention to styles const styles = StyleSheet.create({ container: { flex: 1, flexDirection: &apos;row&apos;, flexWrap: &apos;wrap&apos;, padding: 20 } })The hero here is flexWrap which specifies whether the flexible items should wrap or not. Take a look at CSS flex-wrap property for other options. Since we have main axis as row , element will be wrapped to the next row if there are not enough space. That‚Äôs how we can achieve a beautiful tag view. Using TagsViewThen consuming TagsView is as easy as declare it inside render const selected = [&apos;Swift&apos;, Kotlin] const tags = [&apos;Swift&apos;, &apos;Kotlin&apos;, &apos;C#&apos;, &apos;Haskell&apos;, &apos;Java&apos;] return ( &lt;TagsView all={tags} selected={selected} isExclusive={false} /&gt; )Learning FlexboxLearning Flebox is crucial in using React and React Native effectively. The best places to learn it are w3school CSS Flexbox and Basic concepts of flexbox by Mozzila.Basic concepts of flexboxThe Flexible Box Module, usually referred to as flexbox, was designed as a one-dimensional layout model, and as a‚Ä¶developer.mozilla.org There is a showcase of all possible Flexbox propertiesThe Full React Native Layout Cheat SheetA simple visual guide with live examples for all major React Native layout propertiesmedium.com Yoga has its own YogaKit published on CocoaPods, you can learn it with native code in iOSYoga Tutorial: Using a Cross-Platform Layout EngineLearn about Yoga, Facebook‚Äôs cross-platform layout engine that helps developers write more layout code in style akin to‚Ä¶www.raywenderlich.com And when we use flexbox, we should compose element instead of hardcoding values, for example we can use another View with justifyContent: flex-end to move a button down the screen. This follows flexbox style and prevent rigid code.Position element at the bottom of the screen using Flexbox in React NativeReact Native uses Yoga to achieve Flexbox style layout, which helps us set up layout in a declarative and easy way.medium.com Where to go from hereI hope you learn something useful in this post. For more information please consult the official guide Layout with Flexbox and layout-props for all the possible Flexbox properties.","link":"/blog/How-to-make-tag-selection-view-in-React-Native/"},{"title":"How to manage OneSignal push notification in iOS","text":"Issue #377 OneSignal is an alternative for Parse for push notifications but the sdk has many extra stuff and assumptions and lots of swizzling. We can just use Rest to make API calls. From https://github.com/onmyway133/Dust Every official push notification SDK can do many things Register device token. This is crucial for the notification to get from your backend -&gt; APNS -&gt; device Manage player id, user id, arn, ‚Ä¶This is used to associate with device token Manager tag, topic, subscription, segments, ‚Ä¶This is used to group a set of device tokens Do swizzling, update your application badge number, change your user notification settings, ‚Ä¶ without your knowing about that Some other fancy stuffs Dust does only one thing, which is push notification handling. The rest is under your control OneSignal 1234567func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -&gt; Bool { OneSignal.appID = \"\"}func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) { OneSignal.handleDeviceToken(deviceToken)} Here is the implementation 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import UIKitstruct Utils { static func parse(deviceToken data: NSData) -&gt; String { let buffer = UnsafePointer&lt;CChar&gt;(data.bytes) var string = \"\" for i in 0..&lt;data.length { string += String(format: \"%02.2hhx\", arguments: [buffer[i]]) } return string } static func deviceModel() -&gt; String { var systemInfo = utsname() uname(&amp;systemInfo) var v = systemInfo.machine var deviceModel = \"\" let _ = withUnsafePointer(&amp;v) { deviceModel = String(UTF8String: UnsafePointer($0)) ?? \"\" } return deviceModel } static func systemVersion() -&gt; String { let version = NSProcessInfo.processInfo().operatingSystemVersion return \"\\(version.majorVersion).\\(version.minorVersion).\\(version.patchVersion)\" } static func language() -&gt; String { return NSLocale.preferredLanguages().first! } static func timezone() -&gt; Int { return NSTimeZone.localTimeZone().secondsFromGMT } static func soundFiles() -&gt; [String] { guard let resourcePath = NSBundle.mainBundle().resourcePath else { return [] } let files = try? NSFileManager.defaultManager() .contentsOfDirectoryAtPath(resourcePath) .filter { return $0.hasSuffix(\".wav\") || $0.hasSuffix(\".mp3\") } return files ?? [] } static func versionNumber() -&gt; String? { return NSBundle.mainBundle().infoDictionary?[\"CFBundleShortVersionString\"] as? String } static func buildNumber() -&gt; String? { return NSBundle.mainBundle().infoDictionary?[\"CFBundleVersionString\"] as? String } static func netType() -&gt; Int { // Reachability return 0 }} 12345678910111213141516171819202122232425262728293031323334353637383940414243import Foundationpublic struct UserDefaults { struct Key { static let playerID: String = \"Dust-OneSignal-Player-ID-Key\" static let deviceToken: String = \"Dust-OneSignal-Device-Token-Key\" static let subscribed: String = \"Dust-OneSignal-Disable-Subscribed-Key\" } public static var playerID: String? { get { return NSUserDefaults.standardUserDefaults().stringForKey(Key.playerID) } set { NSUserDefaults.standardUserDefaults().setObject(newValue, forKey: Key.playerID) NSUserDefaults.standardUserDefaults().synchronize() } } public static var deviceToken: String? { get { return NSUserDefaults.standardUserDefaults().stringForKey(Key.deviceToken) } set { NSUserDefaults.standardUserDefaults().setObject(newValue, forKey: Key.deviceToken) NSUserDefaults.standardUserDefaults().synchronize() } } public static var subscribed: Bool { get { return NSUserDefaults.standardUserDefaults().boolForKey(Key.subscribed) } set { NSUserDefaults.standardUserDefaults().setBool(newValue, forKey: Key.subscribed) NSUserDefaults.standardUserDefaults().synchronize() } }} 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141import Foundationimport Alamofirepublic struct OneSignal { static var appID: String = \"\" static let version = \"020115\" static let baseURL = NSURL(string: \"https://onesignal.com/api/v1\")! enum NotificationType: Int { case subscribed = 7 case unsubscribed = -2 static func value() -&gt; Int { return UserDefaults.subscribed ? NotificationType.subscribed.rawValue : NotificationType.unsubscribed.rawValue } } enum Provisioning: Int { case development = 1 } public static func setup(appID appID: String) { NSUserDefaults.standardUserDefaults().registerDefaults([ UserDefaults.Key.subscribed: true ]) OneSignal.appID = appID } public static func registerOrUpdateSession(completion: ((String?) -&gt; Void)? = nil) { guard let bundleID = NSBundle.mainBundle().bundleIdentifier, let deviceToken = UserDefaults.deviceToken else { return } var params: [String: AnyObject] = [ \"app_id\" : appID, \"device_model\" : Utils.deviceModel(), \"device_os\" : Utils.systemVersion(), \"language\" : Utils.language(), \"timezone\" : NSNumber(integer: Utils.timezone()), \"device_type\" : NSNumber(integer : 0), \"sounds\" : Utils.soundFiles(), \"sdk\" : version, \"identifier\" : deviceToken, \"net_type\" : NSNumber(integer: Utils.netType()), \"rooted\": NSNumber(bool: false), \"as_id\": \"OptedOut\", \"sdk_type\": \"native\", \"ios_bundle\": bundleID, \"game_version\": Utils.versionNumber() ?? \"\", \"notification_types\": NotificationType.value(), ] #if DEBUG params[\"test_type\"] = Provisioning.development.rawValue #endif let url: NSURL if let playerID = UserDefaults.playerID { url = baseURL.URLByAppendingPathComponent(\"players/\\(playerID)/on_session\") } else { url = baseURL.URLByAppendingPathComponent(\"players\") } Alamofire .request(.POST, url, parameters: params) .responseJSON { response in guard let json = response.result.value as? [String: AnyObject] else { completion?(nil) return } if let id = json[\"id\"] as? String { UserDefaults.playerID = id completion?(id) } else if let value = json[\"success\"] as? Int, playerID = UserDefaults.playerID where value == 1 { completion?(playerID) } else { completion?(nil) } } } public static func handle(deviceToken data: NSData) { UserDefaults.deviceToken = Utils.parse(deviceToken: data) registerOrUpdateSession() } public static func update(subscription subscribed: Bool) { guard let playerID = UserDefaults.playerID else { return } UserDefaults.subscribed = subscribed let url = baseURL.URLByAppendingPathComponent(\"players/\\(playerID)\") let params: [String: AnyObject] = [ \"app_id\": appID, \"notification_types\": NotificationType.value() ] Alamofire .request(.PUT, url, parameters: params) .responseJSON { response in print(response) } } public static func update(badge count: Int) { guard let playerID = UserDefaults.playerID else { return } let url = baseURL.URLByAppendingPathComponent(\"players/\\(playerID)\") let params: [String: AnyObject] = [ \"app_id\": appID, \"badge_count\": count ] Alamofire .request(.PUT, url, parameters: params) .responseJSON { response in } } public static func getPlayerID(completion: String -&gt; Void) { if let playerID = UserDefaults.playerID { completion(playerID) return } registerOrUpdateSession { playerID in if let playerID = playerID { completion(playerID) } } }}","link":"/blog/How-to-manage-OneSignal-push-notification-in-iOS/"},{"title":"How to modify state from state in SwiftUI","text":"Issue #487 In case we have to modify state when another state is known, we can encapsulate all those states in ObservableObject and use onReceive to check the state we want to act on. See code Avengers If we were to modify state from within body function call, we will get warnings Modifying state during view update, this will cause undefined behavior. This is similar to the warning when we change state inside render in React For example, when we get an image, we want to do some logic based on that image and modify result state. Here we use var objectWillChange = ObservableObjectPublisher() to notify state change, and because onReceive requires Publisher, we use let imagePublisher = PassthroughSubject&lt;UIImage, Never&gt;() Note that we use $ prefix from a variable to form Binding 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import SwiftUIimport Combineclass ViewModel: ObservableObject { var objectWillChange = ObservableObjectPublisher() let imagePublisher = PassthroughSubject&lt;UIImage, Never&gt;() var image: UIImage? { willSet { objectWillChange.send() if let image = image { imagePublisher.send(image) } } } var isDetecting: Bool = false { willSet { objectWillChange.send() } } var result: String? { willSet { objectWillChange.send() } }}struct MainView: View { @State private var showImagePicker: Bool = false @ObservedObject var viewModel: ViewModel = ViewModel() private let detector = Detector() var body: some View { VStack { makeImage() .styleFit() if viewModel.isDetecting { ActivityIndicator( isAnimating: $viewModel.isDetecting, style: .large ) } makeResult() Button(action: { self.showImagePicker.toggle() }, label: { Text(\"Choose image\") }) .sheet(isPresented: $showImagePicker, content: { ImagePicker(image: self.$viewModel.image, isPresented: self.$showImagePicker) }) } .onReceive(viewModel.imagePublisher, perform: { image in self.detect(image: image) }) } private func makeImage() -&gt; Image { if let image = self.viewModel.image { return Image(uiImage: image) } else { return Image(\"placeholder\") } } private func makeResult() -&gt; Text { if let result = viewModel.result { return Text(result) } else { return Text(\"\") } } private func detect(image: UIImage) { viewModel.isDetecting = true try? detector.detect(image: image, completion: { result in switch result { case .success(let string): self.viewModel.result = string default: self.viewModel.result = \"\" } self.viewModel.isDetecting = false }) }} Use PublishedSee ObservableObject By default an ObservableObject synthesizes an objectWillChange publisher that emits the changed value before any of its @Published properties changes. 1234567891011121314151617181920class Contact: ObservableObject { @Published var name: String @Published var age: Int init(name: String, age: Int) { self.name = name self.age = age } func haveBirthday() -&gt; Int { age += 1 return age }}let john = Contact(name: \"John Appleseed\", age: 24)john.objectWillChange.sink { _ in print(\"\\(john.age) will change\") }print(john.haveBirthday())// Prints \"24 will change\"// Prints \"25\" We should use @Published 1234567class ViewModel: ObservableObject { var objectWillChange = ObservableObjectPublisher() @Published var image: UIImage? @Published var isDetecting: Bool = false @Published var result: String?} Note that we should not use objectWillChange as By default an ObservableObject synthesizes an objectWillChange publisher that emits the changed value before any of its @Published properties changes. 12345.onReceive(viewModel.$image, perform: { image in if let image = image { self.detect(image: image) }}) We need to manually notify using objectWillChange !! Maybe this is a SwiftUI bug 1234567891011121314private func detect(image: UIImage) { viewModel.isDetecting = true try? detector.detect(image: image, completion: { result in switch result { case .success(let string): self.viewModel.result = string default: self.viewModel.result = \"\" } self.viewModel.isDetecting = false self.viewModel.objectWillChange.send() })} If we remove the declaration of var objectWillChange = ObservableObjectPublisher(), then it works automatically objectWillChangeLearn more about the history of objectWillChange https://twitter.com/luka_bernardi/status/1155944329363349504?lang=no In Beta 5 ObjectBinding is now defined in Combine as ObservableObject (the property wrapper is now @ObservedObject). There is also a new property wrapper @Published where we automatically synthesize the objectWillChange publisher and call it on willSet. It‚Äôll objectWillChange.send() in the property willSet it‚Äôs defined on.It just removes the boilerplate that you had to write before but otherwise behaves the same. State vs ObservedObjectIf we were to use @State instead of @ObservedObject, it still compiles, but after we pick an image, which should change the image property of our viewModel, the view is not reloaded. 1234struct MainView: View { @State private var showImagePicker: Bool = false @State private var viewModel: ViewModel = ViewModel()} Note that we can‚Äôt use @Published inside struct ‚ÄòwrappedValue‚Äô is unavailable: @Published is only available on properties of classes @State is for internal usage within a view, and should use struct and primitive data structure. SwiftUI keeps @State property in a separate memory place to preserve it during many reload cycles. @Observabled is meant for sharing reference objects across views To to use @State we should use struct, and to use onReceive we should introduce another Publisher like imagePublisher 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647struct ViewModel { var imagePublisher = PassthroughSubject&lt;UIImage?, Never&gt;() var image: UIImage? { didSet { imagePublisher.send(image) } } var isDetecting: Bool = false var result: String?}struct MainView: View { @State private var showImagePicker: Bool = false @State private var viewModel: ViewModel = ViewModel() private let detector = Detector() var body: some View { VStack { makeImage() .styleFit() if viewModel.isDetecting { ActivityIndicator( isAnimating: $viewModel.isDetecting, style: .large ) } makeResult() Button(action: { self.showImagePicker.toggle() }, label: { Text(\"Choose image\") }) .sheet(isPresented: $showImagePicker, content: { ImagePicker(image: self.$viewModel.image, isPresented: self.$showImagePicker) }) } .onReceive(viewModel.imagePublisher, perform: { image in if let image = image { self.detect(image: image) } }) }} The dollar sign for State to access nested properties, like $viewModel.image is called derived Binding, and is achieved via Keypath member lookup feature of Swift 5.1. Take a look at projectedValue: Binding&lt;Value&gt; from State and subscript&lt;Subject&gt;(dynamicMember keyPath from Binding 123456789101112131415@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)@propertyWrapper public struct State&lt;Value&gt; : DynamicProperty { /// Initialize with the provided initial value. public init(wrappedValue value: Value) /// Initialize with the provided initial value. public init(initialValue value: Value) /// The current state value. public var wrappedValue: Value { get nonmutating set } /// Produces the binding referencing this state value public var projectedValue: Binding&lt;Value&gt; { get }} 12345678910111213141516171819202122232425262728/// A value and a means to mutate it.@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)@propertyWrapper @dynamicMemberLookup public struct Binding&lt;Value&gt; { /// The transaction used for any changes to the binding's value. public var transaction: Transaction /// Initializes from functions to read and write the value. public init(get: @escaping () -&gt; Value, set: @escaping (Value) -&gt; Void) /// Initializes from functions to read and write the value. public init(get: @escaping () -&gt; Value, set: @escaping (Value, Transaction) -&gt; Void) /// Creates a binding with an immutable `value`. public static func constant(_ value: Value) -&gt; Binding&lt;Value&gt; /// The value referenced by the binding. Assignments to the value /// will be immediately visible on reading (assuming the binding /// represents a mutable location), but the view changes they cause /// may be processed asynchronously to the assignment. public var wrappedValue: Value { get nonmutating set } /// The binding value, as \"unwrapped\" by accessing `$foo` on a `@Binding` property. public var projectedValue: Binding&lt;Value&gt; { get } /// Creates a new `Binding` focused on `Subject` using a key path. public subscript&lt;Subject&gt;(dynamicMember keyPath: WritableKeyPath&lt;Value, Subject&gt;) -&gt; Binding&lt;Subject&gt; { get }} Read more https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/ https://stackoverflow.com/questions/56551131/what-does-the-dollar-sign-do-in-this-example https://stackoverflow.com/questions/44037611/how-to-avoid-setstate-inside-render-when-state-depends-on-render?rq=1 https://stackoverflow.com/questions/57459727/why-an-observedobject-array-is-not-updated-in-my-swiftui-application https://www.pointfree.co/blog/posts/30-swiftui-and-state-management-corrections https://www.hackingwithswift.com/quick-start/swiftui/whats-the-difference-between-observedobject-state-and-environmentobject Safely Updating The View State","link":"/blog/How-to-modify-state-from-state-in-SwiftUI/"},{"title":"How to position element at the bottom of the screen using Flexbox in React Native","text":"Issue #259 Original post https://medium.com/react-native-training/position-element-at-the-bottom-of-the-screen-using-flexbox-in-react-native-a00b3790ca42 React Native uses Yoga to achieve Flexbox style layout, which helps us set up layout in a declarative and easy way. The Flexible Box Module, usually referred to as flexbox, was designed as a one-dimensional layout model, and as a method that could offer space distribution between items in an interface and powerful alignment capabilities As someone who worked with Auto Layout in iOS and Constrain Layout in Android, I sometimes find it difficult to work with Flexbox in React Native. One of them is how to position certain element at the top or the bottom of the screen. This is the scenario when one element does not follow the rule i the container. A traditional layoutConsider this traditional welcome screen, where we have some texts and a login button. Which is easily achieved with import React from &apos;react&apos; import { View, StyleSheet, Image, Text, Button } from &apos;react-native&apos; import strings from &apos;res/strings&apos; import palette from &apos;res/palette&apos; import images from &apos;res/images&apos; import ImageButton from &apos;library/components/ImageButton&apos; export default class Welcome extends React.Component { render() { return ( &lt;View style={styles.container}&gt; &lt;Image style={styles.image} source={images.placeholder} /&gt; &lt;Text style={styles.heading}&gt;{strings.onboarding.welcome.heading.toUpperCase()}&lt;/Text&gt; &lt;Text style={styles.text}&gt;{strings.onboarding.welcome.text1}&lt;/Text&gt; &lt;Text style={styles.text}&gt;{strings.onboarding.welcome.text2}&lt;/Text&gt; &lt;ImageButton style={styles.button} title={strings.onboarding.welcome.button} /&gt; &lt;/View&gt; ) } } const styles = StyleSheet.create({ container: { flex: 1, alignItems: &apos;center&apos; }, image: { marginTop: 50 }, heading: { ...palette.heading, ...{ marginTop: 40 } }, text: { ...palette.text, ...{ marginHorizontal: 8, marginVertical: 10 } } })Pay attention to styles . Unlike in web, Flexbox in React Native defaults main axis to be vertical, so elements are laid out from top to bottom. alignItems makes sure all elements are centered in the horizontal axis, which is the cross axis according to Flexbox terminology. Position button at the bottomAccording to design, the button should be positioned at the bottom of the screen. A dark though might suggest us to use position: ‚Äòabsolute‚Äô , something like button: { position: &apos;absolute&apos;, bottom:0 }It workaround could work, but it‚Äôs like opting out of Flexbox. We like Flexbox and we like to embrace it. The solution is to use add a container for the button, and use flex-end inside so that the button moves to the bottom. Let‚Äôs add a container &lt;View style={styles.bottom}&gt; &lt;ImageButton style={styles.button} title={strings.onboarding.welcome.button} /&gt; &lt;/View&gt;and styles bottom: { flex: 1, justifyContent: &apos;flex-end&apos;, marginBottom: 36 }The flex tells the bottom view to take the remaining space. And inside this space, the bottom is laid out from the bottom, that‚Äôs what the flex-end means. Here is how the result looks like And there is the full code import React from &apos;react&apos; import { View, StyleSheet, Image, Text, Button } from &apos;react-native&apos; import strings from &apos;res/strings&apos; import palette from &apos;res/palette&apos; import images from &apos;res/images&apos; import ImageButton from &apos;library/components/ImageButton&apos; export default class Welcome extends React.Component { render() { return ( &lt;View style={styles.container}&gt; &lt;Image style={styles.image} source={images.placeholder} /&gt; &lt;Text style={styles.heading}&gt;{strings.onboarding.welcome.heading.toUpperCase()}&lt;/Text&gt; &lt;Text style={styles.text}&gt;{strings.onboarding.welcome.text1}&lt;/Text&gt; &lt;Text style={styles.text}&gt;{strings.onboarding.welcome.text2}&lt;/Text&gt; &lt;View style={styles.bottom}&gt; &lt;ImageButton style={styles.button} title={strings.onboarding.welcome.button} /&gt; &lt;/View&gt; &lt;/View&gt; ) } } const styles = StyleSheet.create({ container: { flex: 1, alignItems: &apos;center&apos; }, image: { marginTop: 50 }, heading: { ...palette.heading, ...{ marginTop: 40 } }, text: { ...palette.text, ...{ marginHorizontal: 8, marginVertical: 10 } }, bottom: { flex: 1, justifyContent: &apos;flex-end&apos;, marginBottom: 36 } })What is flex: 1According to Basic concepts of flexbox The flex CSS property specifies how a flex item will grow or shrink so as to fit the space available in its flex container. This is a shorthand property that sets flex-grow, flex-shrink, and flex-basis. and w3 flex: Equivalent to flex: 1 0. Makes the flex item flexible and sets the flex basis to zero, resulting in an item that receives the specified proportion of the free space in the flex container. If all items in the flex container use this pattern, their sizes will be proportional to the specified flex factor. In most browsers, flex: 1 equals 1 1 0 , which means flex-grow: 1, flex-shrink:1, flex-basis: 0 . The flex-grow and flex-shrink specifies how much the item will grow or shrink relative to the rest of the flexible items inside the same container. And the flex-basis specifies the initial length of a flexible item. In this case the bottom View will take up the remaining space. And in that space, we can have whatever flow we want. To move the button to the bottom, we use justifyContent to lay out items in the main axis, with flex-end , which aligns the flex items at the end of the container. A compositional approachWhile this works, code can be duplicated quickly as we need to do this in a lot of screens. All we need is to wrap this ImageButton inside a container . Let‚Äôs encapsulate this with a a utility function. Add this utils/moveToBottom.js import React from &apos;react&apos; import { View, StyleSheet } from &apos;react-native&apos; function moveToBottom(component) { return ( &lt;View style={styles.container}&gt; {component} &lt;/View&gt; ) } const styles = StyleSheet.create({ container: { flex: 1, justifyContent: &apos;flex-end&apos;, marginBottom: 36 } }) export default moveToBottomNow in our screen, we just need to import import moveToBottom from &apos;library/utils/moveToBottom&apos;and wrap our button { moveToBottom( &lt;ImageButton style={styles.button} title={strings.onboarding.welcome.button} onPress={() =&gt; { this.props.navigation.navigate(&apos;Term&apos;) }} /&gt; ) }This time, we have the same screen as before, but with more reusable code. Since the styles are inside our moveToBottom module, we don‚Äôt need to specify styles in our screen any more. Here is the full code import React from &apos;react&apos; import { View, StyleSheet, Image, Text, Button } from &apos;react-native&apos; import strings from &apos;res/strings&apos; import palette from &apos;res/palette&apos; import images from &apos;res/images&apos; import ImageButton from &apos;library/components/ImageButton&apos; import moveToBottom from &apos;library/utils/moveToBottom&apos; export default class Welcome extends React.Component { render() { return ( &lt;View style={styles.container}&gt; &lt;Image style={styles.logo} source={images.logo} /&gt; &lt;Image style={styles.image} source={images.placeholder} /&gt; &lt;Text style={styles.heading}&gt;{strings.onboarding.welcome.heading.toUpperCase()}&lt;/Text&gt; &lt;Text style={styles.text}&gt;{strings.onboarding.welcome.text1}&lt;/Text&gt; &lt;Text style={styles.text}&gt;{strings.onboarding.welcome.text2}&lt;/Text&gt; { moveToBottom( &lt;ImageButton style={styles.button} title={strings.onboarding.welcome.button} onPress={() =&gt; { this.props.navigation.navigate(&apos;Term&apos;) }} /&gt; ) } &lt;/View&gt; ) } } const styles = StyleSheet.create({ container: { flex: 1, alignItems: &apos;center&apos; }, logo: { marginTop: 70, marginBottom: 42, }, image: { }, heading: { ...palette.heading, ...{ marginTop: 40 } }, text: { ...palette.text, ...{ marginHorizontal: 8, marginVertical: 10 } } })How to pass component as parameterI have to admit that I initially implement moveToBottom using Component (we need uppercase since React has a convention of using initial uppercase for components) to embed the Component inside View function moveToBottom(Component) { return ( &lt;View style={styles.container}&gt; &lt;Component /&gt; &lt;/View&gt; ) }But this results in bundling error ExceptionsManager.js:84 Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: &lt;ImageButton /&gt;. Did you accidentally export a JSX literal instead of a component?and ExceptionsManager.js:76 Invariant Violation: Invariant Violation: Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.As this moment I release that the thing I pass in is actually an object, not a class , so I treat it as an object and it works function moveToBottom(component) { return ( &lt;View style={styles.container}&gt; {component} &lt;/View&gt; ) }marginBottom on AndroidIn the above moveToBottom function, I use marginBottom to have some margin from the bottom. This works on iOS but somehow does not have any effect in Android, and I use react-native 0.57.0 at the moment. This inconsistence can happen often in React Native development. A quick workaround is to perform platform check, we can make it into a nifty function in src/library/utils/check import { Platform } from &apos;react-native&apos; const check = { isAndroid: () =&gt; { return Platform.OS === &apos;android&apos; } } export default checkThen in moveToBottom , let ‚Äòs use paddingBottom in case of app running in Android const styles = StyleSheet.create({ container: { flex: 1, justifyContent: &apos;flex-end&apos;, paddingBottom: check.isAndroid ? 14 : 0 } })Where to go from hereIn this post, we go from absolute position to another container, get to know flex , how to add reusable function and how to correctly pass component as parameter. Hope you find it useful. You can also check out this post React Native Login Using the Facebook SDK where I shows more tips for React Native developments and recommended links to learn about Flexbox.","link":"/blog/How-to-position-element-at-the-bottom-of-the-screen-using-Flexbox-in-React-Native/"},{"title":"How to remove Cartography in iOS","text":"Issue #252 Read more https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f DescriptionThis is a script to remove Cartography, and use plain NSLayoutAnchor syntax.Use Constraint.on() from Sugar.It will change all .swift files recursively under provided folder. 1234Constraint.on( logoImageView.widthAnchor.constraint(equalToConstant: 74), view1.leftAnchor.constraint(equalTo: view2.leftAnchor, constant: 20),) Features Parse recursively Parse a single file Parse each constrain block separately Handle ==, &gt;=, &lt;= Handle center, edges Infer indentation Handle relation with other item Handle relation with constant Handle multiplier Auto import Sugar Infer superView PrepareInstall tool if needed 1brew install yarn How to use 12yarn installyarn start /Users/khoa/path/to/project Codeconst Glob = require('glob')const Fs = require('fs')function main() { const projectPath = getProjectPath() const files = getAllFiles(projectPath) files.forEach((file) =&gt; { handleFile(file) })}/// The 1st argument is node, 2nd is index.js, 3rd is pathfunction getProjectPath() { return process.argv[2]}/// Only select `swift` filefunction getAllFiles(projectPath) { if (projectPath.endsWith('.swift')) { return [projectPath] } else { const files = Glob.sync(`${projectPath}/**/*.swift`) return files }}/// Read file, replace by matches, and write againfunction handleFile(file) { console.log(file) Fs.readFile(file, 'utf8', (error, data) =&gt; { // non greedy `*?` const pattern = '(.)*constrain\\\\(.+\\\\) {\\\\s(\\\\s|.)*?\\\\n(\\\\s)*}' const regex = new RegExp(pattern) let matches = data.match(regex) // RegEx only return the 1st match per execution, let's do a recursion while (matches != null) { const match = matches[0] const indentationLength = findIndentationLength(match) const rawTransforms = handleMatch(match) const transforms = handleSuperview(rawTransforms, match) const statements = handleTransforms(transforms, indentationLength) const string = handleStatements(statements, indentationLength) data = data.replace(match, string) // Examine again matches = data.match(regex) } // Handle import data = handleImport(data) Fs.writeFile(file, data, 'utf8') })}/// Replace or remove importfunction handleImport(data) { if (data.includes('import Sugar')) { return data.replace('import Cartography', '') } else { return data.replace('import Cartography', 'import Sugar') }}/// Format transform to have `,` and linebreaksfunction handleTransforms(transforms, indentationLength) { let string = '' // Expect the first is always line break if (transforms[0] != '\\n') { transforms.unshift('\\n') } const indentation = makeIndentation(indentationLength + 2) transforms.forEach((line, index) =&gt; { if (line.length &gt; 1) { string = string.concat(indentation + line) if (index &lt; transforms.length - 1) { string = string.concat(',\\n') } } else { string = string.concat('\\n') } }) return string}/// Replace superViewfunction handleSuperview(transforms, match) { const superView = findSuperview(match) if (superView == null) { return transforms } const superViewPattern = ' superView.' transforms = transforms.map((transform) =&gt; { if (transform.includes(superViewPattern)) { return transform.replace(superViewPattern, ` ${superView}.`) } else { return transform } }) return transforms}/// Embed the statements inside `Constraint.on`function handleStatements(statements, indentationLength) { const indentation = makeIndentation(indentationLength) return `${indentation}Constraint.on(${statements}\\n${indentation})`}/// Turn every line into flatten transformed linefunction handleMatch(match) { let lines = match.split('\\n') lines = lines.map((line) =&gt; { return handleLine(line.trim()) }).filter((transforms) =&gt; { return transforms != null }) let flatten = [].concat.apply([], lines) return flatten}/// Check to handle lines, turn them into `LayoutAnchor` statementsfunction handleLine(line) { const itemPattern = '\\\\w*\\\\.\\\\w* (=|&lt;|&gt;)= \\\\w*\\\\.*\\\\..*' const sizePattern = '\\w*\\.\\w* (=|&lt;|&gt;)= (\\s|.)*' if (line.includes('edges == ')) { return handleEdges(line) } else if (line.includes('center == ')) { return handleCenter(line) } else if (hasPattern(line, itemPattern) &amp;&amp; !hasSizeKeywords(line)) { return handleItem(line) } else if (hasPattern(line, sizePattern)) { return handleSize(line) } else if (line.includes('&gt;=') || line.includes('&gt;=')) { return line } else if (line.includes('.')) { // return the line itself to let the human fix return line } else if (line.length == 0) { return ['\\n'] } else { return null }}/// For ex: listView.bottom == listView.superview!.bottom - 43/// listView.bottom == listView.superview!.bottom - Metrics.BackButtonWidthfunction handleItem(line) { const equalSign = getEqualSign(line) const parts = line.split(` ${equalSign} `) const left = parts[0] let rightParts = parts[1].trim() let right = rightParts.split(' ')[0] let number = rightParts.replace(right, '').replace('- ', '-').trim() if (number.startsWith('+ ')) { number = number.slice(2) } let equal = getEqual(line) if (number == null || number.length == 0 ) { return [ `${left}Anchor.constraint(${equal}: ${right}Anchor)` ] } else { return [ `${left}Anchor.constraint(${equal}: ${right}Anchor, constant: ${number})` ] }}/// For ex: segmentedControl.height == 24/// backButton.width == Metrics.BackButtonWidthfunction handleSize(line) { const equalSign = getEqualSign(line) const parts = line.split(` ${equalSign} `) const left = parts[0] const right = parts[1] let equal = getEqual(line) return [ `${left}Anchor.constraint(${equal}Constant: ${right})` ]}/// For ex: mapView.edges == listView.edgesfunction handleEdges(line) { const parts = line.split(' == ') const left = parts[0].split('.')[0] const right = removeLastPart(parts[1]) return [ `${left}.topAnchor.constraint(equalTo: ${right}.topAnchor)`, `${left}.bottomAnchor.constraint(equalTo: ${right}.bottomAnchor)`, `${left}.leftAnchor.constraint(equalTo: ${right}.leftAnchor)`, `${left}.rightAnchor.constraint(equalTo: ${right}.rightAnchor)` ]}/// For ex: mapView.center == listView.centerfunction handleCenter(line) { const parts = line.split(' == ') const left = parts[0].split('.')[0] const right = removeLastPart(parts[1]) return [ `${left}.centerXAnchor.constraint(equalTo: ${right}.centerXAnchor)`, `${left}.centerYAnchor.constraint(equalTo: ${right}.centerYAnchor)` ]}function hasPattern(string, pattern) { const regex = new RegExp(pattern) let matches = string.match(regex) if (matches == null) { return false } matches = matches.filter((match) =&gt; { return match !== undefined &amp;&amp; match.length &gt; 1 }) return matches.length &gt; 0}function removeLastPart(string) { const parts = string.split('.') parts.pop() return parts.join('.')}function getEqual(line) { if (line.includes('==')) { return 'equalTo' } else if (line.includes('&lt;=')) { return 'lessThanOrEqualTo' } else { return 'greaterThanOrEqualTo' }}function getEqualSign(line) { if (line.includes('==')) { return '==' } else if (line.includes('&gt;=')) { return '&gt;=' } else { return '&lt;=' }}function findIndentationLength(match) { return match.split('constrain')[0].length + 1}function makeIndentation(length) { return Array(length).join(' ')}// For ex: constrain(tableView, headerView, view) { tableView, headerView, superView infunction findSuperview(match) { const line = match.split('\\n')[0] if (!line.includes(' superView in')) { return null } const pattern = ', \\\\w*\\\\)' const regex = RegExp(pattern) const string = line.match(regex)[0] // `, view) return string.replace(', ', '').replace(')', '')}// Check special size keywordsfunction hasSizeKeywords(line) { const keywords = ['Metrics', 'Dimensions', 'UIScreen'] return keywords.filter((keyword) =&gt; { return line.includes(keyword) }).length != 0}main()","link":"/blog/How-to-remove-Cartography-in-iOS/"},{"title":"How to run Android apps in Bitrise","text":"Issue #273 Original post https://hackernoon.com/using-bitrise-ci-for-android-apps-fa9c48e301d8 CI, short for Continuous Integration, is a good practice to move fast and confidently where code is integrated into shared repository many times a day. The ability to have pull requests get built, tested and release builds get distributed to testers allows team to verify automated build and identify problems quickly. I ‚Äòve been using BuddyBuild for both iOS and Android apps and were very happy with it. The experience from creating new apps and deploying build is awesome. It works so well that Apple acquired it, which then lead to the fact that Android apps are no longer supported and new customers can‚Äôt register. We are one of those who are looking for new alternatives. We‚Äôve been using TravisCI, CircleCI and Jenkins to deploy to Fabric. There is also TeamCity that is promising. But after a quick survey with friends and people, Bitrise is the most recommended. So maybe I should try that. The thing I like about Bitrise is its wide range support of workflow. They are just scripts that execute certain actions, and most of them are open source. There‚Äôs also yml config file, but all things can be done using web interface, so I don‚Äôt need to look into pages of documentation just to get the configuration right. This post is not a promote for Bitrise, it is just about trying and adapting to new things. There is no eternal thing in tech, things come ad go fast. Below are some of the lessons I learn after using Bitrise, hope you find them useful. Variant to buildThere is no Android Build step in the default ‚Äòprimary‚Äô workflow, as primary is generally used for testing the code for every push. There is an Android Build step in the deploy workflow and the app gets built by running this workflow. However, I like to have the Android Build step in my primary workflow, so I added it there. Usually I want app module and stagingRelease build variant as we need to deploy staging builds to internal testers. If you go to Bitrise.yml tab you can see that the configuration file has been updated. This is very handy. I‚Äôve used some other CI services and I needed to lookup their documentation on how to make this yml work. Bump version code automaticallyI‚Äôve used some other CI services before and the app version code surely does not start from 0. So it makes sense that Bitrise can auto bump version code from the current number. There are some predefined steps in Workflow but they don‚Äôt serve my need For the Set Android Manifest Version code and name step, the source code is here so I understand what it does. It works by modify AndroidManifest.xml file using sed . This article Adjust your build number is not clear enough. sed -i.bak ‚Äús/android:versionCode=‚Äù\\‚Äù${VERSIONCODE}\\‚Äù‚Äù/android:versionCode=‚Äù\\‚Äù${CONFIG_new_version_code}\\‚Äù‚Äù/‚Äù ${manifest_file}In our projects, the versionCode is from an environment variable BUILD_NUMBER in Jenkins, so we need look up the same thing in Available Environment Variables, and it is BITRISE_BUILD_NUMBER , which is a build number of the build on bitrise.io. This is how versionCode looks like in build.gradle versionCode (System.*getenv*(&quot;BITRISE_BUILD_NUMBER&quot;) as Integer ?: System.*getenv*(&quot;BUILD_NUMBER&quot;) as Integer ?: 243)243 is the current version code of this project, so let‚Äôs go to app‚Äôs Settings and change Your next build number will be Deploy to FabricI hope Bitrise has its own Crash reporting tool. For now I use Crashlytics in Fabric. And despite that Bitrise can distribute builds to testers, I still need to cross deploy to Fabric for historial reasons. There is only script steps-fabric-crashlytics-beta-deploy to deploy IPA file for iOS apps, so we need something for Android. Fortunately I can use the Fabric plugin for gradle. Add Fabric pluginFollow Install Crashlytics via Gradle to add Fabric plugin. Basically you need to add these dependencies to your app ‚Äòs build.gradle buildscript { repositories { google() maven { url &apos;https://maven.fabric.io/public&apos; } } dependencies { classpath &apos;io.fabric.tools:gradle:1.+&apos; } } apply plugin: &apos;io.fabric&apos; dependencies { compile(&apos;com.crashlytics.sdk.android:crashlytics:2.9.4@aar&apos;) { transitive = true; } }and API credentials in Manifest file &lt;meta-data android:name=‚Äùio.fabric.ApiKey‚Äù android:value=‚Äù67ffdb78ce9cd50af8404c244fa25df01ea2b5bc‚Äù /&gt;Deploy commandModern Android Studio usually includes a gradlew execution file in the root of your project. Run ./gradlew tasks for the list of tasks that you app can perform, look for Build tasks that start with assemble . Read more Build your app from the command line You can execute all the build tasks available to your Android project using the Gradle wrapper command line tool. It‚Äôs available as a batch file for Windows (gradlew.bat) and a shell script for Linux and Mac (gradlew.sh), and it‚Äôs accessible from the root of each project you create with Android Studio. For me, I want to deploy staging release build variant, so I run. Check that the build is on Fabric. ./gradlew assembleStagingRelease crashlyticsUploadDistributionStagingReleaseManage tester groupGo to your app on Fabric.io and create group of testers. Note that alias that is generated for the group Go to your app‚Äôs build.gradle and add ext.betaDistributionGroupAliases=‚Äômy-internal-testers‚Äô to your desired productFlavors or buildTypes . For me I add to staging under productFlavors productFlavors { staging { // ‚Ä¶ ext.betaDistributionGroupAliases=‚Äôhyper-internal-testers-1&apos; } production { // ‚Ä¶ } }Now that the command is run correctly, let‚Äôs add that to Bitrise Gradle Run stepGo to Workflow tab and add a Gradle Run step and place it below Deploy to Bitrise.io step. Expand Config, and add assembleStagingRelease crashlyticsUploadDistributionStagingRelease to Gradle task to run . Now start a new build in Bitrise manually or trigger new build by making pull request, you can see that the version code is increased for every build, crossed build gets deployed to Fabric to your defined tester groups. As an alternative, you can also use Fabric/Crashlytics deployer, just update config with your apps key and secret found in settings. Where to go from hereI hope those tips are useful to you. Here are some more links to help you explore further Convert old Android workflows and configure new steps based on the old Gradle tasks on Bitrise Replace whole line containing a string using Sed Alternatives to Buddybuild? Simplifying Android app distribution with Beta by Crashlytics Fabric app for Android Studio Crashlytics distribution for app with multiple flavors Gradle plugins Setting up a new app in Crashlytics without the IDE plugin","link":"/blog/How-to-run-Android-apps-in-Bitrise/"},{"title":"How to run UI Test with Facebook login","text":"Issue #44 Today I‚Äôm trying to run some UITest on my app, which uses Facebook login. And here are some of my notes on it. Challenges The challenges with Facebook is it uses Safari controller, we we deal mostly with web view for now. Starting from iOS 9+, Facebook decided to use safari instead of native facebook app to avoid app switching. You can read the detail here Building the Best Facebook Login Experience for People on iOS 9 It does not have wanted accessibilityIdentifier or accessibilityLabel The webview content may change in the future üò∏ Create a Facebook test userLuckily, you don‚Äôt have to create your own Facebook user to test. Facebook supports test users that you can manage permissions and friends, very handy When creating the test user, you have the option to select language. That will be the displayed language in Safari web view. I choose Norwegian üá≥üá¥ for now Click the login button and show Facebook loginHere we use the default FBSDKLoginButton 123var showFacebookLoginFormButton: XCUIElement { return buttons[\"Continue with Facebook\"]} And then tap it 1app.showFacebookLoginFormButton.tap() Check login statusWhen going to safari Facebook form, user may have already logged in or not. So we need to handle these 2 cases. When user has logged in, Facebook will say something like ‚Äúyou have already logged in‚Äù or the OK button. The advice here is to put breakpoint and po app.staticTexts, po app.buttons to see which UI elements are at a certain point. You can check for the static text, or simply just the OK button 123var isAlreadyLoggedInSafari: Bool { return buttons[\"OK\"].exists || staticTexts[\"Du har allerede godkjent Blue Sea.\"].exists} Wait and refreshBut Facebook form is a webview, so its content is a bit dynamic. And UITest seems to cache content for fast query, so before checking staticTexts, we need to wait and refresh the cache 1app.clearCachedStaticTexts() This is the wait function 12345678910111213extension XCTestCase { func wait(for duration: TimeInterval) { let waitExpectation = expectation(description: \"Waiting\") let when = DispatchTime.now() + duration DispatchQueue.main.asyncAfter(deadline: when) { waitExpectation.fulfill() } // We use a buffer here to avoid flakiness with Timer on CI waitForExpectations(timeout: duration + 0.5) }} Wait for element to appearBut a more solid approach would be to wait for element to appear. For Facebook login form, they should display a Facebook label after loading. So we should wait for this element 123456789101112extension XCTestCase { /// Wait for element to appear func wait(for element: XCUIElement, timeout duration: TimeInterval) { let predicate = NSPredicate(format: \"exists == true\") let _ = expectation(for: predicate, evaluatedWith: element, handler: nil) // Here we don't need to call `waitExpectation.fulfill()` // We use a buffer here to avoid flakiness with Timer on CI waitForExpectations(timeout: duration + 0.5) }} And call this before you do any further inspection on elements in Facebook login form 1wait(for: app.staticTexts[\"Facebook\"], timeout: 5) If user is logged inAfter login, my app shows the main controller with a map view inside. So a basic test would be to check the existence of that map 1234567if app.isAlreadyLoggedInSafari { app.okButton.tap() handleLocationPermission() // Check for the map XCTAssertTrue(app.maps.element(boundBy: 0).exists)} Handle interruptionYou know that when showing the map with location, Core Location will ask for permission. So we need to handle that interruption as well. You need to ensure to call it early before the alert happens 123456fileprivate func handleLocationPermission() { addUIInterruptionMonitor(withDescription: \"Location permission\", handler: { alert in alert.buttons.element(boundBy: 1).tap() return true })} There is another problem, this monitor won‚Äôt be called. So the workaround is to call app.tap() again when the alert will happen. In my case, I call app.tap() when my map has been shown for 1,2 seconds, just to make sure app.tap() is called after alert is shown For a more detailed guide, please read https://github.com/onmyway133/blog/issues/48 If user is not logged inIn this case, we need to fill in email and password. You can take a look at the The full source code section below. When things don‚Äôt work or po does not show you the elements you needed, it‚Äôs probably because of caching or you need to wait until dynamic content finishes rendering. You need to wait for element to appear Tap on the text fieldYou may get Neither element nor any descendant has keyboard focus, here are the workaround If you test on Simulator, make sure Simulator -&gt; Hardware -&gt; Keyboard -&gt; Connect Hardware Keyboard is not checked wait a bit after tap 1app.emailTextField.tap() Clear all the textThe idea is to move the caret to the end of the textField, then apply each delete key for each character, then type the next text 12345678910111213extension XCUIElement { func deleteAllText() { guard let string = value as? String else { return } let lowerRightCorner = coordinate(withNormalizedOffset: CGVector(dx: 0.9, dy: 0.9)) lowerRightCorner.tap() let deletes = string.characters.map({ _ in XCUIKeyboardKeyDelete }).joined(separator: \"\") typeText(deletes) }} Change languageFor my case, I want to test in Norwegian, so we need to find the Norwegian option and tap on that. It is identified as static text by UI Test 123var norwegianText: XCUIElement { return staticTexts[\"Norsk (bokm√•l)\"]} 12wait(for: app.norwegianText, timeout: 1)app.norwegianText.tap() The email text fieldLuckily, email text field is detected by UI Test as text field element, so we can query for that. This uses predicate 1234var emailTextField: XCUIElement { let predicate = NSPredicate(format: \"placeholderValue == %@\", \"E-post eller mobil\") return textFields.element(matching: predicate)} The password text fieldUI Test can‚Äôt seem to identify the password text field, so we need to search for it by coordinate 1234var passwordCoordinate: XCUICoordinate { let vector = CGVector(dx: 1, dy: 1.5) return emailTextField.coordinate(withNormalizedOffset: vector)} This is the document for func coordinate(withNormalizedOffset normalizedOffset: CGVector) -&gt; XCUICoordinate Creates and returns a new coordinate with a normalized offset.The coordinate‚Äôs screen point is computed by adding normalizedOffset multiplied by the size of the element‚Äôs frame to the origin of the element‚Äôs frame. Then type the password 12app.passwordCoordinate.tap()app.typeText(\"My password\") We should not use app.passwordCoordinate.referencedElement because it will point to email text field ‚ùóÔ∏è üò¢ Run that test againGo to Xcode -&gt; Product -&gt; Perform Actions -&gt; Test Again to run the previous test again The full source code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152import XCTestclass LoginTests: XCTestCase { var app: XCUIApplication! func testLogin() { continueAfterFailure = false app = XCUIApplication() app.launch() passLogin() }}extension LoginTests { func passLogin() { // Tap login app.showFacebookLoginFormButton.tap() wait(for: app.staticTexts[\"Facebook\"], timeout: 5) // This requires a high timeout // There may be location permission popup when showing map handleLocationPermission() if app.isAlreadyLoggedInSafari { app.okButton.tap() // Show map let map = app.maps.element(boundBy: 0) wait(for: map, timeout: 2) XCTAssertTrue(map.exists) // Need to interact with the app for interruption monitor to work app.tap() } else { // Choose norsk wait(for: app.norwegianText, timeout: 1) app.norwegianText.tap() app.emailTextField.tap() app.emailTextField.deleteAllText() app.emailTextField.typeText(\"mujyhwhbby_1496155833@tfbnw.net\") app.passwordCoordinate.tap() app.typeText(\"Bob Alageaiecghfb Sharpeman\") // login app.facebookLoginButton.tap() // press OK app.okButton.tap() // Show map let map = app.maps.element(boundBy: 0) wait(for: map, timeout: 2) XCTAssertTrue(map.exists) // Need to interact with the app for interruption monitor to work app.tap() } } fileprivate func handleLocationPermission() { addUIInterruptionMonitor(withDescription: \"Location permission\", handler: { alert in alert.buttons.element(boundBy: 1).tap() return true }) }}fileprivate extension XCUIApplication { var showFacebookLoginFormButton: XCUIElement { return buttons[\"Continue with Facebook\"] } var isAlreadyLoggedInSafari: Bool { return buttons[\"OK\"].exists || staticTexts[\"Du har allerede godkjent Blue Sea.\"].exists } var okButton: XCUIElement { return buttons[\"OK\"] } var norwegianText: XCUIElement { return staticTexts[\"Norsk (bokm√•l)\"] } var emailTextField: XCUIElement { let predicate = NSPredicate(format: \"placeholderValue == %@\", \"E-post eller mobil\") return textFields.element(matching: predicate) } var passwordCoordinate: XCUICoordinate { let vector = CGVector(dx: 1, dy: 1.5) return emailTextField.coordinate(withNormalizedOffset: vector) } var facebookLoginButton: XCUIElement { return buttons[\"Logg inn\"] }}extension XCTestCase { func wait(for duration: TimeInterval) { let waitExpectation = expectation(description: \"Waiting\") let when = DispatchTime.now() + duration DispatchQueue.main.asyncAfter(deadline: when) { waitExpectation.fulfill() } // We use a buffer here to avoid flakiness with Timer on CI waitForExpectations(timeout: duration + 0.5) } /// Wait for element to appear func wait(for element: XCUIElement, timeout duration: TimeInterval) { let predicate = NSPredicate(format: \"exists == true\") let _ = expectation(for: predicate, evaluatedWith: element, handler: nil) // We use a buffer here to avoid flakiness with Timer on CI waitForExpectations(timeout: duration + 0.5) }}extension XCUIApplication { // Because of \"Use cached accessibility hierarchy\" func clearCachedStaticTexts() { let _ = staticTexts.count } func clearCachedTextFields() { let _ = textFields.count } func clearCachedTextViews() { let _ = textViews.count }}extension XCUIElement { func deleteAllText() { guard let string = value as? String else { return } let lowerRightCorner = coordinate(withNormalizedOffset: CGVector(dx: 0.9, dy: 0.9)) lowerRightCorner.tap() let deletes = string.characters.map({ _ in XCUIKeyboardKeyDelete }).joined(separator: \"\") typeText(deletes) }} Read moreI found these guides to cover many aspects of UITests, worth taking a look UI-Testing-Cheat-Sheet Everything About Xcode UI Testing","link":"/blog/How-to-run-UI-Test-with-Facebook-login/"},{"title":"How to setup Android projects","text":"Issue #257 checkstyle (Java) http://checkstyle.sourceforge.net/ https://github.com/checkstyle/checkstyle Checkstyle is a development tool to help programmers write Java code that adheres to a coding standard. It automates the process of checking Java code to spare humans of this boring (but important) task. This makes it ideal for projects that want to enforce a coding standard. app/build.gradle 1234567891011121314apply plugin: 'checkstyle'task checkstyle(type: Checkstyle) { description 'Check code standard' group 'verification' configFile file('$project.rootDir/tools/checkstyle.xml') source 'src' include '**/*.kt' exclude '**/gen/**' classpath = files() ignoreFailures = false} tools/chekcstyle 1234567891011121314151617181920212223242526&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\"&gt;&lt;module name=\"Checker\"&gt; &lt;module name=\"FileTabCharacter\"/&gt; &lt;module name=\"TreeWalker\"&gt; &lt;!-- Checks for Naming Conventions --&gt; &lt;!-- See http://checkstyle.sourceforge.net/config_naming.html --&gt; &lt;module name=\"MethodName\"/&gt; &lt;module name=\"ConstantName\"/&gt; &lt;!-- Checks for Imports --&gt; &lt;!-- See http://checkstyle.sourceforge.net/config_imports.html--&gt; &lt;module name=\"AvoidStarImport\"/&gt; &lt;module name=\"UnusedImports\"/&gt; &lt;!-- Checks for Size --&gt; &lt;!-- See http://checkstyle.sourceforge.net/config_sizes --&gt; &lt;module name=\"ParameterNumber\"&gt; &lt;property name=\"max\" value=\"6\"/&gt; &lt;/module&gt; &lt;!-- other rules ignored for brevity --&gt; &lt;/module&gt;&lt;/module&gt; findbugs (Java) http://findbugs.sourceforge.net/ A program which uses static analysis to look for bugs in Java code app/build.gradle 12345678910111213141516171819apply plugin: 'findbugs'task findbugs(type: FindBugs) { ignoreFailures = false effort = \"max\" reportLevel = \"low\" classes = files(\"$project.buildDir/intermediates/javac\") excludeFilter = file(\"$rootProject.rootDir/tools/findbugs-exclude.xml\") source = fileTree('src/main/java/') classpath = files() reports { xml.enabled = false html.enabled = true html.destination file(\"$project.buildDir/outputs/findbugs/findbugs-output.html\") }} tools/findbugs-exclude.xml 123456789101112131415161718192021&lt;FindBugsFilter&gt; &lt;!-- Do not check auto-generated resources classes --&gt; &lt;Match&gt; &lt;Class name=\"~.*R\\$.*\"/&gt; &lt;/Match&gt; &lt;!-- Do not check auto-generated manifest classes --&gt; &lt;Match&gt; &lt;Class name=\"~.*Manifest\\$.*\"/&gt; &lt;/Match&gt; &lt;!-- Do not check auto-generated classes (Dagger puts $ into class names) --&gt; &lt;Match&gt; &lt;Class name=\"~.*Dagger*.*\"/&gt; &lt;/Match&gt; &lt;!-- http://findbugs.sourceforge.net/bugDescriptions.html#ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD--&gt; &lt;Match&gt; &lt;Bug pattern=\"ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD\" /&gt; &lt;/Match&gt;&lt;/FindBugsFilter&gt; pmd (Java) https://github.com/pmd/pmd PMD is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth app/build.gradle 1234567891011121314151617apply plugin: 'pmd'task pmd(type: Pmd) { ruleSetFiles = files(\"${project.rootDir}/tools/pmd-rules.xml\") ignoreFailures = false ruleSets = [] source 'src' include '**/*.kt' exclude '**/gen/**' reports { xml.enabled = false html.enabled = true html.destination = file(\"$project.buildDir/outputs/pmd/pmd.html\") }} tools/pmd-rules.xml 1234567891011121314151617181920&lt;?xml version=\"1.0\"?&gt;&lt;ruleset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\" xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\"&gt; &lt;exclude-pattern&gt;.*/R.java&lt;/exclude-pattern&gt; &lt;exclude-pattern&gt;.*/gen/.*&lt;/exclude-pattern&gt; &lt;rule ref=\"rulesets/java/basic.xml\" /&gt; &lt;rule ref=\"rulesets/java/braces.xml\" /&gt; &lt;rule ref=\"rulesets/java/strings.xml\" /&gt; &lt;rule ref=\"rulesets/java/design.xml\" &gt; &lt;exclude name=\"AvoidDeeplyNestedIfStmts\"/&gt; &lt;/rule&gt; &lt;rule ref=\"rulesets/java/unusedcode.xml\" /&gt;&lt;/ruleset&gt; lint https://developer.android.com/studio/write/lint Android Studio provides a code scanning tool called lint that can help you to identify and correct problems with the structural quality of your code without your having to execute the app or write test cases app/build.gradle 12345678910android { lintOptions { lintConfig file(\"$project.rootDir/tools/lint-rules.xml\") htmlOutput file(\"$project.buildDir/outputs/lint/lint.html\") warningsAsErrors true xmlReport false htmlReport true abortOnError false }} tools/lint-rules.xml 12345678910111213141516&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;lint&gt; &lt;issue id=\"GoogleAppIndexWarning\" severity=\"ignore\" /&gt; &lt;issue id=\"InvalidPackage\" severity=\"error\"&gt; &lt;ignore regexp=\"okio.*jar\" /&gt; &lt;ignore regexp=\"retrofit.*jar\" /&gt; &lt;/issue&gt; &lt;!-- Disable the given check in this project --&gt; &lt;issue id=\"IconMissingDensityFolder\" severity=\"ignore\" /&gt; &lt;!-- Change the severity of hardcoded strings to \"error\" --&gt; &lt;issue id=\"HardcodedText\" severity=\"error\" /&gt;&lt;/lint&gt; Strict mode https://developer.android.com/reference/android/os/StrictMode 12345678910111213141516171819202122232425262728import android.app.Applicationimport android.os.StrictModeclass App: Application() { override fun onCreate() { super.onCreate() enableStrictMode() } private fun enableStrictMode() { if (BuildConfig.DEBUG) { StrictMode.setThreadPolicy( StrictMode.ThreadPolicy.Builder() .detectAll() .penaltyLog() .build() ) StrictMode.setVmPolicy( StrictMode.VmPolicy.Builder() .detectAll() .penaltyLog() .build() ) } }} Version codetools/grgit.gradle 12345678910111213141516171819buildscript { repositories { jcenter() } dependencies { classpath 'org.ajoberstar:grgit:1.5.0' }}import org.ajoberstar.grgit.Grgitext { git = Grgit.open(currentDir: projectDir) gitCommitCount = git.log().size()}task printVersion() { println(\"Commit count: $gitCommitCount\")} app/build.gradle 12345android { defaultConfig { versionCode gitCommitCount }} Obfuscation https://developer.android.com/studio/build/shrink-code To make your app as small as possible, you should enable shrinking in your release build to remove unused code and resources. When enabling shrinking, you also benefit from obfuscation, which shortens the names of your app‚Äôs classes and members, and optimization, which applies more aggressive strategies to further reduce the size of your app When you use Android Studio 3.4 or Android Gradle plugin 3.4.0 and higher, R8 is the default compiler that converts your project‚Äôs Java bytecode into the DEX format that runs on the Android platform app/build.gradle 12345678910111213141516android { buildTypes { debug { signingConfig signingConfigs.debug minifyEnabled true proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), '$project.rootDir/tools/proguard-rules-debug.pro' } release { signingConfig signingConfigs.release minifyEnabled true shrinkResources true proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), '$project.rootDir/tools/proguard-rules.pro' } }} tools/proguard-rules.pro 1234567891011-ignorewarnings# Remove logs-assumenosideeffects class android.util.Log { public static boolean isLoggable(java.lang.String, int); public static int v(...); public static int i(...); public static int w(...); public static int d(...); public static int e(...);} tools/proguard-rules-debug.pro 1234-ignorewarnings-dontobfuscate-dontoptimize-ignorewarnings More proguard snippets https://github.com/krschultz/android-proguard-snippets qualitytools/quality.gradle 123task findbugstask pmdtask checkstyle app/build.gradle 1apply from: \"$project.rootDir/tools/quality.gradle\" File format https://twitter.com/kotlin/status/1067825173196414976?lang=en You don‚Äôt need to use ktlint or detekt to ensure that your code is formatted consistently. Simply enable ‚ÄúFile is not formatted according to project settings‚Äù in the inspection settings. ktlint (Kotlin) https://github.com/pinterest/ktlint An anti-bikeshedding Kotlin linter with built-in formatter app/build.gradle 1apply from: \"$project.rootDir/tools/ktlint.gradle\" tools/ktlint.gradle 1234567891011121314151617181920212223242526272829repositories { jcenter()}configurations { ktlint}dependencies { ktlint \"com.pinterest:ktlint:0.32.0\" // additional 3rd party ruleset(s) can be specified here // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and // ktlint will pick them up}task ktlint(type: JavaExec, group: \"verification\") { description = \"Check Kotlin code style.\" classpath = configurations.ktlint main = \"com.pinterest.ktlint.Main\" args \"src/**/*.kt\", \"--reporter=checkstyle, output=${buildDir}/outputs/ktlint.xml\"}task ktlintFormat(type: JavaExec, group: \"formatting\") { description = \"Fix Kotlin code style deviations.\" classpath = configurations.ktlint main = \"com.pinterest.ktlint.Main\" args \"-F\", \"src/**/*.kt\"} .editorconfig 12[*.{kt,kts}]indent_size=4 detekt (Kotlin) https://github.com/arturbosch/detekt Static code analysis for Kotlin build.gradle 1234567buildscript {}plugins { id \"io.gitlab.arturbosch.detekt\" version \"1.0.0-RC14\"}allprojects {} tools/detekt.gradle 1234567detekt { toolVersion = \"1.0.0-RC14\" input = files(\"src/main\") filters = \".*/resources/.*,.*/build/.*\" baseline = file(\"${project.rootDir}/tools/detekt-baseline.xml\") config = files(file(\"$project.rootDir/tools/detekt.yml\"))} tools/detekt.xml https://github.com/arturbosch/detekt/blob/master/docs/pages/baseline.md The intention of a whitelist is that only new code smells are printed on further analysis. The blacklist can be used to write down false positive detections (instead of suppressing them and polute your code base). 12345678910&lt;SmellBaseline&gt; &lt;Blacklist&gt; &lt;ID&gt;CatchRuntimeException:Junk.kt$e: RuntimeException&lt;/ID&gt; &lt;/Blacklist&gt; &lt;Whitelist&gt; &lt;ID&gt;NestedBlockDepth:Indentation.kt$Indentation$override fun procedure(node: ASTNode)&lt;/ID&gt; &lt;ID&gt;TooManyFunctions:LargeClass.kt$io.gitlab.arturbosch.detekt.rules.complexity.LargeClass.kt&lt;/ID&gt; &lt;ID&gt;ComplexMethod:DetektExtension.kt$DetektExtension$fun convertToArguments(): MutableList&amp;lt;String&amp;gt;&lt;/ID&gt; &lt;/Whitelist&gt;&lt;/SmellBaseline&gt; tools/detekt.yml https://github.com/arturbosch/detekt/blob/master/detekt-cli/src/main/resources/default-detekt-config.yml https://arturbosch.github.io/detekt/configurations.html detekt uses a yaml style configuration file for various things: 123456789autoCorrect: truebuild: maxIssues: 10 weights: # complexity: 2 # LongParameterList: 1 # style: 1 # comments: 1 Run 1./gradlew detekt checkapp/build.gradle 1check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint', 'ktlint', 'detekt' Run 1./gradlew check Gradle Kotlin DSL How to use Gradle Kotlin DSL in Android https://github.com/onmyway133/blog/issues/285 Reference Configuring Android Project ‚Äî Little Things That Matter Ensure High-Quality Android Code With Static Analysis Tools Kotlin Static Analysis ‚Äî why and how?","link":"/blog/How-to-setup-Android-projects/"},{"title":"How to use Bitrise CI for React Native apps","text":"Issue #277 Original post https://codeburst.io/using-bitrise-ci-for-react-native-apps-b9e7b2722fe5 After trying Travis, CircleCI and BuddyBuild, I now choose Bitrise for my mobile applications. The many cool steps and workflows make Bitrise an ideal CI to try. Like any other CIs, the learning steps and configurations can be intimidating at first. Things that work locally can fail on CI, and how to send things that are marked as git ignore to be used in CI builds are popular issues. In this post I will show how to deploy React Native apps for both iOS and Android. The key thing to remember is to have the same setup on CI as you have locally. They are to ensure exact same versions for packages and tools, to be aware of file patterns in gitignore as those changes won‚Äôt be there on CI, and how to property use environment variables and secured files. This post tried to be intuitive with lots of screenshots. Hope you learn something and avoid the wasted hours that I have been too. Support for React NativeIn its simplest sense, React Native is just Javascript code with native iOS and Android projects, and Bitrise has a very good support for React Native. It scans ios and android folder, and give suggestion about scheme and build variants to build. Another good thing about Bitrise is its various useful steps and workflows. Unlike other CIs where we have to spend days on how to property edit the configuration file, Bitrise has a pretty good UI to add and edit steps. Steps are just custom scripts, and we can write pretty much what we like. Most of the predefined steps are open source. Here are a few Certificate and Profile Installer Install CocoaPods Slack message Gradle Runner Building for iOSUnless you use the step Build with Simulator , you will need provisioning profile and certificates with private keys in order to build for devices. Install React Native &amp; npm installReact Native moves fast and break things. If you don‚Äôt have same version of React Native, you will have hard time figuring out why the builds constantly fail on CI. Currently I use React Native 0.57.0, so I enter install react-native@0.57.0 to let Bitrise install the same version. But normally you just need to npm install as versions should be explicitly defined in package.json file. Also, we need to make sure we have the same version of react-native-cli with Install React Native step Install CocoaPodsIt‚Äôs safe to have the same CocoaPods version. For Xcode 10, we need at least CocoaPods 1.6.0.beta-1 to avoid the bug Skipping code signing because the target does not have an Info.plist file. Note that our Xcode project is inside ios folder, so we specify ./ios/Podfile for Podfile path Code signingUnder Workflow -&gt; Code Signing we can upload provisioning profiles and certificates. Then we need to use Certificate and profile install step to make use of the profiles and certificates we uploaded. iOS Auto ProvisionAnother option is to use the iOS Auto Provision step, but it requires that we need to have an account in team that has connected Apple Developer Account. This way Bitrise can autogenerate profiles for us. Sometimes you need to set Should the step try to generate Provisioning Profiles even if Xcode managed signing is enabled in the Xcode project? to yes Under Xcode Archive &amp; Export for iOS -&gt; Debug -&gt; Additional options for xcodebuild call We need to pass -allowProvisioningUpdates to make auto provisioning profile update happen. Recreate user schemeBitrise can autogenerate schemes with the Recreate user scheme step, but it‚Äôs good to mark our scheme as Shared in Xcode. This ensures consistence between local and CI builds. ArchiveTo archive project, we need to add Xcode Archive &amp; Export . For React Native, iOS project is inside ios folder, so we need to specify ./ios/MyApp.xcworkspace for Project path. Note that I use xcworkspace because I have CocoaPods Right now, as of React Native 0.57.0, it has problem running with the new build system in Xcode 10, so the quick fix is to use legacy build system. Under Xcode Archive &amp; Export step there are fields to add additional options for xcodebuild call. Enter -UseModernBuildSystem=NO You can read more Build System Release Notes for Xcode 10 Xcode 10 uses a new build system. The new build system provides improved reliability and build performance, and it catches project configuration problems that the legacy build system does not. Building for AndroidFor Android, the most troublesome task is to give keystore files to Bitrise as it is something we would keep privately from GitHub. Bitrise allows us to upload keystore file, but we also need to specify key alias and key password. One solution is to use Secrets and Environment variables But as we often use gradle.properties to specify custom variables for Gradle, it‚Äôs convenient to upload this file. Under Workflow -&gt; Code Signing is where we can upload keystore, as well as secured files The generated URL variables are path to our uploaded files. We can use curl to download them. Bitrise has also Generic File Storage step to download all secured files. The downloaded files is located at GENERIC_FILE_STORAGE , so we add another Custom Script step to copy those files into ./android folder #!/usr/bin/env bash cp $GENERIC_FILE_STORAGE/gradle.properties ./android/gradle.properties cp $GENERIC_FILE_STORAGE/my_app_android.keystore ./android/my_app_android.keystoreNote that the name of the files are the same of when we uploaded, and we use cp command to copy to folders. Android BuildBy default, Bitrise has 2 workflows: primary for quick start, and deploy for archiving and deploying. In the deploy workflow there is Android Build step. We can overwrite module and build variant here. If all go wellIn Bitrise we can mark a step to continue regardless of the previous step. I use this to make sure iOS build independently from Android If both iOS and Android build are successful, we should see the below summary Although Bitrise has a good UI to configure workflows and steps, we have fine grained control every parameters in the bitrise.yml file. It‚Äôs good to reason here as we get familiar with all the steps. Where to go from hereI hope you learn something and have a happy deploy. Since you are here, below articles may be of your interest BuddyBuild and gradle.properties in Android apps Deploying React Native to Bitrise, Fabric, CircleCI Dealing with updated pod in BuddyBuild Using CircleCI 2.0 in iOS apps","link":"/blog/How-to-use-Bitrise-CI-for-React-Native-apps/"},{"title":"How to use Firebase SDK with Firestore for React Native","text":"Issue #260 Original post https://medium.com/react-native-training/firebase-sdk-with-firestore-for-react-native-apps-in-2018-aa89a67d6934 At Firebase Dev Summit 2017, Google introduced Firestore as fully-managed NoSQL document database for mobile and web app development. Compared to Firebase Realtime Database, it has better querying and more structured data, together with ease manual fetching of data. The new structure of collection and document is probably the eye catching, this makes data more intuitive to users and query a breeze. From https://firebase.googleblog.com/2017/10/cloud-firestore-for-rtdb-developers.html In this post, I will show how to setup Firebase Cloud Firestore in React Native apps for both iOS and Android through, of course, some pain points. Then we create and fetch document in Firestore database. Firebase Javascript SDKMy first option is to go with Firebase Javascript SDK, as it worked well for me with Firebase Realtime Database. My use case is to just fetch and update Firestore collections, I think it does not involve much of native features. Furthermore, when possible I try to avoid native code as much as possible when dealing with React Native. So let‚Äôs try Get started with Cloud Firestore npm install firebaseThe version I install is 5.4.0. Next, import firebase and note that we need to import firestore as well const firebase = require(&quot;firebase&quot;); // Required for side-effects require(&quot;firebase/firestore&quot;);document is not definedThis issue made me bang against my desk for a while. As people have pointed out, it is because of document being accessed. var BrowserPlatform = /** @class */ (function () { function BrowserPlatform() { this.emptyByteString = &apos;&apos;; this.document = document; // delete this line this.window = window; // delete this line this.base64Available = typeof atob !== &apos;undefined&apos;; }The firestore component in the current Firebase Javascript SDK does not fully support React Native, so we need to work around or use beta version with npm install firebase@next . In the mean time, let‚Äôs try React Native Firebase. React Native FirebaseReading over at Cloud Firestore Library and framework integrations, React Native Firebase is recommended. Although some features from the Firebase Web SDK will generally work with React Native, it is mainly built for the web and as such has a limited compatible feature set. Source: https://rnfirebase.io/docs/v4.3.x/getting-started The below article and their starter app is the guiding star. The integration with native code in iOS and Android can be painful, but I React Native Firebase is very powerful as it has up-to-date wrappers around native Firebase SDK. Let ‚Äòs npm install react-native-firebase , the current version is 4.3.8 , and follow manual setup guide for existing project, this helps you learn more about the process and the bootstrap script. A quick lookFirst you need to Firebase console and add a project. A project allows many apps to stay, for example I have 4 apps (2 iOS, 2 Android) that have access to Firestore database. Head over to Database in the left menu, we can see a quick look into Firestore and its collection/document structure Setup for iOSFollow iOS Installation Guide Firstly, download GoogleService-Info.plist and place it in the correct folder, make sure it has been added to project via Xcode. Otherwise Firebase SDK causes app to crash right after start. Then add #import &lt;Firebase.h&gt; to AppDelegate.m and [FIRApp configure]; to function didFinishLaunchingWithOptions . Next create Podfile with pod init inside ios folder. For Firestore, you need Firebase/Firestore to prevent the error below You attempted to use a firebase module that‚Äôs not installed natively on your iOS project by calling firebase.firestore() And you shouldn‚Äôt use use_frameworks! as it gives error ‚ÄòFirebaseCore/FIRAnalyticsConfiguration.h‚Äô file not found platform :ios, &apos;9.0&apos; target &apos;FoodshopGuest&apos; do pod &apos;Firebase/Core&apos;, &apos;~&gt; 5.3.0&apos; pod &apos;Firebase/Firestore&apos;, &apos;~&gt; 5.3.0&apos; endIf you get framework not found FirebaseAnalytics , then make sure each target has $(inherited) at the top for Framework Search Paths Then run react-native link react-native-firebase and you should be good for iOS. Setup for AndroidAndroid is a bit less straightforward to setup than iOS. But it‚Äôs not impossible. Let‚Äôs follow Android Installation guide. Firstly, place google-services.json in android/app/google-services.json . Let‚Äôs also use Gradle 4.4 and Google Play Services 15.0.1 . Change gradle/gradle-wrapper.properties to use distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zipBelow is my project build.gradle with compileSdkVersion 27 and buildToolsVersion 27.0.3 . Make sure google() stays above jcenter() // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { repositories { mavenLocal() google() jcenter() maven { url &apos;[https://maven.google.com/&apos;](https://maven.google.com/&apos;) name &apos;Google&apos; } } dependencies { classpath &apos;com.android.tools.build:gradle:3.1.3&apos; classpath &apos;com.google.gms:google-services:4.0.1&apos; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { mavenLocal() google() jcenter() maven { // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm url &quot;$rootDir/../node_modules/react-native/android&quot; } } } ext { buildToolsVersion = &quot;27.0.3&quot; minSdkVersion = 16 compileSdkVersion = 27 targetSdkVersion = 26 supportLibVersion = &quot;26.1.0&quot; }For my app module build.gradle , let‚Äôs have apply plugin: ‚Äòcom.google.gms.google-services‚Äô at the very bottom of the file, this is important. In dependencies section, you must have com.google.firebase:firebase-firestore to include Firestore component. dependencies { implementation project(&apos;:react-native-firebase&apos;) implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;]) implementation &quot;com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}&quot; // Firebase dependencies implementation &quot;com.google.android.gms:play-services-base:15.0.1&quot; implementation &quot;com.google.firebase:firebase-core:16.0.1&quot; implementation &quot;com.google.firebase:firebase-firestore:17.0.2&quot; }Make sure there is no duplication of project(‚Äò:react-native-firebase‚Äô) . And since we are using Gradle 4, let‚Äôs use implementation instead of compileWhat‚Äôs the difference between implementation and compile in Gradle?This site uses cookies to deliver our services and to show you relevant ads and job listings. By using our site, you‚Ä¶stackoverflow.com Because of Firestore, let‚Äôs follow react-native-firebase-starter to fix heap problem dexOptions { javaMaxHeapSize &quot;4g&quot; } multiDexEnabled trueIf you get Native module RNFirebaseModule tried to override FNFirebaseModule Native module RNFirebaseModule tried to override FNFirebaseModule for module name Firebase. If this was your intention, set `canOverrideExistingModule=true Then make sure your MainApplication.java has no duplication for new RNFirebasePackage() . Here is my MainApplication.java , note that you need import io.invertase.firebase.firestore.RNFirebaseFirestorePackage; in order to use RNFirebaseFirestorePackage package com.fantageek.foodshophost; import android.app.Application; import com.facebook.react.ReactApplication; import io.invertase.firebase.RNFirebasePackage; import io.invertase.firebase.firestore.RNFirebaseFirestorePackage; import com.facebook.react.ReactNativeHost; import com.facebook.react.ReactPackage; import com.facebook.react.shell.MainReactPackage; import com.facebook.soloader.SoLoader; import java.util.Arrays; import java.util.List; public class MainApplication extends Application implements ReactApplication { private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) { [@Override](http://twitter.com/Override) public boolean getUseDeveloperSupport() { return BuildConfig.DEBUG; } [@Override](http://twitter.com/Override) protected List&lt;ReactPackage&gt; getPackages() { return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new RNFirebasePackage(), new RNFirebaseFirestorePackage() ); } [@Override](http://twitter.com/Override) protected String getJSMainModuleName() { return &quot;index&quot;; } }; [@Override](http://twitter.com/Override) public ReactNativeHost getReactNativeHost() { return mReactNativeHost; } [@Override](http://twitter.com/Override) public void onCreate() { super.onCreate(); SoLoader.init(this, /* native exopackage */ false); } }My rule of thumb is that you should always use Android Studio to perform Gradle sync or Build projectThere you should be able to see compile issues much easier. With all the steps above, compilation should succeed. One problem with running React Native on Android, if after react-native run-android and Metro keeps showing Loading dependency graph, done , then you should start emulator via Android Studio -&gt; AVD Manager or adb , the app should be already installed in the emulator, open the app and Metro will start loading again. Trying FirestoreReact Native Firebase should give you similar APIs to those in the web, so learn from Get data with Cloud Firestore for how to get or set documents. I like to organise services in separate files, here is how to reference firestore and load document. import firebase from &apos;react-native-firebase&apos; class FirebaseService { constructor() { this.ref = firebase.firestore().collection(&apos;people&apos;) } async load(id) { const doc = await this.ref.doc(id).get() if (doc.exists) { return doc.data() } else { const defaultDoc = { name: &quot;ABC&quot;, age: 2 } await this.ref.doc(id).set(defaultDoc) return doc } } } export const firebaseService = new FirebaseService()Where to go from hereI hope this article helps in setting up Firebase SDK in React Native apps. Below are some resources that helps you explore further. The react-native-firebase-starter contains awesome reference code if you get into any troubles with react-native-firebase.Getting started with Cloud Firestore on React NativeA week ago, Firebase announced Cloud Firestore, an awesome NoSQL document database that complements the existing‚Ä¶blog.invertase.ioinvertase/react-native-firebase-starterreact-native-firebase-starter - üéÅ A bare-bones react native app with react-native-firebase pre-integrated so you can‚Ä¶github.com","link":"/blog/How-to-use-Firebase-SDK-with-Firestore-for-React-Native/"},{"title":"How to use Payment Intent and Setup Intents with Stripe in iOS","text":"Issue #356 StripeHandler.swift From Stripe 16.0.0 https://github.com/stripe/stripe-ios/blob/master/CHANGELOG.md#1600-2019-07-18 Migrates STPPaymentCardTextField.cardParams property type from STPCardParams to STPPaymentMethodCardParams 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104final class StripeHandler { func createPaymentMethod( textField: STPPaymentCardTextField, completion: @escaping (Result&lt;STPPaymentMethod, Error&gt;) -&gt; Void) { let paymentMethodParams = STPPaymentMethodParams( card: textField.cardParams, billingDetails: nil, metadata: nil ) STPAPIClient.shared().createPaymentMethod( with: paymentMethodParams, completion: { paymentMethod, error in DispatchQueue.main.async { if let paymentMethod = paymentMethod { completion(.success(paymentMethod)) } else { completion(.failure(error ?? AppError.request)) } } }) STPAPIClient.shared().createPaymentMethod( with: paymentMethodParams, completion: { paymentMethod, error in DispatchQueue.main.async { if let paymentMethod = paymentMethod { completion(.success(paymentMethod)) } else { completion(.failure(error ?? AppError.request)) } } }) } func confirmSetupIntents( clientSecret: String, paymentMethodId: String, context: STPAuthenticationContext?, completion: @escaping (Result&lt;STPSetupIntent, Error&gt;) -&gt; Void) { guard let context = context else { completion(.failure(AppError.invalid)) return } let setupIntentParams = STPSetupIntentConfirmParams(clientSecret: clientSecret) setupIntentParams.paymentMethodID = paymentMethodId let paymentHandler = STPPaymentHandler.shared() paymentHandler.confirmSetupIntent( setupIntentParams, with: context, completion: { status, intent, error in DispatchQueue.main.async { if case .succeeded = status, let intent = intent { completion(.success(intent)) } else { completion(.failure(error ?? AppError.invalid)) } } }) } func confirmPaymentIntents( clientSecret: String, context: STPAuthenticationContext?, completion: @escaping (Result&lt;STPPaymentIntent, Error&gt;) -&gt; Void) { guard let context = context else { completion(.failure(AppError.invalid)) return } STPPaymentHandler.shared().handleNextAction( forPayment: clientSecret, with: context, returnURL: nil, completion: { status, paymentIntent, error in if case .succeeded = status, let paymentIntent = paymentIntent { completion(.success(paymentIntent)) } else { completion(.failure(error ?? AppError.invalid)) } }) } func toCard(paymentMethod: STPPaymentMethod) -&gt; MyCard? { guard let card = paymentMethod.card, let last4 = card.last4 else { return nil } return withValue(MyCard()) { $0.expiryYear = UInt32(card.expYear) $0.expiryMonth = UInt32(card.expMonth) $0.lastFourDigits = last4 $0.brand = STPCard.string(from: card.brand) } }} Payment intentshttps://stripe.com/docs/payments/payment-intents/creating-payment-intents When using automatic confirmation, create the PaymentIntent at the beginning of the checkout process. When using manual confirmation, create the PaymentIntent after collecting payment information from the customer using Elements or our iOS and Android SDKs. For a detailed comparison on the automatic and manual confirmation flows, see accepting one-time payments. Step 3: Authenticate the payment if necessary Pass the confirmed Payment Intent client secret from the previous step to STPPaymentHandler handleNextActionForPayment. If the customer must perform 3D Secure authentication to complete the payment, STPPaymentHandler presents view controllers using the STPAuthenticationContext passed in and walks them through that process. See Supporting 3D Secure Authentication on iOS to learn more. 12345678910111213141516MyAPIClient.createAndConfirmPaymentIntent(paymentMethodId: paymentMethodId) { result in guard case .success(let paymentIntentClientSecret) = result else { // Handle error return } STPPaymentHandler.shared().handleNextAction(forPayment: paymentIntentClientSecret, with: self, returnURL: nil) { (status, paymentIntent, error) in switch (status) { case .succeeded: // ...Continued in Step 4 case .canceled: // Handle cancel case .failed: // Handle error } }} Setup intentsThere is Setup intents https://stripe.com/docs/payments/cards/reusing-cards#saving-cards-without-payment for saving cards Use the Setup Intents API to authenticate a customer‚Äôs card without making an initial payment. This flow works best for businesses that want to onboard customers without charging them right away: Step 4: Submit the card details to Stripe from the client Pass the STPSetupIntentParams object to the confirmSetupIntent method on a STPPaymentHandler sharedManager. If the customer must perform additional steps to complete the payment, such as authentication, STPPaymentHandler presents view controllers using the STPAuthenticationContext passed in and walks them through that process. See Supporting 3D Secure Authentication on iOS to learn more. 12345678910111213let setupIntentParams = STPSetupIntentParams(clientSecret: clientSecret)setupIntentParams.paymentMethodId = paymentMethodIdlet paymentManager = STPPaymentHandler.shared()paymentManager.confirmSetupIntent(setupIntentParams, authenticationContext: self, completion { (status, setupIntent, error) in switch (status) { case .succeeded: // Setup succeeded case .canceled: // Handle cancel case .failed: // Handle error }}) Authentication contextIn STPPaymentHandler.m 123456789101112131415161718192021- (BOOL)_canPresentWithAuthenticationContext:(id&lt;STPAuthenticationContext&gt;)authenticationContext { UIViewController *presentingViewController = authenticationContext.authenticationPresentingViewController; // Is presentingViewController non-nil and in the window? if (presentingViewController == nil || presentingViewController.view.window == nil) { return NO; } // Is it the Apple Pay VC? if ([presentingViewController isKindOfClass:[PKPaymentAuthorizationViewController class]]) { // We can't present over Apple Pay, user must implement prepareAuthenticationContextForPresentation: to dismiss it. return [authenticationContext respondsToSelector:@selector(prepareAuthenticationContextForPresentation:)]; } // Is it already presenting something? if (presentingViewController.presentedViewController == nil) { return YES; } else { // Hopefully the user implemented prepareAuthenticationContextForPresentation: to dismiss it. return [authenticationContext respondsToSelector:@selector(prepareAuthenticationContextForPresentation:)]; }} Use stripe SDKSTPSetupIntentConfirmParams.useStripeSDK A boolean number to indicate whether you intend to use the Stripe SDK‚Äôs functionality to handle any SetupIntent next actions.If set to false, STPSetupIntent.nextAction will only ever contain a redirect url that can be opened in a webview or mobile browser.When set to true, the nextAction may contain information that the Stripe SDK can use to perform native authentication within your app. 12let setupIntentParams = STPSetupIntentConfirmParams(clientSecret: clientSecret)setupIntentParams.useStripeSDK = NSNumber(booleanLiteral: true) Read more Using Payment Intents on iOS One-time Payments with the Payment Intents API Supporting 3D Secure Authentication on iOS STPSetupIntentConfirmParams Testing","link":"/blog/How-to-use-Payment-Intent-and-Setup-Intents-with-Stripe-in-iOS/"},{"title":"How to use push notification in iOS","text":"Issue #29 Here are my notes for working with Push Notification, updated for iOS 9 How to register Register to receive push notification registerForRemoteNotificationTypes is deprecated in iOS 8+ 1UIApplication.sharedApplication().registerForRemoteNotifications() Register to alert user through UI If your app displays alerts, play sounds, or badges its icon, you must call this method during your launch cycle to request permission to alert the user in these ways 12345let types: UIUserNotificationType = [.Badge, .Sound, .Alert]let categories = Set&lt;UIUserNotificationCategory&gt;()let settings = UIUserNotificationSettings(forTypes: types, categories: categories)UIApplication.sharedApplication().registerUserNotificationSettings(settings) You don‚Äôt need to wait for registerUserNotificationSettings to callback before calling registerForRemoteNotifications When to register Registering, Scheduling, and Handling User Notifications Never cache a device token; always get the token from the system whenever you need it. If your app previously registered for remote notifications, calling the registerForRemoteNotifications method again does not incur any additional overhead, and iOS returns the existing device token to your app delegate immediately. In addition, iOS calls your delegate method any time the device token changes, not just in response to your app registering or re-registering The user can change the notification settings for your app at any time using the Settings app. Because settings can change, always call the registerUserNotificationSettings: at launch time and use the application:didRegisterUserNotificationSettings: method to get the response. If the user disallows specific notification types, avoid using those types when configuring local and remote notifications for your app. didReceiveRemoteNotificationAbout application:didReceiveRemoteNotification: Implement the application:didReceiveRemoteNotification:fetchCompletionHandler: method instead of this one whenever possible. If your delegate implements both methods, the app object calls the application:didReceiveRemoteNotification:fetchCompletionHandler: method. If the app is not running when a remote notification arrives, the method launches the app and provides the appropriate information in the launch options dictionary. The app does not call this method to handle that remote notification. Instead, your implementation of the application:willFinishLaunchingWithOptions: or application:didFinishLaunchingWithOptions: method needs to get the remote notification payload data and respond appropriately. About application:didReceiveRemoteNotification:fetchCompletionHandler: This is for silent push notification with content-available Unlike the application:didReceiveRemoteNotification: method, which is called only when your app is running in the foreground, the system calls this method when your app is running in the foreground or background In addition, if you enabled the remote notifications background mode, the system launches your app (or wakes it from the suspended state) and puts it in the background state when a push notification arrives. However, the system does not automatically launch your app if the user has force-quit it. In that situation, the user must relaunch your app or restart the device before the system attempts to launch your app automatically again. If the user opens your app from the system-displayed alert, the system may call this method again when your app is about to enter the foreground so that you can update your user interface and display information pertaining to the notification. How to handleUsually, the use of push notification is to display a specific article, a specific DetailViewController, ‚Ä¶ in your app. So the good practices are When the app is in foreground: Gently display some kind of alert view and ask the user whether he would like to go to that specific page or not When user is brought from background to foreground, or from terminated to foreground: Just navigate to that specific page. For example, if you use UINavigationController, you can set that specific page the top most ViewController, if you use UITabBarController, you can set that specific page the selected tab, something like that 1234567891011- func handlePushNotification(userInfo: NSDictionary) { // Check applicationState if (applicationState == UIApplicationStateActive) { // Application is running in foreground showAlertForPushNotification(userInfo) } else if (applicationState == UIApplicationStateBackground || applicationState == UIApplicationStateInactive) { // Application is brought from background or launched after terminated handlePushNotification(userInfo) }} Here we create another method `handlePushNotification:`` to handle push notification. When you receive push notification, 3 cases can occur Case 1: ForegroundLoud push No system alert application:didReceiveRemoteNotification:fetchCompletionHandler: called Silent push No system alert application:didReceiveRemoteNotification:fetchCompletionHandler: called Case 2: BackgroundLoud push System alert No method called Tap notification and application:didReceiveRemoteNotification:fetchCompletionHandler: called Tap on App Icon and nothing is called Silent push System alert application:didReceiveRemoteNotification:fetchCompletionHandler: called. If app is suspended, its state changed to UIApplicationStateBackground Tap notification and application:didReceiveRemoteNotification:fetchCompletionHandler: called Tap on App Icon and nothing is called Case 3: TerminatedLoud push System alert No method called Tap notification and application:didFinishLaunchingWithOptions: with launchOptions, application:didReceiveRemoteNotification:fetchCompletionHandler: called Tap on App Icon and application:didFinishLaunchingWithOptions: is called with launchOptions set to nil Silent push System alert application:didReceiveRemoteNotification:fetchCompletionHandler: called. If app was not killed by user, it is woke up and state changed to UIApplicationStateInactive. Tap notification and application:didFinishLaunchingWithOptions: with launchOptions, application:didReceiveRemoteNotification:fetchCompletionHandler: called Tap on App Icon and application:didFinishLaunchingWithOptions: is called with launchOptions set to nil System alertSystem alert only show if the payload contains ‚Äúalert‚Äù 123456789101112{ \"aps\" : { \"alert\" : { \"title\" : \"Game Request\", \"body\" : \"Bob wants to play poker\", \"action-loc-key\" : \"PLAY\" }, \"badge\" : 5 }, \"param1\" : \"bar\", \"param2\" : [ \"bang\", \"whiz\" ]} Silent push payloadFor now I see that silent push must contain ‚Äúsound‚Äù for application:didReceiveRemoteNotification:fetchCompletionHandler: to be called when app is in background 123456789{ \"aps\": { \"content-available\": 1, \"alert\": \"hello\" // include this if we want to show alert \"sound\": \"\" // this does the trick }, \"param1\": 1, \"param2\": \"text\"} Reference Scheduling, Registering, and Handling Notifications Handle push notifications when arrived in ios application How to respond to push notification view if app is already running in the background didReceiveRemoteNotification when in background How to handle remote notification with background mode enabled Remote notification method called twice","link":"/blog/How-to-use-push-notification-in-iOS/"},{"title":"Make your own sliding menu on Android tutorial ‚Äì Part 2","text":"Issue #152 This is the part 2 of the tutorial. If you forget, here is the link to part 1. Link to Github In the first part, we learn about the idea, the structure of the project and how MainActivity uses the MainLayout. Now we learn how to actually implement the MainLayout DISPLAY MENU AND CONTENT VIEWFirst we have MainLayout as a subclass of LinearLayout 1public class MainLayout extends LinearLayout We then need declare the constructors 1234567public MainLayout(Context context, AttributeSet attrs) { super(context, attrs); } public MainLayout(Context context) { super(context); } and override some useful methods 1234567891011@Override protected void onAttachedToWindow() { super.onAttachedToWindow(); // Get our 2 child View menu = this.getChildAt(0); content = this.getChildAt(1); // Initially hide the menu menu.setVisibility(View.GONE); } onAttachedToWindow() is called when MainLayout is attached to window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before onDraw. Here we set child views to our view and content variable 12menu = this.getChildAt(0);content = this.getChildAt(1); and initially hide the menu. Note that View.GONE tells the view to not take up space in the layout 1menu.setVisibility(View.GONE); In onMeasure(), we compute menuRightMargin, this variable is the amount of right space the menu should not occupy. In this case, we want the menu to take up 90% amount of the screen width. onMeasure() is called to ask all children to measure themselves and compute the measurement of this layout based on the children 12345@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); menuRightMargin = mainLayoutWidth * 10 / 100; } Finally, we need to override onLayout(), this is called from layout when this view should assign a size and position to each of its children. This is where we position the menu and content view. 1234567891011121314151617181920212223@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) { // True if MainLayout 's size and position has changed // If true, calculate child views size if(changed) { // Note: LayoutParams are used by views to tell their parents how they want to be laid out // content View occupies the full height and width LayoutParams contentLayoutParams = (LayoutParams)content.getLayoutParams(); contentLayoutParams.height = this.getHeight(); contentLayoutParams.width = this.getWidth(); // menu View occupies the full height, but certain width LayoutParams menuLayoutParams = (LayoutParams)menu.getLayoutParams(); menuLayoutParams.height = this.getHeight(); menuLayoutParams.width = this.getWidth() - menuRightMargin; } // Layout the child views menu.layout(left, top, right - menuRightMargin, bottom); content.layout(left + contentXOffset, top, right + contentXOffset, bottom); } Note for the use of the contentXOffset variable. It is the content that is moving, not the menu. So contentXOffset is used to translate the content horizontally when it is moving ADDING ANIMATIONSo the main idea of sliding menu is to change contentXOffset and call offsetLeftAndRight for the content to move the content. But for the content ‚Äòs new position to survive, we need to actually layout it on onLayout(), as shown in previous code snippet For more information, see Flyin menu using offsetLeftAndRight not preserving after a layout To better control sliding state, we declare MenuState enumeration 123456private enum MenuState { HIDING, HIDDEN, SHOWING, SHOWN, }; HIDDEN state is when menu is fully hidden, and SHOWN state is when menu is fully shown. HIDDING state is when menu is about to hide, and SHOWING state is when menu is about to show. Initially currentMenuState is set to HIDDEN so that the menu won‚Äôt show up on first launch. The main method of our MainLayout is toggleMenu, which, as it name implied, allow us to toggle menu 123456789101112131415161718192021222324252627public void toggleMenu() { // Do nothing if sliding is in progress if(currentMenuState == MenuState.HIDING || currentMenuState == MenuState.SHOWING) return; switch(currentMenuState) { case HIDDEN: currentMenuState = MenuState.SHOWING; menu.setVisibility(View.VISIBLE); menuScroller.startScroll(0, 0, menu.getLayoutParams().width, 0, SLIDING_DURATION); break; case SHOWN: currentMenuState = MenuState.HIDING; menuScroller.startScroll(contentXOffset, 0, -contentXOffset, 0, SLIDING_DURATION); break; default: break; } // Begin querying menuHandler.postDelayed(menuRunnable, QUERY_INTERVAL); // Invalite this whole MainLayout, causing onLayout() to be called this.invalidate(); } Here we use a Scroller to faciliate sliding animation. Note that Scroller does not perform any visual effect, it is just a base for us to track animation by querying the Scroller‚Äôs methods. Bills has a good answer on SO Android: Scroller Animation? The Scroller uses a custom Interpolator to make the sliding more natural. It moves faster in the end. The formula is here 1interpolator(t) = (t-1)5 + 1 If the menu is in HIDDEN state, we set its visibility to VISIBLE and start scrolling. Here the content is moving horizontally, so we scroll from left edge to menu width. Note that menu takes up only 90% of the screen width. If the menu is in SHOWN state, we start scrolling from the content ‚Äòs current x position to the left edge. The 3rd parameter to the startScroll() method is the distance we want to scroll, a negative sign indicates that we want to scroll from right to left. You can tweak SLIDING_DURATION and QUERY_INTERVAL to your desire. SLIDING_DURATION is the duration of the scrolling. QUERY_INTERVAL is how often we perform querying the Scroller for information. I set it to 16ms so that we have an fps of about 60, which is too high :D Here the querying is achieved via calling adjustContentPosition() in MenuRunnable 12// Begin queryingmenuHandler.postDelayed(menuRunnable, QUERY_INTERVAL); 12345678// Query Scrollerprotected class MenuRunnable implements Runnable { @Override public void run() { boolean isScrolling = menuScroller.computeScrollOffset(); adjustContentPosition(isScrolling); } } Here we call computeScrollOffset to check if the scrolling is finished or not 12345678910111213141516171819private void adjustContentPosition(boolean isScrolling) { int scrollerXOffset = menuScroller.getCurrX(); //Log.d(\"MainLayout.java adjustContentPosition()\", \"scrollerOffset \" + scrollerOffset); // Translate content View accordingly content.offsetLeftAndRight(scrollerXOffset - contentXOffset); contentXOffset = scrollerXOffset; // Invalite this whole MainLayout, causing onLayout() to be called this.invalidate(); // Check if animation is in progress if (isScrolling) menuHandler.postDelayed(menuRunnable, QUERY_INTERVAL); else this.onMenuSlidingComplete(); } We base on getCurrX to update out contentXOffset and translate content view. Remember to call invalidate() everytime the content position is changed. We continue moving the content view until scrolling is finished Finally, in onMenuSlidingComplete(), we set the currentMenuState accordingly 12345678910111213private void onMenuSlidingComplete() { switch (currentMenuState) { case SHOWING: currentMenuState = MenuState.SHOWN; break; case HIDING: currentMenuState = MenuState.HIDDEN; menu.setVisibility(View.GONE); break; default: return; } } HANDLING GESTURETo support gesture, we first attach OnTouchListener to the content view. We do this in onMeasure() 123456content.setOnTouchListener(new OnTouchListener() { @Override public boolean onTouch(View v, MotionEvent event) { return MainLayout.this.onContentTouch(v, event); } }); And in onContentTouch() we handle the ACTION_DOWN, ACTION_MOVE and ACTION_UP to allow dragging the content view Please note that we use getRawX() instead of getX() for consistent behavior. More information see PeyloW ‚Äòs answer here How do I know if a MotionEvent is relative or absolute? Here I use curX and diffX to track previous position and how the difference in distance. When user is dragging, we continuously update the content view ‚Äòs position. Please also prevent user from dragging beyond the left edge and right margin border When the user release his/her finger, we base on lastDiffX to decide if the menu should show or hide. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091public boolean onContentTouch(View v, MotionEvent event) { // Do nothing if sliding is in progress if(currentMenuState == MenuState.HIDING || currentMenuState == MenuState.SHOWING) return false; // getRawX returns X touch point corresponding to screen // getX sometimes returns screen X, sometimes returns content View X int curX = (int)event.getRawX(); int diffX = 0; switch(event.getAction()) { case MotionEvent.ACTION_DOWN: //Log.d(\"MainLayout.java onContentTouch()\", \"Down x \" + curX); prevX = curX; return true; case MotionEvent.ACTION_MOVE: //Log.d(\"MainLayout.java onContentTouch()\", \"Move x \" + curX); // Set menu to Visible when user start dragging the content View if(!isDragging) { isDragging = true; menu.setVisibility(View.VISIBLE); } // How far we have moved since the last position diffX = curX - prevX; // Prevent user from dragging beyond border if(contentXOffset + diffX &lt;= 0) { // Don't allow dragging beyond left border // Use diffX will make content cross the border, so only translate by -contentXOffset diffX = -contentXOffset; } else if(contentXOffset + diffX &gt; mainLayoutWidth - menuRightMargin) { // Don't allow dragging beyond menu width diffX = mainLayoutWidth - menuRightMargin - contentXOffset; } // Translate content View accordingly content.offsetLeftAndRight(diffX); contentXOffset += diffX; // Invalite this whole MainLayout, causing onLayout() to be called this.invalidate(); prevX = curX; lastDiffX = diffX; return true; case MotionEvent.ACTION_UP: //Log.d(\"MainLayout.java onContentTouch()\", \"Up x \" + curX); Log.d(\"MainLayout.java onContentTouch()\", \"Up lastDiffX \" + lastDiffX); // Start scrolling // Remember that when content has a chance to cross left border, lastDiffX is set to 0 if(lastDiffX &gt; 0) { // User wants to show menu currentMenuState = MenuState.SHOWING; // No need to set to Visible, because we have set to Visible in ACTION_MOVE //menu.setVisibility(View.VISIBLE); //Log.d(\"MainLayout.java onContentTouch()\", \"Up contentXOffset \" + contentXOffset); // Start scrolling from contentXOffset menuScroller.startScroll(contentXOffset, 0, menu.getLayoutParams().width - contentXOffset, 0, SLIDING_DURATION); } else if(lastDiffX &lt; 0) { // User wants to hide menu currentMenuState = MenuState.HIDING; menuScroller.startScroll(contentXOffset, 0, -contentXOffset, 0, SLIDING_DURATION); } // Begin querying menuHandler.postDelayed(menuRunnable, QUERY_INTERVAL); // Invalite this whole MainLayout, causing onLayout() to be called this.invalidate(); // Done dragging isDragging = false; prevX = 0; lastDiffX = 0; return true; default: break; } return false; }","link":"/blog/Make-your-own-sliding-menu-on-Android-tutorial-Part-2/"},{"title":"Make your own sliding menu on Android tutorial - Part 1","text":"Issue #151 This post was from long time ago when I did Android I can‚Äôt deny that Facebook is so amazing, they made trends and people want to follow. That is the case of the sliding menu. Searching many threads on SO, like these create android Sliding Menu like Facebook,gmail, Android sliding menu similar to the one on facebook, Android - Sliding menu with sub menu ‚Ä¶ they will mostly introduce you to some good sliding menu libraries, like this SlidingMenu and some tutorials on how to use it. And of course, not forget to mention the Navigation Drawer that shipped with the Android SDK If you are a do-it-yourself guy like me, then here is the tutorial for you. It is mostly based on the following Youtube videos and guides Creating a Slide-In Menu in Android - Part 1: Showing the menu Creating a Slide-In Menu in Adnroid - Part 2: Adding animation The Making of Prixing #1: Fly-in App Menu The Making of Prixing #2: Swiping the Fly-in App Menu The Making of Prixing #3: Polishing the Sliding App Menu WHAT WILL WE ACHIEVEThe final result of this tutorial will look like this. User will then be able to get the menu by touching the Menu button, or just by dragging. The menu contains a list of Android UI controls and when selected, the main content view will shows the according screen. The source code is available on Github THE IDEAA sliding menu app typically has 2 views : the menu view (the green rectangle) and the content view (the red rectangle) We have many ways to implement the sliding effect, all depend on your intention Let the menu view hold still, while moving the content view. The content view usually sits on top of the menu view and cover the entire screen Opposite of 1. Let the content view hold still, while moving the menu view. The menu usually sits on top of the content view and occupy some amount of space, so that user can touch and drag it The same as 2. but when the menu is moving, the content is moving, too. When the menu is shown, we should disable interacting with the content view. The 1st solution is what we will do in this tutorial. It‚Äôs much the same with Facebook sliding menu OVERVIEW OF THE PROJECTFor better understanding, you should take a look at the project to see how things are organized /src/com.entropy.slidingmenu2 MainActivity.java : this should be your first screen. It contains the MainLayout and handle ListView click event to display the right content /src/com.entropy.slidingmenu2.fragment FragmentMain.java : the default content view FragmentButton.java : show one button on the content view The content view is really simple since it‚Äôs just for demo. I use Fragment so we can easily change the content view according to the ListView item selected /src/com.entropy.slidingmenu2.layout MainLayout.java : the most important part of this tutorial. For ease and reusability, it‚Äôs best to create a custom LinearLayout. This will be used to position the menu and content views appropriately and handle sliding effect /res/layout activity.main: represent the visual structure for MainLayout fragment_main: represent the content view THE PREPARATIONI list here the required knowledge just for reference Fragment : used to show the content view Support library : we use v4 in this tutorial to support Fragment for older devices Custom layout : our MainLayout is a custom layout Scroller : to facilitate the sliding animation Gesture : to allow drag and drop Without further ado, let‚Äôs get started DESIGNING activity_main.xmlThe activity_main.xml represents the content of our custom layout. Since its a custom layout, we must declare like this 123&lt;com.entropy.slidingmenu2.layout.MainLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" &gt; Inside it are the 2 LinearLayout. Both are declared with attributes but the final display will be decided by the code :) 12android:layout_width=\"match_parent\"android:layout_height=\"match_parent\" The first is for the menu, which holds a ListView The second is for the content, which holds the simulated action bar ^^ and the FrameLayout. The FrameLayout is where fragments will show up WORKING WITH MainActivity.javaThe MainActivity is the default activity, it contains our MainLayout and handle menu item selection In the onCreate() method, we do the following Inflate the MainLayout and its as the contentView for our activity 12mainLayout = (MainLayout)this.getLayoutInflater().inflate(R.layout.activity_main, null);setContentView(mainLayout); Init the ListView for the menu 1234567891011lvMenuItems = getResources().getStringArray(R.array.menu_items); lvMenu = (ListView) findViewById(R.id.activity_main_menu_listview); lvMenu.setAdapter(new ArrayAdapter(this, android.R.layout.simple_list_item_1, lvMenuItems)); lvMenu.setOnItemClickListener(new OnItemClickListener() { @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) { onMenuItemClick(parent, view, position, id); } }); Init the menu button 12345678btMenu = (Button) findViewById(R.id.activity_main_content_button_menu); btMenu.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) { // Show/hide the menu toggleMenu(v); } }); Display FragmentMain as the initial Fragment for our content view 123456FragmentManager fm = MainActivity.this.getSupportFragmentManager();FragmentTransaction ft = fm.beginTransaction();FragmentMain fragment = new FragmentMain();ft.add(R.id.activity_main_content_fragment, fragment);ft.commit(); The toggleMenu() is a utility method to toggle the menu, it will calls MainLayout ‚Äòs toggleMenu() method. We ‚Äòll talk about this later onMenuItemClick() is used to handle menu item selection. What it does is to create the according Fragment and replace it with the current one Handle the Back button. If the menu is shown, we should hide it, or we can quit the app 123456789@Override public void onBackPressed() { if (mainLayout.isMenuShown()) { mainLayout.toggleMenu(); } else { super.onBackPressed(); } } Let‚Äôs continue to part 2","link":"/blog/Make-your-own-sliding-menu-on-Android-tutorial-Part-1/"},{"title":"Support IP handover in rtpproxy for VoIP applications","text":"Issue #304 If you do VoIP applications, especially with open sources like pjsip, you may encounter kamalio and rtpproxy to serve SIP requests. Due to limitation of NAT traversals, rtpproxy is needed to work around NAT. All SIP handshake requests go through a proxy server, but rtpproxy can also relay voice, video or any RTP stream of data. When I played with rtpproxy, it was before version 2.0 and I need to handle IP handover. This refers to the scenario when user switches between different network, for example from Wifi to 4G and they get new IP. Normally this means ending in the SIP call, but the expectation is that we can retry and continue the call if possible for users. That‚Äôs why I forked rtpproxy and add IP handover support. You can check the GitHub repo at rtpproxy. Use src_cnt to track the number of consecutive packets from different address. When this number exceeds THRESHOLD (10 for RTP and 2 for RTCP), I switch to this new address This way Client can ALWAYS change IP when he switches from 3G to Wifi, or from this Wifi hotspot to another There‚Äôs no chance for attack, unless attacker sends &gt; 10 (RTP THRESHOLD) packets in 20ms (supposed my client sends packets every 20ms) This idea is borrowed from http://www.pjsip.org/pjmedia/docs/html/group__PJMEDIA__CONFIG.htm There is a macro PJMEDIA_RTP_NAT_PROBATION_CNT. Basically, it is ‚ÄúSee if source address of RTP packet is different than the configured address, and switch RTP remote address to source packet address after several consecutive packets have been received.‚Äù Mobile clients now change IP frequently, from these hotspots to those. So if rtpproxy can support this feature, it would be nicer. Take a look at https://github.com/onmyway133/rtpproxy/blob/master/rtpp_session.h // IP Handover Count how many consecutive different packets are received, 0 is for callee, 1 is for caller unsigned int src_count[2];And how it actions in https://github.com/onmyway133/rtpproxy/blob/master/main.c static void rxmit_packets(struct cfg *cf, struct rtpp_session *sp, int ridx, double dtime) { int ndrain, i, port; struct rtp_packet *packet = NULL; /* Repeat since we may have several packets queued on the same socket */ for (ndrain = 0; ndrain &lt; 5; ndrain++) { if (packet != NULL) rtp_packet_free(packet); packet = rtp_recv(sp-&gt;fds[ridx]); if (packet == NULL) break; packet-&gt;laddr = sp-&gt;laddr[ridx]; packet-&gt;rport = sp-&gt;ports[ridx]; packet-&gt;rtime = dtime; i = 0; // IP Handover do not need canupdate // Use src_count if (sp-&gt;addr[ridx] != NULL) { /* Check that the packet is authentic, drop if it isn&apos;t */ if (sp-&gt;asymmetric[ridx] == 0) { /* if (memcmp(sp-&gt;addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen) != 0) { if (sp-&gt;canupdate[ridx] == 0) { // // Continue, since there could be good packets in // queue. // continue; } // Signal that an address has to be updated rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover Set i 1st ridx %d&quot;,ridx); i = 1; } else if (sp-&gt;canupdate[ridx] != 0 &amp;&amp; sp-&gt;last_update[ridx] != 0 &amp;&amp; dtime - sp-&gt;last_update[ridx] &gt; UPDATE_WINDOW) { sp-&gt;canupdate[ridx] = 0; rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover Set canupdate to 0 1st ridx %d&quot;,ridx); } */ if (memcmp(sp-&gt;addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen) == 0) { sp-&gt;src_count[ridx] = 0; } else { sp-&gt;src_count[ridx]++; // IP Handover RTCP packet sends at larger interval, so must use smaller THRESHOLD // Check to see if port is odd or even if(sp-&gt;ports[ridx] % 2 == 0) { if(sp-&gt;src_count[ridx] &gt;= 10) { i = 1; } } else { if(sp-&gt;src_count[ridx] &gt;= 2) { i = 1; } } } } else { /* * For asymmetric clients don&apos;t check * source port since it may be different. */ rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover We are in asymmetric ridx %d&quot;,ridx); if (!ishostseq(sp-&gt;addr[ridx], sstosa(&amp;packet-&gt;raddr))) /* * Continue, since there could be good packets in * queue. */ continue; } sp-&gt;pcount[ridx]++; } else { sp-&gt;pcount[ridx]++; sp-&gt;addr[ridx] = malloc(packet-&gt;rlen); if (sp-&gt;addr[ridx] == NULL) { sp-&gt;pcount[3]++; rtpp_log_write(RTPP_LOG_ERR, sp-&gt;log, &quot;can&apos;t allocate memory for remote address - &quot; &quot;removing session&quot;); remove_session(cf, GET_RTP(sp)); /* Break, sp is invalid now */ break; } /* Signal that an address have to be updated. */ rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover Set i 2nd ridx %d&quot;,ridx); i = 1; } /* * Update recorded address if it&apos;s necessary. Set &quot;untrusted address&quot; * flag in the session state, so that possible future address updates * from that client won&apos;t get address changed immediately to some * bogus one. */ if (i != 0) { sp-&gt;untrusted_addr[ridx] = 1; memcpy(sp-&gt;addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen); // IP Handover Do not use canupdate // After update, reset src_count /* if (sp-&gt;prev_addr[ridx] == NULL || memcmp(sp-&gt;prev_addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen) != 0) { sp-&gt;canupdate[ridx] = 0; if(sp-&gt;prev_addr[ridx] == NULL) { rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover prev_addr NULL ridx %d&quot;,ridx); } rtpp_log_write(RTPP_LOG_ERR, cf-&gt;glog, &quot;IP Handover Set canupdate to 0 2nd ridx %d&quot;,ridx); } */ sp-&gt;src_count[ridx] = 0; port = ntohs(satosin(&amp;packet-&gt;raddr)-&gt;sin_port); rtpp_log_write(RTPP_LOG_INFO, sp-&gt;log, &quot;%s&apos;s address filled in: %s:%d (%s)&quot;, (ridx == 0) ? &quot;callee&quot; : &quot;caller&quot;, addr2char(sstosa(&amp;packet-&gt;raddr)), port, (sp-&gt;rtp == NULL) ? &quot;RTP&quot; : &quot;RTCP&quot;); /* * Check if we have updated RTP while RTCP is still * empty or contains address that differs from one we * used when updating RTP. Try to guess RTCP if so, * should be handy for non-NAT&apos;ed clients, and some * NATed as well. */ if (sp-&gt;rtcp != NULL &amp;&amp; (sp-&gt;rtcp-&gt;addr[ridx] == NULL || !ishostseq(sp-&gt;rtcp-&gt;addr[ridx], sstosa(&amp;packet-&gt;raddr)))) { if (sp-&gt;rtcp-&gt;addr[ridx] == NULL) { sp-&gt;rtcp-&gt;addr[ridx] = malloc(packet-&gt;rlen); if (sp-&gt;rtcp-&gt;addr[ridx] == NULL) { sp-&gt;pcount[3]++; rtpp_log_write(RTPP_LOG_ERR, sp-&gt;log, &quot;can&apos;t allocate memory for remote address - &quot; &quot;removing session&quot;); remove_session(cf, sp); /* Break, sp is invalid now */ break; } } memcpy(sp-&gt;rtcp-&gt;addr[ridx], &amp;packet-&gt;raddr, packet-&gt;rlen); satosin(sp-&gt;rtcp-&gt;addr[ridx])-&gt;sin_port = htons(port + 1); /* Use guessed value as the only true one for asymmetric clients */ sp-&gt;rtcp-&gt;canupdate[ridx] = NOT(sp-&gt;rtcp-&gt;asymmetric[ridx]); rtpp_log_write(RTPP_LOG_INFO, sp-&gt;log, &quot;guessing RTCP port &quot; &quot;for %s to be %d&quot;, (ridx == 0) ? &quot;callee&quot; : &quot;caller&quot;, port + 1); } } if (sp-&gt;resizers[ridx].output_nsamples &gt; 0) rtp_resizer_enqueue(&amp;sp-&gt;resizers[ridx], &amp;packet); if (packet != NULL) send_packet(cf, sp, ridx, packet); } if (packet != NULL) rtp_packet_free(packet); }Here are some useful resources that I read http://stackoverflow.com/questions/18200089/how-does-rtpproxy-handle-handover http://lists.sip-router.org/pipermail/sr-users/2008-March/062795.html http://sourceforge.net/p/sippy/rtpproxy/ci/c71201d897ee7c5620d88bb7d56412cd9dc3362a/tree//main.c?diff=5d030295ce90f2f6ff292b0d65bae1d4318db02a","link":"/blog/Support-IP-handover-in-rtpproxy-for-VoIP-applications/"},{"title":"Useful git commands for everyday use!","text":"Issue #239 Original post https://medium.com/flawless-app-stories/useful-git-commands-for-everyday-use-e1a4de64037d Do you know that questions about git get the most views on StackOverflow? I‚Äôve searched a lot on Google how to execute certain actions with git, and this actually slowed me down a lot. There are some actions that we tend to use a lot, so it‚Äôs good to learn them. Here are my favorites, learning from friends and internet, hope you find them useful. Before we begin, you should run git ‚Äìversion to check your current git version, mine is 2.12.2 as in macOS High Sierra. Here is the official git documentation, you can read details about git commands, parameters and new releases of git. Useful commandsDiff12git diff feature/my_branch develop &gt; file.diffgit apply file.diff üîç StatusCheck the status of working directory and staging area: git statusShow changes between HEAD and working directory: git diffShow the list of commits in one line format: git log --onelineShow commits that make add or remove a certain string: git log -S &apos;LoginViewController&apos;Search commits that contain a log message: git log ‚Äî all ‚Äî grep=‚Äôday of week‚Äôüîç TagList all tags: git tagTag a commit: git tag -a 1.4 -m &quot;my version 1.4&quot;Delete remote tags: git push --delete origin tagname git push origin :tagnamePush tag to remote: git push origin tagnameRename tag: git tag new old git tag -d old git push origin :refs/tags/old git push --tagsMove tag from one commit to another commit: git push origin :refs/tags/&lt;tagname&gt; git tag -fa tagname git push origin master --tagsüîç RemoteList all remote: git remoteRename remote: git remote rename old newRemove stale remote tracking branches: git remote prune originüîç BranchList all branches: git branchCreate the branch on your local machine and switch in this branch: git checkout -b branch_nameCreate branch from commit: git branch branch_name sha1_of_commitPush the branch to remote: git push origin branch_nameRename other branch: git branch -m old newRename current branch: git branch -m newRename remote branch: git branch -m old new # Rename branch locally git push origin :old # Delete the old branch git push --set-upstream origin new # Push the new branch, set local branch to track the new remoteDelete a branch: git branch -D the_local_branch git push origin :the_remote_branchDelete all local branches but master git branch | grep -v &quot;master&quot; | xargs git branch -Düîç CommitUndo last commit: git reset --hard HEAD~1Squash last n commits into one commit: git rebase -i HEAD~5 git reset --soft HEAD~5 git add . git commit -m &quot;Update&quot; git push -f origin masterMove last commits into new branch: git branch newbranch git reset --hard HEAD~3 # Go back 3 commits. You *will* lose uncommitted work.*1 git checkout newbranchMake changes to older commit 1234git rebase -i HEAD^^^// change from pick to edit, then :wqgit add .git rebase --continue üîç Cherry PickAdd some commits to the top of the current branch: git cherry-pick hash_commit_A hash_commit_Büîç ReflogShow reflog: git reflogGet commit: git reset --hard 0254ea7 git cherry-pick 12944d8üîç RevertRevert the previous commit: git revert HEAD git commitRevert the changes from previous 3 commits without making commit: git revert --no-commit HEAD~3..üîç AmendAmend previous commit: git commit --amend git commit --amend --no-edit git commit --amend -m &quot;New commit message&quot;Changing git commit message after push: git commit --amend -m &quot;New commit message&quot; git push --force &lt;repository&gt; &lt;branch&gt;üîç CheckoutCheckout a tag: git checkout tagname git checkout -b newbranchname tagnameCheckout a branch: git checkout destination_branchUse -m if there is merge conflict: git checkout -m master // from feature branch to masterCheckout a commit: git checkout commit_hash git checkout -b newbranchname HEAD~4 git checkout -b newbranchname commit_hash git checkout commit_hash fileCheckout a file: git checkout c5f567 -- Relative/Path/To/Fileüîç StashSave a change to stash: git stash save &quot;stash name&quot; git stashList all stashes: git stash listApply a stash: git stash pop git stash apply git stash apply stash@{2}üîç RebaseRebase the current branch onto master: git rebase master // rebase the current branch onto masterContinue rebase: git rebase --continueAbort rebase: git rebase --abortüîç .gitignoreUn-track files that have just been declared in .gitignore: git rm -r --cached . git add . git commit -am &quot;Remove ignored files&quot;üîç IndexRemove untracked files: git cleanRemove file from index: git reset fileReset the index to match the most recent commit: git resetReset the index and the working directory to match the most recent commit: git reset --hardüîç MiscGet their changes during git rebase: git checkout --ours foo/bar.java git add foo/bar.javaGet their changes during git merge: git pull -X theirs git checkout --theirs path/to/the/conflicted_file.php git checkout --theirs . git add . git checkout branchA git merge -X theirs branchBMerge commits from master into feature branch: git checkout feature1 git merge --no-ff masterFind bug in commit history in a binary search tree style: git bisect start git bisect good git bisect badGit aliasIf there are commands that you use a lot, then consider using git alias. This is how to make alias for git status, then you can just type git st: git config ‚Äî global alias.st statusAlias configurations are stored in .gitconfig file, you can learn some cool aliases from thoughtbot and mathiasbynens. Delete all local branches except master1git config --global alias.dlb '!git branch | grep -v &quot;master&quot; | xargs git branch -D' Prune upstream branches1git config --global alias.pu 'remote prune upstream' GUI clientsDoing things in command line is cool and faster. However for viewing branches and commits, I find using a GUI client more visualizing and comfortable. You can see a list of all GUI clients here, I myself use SourceTree. Check before you commitWe usually have some experiment code that we don‚Äôt want they to step into our commit. I usually mark my experiment with // but sometimes forget to unstage that. Starting with 2.9, Git has improvement on its commit hook which makes it globally using hooksPath. Firstly we nee to create a file called pre-commit, and place it into, for example, /Users/khoa/hooks: 1234567891011121314151617181920212223242526#!/bin/sh# https://appventure.me/2016/04/04/prevent-accidental-test-code-commits/if git rev-parse --verify HEAD &gt;/dev/null 2&gt;&amp;1then against=HEADelse # Initial commit: diff against an empty tree object against=4b825dc642cb6eb9a060e54bf8d69288fbee4904fi# The special marker tag to mark things which we still need to changemarker=\"&lt;TEST&gt;\"# Redirect output to stderr.exec 1&gt;&amp;2if test $(git diff --cached -z $against | grep $marker | wc -c) != 0 then cat &lt;&lt;\\EOF Error: Still has invalid debug markers in code:EOF echo `git diff --cached -z $against -G $marker` exit 1fi In your project, run git config core.hooksPath /Users/khoa/hooks. Whenever you commit a file with that pattern, it won‚Äôt let you commit. For how to make this work in SourceTree, check:SourceTree and pre commit hookPre-commit file works perfectly in terminal, but SourceTree seems to ignore it. I use both terminal and SourceTree, as‚Ä¶medium.com Where to go from hereThis is just scratching the surface of what git can do, if you want to learn more, here are some links to get started. Atlassian Git Tutorial: overview of how to set up a repository (repo) under Git version control git-cheat-sheet: Git cheat sheet saves you from learning all the commands by heart. Learn Enough Git to Be Dangerous Git Workflows for Pros: A Good Git Guide Git from the inside out: The essay focuses on the graph structure that underpins Git git-game: terminal game to test git skills Introduction to Git ‚Äî talk by Scott Chacon Git Tutorial ‚Äî Git Fu With The Command Line Git Immersion: The surest path to mastering Git is to immerse oneself in its utilities and operations, to experience it first-hand git-flight-rules Flight rules for git gitflow Git extensions to provide high-level repository operations for Vincent Driessen‚Äôs branching model diff-so-fancy Good-lookin‚Äô diffs with diff-highlight and more github-cheat-sheet A list of cool features of Git and GitHub git tips Most commonly used git tips and tricks Little Things I Like to Do with Git","link":"/blog/Useful-git-commands-for-everyday-use!/"},{"title":"What is create-react-native-app","text":"Issue #279 Original post https://medium.com/fantageek/what-is-create-react-native-app-9f3bc5a6c2a3 As someone who comes to React Native from iOS and Android background, I like React and Javascript as much as I like Swift and Kotlin. React Native is a cool concept, but things that sound good in theory may not work well in practice. Another layer of abstractionUp until now, I still don‚Äôt get why big companies choose React Native over native ones, as in the end what we do is to deliver good experience to the end user, not the easy development for developers. I have seen companies saying goodbye to React Native and people saying that React Native is just React philosophy learn once, write anywhere, that they choose React Native mainly for the React style, not for cross platform development. But the fact can‚Äôt be denied that people choose React Native mostly for cross platform development. Write once, deploy many places is so compelling. We still of course need to tweak a bit for each platform, but most of the code is reuse. I have to confess that I myself spend less time developing than digging into compiling and bundling issues. Nothing comes for free. To be successful with React Native, not only we need strong understanding on both iOS and Android, but also ready to step into solving issues. We can‚Äôt just open issues, pray and wait and hope someone solves it. We can‚Äôt just use other dependencies blindly and call it a day. A trivial bug can be super hard to fix in React Native, and our projects can‚Äôt wait. Big companies have, of course, enough resource to solve issues, but for small teams, React Native is a trade off decision to consider. A wrapper for a wrapperEnough about that. Let‚Äôs go to official React Native getting started guide. It recommend create-react-native-app. As someone who made electron.js apps and used create-react-app, I choose create-react-native-app right away, as I think it is the equivalent in terms of creating React Native apps. I know there is react-native init and though that it must have some problems, otherwise people don‚Äôt introduce create-react-native-app. After playing with create-react-native-app and eject, and after that read carefully through its caveats, I know it‚Äôs time to use just react-native init . In the end I just need a quick way to bootstrap React Native app with enough tooling (Babel, JSX, Hot reloading), however create-react-native-app is just a limited experience in Expo with opinionated services like Expo push notification docs.expo.io/versions/latest/guides/push-notifications.html and connectivity to Google Cloud Platform and AWS. I know every thing has its use case, but in this case it‚Äôs not the tool for me. Dependencies are the root of all evils, and React Native already has a lot, I don‚Äôt want more unnecessary things. The concept of Expo is actually nice, in that it allows newbie to step into React Native fast with recommended tooling already set up, and the ability to reject later. It also useful in sharing Snack to help reproduce issues. But the name of the repo create-react-native-app is a bit misleading. Maybe it‚Äôs just me, or ‚Ä¶ dev.to/kylessg/ive-released-over-100-apps-in-react-native-since-2015-ask-me-anything-1m9g No, I would never use Expo for a serious project. I imagine what ends up happening in most projects is they reach a point where they have to ultimately eject the app (e.g. needing a native module) which sounds very painful. dev.to/gaserd/why-i-do-not-use-expo-for-react-native-dont-panic-1bp If you use EXPO, you use wrapper-wrapper. hackernoon.com/understanding-expo-for-react-native-7bf23054bbcd Expo is a great tool for getting started quickly with React Native. However, it‚Äôs not always something that can get you to the finish line. From what I‚Äôve seen, the Expo team is making a lot of great decisions with their product roadmap. But their rapid pace of development has often led to bugs in new features. docs.expo.io/versions/latest/introduction/why-not-expo JS and assets managed by Expo require connectivity to Google Cloud Platform and AWS #516 http://www.albertgao.xyz/2018/05/30/24-tips-for-react-native-you-probably-want-to-know If you are coming from web world, you need to know that create-react-native-app is not the create-react-app equivalentBut if you want more control over your project, something like tweaking your react native Android and iOS project, I highly suggest you use the official react-native-cli. Still, one simple command, react-native init ProjectName, and you are good to go. medium.com/@paulsc/react-native-first-impressions-expo-vs-native-9565cce44c92 I wish I would have used ‚ÄúNative‚Äù from the get go, instead I wasted quite a bit of time with ExpoMaybe the biggest one for me is that the whole thing feels like adding another layer of indirection and complexity to an already complicated stackI wish Expo would get removed from the react-native Getting Started guide to avoid confusing new arrivals levelup.gitconnected.com/how-i-ditched-expo-for-pure-react-native-fc0375361307 The Expo dev team did a lot of good stuff there, and they are all doing it for free, so I definitely want to thank all of them for providing a smoother entrance to this world. If they ever manage to solve this issue of custom native code somehow, it may become my platform of choice again. https://medium.com/@aswinmohanme/how-i-reduced-the-size-of-my-react-native-app-by-86-27be72bba640 I love everything about Expo except the size of the binaries. Each binary weighs around 25 MB regardless of your app.So the first thing I did was to migrate my existing Expo app to React Native. https://medium.com/react-native-training/best-practices-for-creating-react-native-apps-part-1-66311c746df3 If you are new to React Native and you think this is the ‚Äúmust‚Äù way to go. Check if it meets your needs first.If you are planning to use third party RN packages that have custom native modules. Expo does not support this functionality and in that case, you will have to eject Expo-Kit. In my opinion, if you are going to eject any kit, don‚Äôt use it in the first place. It will probably make things harder than if you hadn‚Äôt used the kit at all.","link":"/blog/What-is-create-react-native-app/"},{"title":"How to structure your project and manage static resources in React Native","text":"Issue #256 Original post https://medium.freecodecamp.org/how-to-structure-your-project-and-manage-static-resources-in-react-native-6f4cfc947d92 React and React Native are just frameworks, and they do not dictate how we should structure our projects. It all depends on your personal taste and the project you‚Äôre working on. In this post, we will go through how to structure a project and how to manage local assets. This of course is not written in stone, and you are free to apply only the pieces that suit you. Hope you learn something. For a project bootstrapped with react-native init , we get only the basic structure. There is the ios folder for Xcode projects, the android folder for Android projects, and an index.js and an App.js file for the React Native starting point. ios/ android/ index.js App.jsAs someone who has worked with native on both Windows Phone, iOS and Android, I find that structuring a project all comes down to separating files by type or feature type vs featureSeparating by type means that we organise files by their type. If it is a component, there are container and presentational files. If it is Redux, there are action, reducer, and store files. If it is view, there are JavaScript, HTML, and CSS files. Group by typeredux actions store reducers components container presentational view javascript html cssThis way, we can see the type of each file, and easily run a script toward a certain file type. This is general for all projects, but it does not answer the question ‚Äúwhat is this project about?‚Äù Is it news application? Is it a loyalty app? Is it about nutrition tracking? Organising files by type is for a machine, not for a human. Many times we work on a feature, and finding files to fix in multiple directories is a hassle. It‚Äôs also a pain if we plan to make a framework out of our project, as files are spread across many places. Group by featureA more reasonable solution is to organise files by feature. Files related to a feature should be placed together. And test files should stay close to the source files. Check out this article to learn more. A feature can be related to login, sign up, onboarding, or a user‚Äôs profile. A feature can contain sub-features as long as they belong to the same flow. If we wanted to move the sub feature around, it would be easy, as all related files are already grouped together. My typical project structure based on features looks like this: index.js App.js ios/ android/ src screens login LoginScreen.js LoginNavigator.js onboarding OnboardingNavigator welcome WelcomeScreen.js term TermScreen.js notification NotificationScreen.js main MainNavigator.js news NewsScreen.js profile ProfileScreen.js search SearchScreen.js library package.json components ImageButton.js RoundImage.js utils moveToBottom.js safeArea.js networking API.js Auth.js res package.json strings.js colors.js palette.js fonts.js images.js images logo@2x.png logo@3x.png button@2x.png button@3x.png scripts images.js clear.jsBesides the traditional files App.js and index.js and the ios1 and android folders, I put all the source files inside the src folder. Inside src I have res for resources, library for common files used across features, and screens for a screen of content. As few dependencies as possibleSince React Native is heavily dependent on tons of dependencies, I try to be pretty aware when adding more. In my project I use just react-navigation for navigation. And I‚Äôm not a fan of redux as it adds unneeded complexity. Only add a dependency when you really need it, otherwise you are just setting yourself up for more trouble than value. The thing I like about React is the components. A component is where we define view, style and behavior. React has inline style ‚Äî it‚Äôs like using JavaScript to define script, HTML and CSS. This fits the feature approach we are aiming for. That‚Äôs why I don‚Äôt use styled-components. Since styles are just JavaScript objects, we can just share comment styles in library . srcI like Android a lot, so I name src and res to match its folder conventions. react-native init sets up babel for us. But for a typical JavaScript project, it‚Äôs good to organise files in the src folder. In my electron.js application IconGenerator, I put the source files inside the src folder. This not only helps in terms of organising, but also helps babel transpile the entire folder at once. Just a command and I have the files in src transpiled to dist in a blink. babel ./src --out-dir ./dist --copy-filesScreenReact is based around components. Yup. There are container and presentational components, but we can compose components to build more complex components. They usually end in showing in the full screen. It is called Page in Windows Phone, ViewController in iOS and Activity in Android. The React Native guide mentions screen very often as something that covers the entire space: Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator. index.js or not?Each screen is considered the entry point for each feature. You can rename the LoginScreen.js to index.js by leveraging the Node module feature: Modules don‚Äôt have to be files. We can also create a find-me folder under node_modules and place an index.js file in there. The same require(‚Äòfind-me‚Äô) line will use that folder‚Äôs index.js file So instead of import LoginScreen from ‚Äò./screens/LoginScreen‚Äô , we can just do import LoginScreen from ‚Äò./screens‚Äô. Using index.js results in encapsulation and provides a public interface for the feature. This is all personal taste. I myself prefer explicit naming for a file, hence the name LoginScreen.js. Navigatorreact-navigation seems to be the most popular choice for handling navigation in a React Native app. For a feature like onboarding, there are probably many screens managed by a stack navigation, so there is OnboardingNavigator . You can think of Navigator as something that groups sub screens or features. Since we group by feature, it‚Äôs reasonable to place Navigator inside the feature folder. It basically looks like this: import { createStackNavigator } from &apos;react-navigation&apos; import Welcome from &apos;./Welcome&apos; import Term from &apos;./Term&apos; const routeConfig = { Welcome: { screen: Welcome }, Term: { screen: Term } } const navigatorConfig = { navigationOptions: { header: null } } export default OnboardingNavigator = createStackNavigator(routeConfig, navigatorConfig)libraryThis is the most controversial part of structuring a project. If you don‚Äôt like the name library, you can name it utilities, common, citadel , whatever‚Ä¶ This is not meant for homeless files, but it is where we place common utilities and components that are used by many features. Things like atomic components, wrappers, quick fixes function, networking stuff, and login info are used a lot, and it‚Äôs hard to move them to a specific feature folder. Sometimes we just need to be practical and get the work done. In React Native, we often need to implement a button with an image background in many screens. Here is a simple one that stays inside library/components/ImageButton.js . The components folder is for reusable components, sometimes called atomic components. According to React naming conventions, the first letter should be uppercase. 1234567891011121314151617181920212223242526272829303132333435363738import React from 'react'import { TouchableOpacity, View, Image, Text, StyleSheet } from 'react-native'import images from 'res/images'import colors from 'res/colors'export default class ImageButton extends React.Component { render() { return ( &lt;TouchableOpacity style={styles.touchable} onPress={this.props.onPress}&gt; &lt;View style={styles.view}&gt; &lt;Text style={styles.text}&gt;{this.props.title}&lt;/Text&gt; &lt;/View&gt; &lt;Image source={images.button} style={styles.image} /&gt; &lt;/TouchableOpacity&gt; ) }}const styles = StyleSheet.create({ view: { position: 'absolute', backgroundColor: 'transparent' }, image: { }, touchable: { alignItems: 'center', justifyContent: 'center' }, text: { color: colors.button, fontSize: 18, textAlign: 'center' }}) And if we want to place the button at the bottom, we use a utility function to prevent code duplication. Here is library/utils/moveToBottom.js: import React from &apos;react&apos; import { View, StyleSheet } from &apos;react-native&apos; function moveToBottom(component) { return ( &lt;View style={styles.container}&gt; {component} &lt;/View&gt; ) } const styles = StyleSheet.create({ container: { flex: 1, justifyContent: &apos;flex-end&apos;, marginBottom: 36 } }) export default moveToBottomUse package.json to avoid relative pathThen somewhere in the src/screens/onboarding/term/Term.js , we can import by using relative paths: import moveToBottom from &apos;../../../../library/utils/move&apos; import ImageButton from &apos;../../../../library/components/ImageButton&apos;This is a big red flag in my eyes. It‚Äôs error prone, as we need to calculate how many .. we need to perform. And if we move feature around, all of the paths need to be recalculated. Since library is meant to be used many places, it‚Äôs good to reference it as an absolute path. In JavaScript there are usually 1000 libraries to a single problem. A quick search on Google reveals tons of libraries to tackle this issue. But we don‚Äôt need another dependency as this is extremely easy to fix. The solution is to turn library into a module so node can find it. Adding package.json to any folder makes it into a Node module . Add package.json inside the library folder with this simple content: { &quot;name&quot;: &quot;library&quot;, &quot;version&quot;: &quot;0.0.1&quot; }Now in Term.js we can easily import things from library because it is now a module: 1234567891011121314151617181920212223242526272829303132333435import React from 'react'import { View, StyleSheet, Image, Text, Button } from 'react-native'import strings from 'res/strings'import palette from 'res/palette'import images from 'res/images'import ImageButton from 'library/components/ImageButton'import moveToBottom from 'library/utils/moveToBottom'export default class Term extends React.Component { render() { return ( &lt;View style={styles.container}&gt; &lt;Text style={styles.heading}&gt;{strings.onboarding.term.heading.toUpperCase()}&lt;/Text&gt; { moveToBottom( &lt;ImageButton style={styles.button} title={strings.onboarding.term.button.toUpperCase()} /&gt; ) } &lt;/View&gt; ) }}const styles = StyleSheet.create({ container: { flex: 1, alignItems: 'center' }, heading: { ...palette.heading, ...{ marginTop: 72 } }}) resYou may wonder what res/colors, res/strings , res/images and res/fonts are in the above examples. Well, for front end projects, we usually have components and style them using fonts, localised strings, colors, images and styles. JavaScript is a very dynamic language, and it‚Äôs easy to use stringly types everywhere. We could have a bunch of #00B75D color across many files, or Fira as a fontFamily in many Text components. This is error-prone and hard to refactor. Let‚Äôs encapsulate resource usage inside the res folder with safer objects. They look like the examples below: res/colors const colors = { title: &apos;#00B75D&apos;, text: &apos;#0C222B&apos;, button: &apos;#036675&apos; } export default colorsres/strings const strings = { onboarding: { welcome: { heading: &apos;Welcome&apos;, text1: &quot;What you don&apos;t know is what you haven&apos;t learn&quot;, text2: &apos;Visit my GitHub at [https://github.com/onmyway133&apos;](https://github.com/onmyway133&apos;), button: &apos;Log in&apos; }, term: { heading: &apos;Terms and conditions&apos;, button: &apos;Read&apos; } } } export default stringsres/fonts const fonts = { title: &apos;Arial&apos;, text: &apos;SanFrancisco&apos;, code: &apos;Fira&apos; } export default fontsres/images const images = { button: require(&apos;./images/button.png&apos;), logo: require(&apos;./images/logo.png&apos;), placeholder: require(&apos;./images/placeholder.png&apos;) } export default imagesLike library , res files can be access from anywhere, so let‚Äôs make it a module . Add package.json to the res folder: { &quot;name&quot;: &quot;res&quot;, &quot;version&quot;: &quot;0.0.1&quot; }so we can access resource files like normal modules: import strings from &apos;res/strings&apos; import palette from &apos;res/palette&apos; import images from &apos;res/images&apos;Group colors, images, fonts with paletteThe design of the app should be consistent. Certain elements should have the same look and feel so they don‚Äôt confuse the user. For example, the heading Text should use one color, font, and font size. The Image component should use the same placeholder image. In React Native, we already use the name styles with const styles = StyleSheet.create({}) so let‚Äôs use the name palette. Below is my simple palette. It defines common styles for heading and Text: res/paletteimport colors from &apos;./colors&apos; const palette = { heading: { color: colors.title, fontSize: 20, textAlign: &apos;center&apos; }, text: { color: colors.text, fontSize: 17, textAlign: &apos;center&apos; } } export default paletteAnd then we can use them in our screen: const styles = StyleSheet.create({ container: { flex: 1, alignItems: &apos;center&apos; }, heading: {...palette.heading, ...{ marginTop: 72 }} })Here we use the object spread operator to merge palette.heading and our custom style object. This means that we use the styles from palette.heading but also specify more properties. If we were to reskin the app for multiple brands, we could have multiple palettes. This is a really powerful pattern. Generate imagesYou can see that in /src/res/images.js we have properties for each image in the src/res/images folder: const images = { button: require(&apos;./images/button.png&apos;), logo: require(&apos;./images/logo.png&apos;), placeholder: require(&apos;./images/placeholder.png&apos;) } export default imagesThis is tedious to do manually, and we have to update if there‚Äôs changes in image naming convention. Instead, we can add a script to generate the images.js based on the images we have. Add a file at the root of the project /scripts/images.js: 123456789101112131415161718192021222324252627282930313233const fs = require('fs')const imageFileNames = () =&gt; { const array = fs .readdirSync('src/res/images') .filter((file) =&gt; { return file.endsWith('.png') }) .map((file) =&gt; { return file.replace('[@2x](http://twitter.com/2x).png', '').replace('[@3x](http://twitter.com/3x).png', '') }) return Array.from(new Set(array))}const generate = () =&gt; { let properties = imageFileNames() .map((name) =&gt; { return `${name}: require('./images/${name}.png')` }) .join(',\\n ') const string = `const images = { ${properties} } export default images ` fs.writeFileSync('src/res/images.js', string, 'utf8')}generate() The cool thing about Node is that we have access to the fs module, which is really good at file processing. Here we simply traverse through images, and update /src/res/images.js accordingly. Whenever we add or change images, we can run: node scripts/images.jsAnd we can also declare the script inside our main package.json : &quot;scripts&quot;: { &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot;, &quot;lint&quot;: &quot;eslint *.js **/*.js&quot;, &quot;images&quot;: &quot;node scripts/images.js&quot; }Now we can just run npm run images and we get an up-to-date images.js resource file. How about custom fontsReact Native has some custom fonts that may be good enough for your projects. You can also use custom fonts. One thing to note is that Android uses the name of the font file, but iOS uses the full name. You can see the full name in Font Book app, or by inspecting in running app for (NSString* family in [UIFont familyNames]) { NSLog(@&quot;%@&quot;, family); for (NSString* name in [UIFont fontNamesForFamilyName: family]) { NSLog(@&quot;Family name: %@&quot;, name); } }For custom fonts to be registered in iOS, we need to declare UIAppFonts in Info.plist using the file name of the fonts, and for Android, the fonts need to be placed at app/src/main/assets/fonts . It is good practice to name the font file the same as full name. React Native is said to dynamically load custom fonts, but in case you get ‚ÄúUnrecognized font family‚Äù, then simply add those fonts to target within Xcode. Doing this by hand takes time, luckily we have rnpm that can help. First add all the fonts inside res/fonts folder. Then simply declare rnpm in package.json and run react-native link . This should declare UIAppFonts in iOS and move all the fonts into app/src/main/assets/fonts for Android. &quot;rnpm&quot;: { &quot;assets&quot;: [ &quot;./src/res/fonts/&quot; ] }Accessing fonts by name is error prone, we can create a script similar to what we have done with images to generate a safer accession. Add fonts.js to our scripts folder 12345678910111213141516171819202122232425262728293031const fs = require('fs')const fontFileNames = () =&gt; { const array = fs .readdirSync('src/res/fonts') .map((file) =&gt; { return file.replace('.ttf', '') }) return Array.from(new Set(array))}const generate = () =&gt; { const properties = fontFileNames() .map((name) =&gt; { const key = name.replace(/\\s/g, '') return `${key}: '${name}'` }) .join(',\\n ') const string = `const fonts = { ${properties} } export default fonts ` fs.writeFileSync('src/res/fonts.js', string, 'utf8')}generate() Now you can use custom font via R namespace. 1234567import R from 'res/R'const styles = StyleSheet.create({ text: { fontFamily: R.fonts.FireCodeNormal }}) The R namespaceThis step depends on personal taste, but I find it more organised if we introduce the R namespace, just like how Android does for assets with the generated R class. Once you externalize your app resources, you can access them using resource IDs that are generated in your project‚Äôs Rclass. This document shows you how to group your resources in your Android project and provide alternative resources for specific device configurations, and then access them from your app code or other XML files. This way, let‚Äôs make a file called R.js in src/res: import strings from &apos;./strings&apos; import images from &apos;./images&apos; import colors from &apos;./colors&apos; import palette from &apos;./palette&apos; const R = { strings, images, colors, palette } export default RAnd access it in the screen: 12345678910111213import R from 'res/R'render() { return ( &lt;SafeAreaView style={styles.container}&gt; &lt;Image style={styles.logo} source={R.images.logo} /&gt; &lt;Image style={styles.image} source={R.images.placeholder} /&gt; &lt;Text style={styles.title}&gt;{R.strings.onboarding.welcome.title.toUpperCase()}&lt;/Text&gt; )} Replace strings with R.strings, colors with R.colors, and images with R.images. With the R annotation, it is clear that we are accessing static assets from the app bundle. This also matches the Airbnb convention for singleton, as our R is now like a global constant. 23.8 Use PascalCase when you export a constructor / class / singleton / function library / bare object. const AirbnbStyleGuide = { es6: { }, } export default AirbnbStyleGuideWhere to go from hereIn this post, I‚Äôve shown you how I think you should structure folders and files in a React Native project. We‚Äôve also learned how to manage resources and access them in a safer manner. I hope you‚Äôve found it useful. Here are some more resources to explore further: Organizing a React Native Project Structuring projects and naming components in React Using index.js for Fun and Public Interfaces","link":"/blog/How-to-structure-your-project-and-manage-static-resources-in-React-Native/"},{"title":"How to use Stripe and Apple Pay in iOS","text":"Issue #219 iOS Integration Setting Up Apple Pay Requirements Apple Pay Show basic add card in iOS12345678910111213141516171819202122232425import UIKitimport Stripefinal class MainController: UIViewController { func showPayment() { let addCardViewController = STPAddCardViewController() addCardViewController.delegate = self let navigationController = UINavigationController(rootViewController: addCardViewController) present(navigationController, animated: true, completion: nil) }}extension MainController: STPAddCardViewControllerDelegate { func addCardViewControllerDidCancel(_ addCardViewController: STPAddCardViewController) { dismiss(animated: true, completion: nil) } func addCardViewController(_ addCardViewController: STPAddCardViewController, didCreateToken token: STPToken, completion: @escaping STPErrorBlock) { _ = token.tokenId completion(nil) dismiss(animated: true, completion: nil) }} Generate ephemeral keyhttps://stripe.com/docs/mobile/ios/standard#ephemeral-key In order for our prebuilt UI elements to function, you‚Äôll need to provide them with an ephemeral key, a short-lived API key with restricted API access. You can think of an ephemeral key as a session, authorizing the SDK to retrieve and update a specific Customer object for the duration of the session. Backend in Gohttps://github.com/stripe/stripe-go Need a secret key by going to Stripe dashboard -&gt; Developers -&gt; API keys -&gt; Secret key 1stripe.Key = &quot;sk_key&quot; Need customer id. We can manually create one in Stripe dashboard -&gt; Customers 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package mainimport ( \"net\" \"encoding/json\" \"fmt\" \"net/http\" \"github.com/stripe/stripe-go\" \"github.com/stripe/stripe-go/ephemeralkey\")func main() { stripe.Key = \"sk_test_mM2MkqO61n7vvbVRfeYmBgWm00Si2PtWab\" http.HandleFunc(\"/ephemeral_keys\", generateEphemeralKey) if err := http.ListenAndServe(\":8080\", nil); err != nil { panic(err) }}type EphemeralKeysRequest struct { ApiVersion string `json:\"api_version\"`}func generateEphemeralKey(w http.ResponseWriter, r *http.Request) { customerId := \"cus_Eys6aeP5xR89ab\" decoder := json.NewDecoder(r.Body) var t EphemeralKeysRequest err := decoder.Decode(&amp;t) if err != nil { panic(err) } stripeVersion := t.ApiVersion if stripeVersion == \"\" { log.Printf(\"Stripe-Version not found\\n\") w.WriteHeader(400) return } params := &amp;stripe.EphemeralKeyParams{ Customer: stripe.String(customerId), StripeVersion: stripe.String(stripeVersion), } key, err := ephemeralkey.New(params) if err != nil { log.Printf(\"Stripe bindings call failed, %v\\n\", err) w.WriteHeader(500) return } w.Write(key.RawJSON)} iOS clientNetworking client uses How to make simple networking client in Swift Need an object that conforms to STPCustomerEphemeralKeyProvider 123456789101112131415161718192021final class EphemeralKeyClient: NSObject, STPCustomerEphemeralKeyProvider { let client = NetworkClient(baseUrl: URL(string: \"http://localhost:8080\")!) func createCustomerKey(withAPIVersion apiVersion: String, completion: @escaping STPJSONResponseCompletionBlock) { var options = Options() options.httpMethod = .post options.path = \"ephemeral_keys\" options.parameters = [ \"api_version\": apiVersion ] client.makeJson(options: options, completion: { result in switch result { case .success(let json): completion(json, nil) case .failure(let error): completion(nil, error) } }) }} Setting up STPCustomerContext and STPPaymentContext 123456789101112131415161718192021final class MainController: UIViewController { let client = EphemeralKeyClient() let customerContext: STPCustomerContext let paymentContext: STPPaymentContext init() { self.customerContext = STPCustomerContext(keyProvider: client) self.paymentContext = STPPaymentContext(customerContext: customerContext) super.init(nibName: nil, bundle: nil) paymentContext.delegate = self paymentContext.hostViewController = self } required init?(coder aDecoder: NSCoder) { fatalError(\"init(coder:) has not been implemented\") } func start() { paymentContext.presentShippingViewController() }} Handle chargehttps://stripe.com/docs/charges Backend in GoIf we use stripe_id from card, which has the form of card_xxx, we need to include customer info If we use token, which has the form tok_xxx, then no need for customer info From STPPaymentResult When you‚Äôre using STPPaymentContext to request your user‚Äôs payment details, this is the object that will be returned to your application when they‚Äôve successfully made a payment. It currently just contains a source, but in the future will include any relevant metadata as well. You should pass source.stripeID to your server, and call the charge creation endpoint. This assumes you are charging a Customer, so you should specify the customer parameter to be that customer‚Äôs ID and the source parameter to the value returned here. For more information, see https://stripe.com/docs/api#create_charge 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package mainimport ( \"net\" \"encoding/json\" \"fmt\" \"net/http\" \"log\" \"os\" \"github.com/stripe/stripe-go/charge\")func main() { stripe.Key = \"sk_test_mM2MkqO61n7vvbVRfeYmBgWm00Si2PtWab\" http.HandleFunc(\"/request_charge\", handleCharge) if err := http.ListenAndServe(\":8080\", nil); err != nil { panic(err) }}var customerId = \"cus_Eys6aeP5xR89ab\"type PaymentResult struct { StripeId string `json:\"stripe_id\"`}func handleCharge(w http.ResponseWriter, r *http.Request) { decoder := json.NewDecoder(r.Body) var t PaymentResult err := decoder.Decode(&amp;t) if err != nil { panic(err) } params := &amp;stripe.ChargeParams{ Amount: stripe.Int64(150), Currency: stripe.String(string(stripe.CurrencyUSD)), Description: stripe.String(\"Charge from my Go backend\"), Customer: stripe.String(customerId), } params.SetSource(t.StripeId) ch, err := charge.New(params) if err != nil { fmt.Fprintf(w, \"Could not process payment: %v\", err) fmt.Println(ch) w.WriteHeader(400) } w.WriteHeader(200)} iOS client12345678910111213141516171819202122232425262728293031final class PaymentClient { let client = NetworkClient(baseUrl: URL(string: \"http://192.168.210.219:8080\")!) func requestCharge(source: STPSourceProtocol, completion: @escaping (Result&lt;(), Error&gt;) -&gt; Void) { var options = Options() options.httpMethod = .post options.path = \"request_charge\" options.parameters = [ \"stripe_id\": source.stripeID ] client.makeJson(options: options, completion: { result in completion(result.map({ _ in () })) }) }}paymentContext.requestPayment()extension MainController: STPPaymentContextDelegate { func paymentContext(_ paymentContext: STPPaymentContext, didCreatePaymentResult paymentResult: STPPaymentResult, completion: @escaping STPErrorBlock) { client.requestCharge(source: paymentResult.source, completion: { result in switch result { case .success: completion(nil) case .failure(let error): completion(error) } }) }} Token from cardUse STPAPIClient.shared().createToken to get token from card https://stripe.com/docs/mobile/ios/custom#collecting-card-details 123456789101112131415161718192021let cardParams = STPCardParams()cardParams.number = \"4242424242424242\"cardParams.expMonth = 10cardParams.expYear = 2021cardParams.cvc = \"123\"STPAPIClient.shared().createToken(withCard: cardParams) { (token: STPToken?, error: Error?) in guard let token = token, error == nil else { // Present error to user... return } submitTokenToBackend(token, completion: { (error: Error?) in if let error = error { // Present error to user... } else { // Continue with payment... } })} Payment options and shipping view controllersInstead of using paymentContext 12paymentContext.pushShippingViewController()paymentContext.pushPaymentOptionsViewController() We can use view controllers https://stripe.com/docs/mobile/ios/custom#stppaymentoptionsviewcontroller directly with STPPaymentOptionsViewController and STPShippingAddressViewController. Then implement STPPaymentOptionsViewControllerDelegate and STPShippingAddressViewControllerDelegate Register merchant Id and Apple Pay certificatehttps://stripe.com/docs/apple-pay/apps Get Certificate signing request file from Stripe https://dashboard.stripe.com/account/apple_pay We can‚Äôt register merchant id with Enterprise account Use Apple PayGo backendUse token 12345678910111213141516171819202122232425262728type ApplePayRequest struct { Token string `json:\"token\"`}func handleChargeUsingApplePay(w http.ResponseWriter, r *http.Request) { decoder := json.NewDecoder(r.Body) var t ApplePayRequest err := decoder.Decode(&amp;t) if err != nil { panic(err) } params := &amp;stripe.ChargeParams{ Amount: stripe.Int64(150), Currency: stripe.String(string(stripe.CurrencyUSD)), Description: stripe.String(\"Charge from my Go backend for Apple Pay\"), } params.SetSource(t.Token) ch, err := charge.New(params) if err != nil { fmt.Fprintf(w, \"Could not process payment: %v\", err) fmt.Println(ch) w.WriteHeader(400) } w.WriteHeader(200)} iOS clientUpdate client to send STPToken 1234567891011121314151617181920212223242526final class PaymentClient: NSObject { let client = NetworkClient(baseUrl: URL(string: \"localhost:8080\")!) func requestCharge(token: STPToken, completion: @escaping (Result&lt;(), Error&gt;) -&gt; Void) { var options = Options() options.httpMethod = .post options.path = \"request_charge_apple_pay\" options.parameters = [ \"token\": token.tokenId ] client.make(options: options, completion: { result in completion(result.map({ _ in () })) }) } func useApplePay(payment: PKPayment, completion: @escaping (Result&lt;(), Error&gt;) -&gt; Void) { STPAPIClient.shared().createToken(with: payment, completion: { (token: STPToken?, error: Error?) in guard let token = token, error == nil else { return } self.requestCharge(token: token, completion: completion) }) }} Use PKPaymentAuthorizationViewController, not PKPaymentAuthorizationController https://developer.apple.com/documentation/passkit/pkpaymentauthorizationcontroller The PKPaymentAuthorizationController class performs the same role as the PKPaymentAuthorizationViewController class, but it does not depend on the UIKit framework. This means that the authorization controller can be used in places where a view controller cannot (for example, in watchOS apps or in SiriKit extensions). 12345678910111213141516171819202122232425262728293031323334353637383940414243extension MainController { func showApplePay() { let merchantId = \"merchant.com.onmyway133.MyApp\" let paymentRequest = Stripe.paymentRequest(withMerchantIdentifier: merchantId, country: \"US\", currency: \"USD\") paymentRequest.paymentSummaryItems = [ PKPaymentSummaryItem(label: \"Rubber duck\", amount: 1.5) ] guard Stripe.canSubmitPaymentRequest(paymentRequest) else { assertionFailure() return } guard let authorizationViewController = PKPaymentAuthorizationViewController(paymentRequest: paymentRequest) else { assertionFailure() return } authorizationViewController.delegate = self innerNavigationController.present(authorizationViewController, animated: true, completion: nil) }}extension MainController: PKPaymentAuthorizationViewControllerDelegate { func paymentAuthorizationViewControllerDidFinish(_ controller: PKPaymentAuthorizationViewController) { controller.dismiss(animated: true, completion: nil) } func paymentAuthorizationViewController( _ controller: PKPaymentAuthorizationViewController, didAuthorizePayment payment: PKPayment, handler completion: @escaping (PKPaymentAuthorizationResult) -&gt; Void) { client.useApplePay(payment: payment, completion: { result in switch result { case .success: completion(.init(status: .success, errors: nil)) case .failure(let error): completion(.init(status: .failure, errors: [error])) } }) }} Showing Apple Pay optionFrom appleMerchantIdentifier The Apple Merchant Identifier to use during Apple Pay transactions. To create one of these, see our guide at https://stripe.com/docs/mobile/apple-pay . You must set this to a valid identifier in order to automatically enable Apple Pay. 12345if Stripe.deviceSupportsApplePay() { STPPaymentConfiguration.shared().appleMerchantIdentifier = \"merchant.com.onmyway133.MyApp\"}paymentContext.pushPaymentOptionsViewController() requestPayment not showing UIFrom requestPayment Requests payment from the user. This may need to present some supplemental UI to the user, in which case it will be presented on the payment context‚Äôs hostViewController. For instance, if they‚Äôve selected Apple Pay as their payment method, calling this method will show the payment sheet. If the user has a card on file, this will use that without presenting any additional UI. After this is called, the paymentContext:didCreatePaymentResult:completion: and paymentContext:didFinishWithStatus:error: methods will be called on the context‚Äôs delegate. Use STPPaymentOptionsViewController to show cards and Apple Pay options Code for requestPayment 12345678910111213141516171819202122232425262728293031323334353637- (void)requestPayment { WEAK(self); [[[self.didAppearPromise voidFlatMap:^STPPromise * _Nonnull{ STRONG(self); return self.loadingPromise; }] onSuccess:^(__unused STPPaymentOptionTuple *tuple) { STRONG(self); if (!self) { return; } if (self.state != STPPaymentContextStateNone) { return; } if (!self.selectedPaymentOption) { [self presentPaymentOptionsViewControllerWithNewState:STPPaymentContextStateRequestingPayment]; } else if ([self requestPaymentShouldPresentShippingViewController]) { [self presentShippingViewControllerWithNewState:STPPaymentContextStateRequestingPayment]; } else if ([self.selectedPaymentOption isKindOfClass:[STPCard class]] || [self.selectedPaymentOption isKindOfClass:[STPSource class]]) { self.state = STPPaymentContextStateRequestingPayment; STPPaymentResult *result = [[STPPaymentResult alloc] initWithSource:(id&lt;STPSourceProtocol&gt;)self.selectedPaymentOption]; [self.delegate paymentContext:self didCreatePaymentResult:result completion:^(NSError * _Nullable error) { stpDispatchToMainThreadIfNecessary(^{ if (error) { [self didFinishWithStatus:STPPaymentStatusError error:error]; } else { [self didFinishWithStatus:STPPaymentStatusSuccess error:nil]; } }); }]; } else if ([self.selectedPaymentOption isKindOfClass:[STPApplePayPaymentOption class]]) { // .... Payment options123func paymentOptionsViewController(_ paymentOptionsViewController: STPPaymentOptionsViewController, didSelect paymentOption: STPPaymentOption) { // No op} After user selects payment option, the change is saved in dashboard https://dashboard.stripe.com/test/customers, but for card only. Select Apple Pay does not reflect change in web dashboard. Apple pay option is added manually locally, from STPCustomer+SourceTuple.m üò≤ 123456789101112131415161718192021222324252627- (STPPaymentOptionTuple *)filteredSourceTupleForUIWithConfiguration:(STPPaymentConfiguration *)configuration { id&lt;STPPaymentOption&gt; _Nullable selectedMethod = nil; NSMutableArray&lt;id&lt;STPPaymentOption&gt;&gt; *methods = [NSMutableArray array]; for (id&lt;STPSourceProtocol&gt; customerSource in self.sources) { if ([customerSource isKindOfClass:[STPCard class]]) { STPCard *card = (STPCard *)customerSource; [methods addObject:card]; if ([card.stripeID isEqualToString:self.defaultSource.stripeID]) { selectedMethod = card; } } else if ([customerSource isKindOfClass:[STPSource class]]) { STPSource *source = (STPSource *)customerSource; if (source.type == STPSourceTypeCard &amp;&amp; source.cardDetails != nil) { [methods addObject:source]; if ([source.stripeID isEqualToString:self.defaultSource.stripeID]) { selectedMethod = source; } } } } return [STPPaymentOptionTuple tupleWithPaymentOptions:methods selectedPaymentOption:selectedMethod addApplePayOption:configuration.applePayEnabled];} STPApplePayPaymentOptionis not available inpaymentContext.paymentOptions` immediately Change selected payment optionIn STPPaymentContext setSelectedPaymentOption is read only and trigger paymentContextDidChange, but it checks if the new selected payment option is equal to existing selected payment option 1234567891011- (void)setSelectedPaymentOption:(id&lt;STPPaymentOption&gt;)selectedPaymentOption { if (selectedPaymentOption &amp;&amp; ![self.paymentOptions containsObject:selectedPaymentOption]) { self.paymentOptions = [self.paymentOptions arrayByAddingObject:selectedPaymentOption]; } if (![_selectedPaymentOption isEqual:selectedPaymentOption]) { _selectedPaymentOption = selectedPaymentOption; stpDispatchToMainThreadIfNecessary(^{ [self.delegate paymentContextDidChange:self]; }); }} There is retryLoading which is called at init 12345678910111213141516171819202122232425262728293031323334353637383940414243444546- (void)retryLoading { // Clear any cached customer object before refetching if ([self.apiAdapter isKindOfClass:[STPCustomerContext class]]) { STPCustomerContext *customerContext = (STPCustomerContext *)self.apiAdapter; [customerContext clearCachedCustomer]; } WEAK(self); self.loadingPromise = [[[STPPromise&lt;STPPaymentOptionTuple *&gt; new] onSuccess:^(STPPaymentOptionTuple *tuple) { STRONG(self); self.paymentOptions = tuple.paymentOptions; self.selectedPaymentOption = tuple.selectedPaymentOption; }] onFailure:^(NSError * _Nonnull error) { STRONG(self); if (self.hostViewController) { [self.didAppearPromise onSuccess:^(__unused id value) { if (self.paymentOptionsViewController) { [self appropriatelyDismissPaymentOptionsViewController:self.paymentOptionsViewController completion:^{ [self.delegate paymentContext:self didFailToLoadWithError:error]; }]; } else { [self.delegate paymentContext:self didFailToLoadWithError:error]; } }]; } }]; [self.apiAdapter retrieveCustomer:^(STPCustomer * _Nullable customer, NSError * _Nullable error) { stpDispatchToMainThreadIfNecessary(^{ STRONG(self); if (!self) { return; } if (error) { [self.loadingPromise fail:error]; return; } if (!self.shippingAddress &amp;&amp; customer.shippingAddress) { self.shippingAddress = customer.shippingAddress; self.shippingAddressNeedsVerification = YES; } STPPaymentOptionTuple *paymentTuple = [customer filteredSourceTupleForUIWithConfiguration:self.configuration]; [self.loadingPromise succeed:paymentTuple]; }); }];} Which in turns call STPCustomerEphemeralKeyProvider. As stripe does not save Apple Pay option in dashboard, this method return list of card payment options, together with the default card as selected payment option üò≤ Although the new STPCard has a different address, it is the exact same card with the same info, and the isEqual method of STPCard is 1234567891011- (BOOL)isEqualToCard:(nullable STPCard *)other { if (self == other) { return YES; } if (!other || ![other isKindOfClass:self.class]) { return NO; } return [self.stripeID isEqualToString:other.stripeID];} I raised an issue How to change selected payment option? hope it gets resolved soon üò¢","link":"/blog/How-to-use-Stripe-and-Apple-Pay-in-iOS/"},{"title":"How to convert your Xcode plugins to Xcode extensions","text":"Issue #267 Original post https://medium.freecodecamp.org/how-to-convert-your-xcode-plugins-to-xcode-extensions-ac90f32ae0e3 Xcode is an indispensable IDE for iOS and macOS developers. From the early days, the ability to build and install custom plugins had given us a huge boost in productivity. It was not long before Apple introduced Xcode extension due to privacy concerns. I have built a few Xcode plugins and extensions like XcodeWay, XcodeColorSense, XcodeColorSense2, and Xmas. It was a rewarding experience. I learned a lot, and the productivity I gained was considerable. In this post I walkthrough how I converted my Xcode plugins to extensions, and the experience I had in doing so. My first Xcode plugin: XcodeWay I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it I really like the above quote from Bill Gates. I try to avoid repetitive and boring tasks. Whenever I find myself doing the same tasks again, I write scripts and tools to automate that. Doing this takes some time, but I will be a bit lazier in the near future. Besides the interest in building open source frameworks and tools, I like to extend the IDE I‚Äôm using ‚Äî mostly Xcode. I first started iOS development in 2014. I wanted a quick way to navigate to many places right from Xcode with the context of the current project. There are many times we want to: open the current project folder in ‚ÄúFinder‚Äù to change some files open Terminal to run some commands open the current file in GitHub to quickly give the link to a workmate or to open other folders like themes, plugins, code snippets, device logs. Every little bit of time we save each day counts. I thought it would be cool idea to write an Xcode plugin that we can do all above things right inside Xcode. Instead of waiting for other people to do it, I pulled up my sleeve and wrote my first Xcode plugin ‚Äî XcodeWay‚Äî and shared it as open source. XcodeWay works by creating a menu under Editor with lots of options to navigate to other places right from Xcode. It looks simple but there was some hard work required. What are Xcode plugins?Xcode plugins are not officially supported by Xcode or recommended by Apple. There are no documents about them. The best places we can learn about them are via existing plugins‚Äô source code and a few tutorials. An Xcode plugin is just a bundle of type xcplugin and is placed at ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins . Xcode, when starting, will load any Xcode plugins present in this folder. Plugins are run in the same process as Xcode, so could do anything as Xcode. A bug in any plugin can cause Xcode to crash. To make an Xcode plugin, create a macOS Bundle with one class that extends from NSObject , and have an initialiser that accepts NSBundle , for example in Xmas: class Xmas: NSObject { var bundle: NSBundle init(bundle: NSBundle) { self.bundle = bundle super.init() } }Inside Info.plist, we need to: declare this class as the main entry class for the plugin, and that this bundle has no UI, because we create UI controls and add to the Xcode interface during runtime NSPrincipalClass Xmas XCPluginHasUI Another problem with Xcode plugins is that we have to continuously update DVTPluginCompatibilityUUIDs . This changes every time a new version of Xcode comes out. Without updating, Xcode will refuse to load the plugin. What Xcode plugins can doMany developers build Xcode plugins because they miss specific features found in other IDEs like Sublime Text, AppCode, or Atom. Since Xcode plugins are loaded in the same process as Xcode, they can do everything that Xcode can. The only limit is our imagination. We can leverage Objective C Runtime to discover private frameworks and functions. Then LLDB and Symbolic breakpoint can be used further to inspect running code and alter their behaviors. We can also use swizzling to change implementation of any running code. Writing Xcode plugins is hard ‚Äî lots of guessing, and sometimes a good knowledge of assembly is required. In the golden age of plugins, there was a popular plugin manager, which itself was a plugin, called Alcatraz. It could install other plugins, which basically just downloads the xcplugin file and moves this to the Plug Ins folder. To get a sense of what plugins can do, let‚Äôs take a look at some popular plugins. XvimFirst in the list is Xvim, which adds Vim keybindings right inside Xcode. It supports mostly all of the keybindings that we used to have in Terminal. SCXcodeMiniMapIf you miss MiniMap mode in Sublime Text, you can use SCXcodeMiniMap to add a right map panel inside Xcode editor. FuzzyAutocompletePluginBefore version 9, Xcode didn‚Äôt have proper auto completion ‚Äî it was just based on prefix. That was where FuzzyAutocompletePlugin shone. It performs fuzzy auto completion based on the hidden IDEOpenQuicklyPattern feature in Xcode. KSImageNamed-XcodeTo display a bundle image inside UIImageView, we often use the imageNamed method. But remembering exactly the name of the image file is hard. KSImageNamed-Xcode is here to help. You will get a list of auto-suggested image names when you begin to type. ColorSense-for-XcodeAnother itch during development is to work with UIColor , which uses RGBA color space. We don‚Äôt get a visual indicator of the color that we specify, and manually performing checking can be time consuming. Luckily there is ColorSense-for-Xcode which shows the color being used and the color picker panel to easily select the right color. LinkedConsoleIn AppCode, we can jump to a specific line in the file that is logged inside the console. If you miss this feature in Xcode, you can use LinkedConsole. This enables clickable links inside Xcode console so we can jump to that file instantly. The hard work behind Xcode pluginsMaking an Xcode plugin is not easy. Not only do we need to know macOS programming, but we also need to dive deep into Xcode view hierarchy. We need to explore private frameworks and APIs in order to inject the feature we want. There are very few tutorials on how to make plugins but, luckily, most plugins are open source so we can understand how they work. Since I have made a few plugins, I can give some technical details about them. Xcode plugins are done usually with two private frameworks: DVTKit and IDEKit . System frameworks are at /System/Library/PrivateFrameworks but the frameworks that Xcode uses exclusively are under /Applications/Xcode.app/Contents/ , there you can find Frameworks , OtherFrameworks and SharedFrameworks. There is a tool class-dump that can generate headers from the Xcode app bundle. With the class names and methods, you can call NSClassFromString to get the class from the name. Swizzling DVTBezelAlertPanel framework in XmasChristmas has always given me a special feeling, so I decided to make Xmas, which shows a random Christmas picture instead of the default alert view. The class used to render that view is DVTBezelAlertPanel inside the DVTKit framework. My article on building that plugin is here. With Objective C Runtime, there is a technique called swizzling, which can change and switch implementation and method signature of any running classes and methods. Here, in order to change the content of that alert view, we need to swap the initialiser initWithIcon:message:parentWindow:duration: with our own method. We do that early by listening to NSApplicationDidFinishLaunchingNotification which is notified when a macOS plugin, in this case Xcode, launches. class func swizzleMethods() { guard let originalClass = NSClassFromString(&quot;DVTBezelAlertPanel&quot;) as? NSObject.Type else { return } do { try originalClass.jr_swizzleMethod(&quot;initWithIcon:message:parentWindow:duration:&quot;, withMethod: &quot;xmas_initWithIcon:message:parentWindow:duration:&quot;) } catch { Swift.print(&quot;Swizzling failed&quot;) } }I initially liked to do everything in Swift. But it‚Äôs tricky to use the swizzle init method in Swift, so the quickest way is to do that in Objective C. Then we simply traverse the view hierarchy to find the NSVisualEffectView inside NSPanel to update the image. Interacting with DVTSourceTextView in XcodeColorSenseI work mostly with hex colors and I want a quick way to see the color. So I built XcodeColorSense ‚Äî it supports hex color, RGBA, and named color. The idea is simple. Parse the string to see if the user is typing something related to UIColor, and show a small overlay view with that color as background. The text view that Xcode uses is of type DVTSourceTextView in DVTKit framework. We also need to listen to NSTextViewDidChangeSelectionNotification which is triggered whenever any NSTextView content is changed. func listenNotification() { NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(handleSelectionChange(_:)), name: NSTextViewDidChangeSelectionNotification, object: nil) } func handleSelectionChange(note: NSNotification) { guard let DVTSourceTextView = NSClassFromString(&quot;DVTSourceTextView&quot;) as? NSObject.Type, object = note.object where object.isKindOfClass(DVTSourceTextView.self), let textView = object as? NSTextView else { return } self.textView = textView }I had a Matcher architecture so we can detect different kinds of UIColor constructions ‚Äî for example HexMatcher . public struct HexMatcher: Matcher { func check(line: String, selectedText: String) -&gt; (color: NSColor, range: NSRange)? { let pattern1 = &quot;\\&quot;#?[A-Fa-f0-9]{6}\\&quot;&quot; let pattern2 = &quot;0x[A-Fa-f0-9]{6}&quot; let ranges = [pattern1, pattern2].flatMap { return Regex.check(line, pattern: $0) } guard let range = ranges.first else { return nil } let text = (line as NSString).substringWithRange(range).replace(&quot;0x&quot;, with: &quot;&quot;).replace(&quot;\\&quot;&quot;, with: &quot;&quot;) let color = NSColor.hex(text) return (color: color, range: range) } }To render the overlay, we use NSColorWell which is good for showing a view with background. The position is determined by calling firstRectForCharacterRange and some point conversions with convertRectFromScreen and convertRect . Using NSTask and IDEWorkspaceWindowController in XcodeWayFinally, my beloved XcodeWay. I found myself needing to go to different places from Xcode with the context of the current project. So I built XcodeWay as a plugin that adds lots of handy menu options under Window. Since the plugin runs in the same Xcode process, it has access to the main menu NSApp.mainMenu?.itemWithTitle(‚ÄúWindow‚Äù) . There we can alter the menu. XcodeWay is designed to easily extend functionalities through its Navigator protocol. [@objc](http://twitter.com/objc) protocol Navigator: NSObjectProtocol { func navigate() var title: String { get } }For folders with a static path like Provisioning Profile ~/Library/MobileDevice/Provisioning Profiles or User data Developer/Xcode/UserData , we can just construct the URL and call NSWorkspace.sharedWorkspace().openURL . For dynamic folders that vary depending on the current project, more work needs to be done. How do we open the folder for the current project in Finder? The information for the current project path is kept inside IDEWorkspaceWindowController . This is a class that manages workspace windows in Xcode. Take a look at EnvironmentManager where we use objc_getClass to get the class definition from a string. self.IDEWorkspaceWindowControllerClass = objc_getClass(&quot;IDEWorkspaceWindowController&quot;); NSArray *workspaceWindowControllers = [self.IDEWorkspaceWindowControllerClass valueForKey:@&quot;workspaceWindowControllers&quot;]; id workSpace = nil; for (id controller in workspaceWindowControllers) { if ([[controller valueForKey:@&quot;window&quot;] isEqual:[NSApp keyWindow]]) { workSpace = [controller valueForKey:@&quot;_workspace&quot;]; } } NSString * path = [[workSpace valueForKey:@&quot;representingFilePath&quot;] valueForKey:@&quot;_pathString&quot;];Finally, we can utilise valueForKey to get the value for any property that we think exists. This way not only do we get the project path, we also get the path to the opening file. So we can call activateFileViewerSelectingURLs on NSWorkspace to open Finder with that file selected. This is handy as users don‚Äôt need to look for that file in Finder. Many times we want to execute some Terminal commands on the current project folder. To achieve that, we can use NSTask with launch pad /usr/bin/open and arguments [@‚Äù-a‚Äù, @‚ÄùTerminal‚Äù, projectFolderPath] . iTerm, if configured probably, will open this in a new tab. The documents for iOS 7 apps are placed in the fixed location iPhone Simulator inside Application Support. But, from iOS 8, every app has a unique UUID and their document folders are hard to predict. ~/Library/Developer/CoreSimulator/Devices/1A2FF360-B0A6-8127-95F3-68A6AB0BCC78/data/Container/Data/Application/We can build a map and perform tracking to find the generated ID for the current project, or to check the plist inside each folder to compare the bundle identifier. The quick solution that I came up with was to search for the most recent updated folder. Every time we build the project, or make changes inside the app, their document folder is updated. That is where we can make use of NSFileModificationDate to find the folder for the current project. There are many hacks when working with Xcode plugins, but the results are rewarding. Every few minutes we save each day end up saving a lot of time overall. Security and freedomWith great power comes great responsibility. The fact that plugins can do whatever they want rings an alert to security. In late 2015, there was a malware attack by distributing a modified version of Xcode, called XcodeGhost, which injects malicious code into any apps built with Xcode Ghost. The malware is believed to use the plugin mechanism among other things. Like the iOS apps we download from the Appstore, macOS apps like Xcode are signed by Apple when we download them from the Mac Appstore or through official Apple download links. Code signing your app assures users that it is from a known source and the app hasn‚Äôt been modified since it was last signed. Before your app can integrate app services, be installed on a device, or be submitted to the App Store, it must be signed with a certificate issued by Apple To avoid potential malware like this, at WWDC 2016 Apple announced the Xcode Source Editor Extension as the only way to load third party extensions into Xcode. This means that, from Xcode 8, plugins can‚Äôt be loaded. Source Editor ExtensionExtension is the recommended approach to safely add functionalities in restricted ways. App extensions give users access to your app‚Äôs functionality and content throughout iOS and macOS. For example, your app can now appear as a widget on the Today screen, add new buttons in the Action sheet, offer photo filters within the Photos app, or display a new system-wide custom keyboard. For now, the only extension to Xcode is Source Editor, which allows us to read and modify contents of a source file, as well as read and modify the current text selection within the editor. Extension is a new target and runs in a different process than Xcode. This is good in that it can‚Äôt alter Xcode in any ways other than conforming to XCSourceEditorCommand to modify the current document content. protocol XCSourceEditorCommand { func perform(with invocation: [XCSourceEditorCommandInvocation](https://developer.apple.com/documentation/xcodekit/xcsourceeditorcommandinvocation), completionHandler: @escaping ([Error](https://developer.apple.com/documentation/swift/error)?) -&gt; [Void](https://developer.apple.com/documentation/swift/void)) } Xcode 8 has lots of improvements like the new code completion features, Swift image and color literals, and snippets. This led to the deprecation of many Xcode plugins. For some indispensable plugins like XVim, this is unbearable for some people. Some old plugin features can‚Äôt be achieved with the current Source Editor Extension system. Unless you resign XcodeA workaround to bypass the restriction from Xcode 8 for plugins, is to replace the existing Xcode signature by a technique called resign. Resigning is very easy ‚Äî we just need to create a self-signed certificate and call the codesign command. After this, Xcode should be able to load plugins. codesign -f -s MySelfSignedCertificate /Applications/Xcode.appIt is, however, not possible to submit apps built with resigned Xcode as the signature does not match the official version of Xcode. One way is to use two Xcodes: one official for distribution and one resigned for development. Moving to Xcode extensionXcode extension is the way to go, so I started moving my plugins to extension. For Xmas, since it modifies view hierarchy, it can‚Äôt become an extension. Color literal in XcodeColorSense2For the color sense, I rewrote the extension from scratch, and called it XcodeColorSense2. This, of course, can‚Äôt show an overlay over the current editor view. So I chose to utilize the new Color literal found in Xcode 8+. The color is shown in a small box. It may be hard to distinguish similar colors, so that‚Äôs why I also include the name. The code is simply about inspecting selections and parsing to find the color declaration. func perform(with invocation: XCSourceEditorCommandInvocation, completionHandler: [@escaping](http://twitter.com/escaping) (Error?) -&gt; Void ) -&gt; Void { guard let selection = invocation.buffer.selections.firstObject as? XCSourceTextRange else { completionHandler(nil) return } let lineNumber = selection.start.line guard lineNumber &lt; invocation.buffer.lines.count, let line = invocation.buffer.lines[lineNumber] as? String else { completionHandler(nil) return } guard let hex = findHex(string: line) else { completionHandler(nil) return } let newLine = process(line: line, hex: hex) invocation.buffer.lines.replaceObject(at: lineNumber, with: newLine) completionHandler(nil) } }Most of the functionality is embedded inside my framework Farge, but I can‚Äôt find a way to use the framework inside Xcode extension. Since the extension feature is only accessible through the Editor menu, we can customise a key binding to invoke this menu item. For example I choose Cmd+Ctrl+S to show and hide color information. This is, of course, not intuitive compared to the original plugin, but it‚Äôs better than nothing. How to debug Xcode extensionsWorking and debugging extensions is straightforward. We can use Xcode to debug Xcode. The debugged version of Xcode has a gray icon. How to install Xcode extensionsThe extension must have an accompanying macOS app. This can be distributed to Mac Appstore or self-signed. I‚Äôve written an article on how to do this. All extensions for an app need to be explicitly enabled through ‚ÄúSystem Preferences‚Äù. The Xcode extension only works with editor for now, so we must open a source file for the Editor menu to have effect. AppleScript in XcodeWayIn Xcode extensions, NSWorkspace, NSTask and private class construction don‚Äôt work anymore. Since I have used Finder Sync Extension in FinderGo, I thought I could try the same AppleScript scripting for Xcode extension. AppleScript is a scripting language created by Apple. It allows users to directly control scriptable Macintosh applications, as well as parts of macOS itself. You can create scripts ‚Äî sets of written instructions ‚Äî to automate repetitive tasks, combine features from multiple scriptable applications, and create complex workflows. To try AppleScript, you can use the app Script Editor built inside macOS to write prototype functions. Function declaration starts with on and ends with end . To avoid potential conflicts with system functions, I usually use my as a prefix. Here is how I rely on System Events to get the home directory. User interface scripting terminology is found in the ‚ÄúProcesses Suite‚Äù of the ‚ÄúSystem Events‚Äù scripting dictionary. This suite includes terminology for interacting with most types of user interface elements, including: windows buttons checkboxes menus radio buttons text fields. In System Events, the process class represents a running app. Many good citizen apps support AppleScript by exposing some of their functionalities, so these can be used by other apps. Here is how I get the current song from Spotify in Lyrics. tell application &quot;Spotify&quot; set trackId to id of current track as string set trackName to name of current track as string set artworkUrl to artwork url of current track as string set artistName to artist of current track as string set albumName to album of current track as string return trackId &amp; &quot;---&quot; &amp; trackName &amp; &quot;---&quot; &amp; artworkUrl &amp; &quot;---&quot; &amp; artistName &amp; &quot;---&quot; &amp; albumName end tellTo get all the possible commands of a certain app, we can open the dictionary in Script Editor. There we can learn about which functions and parameters are supported. If you think Objective C is hard, AppleScript is much harder. The syntax is verbose and error-prone. For your reference, here is the whole script file that powers XcodeWay. To open a certain folder, tell Finder using POSIX file. I refactor every functionality into function for better code reuse. on myOpenFolder(myPath) tell application &quot;Finder&quot; activate open myPath as POSIX file end tell end myOpenFolderThen, to run AppleScript inside a macOS app or extension, we need to construct an AppleScript descriptor with the correct process serial number and event identifiers. func eventDescriptior(functionName: String) -&gt; NSAppleEventDescriptor { var psn = ProcessSerialNumber(highLongOfPSN: 0, lowLongOfPSN: UInt32(kCurrentProcess)) let target = NSAppleEventDescriptor( descriptorType: typeProcessSerialNumber, bytes: &amp;psn, length: MemoryLayout&lt;ProcessSerialNumber&gt;.size ) let event = NSAppleEventDescriptor( eventClass: UInt32(kASAppleScriptSuite), eventID: UInt32(kASSubroutineEvent), targetDescriptor: target, returnID: Int16(kAutoGenerateReturnID), transactionID: Int32(kAnyTransactionID) ) let function = NSAppleEventDescriptor(string: functionName) event.setParam(function, forKeyword: AEKeyword(keyASSubroutineName)) return event }Other tasks, like checking the current Git remote, are a bit trickier. Many times I want to share the link of the file I‚Äôm debugging to my remote teammate, so they know what file I‚Äôm referencing. This is doable by using shell script inside AppleScript . on myGitHubURL() set myPath to myProjectPath() set myConsoleOutput to (do shell script &quot;cd &quot; &amp; quoted form of myPath &amp; &quot;; git remote -v&quot;) set myRemote to myGetRemote(myConsoleOutput) set myUrl to (do shell script &quot;cd &quot; &amp; quoted form of myPath &amp; &quot;; git config --get remote.&quot; &amp; quoted form of myRemote &amp; &quot;.url&quot;) set myUrlWithOutDotGit to myRemoveSubString(myUrl, &quot;.git&quot;) end myGitHubURLWe can use quoted and string concatenation to form strings. Luckily we can expose Foundation framework and certain classes. Here is how I expose NSString to take advantage of all existing functionalities. Writing string manipulation from scratch using plain AppleScript will take lots of time. use scripting additions use framework &quot;Foundation&quot; property NSString : a reference to current application&apos;s NSStringWith this we can build our other functions for string handling. on myRemoveLastPath(myPath) set myString to NSString&apos;s stringWithString:myPath set removedLastPathString to myString&apos;s stringByDeletingLastPathComponent removedLastPathString as text end myRemoveLastPathOne cool feature that XcodeWay supports is the ability to go to the document directory for the current app in the simulator. This is handy when we need to inspect a document to check saved or cached data. The directory is dynamic so it‚Äôs hard to detect. We can, however, sort the directory for the most recently updated. Below is how we chain multiple shell scripts commands to find the folder. on myOpenDocument() set command1 to &quot;cd ~/Library/Developer/CoreSimulator/Devices/;&quot; set command2 to &quot;cd `ls -t | head -n 1`/data/Containers/Data/Application;&quot; set command3 to &quot;cd `ls -t | head -n 1`/Documents;&quot; set command4 to &quot;open .&quot; do shell script command1 &amp; command2 &amp; command3 &amp; command4 end myOpenDocumentThis feature helped me a lot when developing Gallery to check whether videos and downloaded images are saved in the correct place. However, none of the scripts seem to work. Scripting has always been part of macOS since 1993. But, with the advent of the Mac Appstore and security concerns, AppleScript finally got restricted in mid 2012. That was when App Sandbox was enforced. App SandboxApp Sandbox is an access control technology provided in macOS, enforced at the kernel level. It is designed to contain damage to the system and the user‚Äôs data if an app becomes compromised. Apps distributed through the Mac App Store must adopt App Sandbox. For an Xcode extension to be loaded by Xcode, it must also support App Sandbox. At the beginning of App Sandbox enforcement, we could use App Sandbox Temporary Exception to temporarily grant our app access to Apple Script. This is now not possible. The only way for AppleScript to run is if it resides inside ~/Library/Application Scripts folder. How to install custom scriptsmacOS apps or extensions can‚Äôt just install scripts into the Application Scripts by themselves. They need user consent. One possible way to do that is to enable Read/Write and show a dialog using NSOpenPanel to ask user to select the folder to install our scripts. For XcodeWay, I choose to provide an install shell script so the user has a quick way to install scripts. #!/bin/bash set -euo pipefail DOWNLOAD_URL=[https://raw.githubusercontent.com/onmyway133/XcodeWay/master/XcodeWayExtensions/Script/XcodeWayScript.scpt](https://raw.githubusercontent.com/onmyway133/XcodeWay/master/XcodeWayExtensions/Script/XcodeWayScript.scpt) SCRIPT_DIR=&quot;${HOME}/Library/Application Scripts/com.fantageek.XcodeWayApp.XcodeWayExtensions&quot; mkdir -p &quot;${SCRIPT_DIR}&quot; curl $DOWNLOAD_URL -o &quot;${SCRIPT_DIR}/XcodeWayScript.scpt&quot;AppleScript is very powerful. All of this is made explicit so the user has complete control over which things can be done. Like an extension, a script is done asynchronously in a different process using XPC for inter process communication. This enhances security as a script has no access to the address space to our app or extension. More security in macOS MojaveThis year, at WWDC 2018, Apple introduced macOS Mojave which focuses on lots of security enhancements. In the Your Apps and the Future of macOS Security we can learn more about new security requirement for macOS apps. One of them is the usage description for AppleEvents. unable to load info.plist exceptions (egpu overrides) We used to declare usage description for many permissions in iOS, like photo library, camera, and push notifications. Now we need to declare the usage description for AppleEvents. Source: https://www.felix-schwarz.org/blog/2018/08/new-apple-event-apis-in-macos-mojave The first time our extension tries to execute some AppleScript commands, the above dialog is shown to ask for user consent. User can grant or deny permission, but for Xcode please say yes üôè The fix for us is to declare NSAppleEventsUsageDescription in our app target. We only need to declare in the app target, not in the extension target. &lt;key&gt;NSAppleEventsUsageDescription&lt;/key&gt; &lt;string&gt;Use AppleScript to open folders&lt;/string&gt;Where to go from hereHuff huff, whew! Thanks for following such a long journey. Making frameworks and tools take lots of time, especially plugins and extensions ‚Äî we have to continuously change to adapt them to new operating systems and security requirements. But it is a rewarding process, as we‚Äôve learned more and have some tools to save our precious time. For your reference, here are my extensions which are fully open source. XcodeWay XcodeColorSense2 I hope you find something useful in the post. Here are some resources to help explore Xcode extensions further: Xcode Plugins by NSHipster Writing Xcode plugin in Swift Xcode 8 Plugins (Alcatraz) ‚Äî The end of an era Using and Extending the Xcode Source Editor Why do I need to resign Xcode to use XVim2","link":"/blog/How-to-convert-your-Xcode-plugins-to-Xcode-extensions/"},{"title":"URL Routing with Compass","text":"Issue #110 Medium version https://medium.com/@onmyway133/url-routing-with-compass-d59c0061e7e2 Apps often have many screens, and UIViewController works well as the basis for a screen, together with presentation and navigation APIs. Things are fine until you get lost in the forest of flows, and code becomes hard to maintain. One way to avoid this is the central URL routing approach. Think of it as a network router that handles and resolves all routing requests. This way, the code becomes declarative and decoupled, so that the list component does not need to know what it‚Äôs presenting. URL routing also makes logging and tracking easy along with ease of handling external requests such as deep linking. There are various frameworks that perform URL routing. In this tutorial you‚Äôll use Compass for its simplicity. You‚Äôll refactor an existing app, which is a simplified Instagram app named PhotoFeed. When you‚Äôve finished this tutorial, you‚Äôll know how to declare and use routers with Compass and handle deep linking. Getting StartedDownload the starter project and unzip it. Go to the PhotoFeed folder and run pod install to install the particular dependencies for this project. Open PhotoFeed.xcworkspace and run the project. Tap Login to go to the Instagram login page and enter your Instagram credentials, then have a look around the app. The main app is made of a UITabBarController that shows the feed, the currently logged-in user profile and a menu. This is a typical Model View Controller project where UIViewController handles Cell delegates and takes responsibility for the navigation. For simplicity, all view controllers inherit from TableController and CollectionController that know how to manage list of a particular model and cell. All models conform to the new Swift 4 Codable protocol. Registering Your App on InstagramIn order to use the Instagram API, you‚Äôll need to register your app at Instagram Developer. After obtaining your client id, switch back to the project. Go to APIClient.swift and modify your clientId. Note: The project comes with a default app with limited permissions. The app can‚Äôt access following or follower APIs, and you can only see your own posts and comments Compass 101The concept of Compass is very simple: you have a set of routes and central place for handling these routes. Think of a route as a navigation request to a specific screen within the app. The idea behind URL routing is borrowed from the modern web server. When user enters a URL into the browser, such as https://flawlessapp.io/category/ios, that request is sent from the browser to the web server. The server parses the URL and returns the requested content, such as HTML or JSON. Most web server frameworks have URL routing support, including ASP.NET, Express.js, and others. For example, here is how you handle a URL route in express.js: 1234app.get('/api/category/:categoryTag', function (req, res) { const page = getCategoryPageFor(req.params.categoryTag) res.send(page)}) Users or apps request a specific URL that express an intent about what should be returned or displayed. But instead of returning web pages, Compass constructs screens in terms of UIViewController and presents them. Route PatternsThis is how you declare a routing schema in Compass: 1Navigator.routes = [\"profile:{userId}\", \"post:{postId}\", \"logout\"] This is simply as array of patterns you register on the Navigator. This is the central place where you define all your routes. Since they are in one place, all your navigations are kept in one place and can easily be understood. Looking at the example above, {userId}, {postId} are placeholders that will be resolved to actual parameters. For example with post:BYOkwgXnwr3, you get userId of BYOkwgXnwr3. Compass also performs pattern matching, in that post:BYOkwgXnwr3 matches post:{postId}, not comment:{postId}, blogpost:{postId}, ‚Ä¶This will become to make sense in following sections. The NavigatorThe Navigator is a the central place for routes registration, navigating and handling. The next step is to trigger a routing request. You can do that via the Navigator. For example, this is how you do in the feed to request opening a specific post: 1Navigator.navigate(urn: \"post:BYOkwgXnwr3\") Compass uses the user-friendly urn, short for Uniform Resource Name to make itwork seamlessly with Deep Linking. This urn matches the routing schema post:{postId}. Compass uses {param} as the special token to identifier the parameter and : as the delimiter. You can change the delimiter to something else by configuring Navigator.delimiter. You have learned how to register routes and navigate in Compass. Next, you will learn how to customize the handling code to your need. LocationNavigator parses and works with Location under the hood. Given the URN of post:BYOkwgXnwr3, you get a Location where path is the route pattern, and arguments contain the resolved parameters. 1234path = \"post:{postId}\"arguments = [ \"postId\": \"BYOkwgXnwr3\"] To actually perform the navigation, you assign a closure that takes a Location to Navigator.handle. 123456789101112131415Navigator.handle = { [weak self] location in guard let `self` = self else { return } let arguments = location.arguments switch location.path { case \"post:{postId}\": let postController = PostController(postId: postID) self.rootController.pushViewController(postController, animated: true) default: break }} The letself= self dance is to ensure self isn‚Äôt released by the time this closure is executed. If it is released, the routing it‚Äôs about to perform is likely invalid, and you return without doing anything instead. You should typically do the above in the components that own the root controller, such as AppDelegate as seen above. That‚Äôs the basic of Compass. Astute readers may have noticed that it does not scale, as the number of switch statements will grow as the number of routes and endpoints increase in your app. This is where the Routable protocol comes in. Anything conforming to Routable knows how to handle a specific route. Apps may have many modular sections, and each section may have a set of routes. Compass handles these scenario by using a composite Routable named Router that groups them . You can have a router for a pre-login module, a post-login module, premium features module, and so on. In the next section, you‚Äôll change PhotoFeed to use Router and Routable. Router to the RescueThe first step is to include Compass in your project. Using CocoaPods, this is an easy task. Edit the Podfile with the project and type pod 'Compass', '~&gt; 5.0' just before the end statement. Then open Terminal and execute the following: 1pod install The version of Compass used in this tutorial is 5.1.0. Registering a Router To start, you‚Äôll create a simple router to handle all post-login routes. Open AppDelegate.swift, and import Compass at the top of the file: 1import Compass Next, add the following router declaration under the var mainController: MainController? declaration: 1var postLoginRouter = Router() Then declare a function called setupRouting, you ‚Äòll do this in an extension to separate the routing setup from the main code in AppDelegate. 1234567891011121314151617181920212223242526extension AppDelegate { func setupRouting() { // [1] Register scheme Navigator.scheme = \"photofeed\" // [2] Configure routes for Router postLoginRouter.routes = [:] // [3] Register routes you 'd like to support Navigator.routes = Array(postLoginRouter.routes.keys) // [4] Do the handling Navigator.handle = { [weak self] location in guard let selectedController = self?.mainController?.selectedViewController else { return } // [5] Choose the current visible controller let currentController = (selectedController as? UINavigationController)?.topViewController ?? selectedController // [6] Navigate self?.postLoginRouter.navigate(to: location, from: currentController) } }} Here‚Äôs what you do in the above method: Declare a scheme for Compass to work. This is your application URL scheme. This shines when you wish to support deep linking . Register all the routes in your app. Router accepts a mapping of route and Routable conformers. This is empty for now, but you will add several routes in a moment. A Navigator can manage multiple routers. In this case, you only register one router. This is where you supply the handling closure. Navigator uses this to handle a resolved location request. Screens in one modular section originate from one root or parent view controller. In order to show something from the route, you should try to push or present it from the selected most-visible view controller. In this project, the root is a UITabBarController, so you try to get the top controller from the current selected navigation. The selection of current controller depends on the module and your app use cases, so Compass let you decide it. If you use the side menu drawer, then you can just change the selected view controller. Finally, since Router is a composite Routable, you dispatch to it the Location. Finally, you need to call this newly added function. Add the following line right above window?.makeKeyAndVisible(): 1setupRouting() Build and run. Nothing seems to work yet! To make things happen, you‚Äôll need to add all the route handlers. You‚Äôll do this in the next section. Implementing the Route HandlersFirst, create a new file and name it Routers.swift. This is where you‚Äôll declare all of your route handlers. At the beginning of the file, add import Compass. Compass declares a simple protocol ‚Äî Routable ‚Äî that decides what to do with a given Location request from a Current Controller. If a request can‚Äôt be handled, it will throw with RouteError. Its implementation looks like this: 123public protocol Routable { func navigate(to location: Location, from currentController: CurrentController) throws} It‚Äôs an incredibly simple protocol. Any routes you create only need to implement that single method. Now create your first handler to deal with user info request. 12345678910111213struct UserRoute: Routable { func navigate(to location: Location, from currentController: CurrentController) throws { // [1] Examine arguments guard let userId = location.arguments[\"userId\"] else { return } // [2] Create the controller let controller = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"UserController\") as! UserController controller.userId = userId currentController.navigationController?.pushViewController(controller, animated: true) }} This is called when you touch the post author on the feed. Here‚Äôs what‚Äôs happening: UserRoute deals with user:{userId} urn, so location.arguments[&quot;userId&quot;] should contain the correct userId to inject into UserController. This app uses storyboards to make the UI, so get the correct view controller based on its identifier. Remember tha currentController is the current visible controller in the navigation stack. So you ask for its UINavigationController to push a new view controller. Right below this router, add one more route for the screen shown when the user wants to see who likes a particular post: 1234567891011struct LikesRoute: Routable { func navigate(to location: Location, from currentController: CurrentController) throws { guard let mediaId = location.arguments[\"mediaId\"] else { return } let controller = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"LikesController\") as! LikesController controller.mediaId = mediaId currentController.navigationController?.pushViewController(controller, animated: true) }} The remaining RouteNow it‚Äôs your turn to write the other route handlers: CommentsRoute, FollowingRoute, FollowerRoute. See if you can figure it out first, you can find the solution below. Here‚Äôs what you should have: 1234567891011121314151617181920212223242526272829303132333435struct CommentsRoute: Routable { func navigate(to location: Location, from currentController: CurrentController) throws { guard let mediaId = location.arguments[\"mediaId\"] else { return } let controller = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"CommentsController\") as! CommentsController controller.mediaId = mediaId currentController.navigationController?.pushViewController(controller, animated: true) }}struct FollowingRoute: Routable { func navigate(to location: Location, from currentController: CurrentController) throws { guard let userId = location.arguments[\"userId\"] else { return } let controller = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"FollowingController\") as! FollowingController controller.userId = userId currentController.navigationController?.pushViewController(controller, animated: true) }}struct FollowerRoute: Routable { func navigate(to location: Location, from currentController: CurrentController) throws { guard let userId = location.arguments[\"userId\"] else { return } let controller = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"FollowerController\") as! FollowerController controller.userId = userId currentController.navigationController?.pushViewController(controller, animated: true) }} The LogoutRouteThere is one more route to add: the one you‚Äôll use for logout. LogoutRoute is quite tricky, as it usually involves changing the current root view controller. Who knows this better than the app delegate? Open AppDelegate.swift and add the following code at the very bottom: 123456struct LogoutRoute: Routable { func navigate(to location: Location, from currentController: CurrentController) throws { APIClient.shared.accessToken = nil (UIApplication.shared.delegate as! AppDelegate).showLogin() }} Now that you‚Äôve implemented all of the route handlers, you will have to tell Navigator which route is used for which URN. Still in AppDelegate.swift, find postLoginRouter.routes = [:] and replace it with the following: 12345678postLoginRouter.routes = [ \"user:{userId}\": UserRoute(), \"comments:{mediaId}\": CommentsRoute(), \"likes:{mediaId}\": LikesRoute(), \"following:{userId}\": FollowingRoute(), \"follower:{userId}\": FollowerRoute(), \"logout\": LogoutRoute()] Build the app and everything should compile. Now all that‚Äôs left is to actually all all of the code you‚Äôve written! Refactoring TimeIt‚Äôs time to refactor all the code in UIViewController by replacing all the navigation code with your new routing instructions. Start by freeing the FeedController from the unnecessary tasks of navigation. Open FeedController.swift and add the following import to the top of the file: 1import Compass Next, look for // MARK: - MediaCellDelegate and replace the three MediaCell delegate methods with the following: 1234567891011func mediaCell(_ cell: MediaCell, didViewLikes mediaId: String) { try? Navigator.navigate(urn: \"likes:\\(mediaId)\")}func mediaCell(_ cell: MediaCell, didViewComments mediaId: String) { try? Navigator.navigate(urn: \"comments:\\(mediaId)\")}func mediaCell(_ cell: MediaCell, didSelectUserName userId: String) { try? Navigator.navigate(urn: \"user:\\(userId)\")} For these three cases, you simply want to navigate to another screen. Therefore, all you need to do is tell the Navigator where you want to go. For simplicity, you use try? to deal with any code that throws. Build and run the app. Search for your favorite post in the feed, and tap on the author, the post comments or likes to go to the target screen. The app behaves the same as it did before, but the code is now clean and declarative. Now do the same with UserController.swift. Add the following import to the top of the file: 1import Compass Replace the code after // MARK: - UserViewDelegate with the following: 1234567func userView(_ view: UserView, didViewFollower userId: String) { try? Navigator.navigate(urn: \"follower:\\(userId)\")}func userView(_ view: UserView, didViewFollowing userId: String) { try? Navigator.navigate(urn: \"following:\\(userId)\")} Your task now is to refactor with the last route LogoutRoute. Open MenuController.swift and add the following to the top: 1import Compass Remove the logout method altogether. Find the following: indexPath.section 12 logout()} ‚Ä¶and replace it with: 123if indexPath.section == Section.account.rawValue, indexPath.row == 0 { try? Navigator.navigate(urn: \"logout\")} Build and run the app, navigate to the menu and tap Logout. You should be taken to the login screen. Handling Deep LinkingDeep linking allows your apps to be opened via a predefined URN. The system identifies each app via its URL scheme. For web pages, the scheme is usually http, https. For Instagram it is, quite handily, instagram. Use cases for this are inter-app navigation and app advertisements. For examples, the Messenger app uses this to open the user profile in the Facebook app, and Twitter uses this to open the App Store to install another app from an advertisement. In order for user to be redirected back to PhotoFeed, you need to specify a custom URL scheme for your app. Remember where you declared Navigator.scheme = &quot;photofeed&quot;? PhotoFeed just so happens to conform to this URL scheme, so deep links already worked ‚Äî and you didn‚Äôt even know it! Build and run the app, then switch to Safari. Type photofeed:// in the address bar, then tap Go. That will trigger your app to open. The app opens, but PhotoFeed doesn‚Äôt parse any parameters in the URL to go anywhere useful. Time to change that! Your app responds to the URL scheme opening by implementing a UIApplicationDelegate method. Add the following after setupRouting in AppDelegate.swift: 1234func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -&gt; Bool { try? Navigator.navigate(url: url) return true} Navigator parses and handles this for you. Build and run again. Go to Safari app, type photofeed://user:self and tap Go. Photofeed will open and show the currently logged in users‚Äô profile. Because you already had UserRoute, the requested URL was handled gracefully. Your app may already be presenting a particular screen when a routing request comes, but you‚Äôve anticipated this by resetting the navigation controller or presentation stack to show the requested screen. This simple solution works for most cases. Again, it‚Äôs recommended you pick the topmost visible view controller as the current controller in Navigator.handle. Deep linking is usually considered external navigation, in that the routing requests come from outside your app. Thanks to the central routing system that you developed, the code to handle external and internal routing requests is very much the same and involves no code duplication at all. Routing with Push NotificationsPush notifications help engage users with your app. You may have received messages like ‚ÄúHey, checkout today ‚Äòs most popular stories‚Äù on Medium, ‚ÄúYour friend has a birthday today‚Äù on Facebook, ‚Ä¶ and when you tap those banners, you are taken straight to that particular screen. How cool is that? This is achievable with your URL routing approach. Imagine users tapping a push notification banner saying ‚ÄúYou‚Äôre a celebrity on PhotoFeed ‚Äî check out your profile now!‚Äù and being sent directly to their profile screen. To accomplish this, you simply have to embed the URN info into the push payload and handle that in your app. Setting upTo start, you‚Äôll need to specify your bundle ID. Go to Target Settings\\General to change your bundle ID as push notification requires a unique bundle ID to work. Your project uses com.fantageek.PhotoFeed by default. Next, you‚Äôll need to register your App ID. Go to Member Center and register your App ID. Remember your Team ID, as you will need it in the final step. Also tick the Push Notification checkbox under Application Services. Now you‚Äôll need to generate your Authentication Key. Apple provides Token Authentication as a new authentication mechanism for push notifications. The token is easy to generate, works for all your apps, and mostly, it never expires. Still in Member Center, create a new Key and download it as a .p8 file. Remember your Key ID as you will need it in the final step. Next up: enabling push notification capability. Back in Xcode, go to Target Settings\\Capabilities and enable Push Notifications, which will add PhotoFeed.entitlements to your project. The next step is to register for push notifications. Open MainController.swift and add the following import to the top of MainController.swift: 1import UserNotifications You want to enable push notification only after login, so MainController is the perfect place. UserNotifications is recommended for app targeting iOS 10 and above. 123456789101112override func viewDidLoad() { super.viewDidLoad() // [1] Register to get device token for remote notifications UIApplication.shared.registerForRemoteNotifications() // [2] Register to handle push notification UI let options: UNAuthorizationOptions = [.alert, .sound, .badge] UNUserNotificationCenter.current().requestAuthorization(options: options) { (granted, error) in print(error as Any) }} The permission dialog is shown once, so make sure you accept it. It‚Äôs time to handle the device token. Open AppDelegate.swift, and add the following to the end of extension AppDelegate: 123456789func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) { // [1] Parse to token string let token = deviceToken.map { return String(format: \"%02.2hhx\", $0) }.joined() // [2] Log it print(\"Your device token is \\(token)\")} This is where you get device token if your app successfully connects to APNs. Normally, you would send this device token to the backend so they can organize , but in this tutorial we just log it. It is required in the tool to be able to target a particular device. Handling payloadOpen AppDelegate.swift and add the following to th end of extension AppDelegate: 1234567891011121314151617181920212223func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -&gt; Void) { // [1] Always call the completion handler defer { completionHandler(.newData) } // [2] Convert into JSON dictionary guard let json = userInfo as? [String: Any] else { return } // [3] Parse to aps guard let aps = json[\"aps\"] as? [String: Any] else { return } // [4] Parse to urn guard let urn = aps[\"urn\"] as? String else { return } try? Navigator.navigate(urn: urn)} This method is called when your app receives push notification payload and is running. The above code is relatively straightforward: it first tries to parse the urn information from the payload, then tells Navigator to do the job . Build and run the app on the device, since push notifications won‚Äôt work on the simulator. Log in to the app if prompted. Once on the main screen, grant push notification permissions to the app in order to receive alerts. You should see the device token logged to your Xcode console. Testing Push NotificationsIn this tutorial, you‚Äôll use a tool called PushNotifications to help you easily create push notifications for your app. Download the tool PushNotifications from here. This tool sends payloads directly to APNs. Choose iOS\\Token to use Token Authentication, you get that by creating and downloading your Key from Certificates, Identifiers &amp; Profiles. Browse for the .p8 auth key file that you downloaded earlier. Enter Team ID, you can check it by going to Membership Details Enter Key ID, this is the ID associated with the Key from the first step. Enter Bundle ID and device token. Paste the following into as. It is a traditional payload associated with the URN. 123456{ \"aps\":{ \"alert\":\"You become a celebrity on PhotoFeed, checkout your profile now\", \"urn\": \"user:self\" }} Since you‚Äôre debugging with Xcode, select Sandbox as environment. Tap Send now. If your app is in the background, an alert will appear. Tapping it will take you to your app and show you your user profile. Bravo! You just implemented deep linking in push notification, thanks again to the URL routing. Read moreHere is the final project with all the code from this tutorial. You now understand central routing patterns, have mastered Compass and even refactored a real-world app. However, there is no silver bullet that works well for all apps. You need to understand your requirements and adjust accordingly. If you want to learn more about other navigation patterns, here are a few suggestions: Coordinator Flow controller Routing in VIPER Remember, it‚Äôs not only about the code, but also about the user experience that your app provides. So please make sure you conform to the guidelines Navigation in Human Interface Guidelines iOS.","link":"/blog/URL-Routing-with-Compass/"},{"title":"Learning VoIP, RTP and SIP (aka awesome pjsip)","text":"Issue #284 Before working with Windows Phone and iOS, my life involved researching VoIP. That was to build a C library for voice over IP functionality for a very popular app, and that was how I got started in open source. The library I was working with were Linphone and pjsip. I learn a lot of UDP and SIP protocol, how to build C library for consumption in iOS, Android and Windows Phone, how challenging it is to support C++ component and thread pool in Windows Phone 8, how to tweak entropy functionality in OpenSSL to make it compile in Windows Phone 8, how hard it was to debug C code with Android NDK. It was time when I needed to open Visual Studio, Xcode and Eclipse IDE at the same time, joined mailing list and followed gmane. Lots of good memories. Today I find that those bookmarks I made are still available on Safari, so I think I should share here. I need to remove many articles because they are outdated or not available anymore. These are the resources that I actually read and used, not some random links. Hopefully you can find something useful. This post focuses more about resources for pjsip on client and how to talk directly and with/without a proxy server. First of allHere are some of the articles and open sources made by me regarding VoIP, hope you find it useful rtpproxy: I forked from http://www.rtpproxy.org/ and changed code to make it support for IP handover. It means the proxy can handle when IP changes from 3G, 4G to Wifi and to reduce chances of attacks Jitter buffer in VoIP How to calculate packet size in VoIP VoIP overview Voice over Internet Protocol (also voice over IP, VoIP or IP telephony) is a methodology and group of technologies for the delivery of voice communications and multimedia sessions over Internet Protocol (IP) networks, such as the Internet Voice over IP Overview: introduction to VoIP concepts, H.323 and SIP protocol Voice over Internet Protocol the wikipedia article contains very foundation knowledge Open Source VOIP Software: this is a must read. Lots of foundation articles about client and server functionalities, SIP, TURN, RTP, and many open sources framworks VOIP call bandwidth: a very key factor in VoIP application is bandwidth consumption, it‚Äôs good to not going far beyond the accepted limit Routers SIP ALG: this is the most annoying, because there is NAT and many types of NAT, also router with SIP ALG SIP SIMPLE Client SDK: introduction to SIP core library, but it gives an overview of how SIP The Session Initiation Protocol (SIP) is a communications protocol for signaling and controlling multimedia communication sessions in applications of Internet telephony for voice and video calls, in private IP telephone systems, as well as in instant messaging over Internet Protocol (IP) networks. Session Initiation Protocol RFC 3261: to understand SIP, we need to read its standard. I don‚Äôt know how many times I read this RFC. OpenSIPS: OpenSIPS is a multi-functional, multi-purpose signaling SIP server SIP protocol structure through an example: this is a must read, it shows very basic but necessary knowledge Relation among Call, Dialog, Transaction &amp; Message: basic concepts about call, dialog, transaction and message microSIP: Open source portable SIP softphone for Windows based on PJSIP stack. I used to use this to test my pjsip tweaked library before building it for mobile What is SIP: introduction to SIP written by the author of CSipSimple What is SIP proxy server SIP by Wireshack: introduction to SIP written by Wireshack. I used Wireshack a lot to intercept and debug SIP sessions Solving the Firewall/NAT Traversal Issue of SIP: this shows how NAT can be a problem to SIP applications and how NAT traversal works Introduction to SIP for Java, C#, and VB Developers SipML5 SIP client written in Javascript SIP Retransmissions: what and how to handle retransmission draft-ietf-sipping-dialogusage-06: this is a draft about Multiple Dialog Usages in the Session Initiation Protocol Creating and sending INVITE and CANCEL SIP text messages: SIP also supports sending text message, not just audio and video packages. This isa good for chat application SIP server Kamailio: this is the server that I used, and it plays well with lots of standard SIP clients, including pjsip. Debugging on this server was also a fun story Configuring NAT traversal using Kamailio 3.1 and the Rtpproxy server: I don‚Äôt know how many times I had read this post How to set up and use SIP Server on Windows: I used this to test a working SIP server on Windows Build your own VoIP System OpenSIPS/Kamailio serving far end nat traversal: discussion about how Kamailio deals with NAT traversal NAT Traversal Module: how NAT traversal works in Kamailio as a module RFCRTP, SIP clients and server need to conform to some predefined protocols to meet standard and to be able to talk with each other. You need to read RFC a lot, besides you need to read some drafts. RFC 3550 - RTP: A Transport Protocol for Real-Time Applications RFC 3261 - SIP: Session Initiation Protocol Symmetric NAT Traversal using STUN RFC 3842 - A Message Summary and Message Waiting Indication Event Package for the Session Initiation Protocol (SIP) NATNAT solves the problem with lack of IP, but it causes lots of problem for SIP applications, and for me as well üòÇ Network address translation: Network address translation (NAT) is a method of remapping one IP address space into another by modifying network address information in the IP header of packets while they are in transit across a traffic routing device SIP and NAT: Why is it a problem? Configuring Port Address Translation (PAT): how to configure port forwarding Types Of NAT Explained (Port Restricted NAT, etc): This is a must read. I didn‚Äôt expect there‚Äôs many kinds of NAT in real life, and how each type affects SIP application in its own way One Way Audio SIP Fix: sometimes we get the problem that only 1 person can speak, this talks about why NAT traversal for the SIP protocol: explains RTP, SIP and NAT A New Method for Symmetric NAT Traversal in UDP and TCP SIP NAT Traversal: This is a must read. How to make SIP work under NAT NAT and Firewall Traversal with STUN / TURN / ICE: pjsip and Kamailio actually supports STUN, TURN and ICE protocol. Learn about these concepts and how to make it work Introduction to Network Address Translation (NAT) and NAT Traversal TCPLearn how TCP helps SIP in initiating session and to turn in TCP mode for package sending Transmission Control Protocol: The Transmission Control Protocol (TCP) is one of the main protocols of the Internet protocol suite. It originated in the initial network implementation in which it complemented the Internet Protocol (IP) Datagram socket: A datagram socket is a type of network socket which provides a connectionless point for sending or receiving data packets.[2] Each packet sent or received on a datagram socket is individually addressed and routed TCP RST packet details: learn the important of RST bit RST packet sent from application when TCP connection not getting closed properly Why will a TCP Server send a FIN immediately after accepting a connection? Where do resets come from? (No, the stork does not bring them.): learn about 3 ways handshake in TCP connection TCP listen() Backlog Sockets and Ports: Do not confuse between socket and port TCP Wake-Up: Reducing Keep-Alive Traffic in Mobile IPv4 and IPsec NAT Traversal failed to register using tcp only TCP vs UDP TLSLearn about Transport Layer Security and SSL, especially openSSL for how to secure SIP connection. The interesting thing is to read code in pjsip about how it uses openSSL to encrypt messages Configuring PJSIP with TLS Why TLS for SIP SIP Signaling Over TLS SSL/TLS certificates: What you need to know Configuring TLS support in Kamailio 3.1 ‚Äî Howto: learn how to enable TLS mode in Kamailio SIP TLS: how to configure TLS in Asterisk ICELearn about Interactive Connectivity Establishment, another way to workaround NAT SIP 2012:: ICE ‚Äî NAT traversal for media Introducing pjnath ‚Äî Open Source ICE, STUN, and TURN for NAT Traversal ICE Media Transport STUN and TURNLearn about Session Traversal Utilities for NAT and Traversal Using Relays around NAT, another way to workaround NAT STUN: STUN (Simple Traversal of UDP through NATs (Network Address Translation)) is a protocol for assisting devices behind a NAT firewall or router with their packet routing. RFC 5389 redefines the term STUN as ‚ÄòSession Traversal Utilities for NAT‚Äô. What is STUN and does it need a port-forwarded server? TURN server ALGLearn about [Application Layer Gateway](http://Application Layer Gateway) and how it affects your SIP application. This component knows how to deal and modify your SIP message, so it might introduce unexpected behaviours. What is SIP ALG and why does Gradwell recommend that I turn it off? Understanding the SIP ALG What Is Sip ALG (Application Layer Gateway) Voip firewall About the SIP ALG Understanding SIP with Network Address Translation (NAT): This is a must read, a very thorough document Voice qualityLearn about voice quality, bandwidth and fixing delay in audio VoIP ‚Äî fixing voice quality What is Delay in VoIP? Understanding Delay in Packet Voice Networks Reducing the SIP Packet Size in VoIP What Affects Voice Quality in VoIP Calls 5 Curable Causes of Poor VoIP Call Quality RTP, Jitter and audio quality in VoIP: learn about the important of jitter and RTP An Adaptive Codec Switching Scheme for SIP-based VoIP: explain codec switching during call in SIP based VoIP How to master VoIP bandwidth fundamentals Voice Over IP ‚Äî Per Call Bandwidth Consumption EchoThis is a very common problem in VoIP, sometimes we hear voice from the other and also from us. Learn how echo is made, and how to effectively do echo cancellation Echo Analysis for Voice over IP Echo Cancellation: How to use Speex to cancel echo Echo suppression and cancellation Echo and Sidetone: A telephone is a duplex device, meaning it is both transmitting and receiving on the same pair of wires. The phone network must ensure that not too much of the caller‚Äôs voice is fed back into his or her receiver VoIP Echo and how to correct it Causes of Echo How software echo canceller works?: I asked about how we use software to do echo cancellation Dual ToneLearn how to generate dual tone to make signal in telecommunication DTMF (Dual-Tone Multi-Frequency) The dance of DTMF, SIP &amp; RFC 2833 ‚Äî An introduction How can I send inband DTMF tones? pjsip PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. It combines signaling protocol (SIP) with rich multimedia framework and NAT traversal functionality into high level API that is portable and suitable for almost any type of systems ranging from desktops, embedded systems, to mobile handsets. PJSUA API ‚Äî High Level Softphone API: high level usage of pjsip pjsip library architecture pjsip documentation Stateful Operations: common functions to send request statefully Message Creation and Stateless Operations: functions related to send and receive messages Understanding Media Flow: this is a must read. The media layer is so important, it controls sound, codec and conference bridge. Getting Started: Building and Using PJSIP and PJMEDIA: This article describes how to download, customize, build, and use the open source PJSIP and PJMEDIA SIP and media stack Codec Framework: pjsip supports multiple codec Adaptive jitter buffer: this takes sometime to understand, but it plays an important part in making pjsip work properly regarding buffer handling PJSUA-API Accounts Management: how to register account in pjsua Building Dynamic Link Libraries (DLL/DSO): how to build pjsip as a dynamic library Compile time configuration: lots of configuration we can apply to pjsip Fast Memory Pool: pjsip has its own memory pool. It‚Äôs very interesting to look at the source code and learn something new SIP and Media Features Using SIP TCP Transport: How to enable TCP mode in SIP and to initiate SIP session Monochannel and multichannel audio frame converter: interesting read about mono and multi channel IOQueue: I/O Event Dispatching with Proactor Pattern: the code for this is very interesting and plays a fundamental in how pjsip handles events DNS Asynchronous/Caching Resolution Engine: how pjsip handles DNS resolution by itself Secure socket I/O: the code for this is important if you want to learn how to use SSL under the hood Multi-frequency tone generator: I learn a lot how pjsip uses sin wave to generate tone SIP SRV Server Resolution (RFC 3263 ‚Äî Locating SIP Servers): learn the mechanism for how pjsip finds a particular SIP server Exception Handling: how to do Try Catch in C Mutex Locks Order in PJSUA-LIB: how multiple locks at each layer helps ensure correction and avoid deadlocks. I had lots of nightmare debugging deadlocks with pjsip üò± Threadingpjsip uses Local Thread Storage which introduces very cool behaviors Thread ‚Äî Operating System Dependent Functionality Threads question: how pjlib handles thread Using Thread Local Storage: how to use TlsAlloc and TlsFree in Windows The Windows Processes and Threads 8 Example: Thread local storage in a Pthread program: how Pthread works Thread Local Storage: learn about pj_thread ResamplingHow to work with sample rate of the media stream Resample Port: how to perform resampling in pjmedia Resampling Algorithm: code to perform resampling Samples: Using Resample Port: very straightforward example to change sample rate of the media stream Memory and Performance Memory allocation strategy PJSIP ‚Äî High Performance Open Source SIP Stack Audio How to Record Audio with pjsua: how to use pjsua to record audio. Memory/Buffer-based Capture Port: believe me, you will jump into pjmedia_mem_capture_create a lot File Writer (Recorder): record audio to .wav file Using pjsua to create a mp3 stream AMR Audio Encoding: understands AMR encoding Audio Device API: how pjsip detects and use Audio device Sound Device Port: Media Port Connection Abstraction to the Sound Device audio bursting Buffer problem Problem with PJMEDIA‚Äôs play callback Audio Manipulation Algorithms: lots of cool algorithm written in C for audio manipulation. The hardest and most imporant one is probably Adaptive jitter buffer bad quality on iphone 2G with os 3.0: No one would use iPhone 2G now, but it‚Äôs good to be aware of older phones getting Underflow, buf_cnt=0, will generate 1 frame continuessly: how to handle underflow in pjmedia Measuring Sound Latency: This article describes how to measure both sound device latency and overall (end-to-end) latency of ‚Äãpjsua Checking for Network Impairments of Incoming RTP Packets Master/sound: How master sound works and deal with no sound on the mic input port VideoI learn a lot regarding video capture, ffmpeg and color space, especially YUV siphon ‚Äî VIdeoSupport.wiki: How siphon deals with video before pjsip 2.0 Video Device API; PJMEDIA Video Device API is a cross-platform video API appropriate for use with VoIP applications and many other types of video streaming applications. PJSUA-API Video: Uses video APIs in pjsua with pjsip 2.1.0 PJSIP Video User‚Äôs Guide: all you need to know about video support in pjsip Video streams: I can‚Äôt never forget pjmedia_vid_stream_create Video source duplicator: duplicate video data in the stream. AVI File Player: Video and audio playback from AVI file PJSIP Version 2.0 Release Notes: starting with 2.0, pjsip supports video. Good to read Video API for PJSUA-LIB How to make a loopback video call with AVI file? What is lib Swscale used for by ffmpeg programers? FFmpeg-iOS-build-script: details how to build ffmpeg for iOS CSipSimpleThere are many SIP client for mobile and desktop, microSIP, Jitsi, Linphone, Doubango, ‚Ä¶ They all follow strictly SIP standard and may have their own SIP core, for example microSIP uses pjsip, Linphone uses liblinphone, ‚Ä¶ Among that, I learn a lot from the Android client, CSipSimple, which offers very nice interface and have good functionalities. Unfortunately Google Code was closed, so I don‚Äôt know if the author has plan to do development on GitHub. I also participated a lot on the Google forum for user and dev. Thanks for Regis, I learn a lot about open source and that made me interested in open source. You can read What is a branded version I don‚Äôt make any money from csipsimple at all. It‚Äôs a pure opensource and free as in speech project.I develop it on my free time and just so that it benefit users.That‚Äôs the reason why the project is released under GPL license terms. I advise you to read carefully the license (you‚Äôll learn a lot of things on the spirit of the license and the project) : http://www.gnu.org/licenses/gpl.htmlTo sump up, the spirit of the GPL is that users should be always allowed to see the source code of the software they use, to use it the way they want and to redistribute it. RTP ProxyBecause of NAT or in case users want to talk via a proxy, then a RTP proxy is needed. RTPProxy follows standard and works well with Kamailio Making RTPproxy work Sippy B2BUA and RFC3261 SIP Stack rtpproxy(8) ‚Äî Linux man page rtpproxy address filling Other related articles Sample Rate and Bitrate: The Guts of Digital Audio VoIP Packet Size How to measure brandwith consumption of an rtp stream? Sending Reliable Provisional Responses SILK audio codec wrapper implementation conference bridge questions multiple audio devices, multiple calls, conferencing, recording and mix all of the above How to Know Offline Call Symmetric RTP Account specific NAT settings: STUN, ICE, and TURN SIP stories, part 3: INVITE retransmission TCP/TLS reconnect Configuring TCP keep alive and connection lifetime Max TCP connections VAD detection scenario Handle native capture preview Video orientation support Keep-alive mechanism for TCP and TLS transports Periodically transmit RTP packet on silence Conference bridge should transmit silence frame when level is zero Add user defined NAT hole-punching and keep-alive mechanism to media stream IP changeIP change during call can cause problem, such as when user goes from Wifi to 4G mode Proper way to handle Ip address changes in Android support WiFi and 3G simultaneously RTP and RTCPLearn about [Realtime transport control protocol](http://Real-time Transport Protocol) and how that works with RTP Voice over IP: RTP/RTCP ‚Äî The transport layer RTCP, RTP Control Protocol Protocol overview: RTP and RTCP The Multimedia Control Protocol RTCP Using Conference Bridge SIP and RTP Stack Media Transport RTP Session and Encapsulation (RFC 3550) CodecTo reduce payload size, we need to encode and decode the audio and video package. We usually use Speex and Opus. Also, it‚Äôs good to understand the .wav format Digital Audio ‚Äî Creating a WAV (RIFF) file Streaming Data from a WAV File Programming with Speex (the libspeex API) Speex narrowband mode Developing with libopus (API reference) Building pjsip for Windows Phone 8Windows Phone 8 introduces C++ component , changes in threading, VoIP and audio background mode. To do this I need to find another threadpool component and tweak openSSL a bit to make it compile on Windows Phone 8. I lost the source code so can‚Äôt upload the code to GitHub üò¢. Also many links broke because Nokia was not here any more Building for Other Platforms Getting Started: Building for UWP and Windows Phone 8.x Porting to New CPU Architecture: pjlib is the foundation of pjsip. Learn how to port it to another platform VoIP apps for Windows Phone 8 How to implement audio streaming for VoIP calls for Windows Phone 8 In-process, Out-of-process, and Remote Servers Basics of an IDL file Porting OpenSSL to Windows Phone 8Firstly, learn how to compile, use OpenSSL. How to call it from pjsip, and how to make it compile in Visual Studio for Windows Phone 8. I also learn the important of Winsock, how to port a library. I struggled a lot with porting openSSL to Windows RT, then to Windows Phone 8 A lot of links were broken üò¢ so I can‚Äôt paste them all here. An Introduction to OpenSSL Programming SSL Socket support in Windows Phone Building Secure Windows Phone 8 Apps ‚Äî APIs and Techniques Is Winsock available on Windows Phone 8? Why i am not been able to use all the header files (eg-&gt;ssl.h) under open source openssl library Getting Started with Winsock Building OpenSSL for Visual Studio How to Compile OpenSSL for Visual Studio 2010/2012 OpenSSL for Windows OpenSSL for Windows RT 2911: enhancement request: Windows RT support Need a fast random generator for c++ Window C/C++ Crypto API Examples and tips CryptGenRandom function EGD: The Entropy Gathering Daemon C and C++Since pjsip, rtpproxy and kamailio are all C and C++ code. I needed to have a good understanding about them, especially pointer and memory handling. We also needed to learn about compile flags for debug and release builds, how to use Make, how to make static and dynamic libraries. What does a const pointer-to-pointer mean in C and in C++? comp.lang.c Frequently Asked Questions: there‚Äôs lot of things about C we haven‚Äôt known about What is external linkage and internal linkage? Bit Twiddling Hacks: how to apply clever hacks with bit operators. Really really good reading here Better types in C++11 ‚Äî nullptr, enum classes (strongly typed enumerations) and cstdint Microsoft Visual C++ Static and Dynamic Libraries Managed C++ ‚Äî Learn by Example Preprocessor directives","link":"/blog/Learning-VoIP-RTP-and-SIP-(aka-awesome-pjsip)/"},{"title":"How to use xcodebuild","text":"Issue #544 man xcodebuild1man xcodebuild 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939XCODEBUILD(1) BSD General Commands Manual XCODEBUILD(1)NAME xcodebuild -- build Xcode projects and workspacesSYNOPSIS xcodebuild [-project name.xcodeproj] [[-target targetname] ... | -alltargets] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action ...] [buildsetting=value ...] [-userdefault=value ...] xcodebuild [-project name.xcodeproj] -scheme schemename [[-destination destinationspecifier] ...] [-destination-timeout value] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action ...] [buildsetting=value ...] [-userdefault=value ...] xcodebuild -workspace name.xcworkspace -scheme schemename [[-destination destinationspecifier] ...] [-destination-timeout value] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action ...] [buildsetting=value ...] [-userdefault=value ...] xcodebuild -version [-sdk [sdkfullpath | sdkname]] [infoitem] xcodebuild -showsdks xcodebuild -showBuildSettings [-project name.xcodeproj | [-workspace name.xcworkspace -scheme schemename]] xcodebuild -showdestinations [-project name.xcodeproj | [-workspace name.xcworkspace -scheme schemename]] xcodebuild -showTestPlans [-project name.xcodeproj | -workspace name.xcworkspace] -scheme schemename xcodebuild -list [-project name.xcodeproj | -workspace name.xcworkspace] xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path xcodebuild -exportNotarizedApp -archivePath xcarchivepath -exportPath destinationpath xcodebuild -exportLocalizations -project name.xcodeproj -localizationPath path [[-exportLanguage language] ...] xcodebuild -importLocalizations -project name.xcodeproj -localizationPath pathDESCRIPTION xcodebuild builds one or more targets contained in an Xcode project, or builds a scheme contained in an Xcode workspace or Xcode project. Usage To build an Xcode project, run xcodebuild from the directory containing your project (i.e. the directory containing the name.xcodeproj package). If you have multiple projects in the this directory you will need to use -project to indicate which project should be built. By default, xcodebuild builds the first target listed in the project, with the default build configu- ration. The order of the targets is a property of the project and is the same for all users of the project. To build an Xcode workspace, you must pass both the -workspace and -scheme options to define the build. The parameters of the scheme will control which targets are built and how they are built, although you may pass other options to xcodebuild to over- ride some parameters of the scheme. There are also several options that display info about the installed version of Xcode or about projects or workspaces in the local directory, but which do not initiate an action. These include -list, -showBuildSettings, -showdestinations, -showsdks, -showTestPlans, -usage, and -version. Options -project name.xcodeproj Build the project name.xcodeproj. Required if there are multiple project files in the same directory. -target targetname Build the target specified by targetname. -alltargets Build all the targets in the specified project. -workspace name.xcworkspace Build the workspace name.xcworkspace. -scheme schemename Build the scheme specified by schemename. Required if building a workspace. -destination destinationspecifier Use the destination device described by destinationspecifier. Defaults to a destination that is compatible with the selected scheme. See the Destinations section below for more details. -destination-timeout timeout Use the specified timeout when searching for a destination device. The default is 30 seconds. -configuration configurationname Use the build configuration specified by configurationname when building each target. -arch architecture Use the architecture specified by architecture when building each target. -sdk [sdkfullpath | sdkname] Build an Xcode project or workspace against the specified SDK, using build tools appropriate for that SDK. The argument may be an absolute path to an SDK, or the canonical name of an SDK. -showsdks Lists all available SDKs that Xcode knows about, including their canonical names suitable for use with -sdk. Does not initiate a build. -showBuildSettings Lists the build settings in a project or workspace and scheme. Does not initiate a build. Use with -project or -workspace and -scheme. -showdestinations Lists the valid destinations for a project or workspace and scheme. Does not initiate a build. Use with -project or -workspace and -scheme. -showBuildTimingSummary Display a report of the timings of all the commands invoked during the build. -showTestPlans Lists the test plans (if any) associated with the specified scheme. Does not initiate a build. Use with -scheme. -list Lists the targets and configurations in a project, or the schemes in a workspace. Does not initiate a build. Use with -project or -workspace. -enableAddressSanitizer [YES | NO] Turns the address sanitizer on or off. This overrides the setting for the launch action of a scheme in a workspace. -enableThreadSanitizer [YES | NO] Turns the thread sanitizer on or off. This overrides the setting for the launch action of a scheme in a workspace. -enableUndefinedBehaviorSanitizer [YES | NO] Turns the undefined behavior sanitizer on or off. This overrides the setting for the launch action of a scheme in a workspace. -enableCodeCoverage [YES | NO] Turns code coverage on or off during testing. This overrides the setting for the test action of a scheme in a workspace. -testLanguage language Specifies ISO 639-1 language during testing. This overrides the setting for the test action of a scheme in a workspace. -testRegion region Specifies ISO 3166-1 region during testing. This overrides the setting for the test action of a scheme in a workspace. -derivedDataPath path Overrides the folder that should be used for derived data when performing an action on a scheme in a workspace. -resultBundlePath path Writes a bundle to the specified path with results from performing an action on a scheme in a workspace. If the path already exists, xcodebuild will exit with an error. Intermediate directories will be created automatically. The bundle contains build logs, code coverage reports, XML property lists with test results, screenshots and other attachments col- lected during testing, and various diagnostic logs. -allowProvisioningUpdates Allow xcodebuild to communicate with the Apple Developer website. For automatically signed targets, xcodebuild will create and update profiles, app IDs, and certificates. For manually signed targets, xcodebuild will download missing or updated provisioning profiles. Requires a developer account to have been added in Xcode's Accounts preference pane. -allowProvisioningDeviceRegistration Allow xcodebuild to register your destination device on the Apple Developer website if necessary. Requires -allowProvisioningUpdates. -exportArchive Specifies that an archive should be distributed. Requires -archivePath and -exportOptionsPlist. For exporting, -exportPath is also required. Cannot be passed along with an action. -exportNotarizedApp Export an archive that has been notarized by Apple. Requires -archivePath and -exportPath. -archivePath xcarchivepath Specifies the path for the archive produced by the archive action, or specifies the archive that should be exported when -exportArchive or -exportNotarizedApp is passed. -exportPath destinationpath Specifies the destination for the exported product, including the name of the exported file. -exportOptionsPlist path Specifies options for -exportArchive. xcodebuild -help can print the full set of available options. -exportLocalizations Exports localizations to XLIFF files. Requires -project and -localizationPath. Cannot be passed along with an action. -importLocalizations Imports localizations from an XLIFF file. Requires -project and -localizationPath. Cannot be passed along with an action. -localizationPath Specifies a path to a directory or a single XLIFF localization file. -exportLanguage language Specifies optional ISO 639-1 languages included in a localization export. May be repeated to specify multiple languages. May be excluded to specify an export includes only development language strings. action ... Specify one or more actions to perform. Available actions are: build Build the target in the build root (SYMROOT). This is the default action, and is used if no action is given. build-for-testing Build the target and associated tests in the build root (SYMROOT). This will also produce an xctestrun file in the build root. This requires specifying a scheme. analyze Build and analyze a target or scheme from the build root (SYMROOT). This requires specifying a scheme. archive Archive a scheme from the build root (SYMROOT). This requires specifying a scheme. test Test a scheme from the build root (SYMROOT). This requires specifying a scheme and optionally a destination. test-without-building Test compiled bundles. If a scheme is provided with -scheme then the command finds bundles in the build root (SRCROOT). If an xctestrun file is provided with -xctestrun then the command finds bun- dles at paths specified in the xctestrun file. installsrc Copy the source of the project to the source root (SRCROOT). install Build the target and install it into the target's installation directory in the distribution root (DSTROOT). clean Remove build products and intermediate files from the build root (SYMROOT). -xcconfig filename Load the build settings defined in filename when building all targets. These settings will override all other settings, including settings passed individually on the command line. -xctestrun xctestrunpath Specifies test run parameters. Can only be used with the test-without-building action. Cannot be used with -workspace or -project. See &lt;x-man-page://5/xcodebuild.xctestrun&gt; for file format details. -testPlan test-plan-name Specifies which test plan associated with the scheme should be used for testing. Pass the name of the .xctestplan file without its extension. -skip-testing test-identifier, -only-testing test-identifier Constrain test targets, classes, or methods in test actions. -only-testing constrains a test action to only testing a specified identifier, and excluding all other identifiers. -skip-testing constrains a test action to skip testing a spec- ified identifier, but including all other identifiers. Test identifiers have the form TestTarget[/TestClass[/TestMethod]]. The TestTarget component of an identifier is the name of a unit or UI testing bundle as shown in the Test Navigator. An xcodebuild command can combine multiple constraint options, but -only-testing has precedence over -skip-testing. -skip-test-configuration test-configuration-name, -only-test-configuration test-configuration-name Constrain test configurations in test actions. -only-test-configuration constrains a test action to only test a specified test configuration within a test plan, and exclude all other test configurations. -skip-test-configuration constrains a test action to skip a specified test configuration, but include all other test configurations. Each test configuration name must match the name of a configuration specified in a test plan and is case-sensitive. An xcodebuild command can com- bine multiple constraint options, but -only-test-configuration has precedence over -skip-test-configuration. -disable-concurrent-destination-testing Do not run tests on the specified destinations concurrently. The full test suite will run to completion on a given desti- nation before it begins on the next. -maximum-concurrent-test-device-destinations number If multiple device destinations are specified (and -disable-concurrent-destination-testing is not passed), only test on number devices at a time. For example, if four iOS devices are specified, but number is 2, the full test suite will run on each device, but only two devices will be testing at a given time. -maximum-concurrent-test-simulator-destinations number If multiple simulator destinations are specified (and -disable-concurrent-destination-testing is not passed), only test on number simulators at a time. For example, if four iOS simulators are specified, but number is 2, the full test suite will run on each simulator, but only two simulators will be testing at a given time. -parallel-testing-enabled [YES | NO] Overrides the per-target setting in the scheme for running tests in parallel. -parallel-testing-worker-count number Spawn exactly number test runners when executing tests in parallel. Overrides -maximum-parallel-testing-workers, if it is specified. -maximum-parallel-testing-workers number Limit the number of test runners that will be spawned when running tests in parallel to number. -dry-run, -n Print the commands that would be executed, but do not execute them. -skipUnavailableActions Skip actions that cannot be performed instead of failing. This option is only honored if -scheme is passed. buildsetting=value Set the build setting buildsetting to value. A detailed reference of Xcode build settings can be found at: &lt;https://help.apple.com/xcode/mac/current/#/itcaec37c2a6&gt; -userdefault=value Set the user default userdefault to value. -toolchain [identifier | name] Use a given toolchain, specified with either an identifier or name. -quiet Do not print any output except for warnings and errors. -verbose Provide additional status output. -version Display version information for this install of Xcode. Does not initiate a build. When used in conjunction with -sdk, the version of the specified SDK is displayed, or all SDKs if -sdk is given no argument. Additionally, a single line of the reported version information may be returned if infoitem is specified. -license Show the Xcode and SDK license agreements. Allows for accepting the license agreements without launching Xcode itself, which is useful for headless systems. Must be run as a privileged user. -checkFirstLaunchStatus Check if any First Launch tasks need to be performed. -runFirstLaunch Install packages and agree to the license. -usage Displays usage information for xcodebuild. Destinations The -destination option takes as its argument a destination specifier describing the device (or devices) to use as a destina- tion. A destination specifier is a single argument consisting of a set of comma-separated key=value pairs. The -destination option may be specified multiple times to cause xcodebuild to perform the specified action on multiple destinations. Destination specifiers may include the platform key to specify one of the supported destination platforms. There are additional keys which should be supplied depending on the platform of the device you are selecting. Some devices may take time to look up. The -destination-timeout option can be used to specify the amount of time to wait before a device is considered unavailable. If unspecified, the default timeout is 30 seconds. Currently, xcodebuild supports these platforms: macOS The local Mac, referred to in the Xcode interface as My Mac, and which supports the following key: arch The architecture to use, either x86_64 (the default) or i386. variant The optional variant to use, e.g. Mac Catalyst. iOS An iOS device, which supports the following keys: id The identifier of the device to use, as shown in the Devices window. A valid destination specifier must provide either id or name, but not both. name The name of the device to use. A valid destination specifier must provide either id or name, but not both. iOS Simulator A simulated iOS device, which supports the following keys: id The identifier of the simulated device to use, as shown in the Devices window. A valid destination specifier must provide either id or name, but not both. name The name of the simulated device to use. A valid destination specifier must provide either id or name, but not both. OS When specifying the simulated device by name, the iOS version for that simulated device, such as 6.0, or the string latest (the default) to indicate the most recent version of iOS supported by this version of Xcode. watchOS A watchOS app is always built and deployed nested inside of an iOS app. To use a watchOS device as your des- tination, specify a scheme which is configured to run a WatchKit app, and specify the iOS platform destina- tion that is paired with the watchOS device you want to use. watchOS Simulator A watchOS Simulator app is always built and deployed nested inside of an iOS Simulator app. To use a watchOS Simulator device as your destination, specify a scheme which is configured to run a WatchKit app, and specify the iOS Simulator platform destination that is paired with the watchOS Simulator device you want to use. tvOS A tvOS device, which supports the following keys: id The identifier of the device to use, as shown in the Devices window. A valid destination specifier must provide either id or name, but not both. name The name of the device to use. A valid destination specifier must provide either id or name, but not both. tvOS Simulator A simulated tvOS device, which supports the following keys: id The identifier of the simulated device to use, as shown in the Devices window. A valid destination specifier must provide either id or name, but not both. name The name of the simulated device to use. A valid destination specifier must provide either id or name, but not both. OS When specifying the simulated device by name, the tvOS version for that simulated device, such as 9.0, or the string latest (the default) to indicate the most recent version of tvOS supported by this ver- sion of Xcode. Some actions (such as building) may be performed without an actual device present. To build against a platform generically instead of a specific device, the destination specifier may be prefixed with the optional string &quot;generic/&quot;, indicating that the platform should be targeted generically. An example of a generic destination is the &quot;Generic iOS Device&quot; destination displayed in Xcode's UI when no physical iOS device is present. Testing on Multiple Destinations When more than one destination is specified with the -destination option, xcodebuild tests on those destinations concurrently. In this mode, xcodebuild automatically chooses the number of devices and simulators that are used simultaneously. All enabled tests in the scheme or xctestrun file are run on each destination. Distributing Archives The -exportArchive option specifies that xcodebuild should distribute the archive specified by -archivePath using the options specified by -exportOptionsPlist. xcodebuild -help can print the full set of available inputs to -exportOptionsPlist. The product can either be uploaded to Apple or exported locally. The exported product will be placed at the path specified by -exportPath. Archives that have been uploaded to the Apple notary service can be distributed using the -exportNotarizedApp option. This spec- ifies that xcodebuild should export a notarized app from the archive specified by -archivePath and place the exported product at the path specified by -exportPath. If the archive has not completed processing by the notary service, or processing failed, then xcodebuild will exit and emit informational or error messages. When uploading an archive using the -exportArchive option, or exporting a notarized archive using the -exportNotarizedApp option, an Apple ID account belonging to the archive's development team is required. Enter the credentials for the Apple ID account using Xcode's Accounts preference pane before invoking xcodebuild. Environment Variables The following environment variables affect the execution of xcodebuild: XCODE_XCCONFIG_FILE Set to a path to a file, build settings in that file will be loaded and used when building all targets. These settings will override all other settings, including settings passed individually on the command line, and those in the file passed with the -xcconfig option. Exit Codes xcodebuild exits with codes defined by sysexits(3). It will exit with EX_OK on success. On failure, it will commonly exit with EX_USAGE if any options appear malformed, EX_NOINPUT if any input files cannot be found, EX_IOERR if any files cannot be read or written, and EX_SOFTWARE if the commands given to xcodebuild fail. It may exit with other codes in less common scenarios.EXAMPLES xcodebuild clean install Cleans the build directory; then builds and installs the first target in the Xcode project in the directory from which xcodebuild was started. xcodebuild -project MyProject.xcodeproj -target Target1 -target Target2 -configuration Debug Builds the targets Target1 and Target2 in the project MyProject.xcodeproj using the Debug configuration. xcodebuild -target MyTarget OBJROOT=/Build/MyProj/Obj.root SYMROOT=/Build/MyProj/Sym.root Builds the target MyTarget in the Xcode project in the directory from which xcodebuild was started, putting intermedi- ate files in the directory /Build/MyProj/Obj.root and the products of the build in the directory /Build/MyProj/Sym.root. xcodebuild -sdk macosx10.6 Builds the Xcode project in the directory from which xcodebuild was started against the macOS 10.6 SDK. The canonical names of all available SDKs can be viewed using the -showsdks option. xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme Builds the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace. xcodebuild archive -workspace MyWorkspace.xcworkspace -scheme MyScheme Archives the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace. xcodebuild build-for-testing -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination generic/platform=iOS Build tests and associated targets in the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace using the generic iOS device destination. The command also writes test parameters from the scheme to an xctestrun file in the built products directory. xcodebuild test-without-building -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=iOS Simulator,name=iPhone 5s' -destination 'platform=iOS,name=My iPad' Tests the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace using both the iOS Simulator and the device named iPhone 5s for the latest version of iOS. The command assumes the test bundles are in the build root (SYMROOT). (Note that the shell requires arguments to be quoted or otherwise escaped if they contain spaces.) xcodebuild test-without-building -xctestrun MyTestRun.xctestrun -destination 'platform=iOS Simulator,name=iPhone 5s' -destination 'platform=iOS,name=My iPad' Tests using both the iOS Simulator and the device named iPhone 5s. Test bundle paths and other test parameters are specified in MyTestRun.xctestrun. The command requires project binaries and does not require project source code. xcodebuild test -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=macOS,arch=x86_64' Tests the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace using the destination described as My Mac 64-bit in Xcode.XCODEBUILD(1) BSD General Commands Manual XCODEBUILD(1)NAME xcodebuild -- build Xcode projects and workspacesSYNOPSIS xcodebuild [-project name.xcodeproj] [[-target targetname] ... | -alltargets] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action ...] [buildsetting=value ...] [-userdefault=value ...] xcodebuild [-project name.xcodeproj] -scheme schemename [[-destination destinationspecifier] ...] [-destination-timeout value] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action ...] [buildsetting=value ...] [-userdefault=value ...] xcodebuild -workspace name.xcworkspace -scheme schemename [[-destination destinationspecifier] ...] [-destination-timeout value] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action ...] [buildsetting=value ...] [-userdefault=value ...] xcodebuild -version [-sdk [sdkfullpath | sdkname]] [infoitem] xcodebuild -showsdks xcodebuild -showBuildSettings [-project name.xcodeproj | [-workspace name.xcworkspace -scheme schemename]] xcodebuild -showdestinations [-project name.xcodeproj | [-workspace name.xcworkspace -scheme schemename]] xcodebuild -showTestPlans [-project name.xcodeproj | -workspace name.xcworkspace] -scheme schemename xcodebuild -list [-project name.xcodeproj | -workspace name.xcworkspace] xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path xcodebuild -exportNotarizedApp -archivePath xcarchivepath -exportPath destinationpath xcodebuild -exportLocalizations -project name.xcodeproj -localizationPath path [[-exportLanguage language] ...] xcodebuild -importLocalizations -project name.xcodeproj -localizationPath pathDESCRIPTION xcodebuild builds one or more targets contained in an Xcode project, or builds a scheme contained in an Xcode workspace or Xcode project. Usage To build an Xcode project, run xcodebuild from the directory containing your project (i.e. the directory containing the name.xcodeproj package). If you have multiple projects in the this directory you will need to use -project to indicate which project should be built. By default, xcodebuild builds the first target listed in the project, with the default build configu- ration. The order of the targets is a property of the project and is the same for all users of the project. To build an Xcode workspace, you must pass both the -workspace and -scheme options to define the build. The parameters of the scheme will control which targets are built and how they are built, although you may pass other options to xcodebuild to over- ride some parameters of the scheme. There are also several options that display info about the installed version of Xcode or about projects or workspaces in the local directory, but which do not initiate an action. These include -list, -showBuildSettings, -showdestinations, -showsdks, -showTestPlans, -usage, and -version. Options -project name.xcodeproj Build the project name.xcodeproj. Required if there are multiple project files in the same directory. -target targetname Build the target specified by targetname. -alltargets Build all the targets in the specified project. -workspace name.xcworkspace Build the workspace name.xcworkspace. -scheme schemename Build the scheme specified by schemename. Required if building a workspace. -destination destinationspecifier Use the destination device described by destinationspecifier. Defaults to a destination that is compatible with the selected scheme. See the Destinations section below for more details. -destination-timeout timeout Use the specified timeout when searching for a destination device. The default is 30 seconds. -configuration configurationname Use the build configuration specified by configurationname when building each target. -arch architecture Use the architecture specified by architecture when building each target. -sdk [sdkfullpath | sdkname] Build an Xcode project or workspace against the specified SDK, using build tools appropriate for that SDK. The argument may be an absolute path to an SDK, or the canonical name of an SDK. -showsdks Lists all available SDKs that Xcode knows about, including their canonical names suitable for use with -sdk. Does not initiate a build. -showBuildSettings Lists the build settings in a project or workspace and scheme. Does not initiate a build. Use with -project or -workspace and -scheme. -showdestinations Lists the valid destinations for a project or workspace and scheme. Does not initiate a build. Use with -project or -workspace and -scheme. -showBuildTimingSummary Display a report of the timings of all the commands invoked during the build. -showTestPlans Lists the test plans (if any) associated with the specified scheme. Does not initiate a build. Use with -scheme. -list Lists the targets and configurations in a project, or the schemes in a workspace. Does not initiate a build. Use with -project or -workspace. -enableAddressSanitizer [YES | NO] Turns the address sanitizer on or off. This overrides the setting for the launch action of a scheme in a workspace. -enableThreadSanitizer [YES | NO] Turns the thread sanitizer on or off. This overrides the setting for the launch action of a scheme in a workspace. -enableUndefinedBehaviorSanitizer [YES | NO] Turns the undefined behavior sanitizer on or off. This overrides the setting for the launch action of a scheme in a workspace. -enableCodeCoverage [YES | NO] Turns code coverage on or off during testing. This overrides the setting for the test action of a scheme in a workspace. -testLanguage language Specifies ISO 639-1 language during testing. This overrides the setting for the test action of a scheme in a workspace. -testRegion region Specifies ISO 3166-1 region during testing. This overrides the setting for the test action of a scheme in a workspace. -derivedDataPath path Overrides the folder that should be used for derived data when performing an action on a scheme in a workspace. -resultBundlePath path Writes a bundle to the specified path with results from performing an action on a scheme in a workspace. If the path already exists, xcodebuild will exit with an error. Intermediate directories will be created automatically. The bundle contains build logs, code coverage reports, XML property lists with test results, screenshots and other attachments col- lected during testing, and various diagnostic logs. -allowProvisioningUpdates Allow xcodebuild to communicate with the Apple Developer website. For automatically signed targets, xcodebuild will create and update profiles, app IDs, and certificates. For manually signed targets, xcodebuild will download missing or updated provisioning profiles. Requires a developer account to have been added in Xcode's Accounts preference pane. -allowProvisioningDeviceRegistration Allow xcodebuild to register your destination device on the Apple Developer website if necessary. Requires -allowProvisioningUpdates. -exportArchive Specifies that an archive should be distributed. Requires -archivePath and -exportOptionsPlist. For exporting, -exportPath is also required. Cannot be passed along with an action. -exportNotarizedApp Export an archive that has been notarized by Apple. Requires -archivePath and -exportPath. -archivePath xcarchivepath Specifies the path for the archive produced by the archive action, or specifies the archive that should be exported when -exportArchive or -exportNotarizedApp is passed. -exportPath destinationpath Specifies the destination for the exported product, including the name of the exported file. -exportOptionsPlist path Specifies options for -exportArchive. xcodebuild -help can print the full set of available options. -exportLocalizations Exports localizations to XLIFF files. Requires -project and -localizationPath. Cannot be passed along with an action. -importLocalizations Imports localizations from an XLIFF file. Requires -project and -localizationPath. Cannot be passed along with an action. -localizationPath Specifies a path to a directory or a single XLIFF localization file. -exportLanguage language Specifies optional ISO 639-1 languages included in a localization export. May be repeated to specify multiple languages. May be excluded to specify an export includes only development language strings. action ... Specify one or more actions to perform. Available actions are: build Build the target in the build root (SYMROOT). This is the default action, and is used if no action is given. build-for-testing Build the target and associated tests in the build root (SYMROOT). This will also produce an xctestrun file in the build root. This requires specifying a scheme. analyze Build and analyze a target or scheme from the build root (SYMROOT). This requires specifying a scheme. archive Archive a scheme from the build root (SYMROOT). This requires specifying a scheme. test Test a scheme from the build root (SYMROOT). This requires specifying a scheme and optionally a destination. test-without-building Test compiled bundles. If a scheme is provided with -scheme then the command finds bundles in the build root (SRCROOT). If an xctestrun file is provided with -xctestrun then the command finds bun- dles at paths specified in the xctestrun file. installsrc Copy the source of the project to the source root (SRCROOT). install Build the target and install it into the target's installation directory in the distribution root (DSTROOT). clean Remove build products and intermediate files from the build root (SYMROOT). -xcconfig filename Load the build settings defined in filename when building all targets. These settings will override all other settings, including settings passed individually on the command line. -xctestrun xctestrunpath Specifies test run parameters. Can only be used with the test-without-building action. Cannot be used with -workspace or -project. See &lt;x-man-page://5/xcodebuild.xctestrun&gt; for file format details. -testPlan test-plan-name Specifies which test plan associated with the scheme should be used for testing. Pass the name of the .xctestplan file without its extension. -skip-testing test-identifier, -only-testing test-identifier Constrain test targets, classes, or methods in test actions. -only-testing constrains a test action to only testing a specified identifier, and excluding all other identifiers. -skip-testing constrains a test action to skip testing a spec- ified identifier, but including all other identifiers. Test identifiers have the form TestTarget[/TestClass[/TestMethod]]. The TestTarget component of an identifier is the name of a unit or UI testing bundle as shown in the Test Navigator. An xcodebuild command can combine multiple constraint options, but -only-testing has precedence over -skip-testing. -skip-test-configuration test-configuration-name, -only-test-configuration test-configuration-name Constrain test configurations in test actions. -only-test-configuration constrains a test action to only test a specified test configuration within a test plan, and exclude all other test configurations. -skip-test-configuration constrains a test action to skip a specified test configuration, but include all other test configurations. Each test configuration name must match the name of a configuration specified in a test plan and is case-sensitive. An xcodebuild command can com- bine multiple constraint options, but -only-test-configuration has precedence over -skip-test-configuration. -disable-concurrent-destination-testing Do not run tests on the specified destinations concurrently. The full test suite will run to completion on a given desti- nation before it begins on the next. -maximum-concurrent-test-device-destinations number If multiple device destinations are specified (and -disable-concurrent-destination-testing is not passed), only test on number devices at a time. For example, if four iOS devices are specified, but number is 2, the full test suite will run on each device, but only two devices will be testing at a given time. -maximum-concurrent-test-simulator-destinations number If multiple simulator destinations are specified (and -disable-concurrent-destination-testing is not passed), only test on number simulators at a time. For example, if four iOS simulators are specified, but number is 2, the full test suite will run on each simulator, but only two simulators will be testing at a given time. -parallel-testing-enabled [YES | NO] Overrides the per-target setting in the scheme for running tests in parallel. -parallel-testing-worker-count number Spawn exactly number test runners when executing tests in parallel. Overrides -maximum-parallel-testing-workers, if it is specified. -maximum-parallel-testing-workers number Limit the number of test runners that will be spawned when running tests in parallel to number. -dry-run, -n Print the commands that would be executed, but do not execute them. -skipUnavailableActions Skip actions that cannot be performed instead of failing. This option is only honored if -scheme is passed. buildsetting=value Set the build setting buildsetting to value. A detailed reference of Xcode build settings can be found at: &lt;https://help.apple.com/xcode/mac/current/#/itcaec37c2a6&gt; -userdefault=value Set the user default userdefault to value. -toolchain [identifier | name] Use a given toolchain, specified with either an identifier or name. -quiet Do not print any output except for warnings and errors. -verbose Provide additional status output. -version Display version information for this install of Xcode. Does not initiate a build. When used in conjunction with -sdk, the version of the specified SDK is displayed, or all SDKs if -sdk is given no argument. Additionally, a single line of the reported version information may be returned if infoitem is specified. -license Show the Xcode and SDK license agreements. Allows for accepting the license agreements without launching Xcode itself, which is useful for headless systems. Must be run as a privileged user. -checkFirstLaunchStatus Check if any First Launch tasks need to be performed. -runFirstLaunch Install packages and agree to the license. -usage Displays usage information for xcodebuild. Destinations The -destination option takes as its argument a destination specifier describing the device (or devices) to use as a destina- tion. A destination specifier is a single argument consisting of a set of comma-separated key=value pairs. The -destination option may be specified multiple times to cause xcodebuild to perform the specified action on multiple destinations. Destination specifiers may include the platform key to specify one of the supported destination platforms. There are additional keys which should be supplied depending on the platform of the device you are selecting. Some devices may take time to look up. The -destination-timeout option can be used to specify the amount of time to wait before a device is considered unavailable. If unspecified, the default timeout is 30 seconds. Currently, xcodebuild supports these platforms: macOS The local Mac, referred to in the Xcode interface as My Mac, and which supports the following key: arch The architecture to use, either x86_64 (the default) or i386. variant The optional variant to use, e.g. Mac Catalyst. iOS An iOS device, which supports the following keys: id The identifier of the device to use, as shown in the Devices window. A valid destination specifier must provide either id or name, but not both. name The name of the device to use. A valid destination specifier must provide either id or name, but not both. iOS Simulator A simulated iOS device, which supports the following keys: id The identifier of the simulated device to use, as shown in the Devices window. A valid destination specifier must provide either id or name, but not both. name The name of the simulated device to use. A valid destination specifier must provide either id or name, but not both. OS When specifying the simulated device by name, the iOS version for that simulated device, such as 6.0, or the string latest (the default) to indicate the most recent version of iOS supported by this version of Xcode. watchOS A watchOS app is always built and deployed nested inside of an iOS app. To use a watchOS device as your des- tination, specify a scheme which is configured to run a WatchKit app, and specify the iOS platform destina- tion that is paired with the watchOS device you want to use. watchOS Simulator A watchOS Simulator app is always built and deployed nested inside of an iOS Simulator app. To use a watchOS Simulator device as your destination, specify a scheme which is configured to run a WatchKit app, and specify the iOS Simulator platform destination that is paired with the watchOS Simulator device you want to use. tvOS A tvOS device, which supports the following keys: id The identifier of the device to use, as shown in the Devices window. A valid destination specifier must provide either id or name, but not both. name The name of the device to use. A valid destination specifier must provide either id or name, but not both. tvOS Simulator A simulated tvOS device, which supports the following keys: id The identifier of the simulated device to use, as shown in the Devices window. A valid destination specifier must provide either id or name, but not both. name The name of the simulated device to use. A valid destination specifier must provide either id or name, but not both. OS When specifying the simulated device by name, the tvOS version for that simulated device, such as 9.0, or the string latest (the default) to indicate the most recent version of tvOS supported by this ver- sion of Xcode. Some actions (such as building) may be performed without an actual device present. To build against a platform generically instead of a specific device, the destination specifier may be prefixed with the optional string &quot;generic/&quot;, indicating that the platform should be targeted generically. An example of a generic destination is the &quot;Generic iOS Device&quot; destination displayed in Xcode's UI when no physical iOS device is present. Testing on Multiple Destinations When more than one destination is specified with the -destination option, xcodebuild tests on those destinations concurrently. In this mode, xcodebuild automatically chooses the number of devices and simulators that are used simultaneously. All enabled tests in the scheme or xctestrun file are run on each destination. Distributing Archives The -exportArchive option specifies that xcodebuild should distribute the archive specified by -archivePath using the options specified by -exportOptionsPlist. xcodebuild -help can print the full set of available inputs to -exportOptionsPlist. The product can either be uploaded to Apple or exported locally. The exported product will be placed at the path specified by -exportPath. Archives that have been uploaded to the Apple notary service can be distributed using the -exportNotarizedApp option. This spec- ifies that xcodebuild should export a notarized app from the archive specified by -archivePath and place the exported product at the path specified by -exportPath. If the archive has not completed processing by the notary service, or processing failed, then xcodebuild will exit and emit informational or error messages. When uploading an archive using the -exportArchive option, or exporting a notarized archive using the -exportNotarizedApp option, an Apple ID account belonging to the archive's development team is required. Enter the credentials for the Apple ID account using Xcode's Accounts preference pane before invoking xcodebuild. Environment Variables The following environment variables affect the execution of xcodebuild: XCODE_XCCONFIG_FILE Set to a path to a file, build settings in that file will be loaded and used when building all targets. These settings will override all other settings, including settings passed individually on the command line, and those in the file passed with the -xcconfig option. Exit Codes xcodebuild exits with codes defined by sysexits(3). It will exit with EX_OK on success. On failure, it will commonly exit with EX_USAGE if any options appear malformed, EX_NOINPUT if any input files cannot be found, EX_IOERR if any files cannot be read or written, and EX_SOFTWARE if the commands given to xcodebuild fail. It may exit with other codes in less common scenarios.EXAMPLES xcodebuild clean install Cleans the build directory; then builds and installs the first target in the Xcode project in the directory from which xcodebuild was started. xcodebuild -project MyProject.xcodeproj -target Target1 -target Target2 -configuration Debug Builds the targets Target1 and Target2 in the project MyProject.xcodeproj using the Debug configuration. xcodebuild -target MyTarget OBJROOT=/Build/MyProj/Obj.root SYMROOT=/Build/MyProj/Sym.root Builds the target MyTarget in the Xcode project in the directory from which xcodebuild was started, putting intermedi- ate files in the directory /Build/MyProj/Obj.root and the products of the build in the directory /Build/MyProj/Sym.root. xcodebuild -sdk macosx10.6 Builds the Xcode project in the directory from which xcodebuild was started against the macOS 10.6 SDK. The canonical names of all available SDKs can be viewed using the -showsdks option. xcodebuild -workspace MyWorkspace.xcworkspace -scheme MyScheme Builds the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace. xcodebuild archive -workspace MyWorkspace.xcworkspace -scheme MyScheme Archives the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace. xcodebuild build-for-testing -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination generic/platform=iOS Build tests and associated targets in the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace using the generic iOS device destination. The command also writes test parameters from the scheme to an xctestrun file in the built products directory. xcodebuild test-without-building -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=iOS Simulator,name=iPhone 5s' -destination 'platform=iOS,name=My iPad' Tests the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace using both the iOS Simulator and the device named iPhone 5s for the latest version of iOS. The command assumes the test bundles are in the build root (SYMROOT). (Note that the shell requires arguments to be quoted or otherwise escaped if they contain spaces.) xcodebuild test-without-building -xctestrun MyTestRun.xctestrun -destination 'platform=iOS Simulator,name=iPhone 5s' -destination 'platform=iOS,name=My iPad' Tests using both the iOS Simulator and the device named iPhone 5s. Test bundle paths and other test parameters are specified in MyTestRun.xctestrun. The command requires project binaries and does not require project source code. xcodebuild test -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=macOS,arch=x86_64' Tests the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace using the destination described as My Mac 64-bit in Xcode. xcodebuild test -workspace MyWorkspace.xcworkspace -scheme MyScheme -destination 'platform=macOS,arch=x86_64' -only-testing MyTests/FooTests/testFooWithBar Tests the scheme MyScheme in the Xcode workspace MyWorkspace.xcworkspace using the destination described as My Mac 64-bit in Xcode. Only the test testFooWithBar of the test suite FooTests, part of the MyTests testing bundle target, will be run. xcodebuild -exportArchive -archivePath MyMobileApp.xcarchive -exportPath ExportDestination -exportOptionsPlist 'export.plist' Exports the archive MyMobileApp.xcarchive to the path ExportDestination using the options specified in export.plist. xcodebuild -exportLocalizations -project MyProject.xcodeproj -localizationPath MyDirectory -exportLanguage zh-hans -exportLanguage es-MX Exports two XLIFF files to MyDirectory from MyProject.xcodeproj containing development language strings and transla- tions for Simplified Chinese and Mexican Spanish. xcodebuild -exportLocalizations -project MyProject.xcodeproj -localizationPath MyDirectory Export a single XLIFF file to MyDirectory from MyProject.xcodeproj containing only development language strings. (In this case, the -exportLanguage parameter has been excluded.) xcodebuild -importLocalizations -project MyProject.xcodeproj -localizationPath MyLocalizations.xliff Imports localizations from MyLocalizations.xliff into MyProject.xcodeproj. Translations with issues will be reported but not imported.SEE ALSO ibtool(1), sysexits(3), xcode-select(1), xcrun(1), xed(1) Xcode Builds Settings Reference &lt;https://help.apple.com/xcode/mac/current/#/itcaec37c2a6&gt;macOS June 20, 2016 macOS(END) xcodebuild ‚Äìhelp1xcodebuild --help 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156Usage: xcodebuild [-project &lt;projectname&gt;] [[-target &lt;targetname&gt;]...|-alltargets] [-configuration &lt;configurationname&gt;] [-arch &lt;architecture&gt;]... [-sdk [&lt;sdkname&gt;|&lt;sdkpath&gt;]] [-showBuildSettings [-json]] [&lt;buildsetting&gt;=&lt;value&gt;]... [&lt;buildaction&gt;]... xcodebuild [-project &lt;projectname&gt;] -scheme &lt;schemeName&gt; [-destination &lt;destinationspecifier&gt;]... [-configuration &lt;configurationname&gt;] [-arch &lt;architecture&gt;]... [-sdk [&lt;sdkname&gt;|&lt;sdkpath&gt;]] [-showBuildSettings [-json]] [-showdestinations] [&lt;buildsetting&gt;=&lt;value&gt;]... [&lt;buildaction&gt;]... xcodebuild -workspace &lt;workspacename&gt; -scheme &lt;schemeName&gt; [-destination &lt;destinationspecifier&gt;]... [-configuration &lt;configurationname&gt;] [-arch &lt;architecture&gt;]... [-sdk [&lt;sdkname&gt;|&lt;sdkpath&gt;]] [-showBuildSettings] [-showdestinations] [&lt;buildsetting&gt;=&lt;value&gt;]... [&lt;buildaction&gt;]... xcodebuild -version [-sdk [&lt;sdkfullpath&gt;|&lt;sdkname&gt;] [-json] [&lt;infoitem&gt;] ] xcodebuild -list [[-project &lt;projectname&gt;]|[-workspace &lt;workspacename&gt;]] [-json] xcodebuild -showsdks [-json] xcodebuild -exportArchive -archivePath &lt;xcarchivepath&gt; [-exportPath &lt;destinationpath&gt;] -exportOptionsPlist &lt;plistpath&gt; xcodebuild -exportNotarizedApp -archivePath &lt;xcarchivepath&gt; -exportPath &lt;destinationpath&gt; xcodebuild -exportLocalizations -localizationPath &lt;path&gt; -project &lt;projectname&gt; [-exportLanguage &lt;targetlanguage&gt;...[-includeScreenshots]] xcodebuild -importLocalizations -localizationPath &lt;path&gt; -project &lt;projectname&gt; xcodebuild -resolvePackageDependencies [-project &lt;projectname&gt;|-workspace &lt;workspacename&gt;] -clonedSourcePackagesDirPath &lt;path&gt; xcodebuild -create-xcframework [-help] [-framework &lt;path&gt;] [-library &lt;path&gt; [-headers &lt;path&gt;]] -output &lt;path&gt;Options: -usage print brief usage -help print complete usage -verbose provide additional status output -license show the Xcode and SDK license agreements -checkFirstLaunchStatus Check if any First Launch tasks need to be performed -runFirstLaunch install packages and agree to the license -project NAME build the project NAME -target NAME build the target NAME -alltargets build all targets -workspace NAME build the workspace NAME -scheme NAME build the scheme NAME -configuration NAME use the build configuration NAME for building each target -xcconfig PATH apply the build settings defined in the file at PATH as overrides -arch ARCH build each target for the architecture ARCH; this will override architectures defined in the project -sdk SDK use SDK as the name or path of the base SDK when building the project -toolchain NAME use the toolchain with identifier or name NAME -destination DESTINATIONSPECIFIER use the destination described by DESTINATIONSPECIFIER (a comma-separated set of key=value pairs describing the destination to use) -destination-timeout TIMEOUT wait for TIMEOUT seconds while searching for the destination device -parallelizeTargets build independent targets in parallel -jobs NUMBER specify the maximum number of concurrent build operations -maximum-concurrent-test-device-destinations NUMBER the maximum number of device destinations to test on concurrently -maximum-concurrent-test-simulator-destinations NUMBER the maximum number of simulator destinations to test on concurrently -parallel-testing-enabled YES|NO overrides the per-target setting in the scheme -parallel-testing-worker-count NUMBER the exact number of test runners that will be spawned during parallel testing -maximum-parallel-testing-workers NUMBER the maximum number of test runners that will be spawned during parallel testing -dry-run do everything except actually running the commands -quiet do not print any output except for warnings and errors -hideShellScriptEnvironment don't show shell script environment variables in build log -showsdks display a compact list of the installed SDKs -showdestinations display a list of destinations -showTestPlans display a list of test plans -showBuildSettings display a list of build settings and values -list lists the targets and configurations in a project, or the schemes in a workspace -find-executable NAME display the full path to executable NAME in the provided SDK and toolchain -find-library NAME display the full path to library NAME in the provided SDK and toolchain -version display the version of Xcode; with -sdk will display info about one or all installed SDKs -enableAddressSanitizer YES|NO turn the address sanitizer on or off -enableThreadSanitizer YES|NO turn the thread sanitizer on or off -enableUndefinedBehaviorSanitizer YES|NO turn the undefined behavior sanitizer on or off -resultBundlePath PATH specifies the directory where a result bundle describing what occurred will be placed -resultStreamPath PATH specifies the file where a result stream will be written to (the file must already exist) -resultBundleVersion 3 [default] specifies which result bundle version should be used -clonedSourcePackagesDirPath PATH specifies the directory to which remote source packages are fetch or expected to be found -derivedDataPath PATH specifies the directory where build products and other derived data will go -archivePath PATH specifies the directory where any created archives will be placed, or the archive that should be exported -exportArchive specifies that an archive should be exported -exportNotarizedApp export an archive that has been notarized by Apple -exportOptionsPlist PATH specifies a path to a plist file that configures archive exporting -enableCodeCoverage YES|NO turn code coverage on or off when testing -exportPath PATH specifies the destination for the product exported from an archive -skipUnavailableActions specifies that scheme actions that cannot be performed should be skipped instead of causing a failure -exportLocalizations exports completed and outstanding project localizations -importLocalizations imports localizations for a project, assuming any necessary localized resources have been created in Xcode -localizationPath specifies a path to XLIFF localization files -exportLanguage specifies multiple optional ISO 639-1 languages included in a localization export -xctestrun specifies a path to a test run specification -testPlan specifies the name of the test plan associated with the scheme to use for testing -only-testing constrains testing by specifying tests to include, and excluding other tests -only-testing:TEST-IDENTIFIER constrains testing by specifying tests to include, and excluding other tests -skip-testing constrains testing by specifying tests to exclude, but including other tests -skip-testing:TEST-IDENTIFIER constrains testing by specifying tests to exclude, but including other tests -only-test-configuration constrains testing by specifying test configurations to include, and excluding other test configurations -skip-test-configuration constrains testing by specifying test configurations to exclude, but including other test configurations -testLanguage constrains testing by specifying ISO 639-1 language in which to run the tests -testRegion constrains testing by specifying ISO 3166-1 region in which to run the tests -resolvePackageDependencies resolves any Swift package dependencies referenced by the project or workspace -disableAutomaticPackageResolution prevents packages from automatically being resolved to versions other than those recorded in the `Package.resolved` file -json output as JSON (note: -json implies -quiet) -allowProvisioningUpdates Allow xcodebuild to communicate with the Apple Developer website. For automatically signed targets, xcodebuild will create and update profiles, app IDs, and certificates. For manually signed targets, xcodebuild will download missing or updated provisioning profiles. Requires a developer account to have been added in Xcode's Accounts preference pane. -allowProvisioningDeviceRegistration Allow xcodebuild to register your destination device on the developer portal if necessary. This flag only takes effect if -allowProvisioningUpdates is also passed. -showBuildTimingSummary display a report of the timings of all the commands invoked during the build -create-xcframework create an xcframework from prebuilt libraries; -help for more information.Available keys for -exportOptionsPlist: compileBitcode : Bool For non-App Store exports, should Xcode re-compile the app from bitcode? Defaults to YES. destination : String Determines whether the app is exported locally or uploaded to Apple. Options are export or upload. The available options vary based on the selected distribution method. Defaults to export. embedOnDemandResourcesAssetPacksInBundle : Bool For non-App Store exports, if the app uses On Demand Resources and this is YES, asset packs are embedded in the app bundle so that the app can be tested without a server to host asset packs. Defaults to YES unless onDemandResourcesAssetPacksBaseURL is specified. generateAppStoreInformation : Bool For App Store exports, should Xcode generate App Store Information for uploading with iTMSTransporter? Defaults to NO. iCloudContainerEnvironment : String If the app is using CloudKit, this configures the &quot;com.apple.developer.icloud-container-environment&quot; entitlement. Available options vary depending on the type of provisioning profile used, but may include: Development and Production. installerSigningCertificate : String For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are &quot;Mac Installer Distribution&quot; and &quot;Developer ID Installer&quot;. Defaults to an automatic certificate selector matching the current distribution method. manifest : Dictionary For non-App Store exports, users can download your app over the web by opening your distribution manifest file in a web browser. To generate a distribution manifest, the value of this key should be a dictionary with three sub-keys: appURL, displayImageURL, fullSizeImageURL. The additional sub-key assetPackManifestURL is required when using on-demand resources. method : String Describes how Xcode should export the archive. Available options: app-store, validation, ad-hoc, package, enterprise, development, developer-id, and mac-application. The list of options varies based on the type of archive. Defaults to development. onDemandResourcesAssetPacksBaseURL : String For non-App Store exports, if the app uses On Demand Resources and embedOnDemandResourcesAssetPacksInBundle isn't YES, this should be a base URL specifying where asset packs are going to be hosted. This configures the app to download asset packs from the specified URL. provisioningProfiles : Dictionary For manual signing only. Specify the provisioning profile to use for each executable in your app. Keys in this dictionary are the bundle identifiers of executables; values are the provisioning profile name or UUID to use. signingCertificate : String For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are &quot;Mac App Distribution&quot;, &quot;iOS Developer&quot;, &quot;iOS Distribution&quot;, &quot;Developer ID Application&quot;, &quot;Apple Distribution&quot;, &quot;Mac Developer&quot;, and &quot;Apple Development&quot;. Defaults to an automatic certificate selector matching the current distribution method. signingStyle : String The signing style to use when re-signing the app for distribution. Options are manual or automatic. Apps that were automatically signed when archived can be signed manually or automatically during distribution, and default to automatic. Apps that were manually signed when archived must be manually signed during distribtion, so the value of signingStyle is ignored. stripSwiftSymbols : Bool Should symbols be stripped from Swift libraries in your IPA? Defaults to YES. teamID : String The Developer Portal team to use for this export. Defaults to the team used to build the archive. thinning : String For non-App Store exports, should Xcode thin the package for one or more device variants? Available options: &lt;none&gt; (Xcode produces a non-thinned universal app), &lt;thin-for-all-variants&gt; (Xcode produces a universal app and all available thinned variants), or a model identifier for a specific device (e.g. &quot;iPhone7,1&quot;). Defaults to &lt;none&gt;. uploadBitcode : Bool For App Store exports, should the package include bitcode? Defaults to YES. uploadSymbols : Bool For App Store exports, should the package include symbols? Defaults to YES.","link":"/blog/How-to-use-xcodebuild/"}],"tags":[{"name":"swift","slug":"swift","link":"/tags/swift/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"life","slug":"life","link":"/tags/life/"},{"name":"design","slug":"design","link":"/tags/design/"},{"name":"tech","slug":"tech","link":"/tags/tech/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"database","slug":"database","link":"/tags/database/"},{"name":"kotlin","slug":"kotlin","link":"/tags/kotlin/"},{"name":"wwdc","slug":"wwdc","link":"/tags/wwdc/"},{"name":"algorithm","slug":"algorithm","link":"/tags/algorithm/"},{"name":"ci","slug":"ci","link":"/tags/ci/"},{"name":"cocoapods","slug":"cocoapods","link":"/tags/cocoapods/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"react native","slug":"react-native","link":"/tags/react-native/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"swiftUI","slug":"swiftUI","link":"/tags/swiftUI/"},{"name":"testing","slug":"testing","link":"/tags/testing/"},{"name":"core data","slug":"core-data","link":"/tags/core-data/"},{"name":"xcode","slug":"xcode","link":"/tags/xcode/"},{"name":"apple script","slug":"apple-script","link":"/tags/apple-script/"},{"name":"voip","slug":"voip","link":"/tags/voip/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"node","slug":"node","link":"/tags/node/"},{"name":"script","slug":"script","link":"/tags/script/"},{"name":"maps","slug":"maps","link":"/tags/maps/"},{"name":"layout","slug":"layout","link":"/tags/layout/"},{"name":"watchOS","slug":"watchOS","link":"/tags/watchOS/"},{"name":"dart","slug":"dart","link":"/tags/dart/"},{"name":"flutter","slug":"flutter","link":"/tags/flutter/"},{"name":"combine","slug":"combine","link":"/tags/combine/"},{"name":"google","slug":"google","link":"/tags/google/"},{"name":"spm","slug":"spm","link":"/tags/spm/"},{"name":"terminal","slug":"terminal","link":"/tags/terminal/"},{"name":"electron","slug":"electron","link":"/tags/electron/"},{"name":"csharp","slug":"csharp","link":"/tags/csharp/"},{"name":"unity","slug":"unity","link":"/tags/unity/"},{"name":"links","slug":"links","link":"/tags/links/"},{"name":"objc","slug":"objc","link":"/tags/objc/"},{"name":"networking","slug":"networking","link":"/tags/networking/"},{"name":"work","slug":"work","link":"/tags/work/"},{"name":"catalyst","slug":"catalyst","link":"/tags/catalyst/"},{"name":"rx","slug":"rx","link":"/tags/rx/"},{"name":"go","slug":"go","link":"/tags/go/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"machine learning","slug":"machine-learning","link":"/tags/machine-learning/"},{"name":"firebase","slug":"firebase","link":"/tags/firebase/"},{"name":"cloud","slug":"cloud","link":"/tags/cloud/"},{"name":"tool","slug":"tool","link":"/tags/tool/"},{"name":"realm","slug":"realm","link":"/tags/realm/"}],"categories":[]}