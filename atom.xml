<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2020-03-17T21:50:09.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to force refresh in ForEach in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-force-refresh-in-ForEach-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-force-refresh-in-ForEach-in-SwiftUI-for-macOS/</id>
    <published>2020-03-17T21:50:00.000Z</published>
    <updated>2020-03-17T21:50:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/625" target="_blank" rel="noopener">#625</a></strong></p><p>For some strange reasons, content inside ForEach does not update with changes in Core Data NSManagedObject. The workaround is to introduce salt, like UUID just to make state change</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteRow</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> note: <span class="type">Note</span></span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">UUID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">ForEach</span>(notes) &#123; note <span class="keyword">in</span></span><br><span class="line">        <span class="type">NoteRow</span>(note: note, id: <span class="type">UUID</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/625&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#625&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For some
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to access bookmark url in macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-access-bookmark-url-in-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-access-bookmark-url-in-macOS/</id>
    <published>2020-03-17T04:48:44.000Z</published>
    <updated>2020-03-17T19:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/624" target="_blank" rel="noopener">#624</a></strong></p><blockquote><p>By default the approaches above grant you access while the app remains open. When you quit the app, any folder access you had is lost.</p></blockquote><blockquote><p>To gain persistent access to a folder even on subsequent launches, we’ll have to take advantage of a system called Security-Scoped Bookmarks.</p></blockquote><p>Add entitlements</p><blockquote><p>Use of app-scoped bookmarks and URLs</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.files.user-selected.read-only<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.files.bookmarks.app-scope<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW18" target="_blank" rel="noopener">Enabling Security-Scoped Bookmark and URL Access</a></p><blockquote><p>If you want to provide your sandboxed app with persistent access to file system resources, you must enable security-scoped bookmark and URL access. Security-scoped bookmarks are available starting in macOS v10.7.3.</p></blockquote><blockquote><p>To add the bookmarks.app-scope or bookmarks.document-scope entitlement, edit the target’s .entitlements property list file using the Xcode property list editor. Use the entitlement keys shown in Table 4-4, depending on which type of access you want. Use a value of <true> for each entitlement you want to enable. You can enable either or both entitlements.</true></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveBookmark</span><span class="params">(item: ShortcutItem)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url = item.fileUrl <span class="keyword">else</span> &#123; <span class="keyword">return</span>  &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> bookmarkData = <span class="keyword">try</span> url.bookmarkData(</span><br><span class="line">            options: .withSecurityScope,</span><br><span class="line">            includingResourceValuesForKeys: <span class="literal">nil</span>,</span><br><span class="line">            relativeTo: <span class="literal">nil</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        item.bookmark = bookmarkData</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Failed to save bookmark data for \(url)"</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadBookmark</span><span class="params">(item: ShortcutItem)</span></span> -&gt; <span class="type">URL?</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> data = item.bookmark <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> isStale = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> url = <span class="keyword">try</span> <span class="type">URL</span>(</span><br><span class="line">            resolvingBookmarkData: data,</span><br><span class="line">            options: .withSecurityScope,</span><br><span class="line">            relativeTo: <span class="literal">nil</span>,</span><br><span class="line">            bookmarkDataIsStale: &amp;isStale</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> isStale &#123;</span><br><span class="line">            saveBookmark(item: item)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Error resolving bookmark:"</span>, error)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">_</span> = url.startAccessingSecurityScopedResource()</span><br><span class="line"><span class="type">NSWorkspace</span>.shared.<span class="keyword">open</span>(url)</span><br><span class="line">url.stopAccessingSecurityScopedResource()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">_</span> = url.startAccessingSecurityScopedResource()</span><br><span class="line"><span class="type">NSWorkspace</span>.shared.selectFile(</span><br><span class="line">    url.path,</span><br><span class="line">    inFileViewerRootedAtPath: url.deletingLastPathComponent().path</span><br><span class="line">)</span><br><span class="line">url.stopAccessingSecurityScopedResource()</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://benscheirman.com/2019/10/troubleshooting-appkit-file-permissions/" target="_blank" rel="noopener">Modern AppKit File Permissions</a></li><li><a href="https://stackoverflow.com/questions/42179567/what-does-startaccessingsecurityscopedresource-actually-do" target="_blank" rel="noopener">https://stackoverflow.com/questions/42179567/what-does-startaccessingsecurityscopedresource-actually-do</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html" target="_blank" rel="noopener">Enabling App Sandbox</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/624&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to force FetchRequest update in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-force-FetchRequest-update-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-force-FetchRequest-update-in-SwiftUI/</id>
    <published>2020-03-16T13:25:52.000Z</published>
    <updated>2020-03-17T21:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/623" target="_blank" rel="noopener">#623</a></strong></p><p>Listen to context changes notification and change SwiftUI View state</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> changes = [<span class="type">NSDeletedObjectsKey</span>: ids]</span><br><span class="line"><span class="type">NSManagedObjectContext</span>.mergeChanges(</span><br><span class="line">    fromRemoteContextSave: changes,</span><br><span class="line">    into: [context]</span><br><span class="line">)</span><br><span class="line"><span class="keyword">try</span> context.save()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.managedObjectContext)</span><br><span class="line">    <span class="keyword">var</span> context</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> didSave = <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.publisher(<span class="keyword">for</span>: .<span class="type">NSManagedObjectContextDidSave</span>)</span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> refreshing: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        makeContent()</span><br><span class="line">            .onReceive(didSave) &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.refreshing.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We need to actually use that State variable for it to have effect</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> refreshing &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">""</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/623&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#623&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Listen to
        
      
    
    </summary>
    
    
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
      <category term="core data" scheme="https://onmyway133.github.io/tags/core-data/"/>
    
  </entry>
  
  <entry>
    <title>How to batch delete in Core Data</title>
    <link href="https://onmyway133.github.io/blog/How-to-batch-delete-in-Core-Data/"/>
    <id>https://onmyway133.github.io/blog/How-to-batch-delete-in-Core-Data/</id>
    <published>2020-03-15T05:14:58.000Z</published>
    <updated>2020-03-15T05:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/622" target="_blank" rel="noopener">#622</a></strong></p><p>Read <a href="https://developer.apple.com/library/archive/featuredarticles/CoreData_Batch_Guide/BatchDeletes/BatchDeletes.html" target="_blank" rel="noopener">Implementing Batch Deletes</a></p><blockquote><p>If the entities that are being deleted are not loaded into memory, there is no need to update your application after the NSBatchDeleteRequest has been executed. However, if you are deleting objects in the persistence layer and those entities are also in memory, it is important that you notify the application that the objects in memory are stale and need to be refreshed.</p></blockquote><blockquote><p>To do this, first make sure the resultType of the NSBatchDeleteRequest is set to NSBatchDeleteRequestResultType.resultTypeObjectIDs before the request is executed. When the request has completed successfully, the resulting NSPersistentStoreResult instance that is returned will have an array of NSManagedObjectID instances referenced in the result property. That array of NSManagedObjectID instances can then be used to update one or more NSManagedObjectContext instances.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">NSFetchRequestResult</span>&gt; = <span class="type">Book</span>.fetchRequest()</span><br><span class="line"><span class="keyword">let</span> deleteRequest = <span class="type">NSBatchDeleteRequest</span>(fetchRequest: fetchRequest)</span><br><span class="line">deleteRequest.resultType = .resultTypeObjectIDs</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="type">CoreDataManager</span>.shared.container.viewContext</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">try</span> context.execute(</span><br><span class="line">        deleteRequest</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span></span><br><span class="line">        <span class="keyword">let</span> deleteResult = result <span class="keyword">as</span>? <span class="type">NSBatchDeleteResult</span>,</span><br><span class="line">        <span class="keyword">let</span> ids = deleteResult.result <span class="keyword">as</span>? [<span class="type">NSManagedObjectID</span>]</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> changes = [<span class="type">NSDeletedObjectsKey</span>: ids]</span><br><span class="line">    <span class="type">NSManagedObjectContext</span>.mergeChanges(</span><br><span class="line">        fromRemoteContextSave: changes,</span><br><span class="line">        into: [context]</span><br><span class="line">    )</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error <span class="keyword">as</span> <span class="type">Any</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/622&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#622&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Read &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
      <category term="core data" scheme="https://onmyway133.github.io/tags/core-data/"/>
    
  </entry>
  
  <entry>
    <title>How to update FetchRequest with predicate in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-update-FetchRequest-with-predicate-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-update-FetchRequest-with-predicate-in-SwiftUI/</id>
    <published>2020-03-14T21:21:14.000Z</published>
    <updated>2020-03-14T21:22:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/621" target="_blank" rel="noopener">#621</a></strong></p><p>Make subview that accepts <code>FetchRequest</code>. Trigger search by setting property</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SideView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.managedObjectContext)</span><br><span class="line">    <span class="keyword">var</span> context</span><br><span class="line"></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> search: <span class="type">Search?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">            <span class="type">SearchView</span>(</span><br><span class="line">                onSearch: <span class="keyword">self</span>.onSearch</span><br><span class="line">            )</span><br><span class="line">            <span class="type">InsideListView</span>(fetchRequest: makeFetchRequest())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeFetchRequest</span><span class="params">()</span></span> -&gt; <span class="type">FetchRequest</span>&lt;<span class="type">Book</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> predicate: <span class="type">NSPredicate?</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> search = search &#123;</span><br><span class="line">            <span class="keyword">let</span> textPredicate = <span class="type">NSPredicate</span>(format: <span class="string">"string CONTAINS[cd] %@"</span>, search.text)</span><br><span class="line">            <span class="keyword">let</span> appPredicate = <span class="type">NSPredicate</span>(format: <span class="string">"appName == %@"</span>, search.app)</span><br><span class="line">            <span class="keyword">let</span> typePredicate = <span class="type">NSPredicate</span>(format: <span class="string">"type == %@"</span>, search.type)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> predicates: [<span class="type">NSPredicate</span>] = []</span><br><span class="line">            <span class="keyword">if</span> search.text.<span class="built_in">count</span> &gt;= <span class="number">3</span> &#123;</span><br><span class="line">                predicates.append(textPredicate)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> search.app != <span class="type">Constants</span>.all &#123;</span><br><span class="line">                predicates.append(appPredicate)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> search.type != <span class="type">Constants</span>.all &#123;</span><br><span class="line">                predicates.append(typePredicate)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            predicate = <span class="type">NSCompoundPredicate</span>(andPredicateWithSubpredicates: predicates)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            predicate = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="type">FetchRequest</span>&lt;<span class="type">Book</span>&gt;(</span><br><span class="line">            entity: <span class="type">Book</span>.entity(),</span><br><span class="line">            sortDescriptors: [</span><br><span class="line">                <span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">Book</span>.date, ascending: <span class="literal">false</span>)</span><br><span class="line">            ],</span><br><span class="line">            predicate: predicate</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">onSearch</span><span class="params">(<span class="number">_</span> search: Search)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> search.text.<span class="built_in">count</span> &lt; <span class="number">3</span> &amp;&amp; search.type != <span class="type">Constants</span>.all &amp;&amp; search.app != <span class="type">Constants</span>.all &#123;</span><br><span class="line">            <span class="keyword">self</span>.search = <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.search = search</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">InsideListView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.managedObjectContext)</span><br><span class="line">    <span class="keyword">var</span> context</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fetchRequest: <span class="type">FetchRequest</span>&lt;<span class="type">Book</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span>(items) &#123;</span><br><span class="line">            <span class="type">ForEach</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> items: <span class="type">FetchedResults</span>&lt;<span class="type">Book</span>&gt; &#123;</span><br><span class="line">        fetchRequest.wrappedValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/621&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#621&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Make
        
      
    
    </summary>
    
    
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to make TextField focus in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-TextField-focus-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-TextField-focus-in-SwiftUI-for-macOS/</id>
    <published>2020-03-13T05:39:49.000Z</published>
    <updated>2020-03-15T21:06:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/620" target="_blank" rel="noopener">#620</a></strong></p><p>For <code>NSWindow</code> having <code>level</code>other than <code>.normal</code>, need  to override key and main  property to allow TextField to be focusable</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FocusWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> canBecomeKey: <span class="type">Bool</span>  &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> canBecomeMain: <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Furthermore to customize TextField, consider  using custom</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyTextField</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: NSViewRepresentableContext&lt;MyTextField&gt;)</span></span> -&gt; <span class="type">NSTextField</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tf = <span class="type">NSTextField</span>()</span><br><span class="line">        tf.focusRingType = .<span class="keyword">none</span></span><br><span class="line">        tf.isBordered = <span class="literal">false</span></span><br><span class="line">        tf.drawsBackground = <span class="literal">false</span></span><br><span class="line">        tf.delegate = context.coordinator</span><br><span class="line">        <span class="keyword">return</span> tf</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(<span class="number">_</span> nsView: NSTextField, context: NSViewRepresentableContext&lt;MyTextField&gt;)</span></span> &#123;</span><br><span class="line">        nsView.stringValue = text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span><span class="params">()</span></span> -&gt; <span class="type">MyTextField</span>.<span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="type">Coordinator</span>(parent: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>: <span class="title">NSObject</span>, <span class="title">NSTextFieldDelegate</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parent: <span class="type">MyTextField</span></span><br><span class="line">        <span class="keyword">init</span>(parent: <span class="type">MyTextField</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.parent = parent</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">controlTextDidChange</span><span class="params">(<span class="number">_</span> obj: Notification)</span></span> &#123;</span><br><span class="line">            <span class="keyword">let</span> textField = obj.object <span class="keyword">as</span>! <span class="type">NSTextField</span></span><br><span class="line">            parent.text = textField.stringValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/620&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#620&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to manage work</title>
    <link href="https://onmyway133.github.io/blog/How-to-manage-work/"/>
    <id>https://onmyway133.github.io/blog/How-to-manage-work/</id>
    <published>2020-03-12T15:44:57.000Z</published>
    <updated>2020-03-12T15:44:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/619" target="_blank" rel="noopener">#619</a></strong></p><h2 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h2><ul><li><a href="https://basecamp.com/books/remote" target="_blank" rel="noopener">Remote by Basecamp</a></li><li><a href="https://twist.com/remote-work-guides" target="_blank" rel="noopener">Remote Work Guides</a></li></ul><h2 id="Communication"><a href="#Communication" class="headerlink" title="Communication"></a>Communication</h2><ul><li><a href="https://basecamp.com/guides/how-we-communicate" target="_blank" rel="noopener">The Basecamp Guide to Internal Communication</a></li></ul><h2 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h2><ul><li><a href="https://3.basecamp-help.com/article/35-the-six-week-cycle" target="_blank" rel="noopener">The Six Week Cycle</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/619&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#619&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2
        
      
    
    </summary>
    
    
    
      <category term="work" scheme="https://onmyway133.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>How to show popover for item in ForEach in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-popover-for-item-in-ForEach-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-popover-for-item-in-ForEach-in-SwiftUI/</id>
    <published>2020-03-11T20:44:45.000Z</published>
    <updated>2020-03-11T21:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/618" target="_blank" rel="noopener">#618</a></strong></p><p>Create custom Binding</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="keyword">self</span>.items) &#123; (item: item) <span class="keyword">in</span></span><br><span class="line">        <span class="type">ItemRowView</span>(item: item)</span><br><span class="line">            .popover(isPresented: <span class="keyword">self</span>.makeIsPresented(item: item)) &#123;</span><br><span class="line">                <span class="type">ItemDetailView</span>(item: item)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeIsPresented</span><span class="params">(item: Item)</span></span> -&gt; <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> .<span class="keyword">init</span>(<span class="keyword">get</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.selectedId == item.id</span><br><span class="line">    &#125;, <span class="keyword">set</span>: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>.selectedId = <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/618&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#618&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to make tooltip in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-tooltip-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-tooltip-in-SwiftUI-for-macOS/</id>
    <published>2020-03-11T20:42:03.000Z</published>
    <updated>2020-03-12T19:54:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/617" target="_blank" rel="noopener">#617</a></strong></p><p>Create empty NSView and use as overlay. Need  to <code>updateNSView</code> in case we toggle the state of tooltip</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tooltip</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tooltip: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: NSViewRepresentableContext&lt;Tooltip&gt;)</span></span> -&gt; <span class="type">NSView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">NSView</span>()</span><br><span class="line">        view.toolTip = tooltip</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(<span class="number">_</span> nsView: NSView, context: NSViewRepresentableContext&lt;Tooltip&gt;)</span></span> &#123;</span><br><span class="line">        nsView.toolTip = tooltip</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(action: <span class="keyword">self</span>.onGear) &#123;</span><br><span class="line">    <span class="type">Image</span>(<span class="string">"gear"</span>)</span><br><span class="line">        .styleButton()</span><br><span class="line">&#125;</span><br><span class="line">.overlay(<span class="type">Tooltip</span>(tooltip: <span class="string">"Settings"</span>))</span><br><span class="line">.buttonStyle(<span class="type">BorderlessButtonStyle</span>())</span><br></pre></td></tr></table></figure><p>Sometimes  it’s better to add overlay tooltip to Image inside Button to avoid blocking</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(action: <span class="keyword">self</span>.onGear) &#123;</span><br><span class="line">    <span class="type">Image</span>(<span class="string">"gear"</span>)</span><br><span class="line">        .styleButton()</span><br><span class="line">       .overlay(<span class="type">Tooltip</span>(tooltip: <span class="string">"Settings"</span>))</span><br><span class="line">&#125;</span><br><span class="line">.buttonStyle(<span class="type">BorderlessButtonStyle</span>())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/617&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#617&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use vital git commands</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-vital-git-commands/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-vital-git-commands/</id>
    <published>2020-03-09T09:28:19.000Z</published>
    <updated>2020-03-09T09:28:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/616" target="_blank" rel="noopener">#616</a></strong></p><p>Checkout file at a specific commit and open in Visual Studio Code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show BRANCH_OR_COMMIT:FILE_NAME | code -</span><br></pre></td></tr></table></figure><p>Fixup. In interactive rebase, specify <code>fixup</code> instead of <code>pick</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit --fixup=HEAD~1</span><br><span class="line">git rebase HEAD~2 -i --autosquash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/616&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#616&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Checkout
        
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://onmyway133.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>How to make translucent SwiftUI List in macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-translucent-SwiftUI-List-in-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-translucent-SwiftUI-List-in-macOS/</id>
    <published>2020-03-05T04:31:15.000Z</published>
    <updated>2020-03-05T04:31:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/615" target="_blank" rel="noopener">#615</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">ForEach</span>(books) &#123; (book: <span class="type">Book</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="type">BookRow</span>(book: book)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.listStyle(<span class="type">SidebarListStyle</span>())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/615&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#615&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to make tab view in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-tab-view-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-tab-view-in-SwiftUI/</id>
    <published>2020-03-02T19:36:04.000Z</published>
    <updated>2020-03-02T19:37:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/614" target="_blank" rel="noopener">#614</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyTabView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span></span><br><span class="line">    <span class="keyword">var</span> preferenceManager: <span class="type">PreferenceManager</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VOrH</span>(isVertical: preferenceManager.preference.position.isVertical) &#123;</span><br><span class="line">            <span class="type">OneTabView</span>(image: <span class="string">"one"</span>, text: <span class="string">"One"</span>, tab: .one)</span><br><span class="line">            <span class="type">OneTabView</span>(image: <span class="string">"two"</span>, text: <span class="string">"Two"</span>, tab: .two)</span><br><span class="line">            <span class="type">OneTabView</span>(image: <span class="string">"three"</span>, text: <span class="string">"Three"</span>, tab: .three)</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OneTabView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span></span><br><span class="line">    <span class="keyword">var</span> preferenceManager: <span class="type">PreferenceManager</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> image: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> text: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> tab: <span class="type">Tab</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> selected: <span class="type">Bool</span> &#123;</span><br><span class="line">        preferenceManager.preference.tab == tab</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(action: &#123; <span class="keyword">self</span>.preferenceManager.preference.tab = <span class="keyword">self</span>.tab &#125;) &#123;</span><br><span class="line">            <span class="type">VStack</span>(spacing: <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">Image</span>(image)</span><br><span class="line">                    .renderingMode(selected ? .original : .template)</span><br><span class="line">                    .resizable()</span><br><span class="line">                    .aspectRatio(contentMode: .fit)</span><br><span class="line">                    .frame(height: <span class="number">20</span>)</span><br><span class="line">                <span class="type">Text</span>(text)</span><br><span class="line">                    .font(.system(.caption, design: .rounded))</span><br><span class="line">                    .fontWeight(selected ? .semibold : .<span class="keyword">none</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(.horizontal, <span class="number">4</span>)</span><br><span class="line">        .buttonStyle(<span class="type">BorderlessButtonStyle</span>())</span><br><span class="line">        .frame(width: <span class="number">60</span>, height: <span class="number">50</span>)</span><br><span class="line">        .background(selected ? <span class="type">R</span>.color.selectedTabBackground : <span class="type">Color</span>.clear)</span><br><span class="line">        .cornerRadius(<span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/614&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#614&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to return VStack or HStack in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-return-VStack-or-HStack-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-return-VStack-or-HStack-in-SwiftUI/</id>
    <published>2020-03-02T19:34:43.000Z</published>
    <updated>2020-03-03T19:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/613" target="_blank" rel="noopener">#613</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VOrH</span>&lt;<span class="title">Content</span>&gt;: <span class="title">View</span> <span class="title">where</span> <span class="title">Content</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isVertical: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">let</span> content: () -&gt; <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(isVertical: <span class="type">Bool</span>, @<span class="type">ViewBuilder</span> content: @escaping () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.isVertical = isVertical</span><br><span class="line">        <span class="keyword">self</span>.content = content</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        makeContent()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeContent</span><span class="params">()</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> isVertical &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">VStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">                content()</span><br><span class="line">            &#125;.eraseToAnyView()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">HStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">                content()</span><br><span class="line">            &#125;.eraseToAnyView()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/613&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#613&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to present NSWindow modally</title>
    <link href="https://onmyway133.github.io/blog/How-to-present-NSWindow-modally/"/>
    <id>https://onmyway133.github.io/blog/How-to-present-NSWindow-modally/</id>
    <published>2020-03-02T18:17:49.000Z</published>
    <updated>2020-03-02T19:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/612" target="_blank" rel="noopener">#612</a></strong></p><p>Use <a href="https://developer.apple.com/documentation/appkit/nsapplication/1428436-runmodal" target="_blank" rel="noopener">runModal</a></p><blockquote><p>This method runs a modal event loop for the specified window synchronously. It displays the specified window, makes it key, starts the run loop, and processes events for that window. (You do not need to show the window yourself.) While the app is in that loop, it does not respond to any other events (including mouse, keyboard, or window-close events) unless they are associated with the window. It also does not perform any tasks (such as firing timers) that are not associated with the modal run loop. In other words, this method consumes only enough CPU time to process events and dispatch them to the action methods associated with the modal window.</p></blockquote><p>Specify <code>level</code> in <code>windowDidBecomeKey</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> controller = <span class="type">SettingsWindowController</span>()</span><br><span class="line"><span class="type">NSApp</span>.runModal(<span class="keyword">for</span>: controller.window!)</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SettingsWindowController</span>: <span class="title">NSWindowController</span>, <span class="title">NSWindowDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> mainView = <span class="type">SettingsView</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> window = <span class="type">NSWindow</span>(</span><br><span class="line">            contentRect: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">500</span>, height: <span class="number">300</span>),</span><br><span class="line">            styleMask: [.titled, .closable],</span><br><span class="line">            backing: .buffered,</span><br><span class="line">            <span class="keyword">defer</span>: <span class="literal">false</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">let</span> hosting = <span class="type">NSHostingView</span>(rootView: mainView)</span><br><span class="line">        window.contentView = hosting</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(window: window)</span><br><span class="line">        window.delegate = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">windowDidBecomeKey</span><span class="params">(<span class="number">_</span> notification: Notification)</span></span> &#123;</span><br><span class="line">        window?.level = .statusBar</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">windowWillClose</span><span class="params">(<span class="number">_</span> notification: Notification)</span></span> &#123;</span><br><span class="line">        <span class="type">NSApp</span>.stopModal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/612&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#612&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use Picker with enum in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-Picker-with-enum-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-Picker-with-enum-in-SwiftUI/</id>
    <published>2020-02-29T05:02:00.000Z</published>
    <updated>2020-02-29T05:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/611" target="_blank" rel="noopener">#611</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WindowPosition</span>: <span class="title">String</span>, <span class="title">CaseIterable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span></span><br><span class="line">    <span class="keyword">case</span> top</span><br><span class="line">    <span class="keyword">case</span> bottom</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Picker</span>(selection: $preference.position, label: <span class="type">Text</span>(<span class="string">"Position"</span>)) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="type">WindowPosition</span>.allCases, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="type">Text</span>($<span class="number">0</span>.rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/611&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#611&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to use visual effect view in NSWindow</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-visual-effect-view-in-NSWindow/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-visual-effect-view-in-NSWindow/</id>
    <published>2020-02-27T04:37:40.000Z</published>
    <updated>2020-02-27T04:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/610" target="_blank" rel="noopener">#610</a></strong></p><p>Set <code>NSVisualEffectView</code> as contentView of NSWindow, and our main view as subview of it. Remember to set frame or autoresizing mask as non-direct content view does not get full size as the window</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mainView = <span class="type">MainView</span>()</span><br><span class="line">    .environment(\.managedObjectContext, coreDataManager.container.viewContext)</span><br><span class="line"></span><br><span class="line">window = <span class="type">NSWindow</span>(</span><br><span class="line">    contentRect: .zero,</span><br><span class="line">    styleMask: [.fullSizeContentView],</span><br><span class="line">    backing: .buffered,</span><br><span class="line">    <span class="keyword">defer</span>: <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line">window.titlebarAppearsTransparent = <span class="literal">true</span></span><br><span class="line">window.center()</span><br><span class="line">window.level = .statusBar</span><br><span class="line">window.setFrameAutosaveName(<span class="string">"MyApp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> visualEffect = <span class="type">NSVisualEffectView</span>()</span><br><span class="line">visualEffect.blendingMode = .behindWindow</span><br><span class="line">visualEffect.state = .active</span><br><span class="line">visualEffect.material = .appearanceBased</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hosting = <span class="type">NSHostingView</span>(rootView: mainView)</span><br><span class="line">window.contentView = visualEffect</span><br><span class="line">visualEffect.addSubview(hosting)</span><br><span class="line">hosting.autoresizingMask = [.width, .height]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/610&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#610&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to animate NSWindow</title>
    <link href="https://onmyway133.github.io/blog/How-to-animate-NSWindow/"/>
    <id>https://onmyway133.github.io/blog/How-to-animate-NSWindow/</id>
    <published>2020-02-23T19:42:44.000Z</published>
    <updated>2020-02-23T19:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/609" target="_blank" rel="noopener">#609</a></strong></p><p>Use <code>animator</code> proxy and <code>animate</code> parameter</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = window.frame</span><br><span class="line">rect.frame.origin.x = <span class="number">1000</span></span><br><span class="line"><span class="type">NSAnimationContext</span>.runAnimationGroup(&#123; context <span class="keyword">in</span></span><br><span class="line">    context.timingFunction = <span class="type">CAMediaTimingFunction</span>(name: .easeIn)</span><br><span class="line">    window.animator().setFrame(rect, display: <span class="literal">true</span>, animate: <span class="literal">true</span>)</span><br><span class="line">&#125;, completionHandler: &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/609&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#609&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to find active application in macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-find-active-application-in-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-find-active-application-in-macOS/</id>
    <published>2020-02-22T21:24:08.000Z</published>
    <updated>2020-02-22T21:24:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/608" target="_blank" rel="noopener">#608</a></strong></p><blockquote><p>An NSRunningApplication instance for the current application.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSRunningApplication</span>.current</span><br></pre></td></tr></table></figure><blockquote><p>The running app instance for the app that receives key events.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSWorkspace</span>.shared.frontmostApplication</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/608&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to compare for nearly equal in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-compare-for-nearly-equal-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-compare-for-nearly-equal-in-Swift/</id>
    <published>2020-02-19T11:48:44.000Z</published>
    <updated>2020-02-19T11:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/607" target="_blank" rel="noopener">#607</a></strong></p><p>Implement <code>Equatable</code> and <code>Comparable</code> and use <code>round</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RGBA</span>: <span class="title">Equatable</span>, <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> red: <span class="type">CGFloat</span></span><br><span class="line">    <span class="keyword">let</span> green: <span class="type">CGFloat</span></span><br><span class="line">    <span class="keyword">let</span> blue: <span class="type">CGFloat</span></span><br><span class="line">    <span class="keyword">let</span> alpha: <span class="type">CGFloat</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> red: <span class="type">CGFloat</span>, <span class="number">_</span> green: <span class="type">CGFloat</span>, <span class="number">_</span> blue: <span class="type">CGFloat</span>, <span class="number">_</span> alpha: <span class="type">CGFloat</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.red = red</span><br><span class="line">        <span class="keyword">self</span>.green = green</span><br><span class="line">        <span class="keyword">self</span>.blue = blue</span><br><span class="line">        <span class="keyword">self</span>.alpha = alpha</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">round</span><span class="params">(<span class="number">_</span> value: CGFloat)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        (value * <span class="number">100</span>).rounded() / <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(<span class="keyword">left</span>: RGBA, <span class="keyword">right</span>: RGBA)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> r = <span class="type">Self</span>.round</span><br><span class="line">        <span class="keyword">return</span> r(<span class="keyword">left</span>.red) == r(<span class="keyword">right</span>.red)</span><br><span class="line">            &amp;&amp; r(<span class="keyword">left</span>.green) == r(<span class="keyword">right</span>.green)</span><br><span class="line">            &amp;&amp; r(<span class="keyword">left</span>.blue) == r(<span class="keyword">right</span>.blue)</span><br><span class="line">            &amp;&amp; r(<span class="keyword">left</span>.alpha) == r(<span class="keyword">right</span>.alpha)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> &lt; (left: RGBA, right: RGBA) -&gt; <span class="title">Bool</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> r = <span class="type">Self</span>.round</span><br><span class="line">        <span class="keyword">return</span> r(<span class="keyword">left</span>.red) &lt; r(<span class="keyword">right</span>.red)</span><br><span class="line">            &amp;&amp; r(<span class="keyword">left</span>.green) &lt; r(<span class="keyword">right</span>.green)</span><br><span class="line">            &amp;&amp; r(<span class="keyword">left</span>.blue) &lt; r(<span class="keyword">right</span>.blue)</span><br><span class="line">            &amp;&amp; r(<span class="keyword">left</span>.alpha) &lt;= r(<span class="keyword">right</span>.alpha)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">XCTAssertGreaterThan</span>(backgroundRgba, <span class="type">RGBA</span>(<span class="number">0.57</span>, <span class="number">0.12</span>, <span class="number">0.88</span>, <span class="number">1.0</span>)</span><br><span class="line"><span class="type">XCTAssertLessThanThan</span>(backgroundRgba, <span class="type">RGBA</span>(<span class="number">0.57</span>, <span class="number">0.12</span>, <span class="number">0.88</span>, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/607&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#607&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implement
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to conform to Hashable for class in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-conform-to-Hashable-for-class-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-conform-to-Hashable-for-class-in-Swift/</id>
    <published>2020-02-17T08:38:52.000Z</published>
    <updated>2020-02-17T08:40:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/606" target="_blank" rel="noopener">#606</a></strong></p><p>Use <a href="https://developer.apple.com/documentation/swift/objectidentifier" target="_blank" rel="noopener">ObjectIdentifier</a></p><blockquote><p>A unique identifier for a class instance or metatype.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span>: <span class="title">Hashable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: Worker, rhs: Worker)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ObjectIdentifier</span>(lhs) == <span class="type">ObjectIdentifier</span>(rhs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hash</span><span class="params">(into hasher: <span class="keyword">inout</span> Hasher)</span></span> &#123;</span><br><span class="line">        hasher.combine(<span class="type">ObjectIdentifier</span>(<span class="keyword">self</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/606&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#606&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
</feed>
