<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2020-09-29T03:01:46.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to unwrap Binding with Optional in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-unwrap-Binding-with-Optional-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-unwrap-Binding-with-Optional-in-SwiftUI/</id>
    <published>2020-09-29T03:01:46.000Z</published>
    <updated>2020-09-29T03:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/677">#677</a></strong></p><p>The quick way to add new properties without breaking current saved Codable is to declare them as optional. For example if you use  <a href="https://github.com/onmyway133/EasyStash">EasyStash</a> library to save and load Codable models.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Input</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bundleId: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// New props</span></span><br><span class="line">    <span class="keyword">var</span> notificationId: <span class="type">String?</span></span><br></pre></td></tr></table></figure><p>This new property when using dollar syntax <code>$input.notificationId</code> turn into Binding with optional <code>Binding&lt;Strting?&gt;</code> which is incompatible in SwiftUI when we use Binding.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaterialTextField</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> placeholder: <span class="type">String</span></span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The solution here is write an extension that converts <code>Binding&lt;String?&gt;</code> to <code>Binding&lt;String&gt;</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Binding</span> <span class="title">where</span> <span class="title">Value</span> == <span class="title">String</span>? </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toNonOptional</span><span class="params">()</span></span> -&gt; <span class="type">Binding</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;(</span><br><span class="line">            <span class="keyword">get</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">self</span>.wrappedValue ?? <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">set</span>: &#123;</span><br><span class="line">                <span class="keyword">self</span>.wrappedValue = $<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so we can use them as normal</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MaterialTextField</span>(text: $input.notificationId.toNonOptional())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/677&quot;&gt;#677&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The quick way to add new properties
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to make custom toggle in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-custom-toggle-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-custom-toggle-in-SwiftUI/</id>
    <published>2020-09-29T02:55:04.000Z</published>
    <updated>2020-09-29T02:55:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/676">#676</a></strong></p><p>Iâ€™ve used the default <code>SwiftUI</code> to achieve the 2 tab views in SwiftUI. It adds a default box around the content and also opinionated paddings. For now on light mode on macOS, the unselected tab has wrong colors.</p><p>The way to solve this is to come up with a custom toggle, that we can style and align the way we want. Here is how I did for my app <a href="https://onmyway133.com/pushhero">Push Hero</a></p><p>Using a Text instead of Button here gives me default static text look.</p><img width="752" alt="Screenshot 2020-09-29 at 06 52 33" src="https://user-images.githubusercontent.com/2284279/94513986-5bf62880-0220-11eb-9b29-bca0de5de64b.png"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AuthenticationView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> input: <span class="type">Input</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        toggle</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toggle: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">HStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"ðŸ”‘ Key"</span>)</span><br><span class="line">                        .style(selected: input.authentication == .key)</span><br><span class="line">                        .onTapGesture &#123;</span><br><span class="line">                            <span class="keyword">self</span>.input.authentication = .key</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"ðŸ“° Certificate"</span>)</span><br><span class="line">                        .style(selected: input.authentication == .certificate)</span><br><span class="line">                        .onTapGesture &#123;</span><br><span class="line">                            <span class="keyword">self</span>.input.authentication = .certificate</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                .padding(<span class="number">3</span>)</span><br><span class="line">                .background(<span class="type">Color</span>.white.opacity(<span class="number">0.2</span>))</span><br><span class="line">                .cornerRadius(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            choose</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> choose: <span class="type">AnyView</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> input.authentication &#123;</span><br><span class="line">        <span class="keyword">case</span> .key:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">KeyAuthenticationView</span>().erase()</span><br><span class="line">        <span class="keyword">case</span> .certificate:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">CertificateAuthenticationView</span>().erase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">style</span><span class="params">(selected: Bool)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">            .padding(.vertical, <span class="number">3</span>)</span><br><span class="line">            .padding(.horizontal, <span class="number">4</span>)</span><br><span class="line">            .background(selected ? <span class="type">Color</span>.white.opacity(<span class="number">0.5</span>) : <span class="type">Color</span>.clear)</span><br><span class="line">            .cornerRadius(<span class="number">6</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/676&quot;&gt;#676&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Iâ€™ve used the default
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use Binding in function in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-Binding-in-function-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-Binding-in-function-in-Swift/</id>
    <published>2020-09-25T02:01:53.000Z</published>
    <updated>2020-09-25T02:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/675">#675</a></strong></p><p>Use <code>wrappedValue</code> to get the underlying value that Binding contains</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addOverlay</span><span class="params">(shows: Binding&lt;Bool&gt;)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="keyword">self</span></span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .overlay(</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                <span class="type">SmallButton</span>(</span><br><span class="line">                    imageName: <span class="string">"downArrow"</span>,</span><br><span class="line">                    tooltip: shows.wrappedValue ? <span class="string">"Collapse"</span> : <span class="string">"Expand"</span>,</span><br><span class="line">                    action: &#123;</span><br><span class="line">                        shows.wrappedValue.toggle()</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">                .rotationEffect(.radians(shows.wrappedValue ? .pi : <span class="number">0</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/675&quot;&gt;#675&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;wrappedValue&lt;/code&gt; to get the
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use HSplitView to define 3 panes view in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-HSplitView-to-define-3-panes-view-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-HSplitView-to-define-3-panes-view-in-SwiftUI-for-macOS/</id>
    <published>2020-09-23T02:32:58.000Z</published>
    <updated>2020-09-23T06:42:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/674">#674</a></strong></p><p>Specify <code>minWidth</code> to ensure miminum width, and use <code>.layoutPriority(1)</code> for the most important pane.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MainView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> store: <span class="type">Store</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HSplitView</span> &#123;</span><br><span class="line">            <span class="type">LeftPane</span>()</span><br><span class="line">                .padding()</span><br><span class="line">                .frame(minWidth: <span class="number">200</span>, maxWidth: <span class="number">500</span>)</span><br><span class="line">            <span class="type">MiddlePane</span>(store: store)</span><br><span class="line">                .padding()</span><br><span class="line">                .frame(minWidth: <span class="number">500</span>)</span><br><span class="line">                .layoutPriority(<span class="number">1</span>)</span><br><span class="line">            <span class="type">RightPane</span>()</span><br><span class="line">                .padding()</span><br><span class="line">                .frame(minWidth: <span class="number">300</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .background(<span class="type">R</span>.color.background)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/674&quot;&gt;#674&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Specify &lt;code&gt;minWidth&lt;/code&gt; to ensure
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to draw arc corner using Bezier Path</title>
    <link href="https://onmyway133.github.io/blog/How-to-draw-arc-corner-using-Bezier-Path/"/>
    <id>https://onmyway133.github.io/blog/How-to-draw-arc-corner-using-Bezier-Path/</id>
    <published>2020-09-15T10:16:47.000Z</published>
    <updated>2020-09-15T10:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/673">#673</a></strong></p><p>To draw rounded 2 corners at top left and top right, letâ€™s start from bottom left</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</span><br><span class="line"><span class="comment">// bottom left</span></span><br><span class="line">path.move(to: <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: bounds.height))</span><br><span class="line"><span class="comment">// top left corner</span></span><br><span class="line">path.addArc(withCenter: <span class="type">CGPoint</span>(x: radius, y: radius), radius: radius, startAngle: <span class="type">CGFloat</span>.pi, endAngle: <span class="type">CGFloat</span>.pi * <span class="number">3</span> / <span class="number">2</span>, clockwise: <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// top right corner</span></span><br><span class="line">path.addArc(withCenter: <span class="type">CGPoint</span>(x: bounds.width - radius, y: radius), radius: radius, startAngle: <span class="type">CGFloat</span>.pi * <span class="number">3</span> / <span class="number">2</span>, endAngle: <span class="number">0</span>, clockwise: <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// bottom right</span></span><br><span class="line">path.addLine(to: <span class="type">CGPoint</span>(x: bounds.width, y: bounds.height))</span><br><span class="line">path.close()</span><br></pre></td></tr></table></figure><img width="598" alt="Screenshot 2020-09-15 at 14 16 01" src="https://user-images.githubusercontent.com/2284279/93209165-fdc84080-f75d-11ea-9e95-ed39d749b7d6.png"><p><img src="https://user-images.githubusercontent.com/2284279/93209263-27816780-f75e-11ea-9de8-d50d72798313.png" alt="cc"></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="http://ronnqvi.st/thinking-like-a-bzier-path">http://ronnqvi.st/thinking-like-a-bzier-path</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/673&quot;&gt;#673&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To draw rounded 2 corners at top left and
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>How to stitch and sort array in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-stitch-and-sort-array-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-stitch-and-sort-array-in-Swift/</id>
    <published>2020-08-28T05:32:01.000Z</published>
    <updated>2020-08-31T10:19:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/672">#672</a></strong></p><p>Supposed we want to stitch magazines array into books array. The requirement is to sort them by <code>publishedDate</code>, but must keep <code>preferredOrder</code> of books. One way to solve this is to declare an enum to hold all possible cases, and then do a sort that check every possible combination </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> preferredOrder: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> publishedDate: <span class="type">Date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Magazine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> publishedDate: <span class="type">Date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">StitchItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> book(<span class="type">Book</span>)</span><br><span class="line">    <span class="keyword">case</span> magazine(<span class="type">Magazine</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stitch</span><span class="params">(<span class="number">_</span> books: [Book], magazines: [Magazine])</span></span> -&gt; [<span class="type">StitchItem</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> items = books.<span class="built_in">map</span>(&#123; <span class="type">StitchItem</span>.book($<span class="number">0</span>) &#125;) + magazines.<span class="built_in">map</span>(&#123; <span class="type">StitchItem</span>.magazine($<span class="number">0</span>) &#125;)</span><br><span class="line">    <span class="keyword">return</span> items.sorted(by: &#123; book, magazine <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> (book, magazine) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> (.book(b1), .book(b2)):</span><br><span class="line">            <span class="keyword">return</span> b1.preferredOrder &lt; b2.preferredOrder</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> (.book(book), .magazine(magazine)):</span><br><span class="line">            <span class="keyword">if</span> book.publishedDate == magazine.publishedDate &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> book.publishedDate &lt; magazine.publishedDate</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> (.magazine(magazine), .book(book)):</span><br><span class="line">            <span class="keyword">if</span> book.publishedDate == magazine.publishedDate &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> book.publishedDate &lt; magazine.publishedDate</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> (.magazine(m1), .magazine(m2)):</span><br><span class="line">            <span class="keyword">return</span> m1.publishedDate &lt; m2.publishedDate</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above sort function declares the intention but Swift just <code>sort</code> instead of trying to fully meet our requirements. </p><p>A manual solution is to sort each array first then use while loop to insert.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stitch</span><span class="params">(<span class="number">_</span> books: [Book], magazines: [Magazine])</span></span> -&gt; [<span class="type">StitchItem</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> books = books</span><br><span class="line">        .sorted(by: &#123; $<span class="number">0</span>.preferredOrder &lt; $<span class="number">1</span>.preferredOrder &#125;)</span><br><span class="line">    <span class="keyword">let</span> magazines = magazines</span><br><span class="line">        .sorted(by: sortmagazines)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bookIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> magazineIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> results: [<span class="type">StitchItem</span>] = []</span><br><span class="line">    <span class="keyword">while</span> (bookIndex &lt; books.<span class="built_in">count</span> &amp;&amp; magazineIndex &lt; magazines.<span class="built_in">count</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> book = books[bookIndex]</span><br><span class="line">        <span class="keyword">let</span> magazine = magazines[magazineIndex]</span><br><span class="line">        <span class="keyword">if</span> book.publishedDate &lt; magazine.publishedDate &#123;</span><br><span class="line">            results.append(<span class="type">StitchItem</span>.book(book))</span><br><span class="line">            bookIndex += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            results.append(<span class="type">StitchItem</span>.magazine(magazine))</span><br><span class="line">            magazineIndex += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (bookIndex &lt; books.<span class="built_in">count</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> book = books[bookIndex]</span><br><span class="line">        results.append(<span class="type">StitchItem</span>.book(book))</span><br><span class="line">        bookIndex += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (magazineIndex &lt; magazines.<span class="built_in">count</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> magazine = magazines[magazineIndex]</span><br><span class="line">        results.append(<span class="type">StitchItem</span>.magazine(magazine))</span><br><span class="line">        magazineIndex += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/672&quot;&gt;#672&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Supposed we want to stitch magazines
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to make dynamic font size for UIButton</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-dynamic-font-size-for-UIButton/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-dynamic-font-size-for-UIButton/</id>
    <published>2020-08-14T05:29:45.000Z</published>
    <updated>2020-08-14T05:29:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/671">#671</a></strong></p><p>Use <a href="https://developer.apple.com/documentation/uikit/uicontentsizecategoryadjusting/1771731-adjustsfontforcontentsizecategor?language=objc">adjustsFontForContentSizeCategory</a></p><blockquote><p>A Boolean that indicates whether the object automatically updates its font when the deviceâ€™s content size category changes.</p></blockquote><blockquote><p>If you set this property to YES, the element adjusts for a new content size category on a UIContentSizeCategoryDidChangeNotification.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button.titleLabel?.adjustsFontForContentSizeCategory = <span class="literal">true</span></span><br><span class="line">button.backgroundColor = <span class="type">UIColor</span>.green</span><br><span class="line">button.titleLabel?.font = <span class="type">UIFont</span>.preferredFont(forTextStyle: .title1)</span><br><span class="line"></span><br><span class="line">label.adjustsFontForContentSizeCategory = <span class="literal">true</span></span><br><span class="line">label.backgroundColor = <span class="type">UIColor</span>.yellow</span><br><span class="line">label.font = <span class="type">UIFont</span>.preferredFont(forTextStyle: .title1)</span><br></pre></td></tr></table></figure><p>However it seems view (UIButton or UILabel) size is the same, just the inner text increases in size. A workaround is to put view inside <code>UIStackView</code> so UIButton or UILabel can automatically changes size.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/671&quot;&gt;#671&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>How to test for view disappear in navigation controller</title>
    <link href="https://onmyway133.github.io/blog/How-to-test-for-view-disappear-in-navigation-controller/"/>
    <id>https://onmyway133.github.io/blog/How-to-test-for-view-disappear-in-navigation-controller/</id>
    <published>2020-08-06T09:39:42.000Z</published>
    <updated>2020-08-14T05:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/670">#670</a></strong></p><p>To test for <code>viewWillDisappear</code> during <code>UINavigationController</code> <code>popViewController</code> in unit test, we need to simulate <code>UIWindow</code> so view appearance works.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PopTests</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testPop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">        <span class="keyword">let</span> navigationController = <span class="type">UINavigationController</span>()</span><br><span class="line">        window.rootViewController = navigationController</span><br><span class="line">        <span class="keyword">let</span> viewController = <span class="type">DetailViewController</span>()</span><br><span class="line"></span><br><span class="line">        navigationController.viewControllers = [</span><br><span class="line">            <span class="type">UIViewController</span>(),</span><br><span class="line">            viewController</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        window.makeKeyAndVisible()</span><br><span class="line">        <span class="keyword">let</span> expectation = <span class="type">XCTestExpectation</span>()</span><br><span class="line">        navigationController.popViewController(animated: <span class="literal">false</span>)</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="number">0.1</span>) &#123;</span><br><span class="line">            <span class="type">XCTAssertTrue</span>(viewController.wasDismissed)</span><br><span class="line">            expectation.fulfill()</span><br><span class="line">        &#125;</span><br><span class="line">        wait(<span class="keyword">for</span>: [expectation], timeout: <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.viewWillDisappear(animated)</span><br><span class="line">            <span class="keyword">if</span> isMovingFromParent &#123;</span><br><span class="line">                wasDismissed = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/670&quot;&gt;#670&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To test for
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use useEffect in React hook</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-useEffect-in-React-hook/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-useEffect-in-React-hook/</id>
    <published>2020-06-17T04:18:06.000Z</published>
    <updated>2020-06-17T04:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/669">#669</a></strong></p><p>Specify params as array <code>[year, id]</code>, not object <code>{year, id}</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; year, id &#125; = props</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> loadData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        listenChats()</span><br><span class="line">    &#125;, [year, id])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hooks-effect"><a href="#Hooks-effect" class="headerlink" title="Hooks effect"></a>Hooks effect</h2><ul><li><a href="https://reactjs.org/docs/hooks-effect.html">https://reactjs.org/docs/hooks-effect.html</a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#useeffect">https://reactjs.org/docs/hooks-reference.html#useeffect</a></li></ul><blockquote><p>By default, it runs both after the first render and after every update.</p></blockquote><blockquote><p>This requirement is common enough that it is built into the useEffect Hook API. You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. To do so, pass an array as an optional second argument to useEffect:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// Only re-run the effect if count changes</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/669&quot;&gt;#669&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Specify params as array &lt;code&gt;[year,
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to sign in with apple for web with firebase</title>
    <link href="https://onmyway133.github.io/blog/How-to-sign-in-with-apple-for-web-with-firebase/"/>
    <id>https://onmyway133.github.io/blog/How-to-sign-in-with-apple-for-web-with-firebase/</id>
    <published>2020-06-16T05:27:12.000Z</published>
    <updated>2020-06-16T05:27:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/668">#668</a></strong></p><h3 id="Authenticate-Using-Apple-with-JavaScript"><a href="#Authenticate-Using-Apple-with-JavaScript" class="headerlink" title="Authenticate Using Apple with JavaScript"></a>Authenticate Using Apple with JavaScript</h3><p>Use Firebase JS SDK</p><ul><li><a href="https://firebase.google.com/docs/auth/web/apple">https://firebase.google.com/docs/auth/web/apple</a></li></ul><h3 id="Configure-Sign-in-with-Apple-for-the-web"><a href="#Configure-Sign-in-with-Apple-for-the-web" class="headerlink" title="Configure Sign in with Apple for the web"></a>Configure Sign in with Apple for the web</h3><ul><li><a href="https://help.apple.com/developer-account/#/dev1c0e25352">https://help.apple.com/developer-account/#/dev1c0e25352</a></li></ul><p>Go to <a href="https://developer.apple.com/account/resources/identifiers/list">Certificates, Identifiers &amp; Profiles -&gt; Identifier</a> create 2 ids: App ID and Service ID</p><p>For example: I have App ID com.onmyway133.myapp and Service ID com.onmyway133.myweb</p><img width="1218" alt="Screenshot 2020-06-16 at 09 20 34" src="https://user-images.githubusercontent.com/2284279/84743751-ab3a8500-afb2-11ea-90b6-e399c05c7741.png"><p>Remember that to view App ID or Service ID, thereâ€™s dropdown menu on the right</p><img width="296" alt="Screenshot 2020-06-16 at 09 21 20" src="https://user-images.githubusercontent.com/2284279/84743826-c2797280-afb2-11ea-820c-5b405a787eb3.png"><p> For App ID,  enable</p><ul><li>Associated Domains</li><li>Sign In with Apple: Enable it as Primary App ID</li></ul><p>For Service ID, use firebase callback url</p><ul><li><a href="https://myweb.firebaseapp.com/__/auth/handler">https://myweb.firebaseapp.com/__/auth/handler</a></li></ul><h3 id="Associate-domain"><a href="#Associate-domain" class="headerlink" title="Associate domain"></a>Associate domain</h3><p>Add <code>apple-app-site-association</code> in <code>public</code> folder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;applinks&quot;: &#123;</span><br><span class="line">      &quot;details&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">             &quot;appIDs&quot;: [&quot;T78DK947F2.com.onmyway133.myapp&quot;],</span><br><span class="line">             &quot;components&quot;: [</span><br><span class="line">               &#123;</span><br><span class="line">                  &quot;#&quot;: &quot;no_universal_links&quot;,</span><br><span class="line">                  &quot;exclude&quot;: true,</span><br><span class="line">                  &quot;comment&quot;: &quot;Matches any URL whose fragment equals no_universal_links and instructs the system not to open it as a universal link&quot;</span><br><span class="line">               &#125;</span><br><span class="line">             ]</span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;webcredentials&quot;: &#123;</span><br><span class="line">      &quot;apps&quot;: [ &quot;T78DK947F2.com.onmyway133.myweb&quot; ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Private-key"><a href="#Private-key" class="headerlink" title="Private key"></a>Private key</h2><p>Go to <a href="https://developer.apple.com/account/resources/authkeys/list">Keys</a> and create new auth key. Configure that key with the primary App ID above</p><img width="1261" alt="Screenshot 2020-06-16 at 09 24 05" src="https://user-images.githubusercontent.com/2284279/84744141-2308af80-afb3-11ea-98ce-8b32c1c300d1.png"><h2 id="Configure-in-Firebase"><a href="#Configure-in-Firebase" class="headerlink" title="Configure in Firebase"></a>Configure in Firebase</h2><p>Go to <a href="https://console.firebase.google.com/u/0/project/wwdc-together/authentication/providers">Sign in providers</a> and enable Apple sign in.</p><p>Fill in </p><ul><li>Service ID identifier (com.onmyway133.myweb)</li><li>OAuth code flow configuration: fill in your team id, key id and key secret content.</li></ul><img width="973" alt="Screenshot 2020-06-16 at 09 25 23" src="https://user-images.githubusercontent.com/2284279/84744287-50edf400-afb3-11ea-8802-a388b48b97ec.png">]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/668&quot;&gt;#668&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3
        
      
    
    </summary>
    
    
    
      <category term="web" scheme="https://onmyway133.github.io/tags/web/"/>
    
      <category term="firebase" scheme="https://onmyway133.github.io/tags/firebase/"/>
    
  </entry>
  
  <entry>
    <title>How to use firebase cloud functions</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-firebase-cloud-functions/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-firebase-cloud-functions/</id>
    <published>2020-06-14T19:20:10.000Z</published>
    <updated>2020-06-14T19:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/667">#667</a></strong></p><h3 id="Use-node-10"><a href="#Use-node-10" class="headerlink" title="Use node 10"></a>Use node 10</h3><p>Edit package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;10&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Secret-key"><a href="#Secret-key" class="headerlink" title="Secret key"></a>Secret key</h3><p>Go to <code>settings/serviceaccounts/adminsdk</code>, download secret key in form of <code>json</code> and place it in <code>lib/config.json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> serviceAccount = <span class="built_in">require</span>(<span class="string">'./config.json'</span>)</span><br><span class="line"></span><br><span class="line">admin.initializeApp(&#123;</span><br><span class="line">    credential: admin.credential.cert(serviceAccount),</span><br><span class="line">    databaseURL: <span class="string">"https://my-app-4b968.firebaseio.com"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Local-serve"><a href="#Local-serve" class="headerlink" title="Local serve"></a>Local serve</h3><p>This builds and spins up emulator to test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><ul><li><a href="https://stackoverflow.com/questions/42755131/enabling-cors-in-cloud-functions-for-firebase">https://stackoverflow.com/questions/42755131/enabling-cors-in-cloud-functions-for-firebase</a></li><li><a href="https://mhaligowski.github.io/blog/2017/03/10/cors-in-cloud-functions.html">https://mhaligowski.github.io/blog/2017/03/10/cors-in-cloud-functions.html</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.set(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var cors &#x3D; require(&#39;cors&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; my function</span><br><span class="line">var helloFn &#x3D; function helloFn(req, res) &#123;</span><br><span class="line">    res.status(200)</span><br><span class="line">        .send(&#39;Hello, Functions\n&#39;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; CORS and Cloud Functions export logic</span><br><span class="line">exports.hello &#x3D; function hello(req, res) &#123;</span><br><span class="line">    var corsFn &#x3D; cors();</span><br><span class="line">    corsFn(req, res, function() &#123;</span><br><span class="line">        helloFn(req, res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/667&quot;&gt;#667&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Use-node-10&quot;&gt;&lt;a href=&quot;#Use-node-10&quot;
        
      
    
    </summary>
    
    
    
      <category term="firebase" scheme="https://onmyway133.github.io/tags/firebase/"/>
    
  </entry>
  
  <entry>
    <title>How to deploy with create react app</title>
    <link href="https://onmyway133.github.io/blog/How-to-deploy-with-create-react-app/"/>
    <id>https://onmyway133.github.io/blog/How-to-deploy-with-create-react-app/</id>
    <published>2020-06-14T17:40:15.000Z</published>
    <updated>2020-06-14T17:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/666">#666</a></strong></p><h3 id="Direct-url"><a href="#Direct-url" class="headerlink" title="Direct url"></a>Direct url</h3><p><code>200.html</code></p><p><a href="https://stackoverflow.com/questions/44491184/react-router-does-not-work-in-production-and-surge-deployments">https://stackoverflow.com/questions/44491184/react-router-does-not-work-in-production-and-surge-deployments</a></p><p>Support for client-side routing:</p><p><a href="https://create-react-app.dev/docs/deployment/#netlify">https://create-react-app.dev/docs/deployment/#netlify</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*  &#x2F;index.html  200</span><br></pre></td></tr></table></figure><h3 id="Serving-the-Same-Build-from-Different-Paths"><a href="#Serving-the-Same-Build-from-Different-Paths" class="headerlink" title="Serving the Same Build from Different Paths"></a>Serving the Same Build from Different Paths</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"homepage": ".",</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/666&quot;&gt;#666&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Direct-url&quot;&gt;&lt;a href=&quot;#Direct-url&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>How to go back to home in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-go-back-to-home-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-go-back-to-home-in-React/</id>
    <published>2020-06-13T19:26:44.000Z</published>
    <updated>2020-06-13T19:26:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/665">#665</a></strong></p><p>Usually in header we have logo that takes user back to the home page</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line">&lt;Router&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">        &lt;Route exact path=<span class="string">"/"</span>&gt;</span><br><span class="line">            &lt;Home /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Header.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useHistory &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> history = useHistory()</span><br><span class="line"></span><br><span class="line">&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-item"</span> onClick=&#123;() =&gt; &#123;</span><br><span class="line">    history.push(<span class="string">'/'</span>)</span><br><span class="line">&#125;&#125;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/665&quot;&gt;#665&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Usually in header we have logo that takes
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to format date in certain timezone with momentjs</title>
    <link href="https://onmyway133.github.io/blog/How-to-format-date-in-certain-timezone-with-momentjs/"/>
    <id>https://onmyway133.github.io/blog/How-to-format-date-in-certain-timezone-with-momentjs/</id>
    <published>2020-06-13T18:53:41.000Z</published>
    <updated>2020-06-13T18:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/664">#664</a></strong></p><p>Use moment-timezone <a href="https://momentjs.com/timezone/docs/">https://momentjs.com/timezone/docs/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install moment-timezone</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; public&#x2F;index.html</span><br><span class="line">&lt;script src&#x3D;&quot;moment.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;moment-timezone-with-data.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>Need to import from <code>moment-timezone</code>, not <code>moment</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment-timezone'</span></span><br><span class="line"></span><br><span class="line">moment(startAt).tz(<span class="string">'America/Los_Angeles'</span>).format(<span class="string">'MMMM Do YYYY'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/664&quot;&gt;#664&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use moment-timezone &lt;a
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to style video js</title>
    <link href="https://onmyway133.github.io/blog/How-to-style-video-js/"/>
    <id>https://onmyway133.github.io/blog/How-to-style-video-js/</id>
    <published>2020-06-12T20:05:45.000Z</published>
    <updated>2020-06-17T03:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/663">#663</a></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @jsx jsx */</span></span><br><span class="line"><span class="keyword">import</span> &#123; css, jsx &#125; <span class="keyword">from</span> <span class="string">'@emotion/core'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">'video.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoPlayer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// instantiate Video.js</span></span><br><span class="line">        <span class="keyword">this</span>.player = videojs(<span class="keyword">this</span>.videoNode, <span class="keyword">this</span>.props, <span class="function"><span class="keyword">function</span> <span class="title">onPlayerReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'onPlayerReady'</span>, <span class="keyword">this</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// destroy player on unmount</span></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.player) &#123;</span><br><span class="line">            <span class="keyword">this</span>.player.dispose()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wrap the player in a div with a `data-vjs-player` attribute</span></span><br><span class="line">    <span class="comment">// so videojs won't create additional wrapper in the DOM</span></span><br><span class="line">    <span class="comment">// see https://github.com/videojs/video.js/pull/3856</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div data-vjs-player css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">                    </span></span><br><span class="line"><span class="css">                `</span>&#125;&gt;</span><br><span class="line">                    &lt;video </span><br><span class="line">                        ref=&#123;node =&gt; <span class="keyword">this</span>.videoNode = node&#125; </span><br><span class="line">                        className=<span class="string">"video-js vjs-big-play-centered"</span> </span><br><span class="line">                        data-setup=<span class="string">'&#123; "playbackRates": [0.5, 1, 1.5, 2] &#125;'</span></span><br><span class="line">                        css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">                        <span class="selector-tag">width</span>: <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">                        <span class="selector-tag">height</span>: 400<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">                    `</span>&#125;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;<span class="regexp">/video&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/663&quot;&gt;#663&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to use setState in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-setState-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-setState-in-React/</id>
    <published>2020-06-12T19:23:14.000Z</published>
    <updated>2020-06-12T19:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/662">#662</a></strong></p><p>Use spread operator</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [state, setState] = useState(&#123;</span><br><span class="line">        message: <span class="string">''</span>,</span><br><span class="line">        chats: [],</span><br><span class="line">        sending: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123; </span><br><span class="line">    ...prevState,</span><br><span class="line">    message: <span class="string">''</span>,</span><br><span class="line">    sending: <span class="literal">false</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/662&quot;&gt;#662&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use spread operator&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to handle events for input with React</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-events-for-input-with-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-events-for-input-with-React/</id>
    <published>2020-06-12T19:17:05.000Z</published>
    <updated>2020-06-16T05:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/661">#661</a></strong></p><p>Use Bulma css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"input is-rounded"</span></span><br><span class="line">    type=<span class="string">"text"</span></span><br><span class="line">    placeholder=<span class="string">"Say something"</span></span><br><span class="line">    value=&#123;value&#125;</span><br><span class="line">    onChange=&#123;(e) =&gt; &#123; onValueChange(e.target.value) &#125;&#125;</span><br><span class="line">    onKeyDown=&#123;(e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key === <span class="string">'Enter'</span>) &#123;</span><br><span class="line">            onSend(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/661&quot;&gt;#661&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use Bulma css&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to handle evens in put with React</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-evens-in-put-with-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-evens-in-put-with-React/</id>
    <published>2020-06-12T19:17:05.000Z</published>
    <updated>2020-06-12T19:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/661">#661</a></strong></p><p>Use Bulma css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"input is-rounded"</span></span><br><span class="line">    type=<span class="string">"text"</span></span><br><span class="line">    placeholder=<span class="string">"Say something"</span></span><br><span class="line">    value=&#123;value&#125;</span><br><span class="line">    onChange=&#123;(e) =&gt; &#123; onValueChange(e.target.value) &#125;&#125;</span><br><span class="line">    onKeyDown=&#123;(e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key === <span class="string">'Enter'</span>) &#123;</span><br><span class="line">            onSend(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/661&quot;&gt;#661&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use Bulma css&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to set text color for UIDatePicker</title>
    <link href="https://onmyway133.github.io/blog/How-to-set-text-color-for-UIDatePicker/"/>
    <id>https://onmyway133.github.io/blog/How-to-set-text-color-for-UIDatePicker/</id>
    <published>2020-06-10T17:14:17.000Z</published>
    <updated>2020-06-10T17:15:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/660">#660</a></strong></p><p>Apply <code>tintColor</code> does not seem to have effect.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">datePicker.setValue(<span class="type">UIColor</span>.label, forKeyPath: <span class="string">"textColor"</span>)</span><br><span class="line">datePicker.setValue(<span class="literal">false</span>, forKey: <span class="string">"highlightsToday"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/660&quot;&gt;#660&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apply &lt;code&gt;tintColor&lt;/code&gt; does not
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>How to auto scroll to top in react router 5</title>
    <link href="https://onmyway133.github.io/blog/How-to-auto-scroll-to-top-in-react-router-5/"/>
    <id>https://onmyway133.github.io/blog/How-to-auto-scroll-to-top-in-react-router-5/</id>
    <published>2020-06-04T03:58:39.000Z</published>
    <updated>2020-06-04T03:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/659">#659</a></strong></p><p>Use <code>useLocation</code> <a href="https://reacttraining.com/react-router/web/guides/scroll-restoration">https://reacttraining.com/react-router/web/guides/scroll-restoration</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link,</span><br><span class="line">    useLocation,</span><br><span class="line">    withRouter</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_ScrollToTop</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname &#125; = useLocation();</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;, [pathname]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> props.children</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ScrollToTop = withRouter(_ScrollToTop)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Router&gt;</span><br><span class="line">                &lt;ScrollToTop&gt;</span><br><span class="line">                    &lt;Header /&gt;</span><br><span class="line">                     &lt;Content /&gt;</span><br><span class="line">                    &lt;Footer /&gt;</span><br><span class="line">                &lt;<span class="regexp">/ScrollToTop&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Router&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/659&quot;&gt;#659&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;useLocation&lt;/code&gt; &lt;a
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
</feed>
