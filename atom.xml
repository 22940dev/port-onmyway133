<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2020-12-04T05:31:00.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to convert from paid to free with IAP</title>
    <link href="https://onmyway133.github.io/blog/How-to-convert-from-paid-to-free-with-IAP/"/>
    <id>https://onmyway133.github.io/blog/How-to-convert-from-paid-to-free-with-IAP/</id>
    <published>2020-11-30T19:26:10.000Z</published>
    <updated>2020-12-04T05:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/703">#703</a></strong></p><h2 id="What-is-receipt"><a href="#What-is-receipt" class="headerlink" title="What is receipt"></a>What is receipt</h2><p>Read <a href="https://stackoverflow.com/questions/45615106/when-to-refresh-a-receipt-vs-restore-purchases-in-ios">When to refresh a receipt vs restore purchases in iOS?</a></p><p>From iOS 7, every app downloaded from the store has a receipt (for downloading/buying the app) at <code>appStoreReceiptURL</code>. When users purchases something via In App Purchase, the content at <code>appStoreReceiptURL</code> is updated with purchases information. Most of the cases, you just need to refresh the receipt (at appStoreReceiptURL) so that you know which transactions users have made.</p><p><strong>Note</strong></p><ul><li>Receipt is generated and bundled with your app when user download the app, whether it is free or paid</li><li>When user makes IAP, receipt is updated with IAP information</li><li>When user downloads an app (download free, or purchase paid app), they get future updates (whether free or paid) forever.</li><li>Call <code>SKReceiptRefreshRequest</code> or <code>SKPaymentQueue.restoreCompletedTransactions</code> asks for Appstore credential</li><li>When we build the app from Xcode or download from Testflight, receipt is not bundled within the app since the app is not downloaded from AppStore. We can use <code>SKReceiptRefreshRequest</code> to download receipt from sandbox Appstore</li><li><code>restoreCompletedTransactions</code> updates app receipt</li></ul><p>Users restore transactions to maintain access to content they’ve already purchased. For example, when they upgrade to a new phone, they don’t lose all of the items they purchased on the old phone. Include some mechanism in your app to let the user restore their purchases, such as a Restore Purchases button. Restoring purchases prompts for the user’s App Store credentials, which interrupts the flow of your app: because of this, don’t automatically restore purchases, especially not every time your app is launched.</p><p>In most cases, all your app needs to do is refresh its receipt and deliver the products in its receipt. The refreshed receipt contains a record of the user’s purchases in this app, on this device or any other device. However, some apps need to take an alternate approach for one of the following reasons:</p><ul><li>If you use Apple-hosted content, restoring completed transactions gives your app the transaction objects it uses to download the content. If you need to support versions of iOS earlier than iOS 7, where the app receipt isn’t available, restore completed transactions instead.</li><li>Refreshing the receipt asks the App Store for the latest copy of the receipt. Refreshing a receipt does not create any new transactions.</li><li>Restoring completed transactions creates a new transaction for every completed transaction the user made, essentially replaying history for your transaction queue observer.</li></ul><p>More about receipt, from WWDC 2017, What’s new in StoreKit session <a href="https://developer.apple.com/videos/play/wwdc2017/303/">https://developer.apple.com/videos/play/wwdc2017/303/</a></p><p><img src="https://user-images.githubusercontent.com/2284279/100661732-38507b00-3354-11eb-9198-104410e5ddfb.png" alt="receipt"></p><p>You can also watch WWDC 2017, session Advanced StoreKit for more detail <a href="https://developer.apple.com/videos/play/wwdc2017/305/">https://developer.apple.com/videos/play/wwdc2017/305/</a></p><p><img src="https://user-images.githubusercontent.com/2284279/100661745-3d152f00-3354-11eb-943d-9c6d9b79000d.png" alt="receipt tips"></p><h2 id="Restoring-Purchased-Products"><a href="#Restoring-Purchased-Products" class="headerlink" title="Restoring Purchased Products"></a>Restoring Purchased Products</h2><p>Read <a href="https://developer.apple.com/documentation/storekit/in-app_purchase/restoring_purchased_products">Restoring Purchased Products</a></p><blockquote><p>Users sometimes need to restore purchased content, such as when they upgrade to a new phone.</p></blockquote><blockquote><p>Don’t automatically restore purchases, especially when your app is launched. Restoring purchases prompts for the user’s App Store credentials, which interrupts the flow of your app</p></blockquote><blockquote><p>In most cases, you only need to refresh the app receipt and deliver the products listed on the receipt. The refreshed receipt contains a record of the user’s purchases in this app, from any device the user’s App Store account is logged into</p></blockquote><blockquote><p>Refreshing a receipt doesn’t create new transactions; it requests the latest copy of the receipt from the App Store</p></blockquote><blockquote><p>Restoring completed transactions creates a new transaction for every transaction previously completed, essentially replaying history for your transaction queue observer. Your app maintains its own state to keep track of why it’s restoring completed transactions and how to handle them.</p></blockquote><h2 id="What-are-the-different-IAP-types"><a href="#What-are-the-different-IAP-types" class="headerlink" title="What are the different IAP types"></a>What are the different IAP types</h2><p>From AppStore</p><h3 id="Consumable-pay-everytime"><a href="#Consumable-pay-everytime" class="headerlink" title="Consumable (pay everytime)"></a>Consumable (pay everytime)</h3><p>A consumable In-App Purchase must be purchased every time the user downloads it. One-time services, such as fish food in a fishing app, are usually implemented as consumables.</p><h3 id="Non-Consumable-one-time-payment"><a href="#Non-Consumable-one-time-payment" class="headerlink" title="Non-Consumable (one time payment)"></a>Non-Consumable (one time payment)</h3><p>Non-consumable In-App Purchases only need to be purchased once by users. Services that do not expire or decrease with use are usually implemented as non-consumables, such as new race tracks for a game app.</p><h3 id="Auto-Renewable-Subscriptions-will-deduct-money-from-your-credit-card-on-a-cycle-complete"><a href="#Auto-Renewable-Subscriptions-will-deduct-money-from-your-credit-card-on-a-cycle-complete" class="headerlink" title="Auto-Renewable Subscriptions (will deduct money from your credit card on a cycle complete)"></a>Auto-Renewable Subscriptions (will deduct money from your credit card on a cycle complete)</h3><p>Auto-renewable Subscriptions allow the user to purchase updating and dynamic content for a set duration of time. Subscriptions renew automatically unless the user opts out, such as magazine subscriptions.</p><h3 id="Free-Subscription-no-payment-and-is-still-visible-even-you-did-not-submitted-your-account-detail-to-itunes-connect"><a href="#Free-Subscription-no-payment-and-is-still-visible-even-you-did-not-submitted-your-account-detail-to-itunes-connect" class="headerlink" title="Free Subscription (no payment and is still visible even you did not submitted your account detail to itunes connect)"></a>Free Subscription (no payment and is still visible even you did not submitted your account detail to itunes connect)</h3><p>Free subscriptions are a way for developers to put free subscription content in Newsstand. Once a user signs up for a free subscription, it will be available on all devices associated with the user’s Apple ID. Note that free subscriptions do not expire and can only be offered in Newsstand-enabled apps.</p><h3 id="Non-Renewing-need-to-renew-manually"><a href="#Non-Renewing-need-to-renew-manually" class="headerlink" title="Non-Renewing (need to renew manually)"></a>Non-Renewing (need to renew manually)</h3><p>Subscription Non-Renewing Subscriptions allow the sale of services with a limited duration. Non-Renewing Subscriptions must be used for In-App Purchases that offer time-based access to static content. Examples include a one week subscription to voice guidance feature within a navigation app or an annual subscription to online catalog of archived video or audio.</p><h2 id="When-is-app-receipt-missing"><a href="#When-is-app-receipt-missing" class="headerlink" title="When is app receipt missing"></a>When is app receipt missing</h2><p>Read <a href="https://developer.apple.com/documentation/storekit/skreceiptrefreshrequest">SKReceiptRefreshRequest</a></p><blockquote><p>Use this API to request a new receipt if the receipt is invalid or missing</p></blockquote><p>Receipt is stored locally on device. It can be missing in case user sync or restore device.</p><p>Watch <a href="https://asciiwwdc.com/2014/sessions/305">WWDC 2014 - 305 Preventing Unauthorized Purchases with Receipts</a></p><h2 id="How-to-check-receipt-existence"><a href="#How-to-check-receipt-existence" class="headerlink" title="How to check receipt existence"></a>How to check receipt existence</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bundle</span>.main.appStoreReceiptURL</span><br><span class="line">checkResourceIsReachable</span><br></pre></td></tr></table></figure><h2 id="How-to-read-receipt"><a href="#How-to-read-receipt" class="headerlink" title="How to read receipt"></a>How to read receipt</h2><p>Read <a href="https://www.raywenderlich.com/9257-in-app-purchases-receipt-validation-tutorial">In-App Purchases: Receipt Validation Tutorial</a></p><blockquote><p>The receipt consists of a single file in the app bundle. The file is in a format called PKCS #7. The payload consists of a set of receipt attributes in a cross-platform format called ASN.1</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">12</span>: <span class="comment">// Receipt Creation Date</span></span><br><span class="line">  <span class="keyword">var</span> dateStartPtr = ptr</span><br><span class="line">  receiptCreationDate = readASN1Date(ptr: &amp;dateStartPtr, maxLength: length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>: <span class="comment">// IAP Receipt</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"IAP Receipt."</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">case</span> <span class="number">19</span>: <span class="comment">// Original App Version</span></span><br><span class="line">  <span class="keyword">var</span> stringStartPtr = ptr</span><br><span class="line">  originalAppVersion = readASN1String(ptr: &amp;stringStartPtr, maxLength: length)</span><br></pre></td></tr></table></figure><p>Use <a href="https://github.com/tikhop/TPInAppReceipt">TPInAppReceipt</a> which includes certificates.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="type">InAppReceipt</span>.localReceipt()</span><br></pre></td></tr></table></figure><p>Check <a href="https://developer.apple.com/library/archive/releasenotes/General/ValidateAppStoreReceipt/Chapters/ReceiptFields.html">Receipt Fields</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Original Application Version</span><br><span class="line">The version of the app that was originally purchased.</span><br><span class="line">ASN.1 Field Type 19</span><br><span class="line">ASN.1 Field Value UTF8STRING</span><br></pre></td></tr></table></figure><p><strong>Note</strong></p><blockquote><p>This corresponds to the value of CFBundleVersion (in iOS) or CFBundleShortVersionString (in macOS) in the Info.plist file when the purchase was originally made</p></blockquote><p><code>CFBundleVersion</code> is build number, and <code>CFBundleShortVersionString</code> is app version</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In-App Purchase Receipt</span><br><span class="line">The receipt for an in-app purchase.</span><br><span class="line">ASN.1 Field Type 17</span><br></pre></td></tr></table></figure><p>Read <a href="https://developer.apple.com/documentation/storekit/in-app_purchase/validating_receipts_with_the_app_store">Validating Receipts with the App Store</a></p><p>Sample <code>verifyReceipt</code> json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"receipt"</span>: &#123;</span><br><span class="line">        <span class="attr">"receipt_type"</span>: <span class="string">"ProductionSandbox"</span>,</span><br><span class="line">        <span class="attr">"adam_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"app_item_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"bundle_id"</span>: <span class="string">"com.example.app.ios"</span>,</span><br><span class="line">        <span class="attr">"application_version"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"download_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"version_external_identifier"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"request_date"</span>: <span class="string">"2018-11-13 17:10:31 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"request_date_ms"</span>: <span class="string">"1542129031280"</span>,</span><br><span class="line">        <span class="attr">"request_date_pst"</span>: <span class="string">"2018-11-13 09:10:31 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date"</span>: <span class="string">"2013-08-01 07:00:00 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date_ms"</span>: <span class="string">"1375340400000"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date_pst"</span>: <span class="string">"2013-08-01 00:00:00 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"original_application_version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">        <span class="attr">"in_app"</span>: [&#123;</span><br><span class="line">            <span class="attr">"quantity"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"product_id"</span>: <span class="string">"test2"</span>,</span><br><span class="line">            <span class="attr">"transaction_id"</span>: <span class="string">"1000000472106082"</span>,</span><br><span class="line">            <span class="attr">"original_transaction_id"</span>: <span class="string">"1000000472106082"</span>,</span><br><span class="line">            <span class="attr">"purchase_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">            <span class="attr">"purchase_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">            <span class="attr">"purchase_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">            <span class="attr">"is_trial_period"</span>: <span class="string">"false"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"Sandbox"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Verify your receipt first with the production URL; then verify with the sandbox URL if you receive a 21007 status code. This approach ensures you do not have to switch between URLs while your application is tested, reviewed by App Review, or live in the App Store.</p></blockquote><h2 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h2><p>Let’s use enum to represent possible states for each resource. Here’s simple case where we only have 1 non consumable IAP product.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IAPError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> failedToRefreshReceipt</span><br><span class="line">    <span class="keyword">case</span> failedToRequestProduct</span><br><span class="line">    <span class="keyword">case</span> failedToPurchase</span><br><span class="line">    <span class="keyword">case</span> receiptNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IAPResourceState</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> notAsked</span><br><span class="line">    <span class="keyword">case</span> loading</span><br><span class="line">    <span class="keyword">case</span> success(<span class="type">T</span>)</span><br><span class="line">    <span class="keyword">case</span> failure(<span class="type">IAPError</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PricingPlan</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> pro = (<span class="type">Bundle</span>.main.bundleIdentifier ?? <span class="string">""</span>) + <span class="string">".pro"</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> isPro: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> product: <span class="type">IAPResourceState</span>&lt;<span class="type">SKProduct</span>&gt; = .notAsked</span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> purchase: <span class="type">IAPResourceState</span>&lt;<span class="type">SKPayment</span>&gt; = .notAsked</span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> receipt: <span class="type">IAPResourceState</span>&lt;<span class="type">InAppReceipt</span>&gt; = .notAsked</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s have a central place for managing all IAP operations, called <code>IAPManager</code>, it can update our <code>ObservableObject</code> <code>PricingPlan</code> hence triggers update to SwiftUI.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> StoreKit</span><br><span class="line"><span class="keyword">import</span> TPInAppReceipt</span><br><span class="line"><span class="keyword">import</span> Version</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IAPManager</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> pricingPlan: <span class="type">PricingPlan</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> paymentQueue: <span class="type">SKPaymentQueue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(pricingPlan: <span class="type">PricingPlan</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.pricingPlan = pricingPlan</span><br><span class="line">        <span class="keyword">self</span>.paymentQueue = <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.paymentQueue.add(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestProducts</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> identifiers = <span class="type">PricingPlan</span>.pro</span><br><span class="line">        <span class="keyword">let</span> request = <span class="type">SKProductsRequest</span>(productIdentifiers: <span class="type">Set</span>(arrayLiteral: identifiers))</span><br><span class="line">        request.delegate = <span class="keyword">self</span></span><br><span class="line">        pricingPlan.product = .loading</span><br><span class="line">        request.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">purchase</span><span class="params">(product: SKProduct)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="type">SKPaymentQueue</span>.canMakePayments() <span class="keyword">else</span> &#123;</span><br><span class="line">            showAlert(text: <span class="string">"You are not allowed to make payment. Please check device settings."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pricingPlan.purchase = .loading</span><br><span class="line">        <span class="keyword">let</span> payment = <span class="type">SKPayment</span>(product: product)</span><br><span class="line">        paymentQueue.add(payment)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">refreshReceipt</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="type">SKReceiptRefreshRequest</span>()</span><br><span class="line">        request.delegate = <span class="keyword">self</span></span><br><span class="line">        request.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">restorePurchase</span><span class="params">()</span></span> &#123;</span><br><span class="line">        paymentQueue.restoreCompletedTransactions()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Refresh-receipt"><a href="#Refresh-receipt" class="headerlink" title="Refresh receipt"></a>Refresh receipt</h3><p>You can use <code>restoreCompletedTransactions</code> if you simply <code>finishTransaction</code> and grant user pro feature, like in this simple tutorial <a href="https://www.raywenderlich.com/5456-in-app-purchase-tutorial-getting-started">In-App Purchase Tutorial: Getting Started</a>, search for <code>SKPaymentTransactionObserver</code>. <code>restoreCompletedTransactions</code> also updates receipt.</p><p>Otherwise refreshing receipt is a better idea. It serves both case when receipt is not there locally and when you want to restore transactions. With receipt refreshing, no restored transactions are created and <code>SKPaymentTransactionObserver</code> is not called, so we need to check receipt proactively.</p><p>Either <code>restoreCompletedTransactions</code>  or <code>SKReceiptRefreshRequest</code> asks for AppStore credential so you should present a button there and ask user.</p><h3 id="Check-local-receipt"><a href="#Check-local-receipt" class="headerlink" title="Check local receipt"></a>Check local receipt</h3><p>Try to locate local receipt and examine it.</p><ul><li>If it is not there (missing, corrupted), refresh receipt</li><li>If it’s there, check if it was from a version when the app was still as paid. Notice the difference in meaning of <code>originalAppVersion</code> in macOS and iOS</li><li>If it is not paid, check if this receipt contains In App Purchase information for our product</li></ul><p>In practice, we need to perform some basic checks on receipt, like bundle id, app version, device id. Read <a href="https://www.raywenderlich.com/9257-in-app-purchases-receipt-validation-tutorial">In-App Purchases: Receipt Validation Tutorial</a>, search for <code>Validating the Receipt</code>. <code>TPInAppReceipt</code> also has some handy <code>verify</code> functions</p><p>Besides verifying receipt locally, it is advisable to call <a href="https://developer.apple.com/documentation/appstorereceipts/verifyreceipt">verifyreceipt</a> either on device, or better on serve to let Apple verify receipt and returns you a human readable json for receipt information.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkReceipt</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> receipt = <span class="keyword">try</span> <span class="type">InAppReceipt</span>.localReceipt()</span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.receipt = .success(receipt)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.isPaid(receipt: receipt) &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.isPro = <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> receipt.containsPurchase(ofProductIdentifier: <span class="type">PricingPlan</span>.pro) &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.isPro = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.receipt = .failure(.receiptNotFound)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isPaid</span><span class="params">(receipt: InAppReceipt)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    #<span class="keyword">if</span> os(macOS)</span><br><span class="line">    <span class="comment">// originalAppVersion is CFBundleShortVersionString</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> version = <span class="type">Version</span>(receipt.originalAppVersion) &#123;</span><br><span class="line">        <span class="keyword">return</span> version &lt; versionToIAP</span><br><span class="line">    &#125;</span><br><span class="line">    #<span class="keyword">else</span></span><br><span class="line">    <span class="comment">// originalAppVersion is CFBundleVersion</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> buildNumber = <span class="type">Int</span>(receipt.originalAppVersion) &#123;</span><br><span class="line">        <span class="keyword">return</span> buildNumber &lt; buildNumberToIAP</span><br><span class="line">    &#125;</span><br><span class="line">    #endif</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, observe <code>SKProductsRequestDelegate</code> which also conforms to <code>SKRequestDelegate</code> for both product and receipt refresh request</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">IAPManager</span>: <span class="title">SKProductsRequestDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">productsRequest</span><span class="params">(<span class="number">_</span> request: SKProductsRequest, didReceive response: SKProductsResponse)</span></span> &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> product = response.products.first <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.product = .failure(<span class="type">IAPError</span>.failedToRequestProduct)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.product = .success(product)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(<span class="number">_</span> request: SKRequest, didFailWithError error: Error)</span></span> &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">switch</span> request &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKProductsRequest</span>:</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.product = .failure(<span class="type">IAPError</span>.failedToRequestProduct)</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKReceiptRefreshRequest</span>:</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.receipt = .failure(<span class="type">IAPError</span>.failedToRefreshReceipt)</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestDidFinish</span><span class="params">(<span class="number">_</span> request: SKRequest)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> request &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKReceiptRefreshRequest</span>:</span><br><span class="line">            checkReceipt()</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/703&quot;&gt;#703&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-is-receipt&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to disable NSTextView in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-disable-NSTextView-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-disable-NSTextView-in-SwiftUI/</id>
    <published>2020-11-27T11:24:13.000Z</published>
    <updated>2020-11-27T11:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/702">#702</a></strong></p><p>The trick is to use an overlay</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MessageTextView</span>(text: $input.message)</span><br><span class="line">    .overlay(obscure)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obscure: <span class="type">AnyView</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> store.pricingPlan.isPro &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">EmptyView</span>().erase()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Color</span>.black.opacity(<span class="number">0.01</span>).erase()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/702&quot;&gt;#702&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The trick is to use an
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to add under highlight to text in css</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-under-highlight-to-text-in-css/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-under-highlight-to-text-in-css/</id>
    <published>2020-11-20T04:22:58.000Z</published>
    <updated>2020-11-20T04:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/701">#701</a></strong></p><p>Use mark. This does not work for multiline</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;mark css=&#123;css`</span><br><span class="line">        <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">        <span class="selector-tag">line-height</span>: 0<span class="selector-tag">em</span>;</span><br><span class="line">        <span class="selector-tag">padding-bottom</span>: 0<span class="selector-class">.5em</span>;</span><br><span class="line">        `&#125;&gt;&#123;feature.title&#125;</span><br><span class="line">    &lt;/mark&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>Another way is to use background</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(180deg,rgba(255,255,255,0) <span class="number">50%</span>, <span class="number">#FFD0AE</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://beatrizcaraballo.com/blog/low-highlight-heading-links-squarespace">https://beatrizcaraballo.com/blog/low-highlight-heading-links-squarespace</a></li><li><a href="https://stackoverflow.com/questions/43683187/how-can-i-create-custom-underline-or-highlight-for-text-in-html-or-css">https://stackoverflow.com/questions/43683187/how-can-i-create-custom-underline-or-highlight-for-text-in-html-or-css</a></li><li><a href="https://medium.com/@codingdudecom/highlight-text-css-97331a5b71b5">https://medium.com/@codingdudecom/highlight-text-css-97331a5b71b5</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/701&quot;&gt;#701&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use mark. This does not work for
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>How to use default system fonts in React apps</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-default-system-fonts-in-React-apps/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-default-system-fonts-in-React-apps/</id>
    <published>2020-11-18T05:29:22.000Z</published>
    <updated>2020-11-18T05:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/700">#700</a></strong></p><p>In <code>index.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">'Segoe UI'</span>, <span class="string">'Roboto'</span>, <span class="string">'Oxygen'</span>, <span class="string">'Ubuntu'</span>, <span class="string">'Cantarell'</span>, <span class="string">'Fira Sans'</span>, <span class="string">'Droid Sans'</span>, <span class="string">'Helvetica Neue'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: source-code-pro, Menlo, Monaco, Consolas, <span class="string">'Courier New'</span>, monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/700&quot;&gt;#700&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;index.css&lt;/code&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple overlay container in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-overlay-container-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-overlay-container-in-React/</id>
    <published>2020-11-18T05:13:03.000Z</published>
    <updated>2020-11-18T05:22:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/699">#699</a></strong></p><p>Use term <code>ZStack</code> like in SwiftUI, we declare container as relative position. For now it uses only 2 items from <code>props.children</code> but can be tweaked to support mutiple</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ZStack&gt;</span><br><span class="line">                &lt;Header /&gt;</span><br><span class="line">                &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">                    <span class="selector-tag">padding-top</span>: 50<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">                `</span>&#125;&gt;</span><br><span class="line">                    &lt;Showcase factory=&#123;factory&#125; /&gt;</span><br><span class="line">                    &lt;Footer /&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>ZStack&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @jsx jsx */</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; css, jsx &#125; <span class="keyword">from</span> <span class="string">'@emotion/core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ZStack</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span></span><br><span class="line"><span class="css">        `</span>&#125;&gt;</span><br><span class="line">            &lt;div &gt;</span><br><span class="line">                &#123;props.children[<span class="number">0</span>]&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div css=&#123;css`</span></span><br><span class="line"><span class="regexp">                position: absolute;</span></span><br><span class="line"><span class="regexp">                top: 0;</span></span><br><span class="line"><span class="regexp">                left: 0;</span></span><br><span class="line"><span class="regexp">                width: 100%;</span></span><br><span class="line"><span class="regexp">            `&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &#123;props.children[1]&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/699&quot;&gt;#699&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use term &lt;code&gt;ZStack&lt;/code&gt; like in
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to search using regular expression in Xcode</title>
    <link href="https://onmyway133.github.io/blog/How-to-search-using-regular-expression-in-Xcode/"/>
    <id>https://onmyway133.github.io/blog/How-to-search-using-regular-expression-in-Xcode/</id>
    <published>2020-11-17T12:05:29.000Z</published>
    <updated>2020-11-17T12:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/698">#698</a></strong></p><p>Search <code>NSLayoutConstraint</code> calls that involves <code>bottomAnchor</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(NSLayoutConstraint(.*[\r\n])*).+?(?&#x3D;bottomAnchor)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">    child.leadingAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.leadingAnchor),</span><br><span class="line">    child.trailingAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.trailingAnchor),</span><br><span class="line">    child.topAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.topAnchor),</span><br><span class="line">    child.bottomAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.bottomAnchor)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/698&quot;&gt;#698&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Search &lt;code&gt;NSLayoutConstraint&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="https://onmyway133.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>How to write to temporary file in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-write-to-temporary-file-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-write-to-temporary-file-in-Swift/</id>
    <published>2020-11-15T05:23:39.000Z</published>
    <updated>2020-11-15T05:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/697">#697</a></strong></p><p>Use <code>temporaryDirectory</code> from <code>FileManager</code> and <code>String.write</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeTempFile</span><span class="params">(books: [Book])</span></span> -&gt; <span class="type">URL</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">FileManager</span>.<span class="keyword">default</span>.temporaryDirectory</span><br><span class="line">        .appendingPathComponent(<span class="type">UUID</span>().uuidString)</span><br><span class="line">        .appendingPathExtension(<span class="string">"txt"</span>)</span><br><span class="line">    <span class="keyword">let</span> string = books</span><br><span class="line">        .<span class="built_in">map</span>(&#123;</span><br><span class="line">            <span class="string">"book '\($0.url.path)'"</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .joined(separator: <span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">try</span>? string.write(to: url, atomically: <span class="literal">true</span>, encoding: .utf8)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/697&quot;&gt;#697&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;temporaryDirectory&lt;/code&gt; from
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to use functions with default arguments in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-functions-with-default-arguments-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-functions-with-default-arguments-in-Swift/</id>
    <published>2020-11-14T05:17:15.000Z</published>
    <updated>2020-11-14T05:17:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/696">#696</a></strong></p><p>Which methods do you think are used here</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Robot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> b: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">c</span>: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(a: <span class="type">Int</span> = <span class="number">1</span>, <span class="built_in">c</span>: <span class="type">Int</span> = <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.a = a</span><br><span class="line">        <span class="keyword">self</span>.b = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.<span class="built_in">c</span> = <span class="built_in">c</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Init with a=\(a) and c=\(c)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(a: <span class="type">Int</span> = <span class="number">1</span>, b: <span class="type">Int</span> = <span class="number">2</span>, <span class="built_in">c</span>: <span class="type">Int</span> = <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.a = a</span><br><span class="line">        <span class="keyword">self</span>.b = b</span><br><span class="line">        <span class="keyword">self</span>.<span class="built_in">c</span> = <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Init with a\(a), b=\(b) and c=\(c)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = <span class="type">Robot</span>(<span class="built_in">c</span>: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="type">Robot</span>(a: <span class="number">5</span>, <span class="built_in">c</span>: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> r3 = <span class="type">Robot</span>(a: <span class="number">5</span>, b: <span class="number">7</span>, <span class="built_in">c</span>: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> r4 = <span class="type">Robot</span>(a: <span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> r5 = <span class="type">Robot</span>(b: <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>The log is </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Init</span> with a=<span class="number">1</span> and <span class="built_in">c</span>=<span class="number">10</span></span><br><span class="line"><span class="type">Init</span> with a=<span class="number">5</span> and <span class="built_in">c</span>=<span class="number">10</span></span><br><span class="line"><span class="type">Init</span> with a5, b=<span class="number">7</span> and <span class="built_in">c</span>=<span class="number">10</span></span><br><span class="line"><span class="type">Init</span> with a=<span class="number">5</span> and <span class="built_in">c</span>=<span class="number">3</span></span><br><span class="line"><span class="type">Init</span> with a1, b=<span class="number">5</span> and <span class="built_in">c</span>=<span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/696&quot;&gt;#696&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which methods do you think are used
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to check IAP Transaction error</title>
    <link href="https://onmyway133.github.io/blog/How-to-check-IAP-Transaction-error/"/>
    <id>https://onmyway133.github.io/blog/How-to-check-IAP-Transaction-error/</id>
    <published>2020-11-14T04:32:19.000Z</published>
    <updated>2020-11-14T04:32:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/695">#695</a></strong></p><p>Inspect <code>SKPaymentTransaction</code> for <code>error</code>. In Swift, any <code>Error</code> can be safely bridged into <code>NSError</code> there you can check <code>errorDomain</code> and <code>code</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">handleFailure</span><span class="params">(<span class="number">_</span> transaction: SKPaymentTransaction)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> error = transaction.error <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> nsError = error <span class="keyword">as</span> <span class="type">NSError</span></span><br><span class="line">    <span class="keyword">guard</span> nsError.domain == <span class="type">SKError</span>.errorDomain <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> nsError.code &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">SKError</span>.clientInvalid.rawValue, <span class="type">SKError</span>.paymentNotAllowed.rawValue:</span><br><span class="line">        showAlert(text: <span class="string">"You are not allowed to make payment."</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">SKError</span>.paymentCancelled.rawValue:</span><br><span class="line">        showAlert(text: <span class="string">"Payment has been cancelled."</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">SKError</span>.unknown.rawValue, <span class="type">SKError</span>.paymentInvalid.rawValue:</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        showAlert(text: <span class="string">"Something went wrong making payment."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/695&quot;&gt;#695&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Inspect &lt;code&gt;SKPaymentTransaction&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to use nested ObservableObject in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-nested-ObservableObject-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-nested-ObservableObject-in-SwiftUI/</id>
    <published>2020-11-14T03:49:39.000Z</published>
    <updated>2020-11-14T03:49:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/694">#694</a></strong></p><p>I usually structure my app to have 1 main <code>ObservableObject</code> called <code>Store</code> with multiple properties in it.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> pricingPlan: <span class="type">PricingPlan</span>()</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> preferences: <span class="type">Preferences</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Preferences</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> opensAtLogin: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PricingPlan</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> isPro: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SwiftUI for now does not work with nested <code>ObservableObject</code>, so if I pass <code>Store</code> to PricingView, changes in <code>PricingPlan</code> does not trigger view update in PricingView.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MainView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span></span><br><span class="line">    <span class="keyword">var</span> store: <span class="type">Store</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123; geo <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        .sheet(isPresented: $showsPricing) &#123;</span><br><span class="line">            <span class="type">PricingView</span>(</span><br><span class="line">                isPresented: $showsPricing,</span><br><span class="line">                store: store</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are some workarounds</p><h3 id="Pass-nested-ObservableObject"><a href="#Pass-nested-ObservableObject" class="headerlink" title="Pass nested ObservableObject"></a>Pass nested ObservableObject</h3><p>So that View observes both parent and nested objects.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PricingView</span>(</span><br><span class="line">    store: store,</span><br><span class="line">    pricingPlan: store.pricingPlan</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Use-struct"><a href="#Use-struct" class="headerlink" title="Use struct"></a>Use struct</h3><p>This forces us to deal with immutability also, as with reference type PricingPlan, someone could just save a reference to it and alter it at some point.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PricingPlan</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Listen-to-nested-objects-changes"><a href="#Listen-to-nested-objects-changes" class="headerlink" title="Listen to nested objects changes"></a>Listen to nested objects changes</h3><p>Every <code>ObservableObject</code> has a synthesized property <code>objectWillChange</code> that triggers when any <code>@Publisshed</code> property changes</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> pricingPlan = <span class="type">PricingPlan</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> anyCancellable: <span class="type">AnyCancellable?</span> = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        anyCancellable = pricingPlan.objectWillChange.sink &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>?.objectWillChange.send()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/694&quot;&gt;#694&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I usually structure my app to have 1 main
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to check dark mode in AppKit for macOS apps</title>
    <link href="https://onmyway133.github.io/blog/How-to-check-dark-mode-in-AppKit-for-macOS-apps/"/>
    <id>https://onmyway133.github.io/blog/How-to-check-dark-mode-in-AppKit-for-macOS-apps/</id>
    <published>2020-11-10T04:18:34.000Z</published>
    <updated>2020-11-10T04:52:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/693">#693</a></strong></p><p><code>AppKit</code> app has its theme information stored in UserDefaults key <code>AppleInterfaceStyle</code>, if is dark, it contains String <code>Dark</code>.</p><p>Another way is to detect appearance via <code>NSView</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">R</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> dark = <span class="type">DarkTheme</span>()</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> light = <span class="type">LightTheme</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> theme: <span class="type">Theme</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> isDark = <span class="type">UserDefaults</span>.standard.string(forKey: <span class="string">"AppleInterfaceStyle"</span>) == <span class="string">"Dark"</span></span><br><span class="line">        <span class="keyword">return</span> isDark ? dark : light</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another way is to rely on <code>appearance</code> on NSView. You can quickly check via <code>NSApp.keyWindow?.effectiveAppearance</code> but notice that <code>keyWindow</code> can be nil when the app is not active since no window is focused for keyboard events. You should use <code>NSApp.windows.first</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDark = <span class="type">NSApp</span>.windows.first?.effectiveAppearance.bestMatch(from: [.darkAqua, .vibrantDark]) == .darkAqua</span><br></pre></td></tr></table></figure><p>Then build a simple Theme system</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> EasySwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Theme</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> primaryColor: <span class="type">Color</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> textColor: <span class="type">Color</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> text2Color: <span class="type">Color</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> backgroundColor: <span class="type">Color</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> background2Color: <span class="type">Color</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Theme</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> primaryColor: <span class="type">Color</span> &#123; <span class="type">Color</span>(hex: <span class="number">0x1</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DarkTheme</span>: <span class="title">Theme</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LightTheme</span>: <span class="title">Theme</span> </span>&#123;</span><br><span class="line">    ....   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For SwiftUI, you can <code>colorScheme</code> environment, then use modifier <code>.id(colorScheme)</code> to force SwiftUI to update when color scheme changes</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MainView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.colorScheme)</span><br><span class="line">    <span class="keyword">var</span> colorScheme</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;&#125;</span><br><span class="line">        .id(colorScheme)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/693&quot;&gt;#693&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AppKit&lt;/code&gt; app has its theme
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to check dark mode with color scheme in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-check-dark-mode-with-color-scheme-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-check-dark-mode-with-color-scheme-in-SwiftUI/</id>
    <published>2020-11-10T03:48:21.000Z</published>
    <updated>2020-11-10T03:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/692">#692</a></strong></p><p>Use <a href="https://developer.apple.com/documentation/swiftui/colorscheme">colorScheme</a> environment, for now it has 2 cases <code>dark</code> and <code>light</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MainView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.colorScheme) <span class="keyword">var</span> colorScheme</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(colorScheme == .dark ? <span class="string">"Dark Mode"</span> : <span class="string">"Light Mode"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/692&quot;&gt;#692&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to avoid multiple match elements in UITests from iOS 13</title>
    <link href="https://onmyway133.github.io/blog/How-to-avoid-multiple-match-elements-in-UITests-from-iOS-13/"/>
    <id>https://onmyway133.github.io/blog/How-to-avoid-multiple-match-elements-in-UITests-from-iOS-13/</id>
    <published>2020-11-04T09:02:01.000Z</published>
    <updated>2020-11-04T09:02:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/691">#691</a></strong></p><p>Supposed we want to present a ViewController, and there exist both <code>UIToolbar</code> in both the presenting and presented view controllers.</p><p>From iOS 13, the model style is not full screen and interactive. From UITests perspective there are 2 UIToolbar, we need to specify the correct one to avoid multiple match errors</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> editButton = app.toolbars[<span class="string">"EditArticle.Toolbar"</span>].buttons[<span class="string">"Edit"</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/691&quot;&gt;#691&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Supposed we want to present a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="testing" scheme="https://onmyway133.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to use accessibility container in UITests</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-accessibility-container-in-UITests/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-accessibility-container-in-UITests/</id>
    <published>2020-11-04T08:28:50.000Z</published>
    <updated>2020-11-04T08:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/690">#690</a></strong></p><p>Use <code>accessibilityElements</code> to specify containment for <code>contentView</code> and buttons. You can use Accessibility Inspector from Xcode to verify.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleCell</span>: <span class="title">UICollectionViewCell</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> authorLabel: <span class="type">UILabel</span></span><br><span class="line">    <span class="keyword">let</span> dateLabel: <span class="type">UILabel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> viewLabel: <span class="type">UILabel</span></span><br><span class="line">    <span class="keyword">let</span> deleteButton: <span class="type">UIButton</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupAccessibility</span><span class="params">()</span></span> &#123;</span><br><span class="line">        contentView.isAccessibilityElement = <span class="literal">true</span></span><br><span class="line">        contentView.accessibilityLabel = <span class="string">"This article is written by Nobita on Dec 4th 2020"</span></span><br><span class="line"></span><br><span class="line">        viewLabel.isAccessibilityElement = <span class="literal">true</span> <span class="comment">// Default is false</span></span><br><span class="line">        viewLabel.accessibilityTraits.insert(.button) <span class="comment">// Treat UILabel as button to VoiceOver</span></span><br><span class="line"></span><br><span class="line">        accessibilityElements = [contentView, viewLabel, deleteButton]</span><br><span class="line">        isAccessibilityElement = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This works OK under Voice Over and Accessibility Inspector. However in iOS 14 UITests, only the contentView is recognizable. The workaround is to use <code>XCUICoordinate</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deleteButton = cell.buttons[<span class="string">"Delete article"</span>]</span><br><span class="line"><span class="keyword">if</span> deleteButton.waitForExistence(timeout: <span class="number">1</span>) &#123;</span><br><span class="line">    deleteButton.tap()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> coordinate = cell.coordinate(</span><br><span class="line">        withNormalizedOffset: <span class="type">CGVector</span>(dx: <span class="number">0.9</span>, dy: <span class="number">0.9</span>)</span><br><span class="line">    )</span><br><span class="line">    coordinate.tap()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/690&quot;&gt;#690&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;accessibilityElements&lt;/code&gt; to
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="testing" scheme="https://onmyway133.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to make full size content view in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-full-size-content-view-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-full-size-content-view-in-SwiftUI-for-macOS/</id>
    <published>2020-11-03T04:19:35.000Z</published>
    <updated>2020-11-03T04:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/689">#689</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(<span class="number">_</span> aNotification: Notification)</span></span> &#123;</span><br><span class="line">    <span class="comment">// extend to title bar</span></span><br><span class="line">    <span class="keyword">let</span> contentView = <span class="type">ContentView</span>()</span><br><span class="line">        <span class="comment">// .padding(.top, 24) // can padding to give some space</span></span><br><span class="line">        .edgesIgnoringSafeArea(.top)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// specify fullSizeContentView</span></span><br><span class="line">    window = <span class="type">NSWindow</span>(</span><br><span class="line">        contentRect: <span class="type">NSRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">800</span>, height: <span class="number">600</span>),</span><br><span class="line">        styleMask: [.titled, .closable, .miniaturizable, .texturedBackground, .resizable, .fullSizeContentView],</span><br><span class="line">        backing: .buffered, </span><br><span class="line">       <span class="keyword">defer</span>: <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line">    window.center()</span><br><span class="line">    window.setFrameAutosaveName(<span class="string">"My App"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// window.title = ... // no title</span></span><br><span class="line">    <span class="comment">// window.toolbar = NSToolbar() // use toolbar if wanted. This triggers .unifiedTitleAndToolbar styleMask</span></span><br><span class="line">    window.titlebarAppearsTransparent = <span class="literal">true</span></span><br><span class="line">    window.titleVisibility = .hidden <span class="comment">// hide title</span></span><br><span class="line">    window.backgroundColor = <span class="type">R</span>.color.myBackgroundColor <span class="comment">// set our preferred background color</span></span><br><span class="line"></span><br><span class="line">    window.contentView = <span class="type">NSHostingView</span>(rootView: contentView)</span><br><span class="line">    window.makeKeyAndOrderFront(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have an issue where if I use <code>HSplitView</code>, some Button are not clickable until I drag the split view handle. The workaround is to use HStack with a Divider</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/689&quot;&gt;#689&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to override styles in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-override-styles-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-override-styles-in-SwiftUI/</id>
    <published>2020-10-31T04:53:31.000Z</published>
    <updated>2020-11-01T03:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/688">#688</a></strong></p><p>In the app I’m working on <a href="https://onmyway133.com/elegantconverter/">Elegant Converter</a>, I usually like preset theme with a custom background color and a matching foreground color.</p><p>Thanks to SwiftUI style cascading, I can just declare in root <code>MainView</code> and it will be inherited down the view hierachy.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MainView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HSplitView</span> &#123;</span><br><span class="line">            <span class="type">ListView</span>()</span><br><span class="line">            <span class="type">RightView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .foregroundColor(<span class="type">R</span>.color.text)</span><br><span class="line">        .background(<span class="type">R</span>.color.background)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This works great regardless of system light or dark mode, but in light mode it does not look good, as my designed theme is similar to dark mode. Here the color is pale for default Picker and Button.</p><img width="665" alt="Screenshot 2020-10-31 at 06 49 55" src="https://user-images.githubusercontent.com/2284279/97772225-4b99dc00-1b45-11eb-821f-7797e39d1da6.png"><p>The way to fix that is to reset the <code>foregroundColor</code>, take a look at the documentation for <a href="https://developer.apple.com/documentation/swiftui/view/foregroundcolor(_:)">foregroundColor</a></p><blockquote><p>The foreground color to use when displaying this view. Pass nil to remove any custom foreground color and to allow the system or the container to provide its own foreground color. If a container-specific override doesn’t exist, the system uses the primary color.</p></blockquote><p>So we can pass <code>nil</code> and the controls will pick the correct color based on system preferences.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Picker</span>(selection: intent.fileType, label: <span class="type">EmptyView</span>()) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(filtered, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="type">Text</span>($<span class="number">0</span>.dropdownName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.foregroundColor(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span>(action: convert) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"Convert"</span>)</span><br><span class="line">&#125;</span><br><span class="line">.foregroundColor(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>Now Picker and Button look nice in both dark and light mode</p><img width="613" alt="Screenshot 2020-10-31 at 06 52 53" src="https://user-images.githubusercontent.com/2284279/97772260-b5b28100-1b45-11eb-8a24-367fef910ce3.png"><img width="601" alt="Screenshot 2020-10-31 at 06 53 10" src="https://user-images.githubusercontent.com/2284279/97772265-c06d1600-1b45-11eb-88c9-340b045ba815.png">]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/688&quot;&gt;#688&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the app I’m working on &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>When to use function vs property in Swift</title>
    <link href="https://onmyway133.github.io/blog/When-to-use-function-vs-property-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/When-to-use-function-vs-property-in-Swift/</id>
    <published>2020-10-27T08:56:33.000Z</published>
    <updated>2020-10-27T08:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/687">#687</a></strong></p><p>Although I do Swift, I often follow Kotlin guideline <a href="https://kotlinlang.org/docs/reference/coding-conventions.html#functions-vs-properties">https://kotlinlang.org/docs/reference/coding-conventions.html#functions-vs-properties</a></p><p>In some cases functions with no arguments might be interchangeable with read-only properties. Although the semantics are similar, there are some stylistic conventions on when to prefer one to another.</p><p>Prefer a property over a function when the underlying algorithm:</p><ul><li>does not throw</li><li>is cheap to calculate (or cached on the first run)</li><li>returns the same result over invocations if the object state hasn’t changed</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/687&quot;&gt;#687&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Although I do Swift, I often follow
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="kotlin" scheme="https://onmyway133.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>How to use CoreData safely</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-CoreData-safely/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-CoreData-safely/</id>
    <published>2020-10-25T19:55:33.000Z</published>
    <updated>2020-10-25T19:58:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/686">#686</a></strong></p><p>I now use Core Data more often now. Here is how I usually use it, for example in <a href="https://onmyway133.com/pushhero/">Push Hero</a></p><p>From iOS 10 and macOS 10.12, <a href="https://developer.apple.com/documentation/coredata/nspersistentcontainer">NSPersistentContainer</a> that simplifies Core Data setup quite a lot. I usually use 1 <code>NSPersistentContainer</code> and its <code>viewContext</code> together with <code>newBackgroundContext</code> attached to that <code>NSPersistentContainer</code></p><p>In Core Data, each context has a queue, except for <code>viewContext</code> using the <code>DispatchQueue.main</code>, and each <code>NSManagedObject</code> retrieved from 1 context is supposed to use within that context queue only, except for <code>objectId</code> property.</p><p>Although <code>NSManagedObject</code> subclasses from <code>NSObject</code>, it has a lot of other constraints that we need to be aware of. So it’s safe to treat Core Data as a cache layer, and use our own model on top of it. I usually perform operations on background context to avoid main thread blocking, and <code>automaticallyMergesChangesFromParent</code> handles merge changes automatically for us.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SendHistoryItem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toCoreData</span><span class="params">(context: NSManagedObjectContext)</span></span> &#123;</span><br><span class="line">        context.perform &#123;</span><br><span class="line">            <span class="keyword">let</span> cd = <span class="type">CDSendHistoryItem</span>(context: context)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CDSendHistoryItem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toModel</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">SendHistoryItem</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CoreDataManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> backgroundContext: <span class="type">NSManagedObjectContext?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.backgroundContext = <span class="keyword">self</span>.persistentContainer.newBackgroundContext()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> persistentContainer: <span class="type">NSPersistentContainer</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> container = <span class="type">NSPersistentContainer</span>(name: <span class="string">"PushHero"</span>)</span><br><span class="line">        container.loadPersistentStores(completionHandler: &#123; (storeDescription, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> container</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">load</span><span class="params">(request: NSFetchRequest&lt;CDSendHistoryItem&gt;, completion: @escaping <span class="params">([SendHistoryItem])</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> context = <span class="type">CoreDataManager</span>.shared.backgroundContext <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        context.perform &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> cdItems = <span class="keyword">try</span> request.execute()</span><br><span class="line">                <span class="keyword">let</span> items = cdItems.compactMap(&#123; <span class="keyword">try</span>? $<span class="number">0</span>.toModel() &#125;)</span><br><span class="line">                completion(items)</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                completion([])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(items: [SendHistoryItem])</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> context = backgroundContext <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.perform &#123;</span><br><span class="line">            items.forEach &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="number">_</span> = $<span class="number">0</span>.toCoreData(context: context)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> context.save()</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://davedelong.com/blog/2018/05/09/the-laws-of-core-data/">https://davedelong.com/blog/2018/05/09/the-laws-of-core-data/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/686&quot;&gt;#686&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I now use Core Data more often now. Here
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
      <category term="core data" scheme="https://onmyway133.github.io/tags/core-data/"/>
    
  </entry>
  
  <entry>
    <title>How to pass ObservedObject as parameter in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-pass-ObservedObject-as-parameter-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-pass-ObservedObject-as-parameter-in-SwiftUI/</id>
    <published>2020-10-24T02:45:15.000Z</published>
    <updated>2020-10-24T02:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/685">#685</a></strong></p><p>Since we have custom init in <code>ChildView</code> to manually set a <code>State</code>, we need to pass <code>ObservedObject</code>. In the ParentView, use underscore <code>_</code> to access property wrapper type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ChildView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span></span><br><span class="line">    <span class="keyword">var</span> store: <span class="type">Store</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> selectedTask: <span class="type">AnyTask</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(store: <span class="type">ObservedObject</span>&lt;<span class="type">Store</span>&gt;) &#123;</span><br><span class="line">        _selectedTask = <span class="type">State</span>(initialValue: tasks.first!)</span><br><span class="line">        _store = store</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ParentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span></span><br><span class="line">    <span class="keyword">var</span> store: <span class="type">Store</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ChildView</span>(store: _store)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/685&quot;&gt;#685&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since we have custom init in
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to do equal width in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-do-equal-width-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-do-equal-width-in-SwiftUI/</id>
    <published>2020-10-23T06:17:01.000Z</published>
    <updated>2020-10-23T06:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/684">#684</a></strong></p><p>In SwiftUI, specifying <code>maxWidth</code> as <code>.infinity</code> means taking the whole available width of the container.<br>If many children ask for max width, then they will be divided equally.<br>This is similar to <code>weight</code> in <code>LinearLayout</code> in Android or css <code>flex-grow</code> property.</p><p>The same applies in vertical direct also.</p><p><img src="https://user-images.githubusercontent.com/2284279/96973946-da40a480-1518-11eb-8d32-5e9276b809b2.jpeg" alt="width"></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/684&quot;&gt;#684&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In SwiftUI, specifying
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
</feed>
