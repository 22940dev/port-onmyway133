<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2020-12-07T05:17:25.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to support right click menu to NSStatusItem</title>
    <link href="https://onmyway133.github.io/blog/How-to-support-right-click-menu-to-NSStatusItem/"/>
    <id>https://onmyway133.github.io/blog/How-to-support-right-click-menu-to-NSStatusItem/</id>
    <published>2020-12-07T05:17:25.000Z</published>
    <updated>2020-12-07T05:17:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/707">#707</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Omnia</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> statusItem = <span class="type">NSStatusBar</span>.system.statusItem(withLength: <span class="type">NSStatusItem</span>.squareLength)</span><br><span class="line"><span class="keyword">let</span> menuHandler = <span class="type">MenuHandler</span>()</span><br><span class="line">menuHandler.add(title: <span class="string">"About"</span>, action: &#123;</span><br><span class="line">    <span class="type">NSWorkspace</span>.shared.<span class="keyword">open</span>(<span class="type">URL</span>(string: <span class="string">"https://onmyway133.com/pushhero"</span>)!)</span><br><span class="line">&#125;)</span><br><span class="line">statusItem.menu = menuHandler.menu</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/707&quot;&gt;#707&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to convert struct to Core Data NSManagedObject</title>
    <link href="https://onmyway133.github.io/blog/How-to-convert-struct-to-Core-Data-NSManagedObject/"/>
    <id>https://onmyway133.github.io/blog/How-to-convert-struct-to-Core-Data-NSManagedObject/</id>
    <published>2020-12-07T05:05:04.000Z</published>
    <updated>2020-12-07T05:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/706">#706</a></strong></p><p>Use <code>Mirror</code> and set key value as <code>NSManagedObject</code> subclasses from <code>NSObject</code> </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagedObjectConverter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">convert</span>&lt;M&gt;<span class="params">(m: M, context: NSManagedObjectContext)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSManagedObject</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> entityName = <span class="type">String</span>(describing: m)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> entityDescription = <span class="type">NSEntityDescription</span>.entity(</span><br><span class="line">            forEntityName: entityName,</span><br><span class="line">            <span class="keyword">in</span>: context</span><br><span class="line">        ) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">AppError</span>.parsing</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> managedObject = <span class="type">NSManagedObject</span>(</span><br><span class="line">            entity: entityDescription,</span><br><span class="line">            insertInto: context</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: m)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> mirror.displayStyle == .<span class="keyword">struct</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">AppError</span>.parsing</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, anyValue) <span class="keyword">in</span> mirror.children &#123;</span><br><span class="line">            managedObject.setValue(anyValue, forKey: label)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> managedObject</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/706&quot;&gt;#706&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;Mirror&lt;/code&gt; and set key value
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="core data" scheme="https://onmyway133.github.io/tags/core-data/"/>
    
  </entry>
  
  <entry>
    <title>How to hack iOS apps</title>
    <link href="https://onmyway133.github.io/blog/How-to-hack-iOS-apps/"/>
    <id>https://onmyway133.github.io/blog/How-to-hack-iOS-apps/</id>
    <published>2020-12-06T04:54:53.000Z</published>
    <updated>2020-12-06T04:54:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/19">#19</a></strong></p><p>We need to care about security nowadays, here are some links I find useful to read more about this matter</p><ul><li><a href="https://github.com/Naituw/IPAPatch">https://github.com/Naituw/IPAPatch</a></li><li><a href="https://github.com/cyanzhong/Retriever">https://github.com/cyanzhong/Retriever</a></li><li><a href="https://github.com/KJCracks/Clutch">https://github.com/KJCracks/Clutch</a></li><li><a href="https://github.com/pjebs/Obfuscator-iOS">https://github.com/pjebs/Obfuscator-iOS</a></li><li><a href="https://github.com/UrbanApps/UAObfuscatedString">https://github.com/UrbanApps/UAObfuscatedString</a></li><li><a href="https://www.raywenderlich.com/46223/ios-app-security-analysis-part-2">https://www.raywenderlich.com/46223/ios-app-security-analysis-part-2</a></li><li><a href="http://www.splinter.com.au/2014/09/16/storing-secret-keys/">http://www.splinter.com.au/2014/09/16/storing-secret-keys/</a></li><li><a href="https://www.youtube.com/watch?v=5U3FfQUmcV4&feature=youtu.be">Anastasiia Voitova: Keys from the castle: ancient art of managing keys and trust</a></li><li><a href="https://www.hopperapp.com/">https://www.hopperapp.com/</a></li><li><a href="https://github.com/iosre/iOSAppReverseEngineering">https://github.com/iosre/iOSAppReverseEngineering</a></li><li><a href="http://nshipster.com/new-years-2015/">CocoaPods, Exposed</a></li><li><a href="http://blog.timac.org/?p=1707">Analysis of the Facebook.app for iOS [v. 87.0]</a></li><li><a href="http://quellish.tumblr.com/post/126712999812/how-on-earth-the-facebook-ios-application-is-so">http://quellish.tumblr.com/post/126712999812/how-on-earth-the-facebook-ios-application-is-so</a></li><li><a href="https://www.objc.io/issues/19-debugging/">https://www.objc.io/issues/19-debugging/</a></li><li><a href="https://github.com/felixgr/secure-ios-app-dev">https://github.com/felixgr/secure-ios-app-dev</a></li><li><a href="http://pragmaticswift.com/may-2017/app-security-in-swift.html">App Security in Swift</a></li><li><a href="https://code.tutsplus.com/articles/securing-communications-on-ios--cms-28529">Securing Communications on iOS</a></li><li><a href="https://medium.com/@guilhermerambo/how-i-discovered-instagrams-upcoming-video-calling-feature-on-ios-934d7085da57">How I discovered Instagram’s upcoming video calling feature on iOS</a></li><li><a href="https://blog.superhuman.com/advanced-swift-debugging-for-uikit-e154d1c28aaf">https://blog.superhuman.com/advanced-swift-debugging-for-uikit-e154d1c28aaf</a></li><li><a href="http://blog.zats.io/2017/12/27/iPhone-X-home-button/">http://blog.zats.io/2017/12/27/iPhone-X-home-button/</a></li><li><a href="https://medium.com/@nathangitter/exploring-apps-without-jailbreaking-e932904f9863">https://medium.com/@nathangitter/exploring-apps-without-jailbreaking-e932904f9863</a></li><li><a href="https://academy.realm.io/posts/conrad-kramer-reverse-engineering-ios-apps-lyft/">https://academy.realm.io/posts/conrad-kramer-reverse-engineering-ios-apps-lyft/</a></li><li><a href="https://github.com/BishopFox/iSpy">https://github.com/BishopFox/iSpy</a></li><li><a href="https://github.com/Polidea/SiriusObfuscator">https://github.com/Polidea/SiriusObfuscator</a></li><li><a href="https://oleb.net/2018/photos-data-model/">https://oleb.net/2018/photos-data-model/</a></li><li>The art of spelunking <a href="https://vimeo.com/290322018">https://vimeo.com/290322018</a></li><li><a href="https://briancoyner.github.io/xcode/2017/05/14/xcode-attach-debugger-to-apple-apps.html">https://briancoyner.github.io/xcode/2017/05/14/xcode-attach-debugger-to-apple-apps.html</a></li><li><a href="https://medium.com/@vixentael/popular-note-taking-apps-share-these-security-flaws-security-tips-for-developers-326180e41329">https://medium.com/@vixentael/popular-note-taking-apps-share-these-security-flaws-security-tips-for-developers-326180e41329</a></li><li><a href="https://medium.com/@kennethpoon/lets-write-swift-code-to-intercept-ssl-pinning-https-requests-12446303cc9d">https://medium.com/@kennethpoon/lets-write-swift-code-to-intercept-ssl-pinning-https-requests-12446303cc9d</a></li><li><a href="https://medium.com/@kennethpoon/how-to-perform-ios-code-injection-on-ipa-files-1ba91d9438db">https://medium.com/@kennethpoon/how-to-perform-ios-code-injection-on-ipa-files-1ba91d9438db</a></li><li><a href="https://github.com/armadsen/analyze_apps">https://github.com/armadsen/analyze_apps</a></li><li><a href="https://github.com/rockbruno/swiftshield">https://github.com/rockbruno/swiftshield</a></li><li><a href="https://rambo.codes/ios/2019/01/11/hacking-with-private-apis-on-ipad.html">https://rambo.codes/ios/2019/01/11/hacking-with-private-apis-on-ipad.html</a></li><li><a href="https://github.com/MichaelMKenny/ios-13-light-dark-wallpaper-app">https://github.com/MichaelMKenny/ios-13-light-dark-wallpaper-app</a></li><li><a href="https://curvedlayer.com/2020/08/09/ios-simulator-plugin-simctl.html">https://curvedlayer.com/2020/08/09/ios-simulator-plugin-simctl.html</a></li><li><a href="https://github.com/ios-control/ios-deploy">https://github.com/ios-control/ios-deploy</a> Install and debug iPhone apps from the command line, without using Xcode</li><li>Abusing iOS’ Screenshot Cropping Mechanism <a href="https://bryce.co/screenshot-cropping/">https://bryce.co/screenshot-cropping/</a></li><li><a href="https://github.com/kov4l3nko/MEDUZA">https://github.com/kov4l3nko/MEDUZA</a> A more or less universal SSL unpinning tool for iOS</li><li><a href="https://github.com/macmade/KeychainCracker">https://github.com/macmade/KeychainCracker</a></li></ul><p>Detecting languages and framework</p><ul><li><a href="https://blog.timac.org/2020/1019-evolution-of-the-programming-languages-from-iphone-os-to-ios-14/">https://blog.timac.org/2020/1019-evolution-of-the-programming-languages-from-iphone-os-to-ios-14/</a></li></ul><p>iOS Security</p><ul><li><a href="https://github.com/securing/IOSSecuritySuite">https://github.com/securing/IOSSecuritySuite</a></li></ul><p>Private frameworks</p><ul><li><a href="https://github.com/jenghis/nshift/blob/master/nshift/CBBlueLightClient.h">https://github.com/jenghis/nshift/blob/master/nshift/CBBlueLightClient.h</a></li></ul><h3 id="Hack-macOS-apps"><a href="#Hack-macOS-apps" class="headerlink" title="Hack macOS apps"></a>Hack macOS apps</h3><ul><li><a href="https://medium.com/@yaid/xcode-the-ultimate-debugging-and-cracking-tool-568541490f74">Xcode, the ultimate debugging and cracking tool</a></li><li><a href="https://lowlevelbits.org/reverse-engineering-stickies.app/">REVERSE ENGINEERING STICKIES.APP</a></li><li><a href="https://github.com/OWASP/owasp-mstg">https://github.com/OWASP/owasp-mstg</a></li><li><a href="https://echoone.com/filejuicer/">https://echoone.com/filejuicer/</a></li><li><a href="https://imazing.com/">https://imazing.com/</a></li></ul><p>Private frameworks</p><ul><li><a href="https://github.com/sindresorhus/touch-bar-simulator">https://github.com/sindresorhus/touch-bar-simulator</a></li></ul><h3 id="Hacking-Apple"><a href="#Hacking-Apple" class="headerlink" title="Hacking Apple"></a>Hacking Apple</h3><ul><li><a href="https://samcurry.net/hacking-apple/">https://samcurry.net/hacking-apple/</a></li></ul><h3 id="Hack-Android-apps"><a href="#Hack-Android-apps" class="headerlink" title="Hack Android apps"></a>Hack Android apps</h3><ul><li><a href="https://hackernoon.com/dont-publish-yet-reverse-engineering-the-medium-app-and-making-all-stories-in-it-free-48c8f2695687">Reverse Engineering The Medium App (and making all stories in it free)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/19&quot;&gt;#19&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need to care about security nowadays,
        
      
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>How to format ISO date string in Javascript</title>
    <link href="https://onmyway133.github.io/blog/How-to-format-ISO-date-string-in-Javascript/"/>
    <id>https://onmyway133.github.io/blog/How-to-format-ISO-date-string-in-Javascript/</id>
    <published>2020-12-05T05:00:44.000Z</published>
    <updated>2020-12-05T05:00:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/705">#705</a></strong></p><p>Supposed we have date in format ISO8601 and we want to get rid of T and millisecond and timezone Z</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">date.toDateString() <span class="comment">// "Sat Dec 05 2020"</span></span><br><span class="line">date.toString() <span class="comment">// "Sat Dec 05 2020 06:58:19 GMT+0100 (Central European Standard Time)"</span></span><br><span class="line">date.toISOString() <span class="comment">// "2020-12-05T05:58:19.081Z"</span></span><br></pre></td></tr></table></figure><p>We can use <code>toISOString</code>, then split base on the dot <code>.</code> then remove character <code>T</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date</span><br><span class="line">        .toISOString()</span><br><span class="line">        .split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">        .replace(<span class="string">'T'</span>, <span class="string">' '</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/705&quot;&gt;#705&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Supposed we have date in format ISO8601
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Getting to know some pragmatic programming language features</title>
    <link href="https://onmyway133.github.io/blog/Getting-to-know-some-pragmatic-programming-language-features/"/>
    <id>https://onmyway133.github.io/blog/Getting-to-know-some-pragmatic-programming-language-features/</id>
    <published>2020-12-05T04:44:54.000Z</published>
    <updated>2020-12-05T04:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/270">#270</a></strong></p><p>As you know, in the <a href="http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X">Pragmatic Programmer</a>, section Your Knowledge Portfolio, it is said that</p><blockquote><p><em>Learn at least one new language every year. Different languages solve the same problems in different ways. By learning several different approaches, you can help broaden your thinking and avoid getting stuck in a rut. Additionally, learning many languages is far easier now, thanks to the wealth of freely available software on the Internet</em></p></blockquote><p>I see learning programming languages as a chance to open up my horizon and learn some new concepts. It also encourage good habit like immutability, composition, modulation, …</p><p>I’d like to review some of the features of all the languages I have played with. Some are useful, some just make me interested or say “wow”</p><h3 id="Curly-braces"><a href="#Curly-braces" class="headerlink" title="Curly braces"></a>Curly braces</h3><p>Each language can have its own style of grouping block of code, but I myself like the curly braces the most, which are cute :]</p><p>Some like C, Java, Swift, … use curly braces</p><p><strong>Swift</strong></p><pre><code>init(total: Double, taxPct: Double) {  self.total = total  self.taxPct = taxPct  subtotal = total / (taxPct + 1)}</code></pre><p>Some like Haskell, Python, … use indentation</p><p><strong>Haskell</strong></p><pre><code>bmiTell :: (RealFloat a) =&gt; a -&gt; String  bmiTell bmi      | bmi &lt;= 18.5 = &quot;You&apos;re underweight, you emo, you!&quot;      | bmi &lt;= 25.0 = &quot;You&apos;re supposedly normal. Pffft, I bet you&apos;re ugly!&quot;      | bmi &lt;= 30.0 = &quot;You&apos;re fat! Lose some weight, fatty!&quot;      | otherwise   = &quot;You&apos;re a whale, congratulations!&quot;</code></pre><p>Some like Elixir use keyword list</p><p><strong>ELixir</strong></p><pre><code>if false, do: :this, else: :that</code></pre><h3 id="Named-parameter"><a href="#Named-parameter" class="headerlink" title="Named parameter"></a>Named parameter</h3><p>Language like Objective C, Swift offer named parameter, which make it easier to reason about a function call</p><pre><code>func sayHello(to person: String, and anotherPerson: String) -&gt; String {    return &quot;Hello \(person) and \(anotherPerson)!&quot;}</code></pre><h3 id="Explicit-type"><a href="#Explicit-type" class="headerlink" title="Explicit type"></a>Explicit type</h3><p>Language like C, Swift, Java, … have type information in parameter and in return, which make it easier to reason about a function call</p><p><strong>Swift</strong></p><pre><code>func sayHello(personName: String, alreadyGreeted: Bool) -&gt; String {    if alreadyGreeted {        return sayHelloAgain(personName)    } else {        return sayHello(personName)    }}</code></pre><h3 id="List-comprehension"><a href="#List-comprehension" class="headerlink" title="List comprehension"></a>List comprehension</h3><p>Languages like Haskell, Python, Elixir, support list comprehension</p><p><strong>Elixir</strong></p><pre><code>iex&gt; for n &lt;- [1, 2, 3, 4], do: n * n[1, 4, 9, 16]</code></pre><h3 id="First-class-function"><a href="#First-class-function" class="headerlink" title="First class function"></a>First class function</h3><p>I enjoy functional programming, so first class function support in Javascript, Swift, Haskell, Elixir, … really make me happy</p><p><strong>Haskell</strong></p><pre><code>zipWith&apos; (*) (replicate 5 2) [1..]</code></pre><h3 id="Curry"><a href="#Curry" class="headerlink" title="Curry"></a>Curry</h3><blockquote><p><em>Currying is the technique of translating the evaluation of a function that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions, each with a single argument (partial application)</em></p></blockquote><p>Language like Swift 2, Haskell, … have curry by default. Some like Javascript can use libraries (Lodash, …) to achieve this. In Haskell, every function officially only takes one parameter.</p><p>In Swift 3, curry was <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md">removed</a> :(</p><p>Haskell</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">multThree</span> :: (<span class="type">Num</span> a) =&gt; a -&gt; a -&gt; a -&gt; a  </span><br><span class="line"><span class="title">multThree</span> x y z = x * y * z</span><br></pre></td></tr></table></figure><p>By calling functions with too few parameters, we’re creating new functions on the fly.</p><p><strong>Javascript</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curry = <span class="built_in">require</span>(<span class="string">'lodash.curry'</span>);</span><br><span class="line"><span class="keyword">var</span> map = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, ary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ary.map(f);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> getChildren = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.childNodes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allTheChildren = map(getChildren);</span><br></pre></td></tr></table></figure><h3 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h3><p>I find pattern matching as a better way around if else statement</p><p>Swift supports pattern matching in switch statement</p><p><strong>Swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Trades</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Buy</span>(stock: <span class="type">String</span>, amount: <span class="type">Int</span>, stockPrice: <span class="type">Float</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sell</span>(stock: <span class="type">String</span>, amount: <span class="type">Int</span>, stockPrice: <span class="type">Float</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aTrade = <span class="type">Trades</span>.<span class="type">Buy</span>(stock: <span class="string">"APPL"</span>, amount: <span class="number">200</span>, stockPrice: <span class="number">115.5</span>)</span><br><span class="line"><span class="keyword">switch</span> aTrade &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Buy</span>(<span class="keyword">let</span> stock, <span class="keyword">let</span> amount, <span class="number">_</span>):</span><br><span class="line">    process(stock, amount)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Sell</span>(<span class="keyword">let</span> stock, <span class="keyword">let</span> amount, <span class="number">_</span>):</span><br><span class="line">    process(stock, amount * -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some like Haskell, Elixir, … also pattern matches on function name, which makes it work great for recursion</p><p><strong>Haskell</strong></p><pre><code>sayMe :: (Integral a) =&gt; a -&gt; String  sayMe 1 = &quot;One!&quot;  sayMe 2 = &quot;Two!&quot;  sayMe 3 = &quot;Three!&quot;  sayMe 4 = &quot;Four!&quot;  sayMe 5 = &quot;Five!&quot;  sayMe x = &quot;Not between 1 and 5&quot;  map _ []     = []map f (x:xs) = f x : map f xs</code></pre><p>In Elixir, the = operator is actually a match operator</p><p><strong>Elixir</strong></p><pre><code>iex&gt; x = 11iex&gt; x1iex&gt; 1 = x1iex&gt; 2 = x** (MatchError) no match of right hand side value: 1</code></pre><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><p>Some language like Haskell, Elixir, … don’t use loop, they use recursion with performance in mind, no overflow.</p><p>Haskell</p><pre><code>length&apos; :: (Num b) =&gt; [a] -&gt; b  length&apos; [] = 0  length&apos; (_:xs) = 1 + length&apos; xs</code></pre><h3 id="Laziness"><a href="#Laziness" class="headerlink" title="Laziness"></a>Laziness</h3><p>Some languages support infinite collection, thanks to their laziness.</p><p>Haskell is lazy, if you map something over a list several times and filter it several times, it will only pass over the list once</p><p><strong>Haskell</strong></p><pre><code>largestDivisible :: (Integral a) =&gt; a  largestDivisible = head (filter p [100000,99999..])      where p x = x `mod` 3829 == 0</code></pre><p>Elixir defines the concept of Eager with Enum and Lazy with Stream</p><p><strong>Elixir</strong></p><pre><code>1..100_000 |&gt; Enum.map(&amp;(&amp;1 * 3)) |&gt; Enum.filter(odd?) |&gt; Enum.sum</code></pre><h2 id="Custom-operator"><a href="#Custom-operator" class="headerlink" title="Custom operator"></a>Custom operator</h2><p>Elixir is famous for its pipe |&gt; operator</p><blockquote><p><em>The |&gt; symbol used in the snippet above is the pipe operator: it simply takes the output from the expression on its left side and passes it as the first argument to the function call on its right side</em></p></blockquote><p>Elixir</p><pre><code>1..100_000 |&gt; Enum.map(&amp;(&amp;1 * 3)) |&gt; Enum.filter(odd?) |&gt; Enum.sum</code></pre><p>Haskell often takes advantage of this custom -: operator Haskell</p><pre><code>x -: f = f x  (0,0) -: landLeft 1 -: landRight 1 -: landLeft 2</code></pre><h3 id="Functor-Applicative-Functor-Monoid-Monad"><a href="#Functor-Applicative-Functor-Monoid-Monad" class="headerlink" title="Functor, Applicative Functor, Monoid, Monad"></a>Functor, Applicative Functor, Monoid, Monad</h3><p>I really like enjoy Haskell because of these typeclasses. It realizes common pattern (map, apply, join, bind, …) with comptutational context. It really enlightens me when I find that function is a Monad as well (you should read the Reader monad)</p><p><strong>Haskell</strong></p><pre><code>instance Monad Maybe where      return x = Just x      Nothing &gt;&gt;= f = Nothing      Just x &gt;&gt;= f  = f x      fail _ = Nothing  landLeft :: Birds -&gt; Pole -&gt; Maybe Pole  landLeft n (left,right)      | abs ((left + n) - right) &lt; 4 = Just (left + n, right)      | otherwise                    = Nothing  landRight :: Birds -&gt; Pole -&gt; Maybe Pole  landRight n (left,right)      | abs (left - (right + n)) &lt; 4 = Just (left, right + n)      | otherwise                    = Nothingghci&gt; return (0,0) &gt;&gt;= landLeft 1 &gt;&gt;= banana &gt;&gt;= landRight 1  Nothing</code></pre><p>List comprehension in Haskell is just syntactic sugar for using lis as Monad <strong>Haskell</strong></p><pre><code>ghci&gt; [ (n,ch) | n &lt;- [1,2], ch &lt;- [&apos;a&apos;,&apos;b&apos;] ]  [(1,&apos;a&apos;),(1,&apos;b&apos;),(2,&apos;a&apos;),(2,&apos;b&apos;)]</code></pre><p><strong>Swift</strong></p><pre><code>enum Result&lt;T&gt; {    case Value(T)    case Error(NSError)}extension Result {    func map&lt;U&gt;(f: T -&gt; U) -&gt; Result&lt;U&gt; {        switch self {            case let .Value(value):                return Result&lt;U&gt;.Value(f(value))            case let .Error(error):                return Result&lt;U&gt;.Error(error)        }    }}extension Result {    static func flatten&lt;T&gt;(result: Result&lt;Result&lt;T&gt;&gt;) -&gt; Result&lt;T&gt; {        switch result {            case let .Value(innerResult):                return innerResult            case let .Error(error):                return Result&lt;T&gt;.Error(error)        }    }}extension Result {    func flatMap&lt;U&gt;(f: T -&gt; Result&lt;U&gt;) -&gt; Result&lt;U&gt; {        return Result.flatten(map(f))    }}</code></pre><h3 id="Trait-and-mixin"><a href="#Trait-and-mixin" class="headerlink" title="Trait and mixin"></a>Trait and mixin</h3><p>Languages like Scala, … support trait</p><blockquote><p><em>Similar to interfaces in Java, traits are used to define object types by specifying the signature of the supported methods. Unlike Java, Scala allows traits to be partially implemented; i.e. it is possible to define default implementations for some methods</em></p></blockquote><p><strong>Scala</strong></p><pre><code>trait Similarity {  def isSimilar(x: Any): Boolean  def isNotSimilar(x: Any): Boolean = !isSimilar(x)}class Point(xc: Int, yc: Int) extends Similarity {  var x: Int = xc  var y: Int = yc  def isSimilar(obj: Any) =    obj.isInstanceOf[Point] &amp;&amp;    obj.asInstanceOf[Point].x == x}</code></pre><p>Swift can uses Protocol Extension to <a href="http://matthijshollemans.com/2015/07/22/mixins-and-traits-in-swift-2/">achieve trait</a></p><p><strong>Swift</strong></p><pre><code>protocol GunTrait {    func shoot() -&gt; String {        return &quot;Shoot&quot;    }}protocol RenderTrait {    func render() -&gt; String {        return &quot;Render&quot;    }}struct Player: GameObject, AITrait, GunTrait, RenderTrait, HealthTrait {}</code></pre><p>Ruby supports Mixin via Module</p><p><strong>Ruby</strong></p><pre><code>module Greetings  def hello    puts &quot;Hello!&quot;  end  def bonjour    puts &quot;Bonjour!&quot;  end  def hola    puts &quot;Hola!&quot;  endendclass User  include Greetingsend</code></pre><h3 id="Delegate-property"><a href="#Delegate-property" class="headerlink" title="Delegate property"></a>Delegate property</h3><p>There are certain common kinds of properties that would be very nice to implement once and for all like lazy, observable and storing. An example is in <strong>Kotlin</strong></p><pre><code>class Delegate {    operator fun getValue(thisRef: Any?, property: KProperty&lt;*&gt;): String {        return &quot;$thisRef, thank you for delegating &apos;${property.name}&apos; to me!&quot;    }    operator fun setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: String) {        println(&quot;$value has been assigned to &apos;${property.name}&apos; in $thisRef.&quot;)    }}</code></pre><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>Hope you find something interesting. Each language has its own pros and is designed for specific purpose. So no list will be enough to cover them all.</p><p>To take a quick peek into other programming languages, I find <a href="https://www.youtube.com/playlist?list=PLGLfVvz_LVvSX7fVd4OUFp_ODd86H0ZIY">Learn in One Video</a> by Derek very helpful.</p><p>There are things that intrigue us every day like Swift initialization rule make it explicit when using initializer, Go goroutine and channel for concurrent code, Elixir process for easy concurrent and message communication. You’ll be amazed by how process encapsulates state, Haskell data type encourages immutability and thread safe code, Elixir macro for great extension of the language. The best way to to learn is to use and dive into the languages often.</p><p>May your code continue to compile.</p><p>While you are here, you may like my other posts</p><ul><li><a href="https://hackernoon.com/next-to-first-next-to-nothing-b7b7b2ba8a34">Next to first, next to nothing</a></li><li><a href="https://hackernoon.com/20-recommended-utility-apps-for-macos-in-2018-ea494b4db72b">20 recommended utility apps for macOS in 2018</a></li><li><a href="https://hackernoon.com/how-to-make-tag-selection-view-in-react-native-b6f8b0adc891">How to make tag selection view in React Native</a></li><li><a href="https://hackernoon.com/8-ways-to-communicate-between-fragment-and-activity-in-android-apps-235b60005d04">8 ways to communicate between Fragment and Activity in Android apps</a></li><li>Original post <a href="https://hackernoon.com/do-you-know-these-interesting-programming-languages-features-1fab3fcb2118">https://hackernoon.com/do-you-know-these-interesting-programming-languages-features-1fab3fcb2118</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/270&quot;&gt;#270&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As you know, in the &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="kotlin" scheme="https://onmyway133.github.io/tags/kotlin/"/>
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>How to use One Dark theme and Fira Code font for IDEs</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-One-Dark-theme-and-Fira-Code-font-for-IDEs/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-One-Dark-theme-and-Fira-Code-font-for-IDEs/</id>
    <published>2020-12-05T04:33:52.000Z</published>
    <updated>2020-12-05T04:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/281">#281</a></strong></p><p>A good theme and font can increase your development happiness a lot. Ever since using <a href="https://atom.io/">Atom</a>, I liked its One Dark theme. The background and text colors are just elegant and pleasant to the eyes.</p><h3 id="One-Dark"><a href="#One-Dark" class="headerlink" title="One Dark"></a>One Dark</h3><p>Original designed for Atom, <a href="https://atom.io/themes/one-dark-ui">one-dark-ui</a> that claims to adapt to most syntax themes, used together with <a href="https://github.com/mozilla/Fira">Fira</a> Mono font from mozilla.</p><p><img src="https://cdn-images-1.medium.com/max/3552/0*03uqfI0DFKADizkR" alt=""></p><p>There is also <a href="https://draculatheme.com/">Dracula</a> which is popular, but the contrast seem too high for my eyes.</p><h3 id="Fira"><a href="#Fira" class="headerlink" title="Fira"></a>Fira</h3><p>I like <a href="https://github.com/tonsky/FiraCode">FiraCode</a> font the most, it is just beautiful and supports ligatures.</p><p><img src="https://cdn-images-1.medium.com/max/3408/1*4iJo0-L4cS1OYl_jd3SSXw.png" alt=""></p><p>Alternatively, you can browse <a href="https://github.com/ProgrammingFonts/ProgrammingFonts">ProgrammingFonts</a> or other ligature fonts like <a href="https://github.com/i-tu/Hasklig">Hasklig</a> to see which font suits you.</p><p>Theme and font are completely personal taste, but if you like me, please give One Dark and Fira a try, here is how to do that in Xcode, Android Studio and Visual Studio Code, which are editors that I use daily.</p><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><p>Firstly, you need to install the latest compiled font of <a href="https://github.com/tonsky/FiraCode/releases">FiraCode</a></p><p>I used to have my own replication of One Dark, called <a href="https://github.com/onmyway133/DarkSide">DarkSide</a>, this was how I learned how to make Xcode theme. For now, I find <a href="https://github.com/bojan/xcode-one-dark">xcode-one-dark</a> good enough. Xcode theme is just xml file with .xccolortheme extension and is placed into ~/Library/Developer/Xcode/UserData/FontAndColorThemes</p><p>After installing the theme, you should be able to select it from Preferences -&gt; Fonts &amp; Colors</p><p><img src="https://cdn-images-1.medium.com/max/3648/1*72XHQXThGhqTVpoOcYmF-g.png" alt=""></p><p>And it looks like below.</p><p><img src="https://cdn-images-1.medium.com/max/7168/1*Yk1GRdW7ALnU6UcaPyWvRA.png" alt=""></p><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><p>Android Studio defaults to have only Default and Dracula theme. Let’s choose Darcula for now. I hope there will be One Dark support.</p><p><img src="https://cdn-images-1.medium.com/max/4548/1*SVS1CaXxXH3MvxTLLr4i0w.png" alt=""></p><p>Also, Android Studio can preferably selects Fira Code, which we should have already installed. Remember to select Enable font ligatures to stay cool</p><p><img src="https://cdn-images-1.medium.com/max/4548/1*iwKiy_uzCRT5iG9V5luWKQ.png" alt=""></p><p>It looks like this</p><p><img src="https://cdn-images-1.medium.com/max/7168/1*MXOaGXuT30B4TNvX4xgGEg.png" alt=""></p><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>Installing theme in VSCode is easy with extensions. There is this <a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">One Dark Pro</a> that we can install directly from Extensions panel in VS Code. Alternatively, you can also choose <a href="https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark">Atom One Dark Theme</a></p><p><img src="https://cdn-images-1.medium.com/max/7168/1*Q5L_3MNaJlp1Yz6IpmotEQ.png" alt=""></p><p>Then go to Preferences -&gt; Settings to specify Fira Code . Remember to check for Font Ligatures</p><p><img src="https://cdn-images-1.medium.com/max/6720/1*uVRSZOTCkm1i2VK6CCgXEA.png" alt=""></p><p>The result should look like this</p><p><img src="https://cdn-images-1.medium.com/max/7168/1*zqgMt0v_FEGydm67VuUT5w.png" alt=""></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li>Original post <a href="https://medium.com/fantageek/one-dark-theme-and-fira-code-font-for-ides-d67bbe2ac8cb">https://medium.com/fantageek/one-dark-theme-and-fira-code-font-for-ides-d67bbe2ac8cb</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/281&quot;&gt;#281&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A good theme and font can increase your
        
      
    
    </summary>
    
    
    
      <category term="tech" scheme="https://onmyway133.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>How to declare Error in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-declare-Error-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-declare-Error-in-Swift/</id>
    <published>2020-12-05T04:31:35.000Z</published>
    <updated>2020-12-05T04:31:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/704">#704</a></strong></p><p>We used to declare enum that conforms to <code>Error</code>, but any type like struct or class can conform to Error as well.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">NetworkError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> failToCreateRequest</span><br><span class="line">    <span class="keyword">case</span> failToParseResponse</span><br><span class="line">    <span class="keyword">case</span> failToReachServe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DetailError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> networkError: <span class="type">Error</span></span><br><span class="line">    <span class="keyword">let</span> createdAt: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">let</span> tag: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> trackId: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> detailError: <span class="type">DetailError</span></span><br><span class="line">    <span class="keyword">let</span> trackSession: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(trackId: <span class="type">String</span>, detailError: <span class="type">DetailError</span>, trackSession: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.trackId = trackId</span><br><span class="line">        <span class="keyword">self</span>.detailError = detailError</span><br><span class="line">        <span class="keyword">self</span>.trackSession = trackSession</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> networkError = <span class="type">NetworkError</span>.failToCreateRequest</span><br><span class="line"><span class="keyword">let</span> detailError = <span class="type">DetailError</span>(networkError: networkError, createdAt: <span class="type">Date</span>(), tag: <span class="string">"0.1"</span>)</span><br><span class="line"><span class="keyword">let</span> trackError = <span class="type">TrackError</span>(trackId: <span class="string">"AB-01"</span>, detailError: detailError, trackSession: <span class="string">"101"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/704&quot;&gt;#704&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We used to declare enum that conforms to
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to convert from paid to free with IAP</title>
    <link href="https://onmyway133.github.io/blog/How-to-convert-from-paid-to-free-with-IAP/"/>
    <id>https://onmyway133.github.io/blog/How-to-convert-from-paid-to-free-with-IAP/</id>
    <published>2020-12-04T05:58:17.000Z</published>
    <updated>2020-12-04T05:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/703">#703</a></strong></p><h2 id="What-is-receipt"><a href="#What-is-receipt" class="headerlink" title="What is receipt"></a>What is receipt</h2><p>Read <a href="https://stackoverflow.com/questions/45615106/when-to-refresh-a-receipt-vs-restore-purchases-in-ios">When to refresh a receipt vs restore purchases in iOS?</a></p><p>From iOS 7, every app downloaded from the store has a receipt (for downloading/buying the app) at <code>appStoreReceiptURL</code>. When users purchases something via In App Purchase, the content at <code>appStoreReceiptURL</code> is updated with purchases information. Most of the cases, you just need to refresh the receipt (at appStoreReceiptURL) so that you know which transactions users have made.</p><p><strong>Note</strong></p><ul><li>Receipt is generated and bundled with your app when user download the app, whether it is free or paid</li><li>When user makes IAP, receipt is updated with IAP information</li><li>When user downloads an app (download free, or purchase paid app), they get future updates (whether free or paid) forever.</li><li>Call <code>SKReceiptRefreshRequest</code> or <code>SKPaymentQueue.restoreCompletedTransactions</code> asks for Appstore credential</li><li>When we build the app from Xcode or download from Testflight, receipt is not bundled within the app since the app is not downloaded from AppStore. We can use <code>SKReceiptRefreshRequest</code> to download receipt from sandbox Appstore</li><li><code>restoreCompletedTransactions</code> updates app receipt</li><li>Receipt is stored locally on device, so when user uninstalls and reinstalls your app, there’s no in app purchases information, this is when you should refresh receipt or <code>restoreCompletedTransactions</code></li></ul><p>Users restore transactions to maintain access to content they’ve already purchased. For example, when they upgrade to a new phone, they don’t lose all of the items they purchased on the old phone. Include some mechanism in your app to let the user restore their purchases, such as a Restore Purchases button. Restoring purchases prompts for the user’s App Store credentials, which interrupts the flow of your app: because of this, don’t automatically restore purchases, especially not every time your app is launched.</p><p>In most cases, all your app needs to do is refresh its receipt and deliver the products in its receipt. The refreshed receipt contains a record of the user’s purchases in this app, on this device or any other device. However, some apps need to take an alternate approach for one of the following reasons:</p><ul><li>If you use Apple-hosted content, restoring completed transactions gives your app the transaction objects it uses to download the content. If you need to support versions of iOS earlier than iOS 7, where the app receipt isn’t available, restore completed transactions instead.</li><li>Refreshing the receipt asks the App Store for the latest copy of the receipt. Refreshing a receipt does not create any new transactions.</li><li>Restoring completed transactions creates a new transaction for every completed transaction the user made, essentially replaying history for your transaction queue observer.</li></ul><p>More about receipt, from WWDC 2017, What’s new in StoreKit session <a href="https://developer.apple.com/videos/play/wwdc2017/303/">https://developer.apple.com/videos/play/wwdc2017/303/</a></p><p><img src="https://user-images.githubusercontent.com/2284279/100661732-38507b00-3354-11eb-9198-104410e5ddfb.png" alt="receipt"></p><p>You can also watch WWDC 2017, session Advanced StoreKit for more detail <a href="https://developer.apple.com/videos/play/wwdc2017/305/">https://developer.apple.com/videos/play/wwdc2017/305/</a></p><p><img src="https://user-images.githubusercontent.com/2284279/100661745-3d152f00-3354-11eb-943d-9c6d9b79000d.png" alt="receipt tips"></p><h2 id="Restoring-Purchased-Products"><a href="#Restoring-Purchased-Products" class="headerlink" title="Restoring Purchased Products"></a>Restoring Purchased Products</h2><p>Read <a href="https://developer.apple.com/documentation/storekit/in-app_purchase/restoring_purchased_products">Restoring Purchased Products</a></p><blockquote><p>Users sometimes need to restore purchased content, such as when they upgrade to a new phone.</p></blockquote><blockquote><p>Don’t automatically restore purchases, especially when your app is launched. Restoring purchases prompts for the user’s App Store credentials, which interrupts the flow of your app</p></blockquote><blockquote><p>In most cases, you only need to refresh the app receipt and deliver the products listed on the receipt. The refreshed receipt contains a record of the user’s purchases in this app, from any device the user’s App Store account is logged into</p></blockquote><blockquote><p>Refreshing a receipt doesn’t create new transactions; it requests the latest copy of the receipt from the App Store</p></blockquote><blockquote><p>Restoring completed transactions creates a new transaction for every transaction previously completed, essentially replaying history for your transaction queue observer. Your app maintains its own state to keep track of why it’s restoring completed transactions and how to handle them.</p></blockquote><h2 id="What-are-the-different-IAP-types"><a href="#What-are-the-different-IAP-types" class="headerlink" title="What are the different IAP types"></a>What are the different IAP types</h2><p>From AppStore</p><h3 id="Consumable-pay-everytime"><a href="#Consumable-pay-everytime" class="headerlink" title="Consumable (pay everytime)"></a>Consumable (pay everytime)</h3><p>A consumable In-App Purchase must be purchased every time the user downloads it. One-time services, such as fish food in a fishing app, are usually implemented as consumables.</p><h3 id="Non-Consumable-one-time-payment"><a href="#Non-Consumable-one-time-payment" class="headerlink" title="Non-Consumable (one time payment)"></a>Non-Consumable (one time payment)</h3><p>Non-consumable In-App Purchases only need to be purchased once by users. Services that do not expire or decrease with use are usually implemented as non-consumables, such as new race tracks for a game app.</p><h3 id="Auto-Renewable-Subscriptions-will-deduct-money-from-your-credit-card-on-a-cycle-complete"><a href="#Auto-Renewable-Subscriptions-will-deduct-money-from-your-credit-card-on-a-cycle-complete" class="headerlink" title="Auto-Renewable Subscriptions (will deduct money from your credit card on a cycle complete)"></a>Auto-Renewable Subscriptions (will deduct money from your credit card on a cycle complete)</h3><p>Auto-renewable Subscriptions allow the user to purchase updating and dynamic content for a set duration of time. Subscriptions renew automatically unless the user opts out, such as magazine subscriptions.</p><h3 id="Free-Subscription-no-payment-and-is-still-visible-even-you-did-not-submitted-your-account-detail-to-itunes-connect"><a href="#Free-Subscription-no-payment-and-is-still-visible-even-you-did-not-submitted-your-account-detail-to-itunes-connect" class="headerlink" title="Free Subscription (no payment and is still visible even you did not submitted your account detail to itunes connect)"></a>Free Subscription (no payment and is still visible even you did not submitted your account detail to itunes connect)</h3><p>Free subscriptions are a way for developers to put free subscription content in Newsstand. Once a user signs up for a free subscription, it will be available on all devices associated with the user’s Apple ID. Note that free subscriptions do not expire and can only be offered in Newsstand-enabled apps.</p><h3 id="Non-Renewing-need-to-renew-manually"><a href="#Non-Renewing-need-to-renew-manually" class="headerlink" title="Non-Renewing (need to renew manually)"></a>Non-Renewing (need to renew manually)</h3><p>Subscription Non-Renewing Subscriptions allow the sale of services with a limited duration. Non-Renewing Subscriptions must be used for In-App Purchases that offer time-based access to static content. Examples include a one week subscription to voice guidance feature within a navigation app or an annual subscription to online catalog of archived video or audio.</p><h2 id="When-is-app-receipt-missing"><a href="#When-is-app-receipt-missing" class="headerlink" title="When is app receipt missing"></a>When is app receipt missing</h2><p>Read <a href="https://developer.apple.com/documentation/storekit/skreceiptrefreshrequest">SKReceiptRefreshRequest</a></p><blockquote><p>Use this API to request a new receipt if the receipt is invalid or missing</p></blockquote><p>Receipt is stored locally on device. It can be missing in case user sync or restore device.</p><p>Watch <a href="https://asciiwwdc.com/2014/sessions/305">WWDC 2014 - 305 Preventing Unauthorized Purchases with Receipts</a></p><h2 id="How-to-check-receipt-existence"><a href="#How-to-check-receipt-existence" class="headerlink" title="How to check receipt existence"></a>How to check receipt existence</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bundle</span>.main.appStoreReceiptURL</span><br><span class="line">checkResourceIsReachable</span><br></pre></td></tr></table></figure><h2 id="How-to-read-receipt"><a href="#How-to-read-receipt" class="headerlink" title="How to read receipt"></a>How to read receipt</h2><p>Read <a href="https://www.raywenderlich.com/9257-in-app-purchases-receipt-validation-tutorial">In-App Purchases: Receipt Validation Tutorial</a></p><blockquote><p>The receipt consists of a single file in the app bundle. The file is in a format called PKCS #7. The payload consists of a set of receipt attributes in a cross-platform format called ASN.1</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">12</span>: <span class="comment">// Receipt Creation Date</span></span><br><span class="line">  <span class="keyword">var</span> dateStartPtr = ptr</span><br><span class="line">  receiptCreationDate = readASN1Date(ptr: &amp;dateStartPtr, maxLength: length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>: <span class="comment">// IAP Receipt</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"IAP Receipt."</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">case</span> <span class="number">19</span>: <span class="comment">// Original App Version</span></span><br><span class="line">  <span class="keyword">var</span> stringStartPtr = ptr</span><br><span class="line">  originalAppVersion = readASN1String(ptr: &amp;stringStartPtr, maxLength: length)</span><br></pre></td></tr></table></figure><p>Use <a href="https://github.com/tikhop/TPInAppReceipt">TPInAppReceipt</a> which includes certificates.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="type">InAppReceipt</span>.localReceipt()</span><br></pre></td></tr></table></figure><p>Check <a href="https://developer.apple.com/library/archive/releasenotes/General/ValidateAppStoreReceipt/Chapters/ReceiptFields.html">Receipt Fields</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Original Application Version</span><br><span class="line">The version of the app that was originally purchased.</span><br><span class="line">ASN.1 Field Type 19</span><br><span class="line">ASN.1 Field Value UTF8STRING</span><br></pre></td></tr></table></figure><p><strong>Note</strong></p><blockquote><p>This corresponds to the value of CFBundleVersion (in iOS) or CFBundleShortVersionString (in macOS) in the Info.plist file when the purchase was originally made</p></blockquote><p><code>CFBundleVersion</code> is build number, and <code>CFBundleShortVersionString</code> is app version</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In-App Purchase Receipt</span><br><span class="line">The receipt for an in-app purchase.</span><br><span class="line">ASN.1 Field Type 17</span><br></pre></td></tr></table></figure><p>Read <a href="https://developer.apple.com/documentation/storekit/in-app_purchase/validating_receipts_with_the_app_store">Validating Receipts with the App Store</a></p><p>Sample <code>verifyReceipt</code> json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"receipt"</span>: &#123;</span><br><span class="line">        <span class="attr">"receipt_type"</span>: <span class="string">"ProductionSandbox"</span>,</span><br><span class="line">        <span class="attr">"adam_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"app_item_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"bundle_id"</span>: <span class="string">"com.example.app.ios"</span>,</span><br><span class="line">        <span class="attr">"application_version"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"download_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"version_external_identifier"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"request_date"</span>: <span class="string">"2018-11-13 17:10:31 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"request_date_ms"</span>: <span class="string">"1542129031280"</span>,</span><br><span class="line">        <span class="attr">"request_date_pst"</span>: <span class="string">"2018-11-13 09:10:31 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date"</span>: <span class="string">"2013-08-01 07:00:00 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date_ms"</span>: <span class="string">"1375340400000"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date_pst"</span>: <span class="string">"2013-08-01 00:00:00 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"original_application_version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">        <span class="attr">"in_app"</span>: [&#123;</span><br><span class="line">            <span class="attr">"quantity"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"product_id"</span>: <span class="string">"test2"</span>,</span><br><span class="line">            <span class="attr">"transaction_id"</span>: <span class="string">"1000000472106082"</span>,</span><br><span class="line">            <span class="attr">"original_transaction_id"</span>: <span class="string">"1000000472106082"</span>,</span><br><span class="line">            <span class="attr">"purchase_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">            <span class="attr">"purchase_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">            <span class="attr">"purchase_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">            <span class="attr">"is_trial_period"</span>: <span class="string">"false"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"Sandbox"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Verify your receipt first with the production URL; then verify with the sandbox URL if you receive a 21007 status code. This approach ensures you do not have to switch between URLs while your application is tested, reviewed by App Review, or live in the App Store.</p></blockquote><h2 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h2><p>Let’s use enum to represent possible states for each resource. Here’s simple case where we only have 1 non consumable IAP product.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IAPError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> failedToRefreshReceipt</span><br><span class="line">    <span class="keyword">case</span> failedToRequestProduct</span><br><span class="line">    <span class="keyword">case</span> failedToPurchase</span><br><span class="line">    <span class="keyword">case</span> receiptNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IAPResourceState</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> notAsked</span><br><span class="line">    <span class="keyword">case</span> loading</span><br><span class="line">    <span class="keyword">case</span> success(<span class="type">T</span>)</span><br><span class="line">    <span class="keyword">case</span> failure(<span class="type">IAPError</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PricingPlan</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> pro = (<span class="type">Bundle</span>.main.bundleIdentifier ?? <span class="string">""</span>) + <span class="string">".pro"</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> isPro: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> product: <span class="type">IAPResourceState</span>&lt;<span class="type">SKProduct</span>&gt; = .notAsked</span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> purchase: <span class="type">IAPResourceState</span>&lt;<span class="type">SKPayment</span>&gt; = .notAsked</span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> receipt: <span class="type">IAPResourceState</span>&lt;<span class="type">InAppReceipt</span>&gt; = .notAsked</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s have a central place for managing all IAP operations, called <code>IAPManager</code>, it can update our <code>ObservableObject</code> <code>PricingPlan</code> hence triggers update to SwiftUI.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> StoreKit</span><br><span class="line"><span class="keyword">import</span> TPInAppReceipt</span><br><span class="line"><span class="keyword">import</span> Version</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IAPManager</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> pricingPlan: <span class="type">PricingPlan</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> paymentQueue: <span class="type">SKPaymentQueue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(pricingPlan: <span class="type">PricingPlan</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.pricingPlan = pricingPlan</span><br><span class="line">        <span class="keyword">self</span>.paymentQueue = <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.paymentQueue.add(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestProducts</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> identifiers = <span class="type">PricingPlan</span>.pro</span><br><span class="line">        <span class="keyword">let</span> request = <span class="type">SKProductsRequest</span>(productIdentifiers: <span class="type">Set</span>(arrayLiteral: identifiers))</span><br><span class="line">        request.delegate = <span class="keyword">self</span></span><br><span class="line">        pricingPlan.product = .loading</span><br><span class="line">        request.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">purchase</span><span class="params">(product: SKProduct)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="type">SKPaymentQueue</span>.canMakePayments() <span class="keyword">else</span> &#123;</span><br><span class="line">            showAlert(text: <span class="string">"You are not allowed to make payment. Please check device settings."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pricingPlan.purchase = .loading</span><br><span class="line">        <span class="keyword">let</span> payment = <span class="type">SKPayment</span>(product: product)</span><br><span class="line">        paymentQueue.add(payment)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">refreshReceipt</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="type">SKReceiptRefreshRequest</span>()</span><br><span class="line">        request.delegate = <span class="keyword">self</span></span><br><span class="line">        request.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">restorePurchase</span><span class="params">()</span></span> &#123;</span><br><span class="line">        paymentQueue.restoreCompletedTransactions()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Refresh-receipt"><a href="#Refresh-receipt" class="headerlink" title="Refresh receipt"></a>Refresh receipt</h3><p>You can use <code>restoreCompletedTransactions</code> if you simply <code>finishTransaction</code> and grant user pro feature, like in this simple tutorial <a href="https://www.raywenderlich.com/5456-in-app-purchase-tutorial-getting-started">In-App Purchase Tutorial: Getting Started</a>, search for <code>SKPaymentTransactionObserver</code>. <code>restoreCompletedTransactions</code> also updates receipt.</p><p>Otherwise refreshing receipt is a better idea. It serves both case when receipt is not there locally and when you want to restore transactions. With receipt refreshing, no restored transactions are created and <code>SKPaymentTransactionObserver</code> is not called, so we need to check receipt proactively.</p><p>Either <code>restoreCompletedTransactions</code>  or <code>SKReceiptRefreshRequest</code> asks for AppStore credential so you should present a button there and ask user.</p><h3 id="Check-local-receipt"><a href="#Check-local-receipt" class="headerlink" title="Check local receipt"></a>Check local receipt</h3><p>Try to locate local receipt and examine it.</p><ul><li>If it is not there (missing, corrupted), refresh receipt</li><li>If it’s there, check if it was from a version when the app was still as paid. Notice the difference in meaning of <code>originalAppVersion</code> in macOS and iOS</li><li>If it is not paid, check if this receipt contains In App Purchase information for our product</li></ul><p>In practice, we need to perform some basic checks on receipt, like bundle id, app version, device id. Read <a href="https://www.raywenderlich.com/9257-in-app-purchases-receipt-validation-tutorial">In-App Purchases: Receipt Validation Tutorial</a>, search for <code>Validating the Receipt</code>. <code>TPInAppReceipt</code> also has some handy <code>verify</code> functions</p><p>Besides verifying receipt locally, it is advisable to call <a href="https://developer.apple.com/documentation/appstorereceipts/verifyreceipt">verifyreceipt</a> either on device, or better on serve to let Apple verify receipt and returns you a human readable json for receipt information.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkReceipt</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> receipt = <span class="keyword">try</span> <span class="type">InAppReceipt</span>.localReceipt()</span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.receipt = .success(receipt)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.isPaid(receipt: receipt) &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.isPro = <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> receipt.containsPurchase(ofProductIdentifier: <span class="type">PricingPlan</span>.pro) &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.isPro = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.receipt = .failure(.receiptNotFound)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isPaid</span><span class="params">(receipt: InAppReceipt)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    #<span class="keyword">if</span> os(macOS)</span><br><span class="line">    <span class="comment">// originalAppVersion is CFBundleShortVersionString</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> version = <span class="type">Version</span>(receipt.originalAppVersion) &#123;</span><br><span class="line">        <span class="keyword">return</span> version &lt; versionToIAP</span><br><span class="line">    &#125;</span><br><span class="line">    #<span class="keyword">else</span></span><br><span class="line">    <span class="comment">// originalAppVersion is CFBundleVersion</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> buildNumber = <span class="type">Int</span>(receipt.originalAppVersion) &#123;</span><br><span class="line">        <span class="keyword">return</span> buildNumber &lt; buildNumberToIAP</span><br><span class="line">    &#125;</span><br><span class="line">    #endif</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, observe <code>SKProductsRequestDelegate</code> which also conforms to <code>SKRequestDelegate</code> for both product and receipt refresh request</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">IAPManager</span>: <span class="title">SKProductsRequestDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">productsRequest</span><span class="params">(<span class="number">_</span> request: SKProductsRequest, didReceive response: SKProductsResponse)</span></span> &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> product = response.products.first <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.product = .failure(<span class="type">IAPError</span>.failedToRequestProduct)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.product = .success(product)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(<span class="number">_</span> request: SKRequest, didFailWithError error: Error)</span></span> &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">switch</span> request &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKProductsRequest</span>:</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.product = .failure(<span class="type">IAPError</span>.failedToRequestProduct)</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKReceiptRefreshRequest</span>:</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.receipt = .failure(<span class="type">IAPError</span>.failedToRefreshReceipt)</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestDidFinish</span><span class="params">(<span class="number">_</span> request: SKRequest)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> request &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKReceiptRefreshRequest</span>:</span><br><span class="line">            checkReceipt()</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/703&quot;&gt;#703&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-is-receipt&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to disable NSTextView in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-disable-NSTextView-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-disable-NSTextView-in-SwiftUI/</id>
    <published>2020-11-27T11:24:13.000Z</published>
    <updated>2020-11-27T11:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/702">#702</a></strong></p><p>The trick is to use an overlay</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MessageTextView</span>(text: $input.message)</span><br><span class="line">    .overlay(obscure)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obscure: <span class="type">AnyView</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> store.pricingPlan.isPro &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">EmptyView</span>().erase()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Color</span>.black.opacity(<span class="number">0.01</span>).erase()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/702&quot;&gt;#702&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The trick is to use an
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to handle NSTextField change in macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-NSTextField-change-in-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-NSTextField-change-in-macOS/</id>
    <published>2020-11-27T06:39:43.000Z</published>
    <updated>2020-11-27T06:39:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/438">#438</a></strong></p><h2 id="Storyboard"><a href="#Storyboard" class="headerlink" title="Storyboard"></a>Storyboard</h2><p>In Storyboard, <code>NSTextField</code> has an Action option that specify whether <code>Send on</code>Send on Enter only` should be the default behaviour.</p><p><img src="https://user-images.githubusercontent.com/2284279/66045014-217d8100-e523-11e9-8e78-a7f835490245.png" alt="textfield"></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>In code, <code>NSTextFieldDelegate</code> notifies whenever text field value changes, and <code>target action</code> notifies when Enter key is pressed</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">NSViewController</span>, <span class="title">NSTextFieldDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> textField: <span class="type">NSTextField!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        textField.delegate = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">controlTextDidChange</span><span class="params">(<span class="number">_</span> obj: Notification)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> textField = obj.object <span class="keyword">as</span>! <span class="type">NSTextField</span></span><br><span class="line">        <span class="built_in">print</span>(textField.stringValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-EasyClosure"><a href="#Use-EasyClosure" class="headerlink" title="Use EasyClosure"></a>Use EasyClosure</h2><p>If we use <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a> then this is easy</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> textField: <span class="type">NSTextField</span> = </span><br><span class="line"></span><br><span class="line">textField.on.action &#123; string <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"User has pressed enter \(string)"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">textField.on.change &#123; string <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Text field value has changed"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/438&quot;&gt;#438&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Storyboard&quot;&gt;&lt;a href=&quot;#Storyboard&quot;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to animate NSWindow</title>
    <link href="https://onmyway133.github.io/blog/How-to-animate-NSWindow/"/>
    <id>https://onmyway133.github.io/blog/How-to-animate-NSWindow/</id>
    <published>2020-11-22T17:26:33.000Z</published>
    <updated>2020-11-22T17:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/609">#609</a></strong></p><p>Use <code>animator</code> proxy and <code>animate</code> parameter</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = window.frame</span><br><span class="line">rect.frame.origin.x = <span class="number">1000</span></span><br><span class="line"><span class="type">NSAnimationContext</span>.runAnimationGroup(&#123; context <span class="keyword">in</span></span><br><span class="line">    context.timingFunction = <span class="type">CAMediaTimingFunction</span>(name: .easeIn)</span><br><span class="line">    window.animator().setFrame(rect, display: <span class="literal">true</span>, animate: <span class="literal">true</span>)</span><br><span class="line">&#125;, completionHandler: &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/609&quot;&gt;#609&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;animator&lt;/code&gt; proxy and
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to define SDK and Deployment Target in iOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-define-SDK-and-Deployment-Target-in-iOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-define-SDK-and-Deployment-Target-in-iOS/</id>
    <published>2020-11-22T05:00:42.000Z</published>
    <updated>2020-11-22T05:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/33">#33</a></strong></p><p>I see that my answer to the question <a href="http://stackoverflow.com/questions/18568572/whats-the-meaning-of-base-sdk-ios-deployment-target-target-and-project-in-xc/22536773#22536773">What’s the meaning of Base SDK, iOS deployment target, Target, and Project in xcode</a> gets lots of views, so I think I need to elaborate more about it</p><p>Good read</p><ul><li><a href="https://developer.apple.com/tech-talks/videos/"> iOS 7 TechTalk - Architecting Modern Apps, Part 2</a></li><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html">Configuring a Project for SDK-Based Development</a></li></ul><p><img src="https://user-images.githubusercontent.com/2284279/99896373-58b37200-2c90-11eb-887c-2231965e750f.png" alt="base"></p><h2 id="Base-SDK"><a href="#Base-SDK" class="headerlink" title="Base SDK"></a>Base SDK</h2><ul><li>We can’t configure this anymore, as Xcode will use the latest SDK. For Xcode 7, the SDK is iOS 9</li><li>If we upgrade Xcode, it will use the newer version of the SDK. Like Xcode 7.2, the SDK is iOS 9.1</li><li><blockquote><p>Choosing the latest SDK for your project lets you use the new APIs introduced in the OS update that corresponds to that SDK. When new functionality is added as part of a system update, the system update itself does not typically contain updated header files reflecting the change. The SDKs, however, do contain updated header files.</p></blockquote></li></ul><h2 id="Deployment-Target"><a href="#Deployment-Target" class="headerlink" title="Deployment Target"></a>Deployment Target</h2><ul><li>We can set in Xcode -&gt; Target -&gt; Deployment Info -&gt; Deployment Target</li><li>State that we support this iOS version</li></ul><h2 id="What-does-it-mean"><a href="#What-does-it-mean" class="headerlink" title="What does it mean"></a>What does it mean</h2><blockquote><p>So, a modern App might use iOS 9 as the Target SDK, and iOS 7 as the deployment target. This means that you can run on iOS 7, iOS 8 and iOS 9, and that you have available to you any iOS 9 calls when actually running on iOS 9.</p></blockquote><p>.</p><blockquote><p>Each .sdk directory resembles the directory hierarchy of the operating system release it represents: It has usr, System, and Developer directories at its top level. OS X .sdk directories also contain a Library directory. Each of these directories in turn contains subdirectories with the headers and libraries that are present in the corresponding version of the operating system with Xcode installed.</p></blockquote><p>.</p><blockquote><p>The libraries in an iOS or OS X SDK are stubs for linking only; they do not contain executable code but just the exported symbols. SDK support works only with native build targets.</p></blockquote><p>So the SDK is just like stub and header only. It means that we can use certain APIs, but on OS that does not have the real symbols for those APIs, it crashes</p><h2 id="available"><a href="#available" class="headerlink" title="available"></a>available</h2><p>Swift 2 introduces <code>available</code> construct that guards against failure when trying to use newer APIs.</p><p>Note that <code>available</code> is runtime, not compile time. All the code is inside your executable</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">9</span>, <span class="type">OSX</span> <span class="number">10.10</span>, *) &#123;</span><br><span class="line">    <span class="comment">// Code to execute on iOS 9, OS X 10.10</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deprecated-APIs"><a href="#deprecated-APIs" class="headerlink" title="deprecated APIs"></a>deprecated APIs</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Using/using.html#//apple_ref/doc/uid/20002000-SW6">Finding Instances of Deprecated API Usage</a></li></ul><blockquote><p>Always check to see if you are using deprecated APIs; though still available, deprecated APIs are not guaranteed to be available in the future</p></blockquote><h2 id="Compile-time-vs-Runtime"><a href="#Compile-time-vs-Runtime" class="headerlink" title="Compile time vs Runtime"></a>Compile time vs Runtime</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Using/using.html#//apple_ref/doc/uid/20002000-SW5">Conditionally Compiling for Different SDKs</a></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> (arch(i386) || arch(x86_64)) &amp;&amp; os(iOS)</span><br><span class="line">    <span class="comment">// code inside gets inserted into executable when builds for simulator</span></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">    <span class="comment">// code inside gets inserted into executable when builds for device</span></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> os(<span class="type">OSX</span>)</span><br><span class="line">    <span class="keyword">import</span> Cocoa</span><br><span class="line">#elseif os(iOS)</span><br><span class="line">    <span class="keyword">import</span> UIKit</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All the code gets inserted into executable, but is run depending on the version of the OS</span></span><br><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">9</span>, *) &#123;</span><br><span class="line">    <span class="comment">// use UIStackView</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// show your manual Auto Layout skill</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Weakly-vs-strongly-linked"><a href="#Weakly-vs-strongly-linked" class="headerlink" title="Weakly vs strongly linked"></a>Weakly vs strongly linked</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html#//apple_ref/doc/uid/10000163i-CH1-SW2">Weak Linking and Apple Frameworks</a></li><li><a href="http://stackoverflow.com/questions/16922013/what-does-it-mean-to-weak-link-a-framework">What does it mean to “weak-link” a framework?</a></li><li><a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WeakLinking.html">Frameworks and Weak Linking</a></li></ul><blockquote><p>For example, suppose in Xcode you set the deployment target (minimum required version) to “OS X v10.5” and the base SDK (maximum allowed version) to “OS X v10.6”. During compilation, the compiler would weakly link interfaces that were introduced in OS X v10.6 while strongly linking interfaces defined in earlier versions of the OS. This would allow your application to run in OS X v10.5 and take advantage of newer features when available.</p></blockquote><p>.</p><blockquote><p>None of the (platform) frameworks is really “included in the bundle”. Instead, your app has a reference (“link”) to a framework once you add it to the “Link Binary with Library” build phase. The frameworks are pre-installed on the devices. When you run an app, all the app’s framework references are resolved by the dynamic linker (on the device), which means the framework code is loaded so your app can use it.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://useyourloaf.com/blog/checking-api-availability-with-swift.html">Checking API Availability With Swift</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/33&quot;&gt;#33&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I see that my answer to the question &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to make view take up full width in vertical NSStackView</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-view-take-up-full-width-in-vertical-NSStackView/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-view-take-up-full-width-in-vertical-NSStackView/</id>
    <published>2020-11-20T15:11:11.000Z</published>
    <updated>2020-11-20T15:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/172">#172</a></strong></p><p><a href="https://stackoverflow.com/questions/51644692/nsstackview-subviews-not-resizing-sub-stack-views/55220837#55220837">https://stackoverflow.com/questions/51644692/nsstackview-subviews-not-resizing-sub-stack-views/55220837#55220837</a></p><p>If you want child view inside vertical NSStackView to fill its parent width, then <code>reduce contentCompressionResistancePriority</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">myChildView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">myChildView.setContentCompressionResistancePriority(</span><br><span class="line">  <span class="type">NSLayoutConstraint</span>.<span class="type">Priority</span>(rawValue: <span class="number">1</span>),</span><br><span class="line">  <span class="keyword">for</span>: .horizontal</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">  myChildView.heightAnchor.constraint(equalToConstant: <span class="number">50</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="type">NSAnimationContext</span>.runAnimationGroup(&#123;context <span class="keyword">in</span></span><br><span class="line">  context.duration = <span class="number">0.25</span></span><br><span class="line">  context.allowsImplicitAnimation = <span class="literal">true</span></span><br><span class="line">  stackView.insertArrangedSubview(myChildView, at: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  view.layoutSubtreeIfNeeded()</span><br><span class="line">&#125;, completionHandler: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/172&quot;&gt;#172&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>How to add under highlight to text in css</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-under-highlight-to-text-in-css/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-under-highlight-to-text-in-css/</id>
    <published>2020-11-20T04:23:59.000Z</published>
    <updated>2020-11-20T04:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/701">#701</a></strong></p><p>Use mark. This does not work for multiline</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;mark css=&#123;css`</span><br><span class="line">        <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">        <span class="selector-tag">line-height</span>: 0<span class="selector-tag">em</span>;</span><br><span class="line">        <span class="selector-tag">padding-bottom</span>: 0<span class="selector-class">.5em</span>;</span><br><span class="line">        `&#125;&gt;&#123;feature.title&#125;</span><br><span class="line">    &lt;/mark&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>Another way is to use background</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(180deg,rgba(255,255,255,0) <span class="number">50%</span>, <span class="number">#FFD0AE</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://beatrizcaraballo.com/blog/low-highlight-heading-links-squarespace">https://beatrizcaraballo.com/blog/low-highlight-heading-links-squarespace</a></li><li><a href="https://stackoverflow.com/questions/43683187/how-can-i-create-custom-underline-or-highlight-for-text-in-html-or-css">https://stackoverflow.com/questions/43683187/how-can-i-create-custom-underline-or-highlight-for-text-in-html-or-css</a></li><li><a href="https://medium.com/@codingdudecom/highlight-text-css-97331a5b71b5">https://medium.com/@codingdudecom/highlight-text-css-97331a5b71b5</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/701&quot;&gt;#701&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use mark. This does not work for
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>How to force refresh in ForEach in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-force-refresh-in-ForEach-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-force-refresh-in-ForEach-in-SwiftUI-for-macOS/</id>
    <published>2020-11-20T02:29:39.000Z</published>
    <updated>2020-11-20T02:29:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/625">#625</a></strong></p><p>For some strange reasons, content inside ForEach does not update with changes in Core Data NSManagedObject. The workaround is to introduce salt, like UUID just to make state change</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteRow</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> note: <span class="type">Note</span></span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">UUID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">ForEach</span>(notes) &#123; note <span class="keyword">in</span></span><br><span class="line">        <span class="type">NoteRow</span>(note: note, id: <span class="type">UUID</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/625&quot;&gt;#625&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For some strange reasons, content inside
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use default system fonts in React apps</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-default-system-fonts-in-React-apps/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-default-system-fonts-in-React-apps/</id>
    <published>2020-11-18T05:29:29.000Z</published>
    <updated>2020-11-18T05:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/700">#700</a></strong></p><p>In <code>index.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">'Segoe UI'</span>, <span class="string">'Roboto'</span>, <span class="string">'Oxygen'</span>, <span class="string">'Ubuntu'</span>, <span class="string">'Cantarell'</span>, <span class="string">'Fira Sans'</span>, <span class="string">'Droid Sans'</span>, <span class="string">'Helvetica Neue'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: source-code-pro, Menlo, Monaco, Consolas, <span class="string">'Courier New'</span>, monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/700&quot;&gt;#700&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;index.css&lt;/code&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple overlay container in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-overlay-container-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-overlay-container-in-React/</id>
    <published>2020-11-18T05:22:50.000Z</published>
    <updated>2020-11-18T05:22:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/699">#699</a></strong></p><p>Use term <code>ZStack</code> like in SwiftUI, we declare container as relative position. For now it uses only 2 items from <code>props.children</code> but can be tweaked to support mutiple</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ZStack&gt;</span><br><span class="line">                &lt;Header /&gt;</span><br><span class="line">                &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">                    <span class="selector-tag">padding-top</span>: 50<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">                `</span>&#125;&gt;</span><br><span class="line">                    &lt;Showcase factory=&#123;factory&#125; /&gt;</span><br><span class="line">                    &lt;Footer /&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>ZStack&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @jsx jsx */</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; css, jsx &#125; <span class="keyword">from</span> <span class="string">'@emotion/core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ZStack</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span></span><br><span class="line"><span class="css">        `</span>&#125;&gt;</span><br><span class="line">            &lt;div &gt;</span><br><span class="line">                &#123;props.children[<span class="number">0</span>]&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div css=&#123;css`</span></span><br><span class="line"><span class="regexp">                position: absolute;</span></span><br><span class="line"><span class="regexp">                top: 0;</span></span><br><span class="line"><span class="regexp">                left: 0;</span></span><br><span class="line"><span class="regexp">                width: 100%;</span></span><br><span class="line"><span class="regexp">            `&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &#123;props.children[1]&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/699&quot;&gt;#699&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use term &lt;code&gt;ZStack&lt;/code&gt; like in
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to search using regular expression in Xcode</title>
    <link href="https://onmyway133.github.io/blog/How-to-search-using-regular-expression-in-Xcode/"/>
    <id>https://onmyway133.github.io/blog/How-to-search-using-regular-expression-in-Xcode/</id>
    <published>2020-11-17T12:05:29.000Z</published>
    <updated>2020-11-17T12:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/698">#698</a></strong></p><p>Search <code>NSLayoutConstraint</code> calls that involves <code>bottomAnchor</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(NSLayoutConstraint(.*[\r\n])*).+?(?&#x3D;bottomAnchor)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">    child.leadingAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.leadingAnchor),</span><br><span class="line">    child.trailingAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.trailingAnchor),</span><br><span class="line">    child.topAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.topAnchor),</span><br><span class="line">    child.bottomAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.bottomAnchor)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/698&quot;&gt;#698&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Search &lt;code&gt;NSLayoutConstraint&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="https://onmyway133.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>How to write to temporary file in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-write-to-temporary-file-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-write-to-temporary-file-in-Swift/</id>
    <published>2020-11-15T05:23:39.000Z</published>
    <updated>2020-11-15T05:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/697">#697</a></strong></p><p>Use <code>temporaryDirectory</code> from <code>FileManager</code> and <code>String.write</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeTempFile</span><span class="params">(books: [Book])</span></span> -&gt; <span class="type">URL</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">FileManager</span>.<span class="keyword">default</span>.temporaryDirectory</span><br><span class="line">        .appendingPathComponent(<span class="type">UUID</span>().uuidString)</span><br><span class="line">        .appendingPathExtension(<span class="string">"txt"</span>)</span><br><span class="line">    <span class="keyword">let</span> string = books</span><br><span class="line">        .<span class="built_in">map</span>(&#123;</span><br><span class="line">            <span class="string">"book '\($0.url.path)'"</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .joined(separator: <span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">try</span>? string.write(to: url, atomically: <span class="literal">true</span>, encoding: .utf8)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/697&quot;&gt;#697&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;temporaryDirectory&lt;/code&gt; from
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to use functions with default arguments in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-functions-with-default-arguments-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-functions-with-default-arguments-in-Swift/</id>
    <published>2020-11-14T05:17:15.000Z</published>
    <updated>2020-11-14T05:17:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/696">#696</a></strong></p><p>Which methods do you think are used here</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Robot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> b: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">c</span>: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(a: <span class="type">Int</span> = <span class="number">1</span>, <span class="built_in">c</span>: <span class="type">Int</span> = <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.a = a</span><br><span class="line">        <span class="keyword">self</span>.b = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.<span class="built_in">c</span> = <span class="built_in">c</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Init with a=\(a) and c=\(c)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(a: <span class="type">Int</span> = <span class="number">1</span>, b: <span class="type">Int</span> = <span class="number">2</span>, <span class="built_in">c</span>: <span class="type">Int</span> = <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.a = a</span><br><span class="line">        <span class="keyword">self</span>.b = b</span><br><span class="line">        <span class="keyword">self</span>.<span class="built_in">c</span> = <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Init with a\(a), b=\(b) and c=\(c)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = <span class="type">Robot</span>(<span class="built_in">c</span>: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="type">Robot</span>(a: <span class="number">5</span>, <span class="built_in">c</span>: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> r3 = <span class="type">Robot</span>(a: <span class="number">5</span>, b: <span class="number">7</span>, <span class="built_in">c</span>: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> r4 = <span class="type">Robot</span>(a: <span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> r5 = <span class="type">Robot</span>(b: <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>The log is </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Init</span> with a=<span class="number">1</span> and <span class="built_in">c</span>=<span class="number">10</span></span><br><span class="line"><span class="type">Init</span> with a=<span class="number">5</span> and <span class="built_in">c</span>=<span class="number">10</span></span><br><span class="line"><span class="type">Init</span> with a5, b=<span class="number">7</span> and <span class="built_in">c</span>=<span class="number">10</span></span><br><span class="line"><span class="type">Init</span> with a=<span class="number">5</span> and <span class="built_in">c</span>=<span class="number">3</span></span><br><span class="line"><span class="type">Init</span> with a1, b=<span class="number">5</span> and <span class="built_in">c</span>=<span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/696&quot;&gt;#696&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which methods do you think are used
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
</feed>
