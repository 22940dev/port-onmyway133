<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2021-01-01T22:23:36.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to use flexible frame in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-flexible-frame-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-flexible-frame-in-SwiftUI/</id>
    <published>2021-01-01T21:41:45.000Z</published>
    <updated>2021-01-01T22:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/734">#734</a></strong></p><p>In SwiftUI there are fixed frame and flexible frame modifiers.</p><h2 id="Fixed-frame-Positions-this-view-within-an-invisible-frame-with-the-specified-size"><a href="#Fixed-frame-Positions-this-view-within-an-invisible-frame-with-the-specified-size" class="headerlink" title="Fixed frame Positions this view within an invisible frame with the specified size."></a>Fixed frame <a href="https://developer.apple.com/documentation/swiftui/list/frame(width:height:alignment:)">Positions this view within an invisible frame with the specified size.</a></h2><blockquote><p>Use this method to specify a fixed size for a view’s width, height, or both. If you only specify one of the dimensions, the resulting view assumes this view’s sizing behavior in the other dimension.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Ellipse</span>()</span><br><span class="line">        .fill(<span class="type">Color</span>.purple)</span><br><span class="line">        .frame(width: <span class="number">200</span>, height: <span class="number">100</span>)</span><br><span class="line">    <span class="type">Ellipse</span>()</span><br><span class="line">        .fill(<span class="type">Color</span>.blue)</span><br><span class="line">        .frame(height: <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flexible-frame-frame-minWidth-idealWidth-maxWidth-minHeight-idealHeight-maxHeight-alignment"><a href="#Flexible-frame-frame-minWidth-idealWidth-maxWidth-minHeight-idealHeight-maxHeight-alignment" class="headerlink" title="Flexible frame frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)"></a>Flexible frame <a href="https://developer.apple.com/documentation/swiftui/list/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)">frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)</a></h2><p>Read the documentation carefully</p><blockquote><p>Always specify at least one size characteristic when calling this method. Pass nil or leave out a characteristic to indicate that the frame should adopt this view’s sizing behavior, constrained by the other non-nil arguments.</p></blockquote><blockquote><p>The size proposed to this view is the size proposed to the frame, limited by any constraints specified, and with any ideal dimensions specified replacing any corresponding unspecified dimensions in the proposal.</p></blockquote><blockquote><p>If no minimum or maximum constraint is specified in a given dimension, the frame adopts the sizing behavior of its child in that dimension. If both constraints are specified in a dimension, the frame unconditionally adopts the size proposed for it, clamped to the constraints. Otherwise, the size of the frame in either dimension is:</p></blockquote><blockquote><p>If a minimum constraint is specified and the size proposed for the frame by the parent is less than the size of this view, the proposed size, clamped to that minimum.</p></blockquote><blockquote><p>If a maximum constraint is specified and the size proposed for the frame by the parent is greater than the size of this view, the proposed size, clamped to that maximum.</p></blockquote><blockquote><p>Otherwise, the size of this view.</p></blockquote><h2 id="Experiment-with-different-proposed-frame"><a href="#Experiment-with-different-proposed-frame" class="headerlink" title="Experiment with different proposed frame"></a>Experiment with different proposed frame</h2><p>To understand the explanation above, I prepare a Swift playground to examine with 3 scenarios: when both <code>minWidth</code> and <code>maxWidth</code> are provided, when either <code>minWidth</code> or <code>maxWidth</code> is provided. I use <code>width</code> for horizontal dimension but the same applies in vertical direction with <code>height</code>.</p><p>I have a <code>View</code> called <code>Examine</code> to demonstrate flexible frame. Here we have a flexible frame with red border and red text showing its size where you can specify <code>minWidth</code> and <code>maxWidth</code>. </p><p>Inside it is the content with a fixed frame with blue border and blue text showing content size where you can specify <code>contentWidth</code>. Finally there’s <code>parentWidth</code> where we specify proposed width to our red flexible frame.</p><p>The variations for our scenarios are that proposed width falls outside and inside <code>minWidth</code>, <code>contentWidth</code>, and <code>maxWidth</code> range.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Examine</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> parentWidth: <span class="type">CGFloat</span></span><br><span class="line">    <span class="keyword">let</span> contentWidth: <span class="type">CGFloat</span></span><br><span class="line">    <span class="keyword">var</span> minWidth: <span class="type">CGFloat?</span></span><br><span class="line">    <span class="keyword">var</span> maxWidth: <span class="type">CGFloat?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .fill(<span class="type">Color</span>.gray)</span><br><span class="line">            .border(<span class="type">Color</span>.black, width: <span class="number">3</span>)</span><br><span class="line">            .frame(width: contentWidth)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">GeometryReader</span> &#123; geo <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"\(geo.size.width)"</span>)</span><br><span class="line">                        .foregroundColor(<span class="type">Color</span>.blue)</span><br><span class="line">                        .offset(x: <span class="number">0</span>, y: -<span class="number">20</span>)</span><br><span class="line">                        .center()</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            .border(<span class="type">Color</span>.blue, width: <span class="number">2</span>)</span><br><span class="line">            .frame(minWidth: minWidth, maxWidth: maxWidth)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">GeometryReader</span> &#123; geo <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"\(geo.size.width)"</span>)</span><br><span class="line">                        .foregroundColor(<span class="type">Color</span>.red)</span><br><span class="line">                        .center()</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            .border(<span class="type">Color</span>.red, width: <span class="number">1</span>)</span><br><span class="line">            .frame(width: parentWidth, height: <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">center</span><span class="params">()</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                <span class="keyword">self</span></span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Examine_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Both minWidth and maxWidth"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">75</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"proposed size &lt; min width"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">125</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"min width &lt; proposed size &lt; content"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">175</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"min width &lt; content &lt; proposed size"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">300</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"min width &lt; content &lt; max width &lt; proposed size"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Just minWidth"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">75</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">125</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">175</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">175</span>, contentWidth: <span class="number">75</span>, minWidth: <span class="number">100</span>)</span><br><span class="line">                    .help(<span class="string">"content &lt; minWidth"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Just maxWidth"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">75</span>, contentWidth: <span class="number">150</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">125</span>, contentWidth: <span class="number">150</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">175</span>, contentWidth: <span class="number">150</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">300</span>, contentWidth: <span class="number">225</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"content &gt; maxWidth"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h3><p>Here are the results with different variations of specifying  <code>parentWidth</code> aka proposed width.</p><p>🍑 <strong><em>Scenario 1</em></strong>: both minWidth and maxWidth are specified</p><p>Our red flexible frame clamps proposed width between its <code>minWidth</code> and <code>maxWidth</code>, ignoring <code>contentWidth</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redWidth = clamp(minWidth, parentWidth, maxWidth)</span><br></pre></td></tr></table></figure><img width="682" alt="Screenshot 2021-01-01 at 23 30 19" src="https://user-images.githubusercontent.com/2284279/103447291-57ab3280-4c89-11eb-9779-99c34162cf56.png"><p>🍅 <strong><em>Scenario 2</em></strong>: only minWidth is specified</p><p>Our red flexible frame clamps proposed width between its <code>minWidth</code> and <code>contentWidth</code>. In case <code>content</code> is less than <code>minWidth</code>, then final width is <code>minWidth</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redWidth = clamp(minWidth, parentWidth, contentWidth)</span><br></pre></td></tr></table></figure><img width="668" alt="Screenshot 2021-01-01 at 23 51 46" src="https://user-images.githubusercontent.com/2284279/103447491-50395880-4c8c-11eb-9395-d0b4b8e3faa1.png"><p>🍏 <strong><em>Scenario 3</em></strong>: only maxWidth is specified</p><p>Our red flexible frame clamps proposed width between its <code>contentWidth</code> and <code>maxWidth</code>. In case <code>content</code> is more than <code>maxWidth</code>, then  final width is <code>maxWidth</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redWidth = clamp(contentWidth, parentWidth, maxWidth)</span><br></pre></td></tr></table></figure><img width="675" alt="Screenshot 2021-01-01 at 23 52 27" src="https://user-images.githubusercontent.com/2284279/103447500-69420980-4c8c-11eb-86c8-db15d95c0829.png"><h2 id="What-are-idealWidth-and-idealHeight"><a href="#What-are-idealWidth-and-idealHeight" class="headerlink" title="What are idealWidth and idealHeight"></a>What are idealWidth and idealHeight</h2><p>In SwiftUI, view takes proposed frame from its parent, then proposes its to its child, and reports the size it wants from it’s child and its proposed frame from parent. The reported frame is the final frame used by that view.</p><p>When we use <code>.frame</code> modifier, SwiftUI does not changes the frame of that view directly. Instead it creates a container around that view.</p><p>There are 4 kinds of frame behavior depending on which View we are using. Some have mixed behavior.</p><ul><li>Sum up frames from its children then report the final frame. For example <code>HStack</code>, <code>VStack</code></li><li>Merely use the proposed frame. For example <code>GeometryReader</code>, <code>.overlay</code>, <code>Rectangle</code></li><li>Use more space than proposed. For example texts with <code>fixedSize</code></li><li>Use only space needed for its content and respect proposed frame as max</li></ul><h3 id="Fix-the-size-to-its-ideal-size"><a href="#Fix-the-size-to-its-ideal-size" class="headerlink" title="Fix the size to its ideal size"></a>Fix the size to its ideal size</h3><p>Some View like <code>Text</code> or <code>Image</code> has intrinsic content size, means it has implicit <code>idealWidth</code> and <code>idealHeight</code>. Some like <code>Rectangle</code> we need to explicit set <code>.frame(idealWidth: idealHeight)</code>. And these ideal width and height are only applied if we specify <code>fixedSize</code></p><p>To understand this, let’s read <a href="https://developer.apple.com/documentation/swiftui/view/fixedsize()">fixedSize</a></p><blockquote><p>Fixes this view at its ideal size.<br>During the layout of the view hierarchy, each view proposes a size to each child view it contains. If the child view doesn’t need a fixed size it can accept and conform to the size offered by the parent.<br>For example, a Text view placed in an explicitly sized frame wraps and truncates its string to remain within its parent’s bounds:</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">"A single line of text, too long to fit in a box."</span>)</span><br><span class="line">    .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">    .border(<span class="type">Color</span>.gray)</span><br></pre></td></tr></table></figure><img width="382" alt="Screenshot 2021-01-02 at 00 15 14" src="https://user-images.githubusercontent.com/2284279/103447744-97751880-4c8f-11eb-93a0-9a8ff96024f1.png"><blockquote><p>The fixedSize() modifier can be used to create a view that maintains the ideal size of its children both dimensions:</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">"A single line of text, too long to fit in a box."</span>)</span><br><span class="line">    .fixedSize()</span><br><span class="line">    .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">    .border(<span class="type">Color</span>.gray)</span><br></pre></td></tr></table></figure><img width="523" alt="Screenshot 2021-01-02 at 00 16 11" src="https://user-images.githubusercontent.com/2284279/103447755-ba9fc800-4c8f-11eb-93d8-1bbe1dfd4f3c.png"><blockquote><p>You can think of fixedSize() as the creation of a counter proposal to the view size proposed to a view by its parent. The ideal size of a view, and the specific effects of fixedSize() depends on the particular view and how you have configured it.</p></blockquote><p>To view this in playground, I have prepared this snippet</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Text_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">16</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"A single line of text, too long to fit in a box."</span>)</span><br><span class="line">                .fixedSize()</span><br><span class="line">                .border(<span class="type">Color</span>.red)</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">                .border(<span class="type">Color</span>.gray)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(width: <span class="number">500</span>, height: <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we can see that our canvas is 500x500, and the <code>Text</code> grows outside its parent frame 200x200</p><img width="666" alt="Screenshot 2021-01-02 at 00 17 29" src="https://user-images.githubusercontent.com/2284279/103447779-e8850c80-4c8f-11eb-9126-65d4da3e28ed.png"><h3 id="Play-with-Rectangle"><a href="#Play-with-Rectangle" class="headerlink" title="Play with Rectangle"></a>Play with Rectangle</h3><p>Remember that shapes like <code>Rectangle</code> takes up all the proposed size. When we explicitly specify <code>fixedSize</code>, the<code>idealWidth</code> and <code>idealHeight</code> are used.</p><p>Here I have 3 rectangle</p><p>🍎 Red: There are no ideal size explicitly specified, so SwiftUI uses a magic number <code>10</code> as the size<br>🍏 Green: We specify frame directly and no idealWidth, idealHeight and no fixedSize, so this rectangle takes up full frame<br>🧊 Blue: The outer gray box has height 50, but this rectangle uses <code>idealWidth</code> and <code>idealHeight</code> of 200 because we specify <code>fixedSize</code> </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">16</span>) &#123;</span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.red)</span><br><span class="line">                .fixedSize()</span><br><span class="line"></span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.green)</span><br><span class="line">                .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.blue)</span><br><span class="line">                .frame(idealWidth: <span class="number">200</span>, idealHeight: <span class="number">200</span>)</span><br><span class="line">                .fixedSize(horizontal: <span class="literal">true</span>, vertical: <span class="literal">true</span>)</span><br><span class="line">                .frame(height: <span class="number">50</span>)</span><br><span class="line">                .border(<span class="type">Color</span>.gray)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(width: <span class="number">500</span>, height: <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img width="613" alt="Screenshot 2021-01-02 at 00 23 29" src="https://user-images.githubusercontent.com/2284279/103447838-be801a00-4c90-11eb-85d6-eff53ecd987e.png"><hr><p><strong>Updated at</strong> 2021-01-01 23:23:36</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/734&quot;&gt;#734&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In SwiftUI there are fixed frame and
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to disable scrolling in NSTextView for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-disable-scrolling-in-NSTextView-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-disable-scrolling-in-NSTextView-for-macOS/</id>
    <published>2020-12-31T06:45:13.000Z</published>
    <updated>2020-12-31T06:45:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/733">#733</a></strong></p><p><code>NSTextView</code> has this handy method to make scrollable NSTextView <code>NSTextView.scrollableTextView()</code>. The solution is to get to the responder outside enclosing <code>NSScrollView</code>, in my case it is the SwiftUI hosting view</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisabledScrollTextView</span>: <span class="title">NSTextView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">scrollWheel</span><span class="params">(with event: NSEvent)</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1st nextResponder is NSClipView</span></span><br><span class="line">        <span class="comment">// 2nd nextResponder is NSScrollView</span></span><br><span class="line">        <span class="comment">// 3rd nextResponder is NSResponder SwiftUIPlatformViewHost</span></span><br><span class="line">        <span class="keyword">self</span>.nextResponder?.nextResponder?.nextResponder?.scrollWheel(with: event)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Then-we-can-construct-with-our-new-DisabledScrollTextView-scrollableTextView"><a href="#Then-we-can-construct-with-our-new-DisabledScrollTextView-scrollableTextView" class="headerlink" title="Then we can construct with our new DisabledScrollTextView.scrollableTextView"></a>Then we can construct with our new <code>DisabledScrollTextView.scrollableTextView</code></h2><p><strong>Updated at</strong> 2020-12-31 07:45:19</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/733&quot;&gt;#733&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSTextView&lt;/code&gt; has this handy
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to override attribute string in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-override-attribute-string-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-override-attribute-string-in-Swift/</id>
    <published>2020-12-31T05:16:15.000Z</published>
    <updated>2020-12-31T05:16:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/732">#732</a></strong></p><p>Use <code>NSMutableAttributedString</code> and add attribute for whole range</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="type">NSAttributedString</span></span><br><span class="line"><span class="keyword">let</span> m: <span class="type">NSMutableAttributedString</span> = <span class="type">NSMutableAttributedString</span>(attributedString: a)</span><br><span class="line"><span class="keyword">let</span> range = <span class="type">NSRange</span>(location: <span class="number">0</span>, length: a.length)</span><br><span class="line">m.addAttribute(.backgroundColor, value: <span class="type">NSColor</span>.clear, range: range)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/732&quot;&gt;#732&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to make view appear with delay in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-view-appear-with-delay-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-view-appear-with-delay-in-SwiftUI/</id>
    <published>2020-12-31T04:32:35.000Z</published>
    <updated>2020-12-31T04:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/731">#731</a></strong></p><p>Sometimes we don’t want to show progress view right away</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HUDProgressView</span>()</span><br><span class="line">    .transition(</span><br><span class="line">        <span class="type">AnyTransition</span>.asymmetric(</span><br><span class="line">            insertion: <span class="type">AnyTransition</span>.opacity.animation(<span class="type">Animation</span>.<span class="keyword">default</span>.delay(<span class="number">1</span>)),</span><br><span class="line">            removal: <span class="type">AnyTransition</span>.opacity)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2020-12-31 05:33:00</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/731&quot;&gt;#731&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes we don’t want to show progress
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to make attributed string Text in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-attributed-string-Text-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-attributed-string-Text-in-SwiftUI-for-macOS/</id>
    <published>2020-12-31T04:11:06.000Z</published>
    <updated>2020-12-31T04:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/730">#730</a></strong></p><p>Use <code>NSTextField</code> with <code>maximumNumberOfLines</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AttributedText</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> attributedString: <span class="type">NSAttributedString</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> attributedString: <span class="type">NSAttributedString</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.attributedString = attributedString</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">NSTextField</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> textField = <span class="type">NSTextField</span>()</span><br><span class="line"></span><br><span class="line">        textField.lineBreakMode = .byClipping</span><br><span class="line">        textField.maximumNumberOfLines = <span class="number">0</span></span><br><span class="line">        textField.isBordered = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> textField</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(<span class="number">_</span> nsView: NSTextField, context: Context)</span></span> &#123;</span><br><span class="line">        nsView.attributedStringValue = attributedString</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TextField has problem with wrapping, we can use TextView</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AttributedTextView</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">NSViewType</span> = <span class="type">NSScrollView</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> attributedText: <span class="type">NSAttributedString?</span></span><br><span class="line">    <span class="keyword">let</span> isSelectable: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> insetSize: <span class="type">CGSize</span> = .zero</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">NSViewType</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> scrollView = <span class="type">NSTextView</span>.scrollableTextView()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> textView = scrollView.documentView <span class="keyword">as</span>! <span class="type">NSTextView</span></span><br><span class="line">        textView.drawsBackground = <span class="literal">false</span></span><br><span class="line">        textView.textColor = .controlTextColor</span><br><span class="line">        textView.textContainerInset = insetSize</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scrollView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(<span class="number">_</span> nsView: NSViewType, context: Context)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> textView = (nsView.documentView <span class="keyword">as</span>! <span class="type">NSTextView</span>)</span><br><span class="line">        textView.isSelectable = isSelectable</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> attributedText = attributedText,</span><br><span class="line">            attributedText != textView.attributedString() &#123;</span><br><span class="line">            textView.textStorage?.setAttributedString(attributedText)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> lineLimit = context.environment.lineLimit &#123;</span><br><span class="line">            textView.textContainer?.maximumNumberOfLines = lineLimit</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2020-12-31 05:51:42</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/730&quot;&gt;#730&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;NSTextField&lt;/code&gt; with
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to do copy paste delete in Swift for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-do-copy-paste-delete-in-Swift-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-do-copy-paste-delete-in-Swift-for-macOS/</id>
    <published>2020-12-30T04:30:52.000Z</published>
    <updated>2020-12-30T04:48:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/729">#729</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NSApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">NSApplicationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"copy"</span>, sender)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">paste</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"paste"</span>, sender)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For delete, we can listen to keyDown in <code>NSWindow</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">keyDown</span><span class="params">(with event: NSEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.keyDown(with: event)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> deleteScalar = <span class="type">UnicodeScalar</span>(<span class="type">NSDeleteCharacter</span>),</span><br><span class="line">            event.charactersIgnoringModifiers == <span class="type">String</span>(deleteScalar)</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(<span class="type">Notification</span>(name: .didKeyboardDeleteItem))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2020-12-30 05:48:29</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/729&quot;&gt;#729&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple NSItemProvider in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-NSItemProvider-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-NSItemProvider-in-Swift/</id>
    <published>2020-12-30T04:11:52.000Z</published>
    <updated>2020-12-30T04:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/728">#728</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSItemProvider</span>(object: <span class="type">StringProvider</span>(string: string))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringProvider</span>: <span class="title">NSObject</span>, <span class="title">NSItemProviderWriting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> string: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(string: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.string = string</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> writableTypeIdentifiersForItemProvider: [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [(kUTTypeData) <span class="keyword">as</span> <span class="type">String</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        withTypeIdentifier typeIdentifier: String,</span></span></span><br><span class="line"><span class="function"><span class="params">        forItemProviderCompletionHandler completionHandler: @escaping <span class="params">(Data?, Error?)</span></span></span> -&gt; <span class="type">Void</span></span><br><span class="line">    ) -&gt; <span class="type">Progress?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = string.data(using: .utf8)</span><br><span class="line">        completionHandler(data, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Progress</span>(totalUnitCount: <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/728&quot;&gt;#728&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to use hashtag raw string in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-hashtag-raw-string-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-hashtag-raw-string-in-Swift/</id>
    <published>2020-12-27T21:11:35.000Z</published>
    <updated>2020-12-27T21:11:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/727">#727</a></strong></p><p>Use <code>#</code> in Swift 5 to specify raw string, for example regular expression</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="string">"^#?(?:[0-9a-fA-F]&#123;3&#125;)&#123;1,2&#125;$"</span>#</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://www.hackingwithswift.com/articles/162/how-to-use-raw-strings-in-swift">https://www.hackingwithswift.com/articles/162/how-to-use-raw-strings-in-swift</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/727&quot;&gt;#727&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;#&lt;/code&gt; in Swift 5 to specify
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to make UserDefaults property wrapper</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-UserDefaults-property-wrapper/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-UserDefaults-property-wrapper/</id>
    <published>2020-12-26T20:42:53.000Z</published>
    <updated>2020-12-26T20:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/726">#726</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@propertyWrapper</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserDefault</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> defaultValue: <span class="type">Value</span></span><br><span class="line">    <span class="keyword">let</span> container: <span class="type">UserDefaults</span> = .standard</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">Value</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> container.object(forKey: key) <span class="keyword">as</span>? <span class="type">Value</span> ?? defaultValue</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            container.<span class="keyword">set</span>(newValue, forKey: key)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can use it as property and provide default value</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeepHistoryService</span> </span>&#123;</span><br><span class="line">    @<span class="type">UserDefault</span>(key: <span class="string">"keepHistoryCheckDate"</span>, defaultValue: <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">var</span> checkDate: <span class="type">Date?</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/726&quot;&gt;#726&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to use Set to check for bool in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-Set-to-check-for-bool-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-Set-to-check-for-bool-in-Swift/</id>
    <published>2020-12-26T20:09:15.000Z</published>
    <updated>2020-12-26T20:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/725">#725</a></strong></p><p>When you want to check for existence using <code>Bool</code>, consider using <code>Set</code> over Dictionary with <code>Bool</code>, as <code>Set</code> guarantee uniqueness. If using <code>Dictionary</code> instead, the value for key is <code>Optional&lt;Bool&gt;</code> where we have to check for both optional and true false within.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>: <span class="title">Hashable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">UUID</span></span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> book1 = <span class="type">Book</span>(id: <span class="type">UUID</span>(), name: <span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">let</span> book2 = <span class="type">Book</span>(id: <span class="type">UUID</span>(), name: <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useDictionary</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> hasChecked: [<span class="type">Book</span>: <span class="type">Bool</span>] = [:]</span><br><span class="line">    hasChecked[book1] = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">print</span>(hasChecked[book1] == <span class="type">Optional</span>&lt;<span class="type">Bool</span>&gt;(<span class="literal">true</span>))</span><br><span class="line">    <span class="built_in">print</span>(hasChecked[book2] == <span class="type">Optional</span>&lt;<span class="type">Bool</span>&gt;.<span class="keyword">none</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useSet</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> hasChecked: <span class="type">Set</span>&lt;<span class="type">Book</span>&gt; = <span class="type">Set</span>()</span><br><span class="line">    hasChecked.insert(book1)</span><br><span class="line">    <span class="built_in">print</span>(hasChecked.<span class="built_in">contains</span>(book1))</span><br><span class="line">    <span class="built_in">print</span>(hasChecked.<span class="built_in">contains</span>(book2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/725&quot;&gt;#725&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you want to check for existence
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to make visual effect blur in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-visual-effect-blur-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-visual-effect-blur-in-SwiftUI-for-macOS/</id>
    <published>2020-12-26T20:02:18.000Z</published>
    <updated>2020-12-26T20:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/724">#724</a></strong></p><p>We can use <code>.blur</code> modifier, but with <code>VisualEffectView</code> gives us more options for material and blending mode.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">VisualEffectView</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> material: <span class="type">NSVisualEffectView</span>.<span class="type">Material</span></span><br><span class="line">    <span class="keyword">let</span> blendingMode: <span class="type">NSVisualEffectView</span>.<span class="type">BlendingMode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(</span><br><span class="line">        material: <span class="type">NSVisualEffectView</span>.<span class="type">Material</span> = .contentBackground,</span><br><span class="line">        blendingMode: <span class="type">NSVisualEffectView</span>.<span class="type">BlendingMode</span> = .withinWindow</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">self</span>.material = material</span><br><span class="line">        <span class="keyword">self</span>.blendingMode = blendingMode</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">NSVisualEffectView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> visualEffectView = <span class="type">NSVisualEffectView</span>()</span><br><span class="line">        visualEffectView.material = material</span><br><span class="line">        visualEffectView.blendingMode = blendingMode</span><br><span class="line">        visualEffectView.state = <span class="type">NSVisualEffectView</span>.<span class="type">State</span>.active</span><br><span class="line">        <span class="keyword">return</span> visualEffectView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(<span class="number">_</span> visualEffectView: NSVisualEffectView, context: Context)</span></span> &#123;</span><br><span class="line">        visualEffectView.material = material</span><br><span class="line">        visualEffectView.blendingMode = blendingMode</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/724&quot;&gt;#724&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;.blur&lt;/code&gt; modifier,
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple HUD in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-HUD-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-HUD-in-SwiftUI/</id>
    <published>2020-12-26T19:51:44.000Z</published>
    <updated>2020-12-26T19:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/723">#723</a></strong></p><p>Use <code>@ViewBuilder</code> to build dynamic content for our HUD. For blur effect, here I use <code>NSVisualEffectView</code>, but we can use <code>.blur</code> modifier also</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HUD</span>&lt;<span class="title">Content</span>&gt;: <span class="title">View</span> <span class="title">where</span> <span class="title">Content</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: () -&gt; <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(@<span class="type">ViewBuilder</span> content: @escaping () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content = content</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        content()</span><br><span class="line">        .frame(width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line">        .background(</span><br><span class="line">            <span class="type">VisualEffectView</span>(material: .hudWindow)</span><br><span class="line">                .clipShape(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">12</span>))</span><br><span class="line">                .shadow(color: <span class="type">Color</span>.black.opacity(<span class="number">0.22</span>), radius: <span class="number">12</span>, x: <span class="number">0</span>, y: <span class="number">5</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can make some wrappers for information and progress HUD</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HUD</span>&lt;<span class="title">Content</span>&gt;: <span class="title">View</span> <span class="title">where</span> <span class="title">Content</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: () -&gt; <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(@<span class="type">ViewBuilder</span> content: @escaping () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content = content</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        content()</span><br><span class="line">        .frame(width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line">        .background(</span><br><span class="line">            <span class="type">VisualEffectView</span>()</span><br><span class="line">        )</span><br><span class="line">        .cornerRadius(<span class="number">10</span>)</span><br><span class="line">        .shadow(color: <span class="type">Color</span>.gray.opacity(<span class="number">0.3</span>), radius: <span class="number">1</span>, x: <span class="number">0</span>, y: <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2020-12-26 20:59:10</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/723&quot;&gt;#723&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;@ViewBuilder&lt;/code&gt; to build
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to instrument SwiftUI app</title>
    <link href="https://onmyway133.github.io/blog/How-to-instrument-SwiftUI-app/"/>
    <id>https://onmyway133.github.io/blog/How-to-instrument-SwiftUI-app/</id>
    <published>2020-12-25T22:06:34.000Z</published>
    <updated>2020-12-30T05:37:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/722">#722</a></strong></p><p>With Xcode 12, we can fire up Instrument to profile our app. Select <code>SwiftUI template</code></p><img width="836" alt="Screenshot 2020-12-26 at 00 02 03" src="https://user-images.githubusercontent.com/2284279/103142980-a0a13b00-470d-11eb-81bc-632a08b8084b.png"><p>There are many profiles in that template, I find SwiftUI and Time Profile very useful. Here’s the profile I run for my app <a href="https://onmyway133.com/pastepal">PastePal</a></p><h2 id="SwiftUI-View-Body"><a href="#SwiftUI-View-Body" class="headerlink" title="SwiftUI View Body"></a>SwiftUI View Body</h2><p>This shows how many instance of View with body invocation are there, both for SwiftUI views and our app views</p><p>Taking a look at SwiftUI profile, it shows that <code>ClipboardCell</code> is taking most of the time, here over 7 seconds</p><img width="1396" alt="Screenshot 2020-12-25 at 23 59 12" src="https://user-images.githubusercontent.com/2284279/103142965-7bacc800-470d-11eb-8b0e-5d598f6e082b.png"><h2 id="Time-Profiler"><a href="#Time-Profiler" class="headerlink" title="Time Profiler"></a>Time Profiler</h2><p>This shows how much time was spent in each functions and call stack.</p><p>Then we drill down to Time Profiler, it shows that <code>NSSharingService.submenu</code> accounts for 75% of performance issue</p><img width="1396" alt="Screenshot 2020-12-25 at 23 59 57" src="https://user-images.githubusercontent.com/2284279/103142966-7f404f00-470d-11eb-85b7-3e813ff5476c.png"><p>With these instruments, I found out that the <a href="https://onmyway133.com/blog/how-to-make-sharing-menu-in-swiftui-for-macos/">NSSharingService context menu I added</a> has poor performance. </p><p>This below method is used every time <code>Menu</code> is asked, which causes a significant overload on main thread, resulting in noticeable laggy scrolling</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSSharingService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">submenu</span><span class="params">(text: String)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Menu</span>(</span><br><span class="line">            content: &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="type">NSSharingService</span>.sharingServices(forItems: [<span class="string">""</span>])), id: \.title) &#123; item <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Button</span>(action: &#123; item.perform(withItems: [string]) &#125;) &#123;</span><br><span class="line">                        <span class="type">Image</span>(nsImage: item.image)</span><br><span class="line">                        <span class="type">Text</span>(item.title)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Share"</span>)</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.squareAndArrowUp.rawValue)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The reason is that <code>NSSharingService.sharingServices</code> requires quite some time to get sharing services. A quick fix is to cache the items using <code>static</code> variable. In Swift, static variable is like <code>lazy</code> attribute, it is computed only once on first asked</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> items = <span class="type">NSSharingService</span>.sharingServices(forItems: [<span class="string">""</span>])</span><br></pre></td></tr></table></figure><p>There are more to optimize in my case, for example calculation of image and dominant colors. But we should only optimize when seeing real performance issue and after proper instruments</p><h2 id="Fix-and-instrument-again"><a href="#Fix-and-instrument-again" class="headerlink" title="Fix and instrument again"></a>Fix and instrument again</h2><p>After the fix, the time reduces from over 7 seconds to just less than 200ms</p><img width="1396" alt="Screenshot 2020-12-26 at 00 09 51" src="https://user-images.githubusercontent.com/2284279/103143031-db57a300-470e-11eb-8953-c15f163fe364.png"><img width="1396" alt="Screenshot 2020-12-26 at 00 09 01" src="https://user-images.githubusercontent.com/2284279/103143033-deeb2a00-470e-11eb-980e-27c82136b1a8.png"><hr><p><strong>Updated at</strong> 2020-12-30 06:37:53</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/722&quot;&gt;#722&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With Xcode 12, we can fire up Instrument
        
      
    
    </summary>
    
    
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to force set frame explicitly for NSWindow</title>
    <link href="https://onmyway133.github.io/blog/How-to-force-set-frame-explicitly-for-NSWindow/"/>
    <id>https://onmyway133.github.io/blog/How-to-force-set-frame-explicitly-for-NSWindow/</id>
    <published>2020-12-25T21:29:23.000Z</published>
    <updated>2020-12-25T21:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/721">#721</a></strong></p><p>For <code>setFrame</code> to take effect</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainWindow.setFrame(rect, display: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>we can remove auto save frame flag</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainWindow.setFrameAutosaveName(<span class="string">"MyApp.MainWindow"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/721&quot;&gt;#721&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;setFrame&lt;/code&gt; to take
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to rotate NSStatusItem</title>
    <link href="https://onmyway133.github.io/blog/How-to-rotate-NSStatusItem/"/>
    <id>https://onmyway133.github.io/blog/How-to-rotate-NSStatusItem/</id>
    <published>2020-12-23T08:01:34.000Z</published>
    <updated>2020-12-26T20:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/720">#720</a></strong></p><p><code>NSStatusItem</code> is backed by <code>NSButton</code>, we can animate this inner button. We need to specify <code>position</code> and <code>anchorPoint</code> for button’s layer so it rotates around its center point</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span></span><br><span class="line">    <span class="keyword">let</span> button = statusItem.button</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animation = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"transform.rotation.z"</span>)</span><br><span class="line">animation.fromValue = <span class="number">0</span></span><br><span class="line">animation.toValue = <span class="type">CGFloat</span>.pi * <span class="number">2</span></span><br><span class="line">animation.duration = <span class="number">0.25</span></span><br><span class="line">animation.repeatCount = <span class="number">1</span></span><br><span class="line">button.layer?.position = <span class="type">NSPoint</span>(x: <span class="type">NSMidX</span>(button.frame), y: <span class="type">NSMidY</span>(button.frame))</span><br><span class="line">button.layer?.anchorPoint = <span class="type">NSPoint</span>(x: <span class="number">0.5</span>, y: <span class="number">0.5</span>)</span><br><span class="line">button.layer?.add(animation, forKey: <span class="string">"rotate"</span>)</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2020-12-26 21:21:00</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/720&quot;&gt;#720&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSStatusItem&lt;/code&gt; is backed by
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to show image and text in menu item in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-image-and-text-in-menu-item-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-image-and-text-in-menu-item-in-SwiftUI-for-macOS/</id>
    <published>2020-12-23T05:17:48.000Z</published>
    <updated>2020-12-23T05:35:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/719">#719</a></strong></p><p>From SwiftUI 2 for macOS 11.0, we have access to <code>Menu</code> for creating menu and submenu. Usually we use <code>Button</code> for interactive menu items and <code>Text</code> for disabled menu items.</p><p>The easy way to customize menu with image is to call <code>Menu</code> with <code>content</code> and <code>label</code>. Pay attention to how we use <code>Button</code> and <code>Label</code> inside <code>Content</code> to create interactive menu items</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Menu</span>(</span><br><span class="line">    content: &#123;</span><br><span class="line">        <span class="type">ForEach</span>(collections) &#123; collection <span class="keyword">in</span></span><br><span class="line">            <span class="type">Button</span>(action: &#123;) &#123;</span><br><span class="line">                <span class="type">Label</span>(collection.name, systemImage: <span class="type">SFSymbol</span>.star.rawValue)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    label: &#123;</span><br><span class="line">        <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.bookmarkFill.rawValue)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Add to collection"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>We can also use <code>Image</code> and <code>Text</code> separately. By default SwiftUI wraps these inside <code>HStack</code> automatically for us. For now, color has no effect in <code>Menu</code>, but it works on <code>Text</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.bookmarkFill.rawValue)</span><br><span class="line">     .foregroundColor(<span class="type">Color</span>.red)</span><br><span class="line"><span class="type">Text</span>(collection.name)</span><br><span class="line">    .foregroundColor(<span class="type">Color</span>.green)</span><br></pre></td></tr></table></figure><p>One way to mitigate this is to use Text with icon font. Here I use my <a href="https://github.com/onmyway133/FontAwesomeSwiftUI">FontAwesomeSwiftUI</a></p><p>There’s a problem that only the first <code>Text</code> is shown</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(collection.icon)</span><br><span class="line">    .font(.awesome(style: .solid, size: <span class="number">18</span>))</span><br><span class="line">    .foregroundColor(<span class="type">Color</span>.red)</span><br><span class="line"><span class="type">Text</span>(collection.name)</span><br></pre></td></tr></table></figure><p>The solution is to concatenate <code>Text</code>. In SwiftUI, <code>Text</code> has <code>+</code> operator that allows us to make cool attributed texts</p><img width="409" alt="Screenshot 2020-12-23 at 07 34 40" src="https://user-images.githubusercontent.com/2284279/102967039-652a2500-44f1-11eb-826c-ce69f10468b7.png"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(collection.icon)</span><br><span class="line">    .font(.awesome(style: .solid, size: <span class="number">18</span>))</span><br><span class="line">    .foregroundColor(<span class="type">Color</span>.red)</span><br><span class="line">+ <span class="type">Text</span>(collection.name)</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2020-12-23 06:35:31</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/719&quot;&gt;#719&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From SwiftUI 2 for macOS 11.0, we have
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to make sharing menu in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-sharing-menu-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-sharing-menu-in-SwiftUI-for-macOS/</id>
    <published>2020-12-23T04:19:17.000Z</published>
    <updated>2020-12-25T21:57:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/718">#718</a></strong></p><p>Use <code>NSSharingService.sharingServices(forItems:)</code> with an array of one empty string gives a list of sharing items. There we show <code>image</code> and <code>title</code> of each menu item.</p><p>We should cache sharing items as that can cause performance issue</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"><span class="keyword">import</span> EasySwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSSharingService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> items = <span class="type">NSSharingService</span>.sharingServices(forItems: [<span class="string">""</span>])</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">submenu</span><span class="params">(text: String)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Menu</span>(</span><br><span class="line">            content: &#123;</span><br><span class="line">                <span class="type">ForEach</span>(items, id: \.title) &#123; item <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Button</span>(action: &#123; item.perform(withItems: [string]) &#125;) &#123;</span><br><span class="line">                        <span class="type">Image</span>(nsImage: item.image)</span><br><span class="line">                        <span class="type">Text</span>(item.title)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Share"</span>)</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.squareAndArrowUp.rawValue)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Alternative, you can trigger <code>NSSharingServicePicker</code> from a button, it shows a context menu with sharing options</p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://stackoverflow.com/questions/60952334/swiftui-using-nssharingservicepicker-in-macos">https://stackoverflow.com/questions/60952334/swiftui-using-nssharingservicepicker-in-macos</a></li></ul><hr><p><strong>Updated at</strong> 2020-12-25 22:57:57</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/718&quot;&gt;#718&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to make stepper with plus and minus buttons in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-stepper-with-plus-and-minus-buttons-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-stepper-with-plus-and-minus-buttons-in-SwiftUI-for-macOS/</id>
    <published>2020-12-21T04:24:26.000Z</published>
    <updated>2020-12-21T04:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/717">#717</a></strong></p><p>Try to use predefined system colors in <a href="https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/color/">Human Interface Guidelines</a> for macOS</p><p>Here we use this color <code>unemphasizedSelectedTextBackgroundColor</code> for button background</p><img width="88" alt="Screenshot 2020-12-21 at 06 24 16" src="https://user-images.githubusercontent.com/2284279/102742430-29f2ef00-4355-11eb-9bdd-b5fe373677c5.png"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HStack</span>(spacing: <span class="number">1</span>) &#123;</span><br><span class="line">    makeUnderListButton(action: &#123;&#125;, icon: .plus)</span><br><span class="line">    makeUnderListButton(action: &#123;&#125;, icon: .minus)</span><br><span class="line">&#125;</span><br><span class="line">.background(<span class="type">Color</span>(<span class="type">NSColor</span>.unemphasizedSelectedTextBackgroundColor))</span><br><span class="line">.cornerRadius(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeUnderListButton</span><span class="params">(action: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>, icon: <span class="type">AwesomeIcon</span>) -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(action: action) &#123;</span><br><span class="line">        <span class="type">Text</span>(icon.rawValue)</span><br><span class="line">            .font(.awesome(style: .solid, size: <span class="number">14</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    .buttonStyle(<span class="type">HighlightButtonStyle</span>(h: <span class="number">8</span>, v: <span class="number">6</span>, cornerRadius: <span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another thing is List, where we have selected and alternative background colors. We should also use dynamic system colors <code>selectedContentBackgroundColor</code> and <code>alternatingContentBackgroundColors</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">ForEach</span>(apps.enumerated().<span class="built_in">map</span>(&#123; $<span class="number">0</span> &#125;), id: \.element) &#123; index, app <span class="keyword">in</span></span><br><span class="line">        makeRow(app: app)</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                <span class="keyword">self</span>.selected = app</span><br><span class="line">            &#125;</span><br><span class="line">            .background(</span><br><span class="line">                <span class="keyword">self</span>.selected == app</span><br><span class="line">                    ? <span class="type">Color</span>(<span class="type">NSColor</span>.selectedContentBackgroundColor)</span><br><span class="line">                    : <span class="type">Color</span>(<span class="type">NSColor</span>.alternatingContentBackgroundColors[index % <span class="number">2</span>])</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://blog.verslu.is/xamarin/ios-macos-dark-mode-dynamic-colors-overview/">iOS and macOS Dark Mode Dynamic Colors Overview</a></li></ul><hr><p><strong>Updated at</strong> 2020-12-21 05:56:28</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/717&quot;&gt;#717&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Try to use predefined system colors in &lt;a
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to fix Picker not showing selection in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-fix-Picker-not-showing-selection-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-fix-Picker-not-showing-selection-in-SwiftUI/</id>
    <published>2020-12-20T05:18:26.000Z</published>
    <updated>2020-12-23T05:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/716">#716</a></strong></p><p>I have an enum that conforms to <code>CaseIterable</code> that I want to show in <code>Picker</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Position</span>: <span class="title">String</span>, <span class="title">Codable</span>, <span class="title">CaseIterable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> &#123; rawValue &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span></span><br><span class="line">    <span class="keyword">case</span> bottom</span><br><span class="line">    <span class="keyword">case</span> top</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Picker</span>(selection: $preference.position, label: <span class="type">Text</span>(<span class="string">"Position"</span>)) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="type">Preference</span>.<span class="type">Position</span>.allCases) &#123; position <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(position.rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It compiles and runs just fine, but Picker does not show current selection regardless of any Picker style I choose. It does not update <code>Binding</code> at all.</p><p>The fix is to specify <code>id</code>, it looks redundant because of enum conforms to <code>Identifiable</code>, but it fixes the problem</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Picker</span>(selection: $preference.position, label: <span class="type">Text</span>(<span class="string">"Position"</span>)) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="type">Preference</span>.<span class="type">Position</span>.allCases, id: \.<span class="keyword">self</span>) &#123; position <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(position.rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mismatch-between-rawValue-and-enum-case-itself"><a href="#Mismatch-between-rawValue-and-enum-case-itself" class="headerlink" title="Mismatch between rawValue and enum case itself"></a>Mismatch between rawValue and enum case itself</h3><p>Reading <a href="https://developer.apple.com/documentation/swiftui/foreach/init(_:content:)-6oy5i">ForEach</a> once again </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>(<span class="number">_</span> data: <span class="type">Data</span>, content: @escaping (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">Content</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Available when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to View, and Data.Element conforms to Identifiable.</p></blockquote><p>So in our case, we use <code>rawValue</code> as <code>id</code> for <code>Identifiable</code>, so there’s mismatch between our <code>selection</code> being <code>enum case</code> and items in <code>ForEach</code>, which uses <code>rawValue</code> to uniquely identifies items. So our fix is to explicitly state that we want to use the enum case itself <code>\.self</code> as <code>id</code>for ForEach</p><p>What we can also do is to declare enum case itself as <code>id</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Position</span>: <span class="title">String</span>, <span class="title">Codable</span>, <span class="title">CaseIterable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Position</span> &#123; <span class="keyword">self</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span></span><br><span class="line">    <span class="keyword">case</span> bottom</span><br><span class="line">    <span class="keyword">case</span> top</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-lesson-learned-here-is-we-need-to-ensure-the-underlying-type-of-selection-in-List-and-id-used-in-ForEach-are-the-same"><a href="#The-lesson-learned-here-is-we-need-to-ensure-the-underlying-type-of-selection-in-List-and-id-used-in-ForEach-are-the-same" class="headerlink" title="The lesson learned here is we need to ensure the underlying type of selection in List and id used  in ForEach are the same"></a>The lesson learned here is we need to ensure the underlying type of <code>selection</code> in <code>List</code> and <code>id</code> used  in <code>ForEach</code> are the same</h2><p><strong>Updated at</strong> 2020-12-23 06:05:08</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/716&quot;&gt;#716&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have an enum that conforms to
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>My year in review 2020</title>
    <link href="https://onmyway133.github.io/blog/My-year-in-review-2020/"/>
    <id>https://onmyway133.github.io/blog/My-year-in-review-2020/</id>
    <published>2020-12-16T19:24:56.000Z</published>
    <updated>2020-12-18T15:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/715">#715</a></strong></p><p>I remember this time last year in December 2019, I spent almost every single bit of my free time on <a href="https://github.com/pumaswift/Puma">Puma</a> because I want a Swift friendly version of fastlane that suits my need and leverages Swift 5 features. </p><p>Here’s my review of my work in year 2020.</p><h2 id="Blogging"><a href="#Blogging" class="headerlink" title="Blogging"></a>Blogging</h2><p>I started blogging on GitHub issue, starting from <a href="https://github.com/onmyway133/blog/issues/1">Issue 1 Hello world, again</a>, now I have over 670 issues, which were generated into blog posts at my website <a href="https://onmyway133.com/">https://onmyway133.com/</a></p><p>🍏 I used to use onmyway133.github.io domain, but then it feels right to have my own domain<br>🍎 I used to write a lot at Medium <a href="https://medium.com/@onmyway133">https://medium.com/@onmyway133</a> for many publications and my own Fantageek publication, I have got 2.3k followers with around 60k views per month<br>🍓 I list my most favorite articles, usually articles that I spent most time polishing here <a href="https://onmyway133.com/writing/">https://onmyway133.com/writing/</a></p><p>One of my very first articles published on Flawless iOS publication was <a href="https://medium.com/flawless-app-stories/a-better-way-to-update-uicollectionview-data-in-swift-with-diff-framework-924db158db86">A better way to update UICollectionView data in Swift with diff framework</a> gets the highest traffic ever, and was rated most trending Swift article for 2018.</p><p>My one of few articles published in Medium in 2019 was <a href="https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f">How to make Auto Layout more convenient in iOS</a> got featured in iOS Dev Weekly, and used to promote my library <a href="https://github.com/onmyway133/EasyAnchor">EasyAnchor</a></p><p>My big article this year is <a href="https://onmyway133.com/blog/how-to-test-push-notifications-in-simulator-and-production-ios-apps/">How to test push notifications in simulator and production iOS apps</a>, which was also featured on iOS Dev Weekly, used to summary the changes in push notifications from iOS 7 to iOS 14, and to promote my push notification testing tool <a href="https://twitter.com/pushheroapp">Push Hero</a></p><p>My blog at <a href="https://onmyway133.com/">https://onmyway133.com/</a> has around 15k views each month. I can write proper, lengthy articles to get more views but I don’t want to. I want to write blog about solutions I have found, so that my future self can benefit from it without searching too much.</p><p><img src="https://user-images.githubusercontent.com/2284279/102402948-cfb8fd80-3fe5-11eb-9f7a-b7a85d0ad450.jpeg" alt="views"></p><h2 id="Open-source"><a href="#Open-source" class="headerlink" title="Open source"></a>Open source</h2><p>I have done quite a lot of open source, you can view here <a href="https://onmyway133.com/opensource/">Open source</a>. These have helped tons of apps, with 45k+ apps touched, and 3.4m+ downloads as stats on CocoaPods</p><p>My 4 libraries this year get inspired by SwiftUI and property wrappers</p><p>🍌 <a href="https://github.com/onmyway133/Spek">Spek</a> leverages property wrapper to provide Spec syntax, similar to Quick, but simpler and can generate tests<br>🍈 <a href="https://github.com/onmyway133/Micro">Micro</a> imitates SwiftUI State and ForEach syntax but use UICollectionView with diffable datasource, powered by my another library <a href="https://github.com/onmyway133/DeepDiff">DeepDiff</a><br>🍑 <a href="https://github.com/onmyway133/EasySwiftUI">EasySwiftUI</a> contains many extensions and useful modifier that I use in my SwiftUI apps<br>🥝 <a href="https://github.com/onmyway133/FontAwesomeSwiftUI">FontAwesomeSwiftUI</a> I was tired of using bitmap with dark and light variants, and I can’t use SFSymbols as I want to support macOS 10.15, so FontAwesome is a perfect choice. I couldn’t find library that has support for SwiftUI and easy to use with Swift Package Manager for iOS and macOS, so I made one</p><p>Besides, for all my libraries <a href="https://github.com/onmyway133/EasyStash">EasyStash</a>, <a href="https://github.com/onmyway133/EasyAnchor">EasyAnchor</a>, <a href="https://github.com/onmyway133/EasyTheme">EasyTheme</a>, <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a>, … I have now support Swift Package Manager, which is nicer to integrate. Thank you CocoaPods for all these years.</p><p>There are now 1.6k people following me on GitHub, that means a lot, meaning somehow my work is useful</p><p>Lately, I open source <a href="https://github.com/onmyway133/awesome-swiftui">awesome-swiftui</a> which I curate all SwiftUI resources, articles and libraries that I find useful for my apps</p><p>❤️ One day, I got sponsor from my dear friend <a href="https://twitter.com/zenangst">Chris</a> for my GitHub open source. Chris is my open source idol who ignited my desire for open source. No one loves open source more than Chris</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">This means the world to me! If everyone was as lucky as me to just get to inspire one person, the world would be an amazing place. Let&#39;s make it amazing together! Keep rocking because you are amazing &amp; you can bring out the best in others! ❤️ <a href="https://t.co/pJx9obWH7I">https://t.co/pJx9obWH7I</a></p>&mdash; Christoffer Winterkvist (@zenangst) <a href="https://twitter.com/zenangst/status/1309403013237403649?ref_src=twsrc%5Etfw">September 25, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="Apps"><a href="#Apps" class="headerlink" title="Apps"></a>Apps</h2><p>I started making some apps late last year, first I published them on Gumroad, but it didn’t feel right, and then I published all my apps on AppStore. I like sandboxed apps from AppStore because they limit what the apps can do.</p><p>Apps without Twitter account and landing page seem off, so in May I started revamping my websites, and I wrote my <a href="https://onmyway133.com/apps/">apps</a> page firstly with pure HTML and CSS, then I rewrote in React, because I like React and Javascript.</p><p>Notably, early 2020 I made <a href="https://twitter.com/pushheroapp">Push Hero</a>, <a href="https://twitter.com/PastePalApp">PastePal</a> then I made a complete overhaul lately with more features, thanks to all the feedback. I also took the time to revamp landing pages a lot, you can check landing pages for <a href="https://onmyway133.com/pushhero">Push Hero</a> for example because I have a white label solution</p><p>Learn how I did <a href="https://onmyway133.github.io/blog/How-to-make-white-label-React-app-for-landing-pages/">white label landing page using React</a></p><p>I have a lot of ideas, but very little time.</p><h2 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h2><p>Coding can be done, but design is never finished. When making apps, I feel like I’m not certain at some design decisions and no matter how I landed with some designs, I didn’t feel happy. Then I took some design courses and books.</p><p>Below is my tweet that I share some design resources that I found useful</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Developer with design skill is like tiger with wings. Here are my recommended courses<br><br>The UI Design Bootcamp by <a href="https://twitter.com/designcoursecom?ref_src=twsrc%5Etfw">@designcoursecom</a> a massive UI design course teaches you to build beautiful and well-functioning user interfaces using HTML and CSS.<a href="https://t.co/vfusXamuhJ">https://t.co/vfusXamuhJ</a></p>&mdash; Khoa 🔥 (@onmyway133) <a href="https://twitter.com/onmyway133/status/1320464953548091393?ref_src=twsrc%5Etfw">October 25, 2020</a></blockquote> <h2 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h2><p>I used to listen to tech podcasts, then I was bored. Discussions like whether to use MVVM vs MVC, SwiftUI vs Catalyst, Swift vs Objective don’t interest me anymore.</p><p>If you ask me for choices, my default answer will be NO. Those who are super passionate about their idea will just ignore my advice and do it anyway.</p><p>Then I listen to indie and product development podcasts, it was inspiring. Once I got the mindset, they also became boring.<br>Now I listen to mostly books on Storytel, some books about habit and making time really make my days.</p><h2 id="Tweet"><a href="#Tweet" class="headerlink" title="Tweet"></a>Tweet</h2><p>I came back to Twitter early this year after quitting it for a while because I got enough of all negative and nonsense political debates. But then I found that I can decide who I can follow and what content I want to view. Then I started organizing List, making my own Chrome extensions to automate things and control what I want to view. I have followed quite many indie developers and great product people, I’ve learnt a lot. The downside is I’m overwhelmingly inspired, I can’t sleep.</p><p>I try to tweet more about what I’ve learned, sharing articles that I have written. For example here I share about how to gain product idea</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">How to gain product ideas?<br><br>1) Scratch your own itch. If you don&#39;t have any itch to scratch, stop here. This is awkward. Go travelling. Go exploring the world. The world always has problems and needs solution. <a href="https://t.co/07gIoJfJet">pic.twitter.com/07gIoJfJet</a></p>&mdash; Khoa 🔥 (@onmyway133) <a href="https://twitter.com/onmyway133/status/1330399823921557507?ref_src=twsrc%5Etfw">November 22, 2020</a></blockquote><h2 id="WWDC-Together"><a href="#WWDC-Together" class="headerlink" title="WWDC Together"></a>WWDC Together</h2><p>Notable this year is the website I make <a href="https://wwdctogether.com/">WWDC Together</a> as a place for developers like us to hangout and watch videos together. Each video acts like its own chat room, you can also create private chatroom. My colleagues use this and we watched WWDC together with coke and pizza, it was a lot of fun.</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I&#39;m excited to launch <a href="https://twitter.com/wwdctogether?ref_src=twsrc%5Etfw">@wwdctogether</a> as a free place to watch and hangout during WWDC. We can now view upcoming and previous sessions via modern playback, with a chatroom for each session. Hope this provides a similar WWDC vibe during this hard time ❤️🔥<a href="https://t.co/0SgGnUAqst">https://t.co/0SgGnUAqst</a> <a href="https://t.co/f9H9wDi62P">pic.twitter.com/f9H9wDi62P</a></p>&mdash; Khoa 🔥 (@onmyway133) <a href="https://twitter.com/onmyway133/status/1273243022826835970?ref_src=twsrc%5Etfw">June 17, 2020</a></blockquote> <p>I had the idea like 2 weeks before WWDC, so I had to make it quick. Working with React is fun to me, it is like playing video game.</p><p>I was lucky to be asked by John to write a guest post <a href="https://wwdcbysundell.com/2020/wwdc-together/">Behind the scenes of WWDC Together with Khoa Pham</a> on his website.</p><p>It was also mentioned by Paul in his WWDC wrap up <a href="https://www.hackingwithswift.com/articles/222/wwdc20-wrap-up-and-recommended-talks">WWDC20: Wrap up and recommended talks</a></p><blockquote><p>One area that absolutely flourished this year was community organization. Sites like <a href="https://wwdcwatch.party">https://wwdcwatch.party</a> and <a href="https://wwdctogether.com">https://wwdctogether.com</a> took a huge amount of work to organize, but meant that people had the chance to have some interaction – had the chance to actually chat about WWDC and share their excitement. I’m really grateful to Michie, Khoa, and other community organizers for making this happen.</p></blockquote><p>I also got to share about in in a well known Norwegian tech website <a href="https://www.kode24.no/kodenytt/norske-wwdc-together-lar-oss-se-pa-apples-konferanse-sammen/72584043">orske WWDC Together lar oss se på Apples konferanse sammen</a></p><h2 id="Speaking"><a href="#Speaking" class="headerlink" title="Speaking"></a>Speaking</h2><p>In 2019, I made several meetup talks, and one pre conf talk for Mobile Era conf</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">An overview of what we as mobile developers have for <a href="https://twitter.com/hashtag/MachineLearning?src=hash&amp;ref_src=twsrc%5Etfw">#MachineLearning</a> in the session by <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw">@onmyway133</a> at <a href="https://twitter.com/mobileeraconf?ref_src=twsrc%5Etfw">@mobileeraconf</a> Community Evening <a href="https://t.co/bgcE3huGkI">pic.twitter.com/bgcE3huGkI</a></p>&mdash; Mobile Meetup Oslo (@mobileoslo) <a href="https://twitter.com/mobileoslo/status/1192154165751033856?ref_src=twsrc%5Etfw">November 6, 2019</a></blockquote> <p>In 2020, I’m lucky to be invited to talk in some events</p><p>🍅 WWDC Watch Party</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thank you <a href="https://twitter.com/JohnEstropia?ref_src=twsrc%5Etfw">@johnestropia</a> <a href="https://twitter.com/thesunshinejr?ref_src=twsrc%5Etfw">@thesunshinejr</a> <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw">@onmyway133</a> for sharing your experience to the community about Open Source Life and thank you for making our dev life better because of your projects! You are all awesome! ❤️<a href="https://twitter.com/hashtag/WWDCWatchParty?src=hash&amp;ref_src=twsrc%5Etfw">#WWDCWatchParty</a> <a href="https://twitter.com/hashtag/WWDC20?src=hash&amp;ref_src=twsrc%5Etfw">#WWDC20</a> <a href="https://t.co/tfsX7PtKcO">pic.twitter.com/tfsX7PtKcO</a></p>&mdash; wwdcwatchparty (@wwdcwatchparty) <a href="https://twitter.com/wwdcwatchparty/status/1277214349246042112?ref_src=twsrc%5Etfw">June 28, 2020</a></blockquote> <p>I’m happy to be invited by Michie to talk along side with <a href="https://twitter.com/JohnEstropia">John</a> and <a href="https://twitter.com/thesunshinejr">Łukasz</a>, whom I really admire for their awesome open source contribution, to talk about how to start and contribute to open source</p><p>🥦 Bitrise webminar</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">During the 4th installment of our BUG <a href="https://twitter.com/hashtag/webinar?src=hash&amp;ref_src=twsrc%5Etfw">#webinar</a> series, our main focus was <a href="https://twitter.com/hashtag/iOSDev?src=hash&amp;ref_src=twsrc%5Etfw">#iOSDev</a> and <a href="https://twitter.com/hashtag/WWDC20?src=hash&amp;ref_src=twsrc%5Etfw">#WWDC20</a>. Let&#39;s recap what we discussed with our guests, <a href="https://twitter.com/StuFFmc?ref_src=twsrc%5Etfw">@StuffMC</a>, <a href="https://twitter.com/axbotkin?ref_src=twsrc%5Etfw">@axbotkin</a>, <a href="https://twitter.com/Moatazeldebsy?ref_src=twsrc%5Etfw">@Moatazeldebsy</a>, and <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw">@onmyway133</a> in our freshest blog post! ✨🔥<a href="https://t.co/rrA8cyYXus">https://t.co/rrA8cyYXus</a></p>&mdash; Bitrise (@bitrise) <a href="https://twitter.com/bitrise/status/1283431144726368258?ref_src=twsrc%5Etfw">July 15, 2020</a></blockquote> <p>I shared my thoughts about my favorites at WWDC and the future ahead</p><p>🍇 Contributing.today</p><p>During Hacktoberfest 2020, I was contacted by my friend <a href="https://twitter.com/webmaxru">Maxim</a> to share about open source </p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I had a pleasure to interview <a href="https://twitter.com/hashtag/OSS?src=hash&amp;ref_src=twsrc%5Etfw">#OSS</a> contributors from Norway <a href="https://twitter.com/DrMowinckels?ref_src=twsrc%5Etfw">@DrMowinckels</a> and <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw">@onmyway133</a> for CONTRIBUTING project. October 2nd we kickoff <a href="https://twitter.com/hashtag/Hacktoberfest?src=hash&amp;ref_src=twsrc%5Etfw">#Hacktoberfest</a> by online meetup about getting started with Open Source at 16:00 CEST. Join our sessions &amp; workshops: <a href="https://t.co/hKkMKEOJJe">https://t.co/hKkMKEOJJe</a> <a href="https://t.co/1yr2AhQ4B6">https://t.co/1yr2AhQ4B6</a></p>&mdash; Maxim Salnikov (@webmaxru) <a href="https://twitter.com/webmaxru/status/1311674525604622337?ref_src=twsrc%5Etfw">October 1, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h2><p>I’m happy to continue another awesome year at Shortcut and DNB, where I have awesome and super nice colleagues. I ‘ve made lots of friends who I can talk with, who invited me to play badminton, tennis, football, swimming, hiking. Why didn’t we meet earlier?</p><p>I was lucky to attend a workshop hosted by John Sundell at work, I learned a lot</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Ran my first ever large-scale remote workshop today, with over 25 participants, 10 different ongoing video calls for pair programming, and a ton of live coding 😀 Was so much fun!<br><br>Thanks a lot to the wonderful team at <a href="https://twitter.com/shortcut_no?ref_src=twsrc%5Etfw">@shortcut_no</a> for inviting me 😊 <a href="https://t.co/CE4P8Slo1G">https://t.co/CE4P8Slo1G</a></p>&mdash; John Sundell (@johnsundell) <a href="https://twitter.com/johnsundell/status/1298992825422327808?ref_src=twsrc%5Etfw">August 27, 2020</a></blockquote><h2 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h2><p>Thanks for a memorable year, despite all the lockdown. And remember, balance work and life. You don’t need to be super rich to be happy. Having lots of money in the bank while living alone is not fun at all.</p><p>Another year is coming to an end. When looking back, do you miss the time you didn’t spend with your friends and family, or do you miss the time you didn’t get to do your work?</p><h2 id="May-your-code-continue-to-compile-🙏"><a href="#May-your-code-continue-to-compile-🙏" class="headerlink" title="May your code continue to compile 🙏"></a>May your code continue to compile 🙏</h2><p><strong>Updated at</strong> 2020-12-18 16:57:00</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/715&quot;&gt;#715&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I remember this time last year in
        
      
    
    </summary>
    
    
    
      <category term="life" scheme="https://onmyway133.github.io/tags/life/"/>
    
  </entry>
  
</feed>
