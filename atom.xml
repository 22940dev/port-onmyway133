<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2021-01-18T07:45:04.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to create and notarize dmg file</title>
    <link href="https://onmyway133.github.io/blog/How-to-create-and-notarize-dmg-file/"/>
    <id>https://onmyway133.github.io/blog/How-to-create-and-notarize-dmg-file/</id>
    <published>2021-01-18T07:45:04.000Z</published>
    <updated>2021-01-18T07:45:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/753">#753</a></strong></p><ul><li>Archive and export app from Xcode</li><li>Create dmg </li><li>Use <a href="https://github.com/sindresorhus/create-dmg">create-dmg</a><br>It is said that we don’t need to notarize the app, we can just notarize the whole dmg</li><li>Send dmg to notarize</li></ul><p>This takes a while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun altool -t osx -f PastePal.dmg -primary-bundle-id com.onmyway133.PastePal --notarize-app -u onmyway133@gmail.com -p APP_SPECIFIC_PASSWORD</span><br></pre></td></tr></table></figure><p>If wrong password, you will get error</p><blockquote><p>Error: code -1011 (Failed to authenticate for session: (<br>    “Error Domain=ITunesConnectionAuthenticationErrorDomain Code=-22938 &quot;Sign in with the app-specific password you generated. If you forgot the app-specific password or need to create a new one, go to appleid.apple.com&quot; UserInfo={NSLocalizedRecoverySuggestion=Sign in with the app-specific password you generated. If you forgot the app-specific password or need to create a new one, go to appleid.apple.com, NSLocalizedDescription=Sign in with the app-specific password you generated. If you forgot the app-specific password or need to create a new one, go to appleid.apple.com, NSLocalizedFailureReason=App Store operation failed.}”<br>) Unable to upload your app for notarization.)</p></blockquote><p>It succeeds, you will get ticket ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Downloaded ticket has been stored at file:&#x2F;&#x2F;&#x2F;var&#x2F;folders&#x2F;mn&#x2F;whdh16qj6jldpcdpgyjhp35m0000gn&#x2F;T&#x2F;51e3b8bb-1b86-4cd6-abcd-bca469561234.ticket.</span><br></pre></td></tr></table></figure><ul><li>Check notarization info</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun altool –-notarization-info TICKET_ID -u &quot;onmyway133@gmail.com&quot;</span><br></pre></td></tr></table></figure><ul><li>Staple the dmg</li></ul><p>Once we have the dmg notarized, we need to staple it</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun stapler staple -v PastePal.dmg</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow">Customizing the Notarization Workflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/753&quot;&gt;#753&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Archive and export app from
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use module import in nodejs</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-module-import-in-nodejs/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-module-import-in-nodejs/</id>
    <published>2021-01-17T20:49:33.000Z</published>
    <updated>2021-01-17T20:49:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/752">#752</a></strong></p><p>Use <a href="https://www.npmjs.com/package/esm">esm</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install esm</span><br></pre></td></tr></table></figure><p>In our code, import as normal</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// intended to be run after babel, and in ./dist folder</span></span><br><span class="line"><span class="keyword">import</span> factory <span class="keyword">from</span> <span class="string">'data'</span></span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br></pre></td></tr></table></figure><p>Then use <code>esm</code> to convert</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"generator"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"npx babel index.js --out-file dist/index.js &amp;&amp; node -r esm dist/index.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://stackoverflow.com/questions/45854169/how-can-i-use-an-es6-import-in-node-js">https://stackoverflow.com/questions/45854169/how-can-i-use-an-es6-import-in-node-js</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/752&quot;&gt;#752&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="node" scheme="https://onmyway133.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>How to use relative file module with Create React app</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-relative-file-module-with-Create-React-app/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-relative-file-module-with-Create-React-app/</id>
    <published>2021-01-17T20:47:35.000Z</published>
    <updated>2021-01-17T20:47:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/751">#751</a></strong></p><p>Declare <code>data/package.json</code> to make it into node module</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"data"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"homepage"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"main.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then in <code>landing/package.json</code>, use <code>file</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"landing"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"."</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@emotion/core"</span>: <span class="string">"^10.0.28"</span>,</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="string">"react-image"</span>: <span class="string">"^2.4.0"</span>,</span><br><span class="line">    <span class="string">"react-scripts"</span>: <span class="string">"3.4.1"</span>,</span><br><span class="line">    <span class="string">"data"</span>: <span class="string">"file:../data"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/751&quot;&gt;#751&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Declare &lt;code&gt;data/package.json&lt;/code&gt; to
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
      <category term="node" scheme="https://onmyway133.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>How to open downloaded app from browser in Big Sur</title>
    <link href="https://onmyway133.github.io/blog/How-to-open-downloaded-app-from-browser-in-Big-Sur/"/>
    <id>https://onmyway133.github.io/blog/How-to-open-downloaded-app-from-browser-in-Big-Sur/</id>
    <published>2021-01-15T08:31:16.000Z</published>
    <updated>2021-01-15T08:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/750">#750</a></strong></p><p>Recently when distributing staging releases of my app <a href="https://onmyway133.com/pastepal/">PastePal</a> via GitHub release or Google Drive, people had hard time opening it</p><img width="454" alt="Screenshot 2021-01-15 at 10 26 26" src="https://user-images.githubusercontent.com/2284279/104707010-210af880-571c-11eb-8174-91efe296b886.png"><p>The displayed error is </p><blockquote><p>You do not have permission to open the application</p></blockquote><p>The more verbose error when using <code>open</code> command in Terminal is</p><blockquote><p>The application cannot be opened for an unexpected reason, error=Error Domain=NSOSStatusErrorDomain Code=-10826 “kLSNoLaunchPermissionErr: User doesn’t have permission to launch the app (managed networks)” UserInfo={_LSFunction=_LSLaunchWithRunningboard, _LSLine=2508, NSUnderlyingError=0x7fa9c750d850 {Error Domain=RBSRequestErrorDomain Code=5 “Launch failed.” UserInfo={NSLocalizedFailureReason=Launch failed., NSUnderlyingError=0x7fa9c750e010 {Error Domain=NSPOSIXErrorDomain Code=153 “Unknown error: 153” UserInfo={NSLocalizedDescription=Launchd job spawn failed with error: 153}}}}}</p></blockquote><p>From further investigation. This is restriction of Big Sur for downloaded zip file from browser</p><ul><li>When decompressing the .zip, the application contents didn’t retain the execute bits. Add it back with <code>sudo chmod -R 755 /path/to/app</code></li><li>Since the application was downloaded by a web browser the quarantine bits are set on the decompressed files. Remove that with <code>sudo xattr -dr com.apple.quarantine /path/to/app</code></li></ul><p>It still didn’t work despite the fact that I enabled apps from identified developers and that I also notarized my app.</p><img width="780" alt="Screenshot 2021-01-15 at 10 29 49" src="https://user-images.githubusercontent.com/2284279/104707376-9aa2e680-571c-11eb-8165-3b03ad9d0351.png"><p>The reason was I zip my <code>PastePal.app</code> before uploading to Google Drive. Now I just upload the bare <code>PastePal.app</code>, upon downloading Google Drive still zip the app but when I apply the <code>chmod</code> and <code>xattr</code> it works now 🎉 </p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://apple.stackexchange.com/questions/408752/the-message-you-do-not-have-permission-to-open-the-application-is-shown-when-t">https://apple.stackexchange.com/questions/408752/the-message-you-do-not-have-permission-to-open-the-application-is-shown-when-t</a></li></ul><hr><p><strong>Updated at</strong> 2021-01-15 09:31:23</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/750&quot;&gt;#750&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently when distributing staging
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to add alternative app icons for iOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-alternative-app-icons-for-iOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-alternative-app-icons-for-iOS/</id>
    <published>2021-01-14T05:01:47.000Z</published>
    <updated>2021-01-14T05:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/749">#749</a></strong></p><p>Some apps want to support alternative app icons in Settings where user can choose to update app icon.<br>Here’s some must do to make it work, as of Xcode 12.2</p><ul><li>In Info.plist, must declare <code>CFBundleIcons</code> with both <code>CFBundlePrimaryIcon</code> and <code>CFBundleAlternateIcons</code></li><li>Icons must be in project folder, not Asset Catalog</li></ul><p>Here’s how it is done on my app <a href="https://onmyway133.com/pastepal/">PastePal</a></p><img width="560" alt="Screenshot 2021-01-14 at 06 46 40" src="https://user-images.githubusercontent.com/2284279/104550028-4290b500-5634-11eb-97dd-69e4a5aca532.png"><h3 id="Add-app-icons-to-project-folder"><a href="#Add-app-icons-to-project-folder" class="headerlink" title="Add app icons to project folder"></a>Add app icons to project folder</h3><p>Prepare icons, like Icon1, Icon2 with 2 variants for 2x and 3x. These need to be added to project folder. When I add these to Asset Catalog it does not update app icon. I usually add a new folder in project like <code>Resource/AlternateAppIcons</code></p><p>The default 1x size for iPhone icon size from iOS 7 to iOS 14 is 60px.</p><ul><li><a href="mailto:Icon1@2x.png">Icon1@2x.png</a> : 120x120</li><li><a href="mailto:Icon1@3x.png">Icon1@3x.png</a>: 180x180</li></ul><h3 id="Declare-in-Info-plist"><a href="#Declare-in-Info-plist" class="headerlink" title="Declare in Info.plist"></a>Declare in Info.plist</h3><p>Although declaring <code>CFBundlePrimaryIcon</code> seems unnecessary, I find that without this it does not work. I use <code>AppIcon60x60</code> as the compiled one from Asset Catalog for our main <code>AppIcon</code></p><p>For <code>UIPrerenderedIcon</code>, a boolean value indicating whether the app’s icon already contains a shine effect. We set to false to allow iOS to apply round and glossy effect to our icon.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIcons<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundlePrimaryIcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>AppIcon60x60<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIPrerenderedIcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleAlternateIcons<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>AppIconPride1<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>AppIconPride1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIPrerenderedIcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>AppIconPride2<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>AppIconPride2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIPrerenderedIcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Asset-Catalog"><a href="#Asset-Catalog" class="headerlink" title="Asset Catalog"></a>Asset Catalog</h3><p>Since we’re using Asset Catalog, if we simply use UIImage with named, it will load by default in Asset Catalog, unless we manually specify bundle path. For simple demo, we can just copy our images again to Asset Catalog so we can show in the app</p><p>I usually have an enum of <code>AlternateAppIcon</code> so I can display in a grid and let user choose</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AlternateAppIcon</span>: <span class="title">String</span>, <span class="title">CaseIterable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">AlternateAppIcon</span> &#123; <span class="keyword">self</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> main = <span class="string">"Main"</span></span><br><span class="line">    <span class="keyword">case</span> pride1 = <span class="string">"Pride1"</span></span><br><span class="line">    <span class="keyword">case</span> pride2 = <span class="string">"Pride2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">onChange</span><span class="params">(<span class="number">_</span> icon: AlternateAppIcon)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="type">UIApplication</span>.shared.supportsAlternateIcons <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">switch</span> icon &#123;</span><br><span class="line">    <span class="keyword">case</span> .main:</span><br><span class="line">        <span class="type">UIApplication</span>.shared.setAlternateIconName(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="type">UIApplication</span>.shared.setAlternateIconName(icon.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Change-app-icon-for-iPad"><a href="#Change-app-icon-for-iPad" class="headerlink" title="Change app icon for iPad"></a>Change app icon for iPad</h3><p>So far we’re only talk about iPhone. To support iPad, we need to specify iPad versions in Info.plist with <code>CFBundleIcons~ipad</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- CFBundleIcons</span><br><span class="line">  - CFBundleAlternateIcons</span><br><span class="line">    - Icon Name</span><br><span class="line">      - CFBundleIconFiles</span><br><span class="line">- CFBundleIcons~ipad</span><br><span class="line">  - CFBundleAlternateIcons</span><br><span class="line">    - Icon Name</span><br><span class="line">     - CFBundleIconFiles</span><br></pre></td></tr></table></figure><p>Also notice the size for icons on iPad</p><img width="678" alt="Screenshot 2021-01-14 at 07 01 23" src="https://user-images.githubusercontent.com/2284279/104551018-5210fd80-5636-11eb-855d-10efc871e19d.png"><hr><p><strong>Updated at</strong> 2021-01-14 06:02:28</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/749&quot;&gt;#749&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some apps want to support alternative app
        
      
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to make popup button in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-popup-button-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-popup-button-in-SwiftUI-for-macOS/</id>
    <published>2021-01-13T04:56:03.000Z</published>
    <updated>2021-01-13T04:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/748">#748</a></strong></p><p>There is said to be <a href="https://developer.apple.com/documentation/swiftui/popupbuttonpickerstyle">PopUpButtonPickerStyle</a> and <a href="https://developer.apple.com/documentation/swiftui/menupickerstyle">MenuPickerStyle</a> but these don’t seem to work.</p><p>There’s <code>Menu</code> button it shows a dropdown style. We fake it by fading this and overlay with a button. <code>allowsHitTesting</code> does not work, but <code>disabled</code> seems to do the trick</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Menu</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">"About"</span>, action: <span class="type">ActionService</span>.onAbout)</span><br><span class="line">    <span class="type">Button</span>(<span class="string">"Quit"</span>, action: <span class="type">ActionService</span>.onQuit)</span><br><span class="line">&#125; label: &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line">.frame(width: <span class="number">24</span>)</span><br><span class="line">.opacity(<span class="number">0.01</span>)</span><br><span class="line">.overlay(</span><br><span class="line">    makeButton(action: &#123;&#125;, <span class="string">"gearshape.fill"</span>)</span><br><span class="line">        .disabled(<span class="literal">true</span>)</span><br><span class="line">        .foregroundColor(<span class="type">Color</span>.secondaryLabel)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/748&quot;&gt;#748&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There is said to be &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use UITextView in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-UITextView-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-UITextView-in-SwiftUI/</id>
    <published>2021-01-08T19:17:59.000Z</published>
    <updated>2021-01-08T19:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/747">#747</a></strong></p><p>Need to use <code>Coordinator</code> conforming to <code>UITextViewDelegate</code> to apply changes back to <code>Binding</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyTextView</span>: <span class="title">UIViewRepresentable</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>: <span class="title">NSObject</span>, <span class="title">UITextViewDelegate</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parent: <span class="type">MyTextView</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span>(parent: <span class="type">MyTextView</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.parent = parent</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">textViewDidChange</span><span class="params">(<span class="number">_</span> textView: UITextView)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> textView.text != parent.text &#123;</span><br><span class="line">                parent.text = textView.text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span><span class="params">()</span></span> -&gt; <span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="type">Coordinator</span>(parent: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">UITextView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">UITextView</span>()</span><br><span class="line">        view.isScrollEnabled = <span class="literal">true</span></span><br><span class="line">        view.isEditable = <span class="literal">true</span></span><br><span class="line">        view.isUserInteractionEnabled = <span class="literal">true</span></span><br><span class="line">        view.font = <span class="type">UIFont</span>.preferredFont(forTextStyle: .body)</span><br><span class="line">        view.delegate = context.coordinator</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIView</span><span class="params">(<span class="number">_</span> uiView: UITextView, context: Context)</span></span> &#123;</span><br><span class="line">        uiView.text = text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/747&quot;&gt;#747&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Need to use &lt;code&gt;Coordinator&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to check app going to background in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-check-app-going-to-background-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-check-app-going-to-background-in-SwiftUI/</id>
    <published>2021-01-07T08:25:52.000Z</published>
    <updated>2021-01-07T08:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/746">#746</a></strong></p><p>From iOS 13, the default is to support multiple scene, so the the old UIApplicationDelegate lifecycle does not work. Double check your <code>Info.plist</code> for <code>UIApplicationSceneManifest</code> key</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UIApplicationSceneManifest<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIApplicationSupportsMultipleScenes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><p>One way to be notified about application life cycle is to use <code>UIApplicationDelegateAdaptor</code> and via <code>NotificationCenter</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> FontAwesomeSwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : <span class="keyword">Any</span>]? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="type">FontAwesome</span>.register()</span><br><span class="line">        <span class="type">PreferenceManager</span>.shared.load()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyAwesomeApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    @<span class="type">UIApplicationDelegateAdaptor</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">var</span> appDelegate</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">MainView</span>(store: <span class="type">Store</span>.shared)</span><br><span class="line">                .onReceive(</span><br><span class="line">                    <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.publisher(</span><br><span class="line">                        <span class="keyword">for</span>: <span class="type">UIApplication</span>.didEnterBackgroundNotification)) &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                    <span class="type">PreferenceManager</span>.shared.save()</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/746&quot;&gt;#746&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From iOS 13, the default is to support
        
      
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use selection in List in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-selection-in-List-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-selection-in-List-in-SwiftUI/</id>
    <published>2021-01-06T20:04:59.000Z</published>
    <updated>2021-01-06T20:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/745">#745</a></strong></p><p>I used to use <code>selection</code> with Binding where wrappedValue is optional, together with tag in SwiftUI for macOS, and it shows current selection</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Binding</span></span><br><span class="line"><span class="keyword">var</span> selection: <span class="type">Tag?</span> = .all</span><br><span class="line"></span><br><span class="line"><span class="type">List</span>(section: $selection) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"All"</span>)</span><br><span class="line">         .tag(<span class="type">Tag</span>.all)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the API, looks like <code>Binding&lt;Set&gt;</code> is for multiple selection, and <code>Binding&lt;Optional&gt;</code> is for single selection<br> Looking at <a href="https://developer.apple.com/documentation/swiftui/list">List</a> signature, I see that selection uses wrappedValue as <code>Set</code> for <code>Binding&lt;Set&lt;SelectionValue&gt;&gt;?</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>&lt;<span class="type">Data</span>, <span class="type">ID</span>, <span class="type">RowContent</span>&gt;(<span class="type">Data</span>, id: <span class="type">KeyPath</span>&lt;<span class="type">Data</span>.<span class="type">Element</span>, <span class="type">ID</span>&gt;, selection: <span class="type">Binding</span>&lt;<span class="type">Set</span>&lt;<span class="type">SelectionValue</span>&gt;&gt;?, rowContent: (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">RowContent</span>)</span><br></pre></td></tr></table></figure><p>So let’s use Set. It shows current selection and I don’t need to use <code>.tag</code> also</p><pre><code class="swift"><span class="keyword">let</span> selection: <span class="type">Binding</span>&lt;<span class="type">Set</span>&lt;<span class="type">SidebarTag</span>&gt;&gt; = <span class="type">Binding</span>&lt;<span class="type">Set</span>&lt;<span class="type">SidebarTag</span>&gt;&gt;(    <span class="keyword">get</span>: { <span class="type">Set</span>(arrayLiteral: store.sidebarTag) },    <span class="keyword">set</span>: { newValue <span class="keyword">in</span>        <span class="type">DispatchQueue</span>.main.async {            <span class="keyword">if</span> <span class="keyword">let</span> first = newValue.first {                store.sidebarTag = first            }        }    })<span class="type">List</span>(selection: selection) {    <span class="type">Text</span>(<span class="string">"All"</span>)}</code></pre><hr><p><strong>Updated at</strong> 2021-01-06 21:13:43</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/745&quot;&gt;#745&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I used to use &lt;code&gt;selection&lt;/code&gt; with
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to simplify communication patterns with closure in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-simplify-communication-patterns-with-closure-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-simplify-communication-patterns-with-closure-in-Swift/</id>
    <published>2021-01-06T12:13:34.000Z</published>
    <updated>2021-01-06T12:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/744">#744</a></strong></p><p>As someone who builds lots of <a href="https://onmyway133.com">apps</a>, I try to find quick ways to do things. One of them is to avoid repetitive and cumbersome APIs. That’s why I built <a href="https://github.com/onmyway133/Anchors">Anchors</a> to <a href="https://onmyway133.com/blog/how-to-make-auto-layout-more-convenient-in-ios/">make Auto Layout more convenient</a>, <a href="https://github.com/onmyway133/Omnia">Omnia</a> to add missing extensions. The next thing in the itchy list is the many ways to communicate among objects in iOS and macOS development that can be very annoying sometimes.</p><p>This post is my take on tackling some communication patterns issue and how to make it simpler with <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a>. The learning applies for both iOS and macOS development, and code is in Swift 5.</p><h3 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h3><ul><li><a href="">The many communication patterns</a></li><li><a href="">Associated objects</a></li><li><a href="">Protocol with associated type</a></li><li><a href="e">Action to RxSwift observable</a></li><li><a href="">Timer keeps a strong reference to its target</a></li><li><a href="">Key-value observing in Swift 5</a></li><li><a href="">Block-based Notification Center</a></li></ul><h2 id="The-many-communication-patterns"><a href="#The-many-communication-patterns" class="headerlink" title="The many communication patterns"></a>The many communication patterns</h2><p>In iOS, we can handle button tap by using addTarget which is a function that any UIControl has:</p><pre><code>let button = UIButton()button.addTarget(self, action: #selector(buttonTouched(_:)), for: .touchUpInside)@objc func buttonTouched(_ sender: UIButton) {}</code></pre><p>In macOS, due to historical reasons, the syntax is a bit different:</p><pre><code>button.target = selfbutton.action = #selector(buttonTouched(_:))@objc func buttonTouched(_ sender: NSButton) {}</code></pre><p>The more complex the app, the more we need to split responsibilities for classes and make them communicate. Target action is not the only way for objects communication, there are delegates, notification center, KVO and blocks. All of these are used all over the placed within iOS SDKs. Not only do we have to be aware of syntax differences, but we also have to care about how and when to use one over another.</p><p>This article Communication Patterns from objc.io is my favorite and many of the principles still hold true for now.</p><p><img src="https://cdn-images-1.medium.com/max/2268/0*sr1z90rXBwO-GS3K.png" alt="[https://www.objc.io/issues/7-foundation/communication-patterns/](https://www.objc.io/issues/7-foundation/communication-patterns/)"><em><a href="https://www.objc.io/issues/7-foundation/communication-patterns/">https://www.objc.io/issues/7-foundation/communication-patterns/</a></em></p><p>As I do many apps, I’m a bit baffled by cumbersome APIs, I wish I could write code in a more succinct and convenient way. Something like:</p><pre><code>button.on.tap { print(&quot;button was tapped&quot; }user.on.propertyChange(\.name) { print(&quot;name has changed to \($0)&quot;}tableView.on.tapRow { print(&quot;row \($0) was tapped&quot; }</code></pre><p>This may seem a bit overengineered and some of you may feel OK with the iOS APIs. I have to admit that I prefer explicit over the clever code, but in this case, we can make the APIs look a bit nicer. This is achieved with a less known featured in ObjC Runtime called associated objects.</p><p>In the old Objective C age, there was the famous <a href="https://github.com/BlocksKit/BlocksKit">BlocksKit</a> which allows us to deal with UIKit/AppKit in the handy block syntax. Although Objective C block is hard to declare, they are much more declarative than other communication patterns like delegate or handling UIAlert actions. And with the closure in Swift, we can do even nicer things.</p><h2 id="Associated-objects"><a href="#Associated-objects" class="headerlink" title="Associated objects"></a>Associated objects</h2><p>With Objective C category and Swift extension, we can’t add a stored property, that’s where associated objects come into play. The associated object allows us to attach other objects to the lifetime of any NSObject , with these 2 free functions objc_getAssociatedObject and objc_setAssociatedObject .</p><p>The associated object lies in the Objective C runtime category and can be considered hacky, but it has shown to be very effective in some scenarios.</p><h3 id="Detecting-object-deallocation"><a href="#Detecting-object-deallocation" class="headerlink" title="Detecting object deallocation"></a>Detecting object deallocation</h3><p>Since the associated object is attached to the host object, there’s this very handy use case that allows detection of the life cycle of the host object. We can, for example, observe UIViewControllerto tell if it has really been deallocated.</p><pre><code>class Notifier {    deinit {        print(&quot;host object was deinited&quot;)    }}extension UIViewController {    private struct AssociatedKeys {        static var notifier = &quot;notifier&quot;    }var notifier: Notifier? {        get {            return objc_getAssociatedObject(self, &amp;AssociatedKeys.notifier) as? Notifier        }set {            if let newValue = newValue {                objc_setAssociatedObject(                    self,                    &amp;AssociatedKeys.notifier,                    newValue as Notifier?,                    .OBJC_ASSOCIATION_RETAIN_NONATOMIC                )            }        }    }}</code></pre><p>Then if we at some time set the host object to nil, the associated object will be deallocated too, giving us a callback to handle to deinit event:</p><pre><code>var viewController: UIViewController? = UIViewController()viewController?.notifier = Notifier()viewController = nilXCTAssertNil(viewController?.notifier)</code></pre><h3 id="Confusing-code-completion"><a href="#Confusing-code-completion" class="headerlink" title="Confusing code completion"></a>Confusing code completion</h3><p>If we’re gonna make the on extension to UIButton, UITableView, UIViewController we have to add the associated object into NSObject for all these classes to have on property.</p><pre><code>class On {    func tap(_ closure: () -&gt; Void) {}    func tapRow(_ closure: () -&gt; Void) {}    func textChange(_ closure: () -&gt; Void) {}}</code></pre><p>to NSObject:</p><pre><code>extension NSObject {    private struct AssociatedKeys {        static var on = &quot;on&quot;    }var on: On? {        get {            return objc_getAssociatedObject(self, &amp;AssociatedKeys.on) as? On        }set {            if let newValue = newValue {                objc_setAssociatedObject(                    self,                    &amp;AssociatedKeys.on,                    newValue as On?,                    .OBJC_ASSOCIATION_RETAIN_NONATOMIC                )            }        }    }}</code></pre><p>This brings another problem with code completion, we can act on UIButton but Xcode still hints us about all methods on On , but for UIButton only tap and propertyChange are valid. The textChange is more for UITextField and UITextView:</p><pre><code>button.on.textChange {}</code></pre><h2 id="Protocol-with-associated-type"><a href="#Protocol-with-associated-type" class="headerlink" title="Protocol with associated type"></a>Protocol with associated type</h2><p>To remedy this awkward API, we can use a very sweet feature of Swift called protocol with an associated type. We start by introducing EasyClosureAware that has a host EasyClosureAwareHostType of type AnyObject. This means that this protocol is for any class that wants to attach itself to a host object.</p><pre><code>private struct AssociatedKey {    static var key = &quot;EasyClosure_on&quot;}public protocol EasyClosureAware: class {    associatedtype EasyClosureAwareHostType: AnyObjectvar on: Container&lt;EasyClosureAwareHostType&gt; { get }}extension EasyClosureAware {    public var on: Container&lt;Self&gt; {        get {            if let value = objc_getAssociatedObject(self, &amp;AssociatedKey.key) as? Container&lt;Self&gt; {                return value            }let value = Container(host: self)            objc_setAssociatedObject(self, &amp;AssociatedKey.key, value, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)            return value        }    }}extension NSObject: EasyClosureAware { }</code></pre><p>Then we confirm NSObject to EasyClosureAware so every NSObject subclass has the on property for free.</p><p>The Container is for containing all targets and to keep all target alive. With this approach we can wrap around any patterns like delegate, target action and KVO observer.</p><pre><code>public class Container&lt;Host: AnyObject&gt;: NSObject {    public unowned let host: Host    public init(host: Host) {        self.host = host    }    // Keep all targets alive    public var targets = [String: NSObject]()}</code></pre><p>With this setup, we can easily apply to any object. For example UIButton:</p><pre><code>public extension Container where Host: UIButton {    func tap(_ action: [@escaping](http://twitter.com/escaping) Action) {        let target = ButtonTarget(host: host, action: action)        targets[ButtonTarget.uniqueId] = target    }}class ButtonTarget: NSObject {    var action: Action?init(host: UIButton, action: [@escaping](http://twitter.com/escaping) Action) {        super.init()self.action = action        host.addTarget(self, action: #selector(handleTap), for: .touchUpInside)    }// MARK: - Action[@objc](http://twitter.com/objc) func handleTap() {        action?()    }}</code></pre><p>We have ButtonTarget that acts as target for target-action for UIButton , which inherits from UIControl .</p><p>Now to react to button tap, it’s as simple as calling:</p><pre><code>button.on.tap {}</code></pre><p>And Xcode shows correct auto-completion. If we’re about to use UITextField , there’s no code suggestions showing up as there’s no methods for UITextField yet:</p><pre><code>textField.on. // ummh?</code></pre><p>We need to add a method to Container that has UITextField constraint, for example:</p><pre><code>public extension Container where Host: UITextField {    func textChange(_ action: [@escaping](http://twitter.com/escaping) StringAction) {        let target = TextFieldTarget(host: host, textAction: action)        targets[TextFieldTarget.uniqueId] = target    }}class TextFieldTarget: NSObject {    var textAction: StringAction?required init(host: UITextField, textAction: [@escaping](http://twitter.com/escaping) StringAction) {        super.init()self.textAction = textAction        host.addTarget(self, action: #selector(handleTextChange(_:)), for: .editingChanged)    }// MARK: - Action[@objc](http://twitter.com/objc) func handleTextChange(_ textField: UITextField) {        textAction?(textField.text ?? &quot;&quot;)    }}</code></pre><p>I’ve used this technique extensively and it works on any platform like iOS, macOS, tvOS as they all base on Objective C Runtime and NSObject. We can easily extend it to any classes we want. This can replace target action, delegate, notification center, KVO or any other communication patterns.</p><p>In the next sections, let’s explore timer, KVO and notification and whether we should have our on closure.</p><h2 id="Action-to-RxSwift-observable"><a href="#Action-to-RxSwift-observable" class="headerlink" title="Action to RxSwift observable"></a>Action to RxSwift observable</h2><p>Having button.on.tap {} is nice, but it would be great if that can transform into Observablefor some RxSwift fans like me.</p><p>We can have our own RxButton like:</p><pre><code>final class RxButton: UIButton {    let tap = PublishSubject&lt;()&gt;()override init(frame: CGRect) {        super.init(frame: frame)self.on.tap { tap.onNext(()) }    }}</code></pre><p>We use PublishSubject to map from the imperative to the declarative world of Rx, then we can consume it:</p><pre><code>button.tap.subscribe(onNext: {})</code></pre><h2 id="Timer-keeps-a-strong-reference-to-its-target"><a href="#Timer-keeps-a-strong-reference-to-its-target" class="headerlink" title="Timer keeps a strong reference to its target"></a>Timer keeps a strong reference to its target</h2><p>Unlike target-action in UIControl where target is held weakly, Timer keeps its target strongly to deliver tick event.</p><p>If you are using init(timeInterval:target:selector:userInfo:repeats:) then please read the section about <a href="https://developer.apple.com/documentation/foundation/timer/1408356-init">target</a> carefully.</p><blockquote><p>The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to this object until it (the timer) is invalidated.</p></blockquote><p>This is what we did before iOS 10:</p><pre><code>func schedule() {    DispatchQueue.main.async {      self.timer = Timer.scheduledTimer(timeInterval: 20, target: self,                                   selector: #selector(self.timerDidFire(timer:)), userInfo: nil, repeats: false)    }}[@objc](http://twitter.com/objc) private func timerDidFire(timer: Timer) {    print(timer)}</code></pre><p>We can easily extend Timer with our on property by introducing tick method:</p><pre><code>public extension Container where Host: Timer {func tick(_ action: [@escaping](http://twitter.com/escaping) Action) {        self.timerTarget?.action = action    }}class TimerTarget: NSObject {    var action: Action?[@objc](http://twitter.com/objc) func didFire() {        action?()    }}public extension Timer {    static func scheduledTimer(withTimeInterval interval: TimeInterval, repeats: Bool) -&gt; Timer {        let target = TimerTarget()        let timer = Timer.scheduledTimer(timeInterval: interval,                                         target: target,                                         selector: #selector(TimerTarget.didFire),                                         userInfo: nil,                                         repeats: repeats)        timer.on.timerTarget = target        return timer    }}</code></pre><p>So we can use with timer.on.tick:</p><pre><code>timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true)timer.on.tick { print(&quot;tick&quot;) }</code></pre><p>But as of iOS 10, Timer gets its closure based API, so now we can just call the static method scheduledTimer:</p><pre><code>DispatchQueue.main.async {      self.timer = Timer.scheduledTimer(withTimeInterval: 20, repeats: false) { timer in        print(timer)      }}</code></pre><p>Now that Timer gets better API, our on property on Timer is no longer needed, which is fine.</p><h2 id="Key-value-observing-in-Swift-5"><a href="#Key-value-observing-in-Swift-5" class="headerlink" title="Key-value observing in Swift 5"></a>Key-value observing in Swift 5</h2><p>Key-value observing is the ability to watch property change for an NSObject , before Swift 5 the syntax is quite verbose and error-prone with addObserver and observeValuem methods. This is not to mention the usage of context , especially in the subclassing situation, where we need a context key to distinguish between observations of different objects on the same keypath.</p><pre><code>public extension Container where Host: NSObject {func observe(object: NSObject, keyPath: String, _ action: [@escaping](http://twitter.com/escaping) AnyAction) {        let item = KeyPathTarget.Item(object: object, keyPath: keyPath, action: action)        keyPathTarget.items.append(item)        object.addObserver(keyPathTarget, forKeyPath: keyPath, options: .new, context: nil)    }func unobserve(object: NSObject, keyPath: String? = nil) {        let predicate: (KeyPathTarget.Item) -&gt; Bool = { item in            return item.object === object                &amp;&amp; (keyPath != nil) ? (keyPath! == item.keyPath) : true        }keyPathTarget.items.filter(predicate).forEach({            object.removeObserver(keyPathTarget, forKeyPath: $0.keyPath)        })keyPathTarget.items = keyPathTarget.items.filter({ !predicate($0) })    }}class KeyPathTarget: NSObject {    class Item {        let object: NSObject        let keyPath: String        let action: AnyActioninit(object: NSObject, keyPath: String, action: [@escaping](http://twitter.com/escaping) AnyAction) {            self.object = object            self.keyPath = keyPath            self.action = action        }    }var items = [Item]()deinit {        items.forEach({ item in            item.object.removeObserver(self, forKeyPath: item.keyPath)        })items.removeAll()    }// MARK: - KVO    override func observeValue(forKeyPath keyPath: String?,                               of object: Any?,                               change: [NSKeyValueChangeKey : Any]?,                               context: UnsafeMutableRawPointer?) {        guard let object = object as? NSObject,            let keyPath = keyPath,            let value = change?[.newKey] else {                return        }let predicate: (KeyPathTarget.Item) -&gt; Bool = { item in            return item.object === object                &amp;&amp; keyPath == item.keyPath        }items.filter(predicate).forEach({            $0.action(value)        })    }}</code></pre><p>Then we can have an observer to observe contentSize of UIScrollView like:</p><pre><code>let observer = NSObject()observer.on.observe(object: scrollView: keyPath: #keyPath(UIScrollView.contentSize)) { value in  print($0 as? CGSize)}</code></pre><p>Starting from Swift 5, there’s an introduction of KeyPath syntax and improvement to KVO. Now we can just:</p><pre><code>@objc class User: NSObject {    @objc dynamic var name = &quot;random&quot;}let thor = Person()thor.observe(\User.name, options: .new) { user, change in    print(&quot;User has a new name \(user.name)&quot;)}thor.name = &quot;Thor&quot;</code></pre><p>As for KVO, we need to mark @objc and dynamic for it to work. The rest is just to call observe on the object with the KeyPath we want to observe.</p><h2 id="Block-based-Notification-Center"><a href="#Block-based-Notification-Center" class="headerlink" title="Block-based Notification Center"></a>Block-based Notification Center</h2><p>NotificationCenter is the mechanism to post and receive notification system-wide. Starting from iOS 4, NotificationCenter got its block API <a href="https://developer.apple.com/documentation/foundation/nsnotificationcenter/1411723-addobserverforname">addObserverForName:object:queue:usingBlock:</a></p><p>The only thing to notice is that block parameter being copied.</p><blockquote><p>The block to be executed when the notification is received.<br>The block is copied by the notification center and (the copy) held until the observer registration is removed.</p></blockquote><p>As for EasyClosure, to wrap around NotficationCenter is easy:</p><pre><code>public extension Container where Host: NSObject {func observe(notification name: Notification.Name,                 _ action: [@escaping](http://twitter.com/escaping) NotificationAction) {        let observer = NotificationCenter.default.addObserver(            forName: name, object: nil,            queue: OperationQueue.main, using: {                action($0)        })notificationTarget.mapping[name] = observer    }func unobserve(notification name: Notification.Name) {        let observer = notificationTarget.mapping.removeValue(forKey: name)if let observer = observer {            NotificationCenter.default.removeObserver(observer as Any)            notificationTarget.mapping.removeValue(forKey: name)        }    }}class NotificationTarget: NSObject {    var mapping: [Notification.Name: NSObjectProtocol] = [:]deinit {        mapping.forEach({ (key, value) in            NotificationCenter.default.removeObserver(value as Any)        })mapping.removeAll()    }}</code></pre><p>And with its on extension:</p><pre><code>viewController.on.observe(notification: Notification.Name.UIApplicationDidBecomeActive) { notification in  print(&quot;application did become active&quot;)}viewController.on.unobserve(notification: Notification.Name.UIApplicationDidBecomeActive)</code></pre><p>This is for demonstration purpose only as the default NotificationCenter with block-based API is good enough. There are some cautions when using it<br><a href="https://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/">NSNotificationCenter with blocks considered harmful</a> that’s good to be aware of.</p><h2 id="Where-do-we-go-from-here"><a href="#Where-do-we-go-from-here" class="headerlink" title="Where do we go from here"></a>Where do we go from here</h2><p>We’ve learned how to make use of associated objects and make nicer APIs. <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a> is designed to be extensible and we can wrap any communication patterns. KVO and NotificationCenter APIs have become better starting iOS 10 and Swift 5, and we see a trend of more closure based API as they are declarative and convenient. When we can, we should stick to the system APIs as much as possible and only make our sugar when needed.</p><p>I hope you find this article helpful, here ‘s a fun gif made with <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a> APIs:</p><pre><code>func allOn() -&gt; Bool {  return [good, cheap, fast].filter({ $0.isOn }).count == 3}good.on.valueChange { _ in  if allOn() {    fast.setOn(false, animated: true)  }}cheap.on.valueChange { _ in  if allOn() {    good.setOn(false, animated: true)  }}fast.on.valueChange { _ in  if allOn() {    cheap.setOn(false, animated: true)  }}</code></pre><p><img src="https://cdn-images-1.medium.com/max/2000/0*7Bk_M_krffE-VTbp.gif" alt=""></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li>I originally published on <a href="https://medium.com/flawless-app-stories/simplifying-communication-patterns-with-closure-in-swift-1938414468b3">https://medium.com/flawless-app-stories/simplifying-communication-patterns-with-closure-in-swift-1938414468b3</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/744&quot;&gt;#744&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As someone who builds lots of &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="featured" scheme="https://onmyway133.github.io/tags/featured/"/>
    
  </entry>
  
  <entry>
    <title>How to use Apple keyboard key symbols</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-Apple-keyboard-key-symbols/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-Apple-keyboard-key-symbols/</id>
    <published>2021-01-05T20:50:32.000Z</published>
    <updated>2021-01-05T20:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/743">#743</a></strong></p><p>•  = Apple logo<br>• ⌘ = Command<br>• ⇧ = Shift<br>• ⌫ = Backspace/Delete<br>• ⇪ = Caps lock<br>• ⌥ = Option/Alt<br>• ⌃ = Control<br>• ⎋ = Escape<br>• ←↑→↓ = Arrow Keys</p><h2 id="•-↩-Return"><a href="#•-↩-Return" class="headerlink" title="• ↩ = Return"></a>• ↩ = Return</h2><p><strong>Updated at</strong> 2021-01-05 21:50:39</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/743&quot;&gt;#743&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•  = Apple logo&lt;br&gt;• ⌘ = Command&lt;br&gt;• ⇧
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to make Auto Layout more convenient in iOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-Auto-Layout-more-convenient-in-iOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-Auto-Layout-more-convenient-in-iOS/</id>
    <published>2021-01-05T06:07:53.000Z</published>
    <updated>2021-01-05T06:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/742">#742</a></strong></p><p>Auto Layout has been around since macOS 10.7 and iOS 6.0 as a nicer way to do layouts over the old resizing masks. Besides some rare cases when we need to manually specify origins and sizes, Auto Layout is the preferred way to do declarative layouts whether we choose to do UI in code or Storyboard. The Auto Layout APIs have some improvements over the years, there are also some sugar libraries that add easy syntaxes, so more choices for developers.</p><p>In this article, let’s take a review of how layout has improved over the years, from manual layout, autoresizing masks and finally to Auto Layout. I will mention a few takes on some libraries and how to abstract Auto Layout using the builder pattern. There are also some notes about the view life cycle and APIs improvements that might be overlooked. These are of course based on my experience and varies because of personal tastes but I hope you‘ll find something useful.</p><p>Although the article mention iOS, the same learning applies to watchOS, tvOS and macOS too. </p><h2 id="Positioning-a-view-before-Auto-Layout"><a href="#Positioning-a-view-before-Auto-Layout" class="headerlink" title="Positioning a view before Auto Layout"></a>Positioning a view before Auto Layout</h2><p>When I first started iOS programming in early 2014, I read a book about Auto Layout and that book detailed lots of scenarios that completely confused me. It didn’t take long until I tried Auto Layout in an app and I realized it w as so simple. In its simplest sense, a view needs a position and a size to be correctly shown on the screen, everything else is just extra. In Auto Layout’s term, we need to specify enough constraints to position and size the view.</p><h3 id="Manual-layout-using-CGRect"><a href="#Manual-layout-using-CGRect" class="headerlink" title="Manual layout using CGRect"></a>Manual layout using CGRect</h3><p>If we take a look back at the way we do a manual layout with the frame, there are origins and sizes. For example, here is how to position a red box that stretches accordingly with the width of the view controller.</p><p><img src="https://cdn-images-1.medium.com/max/2336/1*ScTtKYui6Ml0z0ocYR9uDA.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> box = <span class="type">UIView</span>()</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        box.backgroundColor = <span class="type">UIColor</span>.red</span><br><span class="line">        view.addSubview(box)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        </span><br><span class="line">        box.frame = <span class="type">CGRect</span>(x: <span class="number">20</span>, y: <span class="number">50</span>, width: view.frame.size.width - <span class="number">40</span>, height: <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>viewDidLoad is called when the view property of view controller is loaded, we need to wait until viewDidLayoutSubviews so that we have access to the final bounds. When the bounds change for a view controller’s view, the view adjusts the positions of its subviews and then the system calls this method.</p><h3 id="Why-is-view-size-correct-in-viewDidLoad"><a href="#Why-is-view-size-correct-in-viewDidLoad" class="headerlink" title="Why is view size correct in viewDidLoad"></a>Why is view size correct in viewDidLoad</h3><p>viewDidLoad is definitely not the recommended way to do manual layout but there are times we still see that its view is correctly sized and fills the screen. This is when we need to read <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller">View Management</a> in UIViewController more thoroughly:</p><blockquote><p>Each view controller manages a view hierarchy, the root view of which is stored in the <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621460-view">*view</a>*property of this class. The root view acts primarily as a container for the rest of the view hierarchy. The size and position of the root view is determined by the object that owns it, which is either a parent view controller or the app’s window. The view controller that is owned by the window is the app’s root view controller and its view is sized to fill the window.<br>A view controller’s root view is always sized to fit its assigned space.</p></blockquote><p>It can also be that the view has fixed size in xib or storyboard but we should control the size explicitly and do that in the right view controller method to avoid unexpected behaviors.</p><h3 id="Autoresizing-masks"><a href="#Autoresizing-masks" class="headerlink" title="Autoresizing masks"></a>Autoresizing masks</h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*yn3czZbudyVVlr-a3J1l9A.png" alt=""></p><p>Autoresizing mask was the old way to make layout a bit more declarative, also called <em>springs and struts</em> layout system. It is integer bit mask that determines how the receiver resizes itself when its superview’s bounds change. Combining these constants lets you specify which dimensions of the view should grow or shrink relative to the superview. The default value of this property is none, which indicates that the view should not be resized at all.</p><p>While we can specify which edges we want to fix and which should be flexible, it is confusing in the ways we do in xib and in code.</p><p>In the above screenshot, we pin the top of the red box to the top of the screen, and that is fixed distance. When the view changes size, the width and height of the red box changes proportionally, but the top spacing remains fixed.</p><p>In code, instead of specifying autoresizing in terms of fixed distance, we use flexible terms to specify which edges should be flexible.</p><p>To achieve the same red box on the top of the screen, we need to specify a flexible width and a flexible bottom margin. This means the left, right and top edges are fixed.</p><pre><code>box.autoresizingMask = [.flexibleWidth, .flexibleBottomMargin]</code></pre><p>Here are a few more scenarios</p><ul><li><p>Horizontally fixed distance from the left: [.flexibleRightMargin]</p></li><li><p>Center horizontally [.flexibleLeftMargin, .flexibleRightMargin]</p></li><li><p>Vertically fixed distance from the top: [.flexibleBottomMargin]</p></li><li><p>Center vertically [.flexibleTopMargin, .flexibleBottomMargin]</p></li></ul><p>These are not very intuitive and the way these are scaled proportionally may not fit our expectation. Also, note that multiple options can be done on the same axis.</p><blockquote><p>When more than one option along the same axis is set, the default behavior is to distribute the size difference proportionally among the flexible portions. The larger the flexible portion, relative to the other flexible portions, the more it is likely to grow. For example, suppose this property includes the <a href="apple-reference-documentation://hsNSe_v1m3">flexibleWidth</a> and <a href="apple-reference-documentation://hsW_P6WgME">flexibleRightMargin</a>constants but does not include the <em>flexibleLeftMargin</em> constant, thus indicating that the width of the view’s left margin is fixed but that the view’s width and right margin may change.</p></blockquote><p>Understanding of autoresizing masks won’t waste your time, we will come back to it in a few minutes 😉</p><h2 id="Auto-Layout-to-the-rescue"><a href="#Auto-Layout-to-the-rescue" class="headerlink" title="Auto Layout to the rescue"></a>Auto Layout to the rescue</h2><p>Auto Layout, together with dynamic text and size classes, are recommended ways to build <a href="https://developer.apple.com/design/adaptivity/">adaptive user interfaces</a> as there the number of iOS devices with different screen sizes grows.</p><h3 id="A-constraint-based-layout-system"><a href="#A-constraint-based-layout-system" class="headerlink" title="A constraint-based layout system"></a>A constraint-based layout system</h3><p>Auto Layout is described via <a href="https://developer.apple.com/documentation/uikit/nslayoutconstraint">NSLayoutConstraint</a> by defining constraints between 2 objects. Here is the simple formula to remember:</p><pre><code>item1.attribute1 = multiplier × item2.attribute2 + constant</code></pre><p>Here is how to replicate that red box with NSLayoutConstraint. We need to specify which property of which view should be connected to another property of another view. Auto Layout supports many attributes such ascenterX, centerY and topMargin.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> marginTop = <span class="type">NSLayoutConstraint</span>(item: box, attribute: .top, relatedBy: .<span class="built_in">equal</span>, toItem: view, attribute: .top, multiplier: <span class="number">1.0</span>, constant: <span class="number">50</span>)</span><br><span class="line"><span class="keyword">let</span> marginLeft = <span class="type">NSLayoutConstraint</span>(item: box, attribute: .<span class="keyword">left</span>, relatedBy: .<span class="built_in">equal</span>, toItem: view, attribute: .<span class="keyword">left</span>, multiplier: <span class="number">1.0</span>, constant: <span class="number">20</span>)</span><br><span class="line"><span class="keyword">let</span> marginRight = <span class="type">NSLayoutConstraint</span>(item: box, attribute: .<span class="keyword">right</span>, relatedBy: .<span class="built_in">equal</span>, toItem: view, attribute: .<span class="keyword">right</span>, multiplier: <span class="number">1.0</span>, constant: -<span class="number">20</span>)</span><br><span class="line"><span class="keyword">let</span> height = <span class="type">NSLayoutConstraint</span>(item: box, attribute: .height, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="literal">nil</span>, attribute: .notAnAttribute, multiplier: <span class="number">1.0</span>, constant: <span class="number">100</span>)</span><br><span class="line"><span class="type">NSLayoutConstraint</span>.activate([marginTop, marginLeft, marginRight, height])</span><br></pre></td></tr></table></figure><h3 id="translatesAutoresizingMaskIntoConstraints"><a href="#translatesAutoresizingMaskIntoConstraints" class="headerlink" title="translatesAutoresizingMaskIntoConstraints"></a>translatesAutoresizingMaskIntoConstraints</h3><p>If we run the above code, we will get into the popular warning message regarding translatesAutoresizingMaskIntoConstraints</p><pre><code>[LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints in the following list is one you don&apos;t want.  Try this:   (1) look at each constraint and try to figure out which you don&apos;t expect;   (2) find the code that added the unwanted constraint or constraints and fix it.  (Note: If you&apos;re seeing NSAutoresizingMaskLayoutConstraints that you don&apos;t understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints) (    &quot;&lt;NSAutoresizingMaskLayoutConstraint:0x600003ef2300 h=--&amp; v=--&amp; UIView:0x7fb66c5059f0.midX == 0   (active)&gt;&quot;,    &quot;&lt;NSLayoutConstraint:0x600003e94b90 H:|-(20)-[UIView:0x7fb66c5059f0](LTR)   (active, names: &apos;|&apos;:UIView:0x7fb66c50bce0 )&gt;&quot;)</code></pre><p>If you need some help deciphering this, there is <a href="https://www.wtfautolayout.com/">wtfautolayout</a> that does a good job on explaining what’s really happening.</p><p><img src="https://cdn-images-1.medium.com/max/3884/1*6bzhDTPpCUhitq4GbTVAmw.png" alt=""></p><p>It is said that resizing masks has been reimplemented using Auto Layout under the hood, and there is always NSAutoresizingMaskLayoutConstraint added to the view, hence the midX constraint.</p><p>We should never mix resizing masks and Auto Layout to avoid unwanted behavior, the fix is simply to disable translatesAutoresizingMaskIntoConstraints</p><pre><code>box.translatesAutoresizingMaskIntoConstraints = false</code></pre><p>This property is false by default for views from xib or storyboard but holds true if we declare layout in code. The intention is for the system to create a set of constraints that duplicate the behavior specified by the view’s autoresizing mask. This also lets you modify the view’s size and location using the view’s frame, bounds, or center properties, allowing you to create a static, frame-based layout within Auto Layout.</p><h3 id="Visual-Format-Language"><a href="#Visual-Format-Language" class="headerlink" title="Visual Format Language"></a>Visual Format Language</h3><p>The Visual Format Language lets you use ASCII-art like strings to define your constraints. I see it is used in some code bases so it’s good to know it.</p><p>Here is how to recreate the red box using VFL. We need to specify constraints for both horizontal and vertical direction. Note that the same format string may result in multiple constraints:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> views = [<span class="string">"box"</span> : box]</span><br><span class="line"><span class="keyword">let</span> horizontal = <span class="string">"H:|-20-[box]-20-|"</span></span><br><span class="line"><span class="keyword">let</span> vertical = <span class="string">"V:|-50-[box(100)]"</span></span><br><span class="line"><span class="keyword">let</span> horizontalConstraints = <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: horioptions: [], metrics: <span class="literal">nil</span>, views: views)</span><br><span class="line"><span class="keyword">let</span> verticalConstraints = <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: veoptions: [], metrics: <span class="literal">nil</span>, views: views)</span><br><span class="line"><span class="type">NSLayoutConstraint</span>.activate([horizontalConstraints, verticalConstraints].flatMap(&#123; $<span class="number">0</span> &#125;))</span><br></pre></td></tr></table></figure><p>Visual Format Language is a bit nicer than the verbose NSLayoutConstraint initializer, but it encourages string format, which is error-prone.</p><h3 id="addConstraint-and-activate"><a href="#addConstraint-and-activate" class="headerlink" title="addConstraint and activate"></a>addConstraint and activate</h3><p>This may seem trivial but I see in modern code bases, there is still usage of addConstraint . This was old and hard to use, as we must find the nearest common ancestor view of the 2 views that envolve in Auto Layout.</p><p>Starting from iOS 8, there is isActive and the static activate functions that ease this adding constraints process a lot. Basically what it does is to activate or deactivate the constraint with calls to<a href="apple-reference-documentation://hs6gkFVJuz">addConstraint(_:)</a> and <a href="apple-reference-documentation://hsYzji4l8L">removeConstraint(_:)</a> on the view that is the closest common ancestor of the items managed by this constraint.</p><h3 id="NSLayoutAnchor"><a href="#NSLayoutAnchor" class="headerlink" title="NSLayoutAnchor"></a>NSLayoutAnchor</h3><p>Starting with macOS 10.11 and iOS 9, there was NSLayoutAnchor that simplifies Auto Layout a lot. Auto Layout was declarative, but a bit verbose, now it is simpler than ever with an anchoring system.</p><p>Here is how to achieve that same red box</p><pre><code>NSLayoutConstraint.activate([    box.topAnchor.constraint(equalTo: view.topAnchor, constant: 50),    box.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20),    box.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -20),    box.heightAnchor.constraint(equalToConstant: 100)])</code></pre><p>The cool thing about NSLayoutAnchor is its generic constrained API design. Constraints are divided into X-axis, Y-axis and dimension anchor type that makes it hard to make mistakes.</p><pre><code>open class NSLayoutXAxisAnchor : NSLayoutAnchor&lt;NSLayoutXAxisAnchor&gt;open class NSLayoutDimension : NSLayoutAnchor&lt;NSLayoutDimension&gt;</code></pre><p>For example, we can’t pin the top anchor to the left anchor as they are in different axis, and it makes no sense. Attempt to do the following results in compilation issue as Swift strong type system ensures correctness.</p><pre><code>box.topAnchor.constraint(equalTo: view.leftAnchor, constant: 50),</code></pre><h3 id="Ambiguous-error-message-with-NSLayoutAnchor"><a href="#Ambiguous-error-message-with-NSLayoutAnchor" class="headerlink" title="Ambiguous error message with NSLayoutAnchor"></a>Ambiguous error message with NSLayoutAnchor</h3><p>I’ve gone into a few cases where the error messages from NSLayoutAnchor don’t help. If we mistakenly connect topAnchor with centerXAnchor, which are not possible as they are from different axes.</p><pre><code>NSLayoutConstraint.activate([    box.topAnchor.constraint(equalTo: view.centerXAnchor, constant: 50)])</code></pre><p>Xcode complains of unwrapped UIView problem which may confuse us even more.</p><pre><code>Value of optional type &apos;UIView?&apos; must be unwrapped to refer to member &apos;centerXAnchor&apos; of wrapped base type &apos;UIView&apos;</code></pre><p>Another puzzle, regarding this code</p><pre><code>NSLayoutConstraint.activate([    imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),    imageView.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 8),    imageView.heightAnchor.constraint(equalToConstant: view.heightAnchor, mult0.7),    imageView.widthAnchor.constraint(equalTo: imageView.heightAnchor, multiplier: 1.0)])</code></pre><p>Xcode is complaining about ‘Int’ is not convertible to ‘CGFloat’ which is very misleading. Can you spot the error?</p><p>The problem is that we are using equalToConstant , not equalTo . The generic constraints of NSLayoutAnchor is giving us misleading errors and can waste lots of time of us trying to figure out the subtle typos.</p><h2 id="Abstractions-over-Auto-Layout"><a href="#Abstractions-over-Auto-Layout" class="headerlink" title="Abstractions over Auto Layout"></a>Abstractions over Auto Layout</h2><p>NSLayoutAnchor is getting more popular now but it is not without any flaws. Depending on personal taste, there might be some other forms of abstractions over Auto Layout, namely Cartography and SnapKit, which I ‘ve used and loved. Here are a few of my takes on those.</p><h3 id="Cartography"><a href="#Cartography" class="headerlink" title="Cartography"></a>Cartography</h3><p><a href="https://github.com/robb/Cartography">Cartography</a> is one of the most popular ways to do Auto Layout in iOS. It uses operators which makes constraints very clear:</p><pre><code>constrain(button1, button2) { button1, button2 in    button1.right == button2.left - 12}</code></pre><p>What I don’t like about Cartography is that we have to repeat parameter names and that the parameters inside closure are just proxies, not real views and there is a limit on the number of constrain items.</p><p>Another huge con was that long compilation time issue due to excessive use of operators <a href="https://github.com/robb/Cartography/issues/215">Very long compile time in large functions</a>. Although Swift compilation time is getting better, this was a big problem. I even had to write a script to remove Cartography to use simple NSLayoutAnchor, so take a look at <a href="https://gist.github.com/onmyway133/c486939f82fc4d3a8ed4be21538fdd32">AutoLayoutConverter</a>, which converts Cartography code from</p><pre><code>constrain(logoImnageView, view1, view2) { logoImageView, view1, view2 in    logoImageView.with == 74    view1.left == view2.left + 20}</code></pre><p>to simple NSLayoutAnchor</p><pre><code>Constraint.on(  logoImageView.widthAnchor.constraint(equalToConstant: 74),  view1.leftAnchor.constraint(equalTo: view2.leftAnchor, constant: 20),)</code></pre><p>There are always tradeoffs but to reduce compilation time at the time was a top priority.</p><h3 id="SnapKit"><a href="#SnapKit" class="headerlink" title="SnapKit"></a>SnapKit</h3><p><a href="https://github.com/SnapKit/SnapKit">SnapKit</a>, originally Masonry, is perhaps the most popular Auto Layout wrapper</p><pre><code>box.snp.makeConstraints { (make) -&gt; Void in   make.width.height.equalTo(50)   make.center.equalTo(self.view)}</code></pre><p>The syntax is nice and with snp namespace to avoid extension name clashes, which I love.</p><p>The thing I don’t like about SnapKit is that limited closure. We can only work on 1 view at a time, and the make inside closure is just a proxy, which does not seem intuitive.</p><p>Imagine if we’re gonna make paging views or <a href="https://github.com/onmyway133/blog/issues/22">piano</a>, where each view is stacked side by side. We need a lot of SnapKit calls as we can only work on 1 view at a time. Also, there is no clear relationship where we connect with the other view.</p><p><img src="https://cdn-images-1.medium.com/max/3882/0*4zvVsKPnTaG5ZXgm.png" alt="[https://github.com/onmyway133/blog/issues/22](https://github.com/onmyway133/blog/issues/22)"><em><a href="https://github.com/onmyway133/blog/issues/22">https://github.com/onmyway133/blog/issues/22</a></em></p><pre><code>keyB.snp.makeConstraints { (make) -&gt; Void in   make.left.equalTo(self.keyA.right)}keyC.snp.makeConstraints { (make) -&gt; Void in   make.left.equalTo(self.keyB.right)}keyD.snp.makeConstraints { (make) -&gt; Void in   make.left.equalTo(self.keyC.right)}</code></pre><h3 id="The-many-overloading-functions"><a href="#The-many-overloading-functions" class="headerlink" title="The many overloading functions"></a>The many overloading functions</h3><p>There are also attempts to build simple Auto Layout wrapper functions but that escalates very quickly.</p><p>We might begin with an extension that pins edge constraints to superview.</p><pre><code>box.pinEdgesToSuperview()</code></pre><p>But a view does not always pin to its superview, it can be to another view, then we add another function</p><pre><code>box.pinEdgesToView(_ view: UIView)</code></pre><p>It would be nice if there is some padding, isn’t it? Let’s add insets options</p><pre><code>box.pinEdgesToView(_ view: UIView, insets: UIEdgeInsets)</code></pre><p>There might be cases where we only want to pin top, left, and right and not the bottom, let’s add another parameter</p><pre><code>box.pinEdgesToView(_ view: UIView, insets: UIEdgeInsets, exclude: NSLayoutConstraint.Attribute)</code></pre><p>Constraints are not always 1000 priorities, it can be lower. We need to support that</p><pre><code>box.pinEdgesToView(_ view: UIView, insets: UIEdgeInsets, exclude: NSLayoutConstraint.Attribute, priority: NSLayoutConstraint.Priority)</code></pre><p>We might exclude more than one properties or set different priority levels for each constraint. The simple wrapper with overloading functions and default parameters are just like building rigid abstraction based on premature assumptions. This just limits us in the long run and not scalable 😢</p><h2 id="Embracing-Auto-Layout"><a href="#Embracing-Auto-Layout" class="headerlink" title="Embracing Auto Layout"></a>Embracing Auto Layout</h2><p>All the Auto Layout frameworks out there are just convenient ways to build NSLayoutConstraint, in fact, these are what you normally need</p><ul><li><p>Call addSubview so that view is in the hierarchy</p></li><li><p>Set translatesAutoresizingMaskIntoConstraints = false</p></li><li><p>Set isActive = true to enable constraints</p></li></ul><p>Here is how to make an extension on NSLayoutConstraint that disables translatesAutoresizingMaskIntoConstraints for the involved views. Code is from <a href="https://github.com/onmyway133/Omnia/blob/master/Sources/iOS/NSLayoutConstraint.swift">Omnia</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">NSLayoutConstraint</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Disable auto resizing mask and activate constraints</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameter constraints: constraints to activate</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(<span class="number">_</span> constraints: [NSLayoutConstraint])</span></span> &#123;</span><br><span class="line">        constraints.forEach &#123;</span><br><span class="line">            ($<span class="number">0</span>.firstItem <span class="keyword">as</span>? <span class="type">UIView</span>)?.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">            $<span class="number">0</span>.isActive = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(<span class="number">_</span> constraintsArray: [[NSLayoutConstraint]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> constraints = constraintsArray.flatMap(&#123; $<span class="number">0</span> &#125;)</span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.on(constraints)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here before we activate constraints, we find the firstItem then disables translatesAutoresizingMaskIntoConstraints. From Swift 4.2 there is a separation between compactMap and flatMap so we can safely use flatMap to flatten an array of arrays. This is useful when we have an <a href="https://github.com/onmyway133/Omnia/blob/master/Sources/iOS/UIView.swift">array of arrays</a> of constraints.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pinCenter</span><span class="params">(view: UIView)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            centerXAnchor.constraint(equalTo: view.centerXAnchor),</span><br><span class="line">            centerYAnchor.constraint(equalTo: view.centerYAnchor)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pin</span><span class="params">(size: CGSize)</span></span> -&gt; [<span class="type">NSLayoutConstraint</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            widthAnchor.constraint(equalToConstant: size.width),</span><br><span class="line">            heightAnchor.constraint(equalToConstant: size.height)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With that, we can pin the red box with a certain size and to the center of the screen:</p><pre><code>NSLayoutConstraint.on([    box.pinCenter(view: view),    box.pin(size: CGSize(width: 100, height: 50))])</code></pre><p>This is a very thin but powerful wrapper over NSLayoutAnchor and we can expand it the way we need. It sadly has some problems, like we can’t easily change the priority, as we have to reference the constraint 😢</p><pre><code>let topConstraint = box.topAnchor.constraint(equalTo: view.topAnchor, constant: 50)topConstraint.priority = UILayoutPriority.defaultLowNSLayoutConstraint.on([    topConstraint])</code></pre><h2 id="Making-Auto-Layout-more-convenient-with-the-builder-pattern"><a href="#Making-Auto-Layout-more-convenient-with-the-builder-pattern" class="headerlink" title="Making Auto Layout more convenient with the builder pattern"></a>Making Auto Layout more convenient with the builder pattern</h2><p>The above extension on NSLayoutConstraint works well. However, if you’re like me who wants even more declarative and fast Auto Layout code, we can use the builder pattern to make Auto Layout even nicer. The builder pattern can be applied to many parts of the code but I find it very well suited for Auto Layout. The final code is <a href="https://github.com/onmyway133/Anchors">Anchors</a> on GitHub, and I will detail how to make it.</p><p>Here is what we want to achieve to quickly position 4 views:</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*bH2VP8h2rWp0pgqm.gif" alt=""></p><pre><code>activate(  boxA.anchor.top.left,  boxB.anchor.top.right,  boxC.anchor.bottom.left,  boxD.anchor.bottom.right)</code></pre><p>Most of the times, we want to anchor to parent view, so that should be implicitly done for us. I like to have anchor namespace to avoid extension naming clashes and to make it the starting point for all our convenient Auto Layout code. Let’s identify a few core concepts</p><h3 id="Which-objects-can-interact-with-Auto-Layout"><a href="#Which-objects-can-interact-with-Auto-Layout" class="headerlink" title="Which objects can interact with Auto Layout?"></a>Which objects can interact with Auto Layout?</h3><p>Currently, there are 3 types of objects that can interact withAuto Layout</p><ul><li><p>UIView</p></li><li><p><a href="https://developer.apple.com/documentation/uikit/uilayoutsupport">UILayoutSupport</a>, from iOS 7, for UIViewController to get bottomLayoutGuide and topLayoutGuide . In iOS 11, we should use <a href="https://developer.apple.com/documentation/uikit/uiview/2891102-safearealayoutguide">safeAreaLayoutGuide</a> from UIView instead</p></li><li><p><a href="https://developer.apple.com/documentation/uikit/uilayoutguide">UILayoutGuide</a>: using invisible UIView to do Auto Layout is expensive, that’s why Apple introduced layout guides in iOS 9 to help.</p></li></ul><p>So to support these 3 with anchor namespace, we can make Anchor object that holds AnyObject as behind the scene, NSLayoutConstraint works with AnyObject:</p><pre><code>public class Anchor: ConstraintProducer {  let item: AnyObject/// Init with View  convenience init(view: View) {    self.init(item: view)  }/// Init with Layout Guide  convenience init(layoutGuide: LayoutGuide) {    self.init(item: layoutGuide)  }// Init with Item  public init(item: AnyObject) {    self.item = item  }}</code></pre><p>Now we can define anchor property</p><pre><code>public extension View {  var anchor: Anchor {    return Anchor(view: self)  }}public extension LayoutGuide {  var anchor: Anchor {    return Anchor(layoutGuide: self)  }}</code></pre><h3 id="Which-properties-are-needed-in-a-layout-constraint"><a href="#Which-properties-are-needed-in-a-layout-constraint" class="headerlink" title="Which properties are needed in a layout constraint?"></a>Which properties are needed in a layout constraint?</h3><p>The builder patterns make building things declaratively by holding temporary values. Besides from, to, priority, identifier, we need an array of pins to handle cases where there are multiple created constraints. A center constraint results in both centerX and centerY constraints, and an edge constraint results in top, left, bottom and right constraints.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">To</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> anchor(<span class="type">Anchor</span>)</span><br><span class="line">    <span class="keyword">case</span> size</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">none</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> attribute: <span class="type">Attribute</span></span><br><span class="line">  <span class="keyword">var</span> constant: <span class="type">CGFloa</span></span><br><span class="line">  <span class="keyword">init</span>(<span class="number">_</span> attribute:  <span class="type">Attribute</span>, constant: <span class="type">CGFloat</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.attribute = attribute</span><br><span class="line">    <span class="keyword">self</span>.constant = constant</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">let</span> item: <span class="type">AnyObject</span></span><br><span class="line"><span class="comment">// key: attribute</span></span><br><span class="line"><span class="comment">// value: constant</span></span><br><span class="line"><span class="keyword">var</span> pins: [<span class="type">Pin</span>] = [</span><br><span class="line"><span class="keyword">var</span> multiplierValue: <span class="type">CGFloat</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> priorityValue: <span class="type">Float?</span></span><br><span class="line"><span class="keyword">var</span> identifierValue: <span class="type">String?</span></span><br><span class="line"><span class="keyword">var</span> referenceBlock: (([<span class="type">NSLayoutConstraint</span>]) -&gt; <span class="type">Void</span>)?</span><br><span class="line"><span class="keyword">var</span> relationValue: <span class="type">Relation</span> = .<span class="built_in">equal</span></span><br><span class="line"><span class="keyword">var</span> toValue: <span class="type">To</span> = .<span class="keyword">none</span></span><br></pre></td></tr></table></figure><p>With this, we can also expand our convenient anchor to support more constraints, like spacing horizontally, which adds left and right constraints with correct constants. Because as you know, in Auto Layout, for right and bottom direction, we need to use negative values:</p><pre><code>func paddingHorizontally(_ value: CGFloat) -&gt; Anchor {  removeIfAny(.leading)  removeIfAny(.trailing  pins.append(Pin(.leading, constant: value))  pins.append(Pin(.trailing, constant: -value)  return self}</code></pre><h3 id="Inferring-constraints"><a href="#Inferring-constraints" class="headerlink" title="Inferring constraints"></a>Inferring constraints</h3><p>There are times we want to infer constraints, like if we want a view’s height to double its width. Since we already have width, declaring ratio should pair the height to the width.</p><pre><code>box.anchor.width.constant(10)box.anchor.height.ratio(2) // height==width*2</code></pre><p>This is easily achieved by checking our pins array</p><pre><code>if sourceAnchor.exists(.width) {  return Anchor(item: sourceAnchor.item).width    .equal    .to(Anchor(item: sourceAnchor.item).height)    .multiplier(ratio).constraints()} else if sourceAnchor.exists(.height) {  return Anchor(item: sourceAnchor.item).height    .equal    .to(Anchor(item: sourceAnchor.item).width)    .multiplier(ratio).constraints()} else {  return []}</code></pre><h3 id="Retrieving-a-constraint"><a href="#Retrieving-a-constraint" class="headerlink" title="Retrieving a constraint"></a>Retrieving a constraint</h3><p>I see we’re used to storing constraint property in order to change its constant later. The constraints property in UIView has enough info and it is the source of truth, so retrieving constraint from that is more preferable.</p><p>Here‘s how we find constraint and update that</p><pre><code>boxA.anchor.find(.height)?.constant = 100// laterboxB.anchor.find(.height)?.constant = 100// laterboxC.anchor.find(.height)?.constant = 100</code></pre><p><img src="https://cdn-images-1.medium.com/max/2000/0*1kvf_QjOnm66j8U0.gif" alt=""></p><p>The code to find constraint is very straightforward.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Anchor</span> </span>&#123;</span><br><span class="line"><span class="comment">/// Find a constraint based on an attribute</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(<span class="number">_</span> attribute: Attribute)</span></span> -&gt; <span class="type">NSLayoutConstraint?</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> view = item <span class="keyword">as</span>? <span class="type">View</span> <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> constraints = view.superview?.constraints</span><br><span class="line">    <span class="keyword">if</span> attribute == .width || attribute == .height &#123;</span><br><span class="line">      constraints?.append(contentsOf: view.constraints)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> constraints?.<span class="built_in">filter</span>(&#123;</span><br><span class="line">      <span class="keyword">guard</span> $<span class="number">0</span>.firstAttribute == attribute <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">guard</span> $<span class="number">0</span>.firstItem <span class="keyword">as</span>? <span class="type">NSObject</span> == view <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;).first</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="How-to-reset-constraints"><a href="#How-to-reset-constraints" class="headerlink" title="How to reset constraints"></a>How to reset constraints</h3><p>One of the patterns I see all over is resetting constraints in UITableViewCell or UICollectionViewCell. Depending on the state, the cell removes certain constraints and add new constraints. <a href="https://github.com/robb/Cartography">Cartography</a> does this well by using group.</p><pre><code>constrain(view, replace: group) { view in    view.top  == view.superview!.top    view.left == view.superview!.left}</code></pre><p>If we think about it, NSLayoutConstraint is just layout instructions. It can be activated or deactivated . So if we can group constraints, we can <a href="https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526955-activate">activate</a> or <a href="https://developer.apple.com/documentation/uikit/nslayoutconstraint/1526066-deactivate">deactivate</a> them as a whole.</p><p>Here is how to declare 4 groups of constraints, the syntax is from <a href="https://github.com/onmyway133/Anchors">Anchors</a> but this applies to NSLayoutAnchor as well since those generateNSLayoutConstraint under the hood.</p><pre><code>let g1 = group(box.anchor.top.left)let g2 = group(box.anchor.top.right)let g3 = group(box.anchor.bottom.right)let g4 = group(box.anchor.bottom.left)</code></pre><h2 id="Where-to-go-from-here"><a href="#Where-to-go-from-here" class="headerlink" title="Where to go from here"></a>Where to go from here</h2><p>In this article, we step a bit in time into manual layout, autoresizing masks and then to the modern Auto Layout. The Auto Layout APIs have improvements over the years and are recommended way to do layout. Learning declarative layout also helps me a lot when I learn Constraint Layout in Android, flexbox in React Native or the widget layout in Flutter.</p><p>The post goes through the detailed implementation of how we can build more convenient Auto Layout like <a href="https://github.com/onmyway133/Anchors">Anchors</a> with the builder pattern. In the next article, let’s explore the many ways to debug Auto Layout and how to correctly do Auto Layout for different screen sizes.</p><p>In the meantime, let’s play <a href="https://github.com/onmyway133/Anchors">Tetris</a> in Auto Layout, because why not 😉</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*4Uuc-FYvpYpeNSrT.gif" alt="[https://github.com/onmyway133/Anchors](https://github.com/onmyway133/Anchors)"><em><a href="https://github.com/onmyway133/Anchors">https://github.com/onmyway133/Anchors</a></em></p><pre><code>activate(  lineBlock.anchor.left.bottom)// lateractivate(  firstSquareBlock.anchor.left.equal.to(lineBlock.anchor.right),  firstSquareBlock.anchor.bottom)// lateractivate(  secondSquareBlock.anchor.right.bottom)</code></pre><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li>I originally published on Medium <a href="https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f">https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f</a></li></ul><hr><p><strong>Updated at</strong> 2021-01-05 07:22:31</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/742&quot;&gt;#742&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Auto Layout has been around since macOS
        
      
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="featured" scheme="https://onmyway133.github.io/tags/featured/"/>
    
  </entry>
  
  <entry>
    <title>How to use Core Data</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-Core-Data/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-Core-Data/</id>
    <published>2021-01-04T05:47:09.000Z</published>
    <updated>2021-01-04T05:47:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/741">#741</a></strong></p><p>Whenever I do Core Data, the <a href="https://davedelong.com/blog/2018/05/09/the-laws-of-core-data/">Laws of Core Data</a> @davedelong is always my northern star</p><p>Below are some of take aways from that post</p><p>1) Core Data is more than just SQLite wrapper, it manages objects, relationships, fetching, faulting, …<br>2) Having 2 context: 1 main and 1 background that are both backed by the persistent coordinator. In modern Core Data stack, NSPersistentContainer has default viewContext already, we just need another newBackgroundContext<br>3) Never use a fetched NSManagedObject outside its context’s queue.<br>4) The viewContext is for fetching NSManagedObject on the main queue, and those objects are meant for read only. All mutating operation should be in the background context.<br>5) Better, like I usually do, is to treat CoreData as a cache, and use plain old struct for UI. This reduces dealing with faulting and optional<br>6) Using struct that mirrors Core Data NSManagedObject, it looks verbose (you can use code generator or Sourcery for this) but it’s safer<br>7) A nice trick to quickly convert struct to NSManagedObject is to use reflection with Mirror. NSManagedObject subclasses from NSObject so it is key value compliant</p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://twitter.com/onmyway133/status/1335815371446759424">https://twitter.com/onmyway133/status/1335815371446759424</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/741&quot;&gt;#741&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Whenever I do Core Data, the &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="core data" scheme="https://onmyway133.github.io/tags/core-data/"/>
    
      <category term="tweet" scheme="https://onmyway133.github.io/tags/tweet/"/>
    
  </entry>
  
  <entry>
    <title>How to form product idea</title>
    <link href="https://onmyway133.github.io/blog/How-to-form-product-idea/"/>
    <id>https://onmyway133.github.io/blog/How-to-form-product-idea/</id>
    <published>2021-01-04T05:44:31.000Z</published>
    <updated>2021-01-04T05:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/740">#740</a></strong></p><p>How to gain product ideas?</p><p>1) Scratch your own itch. If you don’t have any itch to scratch, stop here. This is awkward. Go travelling. Go exploring the world. The world always has problems and needs solution.<br>Image</p><p>2) Build any service, app or website. Along the way you’ll find tons of things you need that and unsolved by existing solutions, and tons of things you can improve upon. </p><p>3) Sign up for some paid newsletters to find ideas. This is the worst. This is like someone browsing through a tatoo catalog. You’re doing things for trend, for money, not for your self drive 👎 </p><p>4) Most product ideas are not that hard, and require little tech skill. There are simple things that many people struggle or can’t do or learn by themselves. They need your help. </p><p>5) Read enough to build the mindset. You don’t need to listen to all podcasts, read all the books, attend all the courses to get started. You’re just procrastinating. </p><p>6) The only constant is “change”. The best time is now. </p><p>7) Does it matter if what you’re about to make has been done by someone else?</p><p>Probably not. You’re the master of your own itch, you know how to solve it your way. Every solution is unique and will be developed in different directions</p><p>8) Idea is veryvery cheap.<br>If someone sherlock your idea, execute it better, provider better customer support, understand the domain better. Isn’t it fair to say they deserve better success than you? </p><p>9) Is this idea worth executing?</p><p>If you ask me, my answer will be NO. Those who are super passionate about their idea will just ignore my advice and do it anyway.</p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://twitter.com/onmyway133/status/1330399823921557507">https://twitter.com/onmyway133/status/1330399823921557507</a></li></ul><hr><p><strong>Updated at</strong> 2021-01-04 06:44:45</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/740&quot;&gt;#740&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How to gain product ideas?&lt;/p&gt;
&lt;p&gt;1)
        
      
    
    </summary>
    
    
    
      <category term="life" scheme="https://onmyway133.github.io/tags/life/"/>
    
      <category term="tweet" scheme="https://onmyway133.github.io/tags/tweet/"/>
    
  </entry>
  
  <entry>
    <title>How to join AppStore Small Business Program</title>
    <link href="https://onmyway133.github.io/blog/How-to-join-AppStore-Small-Business-Program/"/>
    <id>https://onmyway133.github.io/blog/How-to-join-AppStore-Small-Business-Program/</id>
    <published>2021-01-04T05:43:09.000Z</published>
    <updated>2021-01-04T05:43:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/739">#739</a></strong></p><p>New program reduces App Store commission to 15 percent for small businesses earning up to $1 million per year</p><p>1) “earning up to $1 million” means proceeds, not sales. This is what we get after Apple’s cut. “up to” means $999.999<br>2) “if they earned up to $1 million in proceeds during the previous calendar year”. This means that if $1M is surpassed, the standard rate (30%) kicks in for the rest of the year, and also next year.<br>3) If a developer’s business falls below the $1 million threshold in a future calendar year (e.g. 2021), they can requalify for the 15 percent commission the year after (e.g. 2022)<br>4) This is surprising new, follow Apple’s promise in WWDC about changes in Appstore policy. It should be credit to @dhh ‘s fight for hey.com, which somehow affects the decision.<br>5) Some may need to stop generating revenue, by removing from sale, giving away or moving their apps to different distributing platforms to remedy the threshold surpassing.<br>6) Now the question is, how to get to the first $1000 😂 </p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://twitter.com/onmyway133/status/1329406204217593856">https://twitter.com/onmyway133/status/1329406204217593856</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/739&quot;&gt;#739&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New program reduces App Store commission
        
      
    
    </summary>
    
    
    
      <category term="tweet" scheme="https://onmyway133.github.io/tags/tweet/"/>
    
  </entry>
  
  <entry>
    <title>How to deep work</title>
    <link href="https://onmyway133.github.io/blog/How-to-deep-work/"/>
    <id>https://onmyway133.github.io/blog/How-to-deep-work/</id>
    <published>2021-01-04T05:41:17.000Z</published>
    <updated>2021-01-04T05:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/738">#738</a></strong></p><p>Just found out the book Deep Work by Cal Newport and it has some interesting guidelines<br>Here’s a very good summary of the book</p><p><a href="https://www.youtube.com/watch?v=gTaJhjQHcf8&amp;ab_channel=ProductivityGame">https://www.youtube.com/watch?v=gTaJhjQHcf8&amp;ab_channel=ProductivityGame</a></p><ol><li>Put a boundary on distraction. Allow yourself to be distracted at predefined time and with limit</li></ol><p><img src="https://user-images.githubusercontent.com/2284279/103507749-2a64ad00-4e60-11eb-9574-8147767afde7.jpeg" alt="a1"></p><ol start="2"><li>Develop a routine habit. Best is to focus in the early morning as there are no other requests</li></ol><p><img src="https://user-images.githubusercontent.com/2284279/103507768-318bbb00-4e60-11eb-8d26-80877a376360.jpeg" alt="a2"></p><ol start="3"><li>Sleep is crucial. Get enough sleep. Do a complete shutdown in the evening.</li></ol><p><img src="https://user-images.githubusercontent.com/2284279/103507781-37819c00-4e60-11eb-98ee-e68bf16c7db0.jpeg" alt="a3"></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://twitter.com/onmyway133/status/1328795655217836034">https://twitter.com/onmyway133/status/1328795655217836034</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/738&quot;&gt;#738&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just found out the book Deep Work by Cal
        
      
    
    </summary>
    
    
    
      <category term="life" scheme="https://onmyway133.github.io/tags/life/"/>
    
      <category term="tweet" scheme="https://onmyway133.github.io/tags/tweet/"/>
    
  </entry>
  
  <entry>
    <title>How to make tiled image in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-tiled-image-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-tiled-image-in-SwiftUI/</id>
    <published>2021-01-02T21:47:52.000Z</published>
    <updated>2021-01-02T21:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/737">#737</a></strong></p><p>Use <code>resizingMode</code> of <code>.tile</code> with a tile image from <a href="https://www.transparenttextures.com/">https://www.transparenttextures.com/</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">"transparentTile"</span>)</span><br><span class="line">    .resizable(capInsets: .<span class="keyword">init</span>(), resizingMode: .tile)</span><br><span class="line">    .scaleEffect(<span class="number">2</span>)</span><br><span class="line">    .aspectRatio(contentMode: .fit)</span><br><span class="line">    .frame(maxWidth: .infinity, maxHeight: .infinity)</span><br><span class="line">    .clipped()</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-02 22:47:57</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/737&quot;&gt;#737&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;resizingMode&lt;/code&gt; of
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use WebView in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-WebView-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-WebView-in-SwiftUI/</id>
    <published>2021-01-02T20:14:14.000Z</published>
    <updated>2021-01-02T20:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/736">#736</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyWebView</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">URL</span></span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> isLoading: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span><span class="params">()</span></span> -&gt; <span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="type">Coordinator</span>(parent: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">WKWebView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">WKWebView</span>()</span><br><span class="line">        view.navigationDelegate = context.coordinator</span><br><span class="line">        view.load(<span class="type">URLRequest</span>(url: url))</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(<span class="number">_</span> nsView: WKWebView, context: Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>: <span class="title">NSObject</span>, <span class="title">WKNavigationDelegate</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parent: <span class="type">MyWebView</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span>(parent: <span class="type">MyWebView</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.parent = parent</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didCommit navigation: WKNavigation!)</span></span> &#123;</span><br><span class="line">            parent.isLoading = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</span><br><span class="line">            parent.isLoading = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/736&quot;&gt;#736&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use GeometryReader in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-GeometryReader-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-GeometryReader-in-SwiftUI/</id>
    <published>2021-01-01T22:39:18.000Z</published>
    <updated>2021-01-01T22:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/735">#735</a></strong></p><p>From my previous post <a href="https://onmyway133.com/blog/how-to-use-flexible-frame-in-swiftui/">How to use flexible frame in SwiftUI</a> we know that certain views have different frame behaviors. 2 of them are <code>.overlay</code> and <code>GeometryReader</code> that takes up whole size proposed by parent.</p><p>By default <code>GeometryReader</code> takes up whole width and height of parent, and align its content as <code>.topLeading</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.gray)</span><br><span class="line">                .overlay(</span><br><span class="line">                    <span class="type">GeometryReader</span> &#123; geo <span class="keyword">in</span></span><br><span class="line">                        <span class="type">Text</span>(<span class="string">"\(Int(geo.size.width))x\(Int(geo.size.height))"</span>)</span><br><span class="line">                            .bold()</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img width="446" alt="Screenshot 2021-01-02 at 00 37 17" src="https://user-images.githubusercontent.com/2284279/103447949-ac06e000-4c92-11eb-84e7-f03843572aa1.png"><p>To align content center, we can specify frame with <code>geo</code> information</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.gray)</span><br><span class="line">                .overlay(</span><br><span class="line">                    <span class="type">GeometryReader</span> &#123; geo <span class="keyword">in</span></span><br><span class="line">                        <span class="type">Text</span>(<span class="string">"\(Int(geo.size.width))x\(Int(geo.size.height))"</span>)</span><br><span class="line">                            .bold()</span><br><span class="line">                            .frame(width: geo.size.width, height: geo.size.height, alignment: .center)</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is that Text is center aligned</p><img width="485" alt="Screenshot 2021-01-02 at 00 39 13" src="https://user-images.githubusercontent.com/2284279/103447975-f12b1200-4c92-11eb-90ed-dd47f1318795.png"><p>If we were to implement GeometryReader, it would look like this</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GeometryReader</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: (<span class="type">CGSize</span>) -&gt; <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">(proposedSize: CGSize)</span></span> -&gt; <span class="type">CGSize</span> &#123;</span><br><span class="line">        <span class="comment">// Take up whole size proposed by parent</span></span><br><span class="line">        proposedSize</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buildBody</span><span class="params">(calculatedSize: CGSize)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// Pass in the calculated size</span></span><br><span class="line">        content(calculatedSize)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-01 23:42:34</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/735&quot;&gt;#735&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From my previous post &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use flexible frame in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-flexible-frame-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-flexible-frame-in-SwiftUI/</id>
    <published>2021-01-01T21:41:45.000Z</published>
    <updated>2021-01-01T22:25:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/734">#734</a></strong></p><p>In SwiftUI there are fixed frame and flexible frame modifiers.</p><h2 id="Fixed-frame-Positions-this-view-within-an-invisible-frame-with-the-specified-size"><a href="#Fixed-frame-Positions-this-view-within-an-invisible-frame-with-the-specified-size" class="headerlink" title="Fixed frame Positions this view within an invisible frame with the specified size."></a>Fixed frame <a href="https://developer.apple.com/documentation/swiftui/list/frame(width:height:alignment:)">Positions this view within an invisible frame with the specified size.</a></h2><blockquote><p>Use this method to specify a fixed size for a view’s width, height, or both. If you only specify one of the dimensions, the resulting view assumes this view’s sizing behavior in the other dimension.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Ellipse</span>()</span><br><span class="line">        .fill(<span class="type">Color</span>.purple)</span><br><span class="line">        .frame(width: <span class="number">200</span>, height: <span class="number">100</span>)</span><br><span class="line">    <span class="type">Ellipse</span>()</span><br><span class="line">        .fill(<span class="type">Color</span>.blue)</span><br><span class="line">        .frame(height: <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flexible-frame-frame-minWidth-idealWidth-maxWidth-minHeight-idealHeight-maxHeight-alignment"><a href="#Flexible-frame-frame-minWidth-idealWidth-maxWidth-minHeight-idealHeight-maxHeight-alignment" class="headerlink" title="Flexible frame frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)"></a>Flexible frame <a href="https://developer.apple.com/documentation/swiftui/list/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)">frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)</a></h2><p>Read the documentation carefully</p><blockquote><p>Always specify at least one size characteristic when calling this method. Pass nil or leave out a characteristic to indicate that the frame should adopt this view’s sizing behavior, constrained by the other non-nil arguments.</p></blockquote><blockquote><p>The size proposed to this view is the size proposed to the frame, limited by any constraints specified, and with any ideal dimensions specified replacing any corresponding unspecified dimensions in the proposal.</p></blockquote><blockquote><p>If no minimum or maximum constraint is specified in a given dimension, the frame adopts the sizing behavior of its child in that dimension. If both constraints are specified in a dimension, the frame unconditionally adopts the size proposed for it, clamped to the constraints. Otherwise, the size of the frame in either dimension is:</p></blockquote><blockquote><p>If a minimum constraint is specified and the size proposed for the frame by the parent is less than the size of this view, the proposed size, clamped to that minimum.</p></blockquote><blockquote><p>If a maximum constraint is specified and the size proposed for the frame by the parent is greater than the size of this view, the proposed size, clamped to that maximum.</p></blockquote><blockquote><p>Otherwise, the size of this view.</p></blockquote><h2 id="Experiment-with-different-proposed-frame"><a href="#Experiment-with-different-proposed-frame" class="headerlink" title="Experiment with different proposed frame"></a>Experiment with different proposed frame</h2><p>To understand the explanation above, I prepare a Swift playground to examine with 3 scenarios: when both <code>minWidth</code> and <code>maxWidth</code> are provided, when either <code>minWidth</code> or <code>maxWidth</code> is provided. I use <code>width</code> for horizontal dimension but the same applies in vertical direction with <code>height</code>.</p><p>I have a <code>View</code> called <code>Examine</code> to demonstrate flexible frame. Here we have a flexible frame with red border and red text showing its size where you can specify <code>minWidth</code> and <code>maxWidth</code>. </p><p>Inside it is the content with a fixed frame with blue border and blue text showing content size where you can specify <code>contentWidth</code>. Finally there’s <code>parentWidth</code> where we specify proposed width to our red flexible frame.</p><p>The variations for our scenarios are that proposed width falls outside and inside <code>minWidth</code>, <code>contentWidth</code>, and <code>maxWidth</code> range.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Examine</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> parentWidth: <span class="type">CGFloat</span></span><br><span class="line">    <span class="keyword">let</span> contentWidth: <span class="type">CGFloat</span></span><br><span class="line">    <span class="keyword">var</span> minWidth: <span class="type">CGFloat?</span></span><br><span class="line">    <span class="keyword">var</span> maxWidth: <span class="type">CGFloat?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .fill(<span class="type">Color</span>.gray)</span><br><span class="line">            .border(<span class="type">Color</span>.black, width: <span class="number">3</span>)</span><br><span class="line">            .frame(width: contentWidth)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">GeometryReader</span> &#123; geo <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"\(geo.size.width)"</span>)</span><br><span class="line">                        .foregroundColor(<span class="type">Color</span>.blue)</span><br><span class="line">                        .offset(x: <span class="number">0</span>, y: -<span class="number">20</span>)</span><br><span class="line">                        .center()</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            .border(<span class="type">Color</span>.blue, width: <span class="number">2</span>)</span><br><span class="line">            .frame(minWidth: minWidth, maxWidth: maxWidth)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">GeometryReader</span> &#123; geo <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"\(geo.size.width)"</span>)</span><br><span class="line">                        .foregroundColor(<span class="type">Color</span>.red)</span><br><span class="line">                        .center()</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            .border(<span class="type">Color</span>.red, width: <span class="number">1</span>)</span><br><span class="line">            .frame(width: parentWidth, height: <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">center</span><span class="params">()</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                <span class="keyword">self</span></span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Examine_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Both minWidth and maxWidth"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">75</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"proposed size &lt; min width"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">125</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"min width &lt; proposed size &lt; content"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">175</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"min width &lt; content &lt; proposed size"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">300</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"min width &lt; content &lt; max width &lt; proposed size"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Just minWidth"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">75</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">125</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">175</span>, contentWidth: <span class="number">150</span>, minWidth: <span class="number">100</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">175</span>, contentWidth: <span class="number">75</span>, minWidth: <span class="number">100</span>)</span><br><span class="line">                    .help(<span class="string">"content &lt; minWidth"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Just maxWidth"</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">75</span>, contentWidth: <span class="number">150</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">125</span>, contentWidth: <span class="number">150</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">175</span>, contentWidth: <span class="number">150</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                <span class="type">Examine</span>(parentWidth: <span class="number">300</span>, contentWidth: <span class="number">225</span>, maxWidth: <span class="number">200</span>)</span><br><span class="line">                    .help(<span class="string">"content &gt; maxWidth"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h3><p>Here are the results with different variations of specifying  <code>parentWidth</code> aka proposed width.</p><p>🍑 <strong><em>Scenario 1</em></strong>: both minWidth and maxWidth are specified</p><p>Our red flexible frame clamps proposed width between its <code>minWidth</code> and <code>maxWidth</code>, ignoring <code>contentWidth</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redWidth = clamp(minWidth, parentWidth, maxWidth)</span><br></pre></td></tr></table></figure><img width="682" alt="Screenshot 2021-01-01 at 23 30 19" src="https://user-images.githubusercontent.com/2284279/103447291-57ab3280-4c89-11eb-9779-99c34162cf56.png"><p>🍅 <strong><em>Scenario 2</em></strong>: only minWidth is specified</p><p>Our red flexible frame clamps proposed width between its <code>minWidth</code> and <code>contentWidth</code>. In case <code>content</code> is less than <code>minWidth</code>, then final width is <code>minWidth</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redWidth = clamp(minWidth, parentWidth, contentWidth)</span><br></pre></td></tr></table></figure><img width="668" alt="Screenshot 2021-01-01 at 23 51 46" src="https://user-images.githubusercontent.com/2284279/103447491-50395880-4c8c-11eb-9395-d0b4b8e3faa1.png"><p>🍏 <strong><em>Scenario 3</em></strong>: only maxWidth is specified</p><p>Our red flexible frame clamps proposed width between its <code>contentWidth</code> and <code>maxWidth</code>. In case <code>content</code> is more than <code>maxWidth</code>, then  final width is <code>maxWidth</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redWidth = clamp(contentWidth, parentWidth, maxWidth)</span><br></pre></td></tr></table></figure><img width="675" alt="Screenshot 2021-01-01 at 23 52 27" src="https://user-images.githubusercontent.com/2284279/103447500-69420980-4c8c-11eb-86c8-db15d95c0829.png"><h2 id="What-are-idealWidth-and-idealHeight"><a href="#What-are-idealWidth-and-idealHeight" class="headerlink" title="What are idealWidth and idealHeight"></a>What are idealWidth and idealHeight</h2><p>In SwiftUI, view takes proposed frame from its parent, then proposes its to its child, and reports the size it wants from it’s child and its proposed frame from parent. The reported frame is the final frame used by that view.</p><p>When we use <code>.frame</code> modifier, SwiftUI does not changes the frame of that view directly. Instead it creates a container around that view.</p><p>There are 4 kinds of frame behavior depending on which View we are using. Some have mixed behavior.</p><ul><li>Sum up frames from its children then report the final frame. For example <code>HStack</code>, <code>VStack</code></li><li>Merely use the proposed frame. For example <code>GeometryReader</code>, <code>.overlay</code>, <code>Rectangle</code></li><li>Use more space than proposed. For example texts with <code>fixedSize</code></li><li>Use only space needed for its content and respect proposed frame as max</li></ul><h3 id="Fix-the-size-to-its-ideal-size"><a href="#Fix-the-size-to-its-ideal-size" class="headerlink" title="Fix the size to its ideal size"></a>Fix the size to its ideal size</h3><p>Some View like <code>Text</code> or <code>Image</code> has intrinsic content size, means it has implicit <code>idealWidth</code> and <code>idealHeight</code>. Some like <code>Rectangle</code> we need to explicit set <code>.frame(idealWidth: idealHeight)</code>. And these ideal width and height are only applied if we specify <code>fixedSize</code></p><p>To understand this, let’s read <a href="https://developer.apple.com/documentation/swiftui/view/fixedsize()">fixedSize</a></p><blockquote><p>Fixes this view at its ideal size.<br>During the layout of the view hierarchy, each view proposes a size to each child view it contains. If the child view doesn’t need a fixed size it can accept and conform to the size offered by the parent.<br>For example, a Text view placed in an explicitly sized frame wraps and truncates its string to remain within its parent’s bounds:</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">"A single line of text, too long to fit in a box."</span>)</span><br><span class="line">    .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">    .border(<span class="type">Color</span>.gray)</span><br></pre></td></tr></table></figure><img width="382" alt="Screenshot 2021-01-02 at 00 15 14" src="https://user-images.githubusercontent.com/2284279/103447744-97751880-4c8f-11eb-93a0-9a8ff96024f1.png"><blockquote><p>The fixedSize() modifier can be used to create a view that maintains the ideal size of its children both dimensions:</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">"A single line of text, too long to fit in a box."</span>)</span><br><span class="line">    .fixedSize()</span><br><span class="line">    .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">    .border(<span class="type">Color</span>.gray)</span><br></pre></td></tr></table></figure><img width="523" alt="Screenshot 2021-01-02 at 00 16 11" src="https://user-images.githubusercontent.com/2284279/103447755-ba9fc800-4c8f-11eb-93d8-1bbe1dfd4f3c.png"><blockquote><p>You can think of fixedSize() as the creation of a counter proposal to the view size proposed to a view by its parent. The ideal size of a view, and the specific effects of fixedSize() depends on the particular view and how you have configured it.</p></blockquote><p>To view this in playground, I have prepared this snippet</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Text_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">16</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"A single line of text, too long to fit in a box."</span>)</span><br><span class="line">                .fixedSize()</span><br><span class="line">                .border(<span class="type">Color</span>.red)</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">                .border(<span class="type">Color</span>.gray)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(width: <span class="number">500</span>, height: <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we can see that our canvas is 500x500, and the <code>Text</code> grows outside its parent frame 200x200</p><img width="666" alt="Screenshot 2021-01-02 at 00 17 29" src="https://user-images.githubusercontent.com/2284279/103447779-e8850c80-4c8f-11eb-9126-65d4da3e28ed.png"><h3 id="Play-with-Rectangle"><a href="#Play-with-Rectangle" class="headerlink" title="Play with Rectangle"></a>Play with Rectangle</h3><p>Remember that shapes like <code>Rectangle</code> takes up all the proposed size. When we explicitly specify <code>fixedSize</code>, the<code>idealWidth</code> and <code>idealHeight</code> are used.</p><p>Here I have 3 rectangle</p><p>🍎 Red: There are no ideal size explicitly specified, so SwiftUI uses a magic number <code>10</code> as the size<br>🍏 Green: We specify frame directly and no idealWidth, idealHeight and no fixedSize, so this rectangle takes up full frame<br>🧊 Blue: The outer gray box has height 50, but this rectangle uses <code>idealWidth</code> and <code>idealHeight</code> of 200 because we specify <code>fixedSize</code> </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">16</span>) &#123;</span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.red)</span><br><span class="line">                .fixedSize()</span><br><span class="line"></span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.green)</span><br><span class="line">                .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.blue)</span><br><span class="line">                .frame(idealWidth: <span class="number">200</span>, idealHeight: <span class="number">200</span>)</span><br><span class="line">                .fixedSize(horizontal: <span class="literal">true</span>, vertical: <span class="literal">true</span>)</span><br><span class="line">                .frame(height: <span class="number">50</span>)</span><br><span class="line">                .border(<span class="type">Color</span>.gray)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(width: <span class="number">500</span>, height: <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img width="613" alt="Screenshot 2021-01-02 at 00 23 29" src="https://user-images.githubusercontent.com/2284279/103447838-be801a00-4c90-11eb-85d6-eff53ecd987e.png"><hr><p><strong>Updated at</strong> 2021-01-01 23:25:08</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/734&quot;&gt;#734&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In SwiftUI there are fixed frame and
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
      <category term="featured" scheme="https://onmyway133.github.io/tags/featured/"/>
    
  </entry>
  
</feed>
