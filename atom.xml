<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2021-02-25T21:42:37.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to listen to remote changes in CloudKit CoreData</title>
    <link href="https://onmyway133.github.io/blog/How-to-listen-to-remote-changes-in-CloudKit-CoreData/"/>
    <id>https://onmyway133.github.io/blog/How-to-listen-to-remote-changes-in-CloudKit-CoreData/</id>
    <published>2021-02-25T21:42:08.000Z</published>
    <updated>2021-02-25T21:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/783">#783</a></strong></p><h2 id="Remove-chane-notification"><a href="#Remove-chane-notification" class="headerlink" title="Remove chane notification"></a>Remove chane notification</h2><p>Read <a href="https://developer.apple.com/documentation/coredata/consuming_relevant_store_changes">Consuming Relevant Store Changes</a></p><blockquote><p>If the import happens through a batch operation, the save to the store doesn’t generate an NSManagedObjectContextDidSave notification, and the view misses these relevant updates. Alternatively, the background context may save changes to the store that don’t affect the current view—for example, inserting, modifying, or deleting Shape objects. These changes do generate context save events, so your view context processes them even though it doesn’t need to.</p></blockquote><p>Also, the doc mention <code>NSPersistentStoreRemoteChangeNotificationOptionKey</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> remoteChangeKey = <span class="string">"NSPersistentStoreRemoteChangeNotificationOptionKey"</span></span><br><span class="line">        description?.setOption(<span class="literal">true</span> <span class="keyword">as</span> <span class="type">NSNumber</span>,</span><br><span class="line">                                   forKey: remoteChangeKey)</span><br><span class="line"></span><br><span class="line"><span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(</span><br><span class="line">    <span class="keyword">self</span>,</span><br><span class="line">    selector: #selector(fetchChanges),</span><br><span class="line">    name: <span class="type">NSNotification</span>.<span class="type">Name</span>(</span><br><span class="line">        rawValue: <span class="string">"NSPersistentStoreRemoteChangeNotification"</span>), </span><br><span class="line">        object: persistentContainer.persistentStoreCoordinator</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>In the app, the value of <code>NSPersistentStoreRemoteChangeNotificationPostOptionKey</code> is <code>NSPersistentStoreRemoteChangeNotificationOptionKey</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> container = <span class="type">NSPersistentCloudKitContainer</span>(name: name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> description = container.persistentStoreDescriptions.first <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">assertionFailure</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">description.setOption(</span><br><span class="line">    <span class="literal">true</span> <span class="keyword">as</span> <span class="type">NSNumber</span>,</span><br><span class="line">    forKey: <span class="type">NSPersistentHistoryTrackingKey</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">description.setOption(</span><br><span class="line">    <span class="literal">true</span> <span class="keyword">as</span> <span class="type">NSNumber</span>,</span><br><span class="line">    forKey: <span class="type">NSPersistentStoreRemoteChangeNotificationPostOptionKey</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-02-25 22:42:37</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/783&quot;&gt;#783&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Remove-chane-notification&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to listen to Published outside of SwiftUI view</title>
    <link href="https://onmyway133.github.io/blog/How-to-listen-to-Published-outside-of-SwiftUI-view/"/>
    <id>https://onmyway133.github.io/blog/How-to-listen-to-Published-outside-of-SwiftUI-view/</id>
    <published>2021-02-25T20:56:27.000Z</published>
    <updated>2021-02-25T20:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/782">#782</a></strong></p><p>Use <code>$</code> to access <code>Publisher</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> showsSideWindow: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anyCancellables = <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line">store.$showsSideWindow</span><br><span class="line">    .removeDuplicates()</span><br><span class="line">    .throttle(<span class="keyword">for</span>: <span class="number">0.2</span>, scheduler: <span class="type">RunLoop</span>.main, latest: <span class="literal">true</span>)</span><br><span class="line">    .receive(on: <span class="type">RunLoop</span>.main)</span><br><span class="line">    .sink(receiveValue: &#123; shows <span class="keyword">in</span></span><br><span class="line">        preferenceManager.reloadPosition(shows: shows)</span><br><span class="line">    &#125;)</span><br><span class="line">    .store(<span class="keyword">in</span>: &amp;anyCancellables)</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-02-25 21:56:42</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/782&quot;&gt;#782&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;$&lt;/code&gt; to access
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to filter non numeric digit from String in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-filter-non-numeric-digit-from-String-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-filter-non-numeric-digit-from-String-in-Swift/</id>
    <published>2021-02-25T07:51:07.000Z</published>
    <updated>2021-02-25T07:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/781">#781</a></strong></p><p>This sounds like an easy task, but a quick search on Stackoverflow results in this with highest votes <a href="https://stackoverflow.com/questions/29971505/filter-non-digits-from-string">https://stackoverflow.com/questions/29971505/filter-non-digits-from-string</a></p><h2 id="CharacterSet-decimalDigits-contains-more-than-just-digits"><a href="#CharacterSet-decimalDigits-contains-more-than-just-digits" class="headerlink" title="CharacterSet.decimalDigits contains more than just digits"></a>CharacterSet.decimalDigits contains more than just digits</h2><p>This splits a string by inverted set of <code>decimalDigits</code> and join them back.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> digits: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> components(separatedBy: <span class="type">CharacterSet</span>.decimalDigits.inverted)</span><br><span class="line">            .joined()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reading <a href="https://developer.apple.com/documentation/foundation/nscharacterset/1408239-decimaldigits">decimalDigits</a></p><blockquote><p>Informally, this set is the set of all characters used to represent the decimal values 0 through 9. These characters include, for example, the decimal digits of the Indic scripts and Arabic.</p></blockquote><p>So <code>decimalDigits</code> does not only contain digits, but also some scripts in other languages. For normal cases this should not be a problem. As <a href="https://ravron.com/2019/07/how-many-decimal-digits-are-there-anyways/">How many decimal digits are there, anyways?</a> there are 610 valid characters in <code>CharacterSet.decimalDigits</code>. So be aware</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="type">CharacterSet</span>.decimalDigits</span><br><span class="line"></span><br><span class="line"><span class="comment">// U+0031 DIGIT ONE</span></span><br><span class="line">s.<span class="built_in">contains</span>(<span class="string">"1"</span>)  <span class="comment">// true as expected</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// U+1D7D9 MATHEMATICAL DOUBLE-STRUCK DIGIT ONE</span></span><br><span class="line">s.<span class="built_in">contains</span>(<span class="string">"𝟙"</span>)  <span class="comment">// true!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// U+0967 DEVANAGARI DIGIT ONE</span></span><br><span class="line">s.<span class="built_in">contains</span>(<span class="string">"१"</span>)  <span class="comment">// true!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// U+1811 MONGOLIAN DIGIT ONE</span></span><br><span class="line">s.<span class="built_in">contains</span>(<span class="string">"᠑"</span>)  <span class="comment">// true!</span></span><br></pre></td></tr></table></figure><h2 id="Trimming"><a href="#Trimming" class="headerlink" title="Trimming"></a>Trimming</h2><p>Another method is trimmingCharacters. Note that this removes only characters at the start and end of the string.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.trimmingCharacters(<span class="keyword">in</span>: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"0123456789"</span>).inverted)</span><br></pre></td></tr></table></figure><h2 id="Just-filter"><a href="#Just-filter" class="headerlink" title="Just filter"></a>Just filter</h2><p>A boring but correct solution is to filter characters anywhere in the string.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="built_in">filter</span>(<span class="string">"0123456789"</span>.<span class="built_in">contains</span>)</span><br></pre></td></tr></table></figure><p>This is more performant than <code>components</code> then <code>join</code> below</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.components(separatedBy: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"0123456789"</span>).inverted).joined()</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-02-25 08:52:11</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/781&quot;&gt;#781&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This sounds like an easy task, but a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to build container view in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-build-container-view-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-build-container-view-in-SwiftUI/</id>
    <published>2021-02-24T20:13:56.000Z</published>
    <updated>2021-02-24T20:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/780">#780</a></strong></p><p>To make a container view that accepts child content, we use <code>ViewBuilder</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContainerView</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(@<span class="type">ViewBuilder</span> content: () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content = content()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From Swift 5.4, it can synthesize the <code>init</code>, so we can declare <code>resultBuilder</code> for stored property</p><pre><code class="swift"><span class="class"><span class="keyword">struct</span> <span class="title">AwesomeContainerView</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>{    @<span class="type">ViewBuilder</span>    <span class="keyword">let</span> content: <span class="type">Content</span>    <span class="keyword">var</span> body: some <span class="type">View</span> {        content    }}</code></pre><hr><p><strong>Updated at</strong> 2021-02-24 21:22:49</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/780&quot;&gt;#780&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To make a container view that accepts
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to tune performance with ButtonBehavior in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-tune-performance-with-ButtonBehavior-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-tune-performance-with-ButtonBehavior-in-SwiftUI/</id>
    <published>2021-02-24T08:12:22.000Z</published>
    <updated>2021-02-24T09:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/779">#779</a></strong></p><p>With Xcode 12.4, macOS 11.0 app. Every time we switch the system dark and light mode, the CPU goes up to 100%. Instruments show that there’s an increasing number of <code>ButtonBehavior</code></p><img width="1792" alt="Screenshot 2021-02-24 at 10 12 05" src="https://user-images.githubusercontent.com/2284279/108977356-bfc63580-7688-11eb-9414-075670b76a4f.png"><h3 id="Suspect-State-in-a-row-in-LazyVStack"><a href="#Suspect-State-in-a-row-in-LazyVStack" class="headerlink" title="Suspect State in a row in LazyVStack"></a>Suspect State in a row in LazyVStack</h3><p>Every cell has its own toggle state</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ToggleState</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> general</span><br><span class="line">        <span class="keyword">case</span> request</span><br><span class="line">        <span class="keyword">case</span> response</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> item: <span class="type">Item</span></span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> toggleState: <span class="type">ToggleState</span> = .general</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toggleButton</span><span class="params">(text: String, state: ToggleState)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(action: &#123; <span class="keyword">self</span>.toggleState = state &#125;) &#123;</span><br><span class="line">            <span class="type">Text</span>(text)</span><br><span class="line">                .foregroundColor(state == toggleState ? <span class="type">Color</span>.label : <span class="type">Color</span>.secondary)</span><br><span class="line">                .fontWeight(state == toggleState ? .bold : .regular)</span><br><span class="line">        &#125;</span><br><span class="line">        .buttonStyle(<span class="type">BorderlessButtonStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Removing the buttons fix the problem. The workaround is to use <code>Text</code> with <code>onTapGesture</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(text)</span><br><span class="line">    .foregroundColor(state == toggleState ? <span class="type">Color</span>.label : <span class="type">Color</span>.secondary)</span><br><span class="line">    .fontWeight(state == toggleState ? .bold : .regular)</span><br><span class="line">    .onTapGesture &#123;</span><br><span class="line">        <span class="keyword">self</span>.toggleState = state</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-02-24 10:10:41</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/779&quot;&gt;#779&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With Xcode 12.4, macOS 11.0 app. Every
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use GroupBox in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-GroupBox-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-GroupBox-in-SwiftUI/</id>
    <published>2021-02-23T20:27:59.000Z</published>
    <updated>2021-02-23T21:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/778">#778</a></strong></p><p>For now using <code>GroupBox</code> has these issues in macOS</p><ul><li>Prevents dragging scroll indicator to scroll</li><li>Switch from light to dark mode may cause 100% CPU usage</li></ul><hr><p><strong>Updated at</strong> 2021-02-23 22:02:25</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/778&quot;&gt;#778&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For now using &lt;code&gt;GroupBox&lt;/code&gt; has
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to suppress selector warning in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-suppress-selector-warning-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-suppress-selector-warning-in-Swift/</id>
    <published>2021-02-18T09:11:04.000Z</published>
    <updated>2021-02-18T09:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/777">#777</a></strong></p><p>Sometimes we need to use dynamic selector and that triggers warning in Swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Selector</span>(<span class="string">"updateWithCount:"</span>) <span class="comment">// Use '#selector' instead of explicitly constructing a 'Selector'</span></span><br></pre></td></tr></table></figure><p>In ObjC we can use clang macro to suppress, like below</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma clang diagnostic push</span></span><br><span class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Wdeprecated-implementations"</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) deprecated_objc_method_override &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma clang diagnostic pop</span></span><br></pre></td></tr></table></figure><p>But in Swift, we can just use a dummy NSObject that has the needed methods, like</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dummy</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(<span class="built_in">count</span>: Int)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>#selector</code> is just a safer way to construct Selector, they all yield same result as String</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Selector</span>(<span class="string">"updateWithCount:"</span>) <span class="comment">// updateWithCount:</span></span><br><span class="line">#selector(<span class="type">Dummy</span>.update(<span class="built_in">count</span>:)) <span class="comment">// updateWithCount:</span></span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-02-18 10:11:13</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/777&quot;&gt;#777&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes we need to use dynamic selector
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple search bar in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-search-bar-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-search-bar-in-SwiftUI/</id>
    <published>2021-02-17T19:25:20.000Z</published>
    <updated>2021-02-17T19:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/776">#776</a></strong></p><p>We need to use a custom Binding to trigger <code>onChange</code> as <code>onEditingChanged</code> is only called when the user selects the <code>textField</code>, and <code>onCommit</code> is only called when return or done button on keyboard is tapped.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> EasySwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SearchBar</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> searchText: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> onChange: () -&gt; <span class="type">Void</span></span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> showsCancelButton: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">HStack</span> &#123;</span><br><span class="line">            textField</span><br><span class="line">            cancelButton</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> searchTextBinding: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;(<span class="keyword">get</span>: &#123;</span><br><span class="line">            searchText</span><br><span class="line">        &#125;, <span class="keyword">set</span>: &#123; newValue <span class="keyword">in</span></span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                searchText = newValue</span><br><span class="line">                onChange()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> textField: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.magnifyingglass.rawValue)</span><br><span class="line"></span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Search"</span>, text: searchTextBinding, onEditingChanged: &#123; isEditing <span class="keyword">in</span></span><br><span class="line">                withAnimation &#123;</span><br><span class="line">                    <span class="keyword">self</span>.showsCancelButton = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                onChange()</span><br><span class="line">            &#125;, onCommit: &#123;</span><br><span class="line">                <span class="comment">// No op</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .foregroundColor(.primary)</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span>(action: &#123;</span><br><span class="line">                <span class="keyword">self</span>.searchText = <span class="string">""</span></span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.xmarkCircleFill.rawValue)</span><br><span class="line">                    .opacity(searchText == <span class="string">""</span> ? <span class="number">0</span> : <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="type">EdgeInsets</span>(top: <span class="number">8</span>, leading: <span class="number">6</span>, bottom: <span class="number">8</span>, trailing: <span class="number">6</span>))</span><br><span class="line">        .foregroundColor(.secondary)</span><br><span class="line">        .background(<span class="type">Color</span>(.systemBackground))</span><br><span class="line">        .cornerRadius(<span class="number">10.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="type">ViewBuilder</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> cancelButton: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> showsCancelButton  &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Cancel"</span>) &#123;</span><br><span class="line">                <span class="type">UIApplication</span>.shared.endEditing(<span class="literal">true</span>)</span><br><span class="line">                withAnimation &#123;</span><br><span class="line">                    <span class="keyword">self</span>.searchText = <span class="string">""</span></span><br><span class="line">                    <span class="keyword">self</span>.showsCancelButton = <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                onChange()</span><br><span class="line">            &#125;</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>(.systemBlue))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">endEditing</span><span class="params">(<span class="number">_</span> force: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.windows</span><br><span class="line">            .<span class="built_in">filter</span>&#123;$<span class="number">0</span>.isKeyWindow&#125;</span><br><span class="line">            .first?</span><br><span class="line">            .endEditing(force)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/776&quot;&gt;#776&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need to use a custom Binding to
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to fix share and action extension not showing up in iOS 14</title>
    <link href="https://onmyway133.github.io/blog/How-to-fix-share-and-action-extension-not-showing-up-in-iOS-14/"/>
    <id>https://onmyway133.github.io/blog/How-to-fix-share-and-action-extension-not-showing-up-in-iOS-14/</id>
    <published>2021-02-17T18:30:50.000Z</published>
    <updated>2021-02-17T19:49:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/775">#775</a></strong></p><p>My share sheet and action extension not showing up in iOS 14, built-in Xcode 12.3. The solution is to restart test device, and it shows up again.</p><p>Also make sure your extension targets have the same version and build number, and same deployment target</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionAttributes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionActivationRule<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionActivationDictionaryVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>2<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionActivationSupportsText<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionActivationSupportsWebURLWithMaxCount<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionActivationSupportsWebPageWithMaxCount<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionJavaScriptPreprocessingFile<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>MyPreprocessor<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionActivationUsesStrictMatching<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>2<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-02-17 20:49:49</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/775&quot;&gt;#775&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My share sheet and action extension not
        
      
    
    </summary>
    
    
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>How to add home screen quick action in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-home-screen-quick-action-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-home-screen-quick-action-in-SwiftUI/</id>
    <published>2021-02-10T05:25:27.000Z</published>
    <updated>2021-02-10T05:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/774">#774</a></strong></p><p>Start by defining your quick actions. You can use <code>UIApplicationShortcutIcon(type:)</code> for predefined icons, or use <code>UIApplicationShortcutIcon(systemImageName:)</code> for SFSymbol</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">QuickAction</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> readPasteboard</span><br><span class="line">    <span class="keyword">case</span> clear</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> shortcutItem: <span class="type">UIApplicationShortcutItem</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .readPasteboard:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UIApplicationShortcutItem</span>(</span><br><span class="line">                type: rawValue,</span><br><span class="line">                localizedTitle: <span class="string">"Read Pasteboard"</span>,</span><br><span class="line">                localizedSubtitle: <span class="string">""</span>,</span><br><span class="line">                icon: <span class="type">UIApplicationShortcutIcon</span>(type: .add),</span><br><span class="line">                userInfo: <span class="literal">nil</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">case</span> .clear:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UIApplicationShortcutItem</span>(</span><br><span class="line">                type: rawValue,</span><br><span class="line">                localizedTitle: <span class="string">"Clear Pasteboard"</span>,</span><br><span class="line">                localizedSubtitle: <span class="string">""</span>,</span><br><span class="line">                icon: <span class="type">UIApplicationShortcutIcon</span>(systemImageName: <span class="type">SFSymbol</span>.wind.rawValue),</span><br><span class="line">                userInfo: <span class="literal">nil</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Add a service to store selected quick action. I usually make this conform to <code>ObservableObject</code> to be able to bind to SwiftUI views later</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickActionService</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> shortcutItem: <span class="type">UIApplicationShortcutItem?</span></span><br></pre></td></tr></table></figure><p>Expose AppDelegate and SceneDelegate to your SwiftUI <code>App</code>. Listen to <code>scenePhase</code> to add dynamic items</p><p>From <a href="https://developer.apple.com/documentation/uikit/menus_and_shortcuts/add_home_screen_quick_actions">Define Dynamic Quick Actions</a></p><blockquote><p>Set dynamic screen quick actions at any point, but the sample sets them in the sceneWillResignActive(_:) function of the scene delegate. During the transition to a background state is a good time to update any dynamic quick actions, because the system executes this code before the user returns to the Home Screen.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PastePaliOSApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    @<span class="type">UIApplicationDelegateAdaptor</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">var</span> appDelegate</span><br><span class="line">    @<span class="type">Environment</span>(\.scenePhase)</span><br><span class="line">    <span class="keyword">var</span> scenePhase</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            main</span><br><span class="line">        &#125;</span><br><span class="line">        .onChange(of: scenePhase) &#123; scenePhase <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> scenePhase &#123;</span><br><span class="line">            <span class="keyword">case</span> .background:</span><br><span class="line">                addDynamicQuickActions()</span><br><span class="line">            <span class="keyword">case</span> .active:</span><br><span class="line">                <span class="type">QuickActionService</span>.shared.perform()</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">addDynamicQuickActions</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">UIApplication</span>.shared.shortcutItems = [</span><br><span class="line">            <span class="type">QuickAction</span>.readPasteboard.shortcutItem,</span><br><span class="line">            <span class="type">QuickAction</span>.clear.shortcutItem</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Quick actions are notified in 2 cases</p><ul><li>If the app isn’t already loaded, it’s launched and passes details of the shortcut item in through the <code>connectionOptions</code> parameter of the <code>scene(_:willConnectTo:options:)</code> function in AppDelegate</li><li>If your app is already loaded, the system calls the <code>windowScene(_:performActionFor:completionHandler:)</code> function of your SceneDelegate</li></ul><p>Therefore we need to handle both cases.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">        configurationForConnecting connectingSceneSession: UISceneSession,</span></span></span><br><span class="line"><span class="function"><span class="params">        options: UIScene.ConnectionOptions</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> -&gt; <span class="type">UISceneConfiguration</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> shortcutItem = options.shortcutItem &#123;</span><br><span class="line">            <span class="type">QuickActionService</span>.shared.shortcutItem = shortcutItem</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> sceneConfiguration = <span class="type">UISceneConfiguration</span>(</span><br><span class="line">            name: <span class="string">"Default"</span>,</span><br><span class="line">            sessionRole: connectingSceneSession.role</span><br><span class="line">        )</span><br><span class="line">        sceneConfiguration.delegateClass = <span class="type">SceneDelegate</span>.<span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sceneConfiguration</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">windowScene</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> windowScene: UIWindowScene,</span></span></span><br><span class="line"><span class="function"><span class="params">        performActionFor shortcutItem: UIApplicationShortcutItem,</span></span></span><br><span class="line"><span class="function"><span class="params">        completionHandler: @escaping <span class="params">(Bool)</span></span></span> -&gt; <span class="type">Void</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="type">QuickActionService</span>.shared.shortcutItem = shortcutItem</span><br><span class="line">        completionHandler(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><p>For more please consult official Apple docs and design</p><ul><li><a href="https://developer.apple.com/documentation/uikit/menus_and_shortcuts/add_home_screen_quick_actions">Add Home Screen Quick Actions</a></li><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/home-screen-actions/">HIG - Home Screen Quick Actions</a></li></ul><hr><p><strong>Updated at</strong> 2021-02-10 06:43:19</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/774&quot;&gt;#774&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Start by defining your quick actions. You
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use EquatableView in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-EquatableView-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-EquatableView-in-SwiftUI/</id>
    <published>2021-02-08T18:40:48.000Z</published>
    <updated>2021-02-08T18:40:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/773">#773</a></strong></p><p>From <a href="https://twitter.com/jsh8080/status/1206617106160246784">John Harper ‘s tweet</a></p><blockquote><p>SwiftUI assumes any Equatable.== is a true equality check, so for POD views it compares each field directly instead (via reflection). For non-POD views it prefers the view’s == but falls back to its own field compare if no ==. EqView is a way to force the use of ==.</p></blockquote><blockquote><p>When it does the per-field comparison the same rules are applied recursively to each field (to choose direct comparison or == if defined). (POD = plain data, see Swift’s _isPOD() function.)</p></blockquote><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://swiftui-lab.com/equatableview/">https://swiftui-lab.com/equatableview/</a></li><li><a href="https://swiftwithmajid.com/2020/01/22/optimizing-views-in-swiftui-using-equatableview/">https://swiftwithmajid.com/2020/01/22/optimizing-views-in-swiftui-using-equatableview/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/773&quot;&gt;#773&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to add new property in Codable struct in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-new-property-in-Codable-struct-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-new-property-in-Codable-struct-in-SwiftUI/</id>
    <published>2021-02-08T18:34:20.000Z</published>
    <updated>2021-02-08T18:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/772">#772</a></strong></p><p>I use Codable structs in my apps for preferences, and bind them to SwiftUI views. If we add new properties to existing Codable, it can’t decode with old saved json as we require new properties. We can either do cutom decoding with container, but this can result in lots more code and mistakes if we have many properties inside our struct.</p><p>The quick workaround is to declare new properties as optional, and use a computed property to wrap that. The good news is Binding works with computed properties too, from the outside all looks like struct properties to SwiftUI</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Preference</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _redacts: <span class="type">Bool?</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> redacts: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; _redacts ?? <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _redacts = newValue &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/772&quot;&gt;#772&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I use Codable structs in my apps for
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to show close button in NSTextField in AppKit</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-close-button-in-NSTextField-in-AppKit/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-close-button-in-NSTextField-in-AppKit/</id>
    <published>2021-02-06T22:58:36.000Z</published>
    <updated>2021-02-06T22:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/771">#771</a></strong></p><p>Use <code>NSSearchField</code> instead</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/771&quot;&gt;#771&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;NSSearchField&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to handle escape in NSTextField in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-escape-in-NSTextField-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-escape-in-NSTextField-in-SwiftUI/</id>
    <published>2021-02-06T21:23:02.000Z</published>
    <updated>2021-02-06T21:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/770">#770</a></strong></p><p>Handle <code>cancelOperation</code> somewhere up in responder chain</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> keyHandler = <span class="type">KeyHandler</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">cancelOperation</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.cancelOperation(sender)</span><br><span class="line">        keyHandler.onEvent(.esc)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/770&quot;&gt;#770&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Handle &lt;code&gt;cancelOperation&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to fit ScrollView to content in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-fit-ScrollView-to-content-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-fit-ScrollView-to-content-in-SwiftUI/</id>
    <published>2021-02-06T19:54:05.000Z</published>
    <updated>2021-02-06T19:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/769">#769</a></strong></p><p>If we place <code>ScrollView</code> inside HStack or VStack, it takes all remaining space. To fit ScrollView to its content, we need to get its content size and constrain ScrollView size.</p><p>Use a <code>GeometryReader</code> as Scrollview content background, and get the local frame</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HSearchBar</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> scrollViewContentSize: <span class="type">CGSize</span> = .zero</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            searchButton</span><br><span class="line">            <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="type">HStack</span>(spacing: <span class="number">12</span>) &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(store.collections) &#123; collection <span class="keyword">in</span></span><br><span class="line">                        collectionCell(collection)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                .background(</span><br><span class="line">                    <span class="type">GeometryReader</span> &#123; geo -&gt; <span class="type">Color</span> <span class="keyword">in</span></span><br><span class="line">                        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                            scrollViewContentSize = geo.size</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="type">Color</span>.clear</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            .frame(</span><br><span class="line">                maxWidth: scrollViewContentSize.width</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/769&quot;&gt;#769&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If we place &lt;code&gt;ScrollView&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to show modal window in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-modal-window-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-modal-window-in-SwiftUI-for-macOS/</id>
    <published>2021-02-03T09:57:43.000Z</published>
    <updated>2021-02-03T09:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/768">#768</a></strong></p><p>Use custom <code>NSWindow</code>, set <code>level</code> in <code>becomeKey</code> and call <code>NSApp.runModal</code> to show modal</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ModalWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">becomeKey</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.becomeKey()</span><br><span class="line"></span><br><span class="line">        level = .statusBar</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.close()</span><br><span class="line"></span><br><span class="line">        <span class="type">NSApp</span>.stopModal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> window = <span class="type">ModalWindow</span>(</span><br><span class="line">    contentRect: .zero,</span><br><span class="line">    styleMask: [.titled, .closable],</span><br><span class="line">    backing: .buffered,</span><br><span class="line">    <span class="keyword">defer</span>: <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">window.titlebarAppearsTransparent = <span class="literal">true</span></span><br><span class="line">window.title = <span class="string">"Manage collections"</span></span><br><span class="line"></span><br><span class="line">window.center()</span><br><span class="line">window.isReleasedWhenClosed = <span class="literal">false</span></span><br><span class="line"><span class="keyword">self</span>.window = window</span><br><span class="line"><span class="keyword">let</span> view = <span class="type">CollectionSettingsView</span>(store: <span class="type">Store</span>.shared)</span><br><span class="line">    .padding()</span><br><span class="line">    .frame(</span><br><span class="line">        width: <span class="type">Constants</span>.settingsViewWidth,</span><br><span class="line">        height: <span class="number">350</span>,</span><br><span class="line">        alignment: .topLeading</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">let</span> hosting = <span class="type">NSHostingView</span>(rootView: view)</span><br><span class="line">window.contentView = hosting</span><br><span class="line">hosting.autoresizingMask = [.width, .height]</span><br><span class="line"></span><br><span class="line"><span class="type">NSApp</span>.runModal(<span class="keyword">for</span>: window)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/768&quot;&gt;#768&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use custom &lt;code&gt;NSWindow&lt;/code&gt;, set
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use ViewBuilder in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-ViewBuilder-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-ViewBuilder-in-SwiftUI/</id>
    <published>2021-02-02T12:08:31.000Z</published>
    <updated>2021-02-02T12:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/767">#767</a></strong></p><p>SwiftUI ‘s <a href="https://developer.apple.com/documentation/swiftui/viewbuilder">ViewBuilder</a> is a custom parameter attribute that constructs views from closures.</p><p>It is available in <code>body</code> and most SwiftUI modifiers</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Body</span> : <span class="type">View</span></span><br><span class="line">    @<span class="type">ViewBuilder</span> <span class="keyword">var</span> body: <span class="type">Self</span>.<span class="type">Body</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">contextMenu</span>&lt;MenuItems&gt;<span class="params">(@ViewBuilder menuItems: <span class="params">()</span></span></span> -&gt; <span class="type">MenuItems</span>) -&gt; some <span class="type">View</span> <span class="keyword">where</span> <span class="type">MenuItems</span> : <span class="type">View</span></span><br></pre></td></tr></table></figure><p>In these <code>ViewBuilder</code> enabled places we can perform conditional logic to construct views. For example here in our SampleView, we have <code>switch</code> statement in <code>body</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SampleView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> top, bottom, <span class="keyword">left</span>, <span class="keyword">right</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> position: <span class="type">Position</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> position &#123;</span><br><span class="line">        <span class="keyword">case</span> .top:</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.person.rawValue)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="type">EmptyView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> profile: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.person.rawValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ViewBuilder</code> applies to both property and function. If we want to have the same logic style as in <code>body</code> in our custom property or methods, we can annotate with <code>ViewBuilder</code>. This works like magic, SwiftUI can determine the types of our expression.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SampleView</span> </span>&#123;</span><br><span class="line">    @<span class="type">ViewBuilder</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">profile2</span><span class="params">(position: Position)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> position &#123;</span><br><span class="line">        <span class="keyword">case</span> .top:</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.person.rawValue)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="type">EmptyView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-ViewBuilder-to-construct-View"><a href="#Use-ViewBuilder-to-construct-View" class="headerlink" title="Use ViewBuilder to construct View"></a>Use ViewBuilder to construct View</h3><p>We can use <code>ViewBuiler</code> as our parameter that constructs View. For example we can build an <code>IfLet</code> that construct View with optional check.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">IfLet</span>&lt;<span class="title">T</span>, <span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">T?</span></span><br><span class="line">    <span class="keyword">let</span> content: (<span class="type">T</span>) -&gt; <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">T?</span>, @<span class="type">ViewBuilder</span> content: @escaping (<span class="type">T</span>) -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.content = content</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> value = value &#123;</span><br><span class="line">            content(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With <code>ViewBuilder</code> we can apply logic inside our closure</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EmailView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> email: <span class="type">String?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">IfLet</span>(email) &#123; email <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> email.isEmpty &#123;</span><br><span class="line">                <span class="type">Circle</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(email)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-ViewBuilder-where-we-can’t-use-closure"><a href="#Use-ViewBuilder-where-we-can’t-use-closure" class="headerlink" title="Use ViewBuilder where we can’t use closure"></a>Use ViewBuilder where we can’t use closure</h3><p>In some modifers like <code>overlay</code>, SwiftUI expects a View, not a closure that returns a View. There we cannot use additional logic</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    @inlinable <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">overlay</span>&lt;Overlay&gt;<span class="params">(<span class="number">_</span> overlay: Overlay, alignment: Alignment = .center)</span></span> -&gt; some <span class="type">View</span> <span class="keyword">where</span> <span class="type">Overlay</span> : <span class="type">View</span></span><br></pre></td></tr></table></figure><p>The below won’t work as we can’t do conditional statement in overlay modifier</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MessageView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> showsHUD: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Message"</span>)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="keyword">if</span> showsHUD &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"HUD"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But we can make something like <code>MakeView</code> that provides a <code>ViewBuilder</code> closure</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">MakeView</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(@<span class="type">ViewBuilder</span> make: () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content = make()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we can use a conditional statement in any modifier that does not accept ViewModifier</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MessageView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> showsHUD: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Message"</span>)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">MakeView</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> showsHUD &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">"HUD"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/767&quot;&gt;#767&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SwiftUI ‘s &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
      <category term="featured" scheme="https://onmyway133.github.io/tags/featured/"/>
    
  </entry>
  
  <entry>
    <title>How to use custom Key for NSCache</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-custom-Key-for-NSCache/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-custom-Key-for-NSCache/</id>
    <published>2021-01-30T04:37:41.000Z</published>
    <updated>2021-01-30T04:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/766">#766</a></strong></p><p>Need to use a class, best is to subclass from <code>NSObject</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cache = <span class="type">NSCache</span>&lt;<span class="type">Key</span>, <span class="type">UIImage</span>&gt;()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Key</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">isEqual</span><span class="params">(<span class="number">_</span> object: <span class="keyword">Any</span>?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> other = object <span class="keyword">as</span>? <span class="type">Key</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url == other.url</span><br><span class="line">            &amp;&amp; size == other.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> hash: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url.hashValue ^ <span class="type">Int</span>(size.width) ^ <span class="type">Int</span>(size.height)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">URL</span></span><br><span class="line">    <span class="keyword">let</span> size: <span class="type">CGSize</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(url: <span class="type">URL</span>, size: <span class="type">CGSize</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.url = url</span><br><span class="line">        <span class="keyword">self</span>.size = size</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/766&quot;&gt;#766&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Need to use a class, best is to subclass
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to show multiple popover in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-multiple-popover-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-multiple-popover-in-SwiftUI/</id>
    <published>2021-01-29T21:33:04.000Z</published>
    <updated>2021-01-29T21:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/765">#765</a></strong></p><p>In SwiftUI currently, it’s not possible to attach multiple <code>.popover</code> to the same View. But we can use condition to show different content</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">PopoverStyle</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> raw</span><br><span class="line">        <span class="keyword">case</span> preview</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> showsPopover: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> popoverStyle: <span class="type">PopoverStyle</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            header</span><br><span class="line">            content</span><br><span class="line">                .popover(isPresented: $showsPopover) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> popoverStyle &#123;</span><br><span class="line">                    <span class="keyword">case</span> .raw:</span><br><span class="line">                        <span class="type">ViewRawView</span>(item: item)</span><br><span class="line">                    <span class="keyword">case</span> .preview:</span><br><span class="line">                        <span class="type">PreviewView</span>(item: item)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            footer</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/765&quot;&gt;#765&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In SwiftUI currently, it’s not possible
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to handle keyDown in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-keyDown-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-keyDown-in-SwiftUI-for-macOS/</id>
    <published>2021-01-29T19:44:48.000Z</published>
    <updated>2021-01-29T19:55:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/764">#764</a></strong></p><p>Use a custom <code>KeyAwareView</code> that uses an <code>NSView</code> that checks for <code>keyDown</code> method. In case we can’t handle certain keys, call <code>super.keyDown(with: event)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> KeyboardShortcuts</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KeyAwareView</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> onEvent: (<span class="type">Event</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">NSView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">KeyView</span>()</span><br><span class="line">        view.onEvent = onEvent</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            view.window?.makeFirstResponder(view)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(<span class="number">_</span> nsView: NSView, context: Context)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">KeyAwareView</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> upArrow</span><br><span class="line">        <span class="keyword">case</span> downArrow</span><br><span class="line">        <span class="keyword">case</span> leftArrow</span><br><span class="line">        <span class="keyword">case</span> rightArrow</span><br><span class="line">        <span class="keyword">case</span> space</span><br><span class="line">        <span class="keyword">case</span> delete</span><br><span class="line">        <span class="keyword">case</span> cmdC</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyView</span>: <span class="title">NSView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onEvent: (<span class="type">KeyAwareView</span>.<span class="type">Event</span>) -&gt; <span class="type">Void</span> = &#123; <span class="number">_</span> <span class="keyword">in</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> acceptsFirstResponder: <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">keyDown</span><span class="params">(with event: NSEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="type">Int</span>(event.keyCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.delete.rawValue:</span><br><span class="line">            onEvent(.delete)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.upArrow.rawValue:</span><br><span class="line">            onEvent(.upArrow)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.downArrow.rawValue:</span><br><span class="line">            onEvent(.downArrow)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.leftArrow.rawValue:</span><br><span class="line">            onEvent(.leftArrow)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.rightArrow.rawValue:</span><br><span class="line">            onEvent(.rightArrow)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.space.rawValue:</span><br><span class="line">            onEvent(.space)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.<span class="built_in">c</span>.rawValue <span class="keyword">where</span> event.modifierFlags.<span class="built_in">contains</span>(.command):</span><br><span class="line">            onEvent(.cmdC)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">super</span>.keyDown(with: event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can place this as a background</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LazyVStack</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.background(<span class="type">KeyAwareView</span>(onEvent: &#123;&#125;))</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-29 20:55:39</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/764&quot;&gt;#764&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use a custom &lt;code&gt;KeyAwareView&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
</feed>
