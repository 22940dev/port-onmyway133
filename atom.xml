<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2020-06-04T03:58:47.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to auto scroll to top in react router 5</title>
    <link href="https://onmyway133.github.io/blog/How-to-auto-scroll-to-top-in-react-router-5/"/>
    <id>https://onmyway133.github.io/blog/How-to-auto-scroll-to-top-in-react-router-5/</id>
    <published>2020-06-04T03:58:39.000Z</published>
    <updated>2020-06-04T03:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/659">#659</a></strong></p><p>Use <code>useLocation</code> <a href="https://reacttraining.com/react-router/web/guides/scroll-restoration">https://reacttraining.com/react-router/web/guides/scroll-restoration</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link,</span><br><span class="line">    useLocation,</span><br><span class="line">    withRouter</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_ScrollToTop</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname &#125; = useLocation();</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;, [pathname]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> props.children</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ScrollToTop = withRouter(_ScrollToTop)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Router&gt;</span><br><span class="line">                &lt;ScrollToTop&gt;</span><br><span class="line">                    &lt;Header /&gt;</span><br><span class="line">                     &lt;Content /&gt;</span><br><span class="line">                    &lt;Footer /&gt;</span><br><span class="line">                &lt;<span class="regexp">/ScrollToTop&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Router&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/659&quot;&gt;#659&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;useLocation&lt;/code&gt; &lt;a
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to use dynamic route in react router 5</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-dynamic-route-in-react-router-5/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-dynamic-route-in-react-router-5/</id>
    <published>2020-06-03T02:41:26.000Z</published>
    <updated>2020-06-03T03:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/658">#658</a></strong></p><p>Declare routes, use <code>exact</code> to match exact path as finding route is from top to bottom. For dynamic route, I find that we need to use render and pass the props manually.</p><p>Declare <code>Router</code> as the rooter with Header, Content and Footer. Inside Content there is the <code>Switch</code>, so header and footer stay the same across pages</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">    Switch,</span><br><span class="line">    Route,</span><br><span class="line">    Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Content</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">                &lt;Route exact path=<span class="string">"/about"</span>&gt;</span><br><span class="line">                    &lt;About /&gt;</span><br><span class="line">                &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Route exact path="/</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">                    &lt;Home /&gt;</span></span><br><span class="line"><span class="string">                &lt;/Route&gt;</span></span><br><span class="line"><span class="string">                &lt;Route path='/book/:id' render=&#123;(props) =&gt; &#123;</span></span><br><span class="line"><span class="string">                    return ( &lt;BookDetail &#123;...props &#125; /&gt; )</span></span><br><span class="line"><span class="string">                &#125;&#125; /&gt;</span></span><br><span class="line"><span class="string">                &lt;Route&gt;</span></span><br><span class="line"><span class="string">                    &lt;NotFound /&gt;</span></span><br><span class="line"><span class="string">                &lt;/Route&gt;</span></span><br><span class="line"><span class="string">            &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function App() &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;Router&gt;</span></span><br><span class="line"><span class="string">                &lt;Header /&gt;</span></span><br><span class="line"><span class="string">                &lt;Content /&gt;</span></span><br><span class="line"><span class="string">                &lt;Footer /&gt;</span></span><br><span class="line"><span class="string">            &lt;/Router&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>To trigger route request, use <code>useHistory</code> hook. Note that we need to declare variable, and not use <code>useHistory().push</code> directly</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useHistory &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = useHistory()</span><br><span class="line"></span><br><span class="line">&lt;a onClick=&#123;() =&gt; &#123;</span><br><span class="line">    history.push(<span class="string">`/book/<span class="subst">$&#123;uuid&#125;</span>`</span>)</span><br><span class="line">&#125;&#125; &gt;</span><br></pre></td></tr></table></figure><p>To get parameters, use <code>match</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">BookDetail</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [ state, setState ] = useState(&#123;</span><br><span class="line">        book: <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; match &#125; = props</span><br><span class="line">   <span class="comment">// match.params.id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/658&quot;&gt;#658&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Declare routes, use &lt;code&gt;exact&lt;/code&gt; to
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to use folder as local npm package</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-folder-as-local-npm-package/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-folder-as-local-npm-package/</id>
    <published>2020-06-01T03:00:36.000Z</published>
    <updated>2020-06-01T03:00:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/657">#657</a></strong></p><p>Add library folder <code>src/library</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">    library</span><br><span class="line">        res.js</span><br><span class="line">    screens</span><br><span class="line">        Home</span><br><span class="line">            index.js</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure><p>Declare package.json in <code>library</code> folder</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"library"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.0.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Declare library as dependency in root package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "library": "file:src/library"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Now import like normal, for example in <code>src/screens/Home/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> res <span class="keyword">from</span> <span class="string">'library/res'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/657&quot;&gt;#657&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add library folder
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to make switch statement in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-switch-statement-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-switch-statement-in-SwiftUI/</id>
    <published>2020-05-22T18:41:10.000Z</published>
    <updated>2020-05-22T18:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/656">#656</a></strong></p><p>Lately I’ve been challenging myself to declare switch statement in SwiftUI, or in a more generalized way, execute any anonymous function that can return a View</p><h2 id="Use-Switch-and-Case-views"><a href="#Use-Switch-and-Case-views" class="headerlink" title="Use Switch and Case views"></a>Use Switch and Case views</h2><p>Note that this approach does not work yet, as <code>TupeView</code> should support variadic number of contents, and also T.RawValue needs to conform to Equatable in order to check the cases.</p><p>Also in Switch statement, Content can’t be inferred</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Case</span>&lt;<span class="title">T</span>: <span class="title">RawRepresentable</span>, <span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">T</span></span><br><span class="line">    <span class="keyword">let</span> content: <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">T</span>, @<span class="type">ViewBuilder</span> content: () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.content = content()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Switch</span>&lt;<span class="title">T</span>: <span class="title">RawRepresentable</span>, <span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">T</span></span><br><span class="line">    <span class="keyword">let</span> cases: <span class="type">TupleView</span>&lt;<span class="type">Case</span>&lt;<span class="type">T</span>, <span class="type">Content</span>&gt;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">T</span>, @<span class="type">ViewBuilder</span> cases: () -&gt; <span class="type">TupleView</span>&lt;<span class="type">Case</span>&lt;<span class="type">T</span>, <span class="type">Content</span>&gt;&gt;) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.cases = cases()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        makeBody()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeBody</span><span class="params">()</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Logic here</span></span><br><span class="line">        cases</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UseSwitchStatement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> animal: <span class="type">Animal</span> = .cat</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Switch</span>(animal) &#123;</span><br><span class="line">                <span class="type">Case</span>(<span class="type">Animal</span>.cat) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"cat"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Case</span>(<span class="type">Animal</span>.dog) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"dog"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Case</span>(<span class="type">Animal</span>.mouse) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"mouse"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-MakeView"><a href="#Use-MakeView" class="headerlink" title="Use MakeView"></a>Use MakeView</h2><p>Another solution is to use a <code>MakeView</code> view, this is more generic as it can execute any functions</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Animal</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> cat</span><br><span class="line">    <span class="keyword">case</span> dog</span><br><span class="line">    <span class="keyword">case</span> mouse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MakeView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> make: () -&gt; <span class="type">AnyView</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        make()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UseMakeView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> animal: <span class="type">Animal</span> = .cat</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">MakeView</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span>.animal &#123;</span><br><span class="line">            <span class="keyword">case</span> .cat:</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Text</span>(<span class="string">"cat"</span>).erase()</span><br><span class="line">            <span class="keyword">case</span> .dog:</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Text</span>(<span class="string">"dog"</span>).erase()</span><br><span class="line">            <span class="keyword">case</span> .mouse:</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Text</span>(<span class="string">"mouse"</span>).erase()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/656&quot;&gt;#656&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lately I’ve been challenging myself to
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to update multiple state properties with React hooks</title>
    <link href="https://onmyway133.github.io/blog/How-to-update-multiple-state-properties-with-React-hooks/"/>
    <id>https://onmyway133.github.io/blog/How-to-update-multiple-state-properties-with-React-hooks/</id>
    <published>2020-05-08T20:19:31.000Z</published>
    <updated>2020-05-08T20:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/655">#655</a></strong></p><p>Declare <code>state</code> and <code>setState</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Showcase</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> factory = props.factory</span><br><span class="line">    <span class="keyword">const</span> [state, setState] = useState(</span><br><span class="line">        &#123;</span><br><span class="line">            factory,</span><br><span class="line">            selectedFilter: &#123; <span class="attr">name</span>: <span class="string">''</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> onFilterClick = <span class="function">(<span class="params">filter</span>) =&gt;</span> &#123;</span><br><span class="line">        setState(&#123;</span><br><span class="line">            selectedFilter: filter,</span><br><span class="line">            factory: factory.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> app.showcase.platforms.includes(filter.name)</span><br><span class="line">            &#125;) </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cards = state.factory.map(<span class="function">(<span class="params">app, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Card app=&#123;app&#125; key=&#123;app.slug&#125; /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;FilterBar onClick=&#123;onFilterClick&#125; /&gt;</span><br><span class="line">            &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">                <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">flex-direction</span>: <span class="selector-tag">row</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">flex-wrap</span>: <span class="selector-tag">wrap</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-start</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">padding</span>: 0 8<span class="selector-tag">vw</span>;</span></span><br><span class="line"><span class="css">            `</span>&#125;&gt;</span><br><span class="line">                &#123;cards&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/655&quot;&gt;#655&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Declare &lt;code&gt;state&lt;/code&gt; and
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to make white label React app</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-white-label-React-app/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-white-label-React-app/</id>
    <published>2020-05-07T03:58:48.000Z</published>
    <updated>2020-05-07T03:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/654">#654</a></strong></p><p>Use <code>shelljs</code> to execute shell commands, and <code>fs</code> to read and write. In <code>public/index.html</code> specify some placeholder and we will replace those in our script</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexHtml = fs.readFileSync(publicIndexHtmlPath, <span class="string">'utf8'</span>)</span><br><span class="line">indexHtml = indexHtml</span><br><span class="line">    .replace(<span class="string">'CONSTANT_HTML_TITLE'</span>, <span class="string">`<span class="subst">$&#123;app.name&#125;</span> - <span class="subst">$&#123;app.headline.title&#125;</span>`</span>)</span><br><span class="line">    .replace(<span class="string">'CONSTANT_HTML_META_DESCRIPTION'</span>, app.headline.text)</span><br><span class="line"></span><br><span class="line">fs.writeFileSync(publicIndexHtmlPath, indexHtml)</span><br><span class="line"></span><br><span class="line"><span class="comment">// build</span></span><br><span class="line">shell.cd(<span class="string">'projects/my_react_app'</span>)</span><br><span class="line">shell.exec(<span class="string">'npm run build'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy</span></span><br><span class="line">shell.exec(<span class="string">`cp -a projects/my_react_app web_server/public`</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/654&quot;&gt;#654&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;shelljs&lt;/code&gt; to execute shell
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to make white label React app for landing pages</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-white-label-React-app-for-landing-pages/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-white-label-React-app-for-landing-pages/</id>
    <published>2020-05-07T03:58:48.000Z</published>
    <updated>2020-05-14T02:25:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/654">#654</a></strong></p><p>A good landing page is one of the most crucial part of a successful launch. Recently I started creating landing pages for my <a href="https://onmyway133.com/apps/">apps</a>, I was lazy that I ended creating a white label React app as a landing template and then write a script to build multiple similar pages.</p><p>Here are a few examples, at first the pages share same look and feel, but we can add more configuration parameters later on. The cool thing with this approach is fixing bugs and adding features become easier, as they will all be deployed with the generator script.</p><p>Here are how it looks in my apps <a href="https://onmyway133.com/pastepal/">PastePal</a> and <a href="https://onmyway133.com/pushhero/">PushHero</a>, look at how the footer parts are so consistent.</p><img width="1433" alt="Screenshot 2020-05-14 at 05 47 28" src="https://user-images.githubusercontent.com/2284279/81890497-66cc5b80-95a6-11ea-88bb-43f99dcb6ad6.png"><img width="1230" alt="Screenshot 2020-05-14 at 05 48 01" src="https://user-images.githubusercontent.com/2284279/81890540-7c418580-95a6-11ea-95ae-8b095440d26f.png"><img width="1194" alt="Screenshot 2020-05-14 at 05 47 45" src="https://user-images.githubusercontent.com/2284279/81890555-8499c080-95a6-11ea-9028-c2bd09f66b0a.png"><h2 id="Create-a-landing-page-in-pure-html-and-javascript"><a href="#Create-a-landing-page-in-pure-html-and-javascript" class="headerlink" title="Create a landing page in pure html and javascript"></a>Create a landing page in pure html and javascript</h2><p>The first version that I built is with pure html and javascript. It has a lot of boilerplate and I need to deal with Webpack eventually to obfuscate my code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cards = <span class="built_in">Array</span>.from(apps).map(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    container.appendChild(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> card = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    card.className = <span class="string">'card'</span></span><br><span class="line">    a.appendChild(card)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// top</span></span><br><span class="line">    <span class="keyword">const</span> imageContainer = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    imageContainer.className = <span class="string">'image-container'</span></span><br><span class="line">    card.appendChild(imageContainer)</span><br><span class="line">    <span class="keyword">if</span> (app.background !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        imageContainer.style.backgroundColor = app.background</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        imageContainer.style.backgroundColor = <span class="string">'rgba(200, 200, 200, 1.0)'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> image = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">    image.src = <span class="string">`../<span class="subst">$&#123;app.slug&#125;</span>/icon.png`</span></span><br><span class="line">    imageContainer.appendChild(image)</span><br></pre></td></tr></table></figure><p>Since they are in pure html and javascript, everyone can just open browser and view source code, which is not ideal, so I need to fiddle with Webpack and other uglify and minimize tools to obfuscate the code, like <a href="https://onmyway133.com/blog/how-to-use-webpack-to-bundle-html-css-js/">How to use webpack to bundle html css js</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br><span class="line">npm install babel-minify-webpack-plugin --save-dev</span><br><span class="line">npm install html-webpack-plugin --save-dev</span><br><span class="line"></span><br><span class="line">const MinifyPlugin &#x3D; require(&#39;babel-minify-webpack-plugin&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &quot;.&#x2F;index.js&quot;,</span><br><span class="line">    mode: &#39;production&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &quot;.&#x2F;index.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new MinifyPlugin(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#39;index.html&#39;,</span><br><span class="line">            filename: &#39;index.html&#39;,</span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And with external css sheets, finding and renaming class list names take some time.</p><h2 id="Create-a-landing-page-in-React"><a href="#Create-a-landing-page-in-React" class="headerlink" title="Create a landing page in React"></a>Create a landing page in React</h2><p>I use <a href="https://create-react-app.dev/">create-react-app</a> to generate my React app as it sets up JSX, Babel, Webpack, hot reloading and development server for me.</p><h3 id="Inline-css"><a href="#Inline-css" class="headerlink" title="Inline css"></a>Inline css</h3><p>I like js, css and html be part of the same component file, so I prefer inline css. I tried <a href="https://styled-components.com/">styled-components</a> before but then I found <a href="https://emotion.sh/docs/introduction">emotion</a> to be much easier to use and close to css. I also don’t like declaring unnecessary local variables style in styled-components.</p><p>Here is a good comparison between the 2 <a href="https://github.com/jsjoeio/styled-components-vs-emotion">styled-components-vs-emotion</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// styled-components</span></span><br><span class="line"><span class="comment">// CSS syntax in tagged template literal</span></span><br><span class="line"><span class="keyword">const</span> Title = styled.h1<span class="string">`</span></span><br><span class="line"><span class="string">  font-size: 1.5em;</span></span><br><span class="line"><span class="string">  text-align: center;</span></span><br><span class="line"><span class="string">  color: palevioletred;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Title</span>&gt;</span>Hiya!<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object syntax</span></span><br><span class="line"><span class="keyword">const</span> button = styled.button(&#123;</span><br><span class="line">  fontSize: <span class="string">'1.5em'</span>,</span><br><span class="line">  textAlign: <span class="string">'center'</span>,</span><br><span class="line">  color: <span class="string">'palevioletred'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// emotion</span></span><br><span class="line"><span class="comment">// CSS syntax in tagged template literal</span></span><br><span class="line">render(</span><br><span class="line">  &lt;h1</span><br><span class="line">    className=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">font-size</span>: 1<span class="selector-class">.5em</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-tag">palevioletred</span>;</span></span><br><span class="line"><span class="css">    `</span>&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Hiya!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Object syntax</span></span><br><span class="line"><span class="regexp">const titleStyles = css(&#123;</span></span><br><span class="line"><span class="regexp">  fontSize: '1.5em',</span></span><br><span class="line"><span class="regexp">  textAlign: 'center',</span></span><br><span class="line"><span class="regexp">  color: 'palevioletred'</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render(&lt;h1 className=&#123;titleStyles&#125;&gt;Hiya!&lt;/</span>h1&gt;)</span><br></pre></td></tr></table></figure><h3 id="Use-emotion-for-inline-css"><a href="#Use-emotion-for-inline-css" class="headerlink" title="Use emotion for inline css"></a>Use emotion for inline css</h3><p>I detail here <a href="https://onmyway133.com/blog/how-to-use-emotion-for-inline-css-in-react/">How to use emotion for inline css in React</a></p><p>Emotion has core and styled styles. I usually use the <code>css</code> inline syntax, so I can just install the core</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @emotion/core</span><br></pre></td></tr></table></figure><p>Note that we have to declare jsx directive at the top of every file.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement</span></span><br><span class="line"><span class="comment">/** @jsx jsx */</span></span><br><span class="line"><span class="keyword">import</span> &#123; css, jsx &#125; <span class="keyword">from</span> <span class="string">'@emotion/core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color = <span class="string">'white'</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div</span><br><span class="line">    css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span>: 32<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-tag">hotpink</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">font-size</span>: 24<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border-radius</span>: 4<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: </span><span class="subst">$&#123;color&#125;</span><span class="css">;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    `</span>&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Hover to change color.</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>One cool thing with inline css is they are just javascript code so it’s pretty easy to apply logic code, like in <a href="https://onmyway133.com/blog/how-to-conditionally-apply-css-in-emotion-js/">How to conditionally apply css in emotion js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shadowCss = feature.shadow ? css`<span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-radius</span>: 5<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 4<span class="selector-tag">px</span> 8<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>), 0 6<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.19</span>);</span></span><br><span class="line"><span class="css">    `</span> : css`<span class="css">`</span></span><br></pre></td></tr></table></figure><h3 id="Components-based"><a href="#Components-based" class="headerlink" title="Components based"></a>Components based</h3><p>When a component gets too big, I extract it to small components, in the end I have a bunch of them</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./components/Footer'</span></span><br><span class="line"><span class="keyword">import</span> Download <span class="keyword">from</span> <span class="string">'./components/Download'</span></span><br><span class="line"><span class="keyword">import</span> ProductHunt <span class="keyword">from</span> <span class="string">'./components/ProductHunt'</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/Header'</span></span><br><span class="line"><span class="keyword">import</span> Headline <span class="keyword">from</span> <span class="string">'./components/Headline'</span></span><br><span class="line"><span class="keyword">import</span> Features <span class="keyword">from</span> <span class="string">'./components/Features</span></span><br></pre></td></tr></table></figure><p>and I stack them vertically, using flexbox and css grid</p><h3 id="Responsiveness-with-flexbox-and-css-grid"><a href="#Responsiveness-with-flexbox-and-css-grid" class="headerlink" title="Responsiveness with flexbox and css grid"></a>Responsiveness with flexbox and css grid</h3><p>I used flexbox mostly at first, but then I gradually convert some of them to css grid when I see fit.  To stack vertically with flexbox, I use <code>flex-direction</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="selector-tag">flex-direction</span>: <span class="selector-tag">column</span></span><br></pre></td></tr></table></figure><p>where as in css grid items are stacked vertically by default, if we want multiple columns, specify <code>grid-template-columns</code> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">grid</span>;</span><br><span class="line"><span class="selector-tag">grid-template-columns</span>: 1<span class="selector-tag">fr</span> 1<span class="selector-tag">fr</span>;</span><br></pre></td></tr></table></figure><p>I use <code>flex-wrap: wrap</code> in some places to wrap content, but in some places I see specifying media query and changing columns in css grid is more easier and predictable</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">grid</span>;</span><br><span class="line"><span class="selector-tag">grid-template-columns</span>: 1<span class="selector-tag">fr</span> 1<span class="selector-tag">fr</span>;</span><br><span class="line"><span class="selector-tag">grid-gap</span>: 8<span class="selector-tag">vw</span>;</span><br><span class="line"><span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (max-width: <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">grid-template-columns</span>: 1<span class="selector-tag">fr</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Audit-with-Lighthouse"><a href="#Audit-with-Lighthouse" class="headerlink" title="Audit with Lighthouse"></a>Audit with Lighthouse</h3><p><a href="https://developers.google.com/web/tools/lighthouse">Google Lighthouse</a> is the most popular tool to audit website for performance and SEO. I use it to reduce image size, add correct html attributes and make it more SEO friendly.</p><h3 id="Prepare-a-list-of-app"><a href="#Prepare-a-list-of-app" class="headerlink" title="Prepare a list of app"></a>Prepare a list of app</h3><p>I have my list of apps in 1 javascript file, called <code>factory.js</code>, for example here with <a href="https://onmyway133.com/pastepal/">PastePal</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> factory = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'PastePal'</span>,</span><br><span class="line">        slug: <span class="string">'pastepal'</span>,</span><br><span class="line">        header: &#123;</span><br><span class="line">            background: <span class="string">'#5488E5'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        headline: &#123;</span><br><span class="line">            title: <span class="string">'Your next favorite pasteboard manager'</span>,</span><br><span class="line">            text: <span class="string">'Never miss what you just type. PastePal is a native Mac application that manages your pasteboard history with a variety of file types support like text and images. It also comes with a nifty note and shortcut manager.'</span>,</span><br><span class="line">            image: <span class="string">'banner.png'</span>,</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>In my <code>package.json</code> for my landing page, I declare a property called <code>currentApp</code>. This is to specify which app I’m currently work on. Later in the generator script, we can just update this for every app that we build.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"landing"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"."</span>,</span><br><span class="line">  <span class="string">"currentApp"</span>: <span class="string">"pastepal"</span>,</span><br></pre></td></tr></table></figure><p>Here is how to read that value from my landing app</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> factory <span class="keyword">from</span> <span class="string">'./apps/factory'</span></span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">'../package.json'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="keyword">let</span> key = pkg.currentApp</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            key = <span class="string">'pastepal'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> app = factory.filter(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123; <span class="keyword">return</span> app.slug === key &#125;)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">this</span>.setState(app)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Page app=&#123;<span class="keyword">this</span>.state&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>One thing with <a href="https://create-react-app.dev/docs/deployment/">create-react-app</a> is that built assets are relative to the root, not your index.html</p><blockquote><p>npm run build creates a build directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served index.html, and requests to static paths like /static/js/main.<hash>.js are served with the contents of the /static/js/main.<hash>.js file. For more information see the production build section.</p></blockquote><blockquote><p>If you are not using the HTML5 pushState history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your package.json:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;homepage&quot;: &quot;.&quot;,</span><br></pre></td></tr></table></figure><blockquote><p>This will make sure that all the asset paths are relative to index.html. You will then be able to move your app from <a href="http://mywebsite.com">http://mywebsite.com</a> to <a href="http://mywebsite.com/relativepath">http://mywebsite.com/relativepath</a> or even <a href="http://mywebsite.com/relative/path">http://mywebsite.com/relative/path</a> without having to rebuild it.</p></blockquote><h2 id="Build-a-generator-script-to-generate-many-landing-pages"><a href="#Build-a-generator-script-to-generate-many-landing-pages" class="headerlink" title="Build a generator script to generate many landing pages"></a>Build a generator script to generate many landing pages</h2><p>I make another nodejs project called <code>generator</code>, it will use my landing project as template, changes a few parameters and build each app defined in <code>factory.js</code>.</p><p>My factory use <code>export default</code> syntax, so I need to use Babel in my node app to import that, see <a href="https://onmyway133.com/blog/how-to-use-babel-7-in-node-project/">How to use babel 7 in node project</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init generator</span><br><span class="line">npm install @babel&#x2F;core</span><br><span class="line">npm install @babel&#x2F;cli</span><br><span class="line">npm install @babel&#x2F;preset-env</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Update-currentApp"><a href="#Update-currentApp" class="headerlink" title="Update currentApp"></a>Update currentApp</h3><p>I use <code>sync</code> methods of <code>fs</code> to not have to deal with asynchrony.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pkPath = <span class="string">`/Users/khoa/projects/anding/package.json`</span></span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(fs.readFileSync(pkPath, <span class="string">'utf8'</span>))</span><br><span class="line">json.currentApp = app.slug</span><br><span class="line">fs.writeFileSync(pkPath, <span class="built_in">JSON</span>.stringify(json, <span class="literal">null</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="Execute-shell-command"><a href="#Execute-shell-command" class="headerlink" title="Execute shell command"></a>Execute shell command</h3><p>I use <code>shelljs</code> to execute shell commands, and <code>fs</code> to read and write. In <code>public/index.html</code> specify some placeholder and we will replace those in our script.</p><p>In landing app, the <code>public/index.html</code> acts as the shell when building the app, so I have a few placeholder called <code>CONSTANTS</code>, these will be replaced at generation time in my node app.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexHtml = fs.readFileSync(publicIndexHtmlPath, <span class="string">'utf8'</span>)</span><br><span class="line">indexHtml = indexHtml</span><br><span class="line">    .replace(<span class="string">'CONSTANT_HTML_TITLE'</span>, <span class="string">`<span class="subst">$&#123;app.name&#125;</span> - <span class="subst">$&#123;app.headline.title&#125;</span>`</span>)</span><br><span class="line">    .replace(<span class="string">'CONSTANT_HTML_META_DESCRIPTION'</span>, app.headline.text)</span><br><span class="line"></span><br><span class="line">fs.writeFileSync(publicIndexHtmlPath, indexHtml)</span><br><span class="line"></span><br><span class="line"><span class="comment">// build</span></span><br><span class="line">shell.cd(<span class="string">'projects/my_react_app'</span>)</span><br><span class="line">shell.exec(<span class="string">'npm run build'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy</span></span><br><span class="line">shell.exec(<span class="string">`cp -a projects/my_react_app web_server/public`</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/654&quot;&gt;#654&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A good landing page is one of the most
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to show lightbox in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-lightbox-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-lightbox-in-React/</id>
    <published>2020-05-07T03:25:40.000Z</published>
    <updated>2020-05-07T03:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/653">#653</a></strong></p><p>Use <a href="https://github.com/biati-digital/glightbox">https://github.com/biati-digital/glightbox</a></p><p>Configure css. Specify <code>class=&#39;glightbox</code> for html elements</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;blueimp-gallery.min.css&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>Install package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install glightbox</span><br><span class="line">import GLightbox from &#39;glightbox&#39;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lbElements = features.map(<span class="function">(<span class="params">feature</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'href'</span>: <span class="built_in">require</span>(<span class="string">`../apps/<span class="subst">$&#123;app.slug&#125;</span>/<span class="subst">$&#123;feature.image&#125;</span>`</span>),</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'image'</span>,</span><br><span class="line">        <span class="string">'title'</span>: feature.title,</span><br><span class="line">        <span class="string">'description'</span>: feature.texts[<span class="number">0</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> openLb = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lightbox = GLightbox(&#123;</span><br><span class="line">        touchNavigation: <span class="literal">true</span>,</span><br><span class="line">        loop: <span class="literal">true</span>,</span><br><span class="line">        autoplayVideos: <span class="literal">true</span>,</span><br><span class="line">        onOpen: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">        beforeSlideLoad: <span class="function">(<span class="params">slide, data</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> myGallery = GLightbox(&#123;</span><br><span class="line">        elements: lbElements,</span><br><span class="line">        autoplayVideos: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    myGallery.open()</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/653&quot;&gt;#653&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to animate on scroll in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-animate-on-scroll-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-animate-on-scroll-in-React/</id>
    <published>2020-05-07T03:23:51.000Z</published>
    <updated>2020-05-07T03:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/652">#652</a></strong></p><p>Use <a href="https://github.com/michalsnik/aos">https://github.com/michalsnik/aos</a></p><p>Add link to head</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;aos@next&#x2F;dist&#x2F;aos.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><p>Jus before closing body tag</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/aos@next/dist/aos.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    AOS.init();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Specify <code>data-aos</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-aos=<span class="string">"fade-up"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/652&quot;&gt;#652&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to copy folder in nodej</title>
    <link href="https://onmyway133.github.io/blog/How-to-copy-folder-in-nodej/"/>
    <id>https://onmyway133.github.io/blog/How-to-copy-folder-in-nodej/</id>
    <published>2020-05-07T02:09:28.000Z</published>
    <updated>2020-05-07T02:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/651">#651</a></strong></p><p>Use <code>shelljs</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install shelljs</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line">shell.exec(<span class="string">`cp -a source_path/. destination_path`</span>)</span><br></pre></td></tr></table></figure><blockquote><p>The -a option is an improved recursive option, that preserve all file attributes, and also preserve symlinks.</p></blockquote><blockquote><p>The . at end of the source path is a specific cp syntax that allow to copy all files and folders, included hidden ones.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/651&quot;&gt;#651&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;shelljs&lt;/code&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="node" scheme="https://onmyway133.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>How to use babel 7 in node project</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-babel-7-in-node-project/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-babel-7-in-node-project/</id>
    <published>2020-05-07T01:27:18.000Z</published>
    <updated>2020-05-07T01:27:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/650">#650</a></strong></p><p>Install</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core</span><br><span class="line">npm install @babel/cli</span><br><span class="line">npm install @babel/preset-env</span><br></pre></td></tr></table></figure><p>Configure <code>.babelrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>package.json</code>, transpile using <code>npx babel</code> then <code>node dist/index.js</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"start": "cp ../landing/src/apps/factory.js copied/factory.js &amp;&amp; npx babel index.js --out-file dist/index.js &amp;&amp; npx babel copied/factory.js --out-file dist/factory.js &amp;&amp; node dist/index.js"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/650&quot;&gt;#650&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Install&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="node" scheme="https://onmyway133.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>How to conditionally apply css in emotion js</title>
    <link href="https://onmyway133.github.io/blog/How-to-conditionally-apply-css-in-emotion-js/"/>
    <id>https://onmyway133.github.io/blog/How-to-conditionally-apply-css-in-emotion-js/</id>
    <published>2020-05-06T18:15:44.000Z</published>
    <updated>2020-05-06T18:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/649">#649</a></strong></p><p>Check flag then define <code>css</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Picture = <span class="function">(<span class="params">feature</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> shadowCss = feature.shadow ? css`<span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-radius</span>: 5<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 4<span class="selector-tag">px</span> 8<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>), 0 6<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.19</span>);</span></span><br><span class="line"><span class="css">    `</span> : css`<span class="css">`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 40<span class="selector-tag">vw</span>;</span></span><br><span class="line"><span class="css">            @<span class="keyword">media</span> (max-width: <span class="number">420px</span>) &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span>: 98<span class="selector-tag">vw</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        `</span>&#125;&gt;</span><br><span class="line">            &lt;div css=&#123;shadowCss&#125;&gt;</span><br><span class="line">                &lt;img css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">                <span class="selector-tag">max-width</span>: 100%;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">height</span>: <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">            `</span>&#125;</span><br><span class="line">                    src=&#123;<span class="built_in">require</span>(<span class="string">`../apps/<span class="subst">$&#123;feature.image&#125;</span>`</span>)&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/649&quot;&gt;#649&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Check flag then define
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to scroll to element in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-scroll-to-element-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-scroll-to-element-in-React/</id>
    <published>2020-05-06T06:36:07.000Z</published>
    <updated>2020-05-06T06:36:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/648">#648</a></strong></p><p>In a similar fashion to plain old javascript, note that <code>href</code> needs to have valid hash tag, like <code>#features</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;a</span><br><span class="line">    href=<span class="string">'#features'</span></span><br><span class="line">    onClick=&#123;() =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            behavior: <span class="string">'smooth'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'features-section'</span>).scrollIntoView(options)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    Features</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/648&quot;&gt;#648&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a similar fashion to plain old
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to use emotion for inline css in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-emotion-for-inline-css-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-emotion-for-inline-css-in-React/</id>
    <published>2020-05-02T02:29:02.000Z</published>
    <updated>2020-05-02T02:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/647">#647</a></strong></p><p><code>emotion</code> can be used in framework agnostic or with React. To use with React, follow <a href="https://emotion.sh/docs/introduction#react">https://emotion.sh/docs/introduction#react</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @emotion&#x2F;core</span><br></pre></td></tr></table></figure><p>Note that you must have <code>/** @jsx jsx */</code> at the top of the file, and the unused <code>jsx</code> in import is a directive for JSX to work properly</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement</span></span><br><span class="line"><span class="comment">/** @jsx jsx */</span></span><br><span class="line"><span class="keyword">import</span> &#123; css, jsx &#125; <span class="keyword">from</span> <span class="string">'@emotion/core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color = <span class="string">'white'</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div</span><br><span class="line">    css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span>: 32<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-tag">hotpink</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">font-size</span>: 24<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border-radius</span>: 4<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: </span><span class="subst">$&#123;color&#125;</span><span class="css">;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    `</span>&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Hover to change color.</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/647&quot;&gt;#647&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emotion&lt;/code&gt; can be used in
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to test DispatchQueue in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-test-DispatchQueue-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-test-DispatchQueue-in-Swift/</id>
    <published>2020-04-29T07:40:35.000Z</published>
    <updated>2020-04-29T07:40:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/646">#646</a></strong></p><h2 id="Sync-the-DispatchQueue"><a href="#Sync-the-DispatchQueue" class="headerlink" title="Sync the DispatchQueue"></a>Sync the DispatchQueue</h2><p>Pass <code>DispatchQueue</code> and call <code>queue.sync</code> to sync all async works before asserting</p><h2 id="Use-mock"><a href="#Use-mock" class="headerlink" title="Use mock"></a>Use mock</h2><p>Use <code>DispatchQueueType</code> and in mock, call the work immediately</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">DispatchQueueType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DispatchQueue</span>: <span class="title">DispatchQueueType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        async(group: <span class="literal">nil</span>, qos: .unspecified, flags: [], execute: work)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MockDispatchQueue</span>: <span class="title">DispatchQueueType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        work()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/646&quot;&gt;#646&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Sync-the-DispatchQueue&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="testing" scheme="https://onmyway133.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to use webpack to bundle html css js</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-webpack-to-bundle-html-css-js/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-webpack-to-bundle-html-css-js/</id>
    <published>2020-04-28T10:56:09.000Z</published>
    <updated>2020-04-28T11:18:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/645">#645</a></strong></p><h3 id="Install-webpack"><a href="#Install-webpack" class="headerlink" title="Install webpack"></a>Install webpack</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br><span class="line">vim webpack.config.js</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &quot;.&#x2F;index.js&quot;,</span><br><span class="line">    mode: &#39;production&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &quot;.&#x2F;index.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To invoke webpack, run below. Your output is <code>dist/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="Minify-js"><a href="#Minify-js" class="headerlink" title="Minify js"></a>Minify js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-minify-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h3 id="Minify-html"><a href="#Minify-html" class="headerlink" title="Minify html"></a>Minify html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const MinifyPlugin &#x3D; require(&#39;babel-minify-webpack-plugin&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &quot;.&#x2F;index.js&quot;,</span><br><span class="line">    mode: &#39;production&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &quot;.&#x2F;index.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new MinifyPlugin(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#39;index.html&#39;,</span><br><span class="line">            filename: &#39;index.html&#39;,</span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Minify-css"><a href="#Minify-css" class="headerlink" title="Minify css"></a>Minify css</h3><p>TBD</p><h3 id="Copy-files"><a href="#Copy-files" class="headerlink" title="Copy files"></a>Copy files</h3><p>Copy files from <code>dist</code> to public folder so we can use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install copyfiles -g</span><br></pre></td></tr></table></figure><p>Then in <code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;copy&quot;: &quot;copyfiles -u 1 dist&#x2F;* ..&#x2F;apps&#x2F; &amp;&amp; copyfiles *.css ..&#x2F;apps&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then run <code>npm run copy</code></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/645&quot;&gt;#645&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Install-webpack&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="web" scheme="https://onmyway133.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>How to assert asynchronously in XCTest</title>
    <link href="https://onmyway133.github.io/blog/How-to-assert-asynchronously-in-XCTest/"/>
    <id>https://onmyway133.github.io/blog/How-to-assert-asynchronously-in-XCTest/</id>
    <published>2020-04-28T07:23:52.000Z</published>
    <updated>2020-04-28T07:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/644">#644</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Asynchronously assertion</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">XCTAssertWait</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        timeout: TimeInterval = <span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> expression: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>,</span><br><span class="line">        <span class="number">_</span>: <span class="type">String</span> = <span class="string">""</span>,</span><br><span class="line">        file <span class="number">_</span>: <span class="type">StaticString</span> = #file,</span><br><span class="line">        line <span class="number">_</span>: <span class="type">UInt</span> = #line</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">let</span> expectation = <span class="keyword">self</span>.expectation(description: #function)</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + timeout) &#123;</span><br><span class="line">            expression()</span><br><span class="line">            expectation.fulfill()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> waiter = <span class="type">XCTWaiter</span>()</span><br><span class="line">        <span class="type">XCTAssertTrue</span>(waiter.wait(<span class="keyword">for</span>: [expectation], timeout: timeout + <span class="number">1</span>) == .completed)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/644&quot;&gt;#644&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="testing" scheme="https://onmyway133.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple filter menu in css</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-filter-menu-in-css/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-filter-menu-in-css/</id>
    <published>2020-04-27T20:01:47.000Z</published>
    <updated>2020-04-27T20:03:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/643">#643</a></strong></p><p>Use material icons</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/icon?family=Material+Icons"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-id">#filter-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#filter-items</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(52, 46, 173, 0.25), <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span> <span class="number">0</span> <span class="built_in">rgba</span>(52, 46, 173, 0.1);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.filter-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.filter-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(239, 240, 241);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.filter-item</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.9);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.filter-item</span><span class="selector-class">.selected</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(239, 240, 241);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.material-icons</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"Material Icons"</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">mix</span>(#fff, #342ead, 60%);</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.25s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.name</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">mix</span>(#fff, #342ead, 70%);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.25s</span> ease;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">filters.forEach(<span class="function">(<span class="params">filter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> item = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    item.href = <span class="string">'#'</span></span><br><span class="line">    item.className = <span class="string">'filter-item'</span></span><br><span class="line">    container.appendChild(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> icon = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>)</span><br><span class="line">    icon.className = <span class="string">'material-icons'</span></span><br><span class="line">    icon.innerText = filter.icon</span><br><span class="line">    item.appendChild(icon)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> name = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>)</span><br><span class="line">    name.className = <span class="string">'name'</span></span><br><span class="line">    name.innerText = filter.name</span><br><span class="line">    item.appendChild(name)</span><br><span class="line"></span><br><span class="line">    item.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        handleFilterClick(item, filter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/643&quot;&gt;#643&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use material icons&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple grid gallery in css</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-grid-gallery-in-css/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-grid-gallery-in-css/</id>
    <published>2020-04-26T16:53:52.000Z</published>
    <updated>2020-04-26T16:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/642">#642</a></strong></p><p>Specify container with <code>flex-wrap</code> and <code>justify-content</code>, and item with <code>float: left</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#232330</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: silver;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">8px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(10, 10, 10, 0.2);</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/642&quot;&gt;#642&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Specify container with
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>How to add independent page in hexo</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-independent-page-in-hexo/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-independent-page-in-hexo/</id>
    <published>2020-04-26T02:57:51.000Z</published>
    <updated>2020-04-26T02:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/641">#641</a></strong></p><p>Create a new page</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page mydemo</span><br></pre></td></tr></table></figure><p>Remove <code>index.md</code> and create <code>index.html</code>, you can reference external css and js in this <code>index.html</code>. Hexo has <code>hexo new page mydemo --slug</code> but it does not support page hierarchy</p><p>Specify no layout so it is independent page.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/641&quot;&gt;#641&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a new page&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="web" scheme="https://onmyway133.github.io/tags/web/"/>
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
