<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2021-01-29T08:12:26.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to extend custom View in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-extend-custom-View-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-extend-custom-View-in-SwiftUI/</id>
    <published>2021-01-28T19:23:25.000Z</published>
    <updated>2021-01-29T08:12:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/763">#763</a></strong></p><p>I usually break down a big struct into smaller views and extensions. For example I have a <code>ClipboardCell</code> that has a lot of <code>onReceive</code> so I want to move these to another component.</p><p>One way to do that is to extend <code>ClipboardCell</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ClipboardCell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onReceiveKeyboard</span><span class="params">()</span></span> -&gt; some <span class="type">View</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>but then when we want to use this, we get <code>some View has no member onReceiveKeyboard</code> as <code>self</code> here after some Swift modifier becomes <code>some View</code>, unless we call <code>onReceiveKeyboard</code> first</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">       .padding()</span><br><span class="line">       .onReceiveKeyboard()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-ViewModifier"><a href="#Use-ViewModifier" class="headerlink" title="Use ViewModifier"></a>Use ViewModifier</h3><p>The SwiftUI is to use <code>ViewModifier</code> where we can inject Binding and functions</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCellOnKeyboardModifier</span>: <span class="title">ViewModifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isSelected: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> showsPreview: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> showsViewRaw: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">let</span> onCopy: () -&gt; <span class="type">Void</span></span><br><span class="line">    <span class="keyword">let</span> onDelete: () -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">body</span><span class="params">(content: Content)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        content.onReceive(</span><br><span class="line">            <span class="type">NotificationCenter</span>.<span class="keyword">default</span></span><br><span class="line">                .publisher(<span class="keyword">for</span>: .didKeyboardCopyItem)</span><br><span class="line">                .receive(on: <span class="type">RunLoop</span>.main),</span><br><span class="line">            perform: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> isSelected <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                onCopy()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>Then we can consume it and pass parameters</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">       .padding()</span><br><span class="line">       .modifier(</span><br><span class="line">           <span class="type">ClipboardCellOnKeyboardModifier</span>(...)</span><br><span class="line">       )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pass-State-and-Binding"><a href="#Pass-State-and-Binding" class="headerlink" title="Pass State and Binding"></a>Pass State and Binding</h3><p>For now SwiftUI seems to have a bug that ViewModifier does not listen to <code>onReceive</code>, we can extend generic <code>View</code> and pass parameters instead</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onClipboardCellReceiveKeyboard</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        isSelected: Bool,</span></span></span><br><span class="line"><span class="function"><span class="params">        showsPreview: Binding&lt;Bool&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">        showsViewRaw: Binding&lt;Bool&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">        onCopy: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>,</span><br><span class="line">        onDelete: () -&gt; <span class="type">Void</span></span><br><span class="line">    ) -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.onReceive(</span><br><span class="line">            <span class="type">NotificationCenter</span>.<span class="keyword">default</span></span><br><span class="line">                .publisher(<span class="keyword">for</span>: .didKeyboardCopyItem)</span><br><span class="line">                .receive(on: <span class="type">RunLoop</span>.main),</span><br><span class="line">            perform: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> isSelected <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                onCopy()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h3 id="Use-ObservableObject"><a href="#Use-ObservableObject" class="headerlink" title="Use ObservableObject"></a>Use ObservableObject</h3><p>Another way is to use an <code>ObservableObject</code> and encapsulate logic and state in there, and share this across views that want to consume this set of data, just like a ViewModel</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsHolder</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> items: [<span class="type">ClipboardItem</span>] = []</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> selectedItems: [<span class="type">ClipboardItem</span>] = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onnext</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onDelete</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-29 09:12:26</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/763&quot;&gt;#763&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I usually break down a big struct into
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use Sparkle for macOS app</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-Sparkle-for-macOS-app/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-Sparkle-for-macOS-app/</id>
    <published>2021-01-26T05:33:34.000Z</published>
    <updated>2021-01-26T05:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/762">#762</a></strong></p><h2 id="Install-Sparkle"><a href="#Install-Sparkle" class="headerlink" title="Install Sparkle"></a>Install Sparkle</h2><ul><li>For now, the latest stable version is 1.24.0 which supports CocoaPods OK, but still, have issues with SPM. Support non sandboxed apps</li><li>Version 2.0.0 is in beta and supports sandboxed apps</li></ul><p>To install, use CocoaPods</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:osx</span>, <span class="string">'11.0'</span></span><br><span class="line"></span><br><span class="line">target <span class="string">'MyApp'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Comment the next line if you don't want to use dynamic frameworks</span></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  pod <span class="string">'Sparkle'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><p>In your target, choose <code>Signing &amp; Capability</code> tab, change Signing Certificate from <code>Locally</code> to <code>Development</code> for code sign to work for embedded frameworks</p><h2 id="Specify-SUUpdater"><a href="#Specify-SUUpdater" class="headerlink" title="Specify SUUpdater"></a>Specify SUUpdater</h2><p>Follow Sparkle <a href="https://sparkle-project.org/documentation/">documentation</a>, let’s add an Object to Application Scene in Main.storyboard and specify <code>SUUpdater</code> class</p><p>In AppDelegate</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">checkForUpdates</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> updater = <span class="type">SUUpdater</span>.shared()</span><br><span class="line">    updater?.checkForUpdates(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Additionally, we can add an NSMenuItem and drag it to our <code>SUUpdater</code> object <code>checkForUpdates</code> method</p><p>In Info.plist, add SUFeedURL with a link to your cast file</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>SUFeedURL<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>https://onmyway133.com/MyAppCast.xml<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Configure-cast-file"><a href="#Configure-cast-file" class="headerlink" title="Configure cast file"></a>Configure cast file</h2><p>I usually upload my cast to S3 or GitHub. For GitHub with raw URL, remember that there is 5 minutes cache by default</p><p>If you follow sample cast file <a href="https://sparkle-project.org/files/sparkletestcast.xml">https://sparkle-project.org/files/sparkletestcast.xml</a></p><p>Notice that <code>sparkle:version=&quot;2.0&quot;</code> is <code>CFBundleVersion</code> which is your build number. You need to also specify <code>sparkle:shortVersionString</code> which is CFBundleShortVersionString your version number</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sparkle:shortVersionString="2.0.1"</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rss</span> <span class="attr">version</span>=<span class="string">"2.0"</span> <span class="attr">xmlns:sparkle</span>=<span class="string">"http://www.andymatuschak.org/xml-namespaces/sparkle"</span>  <span class="attr">xmlns:dc</span>=<span class="string">"http://purl.org/dc/elements/1.1/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sparkle Test App Changelog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span>&gt;</span>http://sparkle-project.org/files/sparkletestcast.xml<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Most recent changes with links to updates.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">language</span>&gt;</span>en<span class="tag">&lt;/<span class="name">language</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Version 2.0<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">          &lt;![CDATA[</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;Suspendisse sed felis ac ante ultrices rhoncus. Etiam quis elit vel nibh placerat facilisis in id leo.&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;Vestibulum nec tortor odio, nec malesuada libero. Cras vel convallis nunc.&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;Suspendisse tristique massa eget velit consequat tincidunt. Praesent sodales hendrerit pretium.&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          ]]&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pubDate</span>&gt;</span>Sat, 26 Jul 2014 15:20:11 +0000<span class="tag">&lt;/<span class="name">pubDate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enclosure</span> <span class="attr">url</span>=<span class="string">"https://sparkle-project.org/files/Sparkle%20Test%20App.zip"</span> <span class="attr">sparkle:version</span>=<span class="string">"2.0"</span> <span class="attr">length</span>=<span class="string">"107758"</span> <span class="attr">type</span>=<span class="string">"application/octet-stream"</span> <span class="attr">sparkle:dsaSignature</span>=<span class="string">"MCwCFCdoW13VBGJWIfIklKxQVyetgxE7AhQTVuY9uQT0KOV1UEk21epBsGZMPg=="</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rss</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-26 06:34:38</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/762&quot;&gt;#762&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Install-Sparkle&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use ScrollViewReader in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-ScrollViewReader-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-ScrollViewReader-in-SwiftUI/</id>
    <published>2021-01-21T12:31:00.000Z</published>
    <updated>2021-01-21T12:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/761">#761</a></strong></p><p>Does not work in macOS</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScrollView</span> &#123;</span><br><span class="line">    <span class="type">ScrollViewReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">        <span class="type">LazyVStack</span>(spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            forEachItems</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .onReceiveKeyboard(onNext: &#123;</span><br><span class="line">            onNext()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> item = selectedItem &#123;</span><br><span class="line">                proxy.scrollTo(item, anchor: .center)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, onPrevious: &#123;</span><br><span class="line">            onPrevious()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> item = selectedItem &#123;</span><br><span class="line">                proxy.scrollTo(item, anchor: .center)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/761&quot;&gt;#761&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Does not work in macOS&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to handle keyDown in NSResponder</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-keyDown-in-NSResponder/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-keyDown-in-NSResponder/</id>
    <published>2021-01-21T12:03:16.000Z</published>
    <updated>2021-01-25T19:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/760">#760</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"><span class="keyword">import</span> Omnia</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">keyDown</span><span class="params">(with event: NSEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.keyDown(with: event)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isKey(<span class="type">NSDeleteCharacter</span>, event: event) &#123;</span><br><span class="line">            <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(<span class="type">Notification</span>(name: .didKeyboardDeleteItem))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> isKey(<span class="type">NSUpArrowFunctionKey</span>, event: event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"up"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> isKey(<span class="type">NSDownArrowFunctionKey</span>, event: event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"down"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> isKey(<span class="type">NSLeftArrowFunctionKey</span>, event: event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"left"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> isKey(<span class="type">NSRightArrowFunctionKey</span>, event: event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"right"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isKey</span><span class="params">(<span class="number">_</span> key: Int, event: NSEvent)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> scalar = <span class="type">UnicodeScalar</span>(key) &#123;</span><br><span class="line">            <span class="keyword">return</span> event.characters == <span class="type">String</span>(scalar)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another way is to listen to</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSEvent</span>.addLocalMonitorForEvents(matching: .keyDown) &#123; event <span class="keyword">in</span></span><br><span class="line">       <span class="keyword">if</span> handled(with: $<span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> event</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Or create our own inspector</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">keyDown</span><span class="params">(with event: NSEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !<span class="type">EventService</span>.shared.inspect(event) &#123;</span><br><span class="line">            <span class="keyword">super</span>.keyDown(with: event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> canBecomeKey: <span class="type">Bool</span>  &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> canBecomeMain: <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> acceptsFirstResponder: <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">becomeFirstResponder</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"><span class="keyword">import</span> Omnia</span><br><span class="line"><span class="keyword">import</span> KeyboardShortcuts</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">EventService</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> combos: [<span class="type">Combo</span>] = []</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> debouncer = <span class="type">Debouncer</span>(delay: <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(<span class="number">_</span> combo: Combo)</span></span> &#123;</span><br><span class="line">        combos.append(combo)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">(<span class="number">_</span> event: NSEvent)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> combo <span class="keyword">in</span> combos &#123;</span><br><span class="line">            <span class="keyword">if</span> combo.match(event) &#123;</span><br><span class="line">                <span class="keyword">self</span>.debouncer.run &#123;</span><br><span class="line">                    combo.action()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Combo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> modifier: <span class="type">NSEvent</span>.<span class="type">ModifierFlags?</span></span><br><span class="line">        <span class="keyword">let</span> keyCode: <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span></span><br><span class="line">        <span class="keyword">let</span> action: () -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">match</span><span class="params">(<span class="number">_</span> event: NSEvent)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> modifier = modifier,</span><br><span class="line">               !event.modifierFlags.<span class="built_in">contains</span>(modifier) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> event.keyCode != keyCode.rawValue &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-25 20:05:08</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/760&quot;&gt;#760&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use built in NSImage in macos</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-built-in-NSImage-in-macos/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-built-in-NSImage-in-macos/</id>
    <published>2021-01-21T11:22:33.000Z</published>
    <updated>2021-01-21T11:22:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/759">#759</a></strong></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://hetima.github.io/fucking_nsimage_syntax/">https://hetima.github.io/fucking_nsimage_syntax/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/759&quot;&gt;#759&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Read-more&quot;&gt;&lt;a href=&quot;#Read-more&quot;
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to handle NSSearchToolbarItem in macOS 11</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-NSSearchToolbarItem-in-macOS-11/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-NSSearchToolbarItem-in-macOS-11/</id>
    <published>2021-01-21T11:12:50.000Z</published>
    <updated>2021-01-21T11:12:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/758">#758</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSToolbarItem</span>.<span class="title">Identifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> searchItem: <span class="type">NSToolbarItem</span>.<span class="type">Identifier</span> = <span class="type">NSToolbarItem</span>.<span class="type">Identifier</span>(<span class="string">"SearchItem"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> searchItem = <span class="type">NSSearchToolbarItem</span>(itemIdentifier: .searchItem)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppDelegate</span>: <span class="title">NSToolbarDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toolbar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> toolbar: NSToolbar,</span></span></span><br><span class="line"><span class="function"><span class="params">        itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,</span></span></span><br><span class="line"><span class="function"><span class="params">        willBeInsertedIntoToolbar flag: Bool</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> -&gt; <span class="type">NSToolbarItem?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> itemIdentifier &#123;</span><br><span class="line">        <span class="keyword">case</span> .searchItem:</span><br><span class="line">            searchItem.searchField.delegate = <span class="keyword">self</span></span><br><span class="line">            <span class="keyword">return</span> searchItem</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppDelegate</span>: <span class="title">NSSearchFieldDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">control</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> control: NSControl,</span></span></span><br><span class="line"><span class="function"><span class="params">        textView: NSTextView,</span></span></span><br><span class="line"><span class="function"><span class="params">        doCommandBy commandSelector: Selector</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (commandSelector == #selector(<span class="type">NSResponder</span>.insertNewline(<span class="number">_</span>:))) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"enter"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/758&quot;&gt;#758&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to do launch at login for macOS apps</title>
    <link href="https://onmyway133.github.io/blog/How-to-do-launch-at-login-for-macOS-apps/"/>
    <id>https://onmyway133.github.io/blog/How-to-do-launch-at-login-for-macOS-apps/</id>
    <published>2021-01-20T21:10:39.000Z</published>
    <updated>2021-01-20T21:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/757">#757</a></strong></p><ul><li>Use <a href="https://developer.apple.com/documentation/servicemanagement/1501557-smloginitemsetenabled?language=swift">SMLoginItemSetEnabled</a> from Service Management framework</li><li>Use a helper background app that checks and invokes our main application</li><li>Copy our helper app into <code>Library/LoginItems</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helper_dir=<span class="string">"<span class="variable">$BUILT_PRODUCTS_DIR</span>/<span class="variable">$CONTENTS_FOLDER_PATH</span>/Library/LoginItems"</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">NSApplicationDelegate</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(<span class="number">_</span> notification: Notification)</span></span> &#123;</span><br><span class="line"><span class="keyword">let</span> bundleId = <span class="type">Bundle</span>.main.bundleIdentifier!</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this more strict by only replacing at the end</span></span><br><span class="line"><span class="keyword">let</span> mainBundleId = bundleId.replacingOccurrences(of: <span class="string">"-LaunchAtLoginHelper"</span>, with: <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure the app is not already running</span></span><br><span class="line"><span class="keyword">guard</span> <span class="type">NSRunningApplication</span>.runningApplications(withBundleIdentifier: mainBundleId).isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">NSApp</span>.terminate(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pathComponents = (<span class="type">Bundle</span>.main.bundlePath <span class="keyword">as</span> <span class="type">NSString</span>).pathComponents</span><br><span class="line"><span class="keyword">let</span> mainPath = <span class="type">NSString</span>.path(withComponents: <span class="type">Array</span>(pathComponents[<span class="number">0</span>...(pathComponents.<span class="built_in">count</span> - <span class="number">5</span>)]))</span><br><span class="line"><span class="type">NSWorkspace</span>.shared.launchApplication(mainPath)</span><br><span class="line"><span class="type">NSApp</span>.terminate(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://jogendra.dev/implementing-launch-at-login-feature-in-macos-apps">https://jogendra.dev/implementing-launch-at-login-feature-in-macos-apps</a></li><li><a href="https://github.com/sindresorhus/LaunchAtLogin/blob/master/Sources/LaunchAtLogin/copy-helper.sh">https://github.com/sindresorhus/LaunchAtLogin/blob/master/Sources/LaunchAtLogin/copy-helper.sh</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/757&quot;&gt;#757&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to fix overlapped navigation titles in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-fix-overlapped-navigation-titles-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-fix-overlapped-navigation-titles-in-SwiftUI/</id>
    <published>2021-01-20T20:55:35.000Z</published>
    <updated>2021-01-20T20:59:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/756">#756</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NavigationLink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fixOverlap</span><span class="params">()</span></span> -&gt; <span class="type">AnyView</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">UIDevice</span>.current.userInterfaceIdiom == .phone &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.isDetailLink(<span class="literal">false</span>).erase()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.erase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://www.dabblingbadger.com/blog/2020/12/11/a-quick-fix-for-overlapping-navigation-titles-in-swiftui">https://www.dabblingbadger.com/blog/2020/12/11/a-quick-fix-for-overlapping-navigation-titles-in-swiftui</a><blockquote><p> As far as I can tell, this bug only shows up if you: 1) have the navigation title displayMode of a destination view set to .large and 2) have added items to the navigation bar using the .navigationBarItems modifier.</p></blockquote></li></ul><hr><p><strong>Updated at</strong> 2021-01-20 21:59:41</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/756&quot;&gt;#756&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use NSWindow style and NSToolbar in AppKit</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-NSWindow-style-and-NSToolbar-in-AppKit/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-NSWindow-style-and-NSToolbar-in-AppKit/</id>
    <published>2021-01-20T04:42:57.000Z</published>
    <updated>2021-01-21T11:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/755">#755</a></strong></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://github.com/martinlexow/SwiftUIWindowStyles">https://github.com/martinlexow/SwiftUIWindowStyles</a></li><li><a href="https://github.com/lukakerr/NSWindowStyles">https://github.com/lukakerr/NSWindowStyles</a></li><li><a href="https://github.com/marioaguzman/toolbar">https://github.com/marioaguzman/toolbar</a></li></ul><hr><p><strong>Updated at</strong> 2021-01-21 12:46:04</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/755&quot;&gt;#755&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Read-more&quot;&gt;&lt;a href=&quot;#Read-more&quot;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use NSSplitViewController in AppKit</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-NSSplitViewController-in-AppKit/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-NSSplitViewController-in-AppKit/</id>
    <published>2021-01-20T04:30:37.000Z</published>
    <updated>2021-01-20T04:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/754">#754</a></strong></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://github.com/KevinGutowski/SplitConfigurations">https://github.com/KevinGutowski/SplitConfigurations</a></li></ul><hr><p><strong>Updated at</strong> 2021-01-20 05:30:46</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/754&quot;&gt;#754&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Read-more&quot;&gt;&lt;a href=&quot;#Read-more&quot;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to create and notarize dmg file</title>
    <link href="https://onmyway133.github.io/blog/How-to-create-and-notarize-dmg-file/"/>
    <id>https://onmyway133.github.io/blog/How-to-create-and-notarize-dmg-file/</id>
    <published>2021-01-18T07:45:04.000Z</published>
    <updated>2021-01-18T07:45:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/753">#753</a></strong></p><ul><li>Archive and export app from Xcode</li><li>Create dmg </li><li>Use <a href="https://github.com/sindresorhus/create-dmg">create-dmg</a><br>It is said that we don’t need to notarize the app, we can just notarize the whole dmg</li><li>Send dmg to notarize</li></ul><p>This takes a while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun altool -t osx -f PastePal.dmg -primary-bundle-id com.onmyway133.PastePal --notarize-app -u onmyway133@gmail.com -p APP_SPECIFIC_PASSWORD</span><br></pre></td></tr></table></figure><p>If wrong password, you will get error</p><blockquote><p>Error: code -1011 (Failed to authenticate for session: (<br>    “Error Domain=ITunesConnectionAuthenticationErrorDomain Code=-22938 &quot;Sign in with the app-specific password you generated. If you forgot the app-specific password or need to create a new one, go to appleid.apple.com&quot; UserInfo={NSLocalizedRecoverySuggestion=Sign in with the app-specific password you generated. If you forgot the app-specific password or need to create a new one, go to appleid.apple.com, NSLocalizedDescription=Sign in with the app-specific password you generated. If you forgot the app-specific password or need to create a new one, go to appleid.apple.com, NSLocalizedFailureReason=App Store operation failed.}”<br>) Unable to upload your app for notarization.)</p></blockquote><p>It succeeds, you will get ticket ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Downloaded ticket has been stored at file:&#x2F;&#x2F;&#x2F;var&#x2F;folders&#x2F;mn&#x2F;whdh16qj6jldpcdpgyjhp35m0000gn&#x2F;T&#x2F;51e3b8bb-1b86-4cd6-abcd-bca469561234.ticket.</span><br></pre></td></tr></table></figure><ul><li>Check notarization info</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun altool –-notarization-info TICKET_ID -u &quot;onmyway133@gmail.com&quot;</span><br></pre></td></tr></table></figure><ul><li>Staple the dmg</li></ul><p>Once we have the dmg notarized, we need to staple it</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun stapler staple -v PastePal.dmg</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow">Customizing the Notarization Workflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/753&quot;&gt;#753&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Archive and export app from
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use module import in nodejs</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-module-import-in-nodejs/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-module-import-in-nodejs/</id>
    <published>2021-01-17T20:49:33.000Z</published>
    <updated>2021-01-17T20:49:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/752">#752</a></strong></p><p>Use <a href="https://www.npmjs.com/package/esm">esm</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install esm</span><br></pre></td></tr></table></figure><p>In our code, import as normal</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// intended to be run after babel, and in ./dist folder</span></span><br><span class="line"><span class="keyword">import</span> factory <span class="keyword">from</span> <span class="string">'data'</span></span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br></pre></td></tr></table></figure><p>Then use <code>esm</code> to convert</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"generator"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"npx babel index.js --out-file dist/index.js &amp;&amp; node -r esm dist/index.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://stackoverflow.com/questions/45854169/how-can-i-use-an-es6-import-in-node-js">https://stackoverflow.com/questions/45854169/how-can-i-use-an-es6-import-in-node-js</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/752&quot;&gt;#752&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="node" scheme="https://onmyway133.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>How to use relative file module with Create React app</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-relative-file-module-with-Create-React-app/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-relative-file-module-with-Create-React-app/</id>
    <published>2021-01-17T20:47:35.000Z</published>
    <updated>2021-01-17T20:47:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/751">#751</a></strong></p><p>Declare <code>data/package.json</code> to make it into node module</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"data"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"homepage"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"main.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then in <code>landing/package.json</code>, use <code>file</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"landing"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"homepage"</span>: <span class="string">"."</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@emotion/core"</span>: <span class="string">"^10.0.28"</span>,</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^16.13.1"</span>,</span><br><span class="line">    <span class="string">"react-image"</span>: <span class="string">"^2.4.0"</span>,</span><br><span class="line">    <span class="string">"react-scripts"</span>: <span class="string">"3.4.1"</span>,</span><br><span class="line">    <span class="string">"data"</span>: <span class="string">"file:../data"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/751&quot;&gt;#751&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Declare &lt;code&gt;data/package.json&lt;/code&gt; to
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
      <category term="node" scheme="https://onmyway133.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>How to open downloaded app from browser in Big Sur</title>
    <link href="https://onmyway133.github.io/blog/How-to-open-downloaded-app-from-browser-in-Big-Sur/"/>
    <id>https://onmyway133.github.io/blog/How-to-open-downloaded-app-from-browser-in-Big-Sur/</id>
    <published>2021-01-15T08:31:16.000Z</published>
    <updated>2021-01-15T08:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/750">#750</a></strong></p><p>Recently when distributing staging releases of my app <a href="https://onmyway133.com/pastepal/">PastePal</a> via GitHub release or Google Drive, people had hard time opening it</p><img width="454" alt="Screenshot 2021-01-15 at 10 26 26" src="https://user-images.githubusercontent.com/2284279/104707010-210af880-571c-11eb-8174-91efe296b886.png"><p>The displayed error is </p><blockquote><p>You do not have permission to open the application</p></blockquote><p>The more verbose error when using <code>open</code> command in Terminal is</p><blockquote><p>The application cannot be opened for an unexpected reason, error=Error Domain=NSOSStatusErrorDomain Code=-10826 “kLSNoLaunchPermissionErr: User doesn’t have permission to launch the app (managed networks)” UserInfo={_LSFunction=_LSLaunchWithRunningboard, _LSLine=2508, NSUnderlyingError=0x7fa9c750d850 {Error Domain=RBSRequestErrorDomain Code=5 “Launch failed.” UserInfo={NSLocalizedFailureReason=Launch failed., NSUnderlyingError=0x7fa9c750e010 {Error Domain=NSPOSIXErrorDomain Code=153 “Unknown error: 153” UserInfo={NSLocalizedDescription=Launchd job spawn failed with error: 153}}}}}</p></blockquote><p>From further investigation. This is restriction of Big Sur for downloaded zip file from browser</p><ul><li>When decompressing the .zip, the application contents didn’t retain the execute bits. Add it back with <code>sudo chmod -R 755 /path/to/app</code></li><li>Since the application was downloaded by a web browser the quarantine bits are set on the decompressed files. Remove that with <code>sudo xattr -dr com.apple.quarantine /path/to/app</code></li></ul><p>It still didn’t work despite the fact that I enabled apps from identified developers and that I also notarized my app.</p><img width="780" alt="Screenshot 2021-01-15 at 10 29 49" src="https://user-images.githubusercontent.com/2284279/104707376-9aa2e680-571c-11eb-8165-3b03ad9d0351.png"><p>The reason was I zip my <code>PastePal.app</code> before uploading to Google Drive. Now I just upload the bare <code>PastePal.app</code>, upon downloading Google Drive still zip the app but when I apply the <code>chmod</code> and <code>xattr</code> it works now 🎉 </p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://apple.stackexchange.com/questions/408752/the-message-you-do-not-have-permission-to-open-the-application-is-shown-when-t">https://apple.stackexchange.com/questions/408752/the-message-you-do-not-have-permission-to-open-the-application-is-shown-when-t</a></li></ul><hr><p><strong>Updated at</strong> 2021-01-15 09:31:23</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/750&quot;&gt;#750&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently when distributing staging
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to add alternative app icons for iOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-alternative-app-icons-for-iOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-alternative-app-icons-for-iOS/</id>
    <published>2021-01-14T05:01:47.000Z</published>
    <updated>2021-01-14T05:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/749">#749</a></strong></p><p>Some apps want to support alternative app icons in Settings where user can choose to update app icon.<br>Here’s some must do to make it work, as of Xcode 12.2</p><ul><li>In Info.plist, must declare <code>CFBundleIcons</code> with both <code>CFBundlePrimaryIcon</code> and <code>CFBundleAlternateIcons</code></li><li>Icons must be in project folder, not Asset Catalog</li></ul><p>Here’s how it is done on my app <a href="https://onmyway133.com/pastepal/">PastePal</a></p><img width="560" alt="Screenshot 2021-01-14 at 06 46 40" src="https://user-images.githubusercontent.com/2284279/104550028-4290b500-5634-11eb-97dd-69e4a5aca532.png"><h3 id="Add-app-icons-to-project-folder"><a href="#Add-app-icons-to-project-folder" class="headerlink" title="Add app icons to project folder"></a>Add app icons to project folder</h3><p>Prepare icons, like Icon1, Icon2 with 2 variants for 2x and 3x. These need to be added to project folder. When I add these to Asset Catalog it does not update app icon. I usually add a new folder in project like <code>Resource/AlternateAppIcons</code></p><p>The default 1x size for iPhone icon size from iOS 7 to iOS 14 is 60px.</p><ul><li><a href="mailto:Icon1@2x.png">Icon1@2x.png</a> : 120x120</li><li><a href="mailto:Icon1@3x.png">Icon1@3x.png</a>: 180x180</li></ul><h3 id="Declare-in-Info-plist"><a href="#Declare-in-Info-plist" class="headerlink" title="Declare in Info.plist"></a>Declare in Info.plist</h3><p>Although declaring <code>CFBundlePrimaryIcon</code> seems unnecessary, I find that without this it does not work. I use <code>AppIcon60x60</code> as the compiled one from Asset Catalog for our main <code>AppIcon</code></p><p>For <code>UIPrerenderedIcon</code>, a boolean value indicating whether the app’s icon already contains a shine effect. We set to false to allow iOS to apply round and glossy effect to our icon.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIcons<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundlePrimaryIcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>AppIcon60x60<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIPrerenderedIcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleAlternateIcons<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>AppIconPride1<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>AppIconPride1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIPrerenderedIcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>AppIconPride2<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIconFiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>AppIconPride2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIPrerenderedIcon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Asset-Catalog"><a href="#Asset-Catalog" class="headerlink" title="Asset Catalog"></a>Asset Catalog</h3><p>Since we’re using Asset Catalog, if we simply use UIImage with named, it will load by default in Asset Catalog, unless we manually specify bundle path. For simple demo, we can just copy our images again to Asset Catalog so we can show in the app</p><p>I usually have an enum of <code>AlternateAppIcon</code> so I can display in a grid and let user choose</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AlternateAppIcon</span>: <span class="title">String</span>, <span class="title">CaseIterable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">AlternateAppIcon</span> &#123; <span class="keyword">self</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> main = <span class="string">"Main"</span></span><br><span class="line">    <span class="keyword">case</span> pride1 = <span class="string">"Pride1"</span></span><br><span class="line">    <span class="keyword">case</span> pride2 = <span class="string">"Pride2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">onChange</span><span class="params">(<span class="number">_</span> icon: AlternateAppIcon)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="type">UIApplication</span>.shared.supportsAlternateIcons <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">switch</span> icon &#123;</span><br><span class="line">    <span class="keyword">case</span> .main:</span><br><span class="line">        <span class="type">UIApplication</span>.shared.setAlternateIconName(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="type">UIApplication</span>.shared.setAlternateIconName(icon.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Change-app-icon-for-iPad"><a href="#Change-app-icon-for-iPad" class="headerlink" title="Change app icon for iPad"></a>Change app icon for iPad</h3><p>So far we’re only talk about iPhone. To support iPad, we need to specify iPad versions in Info.plist with <code>CFBundleIcons~ipad</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- CFBundleIcons</span><br><span class="line">  - CFBundleAlternateIcons</span><br><span class="line">    - Icon Name</span><br><span class="line">      - CFBundleIconFiles</span><br><span class="line">- CFBundleIcons~ipad</span><br><span class="line">  - CFBundleAlternateIcons</span><br><span class="line">    - Icon Name</span><br><span class="line">     - CFBundleIconFiles</span><br></pre></td></tr></table></figure><p>Also notice the size for icons on iPad</p><img width="678" alt="Screenshot 2021-01-14 at 07 01 23" src="https://user-images.githubusercontent.com/2284279/104551018-5210fd80-5636-11eb-855d-10efc871e19d.png"><hr><p><strong>Updated at</strong> 2021-01-14 06:02:28</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/749&quot;&gt;#749&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some apps want to support alternative app
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>How to make popup button in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-popup-button-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-popup-button-in-SwiftUI-for-macOS/</id>
    <published>2021-01-13T04:56:03.000Z</published>
    <updated>2021-01-21T08:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/748">#748</a></strong></p><p>There is said to be <a href="https://developer.apple.com/documentation/swiftui/popupbuttonpickerstyle">PopUpButtonPickerStyle</a> and <a href="https://developer.apple.com/documentation/swiftui/menupickerstyle">MenuPickerStyle</a> but these don’t seem to work.</p><p>There’s <code>Menu</code> button it shows a dropdown style. We fake it by fading this and overlay with a button. <code>allowsHitTesting</code> does not work, but <code>disabled</code> seems to do the trick</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Menu</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">"About"</span>, action: <span class="type">ActionService</span>.onAbout)</span><br><span class="line">    <span class="type">Button</span>(<span class="string">"Quit"</span>, action: <span class="type">ActionService</span>.onQuit)</span><br><span class="line">&#125; label: &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line">.frame(width: <span class="number">24</span>)</span><br><span class="line">.opacity(<span class="number">0.01</span>)</span><br><span class="line">.overlay(</span><br><span class="line">    makeButton(action: &#123;&#125;, <span class="string">"gearshape.fill"</span>)</span><br><span class="line">        .disabled(<span class="literal">true</span>)</span><br><span class="line">        .foregroundColor(<span class="type">Color</span>.secondaryLabel)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Follow <a href="https://github.com/superhighfives/pika/blob/main/Pika/Views/ColorMenu.swift">pika</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ColorMenu</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> eyedropper: <span class="type">Eyedropper</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> #available(<span class="type">OSX</span> <span class="number">11.0</span>, *) &#123;</span><br><span class="line">            <span class="type">Menu</span> &#123;</span><br><span class="line">                <span class="type">ColorMenuItems</span>(eyedropper: eyedropper)</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">"ellipsis.circle"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .menuStyle(<span class="type">BorderlessButtonMenuStyle</span>(showsMenuIndicator: <span class="literal">false</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">MenuButton</span>(label: <span class="type">IconImage</span>(name: <span class="string">"ellipsis.circle"</span>), content: &#123;</span><br><span class="line">                <span class="type">ColorMenuItems</span>(eyedropper: eyedropper)</span><br><span class="line">            &#125;)</span><br><span class="line">                .menuButtonStyle(<span class="type">BorderlessButtonMenuButtonStyle</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ColorMenuItems</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> eyedropper: <span class="type">Eyedropper</span></span><br><span class="line">    <span class="keyword">let</span> pasteboard = <span class="type">NSPasteboard</span>.general</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">0.0</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(eyedropper.title)</span><br><span class="line">            <span class="type">Divider</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Button</span>(action: &#123;</span><br><span class="line">            pasteboard.clearContents()</span><br><span class="line">            pasteboard.setString(eyedropper.color.toHex, forType: .string)</span><br><span class="line">        &#125;, label: &#123; <span class="type">Text</span>(<span class="string">"Copy color hex"</span>) &#125;)</span><br><span class="line">        <span class="type">Button</span>(action: &#123;</span><br><span class="line">            pasteboard.clearContents()</span><br><span class="line">            pasteboard.setString(eyedropper.color.toRGB, forType: .string)</span><br><span class="line">        &#125;, label: &#123; <span class="type">Text</span>(<span class="string">"Copy RGB values"</span>) &#125;)</span><br><span class="line">        <span class="type">Button</span>(action: &#123;</span><br><span class="line">            pasteboard.clearContents()</span><br><span class="line">            pasteboard.setString(eyedropper.color.toHSB, forType: .string)</span><br><span class="line">        &#125;, label: &#123; <span class="type">Text</span>(<span class="string">"Copy HSB values"</span>) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Need to specify <code>.fixedSize()</code> for menu rows to hug content. Can also use opacity to reduce Menu button color</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Menu</span></span><br><span class="line">    .fixedSize()</span><br><span class="line">    .opacity(<span class="number">0.8</span>)</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-21 09:12:48</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/748&quot;&gt;#748&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There is said to be &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use UITextView in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-UITextView-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-UITextView-in-SwiftUI/</id>
    <published>2021-01-08T19:17:59.000Z</published>
    <updated>2021-01-08T19:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/747">#747</a></strong></p><p>Need to use <code>Coordinator</code> conforming to <code>UITextViewDelegate</code> to apply changes back to <code>Binding</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyTextView</span>: <span class="title">UIViewRepresentable</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>: <span class="title">NSObject</span>, <span class="title">UITextViewDelegate</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parent: <span class="type">MyTextView</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span>(parent: <span class="type">MyTextView</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.parent = parent</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">textViewDidChange</span><span class="params">(<span class="number">_</span> textView: UITextView)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> textView.text != parent.text &#123;</span><br><span class="line">                parent.text = textView.text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span><span class="params">()</span></span> -&gt; <span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="type">Coordinator</span>(parent: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">UITextView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">UITextView</span>()</span><br><span class="line">        view.isScrollEnabled = <span class="literal">true</span></span><br><span class="line">        view.isEditable = <span class="literal">true</span></span><br><span class="line">        view.isUserInteractionEnabled = <span class="literal">true</span></span><br><span class="line">        view.font = <span class="type">UIFont</span>.preferredFont(forTextStyle: .body)</span><br><span class="line">        view.delegate = context.coordinator</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIView</span><span class="params">(<span class="number">_</span> uiView: UITextView, context: Context)</span></span> &#123;</span><br><span class="line">        uiView.text = text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/747&quot;&gt;#747&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Need to use &lt;code&gt;Coordinator&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to check app going to background in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-check-app-going-to-background-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-check-app-going-to-background-in-SwiftUI/</id>
    <published>2021-01-07T08:25:52.000Z</published>
    <updated>2021-01-07T08:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/746">#746</a></strong></p><p>From iOS 13, the default is to support multiple scene, so the the old UIApplicationDelegate lifecycle does not work. Double check your <code>Info.plist</code> for <code>UIApplicationSceneManifest</code> key</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UIApplicationSceneManifest<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIApplicationSupportsMultipleScenes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><p>One way to be notified about application life cycle is to use <code>UIApplicationDelegateAdaptor</code> and via <code>NotificationCenter</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> FontAwesomeSwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : <span class="keyword">Any</span>]? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="type">FontAwesome</span>.register()</span><br><span class="line">        <span class="type">PreferenceManager</span>.shared.load()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyAwesomeApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    @<span class="type">UIApplicationDelegateAdaptor</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">var</span> appDelegate</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">MainView</span>(store: <span class="type">Store</span>.shared)</span><br><span class="line">                .onReceive(</span><br><span class="line">                    <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.publisher(</span><br><span class="line">                        <span class="keyword">for</span>: <span class="type">UIApplication</span>.didEnterBackgroundNotification)) &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                    <span class="type">PreferenceManager</span>.shared.save()</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/746&quot;&gt;#746&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From iOS 13, the default is to support
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use selection in List in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-selection-in-List-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-selection-in-List-in-SwiftUI/</id>
    <published>2021-01-06T20:04:59.000Z</published>
    <updated>2021-01-06T20:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/745">#745</a></strong></p><p>I used to use <code>selection</code> with Binding where wrappedValue is optional, together with tag in SwiftUI for macOS, and it shows current selection</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Binding</span></span><br><span class="line"><span class="keyword">var</span> selection: <span class="type">Tag?</span> = .all</span><br><span class="line"></span><br><span class="line"><span class="type">List</span>(section: $selection) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"All"</span>)</span><br><span class="line">         .tag(<span class="type">Tag</span>.all)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the API, looks like <code>Binding&lt;Set&gt;</code> is for multiple selection, and <code>Binding&lt;Optional&gt;</code> is for single selection<br> Looking at <a href="https://developer.apple.com/documentation/swiftui/list">List</a> signature, I see that selection uses wrappedValue as <code>Set</code> for <code>Binding&lt;Set&lt;SelectionValue&gt;&gt;?</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>&lt;<span class="type">Data</span>, <span class="type">ID</span>, <span class="type">RowContent</span>&gt;(<span class="type">Data</span>, id: <span class="type">KeyPath</span>&lt;<span class="type">Data</span>.<span class="type">Element</span>, <span class="type">ID</span>&gt;, selection: <span class="type">Binding</span>&lt;<span class="type">Set</span>&lt;<span class="type">SelectionValue</span>&gt;&gt;?, rowContent: (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">RowContent</span>)</span><br></pre></td></tr></table></figure><p>So let’s use Set. It shows current selection and I don’t need to use <code>.tag</code> also</p><pre><code class="swift"><span class="keyword">let</span> selection: <span class="type">Binding</span>&lt;<span class="type">Set</span>&lt;<span class="type">SidebarTag</span>&gt;&gt; = <span class="type">Binding</span>&lt;<span class="type">Set</span>&lt;<span class="type">SidebarTag</span>&gt;&gt;(    <span class="keyword">get</span>: { <span class="type">Set</span>(arrayLiteral: store.sidebarTag) },    <span class="keyword">set</span>: { newValue <span class="keyword">in</span>        <span class="type">DispatchQueue</span>.main.async {            <span class="keyword">if</span> <span class="keyword">let</span> first = newValue.first {                store.sidebarTag = first            }        }    })<span class="type">List</span>(selection: selection) {    <span class="type">Text</span>(<span class="string">"All"</span>)}</code></pre><hr><p><strong>Updated at</strong> 2021-01-06 21:13:43</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/745&quot;&gt;#745&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I used to use &lt;code&gt;selection&lt;/code&gt; with
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to simplify communication patterns with closure in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-simplify-communication-patterns-with-closure-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-simplify-communication-patterns-with-closure-in-Swift/</id>
    <published>2021-01-06T12:13:34.000Z</published>
    <updated>2021-01-06T12:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/744">#744</a></strong></p><p>As someone who builds lots of <a href="https://onmyway133.com">apps</a>, I try to find quick ways to do things. One of them is to avoid repetitive and cumbersome APIs. That’s why I built <a href="https://github.com/onmyway133/Anchors">Anchors</a> to <a href="https://onmyway133.com/blog/how-to-make-auto-layout-more-convenient-in-ios/">make Auto Layout more convenient</a>, <a href="https://github.com/onmyway133/Omnia">Omnia</a> to add missing extensions. The next thing in the itchy list is the many ways to communicate among objects in iOS and macOS development that can be very annoying sometimes.</p><p>This post is my take on tackling some communication patterns issue and how to make it simpler with <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a>. The learning applies for both iOS and macOS development, and code is in Swift 5.</p><h3 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h3><ul><li><a href="">The many communication patterns</a></li><li><a href="">Associated objects</a></li><li><a href="">Protocol with associated type</a></li><li><a href="e">Action to RxSwift observable</a></li><li><a href="">Timer keeps a strong reference to its target</a></li><li><a href="">Key-value observing in Swift 5</a></li><li><a href="">Block-based Notification Center</a></li></ul><h2 id="The-many-communication-patterns"><a href="#The-many-communication-patterns" class="headerlink" title="The many communication patterns"></a>The many communication patterns</h2><p>In iOS, we can handle button tap by using addTarget which is a function that any UIControl has:</p><pre><code>let button = UIButton()button.addTarget(self, action: #selector(buttonTouched(_:)), for: .touchUpInside)@objc func buttonTouched(_ sender: UIButton) {}</code></pre><p>In macOS, due to historical reasons, the syntax is a bit different:</p><pre><code>button.target = selfbutton.action = #selector(buttonTouched(_:))@objc func buttonTouched(_ sender: NSButton) {}</code></pre><p>The more complex the app, the more we need to split responsibilities for classes and make them communicate. Target action is not the only way for objects communication, there are delegates, notification center, KVO and blocks. All of these are used all over the placed within iOS SDKs. Not only do we have to be aware of syntax differences, but we also have to care about how and when to use one over another.</p><p>This article Communication Patterns from objc.io is my favorite and many of the principles still hold true for now.</p><p><img src="https://cdn-images-1.medium.com/max/2268/0*sr1z90rXBwO-GS3K.png" alt="[https://www.objc.io/issues/7-foundation/communication-patterns/](https://www.objc.io/issues/7-foundation/communication-patterns/)"><em><a href="https://www.objc.io/issues/7-foundation/communication-patterns/">https://www.objc.io/issues/7-foundation/communication-patterns/</a></em></p><p>As I do many apps, I’m a bit baffled by cumbersome APIs, I wish I could write code in a more succinct and convenient way. Something like:</p><pre><code>button.on.tap { print(&quot;button was tapped&quot; }user.on.propertyChange(\.name) { print(&quot;name has changed to \($0)&quot;}tableView.on.tapRow { print(&quot;row \($0) was tapped&quot; }</code></pre><p>This may seem a bit overengineered and some of you may feel OK with the iOS APIs. I have to admit that I prefer explicit over the clever code, but in this case, we can make the APIs look a bit nicer. This is achieved with a less known featured in ObjC Runtime called associated objects.</p><p>In the old Objective C age, there was the famous <a href="https://github.com/BlocksKit/BlocksKit">BlocksKit</a> which allows us to deal with UIKit/AppKit in the handy block syntax. Although Objective C block is hard to declare, they are much more declarative than other communication patterns like delegate or handling UIAlert actions. And with the closure in Swift, we can do even nicer things.</p><h2 id="Associated-objects"><a href="#Associated-objects" class="headerlink" title="Associated objects"></a>Associated objects</h2><p>With Objective C category and Swift extension, we can’t add a stored property, that’s where associated objects come into play. The associated object allows us to attach other objects to the lifetime of any NSObject , with these 2 free functions objc_getAssociatedObject and objc_setAssociatedObject .</p><p>The associated object lies in the Objective C runtime category and can be considered hacky, but it has shown to be very effective in some scenarios.</p><h3 id="Detecting-object-deallocation"><a href="#Detecting-object-deallocation" class="headerlink" title="Detecting object deallocation"></a>Detecting object deallocation</h3><p>Since the associated object is attached to the host object, there’s this very handy use case that allows detection of the life cycle of the host object. We can, for example, observe UIViewControllerto tell if it has really been deallocated.</p><pre><code>class Notifier {    deinit {        print(&quot;host object was deinited&quot;)    }}extension UIViewController {    private struct AssociatedKeys {        static var notifier = &quot;notifier&quot;    }var notifier: Notifier? {        get {            return objc_getAssociatedObject(self, &amp;AssociatedKeys.notifier) as? Notifier        }set {            if let newValue = newValue {                objc_setAssociatedObject(                    self,                    &amp;AssociatedKeys.notifier,                    newValue as Notifier?,                    .OBJC_ASSOCIATION_RETAIN_NONATOMIC                )            }        }    }}</code></pre><p>Then if we at some time set the host object to nil, the associated object will be deallocated too, giving us a callback to handle to deinit event:</p><pre><code>var viewController: UIViewController? = UIViewController()viewController?.notifier = Notifier()viewController = nilXCTAssertNil(viewController?.notifier)</code></pre><h3 id="Confusing-code-completion"><a href="#Confusing-code-completion" class="headerlink" title="Confusing code completion"></a>Confusing code completion</h3><p>If we’re gonna make the on extension to UIButton, UITableView, UIViewController we have to add the associated object into NSObject for all these classes to have on property.</p><pre><code>class On {    func tap(_ closure: () -&gt; Void) {}    func tapRow(_ closure: () -&gt; Void) {}    func textChange(_ closure: () -&gt; Void) {}}</code></pre><p>to NSObject:</p><pre><code>extension NSObject {    private struct AssociatedKeys {        static var on = &quot;on&quot;    }var on: On? {        get {            return objc_getAssociatedObject(self, &amp;AssociatedKeys.on) as? On        }set {            if let newValue = newValue {                objc_setAssociatedObject(                    self,                    &amp;AssociatedKeys.on,                    newValue as On?,                    .OBJC_ASSOCIATION_RETAIN_NONATOMIC                )            }        }    }}</code></pre><p>This brings another problem with code completion, we can act on UIButton but Xcode still hints us about all methods on On , but for UIButton only tap and propertyChange are valid. The textChange is more for UITextField and UITextView:</p><pre><code>button.on.textChange {}</code></pre><h2 id="Protocol-with-associated-type"><a href="#Protocol-with-associated-type" class="headerlink" title="Protocol with associated type"></a>Protocol with associated type</h2><p>To remedy this awkward API, we can use a very sweet feature of Swift called protocol with an associated type. We start by introducing EasyClosureAware that has a host EasyClosureAwareHostType of type AnyObject. This means that this protocol is for any class that wants to attach itself to a host object.</p><pre><code>private struct AssociatedKey {    static var key = &quot;EasyClosure_on&quot;}public protocol EasyClosureAware: class {    associatedtype EasyClosureAwareHostType: AnyObjectvar on: Container&lt;EasyClosureAwareHostType&gt; { get }}extension EasyClosureAware {    public var on: Container&lt;Self&gt; {        get {            if let value = objc_getAssociatedObject(self, &amp;AssociatedKey.key) as? Container&lt;Self&gt; {                return value            }let value = Container(host: self)            objc_setAssociatedObject(self, &amp;AssociatedKey.key, value, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)            return value        }    }}extension NSObject: EasyClosureAware { }</code></pre><p>Then we confirm NSObject to EasyClosureAware so every NSObject subclass has the on property for free.</p><p>The Container is for containing all targets and to keep all target alive. With this approach we can wrap around any patterns like delegate, target action and KVO observer.</p><pre><code>public class Container&lt;Host: AnyObject&gt;: NSObject {    public unowned let host: Host    public init(host: Host) {        self.host = host    }    // Keep all targets alive    public var targets = [String: NSObject]()}</code></pre><p>With this setup, we can easily apply to any object. For example UIButton:</p><pre><code>public extension Container where Host: UIButton {    func tap(_ action: [@escaping](http://twitter.com/escaping) Action) {        let target = ButtonTarget(host: host, action: action)        targets[ButtonTarget.uniqueId] = target    }}class ButtonTarget: NSObject {    var action: Action?init(host: UIButton, action: [@escaping](http://twitter.com/escaping) Action) {        super.init()self.action = action        host.addTarget(self, action: #selector(handleTap), for: .touchUpInside)    }// MARK: - Action[@objc](http://twitter.com/objc) func handleTap() {        action?()    }}</code></pre><p>We have ButtonTarget that acts as target for target-action for UIButton , which inherits from UIControl .</p><p>Now to react to button tap, it’s as simple as calling:</p><pre><code>button.on.tap {}</code></pre><p>And Xcode shows correct auto-completion. If we’re about to use UITextField , there’s no code suggestions showing up as there’s no methods for UITextField yet:</p><pre><code>textField.on. // ummh?</code></pre><p>We need to add a method to Container that has UITextField constraint, for example:</p><pre><code>public extension Container where Host: UITextField {    func textChange(_ action: [@escaping](http://twitter.com/escaping) StringAction) {        let target = TextFieldTarget(host: host, textAction: action)        targets[TextFieldTarget.uniqueId] = target    }}class TextFieldTarget: NSObject {    var textAction: StringAction?required init(host: UITextField, textAction: [@escaping](http://twitter.com/escaping) StringAction) {        super.init()self.textAction = textAction        host.addTarget(self, action: #selector(handleTextChange(_:)), for: .editingChanged)    }// MARK: - Action[@objc](http://twitter.com/objc) func handleTextChange(_ textField: UITextField) {        textAction?(textField.text ?? &quot;&quot;)    }}</code></pre><p>I’ve used this technique extensively and it works on any platform like iOS, macOS, tvOS as they all base on Objective C Runtime and NSObject. We can easily extend it to any classes we want. This can replace target action, delegate, notification center, KVO or any other communication patterns.</p><p>In the next sections, let’s explore timer, KVO and notification and whether we should have our on closure.</p><h2 id="Action-to-RxSwift-observable"><a href="#Action-to-RxSwift-observable" class="headerlink" title="Action to RxSwift observable"></a>Action to RxSwift observable</h2><p>Having button.on.tap {} is nice, but it would be great if that can transform into Observablefor some RxSwift fans like me.</p><p>We can have our own RxButton like:</p><pre><code>final class RxButton: UIButton {    let tap = PublishSubject&lt;()&gt;()override init(frame: CGRect) {        super.init(frame: frame)self.on.tap { tap.onNext(()) }    }}</code></pre><p>We use PublishSubject to map from the imperative to the declarative world of Rx, then we can consume it:</p><pre><code>button.tap.subscribe(onNext: {})</code></pre><h2 id="Timer-keeps-a-strong-reference-to-its-target"><a href="#Timer-keeps-a-strong-reference-to-its-target" class="headerlink" title="Timer keeps a strong reference to its target"></a>Timer keeps a strong reference to its target</h2><p>Unlike target-action in UIControl where target is held weakly, Timer keeps its target strongly to deliver tick event.</p><p>If you are using init(timeInterval:target:selector:userInfo:repeats:) then please read the section about <a href="https://developer.apple.com/documentation/foundation/timer/1408356-init">target</a> carefully.</p><blockquote><p>The object to which to send the message specified by aSelector when the timer fires. The timer maintains a strong reference to this object until it (the timer) is invalidated.</p></blockquote><p>This is what we did before iOS 10:</p><pre><code>func schedule() {    DispatchQueue.main.async {      self.timer = Timer.scheduledTimer(timeInterval: 20, target: self,                                   selector: #selector(self.timerDidFire(timer:)), userInfo: nil, repeats: false)    }}[@objc](http://twitter.com/objc) private func timerDidFire(timer: Timer) {    print(timer)}</code></pre><p>We can easily extend Timer with our on property by introducing tick method:</p><pre><code>public extension Container where Host: Timer {func tick(_ action: [@escaping](http://twitter.com/escaping) Action) {        self.timerTarget?.action = action    }}class TimerTarget: NSObject {    var action: Action?[@objc](http://twitter.com/objc) func didFire() {        action?()    }}public extension Timer {    static func scheduledTimer(withTimeInterval interval: TimeInterval, repeats: Bool) -&gt; Timer {        let target = TimerTarget()        let timer = Timer.scheduledTimer(timeInterval: interval,                                         target: target,                                         selector: #selector(TimerTarget.didFire),                                         userInfo: nil,                                         repeats: repeats)        timer.on.timerTarget = target        return timer    }}</code></pre><p>So we can use with timer.on.tick:</p><pre><code>timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true)timer.on.tick { print(&quot;tick&quot;) }</code></pre><p>But as of iOS 10, Timer gets its closure based API, so now we can just call the static method scheduledTimer:</p><pre><code>DispatchQueue.main.async {      self.timer = Timer.scheduledTimer(withTimeInterval: 20, repeats: false) { timer in        print(timer)      }}</code></pre><p>Now that Timer gets better API, our on property on Timer is no longer needed, which is fine.</p><h2 id="Key-value-observing-in-Swift-5"><a href="#Key-value-observing-in-Swift-5" class="headerlink" title="Key-value observing in Swift 5"></a>Key-value observing in Swift 5</h2><p>Key-value observing is the ability to watch property change for an NSObject , before Swift 5 the syntax is quite verbose and error-prone with addObserver and observeValuem methods. This is not to mention the usage of context , especially in the subclassing situation, where we need a context key to distinguish between observations of different objects on the same keypath.</p><pre><code>public extension Container where Host: NSObject {func observe(object: NSObject, keyPath: String, _ action: [@escaping](http://twitter.com/escaping) AnyAction) {        let item = KeyPathTarget.Item(object: object, keyPath: keyPath, action: action)        keyPathTarget.items.append(item)        object.addObserver(keyPathTarget, forKeyPath: keyPath, options: .new, context: nil)    }func unobserve(object: NSObject, keyPath: String? = nil) {        let predicate: (KeyPathTarget.Item) -&gt; Bool = { item in            return item.object === object                &amp;&amp; (keyPath != nil) ? (keyPath! == item.keyPath) : true        }keyPathTarget.items.filter(predicate).forEach({            object.removeObserver(keyPathTarget, forKeyPath: $0.keyPath)        })keyPathTarget.items = keyPathTarget.items.filter({ !predicate($0) })    }}class KeyPathTarget: NSObject {    class Item {        let object: NSObject        let keyPath: String        let action: AnyActioninit(object: NSObject, keyPath: String, action: [@escaping](http://twitter.com/escaping) AnyAction) {            self.object = object            self.keyPath = keyPath            self.action = action        }    }var items = [Item]()deinit {        items.forEach({ item in            item.object.removeObserver(self, forKeyPath: item.keyPath)        })items.removeAll()    }// MARK: - KVO    override func observeValue(forKeyPath keyPath: String?,                               of object: Any?,                               change: [NSKeyValueChangeKey : Any]?,                               context: UnsafeMutableRawPointer?) {        guard let object = object as? NSObject,            let keyPath = keyPath,            let value = change?[.newKey] else {                return        }let predicate: (KeyPathTarget.Item) -&gt; Bool = { item in            return item.object === object                &amp;&amp; keyPath == item.keyPath        }items.filter(predicate).forEach({            $0.action(value)        })    }}</code></pre><p>Then we can have an observer to observe contentSize of UIScrollView like:</p><pre><code>let observer = NSObject()observer.on.observe(object: scrollView: keyPath: #keyPath(UIScrollView.contentSize)) { value in  print($0 as? CGSize)}</code></pre><p>Starting from Swift 5, there’s an introduction of KeyPath syntax and improvement to KVO. Now we can just:</p><pre><code>@objc class User: NSObject {    @objc dynamic var name = &quot;random&quot;}let thor = Person()thor.observe(\User.name, options: .new) { user, change in    print(&quot;User has a new name \(user.name)&quot;)}thor.name = &quot;Thor&quot;</code></pre><p>As for KVO, we need to mark @objc and dynamic for it to work. The rest is just to call observe on the object with the KeyPath we want to observe.</p><h2 id="Block-based-Notification-Center"><a href="#Block-based-Notification-Center" class="headerlink" title="Block-based Notification Center"></a>Block-based Notification Center</h2><p>NotificationCenter is the mechanism to post and receive notification system-wide. Starting from iOS 4, NotificationCenter got its block API <a href="https://developer.apple.com/documentation/foundation/nsnotificationcenter/1411723-addobserverforname">addObserverForName:object:queue:usingBlock:</a></p><p>The only thing to notice is that block parameter being copied.</p><blockquote><p>The block to be executed when the notification is received.<br>The block is copied by the notification center and (the copy) held until the observer registration is removed.</p></blockquote><p>As for EasyClosure, to wrap around NotficationCenter is easy:</p><pre><code>public extension Container where Host: NSObject {func observe(notification name: Notification.Name,                 _ action: [@escaping](http://twitter.com/escaping) NotificationAction) {        let observer = NotificationCenter.default.addObserver(            forName: name, object: nil,            queue: OperationQueue.main, using: {                action($0)        })notificationTarget.mapping[name] = observer    }func unobserve(notification name: Notification.Name) {        let observer = notificationTarget.mapping.removeValue(forKey: name)if let observer = observer {            NotificationCenter.default.removeObserver(observer as Any)            notificationTarget.mapping.removeValue(forKey: name)        }    }}class NotificationTarget: NSObject {    var mapping: [Notification.Name: NSObjectProtocol] = [:]deinit {        mapping.forEach({ (key, value) in            NotificationCenter.default.removeObserver(value as Any)        })mapping.removeAll()    }}</code></pre><p>And with its on extension:</p><pre><code>viewController.on.observe(notification: Notification.Name.UIApplicationDidBecomeActive) { notification in  print(&quot;application did become active&quot;)}viewController.on.unobserve(notification: Notification.Name.UIApplicationDidBecomeActive)</code></pre><p>This is for demonstration purpose only as the default NotificationCenter with block-based API is good enough. There are some cautions when using it<br><a href="https://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/">NSNotificationCenter with blocks considered harmful</a> that’s good to be aware of.</p><h2 id="Where-do-we-go-from-here"><a href="#Where-do-we-go-from-here" class="headerlink" title="Where do we go from here"></a>Where do we go from here</h2><p>We’ve learned how to make use of associated objects and make nicer APIs. <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a> is designed to be extensible and we can wrap any communication patterns. KVO and NotificationCenter APIs have become better starting iOS 10 and Swift 5, and we see a trend of more closure based API as they are declarative and convenient. When we can, we should stick to the system APIs as much as possible and only make our sugar when needed.</p><p>I hope you find this article helpful, here ‘s a fun gif made with <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a> APIs:</p><pre><code>func allOn() -&gt; Bool {  return [good, cheap, fast].filter({ $0.isOn }).count == 3}good.on.valueChange { _ in  if allOn() {    fast.setOn(false, animated: true)  }}cheap.on.valueChange { _ in  if allOn() {    good.setOn(false, animated: true)  }}fast.on.valueChange { _ in  if allOn() {    cheap.setOn(false, animated: true)  }}</code></pre><p><img src="https://cdn-images-1.medium.com/max/2000/0*7Bk_M_krffE-VTbp.gif" alt=""></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li>I originally published on <a href="https://medium.com/flawless-app-stories/simplifying-communication-patterns-with-closure-in-swift-1938414468b3">https://medium.com/flawless-app-stories/simplifying-communication-patterns-with-closure-in-swift-1938414468b3</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/744&quot;&gt;#744&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As someone who builds lots of &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="featured" scheme="https://onmyway133.github.io/tags/featured/"/>
    
  </entry>
  
</feed>
