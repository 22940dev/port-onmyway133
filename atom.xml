<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2020-05-07T03:59:31.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to make white label React app</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-white-label-React-app/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-white-label-React-app/</id>
    <published>2020-05-07T03:58:48.000Z</published>
    <updated>2020-05-07T03:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/654">#654</a></strong></p><p>Use <code>shelljs</code> to execute shell commands, and <code>fs</code> to read and write. In <code>public/index.html</code> specify some placeholder and we will replace those in our script</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexHtml = fs.readFileSync(publicIndexHtmlPath, <span class="string">'utf8'</span>)</span><br><span class="line">indexHtml = indexHtml</span><br><span class="line">    .replace(<span class="string">'CONSTANT_HTML_TITLE'</span>, <span class="string">`<span class="subst">$&#123;app.name&#125;</span> - <span class="subst">$&#123;app.headline.title&#125;</span>`</span>)</span><br><span class="line">    .replace(<span class="string">'CONSTANT_HTML_META_DESCRIPTION'</span>, app.headline.text)</span><br><span class="line"></span><br><span class="line">fs.writeFileSync(publicIndexHtmlPath, indexHtml)</span><br><span class="line"></span><br><span class="line"><span class="comment">// build</span></span><br><span class="line">shell.cd(<span class="string">'projects/my_react_app'</span>)</span><br><span class="line">shell.exec(<span class="string">'npm run build'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy</span></span><br><span class="line">shell.exec(<span class="string">`cp -a projects/my_react_app web_server/public`</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/654&quot;&gt;#654&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;shelljs&lt;/code&gt; to execute shell
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to show lightbox in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-lightbox-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-lightbox-in-React/</id>
    <published>2020-05-07T03:25:40.000Z</published>
    <updated>2020-05-07T03:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/653">#653</a></strong></p><p>Use <a href="https://github.com/biati-digital/glightbox">https://github.com/biati-digital/glightbox</a></p><p>Configure css. Specify <code>class=&#39;glightbox</code> for html elements</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;blueimp-gallery.min.css&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>Install package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install glightbox</span><br><span class="line">import GLightbox from &#39;glightbox&#39;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lbElements = features.map(<span class="function">(<span class="params">feature</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'href'</span>: <span class="built_in">require</span>(<span class="string">`../apps/<span class="subst">$&#123;app.slug&#125;</span>/<span class="subst">$&#123;feature.image&#125;</span>`</span>),</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'image'</span>,</span><br><span class="line">        <span class="string">'title'</span>: feature.title,</span><br><span class="line">        <span class="string">'description'</span>: feature.texts[<span class="number">0</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> openLb = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lightbox = GLightbox(&#123;</span><br><span class="line">        touchNavigation: <span class="literal">true</span>,</span><br><span class="line">        loop: <span class="literal">true</span>,</span><br><span class="line">        autoplayVideos: <span class="literal">true</span>,</span><br><span class="line">        onOpen: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">        beforeSlideLoad: <span class="function">(<span class="params">slide, data</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> myGallery = GLightbox(&#123;</span><br><span class="line">        elements: lbElements,</span><br><span class="line">        autoplayVideos: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    myGallery.open()</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/653&quot;&gt;#653&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to animate on scroll in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-animate-on-scroll-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-animate-on-scroll-in-React/</id>
    <published>2020-05-07T03:23:51.000Z</published>
    <updated>2020-05-07T03:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/652">#652</a></strong></p><p>Use <a href="https://github.com/michalsnik/aos">https://github.com/michalsnik/aos</a></p><p>Add link to head</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;aos@next&#x2F;dist&#x2F;aos.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><p>Jus before closing body tag</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/aos@next/dist/aos.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    AOS.init();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Specify <code>data-aos</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-aos=<span class="string">"fade-up"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/652&quot;&gt;#652&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to copy folder in nodej</title>
    <link href="https://onmyway133.github.io/blog/How-to-copy-folder-in-nodej/"/>
    <id>https://onmyway133.github.io/blog/How-to-copy-folder-in-nodej/</id>
    <published>2020-05-07T02:09:28.000Z</published>
    <updated>2020-05-07T02:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/651">#651</a></strong></p><p>Use <code>shelljs</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install shelljs</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line">shell.exec(<span class="string">`cp -a source_path/. destination_path`</span>)</span><br></pre></td></tr></table></figure><blockquote><p>The -a option is an improved recursive option, that preserve all file attributes, and also preserve symlinks.</p></blockquote><blockquote><p>The . at end of the source path is a specific cp syntax that allow to copy all files and folders, included hidden ones.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/651&quot;&gt;#651&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;shelljs&lt;/code&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="node" scheme="https://onmyway133.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>How to use babel 7 in node project</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-babel-7-in-node-project/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-babel-7-in-node-project/</id>
    <published>2020-05-07T01:27:18.000Z</published>
    <updated>2020-05-07T01:27:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/650">#650</a></strong></p><p>Install</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core</span><br><span class="line">npm install @babel/cli</span><br><span class="line">npm install @babel/preset-env</span><br></pre></td></tr></table></figure><p>Configure <code>.babelrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>package.json</code>, transpile using <code>npx babel</code> then <code>node dist/index.js</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"start": "cp ../landing/src/apps/factory.js copied/factory.js &amp;&amp; npx babel index.js --out-file dist/index.js &amp;&amp; npx babel copied/factory.js --out-file dist/factory.js &amp;&amp; node dist/index.js"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/650&quot;&gt;#650&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Install&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="node" scheme="https://onmyway133.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>How to conditionally apply css in emotion js</title>
    <link href="https://onmyway133.github.io/blog/How-to-conditionally-apply-css-in-emotion-js/"/>
    <id>https://onmyway133.github.io/blog/How-to-conditionally-apply-css-in-emotion-js/</id>
    <published>2020-05-06T18:15:44.000Z</published>
    <updated>2020-05-06T18:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/649">#649</a></strong></p><p>Check flag then define <code>css</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Picture = <span class="function">(<span class="params">feature</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> shadowCss = feature.shadow ? css`<span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-radius</span>: 5<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 4<span class="selector-tag">px</span> 8<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>), 0 6<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.19</span>);</span></span><br><span class="line"><span class="css">    `</span> : css`<span class="css">`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 40<span class="selector-tag">vw</span>;</span></span><br><span class="line"><span class="css">            @<span class="keyword">media</span> (max-width: <span class="number">420px</span>) &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span>: 98<span class="selector-tag">vw</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        `</span>&#125;&gt;</span><br><span class="line">            &lt;div css=&#123;shadowCss&#125;&gt;</span><br><span class="line">                &lt;img css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">                <span class="selector-tag">max-width</span>: 100%;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">height</span>: <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">            `</span>&#125;</span><br><span class="line">                    src=&#123;<span class="built_in">require</span>(<span class="string">`../apps/<span class="subst">$&#123;feature.image&#125;</span>`</span>)&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/649&quot;&gt;#649&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Check flag then define
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to scroll to element in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-scroll-to-element-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-scroll-to-element-in-React/</id>
    <published>2020-05-06T06:36:07.000Z</published>
    <updated>2020-05-06T06:36:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/648">#648</a></strong></p><p>In a similar fashion to plain old javascript, note that <code>href</code> needs to have valid hash tag, like <code>#features</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;a</span><br><span class="line">    href=<span class="string">'#features'</span></span><br><span class="line">    onClick=&#123;() =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            behavior: <span class="string">'smooth'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'features-section'</span>).scrollIntoView(options)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    Features</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/648&quot;&gt;#648&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a similar fashion to plain old
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to use emotion for inline css in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-emotion-for-inline-css-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-emotion-for-inline-css-in-React/</id>
    <published>2020-05-02T02:29:02.000Z</published>
    <updated>2020-05-02T02:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/647">#647</a></strong></p><p><code>emotion</code> can be used in framework agnostic or with React. To use with React, follow <a href="https://emotion.sh/docs/introduction#react">https://emotion.sh/docs/introduction#react</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @emotion&#x2F;core</span><br></pre></td></tr></table></figure><p>Note that you must have <code>/** @jsx jsx */</code> at the top of the file, and the unused <code>jsx</code> in import is a directive for JSX to work properly</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement</span></span><br><span class="line"><span class="comment">/** @jsx jsx */</span></span><br><span class="line"><span class="keyword">import</span> &#123; css, jsx &#125; <span class="keyword">from</span> <span class="string">'@emotion/core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color = <span class="string">'white'</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div</span><br><span class="line">    css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span>: 32<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-tag">hotpink</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">font-size</span>: 24<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border-radius</span>: 4<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">      &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: </span><span class="subst">$&#123;color&#125;</span><span class="css">;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    `</span>&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Hover to change color.</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/647&quot;&gt;#647&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emotion&lt;/code&gt; can be used in
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to test DispatchQueue in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-test-DispatchQueue-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-test-DispatchQueue-in-Swift/</id>
    <published>2020-04-29T07:40:35.000Z</published>
    <updated>2020-04-29T07:40:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/646">#646</a></strong></p><h2 id="Sync-the-DispatchQueue"><a href="#Sync-the-DispatchQueue" class="headerlink" title="Sync the DispatchQueue"></a>Sync the DispatchQueue</h2><p>Pass <code>DispatchQueue</code> and call <code>queue.sync</code> to sync all async works before asserting</p><h2 id="Use-mock"><a href="#Use-mock" class="headerlink" title="Use mock"></a>Use mock</h2><p>Use <code>DispatchQueueType</code> and in mock, call the work immediately</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">DispatchQueueType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DispatchQueue</span>: <span class="title">DispatchQueueType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        async(group: <span class="literal">nil</span>, qos: .unspecified, flags: [], execute: work)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MockDispatchQueue</span>: <span class="title">DispatchQueueType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        work()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/646&quot;&gt;#646&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Sync-the-DispatchQueue&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="testing" scheme="https://onmyway133.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to use webpack to bundle html css js</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-webpack-to-bundle-html-css-js/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-webpack-to-bundle-html-css-js/</id>
    <published>2020-04-28T10:56:09.000Z</published>
    <updated>2020-04-28T11:18:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/645">#645</a></strong></p><h3 id="Install-webpack"><a href="#Install-webpack" class="headerlink" title="Install webpack"></a>Install webpack</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br><span class="line">vim webpack.config.js</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &quot;.&#x2F;index.js&quot;,</span><br><span class="line">    mode: &#39;production&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &quot;.&#x2F;index.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To invoke webpack, run below. Your output is <code>dist/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="Minify-js"><a href="#Minify-js" class="headerlink" title="Minify js"></a>Minify js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-minify-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h3 id="Minify-html"><a href="#Minify-html" class="headerlink" title="Minify html"></a>Minify html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const MinifyPlugin &#x3D; require(&#39;babel-minify-webpack-plugin&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;)</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &quot;.&#x2F;index.js&quot;,</span><br><span class="line">    mode: &#39;production&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &quot;.&#x2F;index.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new MinifyPlugin(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#39;index.html&#39;,</span><br><span class="line">            filename: &#39;index.html&#39;,</span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Minify-css"><a href="#Minify-css" class="headerlink" title="Minify css"></a>Minify css</h3><p>TBD</p><h3 id="Copy-files"><a href="#Copy-files" class="headerlink" title="Copy files"></a>Copy files</h3><p>Copy files from <code>dist</code> to public folder so we can use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install copyfiles -g</span><br></pre></td></tr></table></figure><p>Then in <code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;copy&quot;: &quot;copyfiles -u 1 dist&#x2F;* ..&#x2F;apps&#x2F; &amp;&amp; copyfiles *.css ..&#x2F;apps&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then run <code>npm run copy</code></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/645&quot;&gt;#645&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Install-webpack&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="web" scheme="https://onmyway133.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>How to assert asynchronously in XCTest</title>
    <link href="https://onmyway133.github.io/blog/How-to-assert-asynchronously-in-XCTest/"/>
    <id>https://onmyway133.github.io/blog/How-to-assert-asynchronously-in-XCTest/</id>
    <published>2020-04-28T07:23:52.000Z</published>
    <updated>2020-04-28T07:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/644">#644</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Asynchronously assertion</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">XCTAssertWait</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        timeout: TimeInterval = <span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> expression: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>,</span><br><span class="line">        <span class="number">_</span>: <span class="type">String</span> = <span class="string">""</span>,</span><br><span class="line">        file <span class="number">_</span>: <span class="type">StaticString</span> = #file,</span><br><span class="line">        line <span class="number">_</span>: <span class="type">UInt</span> = #line</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">let</span> expectation = <span class="keyword">self</span>.expectation(description: #function)</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + timeout) &#123;</span><br><span class="line">            expression()</span><br><span class="line">            expectation.fulfill()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> waiter = <span class="type">XCTWaiter</span>()</span><br><span class="line">        <span class="type">XCTAssertTrue</span>(waiter.wait(<span class="keyword">for</span>: [expectation], timeout: timeout + <span class="number">1</span>) == .completed)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/644&quot;&gt;#644&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="testing" scheme="https://onmyway133.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple filter menu in css</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-filter-menu-in-css/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-filter-menu-in-css/</id>
    <published>2020-04-27T20:01:47.000Z</published>
    <updated>2020-04-27T20:03:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/643">#643</a></strong></p><p>Use material icons</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/icon?family=Material+Icons"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-id">#filter-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#filter-items</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(52, 46, 173, 0.25), <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span> <span class="number">0</span> <span class="built_in">rgba</span>(52, 46, 173, 0.1);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.filter-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.filter-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(239, 240, 241);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.filter-item</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.9);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.filter-item</span><span class="selector-class">.selected</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(239, 240, 241);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.material-icons</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"Material Icons"</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">mix</span>(#fff, #342ead, 60%);</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.25s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.name</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">mix</span>(#fff, #342ead, 70%);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.25s</span> ease;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">filters.forEach(<span class="function">(<span class="params">filter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> item = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    item.href = <span class="string">'#'</span></span><br><span class="line">    item.className = <span class="string">'filter-item'</span></span><br><span class="line">    container.appendChild(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> icon = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>)</span><br><span class="line">    icon.className = <span class="string">'material-icons'</span></span><br><span class="line">    icon.innerText = filter.icon</span><br><span class="line">    item.appendChild(icon)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> name = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>)</span><br><span class="line">    name.className = <span class="string">'name'</span></span><br><span class="line">    name.innerText = filter.name</span><br><span class="line">    item.appendChild(name)</span><br><span class="line"></span><br><span class="line">    item.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        handleFilterClick(item, filter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/643&quot;&gt;#643&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use material icons&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple grid gallery in css</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-grid-gallery-in-css/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-grid-gallery-in-css/</id>
    <published>2020-04-26T16:53:52.000Z</published>
    <updated>2020-04-26T16:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/642">#642</a></strong></p><p>Specify container with <code>flex-wrap</code> and <code>justify-content</code>, and item with <code>float: left</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#232330</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: silver;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">8px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(10, 10, 10, 0.2);</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Open Sans'</span>, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/642&quot;&gt;#642&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Specify container with
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>How to add independent page in hexo</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-independent-page-in-hexo/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-independent-page-in-hexo/</id>
    <published>2020-04-26T02:57:51.000Z</published>
    <updated>2020-04-26T02:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/641">#641</a></strong></p><p>Create a new page</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page mydemo</span><br></pre></td></tr></table></figure><p>Remove <code>index.md</code> and create <code>index.html</code>, you can reference external css and js in this <code>index.html</code>. Hexo has <code>hexo new page mydemo --slug</code> but it does not support page hierarchy</p><p>Specify no layout so it is independent page.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/641&quot;&gt;#641&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a new page&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="web" scheme="https://onmyway133.github.io/tags/web/"/>
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>How to use async function as parameter in TypeScript</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-async-function-as-parameter-in-TypeScript/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-async-function-as-parameter-in-TypeScript/</id>
    <published>2020-04-21T07:31:27.000Z</published>
    <updated>2020-04-21T07:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/640">#640</a></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">useCache</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    collectionName: string, </span></span></span><br><span class="line"><span class="function"><span class="params">    key: string, </span></span></span><br><span class="line"><span class="function"><span class="params">    response: functions.Response&lt;any&gt;, </span></span></span><br><span class="line"><span class="function"><span class="params">    fetch: (</span>) =&gt; <span class="title">Promise</span>&lt;<span class="title">any</span>&gt;</span></span><br><span class="line"><span class="function">): <span class="title">Promise</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> existing = <span class="keyword">await</span> db.collection(collectionName).doc(key).get() </span><br><span class="line">    <span class="keyword">if</span> (existing.exists) &#123;</span><br><span class="line">        response.send(existing.data())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> object = <span class="keyword">await</span> fetch()</span><br><span class="line">    <span class="keyword">const</span> json = <span class="built_in">Object</span>.assign(&#123;&#125;, object)</span><br><span class="line">    <span class="keyword">await</span> db.collection(collectionName).doc(key).set(json)</span><br><span class="line">    response.send(object)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">useCache(</span><br><span class="line">     <span class="string">"books"</span>,</span><br><span class="line">     key,</span><br><span class="line">     response,</span><br><span class="line">     <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">         <span class="keyword">const</span> service = <span class="keyword">new</span> Service()</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">await</span> service.doSomething(key)</span><br><span class="line">     &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/640&quot;&gt;#640&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>How to format percent in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-format-percent-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-format-percent-in-Swift/</id>
    <published>2020-04-16T07:24:31.000Z</published>
    <updated>2020-04-16T07:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/639">#639</a></strong></p><p>Never use <code>String(format: &quot;%.2f %%&quot;, 1.2</code>  because each region can have different separator and placement of percent sign.</p><p>Use <code>NumberFormatter</code> instead</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formatter = <span class="type">NumberFormatter</span>()</span><br><span class="line">formatter.numberStyle = .percent</span><br><span class="line">formatter.minimumIntegerDigits = <span class="number">1</span></span><br><span class="line">formatter.maximumIntegerDigits = <span class="number">3</span></span><br><span class="line">formatter.maximumFractionDigits = <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">formatter.locale = <span class="type">Locale</span>(identifier: <span class="string">"en_US"</span>)</span><br><span class="line">formatter.string(from: <span class="type">NSDecimalNumber</span>(decimal: <span class="number">1.2</span> / <span class="number">100</span>)) <span class="comment">// 0.12%</span></span><br><span class="line"></span><br><span class="line">formatter.locale = <span class="type">Locale</span>(identifier: <span class="string">"nb_NO"</span>)</span><br><span class="line">formatter.string(from: <span class="type">NSDecimalNumber</span>(decimal: <span class="number">1.2</span> / <span class="number">100</span>)) <span class="comment">// 0,12 %</span></span><br></pre></td></tr></table></figure><p>Note that the space created by <code>NumberFormatter</code> is a non breakable  space <code>\u{00a0}</code>, which can be created by <code>Alt Space</code>. This non breakable space is useful in <code>UILabel</code> when you want the whole word to stick together</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/639&quot;&gt;#639&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Never use &lt;code&gt;String(format: &amp;quot;%.2f
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to declare commands in Xcode extenstions</title>
    <link href="https://onmyway133.github.io/blog/How-to-declare-commands-in-Xcode-extenstions/"/>
    <id>https://onmyway133.github.io/blog/How-to-declare-commands-in-Xcode-extenstions/</id>
    <published>2020-04-13T20:11:55.000Z</published>
    <updated>2020-04-13T20:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/638">#638</a></strong></p><p>Use <code>commandDefinitions</code> in <code>XCSourceEditorExtension</code>. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> XcodeKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceEditorExtension</span>: <span class="title">NSObject</span>, <span class="title">XCSourceEditorExtension</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">extensionDidFinishLaunching</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> commandDefinitions: [[<span class="type">XCSourceEditorCommandDefinitionKey</span>: <span class="type">Any</span>]] &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">makeDef</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="number">_</span> className: String,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="number">_</span> commandName: String</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span> -&gt; [<span class="type">XCSourceEditorCommandDefinitionKey</span>: <span class="type">Any</span>] &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> bundleId = <span class="type">Bundle</span>(<span class="keyword">for</span>: type(of: <span class="keyword">self</span>)).bundleIdentifier <span class="keyword">else</span> &#123; <span class="keyword">return</span> [:] &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">XCSourceEditorCommandDefinitionKey</span>.identifierKey: bundleId + className,</span><br><span class="line">                <span class="type">XCSourceEditorCommandDefinitionKey</span>.classNameKey: className,</span><br><span class="line">                <span class="type">XCSourceEditorCommandDefinitionKey</span>.nameKey: commandName</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            makeDef(<span class="type">TypeCommand</span>.className(), <span class="string">"Type"</span>),</span><br><span class="line">            makeDef(<span class="type">ReloadCommand</span>.className(), <span class="string">"Reload"</span>),</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is a weird crash that we can’t seem to declare functions or use <code>commandDefinitions</code>, the workaround is to declare in plist</p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://nshipster.com/xcode-source-extensions/">https://nshipster.com/xcode-source-extensions/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/638&quot;&gt;#638&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;commandDefinitions&lt;/code&gt; in
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="https://onmyway133.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>How to declare commands in Xcode extensions</title>
    <link href="https://onmyway133.github.io/blog/How-to-declare-commands-in-Xcode-extensions/"/>
    <id>https://onmyway133.github.io/blog/How-to-declare-commands-in-Xcode-extensions/</id>
    <published>2020-04-13T20:11:55.000Z</published>
    <updated>2020-04-16T12:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/638">#638</a></strong></p><p>Use <code>commandDefinitions</code> in <code>XCSourceEditorExtension</code>. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> XcodeKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceEditorExtension</span>: <span class="title">NSObject</span>, <span class="title">XCSourceEditorExtension</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">extensionDidFinishLaunching</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> commandDefinitions: [[<span class="type">XCSourceEditorCommandDefinitionKey</span>: <span class="type">Any</span>]] &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">makeDef</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="number">_</span> className: String,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="number">_</span> commandName: String</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span> -&gt; [<span class="type">XCSourceEditorCommandDefinitionKey</span>: <span class="type">Any</span>] &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> bundleId = <span class="type">Bundle</span>(<span class="keyword">for</span>: type(of: <span class="keyword">self</span>)).bundleIdentifier <span class="keyword">else</span> &#123; <span class="keyword">return</span> [:] &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="type">XCSourceEditorCommandDefinitionKey</span>.identifierKey: bundleId + className,</span><br><span class="line">                <span class="type">XCSourceEditorCommandDefinitionKey</span>.classNameKey: className,</span><br><span class="line">                <span class="type">XCSourceEditorCommandDefinitionKey</span>.nameKey: commandName</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            makeDef(<span class="type">TypeCommand</span>.className(), <span class="string">"Type"</span>),</span><br><span class="line">            makeDef(<span class="type">ReloadCommand</span>.className(), <span class="string">"Reload"</span>),</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is a weird crash that we can’t seem to declare functions or use <code>commandDefinitions</code>, the workaround is to declare in plist</p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://nshipster.com/xcode-source-extensions/">https://nshipster.com/xcode-source-extensions/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/638&quot;&gt;#638&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;commandDefinitions&lt;/code&gt; in
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="https://onmyway133.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>How to disable ring type in TextField in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-disable-ring-type-in-TextField-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-disable-ring-type-in-TextField-in-SwiftUI/</id>
    <published>2020-04-06T05:51:05.000Z</published>
    <updated>2020-04-06T05:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/636">#636</a></strong></p><p>Normally we can just wrap <code>NSTextField</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SearchTextField</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> hint: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> onCommit: (<span class="type">String</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: NSViewRepresentableContext&lt;SearchTextField&gt;)</span></span> -&gt; <span class="type">NSTextField</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tf = <span class="type">NSTextField</span>()</span><br><span class="line">        tf.focusRingType = .<span class="keyword">none</span></span><br><span class="line">        tf.isBordered = <span class="literal">false</span></span><br><span class="line">        tf.isEditable = <span class="literal">true</span></span><br><span class="line">        tf.isSelectable = <span class="literal">true</span></span><br><span class="line">        tf.drawsBackground = <span class="literal">false</span></span><br><span class="line">        tf.delegate = context.coordinator</span><br><span class="line">        tf.font = <span class="type">NSFont</span>(name: <span class="type">OpenSans</span>.bold.rawValue, size: <span class="number">14</span>)</span><br><span class="line">        tf.placeholderString = hint</span><br><span class="line">        <span class="keyword">return</span> tf</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> nsView: NSTextField,</span></span></span><br><span class="line"><span class="function"><span class="params">        context: NSViewRepresentableContext&lt;SearchTextField&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        nsView.font = <span class="type">NSFont</span>(name: <span class="type">OpenSans</span>.bold.rawValue, size: <span class="number">14</span>)</span><br><span class="line">        nsView.stringValue = text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span><span class="params">()</span></span> -&gt; <span class="type">SearchTextField</span>.<span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="type">Coordinator</span>(parent: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>: <span class="title">NSObject</span>, <span class="title">NSTextFieldDelegate</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parent: <span class="type">SearchTextField</span></span><br><span class="line">        <span class="keyword">init</span>(parent: <span class="type">SearchTextField</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.parent = parent</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">controlTextDidChange</span><span class="params">(<span class="number">_</span> obj: Notification)</span></span> &#123;</span><br><span class="line">            <span class="keyword">let</span> textField = obj.object <span class="keyword">as</span>! <span class="type">NSTextField</span></span><br><span class="line">            parent.text = textField.stringValue</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">control</span><span class="params">(<span class="number">_</span> control: NSControl, textView: NSTextView, doCommandBy commandSelector: Selector)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (commandSelector == #selector(<span class="type">NSResponder</span>.insertNewline(<span class="number">_</span>:))) &#123;</span><br><span class="line">                <span class="keyword">self</span>.parent.onCommit(textView.string)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But there is a weird Appstore rejection where the textfield is not focusable. The workaround is to use <code>TextField</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSTextField</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">override</span> <span class="keyword">var</span> focusRingType: <span class="type">NSFocusRingType</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; .<span class="keyword">none</span> &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">TextField</span>(</span><br><span class="line">    <span class="string">"What's next?"</span>,</span><br><span class="line">    text: $text,</span><br><span class="line">    onCommit: &#123; <span class="keyword">self</span>.onAdd(<span class="keyword">self</span>.text) &#125;</span><br><span class="line">)</span><br><span class="line">.font(.system(size: <span class="number">14</span>, weight: .semibold, design: .rounded))</span><br><span class="line">.textFieldStyle(<span class="type">PlainTextFieldStyle</span>())</span><br><span class="line">.padding(<span class="number">1</span>)</span><br><span class="line">.background(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">2</span>).stroke(<span class="type">Color</span>.white))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/636&quot;&gt;#636&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Normally we can just wrap
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to handle enter key in NSTextField</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-enter-key-in-NSTextField/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-enter-key-in-NSTextField/</id>
    <published>2020-04-03T01:15:06.000Z</published>
    <updated>2020-04-03T01:15:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/635">#635</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textField.delegate = <span class="keyword">self</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSTextFieldDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">control</span><span class="params">(<span class="number">_</span> control: NSControl, textView: NSTextView, doCommandBy commandSelector: Selector)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (commandSelector == #selector(<span class="type">NSResponder</span>.insertNewline(<span class="number">_</span>:))) &#123;</span><br><span class="line">        <span class="comment">// Do something against ENTER key</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"enter"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (commandSelector == #selector(<span class="type">NSResponder</span>.deleteForward(<span class="number">_</span>:))) &#123;</span><br><span class="line">        <span class="comment">// Do something against DELETE key</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (commandSelector == #selector(<span class="type">NSResponder</span>.deleteBackward(<span class="number">_</span>:))) &#123;</span><br><span class="line">        <span class="comment">// Do something against BACKSPACE key</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (commandSelector == #selector(<span class="type">NSResponder</span>.insertTab(<span class="number">_</span>:))) &#123;</span><br><span class="line">        <span class="comment">// Do something against TAB key</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (commandSelector == #selector(<span class="type">NSResponder</span>.cancelOperation(<span class="number">_</span>:))) &#123;</span><br><span class="line">        <span class="comment">// Do something against ESCAPE key</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return true if the action was handled; otherwise false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/635&quot;&gt;#635&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
</feed>
