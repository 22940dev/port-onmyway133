<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2021-02-10T05:43:19.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to add home screen quick action in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-home-screen-quick-action-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-home-screen-quick-action-in-SwiftUI/</id>
    <published>2021-02-10T05:25:27.000Z</published>
    <updated>2021-02-10T05:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/774">#774</a></strong></p><p>Start by defining your quick actions. You can use <code>UIApplicationShortcutIcon(type:)</code> for predefined icons, or use <code>UIApplicationShortcutIcon(systemImageName:)</code> for SFSymbol</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">QuickAction</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> readPasteboard</span><br><span class="line">    <span class="keyword">case</span> clear</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> shortcutItem: <span class="type">UIApplicationShortcutItem</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .readPasteboard:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UIApplicationShortcutItem</span>(</span><br><span class="line">                type: rawValue,</span><br><span class="line">                localizedTitle: <span class="string">"Read Pasteboard"</span>,</span><br><span class="line">                localizedSubtitle: <span class="string">""</span>,</span><br><span class="line">                icon: <span class="type">UIApplicationShortcutIcon</span>(type: .add),</span><br><span class="line">                userInfo: <span class="literal">nil</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">case</span> .clear:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UIApplicationShortcutItem</span>(</span><br><span class="line">                type: rawValue,</span><br><span class="line">                localizedTitle: <span class="string">"Clear Pasteboard"</span>,</span><br><span class="line">                localizedSubtitle: <span class="string">""</span>,</span><br><span class="line">                icon: <span class="type">UIApplicationShortcutIcon</span>(systemImageName: <span class="type">SFSymbol</span>.wind.rawValue),</span><br><span class="line">                userInfo: <span class="literal">nil</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Add a service to store selected quick action. I usually make this conform to <code>ObservableObject</code> to be able to bind to SwiftUI views later</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickActionService</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> shortcutItem: <span class="type">UIApplicationShortcutItem?</span></span><br></pre></td></tr></table></figure><p>Expose AppDelegate and SceneDelegate to your SwiftUI <code>App</code>. Listen to <code>scenePhase</code> to add dynamic items</p><p>From <a href="https://developer.apple.com/documentation/uikit/menus_and_shortcuts/add_home_screen_quick_actions">Define Dynamic Quick Actions</a></p><blockquote><p>Set dynamic screen quick actions at any point, but the sample sets them in the sceneWillResignActive(_:) function of the scene delegate. During the transition to a background state is a good time to update any dynamic quick actions, because the system executes this code before the user returns to the Home Screen.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PastePaliOSApp</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    @<span class="type">UIApplicationDelegateAdaptor</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">var</span> appDelegate</span><br><span class="line">    @<span class="type">Environment</span>(\.scenePhase)</span><br><span class="line">    <span class="keyword">var</span> scenePhase</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            main</span><br><span class="line">        &#125;</span><br><span class="line">        .onChange(of: scenePhase) &#123; scenePhase <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> scenePhase &#123;</span><br><span class="line">            <span class="keyword">case</span> .background:</span><br><span class="line">                addDynamicQuickActions()</span><br><span class="line">            <span class="keyword">case</span> .active:</span><br><span class="line">                <span class="type">QuickActionService</span>.shared.perform()</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">addDynamicQuickActions</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">UIApplication</span>.shared.shortcutItems = [</span><br><span class="line">            <span class="type">QuickAction</span>.readPasteboard.shortcutItem,</span><br><span class="line">            <span class="type">QuickAction</span>.clear.shortcutItem</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Quick actions are notified in 2 cases</p><ul><li>If the app isn’t already loaded, it’s launched and passes details of the shortcut item in through the <code>connectionOptions</code> parameter of the <code>scene(_:willConnectTo:options:)</code> function in AppDelegate</li><li>If your app is already loaded, the system calls the <code>windowScene(_:performActionFor:completionHandler:)</code> function of your SceneDelegate</li></ul><p>Therefore we need to handle both cases.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">        configurationForConnecting connectingSceneSession: UISceneSession,</span></span></span><br><span class="line"><span class="function"><span class="params">        options: UIScene.ConnectionOptions</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> -&gt; <span class="type">UISceneConfiguration</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> shortcutItem = options.shortcutItem &#123;</span><br><span class="line">            <span class="type">QuickActionService</span>.shared.shortcutItem = shortcutItem</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> sceneConfiguration = <span class="type">UISceneConfiguration</span>(</span><br><span class="line">            name: <span class="string">"Default"</span>,</span><br><span class="line">            sessionRole: connectingSceneSession.role</span><br><span class="line">        )</span><br><span class="line">        sceneConfiguration.delegateClass = <span class="type">SceneDelegate</span>.<span class="keyword">self</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sceneConfiguration</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">windowScene</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> windowScene: UIWindowScene,</span></span></span><br><span class="line"><span class="function"><span class="params">        performActionFor shortcutItem: UIApplicationShortcutItem,</span></span></span><br><span class="line"><span class="function"><span class="params">        completionHandler: @escaping <span class="params">(Bool)</span></span></span> -&gt; <span class="type">Void</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="type">QuickActionService</span>.shared.shortcutItem = shortcutItem</span><br><span class="line">        completionHandler(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><p>For more please consult official Apple docs and design</p><ul><li><a href="https://developer.apple.com/documentation/uikit/menus_and_shortcuts/add_home_screen_quick_actions">Add Home Screen Quick Actions</a></li><li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/home-screen-actions/">HIG - Home Screen Quick Actions</a></li></ul><hr><p><strong>Updated at</strong> 2021-02-10 06:43:19</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/774&quot;&gt;#774&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Start by defining your quick actions. You
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use EquatableView in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-EquatableView-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-EquatableView-in-SwiftUI/</id>
    <published>2021-02-08T18:40:48.000Z</published>
    <updated>2021-02-08T18:40:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/773">#773</a></strong></p><p>From <a href="https://twitter.com/jsh8080/status/1206617106160246784">John Harper ‘s tweet</a></p><blockquote><p>SwiftUI assumes any Equatable.== is a true equality check, so for POD views it compares each field directly instead (via reflection). For non-POD views it prefers the view’s == but falls back to its own field compare if no ==. EqView is a way to force the use of ==.</p></blockquote><blockquote><p>When it does the per-field comparison the same rules are applied recursively to each field (to choose direct comparison or == if defined). (POD = plain data, see Swift’s _isPOD() function.)</p></blockquote><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://swiftui-lab.com/equatableview/">https://swiftui-lab.com/equatableview/</a></li><li><a href="https://swiftwithmajid.com/2020/01/22/optimizing-views-in-swiftui-using-equatableview/">https://swiftwithmajid.com/2020/01/22/optimizing-views-in-swiftui-using-equatableview/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/773&quot;&gt;#773&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to add new property in Codable struct in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-new-property-in-Codable-struct-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-new-property-in-Codable-struct-in-SwiftUI/</id>
    <published>2021-02-08T18:34:20.000Z</published>
    <updated>2021-02-08T18:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/772">#772</a></strong></p><p>I use Codable structs in my apps for preferences, and bind them to SwiftUI views. If we add new properties to existing Codable, it can’t decode with old saved json as we require new properties. We can either do cutom decoding with container, but this can result in lots more code and mistakes if we have many properties inside our struct.</p><p>The quick workaround is to declare new properties as optional, and use a computed property to wrap that. The good news is Binding works with computed properties too, from the outside all looks like struct properties to SwiftUI</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Preference</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _redacts: <span class="type">Bool?</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> redacts: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; _redacts ?? <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _redacts = newValue &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/772&quot;&gt;#772&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I use Codable structs in my apps for
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to show close button in NSTextField in AppKit</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-close-button-in-NSTextField-in-AppKit/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-close-button-in-NSTextField-in-AppKit/</id>
    <published>2021-02-06T22:58:36.000Z</published>
    <updated>2021-02-06T22:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/771">#771</a></strong></p><p>Use <code>NSSearchField</code> instead</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/771&quot;&gt;#771&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;NSSearchField&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to handle escape in NSTextField in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-escape-in-NSTextField-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-escape-in-NSTextField-in-SwiftUI/</id>
    <published>2021-02-06T21:23:02.000Z</published>
    <updated>2021-02-06T21:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/770">#770</a></strong></p><p>Handle <code>cancelOperation</code> somewhere up in responder chain</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> keyHandler = <span class="type">KeyHandler</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">cancelOperation</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.cancelOperation(sender)</span><br><span class="line">        keyHandler.onEvent(.esc)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/770&quot;&gt;#770&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Handle &lt;code&gt;cancelOperation&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to fit ScrollView to content in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-fit-ScrollView-to-content-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-fit-ScrollView-to-content-in-SwiftUI/</id>
    <published>2021-02-06T19:54:05.000Z</published>
    <updated>2021-02-06T19:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/769">#769</a></strong></p><p>If we place <code>ScrollView</code> inside HStack or VStack, it takes all remaining space. To fit ScrollView to its content, we need to get its content size and constrain ScrollView size.</p><p>Use a <code>GeometryReader</code> as Scrollview content background, and get the local frame</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HSearchBar</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> scrollViewContentSize: <span class="type">CGSize</span> = .zero</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            searchButton</span><br><span class="line">            <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="type">HStack</span>(spacing: <span class="number">12</span>) &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(store.collections) &#123; collection <span class="keyword">in</span></span><br><span class="line">                        collectionCell(collection)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                .background(</span><br><span class="line">                    <span class="type">GeometryReader</span> &#123; geo -&gt; <span class="type">Color</span> <span class="keyword">in</span></span><br><span class="line">                        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                            scrollViewContentSize = geo.size</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="type">Color</span>.clear</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            .frame(</span><br><span class="line">                maxWidth: scrollViewContentSize.width</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/769&quot;&gt;#769&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If we place &lt;code&gt;ScrollView&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to show modal window in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-modal-window-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-modal-window-in-SwiftUI-for-macOS/</id>
    <published>2021-02-03T09:57:43.000Z</published>
    <updated>2021-02-03T09:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/768">#768</a></strong></p><p>Use custom <code>NSWindow</code>, set <code>level</code> in <code>becomeKey</code> and call <code>NSApp.runModal</code> to show modal</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ModalWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">becomeKey</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.becomeKey()</span><br><span class="line"></span><br><span class="line">        level = .statusBar</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.close()</span><br><span class="line"></span><br><span class="line">        <span class="type">NSApp</span>.stopModal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> window = <span class="type">ModalWindow</span>(</span><br><span class="line">    contentRect: .zero,</span><br><span class="line">    styleMask: [.titled, .closable],</span><br><span class="line">    backing: .buffered,</span><br><span class="line">    <span class="keyword">defer</span>: <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">window.titlebarAppearsTransparent = <span class="literal">true</span></span><br><span class="line">window.title = <span class="string">"Manage collections"</span></span><br><span class="line"></span><br><span class="line">window.center()</span><br><span class="line">window.isReleasedWhenClosed = <span class="literal">false</span></span><br><span class="line"><span class="keyword">self</span>.window = window</span><br><span class="line"><span class="keyword">let</span> view = <span class="type">CollectionSettingsView</span>(store: <span class="type">Store</span>.shared)</span><br><span class="line">    .padding()</span><br><span class="line">    .frame(</span><br><span class="line">        width: <span class="type">Constants</span>.settingsViewWidth,</span><br><span class="line">        height: <span class="number">350</span>,</span><br><span class="line">        alignment: .topLeading</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">let</span> hosting = <span class="type">NSHostingView</span>(rootView: view)</span><br><span class="line">window.contentView = hosting</span><br><span class="line">hosting.autoresizingMask = [.width, .height]</span><br><span class="line"></span><br><span class="line"><span class="type">NSApp</span>.runModal(<span class="keyword">for</span>: window)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/768&quot;&gt;#768&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use custom &lt;code&gt;NSWindow&lt;/code&gt;, set
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use ViewBuilder in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-ViewBuilder-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-ViewBuilder-in-SwiftUI/</id>
    <published>2021-02-02T12:08:31.000Z</published>
    <updated>2021-02-02T12:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/767">#767</a></strong></p><p>SwiftUI ‘s <a href="https://developer.apple.com/documentation/swiftui/viewbuilder">ViewBuilder</a> is a custom parameter attribute that constructs views from closures.</p><p>It is available in <code>body</code> and most SwiftUI modifiers</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Body</span> : <span class="type">View</span></span><br><span class="line">    @<span class="type">ViewBuilder</span> <span class="keyword">var</span> body: <span class="type">Self</span>.<span class="type">Body</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">contextMenu</span>&lt;MenuItems&gt;<span class="params">(@ViewBuilder menuItems: <span class="params">()</span></span></span> -&gt; <span class="type">MenuItems</span>) -&gt; some <span class="type">View</span> <span class="keyword">where</span> <span class="type">MenuItems</span> : <span class="type">View</span></span><br></pre></td></tr></table></figure><p>In these <code>ViewBuilder</code> enabled places we can perform conditional logic to construct views. For example here in our SampleView, we have <code>switch</code> statement in <code>body</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SampleView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> top, bottom, <span class="keyword">left</span>, <span class="keyword">right</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> position: <span class="type">Position</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> position &#123;</span><br><span class="line">        <span class="keyword">case</span> .top:</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.person.rawValue)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="type">EmptyView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> profile: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.person.rawValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ViewBuilder</code> applies to both property and function. If we want to have the same logic style as in <code>body</code> in our custom property or methods, we can annotate with <code>ViewBuilder</code>. This works like magic, SwiftUI can determine the types of our expression.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SampleView</span> </span>&#123;</span><br><span class="line">    @<span class="type">ViewBuilder</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">profile2</span><span class="params">(position: Position)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> position &#123;</span><br><span class="line">        <span class="keyword">case</span> .top:</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="type">SFSymbol</span>.person.rawValue)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="type">EmptyView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-ViewBuilder-to-construct-View"><a href="#Use-ViewBuilder-to-construct-View" class="headerlink" title="Use ViewBuilder to construct View"></a>Use ViewBuilder to construct View</h3><p>We can use <code>ViewBuiler</code> as our parameter that constructs View. For example we can build an <code>IfLet</code> that construct View with optional check.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">IfLet</span>&lt;<span class="title">T</span>, <span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">T?</span></span><br><span class="line">    <span class="keyword">let</span> content: (<span class="type">T</span>) -&gt; <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">T?</span>, @<span class="type">ViewBuilder</span> content: @escaping (<span class="type">T</span>) -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.content = content</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> value = value &#123;</span><br><span class="line">            content(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With <code>ViewBuilder</code> we can apply logic inside our closure</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EmailView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> email: <span class="type">String?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">IfLet</span>(email) &#123; email <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> email.isEmpty &#123;</span><br><span class="line">                <span class="type">Circle</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(email)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-ViewBuilder-where-we-can’t-use-closure"><a href="#Use-ViewBuilder-where-we-can’t-use-closure" class="headerlink" title="Use ViewBuilder where we can’t use closure"></a>Use ViewBuilder where we can’t use closure</h3><p>In some modifers like <code>overlay</code>, SwiftUI expects a View, not a closure that returns a View. There we cannot use additional logic</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    @inlinable <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">overlay</span>&lt;Overlay&gt;<span class="params">(<span class="number">_</span> overlay: Overlay, alignment: Alignment = .center)</span></span> -&gt; some <span class="type">View</span> <span class="keyword">where</span> <span class="type">Overlay</span> : <span class="type">View</span></span><br></pre></td></tr></table></figure><p>The below won’t work as we can’t do conditional statement in overlay modifier</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MessageView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> showsHUD: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Message"</span>)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="keyword">if</span> showsHUD &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"HUD"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But we can make something like <code>MakeView</code> that provides a <code>ViewBuilder</code> closure</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">MakeView</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(@<span class="type">ViewBuilder</span> make: () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content = make()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we can use a conditional statement in any modifier that does not accept ViewModifier</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MessageView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> showsHUD: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Message"</span>)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">MakeView</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> showsHUD &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">"HUD"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/767&quot;&gt;#767&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SwiftUI ‘s &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
      <category term="featured" scheme="https://onmyway133.github.io/tags/featured/"/>
    
  </entry>
  
  <entry>
    <title>How to use custom Key for NSCache</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-custom-Key-for-NSCache/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-custom-Key-for-NSCache/</id>
    <published>2021-01-30T04:37:41.000Z</published>
    <updated>2021-01-30T04:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/766">#766</a></strong></p><p>Need to use a class, best is to subclass from <code>NSObject</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cache = <span class="type">NSCache</span>&lt;<span class="type">Key</span>, <span class="type">UIImage</span>&gt;()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Key</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">isEqual</span><span class="params">(<span class="number">_</span> object: <span class="keyword">Any</span>?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> other = object <span class="keyword">as</span>? <span class="type">Key</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url == other.url</span><br><span class="line">            &amp;&amp; size == other.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> hash: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url.hashValue ^ <span class="type">Int</span>(size.width) ^ <span class="type">Int</span>(size.height)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">URL</span></span><br><span class="line">    <span class="keyword">let</span> size: <span class="type">CGSize</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(url: <span class="type">URL</span>, size: <span class="type">CGSize</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.url = url</span><br><span class="line">        <span class="keyword">self</span>.size = size</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/766&quot;&gt;#766&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Need to use a class, best is to subclass
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to show multiple popover in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-multiple-popover-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-multiple-popover-in-SwiftUI/</id>
    <published>2021-01-29T21:33:04.000Z</published>
    <updated>2021-01-29T21:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/765">#765</a></strong></p><p>In SwiftUI currently, it’s not possible to attach multiple <code>.popover</code> to the same View. But we can use condition to show different content</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">PopoverStyle</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> raw</span><br><span class="line">        <span class="keyword">case</span> preview</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> showsPopover: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> popoverStyle: <span class="type">PopoverStyle</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            header</span><br><span class="line">            content</span><br><span class="line">                .popover(isPresented: $showsPopover) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> popoverStyle &#123;</span><br><span class="line">                    <span class="keyword">case</span> .raw:</span><br><span class="line">                        <span class="type">ViewRawView</span>(item: item)</span><br><span class="line">                    <span class="keyword">case</span> .preview:</span><br><span class="line">                        <span class="type">PreviewView</span>(item: item)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            footer</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/765&quot;&gt;#765&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In SwiftUI currently, it’s not possible
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to handle keyDown in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-keyDown-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-keyDown-in-SwiftUI-for-macOS/</id>
    <published>2021-01-29T19:44:48.000Z</published>
    <updated>2021-01-29T19:55:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/764">#764</a></strong></p><p>Use a custom <code>KeyAwareView</code> that uses an <code>NSView</code> that checks for <code>keyDown</code> method. In case we can’t handle certain keys, call <code>super.keyDown(with: event)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> KeyboardShortcuts</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KeyAwareView</span>: <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> onEvent: (<span class="type">Event</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">NSView</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> view = <span class="type">KeyView</span>()</span><br><span class="line">        view.onEvent = onEvent</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            view.window?.makeFirstResponder(view)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span><span class="params">(<span class="number">_</span> nsView: NSView, context: Context)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">KeyAwareView</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> upArrow</span><br><span class="line">        <span class="keyword">case</span> downArrow</span><br><span class="line">        <span class="keyword">case</span> leftArrow</span><br><span class="line">        <span class="keyword">case</span> rightArrow</span><br><span class="line">        <span class="keyword">case</span> space</span><br><span class="line">        <span class="keyword">case</span> delete</span><br><span class="line">        <span class="keyword">case</span> cmdC</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyView</span>: <span class="title">NSView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onEvent: (<span class="type">KeyAwareView</span>.<span class="type">Event</span>) -&gt; <span class="type">Void</span> = &#123; <span class="number">_</span> <span class="keyword">in</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> acceptsFirstResponder: <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">keyDown</span><span class="params">(with event: NSEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="type">Int</span>(event.keyCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.delete.rawValue:</span><br><span class="line">            onEvent(.delete)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.upArrow.rawValue:</span><br><span class="line">            onEvent(.upArrow)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.downArrow.rawValue:</span><br><span class="line">            onEvent(.downArrow)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.leftArrow.rawValue:</span><br><span class="line">            onEvent(.leftArrow)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.rightArrow.rawValue:</span><br><span class="line">            onEvent(.rightArrow)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.space.rawValue:</span><br><span class="line">            onEvent(.space)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span>.<span class="built_in">c</span>.rawValue <span class="keyword">where</span> event.modifierFlags.<span class="built_in">contains</span>(.command):</span><br><span class="line">            onEvent(.cmdC)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">super</span>.keyDown(with: event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can place this as a background</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LazyVStack</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.background(<span class="type">KeyAwareView</span>(onEvent: &#123;&#125;))</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-29 20:55:39</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/764&quot;&gt;#764&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use a custom &lt;code&gt;KeyAwareView&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to extend custom View in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-extend-custom-View-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-extend-custom-View-in-SwiftUI/</id>
    <published>2021-01-28T19:23:25.000Z</published>
    <updated>2021-01-29T11:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/763">#763</a></strong></p><p>I usually break down a big struct into smaller views and extensions. For example I have a <code>ClipboardCell</code> that has a lot of <code>onReceive</code> so I want to move these to another component.</p><p>One way to do that is to extend <code>ClipboardCell</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isSelected: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> showsPreview: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> showsViewRaw: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">let</span> onCopy: () -&gt; <span class="type">Void</span></span><br><span class="line">    <span class="keyword">let</span> onDelete: () -&gt; <span class="type">Void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ClipboardCell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onReceiveKeyboard</span><span class="params">()</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.onReceive(</span><br><span class="line">            <span class="type">NotificationCenter</span>.<span class="keyword">default</span></span><br><span class="line">                .publisher(<span class="keyword">for</span>: .didKeyboardCopyItem)</span><br><span class="line">                .receive(on: <span class="type">RunLoop</span>.main),</span><br><span class="line">            perform: &#123; note <span class="keyword">in</span></span><br><span class="line">                onCopy()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>but then when we want to use this, we get <code>some View has no member onReceiveKeyboard</code> as <code>self</code> after some Swift modifier becomes <code>some View</code>, unless we call <code>onReceiveKeyboard</code> first</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">       .padding()</span><br><span class="line">       .onReceiveKeyboard()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-ViewModifier"><a href="#Use-ViewModifier" class="headerlink" title="Use ViewModifier"></a>Use ViewModifier</h3><p>The SwiftUI is to use <code>ViewModifier</code> where we can inject Binding and functions</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCellOnKeyboardModifier</span>: <span class="title">ViewModifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isSelected: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> showsPreview: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> showsViewRaw: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">let</span> onCopy: () -&gt; <span class="type">Void</span></span><br><span class="line">    <span class="keyword">let</span> onDelete: () -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">body</span><span class="params">(content: Content)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        content.onReceive(</span><br><span class="line">            <span class="type">NotificationCenter</span>.<span class="keyword">default</span></span><br><span class="line">                .publisher(<span class="keyword">for</span>: .didKeyboardCopyItem)</span><br><span class="line">                .receive(on: <span class="type">RunLoop</span>.main),</span><br><span class="line">            perform: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> isSelected <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                onCopy()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>Then we can consume it and pass parameters</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">       .padding()</span><br><span class="line">       .modifier(</span><br><span class="line">           <span class="type">ClipboardCellOnKeyboardModifier</span>(</span><br><span class="line">               showsPreview: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;(<span class="keyword">get</span>: &#123;&#125;, <span class="keyword">set</span>: &#123;&#125;) ,</span><br><span class="line">               showsViewRaw: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;(<span class="keyword">get</span>: &#123;&#125;, <span class="keyword">set</span>: &#123;&#125;) </span><br><span class="line">           )</span><br><span class="line">       )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pass-State-and-Binding"><a href="#Pass-State-and-Binding" class="headerlink" title="Pass State and Binding"></a>Pass State and Binding</h3><p>For now SwiftUI seems to have a bug that ViewModifier does not listen to <code>onReceive</code>, we can extend generic <code>View</code> and pass parameters instead</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onClipboardCellReceiveKeyboard</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        isSelected: Bool,</span></span></span><br><span class="line"><span class="function"><span class="params">        showsPreview: Binding&lt;Bool&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">        showsViewRaw: Binding&lt;Bool&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">        onCopy: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>,</span><br><span class="line">        onDelete: () -&gt; <span class="type">Void</span></span><br><span class="line">    ) -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.onReceive(</span><br><span class="line">            <span class="type">NotificationCenter</span>.<span class="keyword">default</span></span><br><span class="line">                .publisher(<span class="keyword">for</span>: .didKeyboardCopyItem)</span><br><span class="line">                .receive(on: <span class="type">RunLoop</span>.main),</span><br><span class="line">            perform: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> isSelected <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                onCopy()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h3 id="Use-ObservableObject"><a href="#Use-ObservableObject" class="headerlink" title="Use ObservableObject"></a>Use ObservableObject</h3><p>Another way is to use an <code>ObservableObject</code> and encapsulate logic and state in there, and share this across views that want to consume this set of data, just like a ViewModel</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsHolder</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> items: [<span class="type">ClipboardItem</span>] = []</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> selectedItems = <span class="type">Set</span>&lt;<span class="type">ClipboardItem</span>&gt;()</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> agos: [<span class="type">UUID</span>: <span class="type">String</span>] = [:]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateAgos</span><span class="params">()</span></span> &#123;</span><br><span class="line">        agos.removeAll()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items &#123;</span><br><span class="line">            agos[item.id] = <span class="type">Formattes</span>.ago(date: item.createdAt)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(items: [ClipboardItem])</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.items = items</span><br><span class="line">            .sorted(by: &#123; $<span class="number">0</span>.createdAt &gt; $<span class="number">1</span>.createdAt &#125;)</span><br><span class="line">        updateAgos()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClipboardCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> itemsHolder = <span class="type">ItemsHolder</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        list.onReceive(</span><br><span class="line">            <span class="type">NotificationCenter</span>.<span class="keyword">default</span></span><br><span class="line">                .publisher(<span class="keyword">for</span>: .didKeyboardCopyItem)</span><br><span class="line">                .receive(on: <span class="type">RunLoop</span>.main),</span><br><span class="line">            perform: &#123; note <span class="keyword">in</span></span><br><span class="line">                itemsHolder.onCopy()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-29 12:51:52</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/763&quot;&gt;#763&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I usually break down a big struct into
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use Sparkle for macOS app</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-Sparkle-for-macOS-app/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-Sparkle-for-macOS-app/</id>
    <published>2021-01-26T05:33:34.000Z</published>
    <updated>2021-01-26T05:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/762">#762</a></strong></p><h2 id="Install-Sparkle"><a href="#Install-Sparkle" class="headerlink" title="Install Sparkle"></a>Install Sparkle</h2><ul><li>For now, the latest stable version is 1.24.0 which supports CocoaPods OK, but still, have issues with SPM. Support non sandboxed apps</li><li>Version 2.0.0 is in beta and supports sandboxed apps</li></ul><p>To install, use CocoaPods</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:osx</span>, <span class="string">'11.0'</span></span><br><span class="line"></span><br><span class="line">target <span class="string">'MyApp'</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Comment the next line if you don't want to use dynamic frameworks</span></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  pod <span class="string">'Sparkle'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><p>In your target, choose <code>Signing &amp; Capability</code> tab, change Signing Certificate from <code>Locally</code> to <code>Development</code> for code sign to work for embedded frameworks</p><h2 id="Specify-SUUpdater"><a href="#Specify-SUUpdater" class="headerlink" title="Specify SUUpdater"></a>Specify SUUpdater</h2><p>Follow Sparkle <a href="https://sparkle-project.org/documentation/">documentation</a>, let’s add an Object to Application Scene in Main.storyboard and specify <code>SUUpdater</code> class</p><p>In AppDelegate</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">checkForUpdates</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> updater = <span class="type">SUUpdater</span>.shared()</span><br><span class="line">    updater?.checkForUpdates(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Additionally, we can add an NSMenuItem and drag it to our <code>SUUpdater</code> object <code>checkForUpdates</code> method</p><p>In Info.plist, add SUFeedURL with a link to your cast file</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>SUFeedURL<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>https://onmyway133.com/MyAppCast.xml<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Configure-cast-file"><a href="#Configure-cast-file" class="headerlink" title="Configure cast file"></a>Configure cast file</h2><p>I usually upload my cast to S3 or GitHub. For GitHub with raw URL, remember that there is 5 minutes cache by default</p><p>If you follow sample cast file <a href="https://sparkle-project.org/files/sparkletestcast.xml">https://sparkle-project.org/files/sparkletestcast.xml</a></p><p>Notice that <code>sparkle:version=&quot;2.0&quot;</code> is <code>CFBundleVersion</code> which is your build number. You need to also specify <code>sparkle:shortVersionString</code> which is CFBundleShortVersionString your version number</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sparkle:shortVersionString="2.0.1"</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rss</span> <span class="attr">version</span>=<span class="string">"2.0"</span> <span class="attr">xmlns:sparkle</span>=<span class="string">"http://www.andymatuschak.org/xml-namespaces/sparkle"</span>  <span class="attr">xmlns:dc</span>=<span class="string">"http://purl.org/dc/elements/1.1/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sparkle Test App Changelog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span>&gt;</span>http://sparkle-project.org/files/sparkletestcast.xml<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Most recent changes with links to updates.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">language</span>&gt;</span>en<span class="tag">&lt;/<span class="name">language</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Version 2.0<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">          &lt;![CDATA[</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;Suspendisse sed felis ac ante ultrices rhoncus. Etiam quis elit vel nibh placerat facilisis in id leo.&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;Vestibulum nec tortor odio, nec malesuada libero. Cras vel convallis nunc.&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;Suspendisse tristique massa eget velit consequat tincidunt. Praesent sodales hendrerit pretium.&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          ]]&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pubDate</span>&gt;</span>Sat, 26 Jul 2014 15:20:11 +0000<span class="tag">&lt;/<span class="name">pubDate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enclosure</span> <span class="attr">url</span>=<span class="string">"https://sparkle-project.org/files/Sparkle%20Test%20App.zip"</span> <span class="attr">sparkle:version</span>=<span class="string">"2.0"</span> <span class="attr">length</span>=<span class="string">"107758"</span> <span class="attr">type</span>=<span class="string">"application/octet-stream"</span> <span class="attr">sparkle:dsaSignature</span>=<span class="string">"MCwCFCdoW13VBGJWIfIklKxQVyetgxE7AhQTVuY9uQT0KOV1UEk21epBsGZMPg=="</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rss</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-26 06:34:38</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/762&quot;&gt;#762&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Install-Sparkle&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use ScrollViewReader in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-ScrollViewReader-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-ScrollViewReader-in-SwiftUI/</id>
    <published>2021-01-21T12:31:00.000Z</published>
    <updated>2021-01-21T12:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/761">#761</a></strong></p><p>Does not work in macOS</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScrollView</span> &#123;</span><br><span class="line">    <span class="type">ScrollViewReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">        <span class="type">LazyVStack</span>(spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            forEachItems</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .onReceiveKeyboard(onNext: &#123;</span><br><span class="line">            onNext()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> item = selectedItem &#123;</span><br><span class="line">                proxy.scrollTo(item, anchor: .center)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, onPrevious: &#123;</span><br><span class="line">            onPrevious()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> item = selectedItem &#123;</span><br><span class="line">                proxy.scrollTo(item, anchor: .center)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/761&quot;&gt;#761&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Does not work in macOS&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to handle keyDown in NSResponder</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-keyDown-in-NSResponder/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-keyDown-in-NSResponder/</id>
    <published>2021-01-21T12:03:16.000Z</published>
    <updated>2021-01-25T19:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/760">#760</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"><span class="keyword">import</span> Omnia</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">keyDown</span><span class="params">(with event: NSEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.keyDown(with: event)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isKey(<span class="type">NSDeleteCharacter</span>, event: event) &#123;</span><br><span class="line">            <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(<span class="type">Notification</span>(name: .didKeyboardDeleteItem))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> isKey(<span class="type">NSUpArrowFunctionKey</span>, event: event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"up"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> isKey(<span class="type">NSDownArrowFunctionKey</span>, event: event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"down"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> isKey(<span class="type">NSLeftArrowFunctionKey</span>, event: event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"left"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> isKey(<span class="type">NSRightArrowFunctionKey</span>, event: event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"right"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isKey</span><span class="params">(<span class="number">_</span> key: Int, event: NSEvent)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> scalar = <span class="type">UnicodeScalar</span>(key) &#123;</span><br><span class="line">            <span class="keyword">return</span> event.characters == <span class="type">String</span>(scalar)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another way is to listen to</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSEvent</span>.addLocalMonitorForEvents(matching: .keyDown) &#123; event <span class="keyword">in</span></span><br><span class="line">       <span class="keyword">if</span> handled(with: $<span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> event</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Or create our own inspector</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>: <span class="title">NSWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">keyDown</span><span class="params">(with event: NSEvent)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !<span class="type">EventService</span>.shared.inspect(event) &#123;</span><br><span class="line">            <span class="keyword">super</span>.keyDown(with: event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> canBecomeKey: <span class="type">Bool</span>  &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> canBecomeMain: <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> acceptsFirstResponder: <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">becomeFirstResponder</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123; <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> AppKit</span><br><span class="line"><span class="keyword">import</span> Omnia</span><br><span class="line"><span class="keyword">import</span> KeyboardShortcuts</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">EventService</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> combos: [<span class="type">Combo</span>] = []</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> debouncer = <span class="type">Debouncer</span>(delay: <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(<span class="number">_</span> combo: Combo)</span></span> &#123;</span><br><span class="line">        combos.append(combo)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">(<span class="number">_</span> event: NSEvent)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> combo <span class="keyword">in</span> combos &#123;</span><br><span class="line">            <span class="keyword">if</span> combo.match(event) &#123;</span><br><span class="line">                <span class="keyword">self</span>.debouncer.run &#123;</span><br><span class="line">                    combo.action()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Combo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> modifier: <span class="type">NSEvent</span>.<span class="type">ModifierFlags?</span></span><br><span class="line">        <span class="keyword">let</span> keyCode: <span class="type">KeyboardShortcuts</span>.<span class="type">Key</span></span><br><span class="line">        <span class="keyword">let</span> action: () -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">match</span><span class="params">(<span class="number">_</span> event: NSEvent)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> modifier = modifier,</span><br><span class="line">               !event.modifierFlags.<span class="built_in">contains</span>(modifier) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> event.keyCode != keyCode.rawValue &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Updated at</strong> 2021-01-25 20:05:08</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/760&quot;&gt;#760&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to use built in NSImage in macos</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-built-in-NSImage-in-macos/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-built-in-NSImage-in-macos/</id>
    <published>2021-01-21T11:22:33.000Z</published>
    <updated>2021-01-21T11:22:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/759">#759</a></strong></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://hetima.github.io/fucking_nsimage_syntax/">https://hetima.github.io/fucking_nsimage_syntax/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/759&quot;&gt;#759&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Read-more&quot;&gt;&lt;a href=&quot;#Read-more&quot;
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to handle NSSearchToolbarItem in macOS 11</title>
    <link href="https://onmyway133.github.io/blog/How-to-handle-NSSearchToolbarItem-in-macOS-11/"/>
    <id>https://onmyway133.github.io/blog/How-to-handle-NSSearchToolbarItem-in-macOS-11/</id>
    <published>2021-01-21T11:12:50.000Z</published>
    <updated>2021-01-21T11:12:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/758">#758</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSToolbarItem</span>.<span class="title">Identifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> searchItem: <span class="type">NSToolbarItem</span>.<span class="type">Identifier</span> = <span class="type">NSToolbarItem</span>.<span class="type">Identifier</span>(<span class="string">"SearchItem"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> searchItem = <span class="type">NSSearchToolbarItem</span>(itemIdentifier: .searchItem)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppDelegate</span>: <span class="title">NSToolbarDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toolbar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> toolbar: NSToolbar,</span></span></span><br><span class="line"><span class="function"><span class="params">        itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,</span></span></span><br><span class="line"><span class="function"><span class="params">        willBeInsertedIntoToolbar flag: Bool</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> -&gt; <span class="type">NSToolbarItem?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> itemIdentifier &#123;</span><br><span class="line">        <span class="keyword">case</span> .searchItem:</span><br><span class="line">            searchItem.searchField.delegate = <span class="keyword">self</span></span><br><span class="line">            <span class="keyword">return</span> searchItem</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppDelegate</span>: <span class="title">NSSearchFieldDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">control</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> control: NSControl,</span></span></span><br><span class="line"><span class="function"><span class="params">        textView: NSTextView,</span></span></span><br><span class="line"><span class="function"><span class="params">        doCommandBy commandSelector: Selector</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (commandSelector == #selector(<span class="type">NSResponder</span>.insertNewline(<span class="number">_</span>:))) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"enter"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/758&quot;&gt;#758&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to do launch at login for macOS apps</title>
    <link href="https://onmyway133.github.io/blog/How-to-do-launch-at-login-for-macOS-apps/"/>
    <id>https://onmyway133.github.io/blog/How-to-do-launch-at-login-for-macOS-apps/</id>
    <published>2021-01-20T21:10:39.000Z</published>
    <updated>2021-01-20T21:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/757">#757</a></strong></p><ul><li>Use <a href="https://developer.apple.com/documentation/servicemanagement/1501557-smloginitemsetenabled?language=swift">SMLoginItemSetEnabled</a> from Service Management framework</li><li>Use a helper background app that checks and invokes our main application</li><li>Copy our helper app into <code>Library/LoginItems</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helper_dir=<span class="string">"<span class="variable">$BUILT_PRODUCTS_DIR</span>/<span class="variable">$CONTENTS_FOLDER_PATH</span>/Library/LoginItems"</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">NSObject</span>, <span class="title">NSApplicationDelegate</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationDidFinishLaunching</span><span class="params">(<span class="number">_</span> notification: Notification)</span></span> &#123;</span><br><span class="line"><span class="keyword">let</span> bundleId = <span class="type">Bundle</span>.main.bundleIdentifier!</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this more strict by only replacing at the end</span></span><br><span class="line"><span class="keyword">let</span> mainBundleId = bundleId.replacingOccurrences(of: <span class="string">"-LaunchAtLoginHelper"</span>, with: <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure the app is not already running</span></span><br><span class="line"><span class="keyword">guard</span> <span class="type">NSRunningApplication</span>.runningApplications(withBundleIdentifier: mainBundleId).isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">NSApp</span>.terminate(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pathComponents = (<span class="type">Bundle</span>.main.bundlePath <span class="keyword">as</span> <span class="type">NSString</span>).pathComponents</span><br><span class="line"><span class="keyword">let</span> mainPath = <span class="type">NSString</span>.path(withComponents: <span class="type">Array</span>(pathComponents[<span class="number">0</span>...(pathComponents.<span class="built_in">count</span> - <span class="number">5</span>)]))</span><br><span class="line"><span class="type">NSWorkspace</span>.shared.launchApplication(mainPath)</span><br><span class="line"><span class="type">NSApp</span>.terminate(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://jogendra.dev/implementing-launch-at-login-feature-in-macos-apps">https://jogendra.dev/implementing-launch-at-login-feature-in-macos-apps</a></li><li><a href="https://github.com/sindresorhus/LaunchAtLogin/blob/master/Sources/LaunchAtLogin/copy-helper.sh">https://github.com/sindresorhus/LaunchAtLogin/blob/master/Sources/LaunchAtLogin/copy-helper.sh</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/757&quot;&gt;#757&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to fix overlapped navigation titles in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-fix-overlapped-navigation-titles-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-fix-overlapped-navigation-titles-in-SwiftUI/</id>
    <published>2021-01-20T20:55:35.000Z</published>
    <updated>2021-01-20T20:59:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/756">#756</a></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NavigationLink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fixOverlap</span><span class="params">()</span></span> -&gt; <span class="type">AnyView</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">UIDevice</span>.current.userInterfaceIdiom == .phone &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.isDetailLink(<span class="literal">false</span>).erase()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.erase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://www.dabblingbadger.com/blog/2020/12/11/a-quick-fix-for-overlapping-navigation-titles-in-swiftui">https://www.dabblingbadger.com/blog/2020/12/11/a-quick-fix-for-overlapping-navigation-titles-in-swiftui</a><blockquote><p> As far as I can tell, this bug only shows up if you: 1) have the navigation title displayMode of a destination view set to .large and 2) have added items to the navigation bar using the .navigationBarItems modifier.</p></blockquote></li></ul><hr><p><strong>Updated at</strong> 2021-01-20 21:59:41</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/756&quot;&gt;#756&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to use NSWindow style and NSToolbar in AppKit</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-NSWindow-style-and-NSToolbar-in-AppKit/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-NSWindow-style-and-NSToolbar-in-AppKit/</id>
    <published>2021-01-20T04:42:57.000Z</published>
    <updated>2021-01-21T11:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/755">#755</a></strong></p><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://github.com/martinlexow/SwiftUIWindowStyles">https://github.com/martinlexow/SwiftUIWindowStyles</a></li><li><a href="https://github.com/lukakerr/NSWindowStyles">https://github.com/lukakerr/NSWindowStyles</a></li><li><a href="https://github.com/marioaguzman/toolbar">https://github.com/marioaguzman/toolbar</a></li></ul><hr><p><strong>Updated at</strong> 2021-01-21 12:46:04</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/755&quot;&gt;#755&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Read-more&quot;&gt;&lt;a href=&quot;#Read-more&quot;
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
</feed>
