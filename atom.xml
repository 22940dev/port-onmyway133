<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onmyway133</title>
  
  <subtitle>What you don&#39;t know is what you haven&#39;t learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onmyway133.github.io/"/>
  <updated>2020-12-21T04:26:43.000Z</updated>
  <id>https://onmyway133.github.io/</id>
  
  <author>
    <name>Khoa Pham</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to make stepper with plus and minus buttons in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-stepper-with-plus-and-minus-buttons-in-SwiftUI-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-stepper-with-plus-and-minus-buttons-in-SwiftUI-for-macOS/</id>
    <published>2020-12-21T04:24:26.000Z</published>
    <updated>2020-12-21T04:26:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/717">#717</a></strong></p><p>Try to use predefined system colors in <a href="https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/color/">Human Interface Guidelines</a> for macOS</p><p>Here we use this color <code>unemphasizedSelectedTextBackgroundColor</code> for button background</p><img width="88" alt="Screenshot 2020-12-21 at 06 24 16" src="https://user-images.githubusercontent.com/2284279/102742430-29f2ef00-4355-11eb-9bdd-b5fe373677c5.png"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HStack</span>(spacing: <span class="number">1</span>) &#123;</span><br><span class="line">    makeUnderListButton(action: &#123;&#125;, icon: .plus)</span><br><span class="line">    makeUnderListButton(action: &#123;&#125;, icon: .minus)</span><br><span class="line">&#125;</span><br><span class="line">.background(<span class="type">Color</span>(<span class="type">NSColor</span>.unemphasizedSelectedTextBackgroundColor))</span><br><span class="line">.cornerRadius(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeUnderListButton</span><span class="params">(action: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>, icon: <span class="type">AwesomeIcon</span>) -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(action: action) &#123;</span><br><span class="line">        <span class="type">Text</span>(icon.rawValue)</span><br><span class="line">            .font(.awesome(style: .solid, size: <span class="number">14</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    .buttonStyle(<span class="type">HighlightButtonStyle</span>(h: <span class="number">8</span>, v: <span class="number">6</span>, cornerRadius: <span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://blog.verslu.is/xamarin/ios-macos-dark-mode-dynamic-colors-overview/">iOS and macOS Dark Mode Dynamic Colors Overview</a></li></ul><p><strong>Updated at</strong> 2020-12-21 05:26:43</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/717&quot;&gt;#717&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Try to use predefined system colors in &lt;a
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to fix Picker not showing selection in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-fix-Picker-not-showing-selection-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-fix-Picker-not-showing-selection-in-SwiftUI/</id>
    <published>2020-12-20T05:18:26.000Z</published>
    <updated>2020-12-20T05:18:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/716">#716</a></strong></p><p>I have an enum that conforms to <code>CaseIterable</code> that I want to show in <code>Picker</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Position</span>: <span class="title">String</span>, <span class="title">Codable</span>, <span class="title">CaseIterable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> &#123; rawValue &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">left</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">right</span></span><br><span class="line">    <span class="keyword">case</span> bottom</span><br><span class="line">    <span class="keyword">case</span> top</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Picker</span>(selection: $preference.position, label: <span class="type">Text</span>(<span class="string">"Position"</span>)) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="type">Preference</span>.<span class="type">Position</span>.allCases) &#123; position <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(position.rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It compiles and runs just fine, but Picker does not show current selection regardless of any Picker style I choose. It does not update <code>Binding</code> at all.</p><p>The fix is to specify <code>id</code>, it looks redundant because of enum conforms to <code>Identifiable</code>, but it fixes the problem</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Picker</span>(selection: $preference.position, label: <span class="type">Text</span>(<span class="string">"Position"</span>)) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="type">Preference</span>.<span class="type">Position</span>.allCases, id: \.<span class="keyword">self</span>) &#123; position <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(position.rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/716&quot;&gt;#716&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have an enum that conforms to
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>My year in review 2020</title>
    <link href="https://onmyway133.github.io/blog/My-year-in-review-2020/"/>
    <id>https://onmyway133.github.io/blog/My-year-in-review-2020/</id>
    <published>2020-12-16T19:24:56.000Z</published>
    <updated>2020-12-18T15:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/715">#715</a></strong></p><p>I remember this time last year in December 2019, I spent almost every single bit of my free time on <a href="https://github.com/pumaswift/Puma">Puma</a> because I want a Swift friendly version of fastlane that suits my need and leverages Swift 5 features. </p><p>Here‚Äôs my review of my work in year 2020.</p><h2 id="Blogging"><a href="#Blogging" class="headerlink" title="Blogging"></a>Blogging</h2><p>I started blogging on GitHub issue, starting from <a href="https://github.com/onmyway133/blog/issues/1">Issue 1 Hello world, again</a>, now I have over 670 issues, which were generated into blog posts at my website <a href="https://onmyway133.com/">https://onmyway133.com/</a></p><p>üçè I used to use onmyway133.github.io domain, but then it feels right to have my own domain<br>üçé I used to write a lot at Medium <a href="https://medium.com/@onmyway133">https://medium.com/@onmyway133</a> for many publications and my own Fantageek publication, I have got 2.3k followers with around 60k views per month<br>üçì I list my most favorite articles, usually articles that I spent most time polishing here <a href="https://onmyway133.com/writing/">https://onmyway133.com/writing/</a></p><p>One of my very first articles published on Flawless iOS publication was <a href="https://medium.com/flawless-app-stories/a-better-way-to-update-uicollectionview-data-in-swift-with-diff-framework-924db158db86">A better way to update UICollectionView data in Swift with diff framework</a> gets the highest traffic ever, and was rated most trending Swift article for 2018.</p><p>My one of few articles published in Medium in 2019 was <a href="https://medium.com/flawless-app-stories/how-to-make-auto-layout-more-convenient-in-ios-df3b42fed37f">How to make Auto Layout more convenient in iOS</a> got featured in iOS Dev Weekly, and used to promote my library <a href="https://github.com/onmyway133/EasyAnchor">EasyAnchor</a></p><p>My big article this year is <a href="https://onmyway133.com/blog/how-to-test-push-notifications-in-simulator-and-production-ios-apps/">How to test push notifications in simulator and production iOS apps</a>, which was also featured on iOS Dev Weekly, used to summary the changes in push notifications from iOS 7 to iOS 14, and to promote my push notification testing tool <a href="https://twitter.com/pushheroapp">Push Hero</a></p><p>My blog at <a href="https://onmyway133.com/">https://onmyway133.com/</a> has around 15k views each month. I can write proper, lengthy articles to get more views but I don‚Äôt want to. I want to write blog about solutions I have found, so that my future self can benefit from it without searching too much.</p><p><img src="https://user-images.githubusercontent.com/2284279/102402948-cfb8fd80-3fe5-11eb-9f7a-b7a85d0ad450.jpeg" alt="views"></p><h2 id="Open-source"><a href="#Open-source" class="headerlink" title="Open source"></a>Open source</h2><p>I have done quite a lot of open source, you can view here <a href="https://onmyway133.com/opensource/">Open source</a>. These have helped tons of apps, with 45k+ apps touched, and 3.4m+ downloads as stats on CocoaPods</p><p>My 4 libraries this year get inspired by SwiftUI and property wrappers</p><p>üçå <a href="https://github.com/onmyway133/Spek">Spek</a> leverages property wrapper to provide Spec syntax, similar to Quick, but simpler and can generate tests<br>üçà <a href="https://github.com/onmyway133/Micro">Micro</a> imitates SwiftUI State and ForEach syntax but use UICollectionView with diffable datasource, powered by my another library <a href="https://github.com/onmyway133/DeepDiff">DeepDiff</a><br>üçë <a href="https://github.com/onmyway133/EasySwiftUI">EasySwiftUI</a> contains many extensions and useful modifier that I use in my SwiftUI apps<br>ü•ù <a href="https://github.com/onmyway133/FontAwesomeSwiftUI">FontAwesomeSwiftUI</a> I was tired of using bitmap with dark and light variants, and I can‚Äôt use SFSymbols as I want to support macOS 10.15, so FontAwesome is a perfect choice. I couldn‚Äôt find library that has support for SwiftUI and easy to use with Swift Package Manager for iOS and macOS, so I made one</p><p>Besides, for all my libraries <a href="https://github.com/onmyway133/EasyStash">EasyStash</a>, <a href="https://github.com/onmyway133/EasyAnchor">EasyAnchor</a>, <a href="https://github.com/onmyway133/EasyTheme">EasyTheme</a>, <a href="https://github.com/onmyway133/EasyClosure">EasyClosure</a>, ‚Ä¶ I have now support Swift Package Manager, which is nicer to integrate. Thank you CocoaPods for all these years.</p><p>There are now 1.6k people following me on GitHub, that means a lot, meaning somehow my work is useful</p><p>Lately, I open source <a href="https://github.com/onmyway133/awesome-swiftui">awesome-swiftui</a> which I curate all SwiftUI resources, articles and libraries that I find useful for my apps</p><p>‚ù§Ô∏è One day, I got sponsor from my dear friend <a href="https://twitter.com/zenangst">Chris</a> for my GitHub open source. Chris is my open source idol who ignited my desire for open source. No one loves open source more than Chris</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">This means the world to me! If everyone was as lucky as me to just get to inspire one person, the world would be an amazing place. Let&#39;s make it amazing together! Keep rocking because you are amazing &amp; you can bring out the best in others! ‚ù§Ô∏è <a href="https://t.co/pJx9obWH7I">https://t.co/pJx9obWH7I</a></p>&mdash; Christoffer Winterkvist (@zenangst) <a href="https://twitter.com/zenangst/status/1309403013237403649?ref_src=twsrc%5Etfw">September 25, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="Apps"><a href="#Apps" class="headerlink" title="Apps"></a>Apps</h2><p>I started making some apps late last year, first I published them on Gumroad, but it didn‚Äôt feel right, and then I published all my apps on AppStore. I like sandboxed apps from AppStore because they limit what the apps can do.</p><p>Apps without Twitter account and landing page seem off, so in May I started revamping my websites, and I wrote my <a href="https://onmyway133.com/apps/">apps</a> page firstly with pure HTML and CSS, then I rewrote in React, because I like React and Javascript.</p><p>Notably, early 2020 I made <a href="https://twitter.com/pushheroapp">Push Hero</a>, <a href="https://twitter.com/PastePalApp">PastePal</a> then I made a complete overhaul lately with more features, thanks to all the feedback. I also took the time to revamp landing pages a lot, you can check landing pages for <a href="https://onmyway133.com/pushhero">Push Hero</a> for example because I have a white label solution</p><p>Learn how I did <a href="https://onmyway133.github.io/blog/How-to-make-white-label-React-app-for-landing-pages/">white label landing page using React</a></p><p>I have a lot of ideas, but very little time.</p><h2 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h2><p>Coding can be done, but design is never finished. When making apps, I feel like I‚Äôm not certain at some design decisions and no matter how I landed with some designs, I didn‚Äôt feel happy. Then I took some design courses and books.</p><p>Below is my tweet that I share some design resources that I found useful</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Developer with design skill is like tiger with wings. Here are my recommended courses<br><br>The UI Design Bootcamp by <a href="https://twitter.com/designcoursecom?ref_src=twsrc%5Etfw">@designcoursecom</a> a massive UI design course teaches you to build beautiful and well-functioning user interfaces using HTML and CSS.<a href="https://t.co/vfusXamuhJ">https://t.co/vfusXamuhJ</a></p>&mdash; Khoa üî• (@onmyway133) <a href="https://twitter.com/onmyway133/status/1320464953548091393?ref_src=twsrc%5Etfw">October 25, 2020</a></blockquote> <h2 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h2><p>I used to listen to tech podcasts, then I was bored. Discussions like whether to use MVVM vs MVC, SwiftUI vs Catalyst, Swift vs Objective don‚Äôt interest me anymore.</p><p>If you ask me for choices, my default answer will be NO. Those who are super passionate about their idea will just ignore my advice and do it anyway.</p><p>Then I listen to indie and product development podcasts, it was inspiring. Once I got the mindset, they also became boring.<br>Now I listen to mostly books on Storytel, some books about habit and making time really make my days.</p><h2 id="Tweet"><a href="#Tweet" class="headerlink" title="Tweet"></a>Tweet</h2><p>I came back to Twitter early this year after quitting it for a while because I got enough of all negative and nonsense political debates. But then I found that I can decide who I can follow and what content I want to view. Then I started organizing List, making my own Chrome extensions to automate things and control what I want to view. I have followed quite many indie developers and great product people, I‚Äôve learnt a lot. The downside is I‚Äôm overwhelmingly inspired, I can‚Äôt sleep.</p><p>I try to tweet more about what I‚Äôve learned, sharing articles that I have written. For example here I share about how to gain product idea</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">How to gain product ideas?<br><br>1) Scratch your own itch. If you don&#39;t have any itch to scratch, stop here. This is awkward. Go travelling. Go exploring the world. The world always has problems and needs solution. <a href="https://t.co/07gIoJfJet">pic.twitter.com/07gIoJfJet</a></p>&mdash; Khoa üî• (@onmyway133) <a href="https://twitter.com/onmyway133/status/1330399823921557507?ref_src=twsrc%5Etfw">November 22, 2020</a></blockquote><h2 id="WWDC-Together"><a href="#WWDC-Together" class="headerlink" title="WWDC Together"></a>WWDC Together</h2><p>Notable this year is the website I make <a href="https://wwdctogether.com/">WWDC Together</a> as a place for developers like us to hangout and watch videos together. Each video acts like its own chat room, you can also create private chatroom. My colleagues use this and we watched WWDC together with coke and pizza, it was a lot of fun.</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I&#39;m excited to launch <a href="https://twitter.com/wwdctogether?ref_src=twsrc%5Etfw">@wwdctogether</a> as a free place to watch and hangout during WWDC. We can now view upcoming and previous sessions via modern playback, with a chatroom for each session. Hope this provides a similar WWDC vibe during this hard time ‚ù§Ô∏èüî•<a href="https://t.co/0SgGnUAqst">https://t.co/0SgGnUAqst</a> <a href="https://t.co/f9H9wDi62P">pic.twitter.com/f9H9wDi62P</a></p>&mdash; Khoa üî• (@onmyway133) <a href="https://twitter.com/onmyway133/status/1273243022826835970?ref_src=twsrc%5Etfw">June 17, 2020</a></blockquote> <p>I had the idea like 2 weeks before WWDC, so I had to make it quick. Working with React is fun to me, it is like playing video game.</p><p>I was lucky to be asked by John to write a guest post <a href="https://wwdcbysundell.com/2020/wwdc-together/">Behind the scenes of WWDC Together with Khoa Pham</a> on his website.</p><p>It was also mentioned by Paul in his WWDC wrap up <a href="https://www.hackingwithswift.com/articles/222/wwdc20-wrap-up-and-recommended-talks">WWDC20: Wrap up and recommended talks</a></p><blockquote><p>One area that absolutely flourished this year was community organization. Sites like <a href="https://wwdcwatch.party">https://wwdcwatch.party</a> and <a href="https://wwdctogether.com">https://wwdctogether.com</a> took a huge amount of work to organize, but meant that people had the chance to have some interaction ‚Äì had the chance to actually chat about WWDC and share their excitement. I‚Äôm really grateful to Michie, Khoa, and other community organizers for making this happen.</p></blockquote><p>I also got to share about in in a well known Norwegian tech website <a href="https://www.kode24.no/kodenytt/norske-wwdc-together-lar-oss-se-pa-apples-konferanse-sammen/72584043">orske WWDC Together lar oss se p√• Apples konferanse sammen</a></p><h2 id="Speaking"><a href="#Speaking" class="headerlink" title="Speaking"></a>Speaking</h2><p>In 2019, I made several meetup talks, and one pre conf talk for Mobile Era conf</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">An overview of what we as mobile developers have for <a href="https://twitter.com/hashtag/MachineLearning?src=hash&amp;ref_src=twsrc%5Etfw">#MachineLearning</a> in the session by <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw">@onmyway133</a> at <a href="https://twitter.com/mobileeraconf?ref_src=twsrc%5Etfw">@mobileeraconf</a> Community Evening <a href="https://t.co/bgcE3huGkI">pic.twitter.com/bgcE3huGkI</a></p>&mdash; Mobile Meetup Oslo (@mobileoslo) <a href="https://twitter.com/mobileoslo/status/1192154165751033856?ref_src=twsrc%5Etfw">November 6, 2019</a></blockquote> <p>In 2020, I‚Äôm lucky to be invited to talk in some events</p><p>üçÖ WWDC Watch Party</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thank you <a href="https://twitter.com/JohnEstropia?ref_src=twsrc%5Etfw">@johnestropia</a> <a href="https://twitter.com/thesunshinejr?ref_src=twsrc%5Etfw">@thesunshinejr</a> <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw">@onmyway133</a> for sharing your experience to the community about Open Source Life and thank you for making our dev life better because of your projects! You are all awesome! ‚ù§Ô∏è<a href="https://twitter.com/hashtag/WWDCWatchParty?src=hash&amp;ref_src=twsrc%5Etfw">#WWDCWatchParty</a> <a href="https://twitter.com/hashtag/WWDC20?src=hash&amp;ref_src=twsrc%5Etfw">#WWDC20</a> <a href="https://t.co/tfsX7PtKcO">pic.twitter.com/tfsX7PtKcO</a></p>&mdash; wwdcwatchparty (@wwdcwatchparty) <a href="https://twitter.com/wwdcwatchparty/status/1277214349246042112?ref_src=twsrc%5Etfw">June 28, 2020</a></blockquote> <p>I‚Äôm happy to be invited by Michie to talk along side with <a href="https://twitter.com/JohnEstropia">John</a> and <a href="https://twitter.com/thesunshinejr">≈Åukasz</a>, whom I really admire for their awesome open source contribution, to talk about how to start and contribute to open source</p><p>ü•¶ Bitrise webminar</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">During the 4th installment of our BUG <a href="https://twitter.com/hashtag/webinar?src=hash&amp;ref_src=twsrc%5Etfw">#webinar</a> series, our main focus was <a href="https://twitter.com/hashtag/iOSDev?src=hash&amp;ref_src=twsrc%5Etfw">#iOSDev</a> and <a href="https://twitter.com/hashtag/WWDC20?src=hash&amp;ref_src=twsrc%5Etfw">#WWDC20</a>. Let&#39;s recap what we discussed with our guests, <a href="https://twitter.com/StuFFmc?ref_src=twsrc%5Etfw">@StuffMC</a>, <a href="https://twitter.com/axbotkin?ref_src=twsrc%5Etfw">@axbotkin</a>, <a href="https://twitter.com/Moatazeldebsy?ref_src=twsrc%5Etfw">@Moatazeldebsy</a>, and <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw">@onmyway133</a> in our freshest blog post! ‚ú®üî•<a href="https://t.co/rrA8cyYXus">https://t.co/rrA8cyYXus</a></p>&mdash; Bitrise (@bitrise) <a href="https://twitter.com/bitrise/status/1283431144726368258?ref_src=twsrc%5Etfw">July 15, 2020</a></blockquote> <p>I shared my thoughts about my favorites at WWDC and the future ahead</p><p>üçá Contributing.today</p><p>During Hacktoberfest 2020, I was contacted by my friend <a href="https://twitter.com/webmaxru">Maxim</a> to share about open source </p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I had a pleasure to interview <a href="https://twitter.com/hashtag/OSS?src=hash&amp;ref_src=twsrc%5Etfw">#OSS</a> contributors from Norway <a href="https://twitter.com/DrMowinckels?ref_src=twsrc%5Etfw">@DrMowinckels</a> and <a href="https://twitter.com/onmyway133?ref_src=twsrc%5Etfw">@onmyway133</a> for CONTRIBUTING project. October 2nd we kickoff <a href="https://twitter.com/hashtag/Hacktoberfest?src=hash&amp;ref_src=twsrc%5Etfw">#Hacktoberfest</a> by online meetup about getting started with Open Source at 16:00 CEST. Join our sessions &amp; workshops: <a href="https://t.co/hKkMKEOJJe">https://t.co/hKkMKEOJJe</a> <a href="https://t.co/1yr2AhQ4B6">https://t.co/1yr2AhQ4B6</a></p>&mdash; Maxim Salnikov (@webmaxru) <a href="https://twitter.com/webmaxru/status/1311674525604622337?ref_src=twsrc%5Etfw">October 1, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h2><p>I‚Äôm happy to continue another awesome year at Shortcut and DNB, where I have awesome and super nice colleagues. I ‚Äòve made lots of friends who I can talk with, who invited me to play badminton, tennis, football, swimming, hiking. Why didn‚Äôt we meet earlier?</p><p>I was lucky to attend a workshop hosted by John Sundell at work, I learned a lot</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Ran my first ever large-scale remote workshop today, with over 25 participants, 10 different ongoing video calls for pair programming, and a ton of live coding üòÄ Was so much fun!<br><br>Thanks a lot to the wonderful team at <a href="https://twitter.com/shortcut_no?ref_src=twsrc%5Etfw">@shortcut_no</a> for inviting me üòä <a href="https://t.co/CE4P8Slo1G">https://t.co/CE4P8Slo1G</a></p>&mdash; John Sundell (@johnsundell) <a href="https://twitter.com/johnsundell/status/1298992825422327808?ref_src=twsrc%5Etfw">August 27, 2020</a></blockquote><h2 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h2><p>Thanks for a memorable year, despite all the lockdown. And remember, balance work and life. You don‚Äôt need to be super rich to be happy. Having lots of money in the bank while living alone is not fun at all.</p><p>Another year is coming to an end. When looking back, do you miss the time you didn‚Äôt spend with your friends and family, or do you miss the time you didn‚Äôt get to do your work?</p><p>May your code continue to compile üôè</p><p><strong>Updated at</strong> 2020-12-18 16:57:00</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/715&quot;&gt;#715&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I remember this time last year in
        
      
    
    </summary>
    
    
    
      <category term="life" scheme="https://onmyway133.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>How to do didSet for State and Binding in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-do-didSet-for-State-and-Binding-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-do-didSet-for-State-and-Binding-in-SwiftUI/</id>
    <published>2020-12-16T04:30:50.000Z</published>
    <updated>2020-12-16T18:27:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/714">#714</a></strong></p><p>Below is an example of a parent <code>ContentView</code> with <code>State</code> and a child <code>Sidebar</code> with a <code>Binding</code>.</p><p>The <code>didSet</code> is only called for the property that is changed. </p><p>When we click <code>Button in ContentView</code>, that changes <code>State</code> property, so only the <code>didSet</code> in <code>ContentView</code> is called<br>When we click <code>Button in Sidebar</code>, that changes <code>Binding</code> property, so only the <code>didSet</code> in <code>Sidebar</code> is called</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Tag</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> all</span><br><span class="line">    <span class="keyword">case</span> settings</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> tag: <span class="type">Tag</span> = .all &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"ContentView \(tag)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Sidebar</span>(tag: $tag)</span><br><span class="line">        <span class="type">Button</span>(action: &#123; tag = .settings &#125;) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Button in ContentView"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sidebar</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span></span><br><span class="line">    <span class="keyword">var</span> tag: <span class="type">Tag</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Sidebar \(tag)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(tag.rawValue)</span><br><span class="line">        <span class="type">Button</span>(action: &#123; tag = .settings &#125;) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Button in Sidebar"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Custom-Binding-with-get-set"><a href="#Custom-Binding-with-get-set" class="headerlink" title="Custom Binding with get set"></a>Custom Binding with get set</h3><p>Another way to observe Binding changes is to use custom <code>Binding</code> with <code>get, set</code>. Here even if we click <code>Button in ContentView</code>, the <code>set</code> block is triggered and here we can change <code>State</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Sidebar</span>(tag: <span class="type">Binding</span>&lt;<span class="type">Tag</span>&gt;(</span><br><span class="line">        <span class="keyword">get</span>: &#123; tag &#125;,</span><br><span class="line">        <span class="keyword">set</span>: &#123; newTag <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.tag = newTag</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"ContentView newTag \(newTag)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    ))</span><br><span class="line">    <span class="type">Button</span>(action: &#123; tag = .settings &#125;) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Button in ContentView"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Convenient-new-Binding"><a href="#Convenient-new-Binding" class="headerlink" title="Convenient new Binding"></a>Convenient new Binding</h3><p>We can also make convenient extension on Binding to return new <code>Binding</code>, with a hook allowing us to inspect newValue. So we can call like <code>Sidebar(tag: $tag.didSet</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Binding</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didSet</span><span class="params">(<span class="number">_</span> <span class="keyword">didSet</span>: @escaping <span class="params">(Value)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Binding</span>&lt;<span class="type">Value</span>&gt; &#123;</span><br><span class="line">        <span class="type">Binding</span>(</span><br><span class="line">            <span class="keyword">get</span>: &#123; wrappedValue &#125;,</span><br><span class="line">            <span class="keyword">set</span>: &#123; newValue <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.wrappedValue = newValue</span><br><span class="line">                <span class="keyword">didSet</span>(newValue)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> tag: <span class="type">Tag</span> = .all &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"ContentView \(tag)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Sidebar</span>(tag: $tag.<span class="keyword">didSet</span> &#123; newValue <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"ContentView newTag \(newValue)"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="type">Button</span>(action: &#123; tag = .settings &#125;) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Button in ContentView"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-12-16 19:27:35</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/714&quot;&gt;#714&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Below is an example of a parent
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to add toolbar programatically in macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-toolbar-programatically-in-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-toolbar-programatically-in-macOS/</id>
    <published>2020-12-15T04:18:34.000Z</published>
    <updated>2020-12-15T04:18:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/713">#713</a></strong></p><p>To setup toolbar, we need to implement <code>NSToolbarDelegate</code> that provides toolbar items. This delegate is responsible for many things</p><ul><li>Set visible and allowed items with <code>toolbarDefaultItemIdentifiers</code></li><li>Provide item with <code>itemForItemIdentifier</code></li><li>Being notified with <code>toolbarWillAddItem</code> and <code>toolbarDidRemoveItem</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.toolbarStyle = .unifiedCompact</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> toolbar = <span class="type">NSToolbar</span>(identifier: <span class="string">"Toolbar"</span>)</span><br><span class="line">toolbar.displayMode = .iconAndLabel</span><br><span class="line">toolbar.delegate = (<span class="type">NSApp</span>.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>)</span><br><span class="line">toolbar.insertItem(withItemIdentifier: .add, at: <span class="number">0</span>)</span><br><span class="line">toolbar.insertItem(withItemIdentifier: .settings, at: <span class="number">1</span>)</span><br><span class="line">window.toolbar = toolbar</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSToolbarItem</span>.<span class="title">Identifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> add = <span class="type">NSToolbarItem</span>.<span class="type">Identifier</span>(rawValue: <span class="string">"Add"</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> settings = <span class="type">NSToolbarItem</span>.<span class="type">Identifier</span>(rawValue: <span class="string">"Settings"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AppDelegate</span>: <span class="title">NSToolbarDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toolbar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> toolbar: NSToolbar,</span></span></span><br><span class="line"><span class="function"><span class="params">        itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,</span></span></span><br><span class="line"><span class="function"><span class="params">        willBeInsertedIntoToolbar flag: Bool</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> -&gt; <span class="type">NSToolbarItem?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> itemIdentifier &#123;</span><br><span class="line">        <span class="keyword">case</span> .add:</span><br><span class="line">            <span class="keyword">let</span> item = <span class="type">NSToolbarItem</span>(itemIdentifier: itemIdentifier)</span><br><span class="line">            item.label = <span class="string">"Add"</span></span><br><span class="line">            item.image = <span class="type">NSImage</span>(named: <span class="type">NSImage</span>.<span class="type">Name</span>(<span class="string">"add"</span>))</span><br><span class="line">            <span class="keyword">let</span> menuItem: <span class="type">NSMenuItem</span> = <span class="type">NSMenuItem</span>()</span><br><span class="line">            menuItem.submenu = <span class="literal">nil</span></span><br><span class="line">            menuItem.title = <span class="string">"Add"</span></span><br><span class="line">            item.menuFormRepresentation = menuItem</span><br><span class="line">            item.toolTip = <span class="string">"Click here to add new entry"</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">case</span> .settings:</span><br><span class="line">            <span class="keyword">let</span> item = <span class="type">NSToolbarItem</span>(itemIdentifier: itemIdentifier)</span><br><span class="line">            item.label = <span class="string">"Settings"</span></span><br><span class="line">            <span class="keyword">let</span> button = <span class="type">NSButton</span>(image: <span class="type">NSImage</span>(named: <span class="type">NSImage</span>.<span class="type">Name</span>(<span class="string">"gear"</span>))!, target: <span class="literal">nil</span>, action: <span class="literal">nil</span>)</span><br><span class="line">            button.bezelStyle = .texturedRounded</span><br><span class="line">            item.view = button</span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toolbarDefaultItemIdentifiers</span><span class="params">(<span class="number">_</span> toolbar: NSToolbar)</span></span> -&gt; [<span class="type">NSToolbarItem</span>.<span class="type">Identifier</span>] &#123;</span><br><span class="line">        [.add, .settings]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toolbarAllowedItemIdentifiers</span><span class="params">(<span class="number">_</span> toolbar: NSToolbar)</span></span> -&gt; [<span class="type">NSToolbarItem</span>.<span class="type">Identifier</span>] &#123;</span><br><span class="line">        [.add, .settings]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Toolbars/Tasks/AddRemoveToolbarItems.html">Adding and Removing Toolbar Items</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/713&quot;&gt;#713&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To setup toolbar, we need to implement
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to declare network Error with enum in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-declare-network-Error-with-enum-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-declare-network-Error-with-enum-in-Swift/</id>
    <published>2020-12-14T10:17:31.000Z</published>
    <updated>2020-12-14T10:17:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/712">#712</a></strong></p><p>Describe all possible paths in your program with enum. This is great to track down bugs and to not miss representing potential cases in UI. Errors can come from app layer, backend layer to network issues.</p><p>Enum is handy in both UIKit and SwiftUI</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">NetworkError</span>: <span class="title">Swift</span>.<span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">RequestError</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> invalidRequest(<span class="type">URLRequest</span>)</span><br><span class="line">        <span class="keyword">case</span> encodingError(<span class="type">Swift</span>.<span class="type">EncodingError</span>)</span><br><span class="line">        <span class="keyword">case</span> other(<span class="type">NSError</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ServerError</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> decodingError(<span class="type">Swift</span>.<span class="type">DecodingError</span>)</span><br><span class="line">        <span class="keyword">case</span> noInternetConnection</span><br><span class="line">        <span class="keyword">case</span> timeout</span><br><span class="line">        <span class="keyword">case</span> internalServerError</span><br><span class="line">        <span class="keyword">case</span> other(statusCode: <span class="type">Int</span>, response: <span class="type">HTTPURLResponse</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> requestError(<span class="type">RequestError</span>)</span><br><span class="line">    <span class="keyword">case</span> serverError(<span class="type">ServerError</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and note that Foundation has <code>NSError</code> with a bunch of well defined error code ready to use. We can use this before introduce our custom error cases</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorUnknown</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorCancelled</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorBadURL</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorTimedOut</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorUnsupportedURL</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorCannotFindHost</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorCannotConnectToHost</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorNetworkConnectionLost</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorDNSLookupFailed</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorHTTPTooManyRedirects</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorResourceUnavailable</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorNotConnectedToInternet</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorRedirectToNonExistentLocation</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorBadServerResponse</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorUserCancelledAuthentication</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorUserAuthenticationRequired</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorZeroByteResource</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorCannotDecodeRawData</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorCannotDecodeContentData</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> <span class="type">NSURLErrorCannotParseResponse</span>: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/712&quot;&gt;#712&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Describe all possible paths in your
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to programatically select row in List in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-programatically-select-row-in-List-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-programatically-select-row-in-List-in-SwiftUI/</id>
    <published>2020-12-13T18:54:22.000Z</published>
    <updated>2020-12-13T18:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/711">#711</a></strong></p><p><code>List</code> has a selection parameter where we can pass selection binding. As we can see here <code>selection</code> is of type optional <code>Binding&lt;Set&lt;SelectionValue&gt;&gt;?</code> where <code>SelectionValue</code> is any thing conforming to <code>Hasable</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">13.0</span>, macOS <span class="number">10.15</span>, tvOS <span class="number">13.0</span>, watchOS <span class="number">6.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span>&lt;<span class="title">SelectionValue</span>, <span class="title">Content</span>&gt; : <span class="title">View</span> <span class="title">where</span> <span class="title">SelectionValue</span> : <span class="title">Hashable</span>, <span class="title">Content</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@available</span>(watchOS, unavailable)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(selection: <span class="type">Binding</span>&lt;<span class="type">Set</span>&lt;<span class="type">SelectionValue</span>&gt;&gt;?, @<span class="type">ViewBuilder</span> content: () -&gt; <span class="type">Content</span>)</span><br></pre></td></tr></table></figure><p>So we can programatically control selection by tagging row with our own <code>Tag</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SideView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Tag</span>: <span class="title">String</span>, <span class="title">Hashable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> all</span><br><span class="line">        <span class="keyword">case</span> settings</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="type">State</span></span><br><span class="line">    <span class="keyword">var</span> selection: <span class="type">Tag?</span> = .all</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            all</span><br><span class="line">                .tag(<span class="type">Tag</span>.all)</span><br><span class="line">            categories</span><br><span class="line">            settings</span><br><span class="line">                .tag(<span class="type">Tag</span>.settings)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/711&quot;&gt;#711&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt; has a selection
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to show sidebar in SwiftUI for macOS</title>
    <link href="https://onmyway133.github.io/blog/How-to-show-sidebar-in-SwiftUi-for-macOS/"/>
    <id>https://onmyway133.github.io/blog/How-to-show-sidebar-in-SwiftUi-for-macOS/</id>
    <published>2020-12-13T18:01:59.000Z</published>
    <updated>2020-12-14T14:38:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/710">#710</a></strong></p><p>Starting from macOS 11, we can use <code>List</code> with <code>SidebarListStyle</code> inside <code>NavigationView</code> to declare master detail view. The <code>SidebarListStyle</code> makes list translucent. It automatically handles selection and marks selected row in list with accent color.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MainView</span>: <span class="title">some</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            sidebar</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> sidebar: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Categories"</span>)</span><br><span class="line">                    .foregroundColor(.gray)</span><br><span class="line">                <span class="type">ForEach</span>(categories) &#123; category <span class="keyword">in</span></span><br><span class="line">                    <span class="type">NavigationLink</span>(destination: <span class="type">ContentView</span>(category: category)) &#123;</span><br><span class="line">                        <span class="type">Label</span>(category.name, systemImage: <span class="string">"message"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Divider</span>()</span><br><span class="line">            <span class="type">NavigationLink</span>(destination: <span class="type">SettingsView</span>()) &#123;</span><br><span class="line">                <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .listStyle(<span class="type">SidebarListStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To toggle side bar, we can use <code>toggleSidebar</code> selector since for now, sidebar is backed by <code>NSSplitViewController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainWindow.firstResponder?.tryToPerform(#selector(<span class="type">NSSplitViewController</span>.toggleSidebar(<span class="number">_</span>:)), with: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>We can specify tool bar items on either sidebar or content.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.toolbar&#123;</span><br><span class="line">    <span class="comment">//Toggle Sidebar Button</span></span><br><span class="line">    <span class="type">ToolbarItem</span>(placement: .navigation)&#123;</span><br><span class="line">        <span class="type">Button</span>(action: toggleSidebar) &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"sidebar.left"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For tool bar to work, we must use <code>App</code> and embed views inside <code>WindowGroup</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AppWithSidebarAndToolbar</span>: <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">MainView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-12-14 15:38:19</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/710&quot;&gt;#710&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Starting from macOS 11, we can use
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to mock UNNotificationResponse in unit tests</title>
    <link href="https://onmyway133.github.io/blog/How-to-mock-UNNotificationResponse-in-unit-tests/"/>
    <id>https://onmyway133.github.io/blog/How-to-mock-UNNotificationResponse-in-unit-tests/</id>
    <published>2020-12-07T10:24:19.000Z</published>
    <updated>2020-12-07T10:49:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/708">#708</a></strong></p><p>The best way to test is to not have to mock at all. The second best way is to have your own abstraction over the things you would like to test, either it is in form of protocol or some function injection.</p><p>But in case you want a quick way to test things, and want to test as real as possible, then for some cases we can be creative to mock the real objects.</p><p>One practical example is when we have some logic to handle notification, either showing or deep link user to certain screen. From iOS 10, notifications are to be delivered via <code>UNUserNotificationCenterDelegate</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">UNUserNotificationCenterDelegate</span> : <span class="title">NSObjectProtocol</span> </span>&#123;</span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</span><br><span class="line">    <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">userNotificationCenter</span><span class="params">(<span class="number">_</span> center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and all we get is <code>UNNotificationResponse</code> which has no real way to construct it.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">UNNotificationResponse</span> : <span class="title">NSObject</span>, <span class="title">NSCopying</span>, <span class="title">NSSecureCoding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The notification to which the user responded.</span></span><br><span class="line">    <span class="meta">@NSCopying</span> <span class="keyword">open</span> <span class="keyword">var</span> notification: <span class="type">UNNotification</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure><p>That class inherits from <code>NSCopying</code> which means it is constructed from <code>NSCoder</code>, but how do we init it?</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> response = <span class="type">UNNotificationResponse</span>(coder: ???)</span><br></pre></td></tr></table></figure><h2 id="NSObject-and-NSCoder"><a href="#NSObject-and-NSCoder" class="headerlink" title="NSObject and NSCoder"></a>NSObject and NSCoder</h2><p>The trick is, since <code>UNNotificationResponse</code> is <code>NSObject</code> subclass, it is key value compliant, and since it is also <code>NSCopying</code> compliant, we can make a mock coder to construct it</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyedArchiver</span>: <span class="title">NSKeyedArchiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">decodeObject</span><span class="params">(forKey <span class="number">_</span>: String)</span></span> -&gt; <span class="type">Any</span> &#123; <span class="string">""</span> &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">decodeInt64</span><span class="params">(forKey key: String)</span></span> -&gt; <span class="type">Int64</span> &#123; <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>On iOS 12, we need to add <code>decodeInt64</code> method, otherwise <code>UNNotificationResponse</code> init fails. This is not needed on iOS 14</p><p><code>UNNotificationResponse</code> has a read only <code>UNNotification</code>, which has a readonly <code>UNNotificationRequest</code>, which can be constructed from a <code>UNNotificationContent</code></p><p>Luckily <code>UNNotificationContent</code> has a counterpart <code>UNMutableNotificationContent</code></p><p>Now we can make a simple extension on <code>UNNotificationResponse</code> to quickly create that object in tests</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">UNNotificationResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">with</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        userInfo: [AnyHashable: <span class="keyword">Any</span>],</span></span></span><br><span class="line"><span class="function"><span class="params">        actionIdentifier: String = UNNotificationDefaultActionIdentifier</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> <span class="keyword">throws</span> -&gt; <span class="type">UNNotificationResponse</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="type">UNMutableNotificationContent</span>()</span><br><span class="line">        content.userInfo = userInfo</span><br><span class="line">        <span class="keyword">let</span> request = <span class="type">UNNotificationRequest</span>(</span><br><span class="line">            identifier: <span class="string">""</span>,</span><br><span class="line">            content: content,</span><br><span class="line">            trigger: <span class="literal">nil</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> notification = <span class="keyword">try</span> <span class="type">XCTUnwrap</span>(<span class="type">UNNotification</span>(coder: <span class="type">KeyedArchiver</span>()))</span><br><span class="line">        notification.setValue(request, forKey: <span class="string">"request"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> response = <span class="keyword">try</span> <span class="type">XCTUnwrap</span>(<span class="type">UNNotificationResponse</span>(coder: <span class="type">KeyedArchiver</span>()))</span><br><span class="line">        response.setValue(notification, forKey: <span class="string">"notification"</span>)</span><br><span class="line">        response.setValue(actionIdentifier, forKey: <span class="string">"actionIdentifier"</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can then test like normal</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testResponse</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data: [<span class="type">AnyHashable</span>: <span class="type">Any</span>] = [</span><br><span class="line">        <span class="string">"data"</span>: [</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"OPEN_ARTICLE"</span>,</span><br><span class="line">            <span class="string">"articleId"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"articleType"</span>: <span class="string">"Fiction"</span>,</span><br><span class="line">            <span class="string">"articleTag"</span>: <span class="string">"1"</span></span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">try</span> <span class="type">UNNotificationResponse</span>.with(userInfo: data)</span><br><span class="line">    <span class="keyword">let</span> centerDelegate = <span class="type">ArticleCenterDelegate</span>()</span><br><span class="line">    centerDelegate.userNotificationCenter(</span><br><span class="line">        <span class="type">UNUserNotificationCenter</span>.current(),</span><br><span class="line">        didReceive: response,</span><br><span class="line">        withCompletionHandler: &#123;&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="type">XCTAssertEqual</span>(response.notification.request.content.userInfo[<span class="string">"type"</span>], <span class="string">"OPEN_ARTICLE"</span>)</span><br><span class="line">    <span class="type">XCTAssertEqual</span>(centerDelegate.didOpenArticle, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="decodeObject-for-key"><a href="#decodeObject-for-key" class="headerlink" title="decodeObject for key"></a>decodeObject for key</h2><p>Another way is to build a proper <code>KeyedArchiver</code> that checks key and return correct property. Note that we can reuse the same <code>NSKeyedArchiver</code> to nested properties.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyedArchiver</span>: <span class="title">NSKeyedArchiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> request: <span class="type">UNNotificationRequest</span></span><br><span class="line">    <span class="keyword">let</span> actionIdentifier: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> notification: <span class="type">UNNotification</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">decodeObject</span><span class="params">(forKey key: String)</span></span> -&gt; <span class="type">Any?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> key &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"request"</span>:</span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"actionIdentifier"</span>:</span><br><span class="line">            <span class="keyword">return</span> actionIdentifier</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"notification"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UNNotification</span>(coder: <span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-12-07 11:49:55</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/708&quot;&gt;#708&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best way to test is to not have to
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="testing" scheme="https://onmyway133.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to support right click menu to NSStatusItem</title>
    <link href="https://onmyway133.github.io/blog/How-to-support-right-click-menu-to-NSStatusItem/"/>
    <id>https://onmyway133.github.io/blog/How-to-support-right-click-menu-to-NSStatusItem/</id>
    <published>2020-12-07T05:16:58.000Z</published>
    <updated>2020-12-08T04:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/707">#707</a></strong></p><p>The trick is to set the button oinside of <code>statusItem</code> to send actions on both <code>leftMouseUp</code> and <code>rightMouseUp</code>.</p><p>Another thing to note is we use <code>popUpMenu</code> on <code>NSStatusItem</code>, although it is marked as deprecated on macOS 10.14. We can set <code>menu</code> but that overrides left click. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Omnia</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> statusItem = <span class="type">NSStatusBar</span>.system.statusItem(withLength: <span class="type">NSStatusItem</span>.squareLength)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> statusItemMenuHandler = <span class="type">MenuHandler</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupStatusMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> button = statusItem.button &#123;</span><br><span class="line">        button.image = <span class="type">NSImage</span>(named: <span class="type">NSImage</span>.<span class="type">Name</span>(<span class="string">"statusMenuIcon"</span>))</span><br><span class="line">        button.contentTintColor = <span class="type">NSColor</span>.black</span><br><span class="line">        button.action = #selector(statusMenuButtonTouched(<span class="number">_</span>:))</span><br><span class="line">        button.sendAction(on: [.leftMouseUp, .rightMouseUp]) <span class="comment">// This is important</span></span><br><span class="line"></span><br><span class="line">        statusItemMenuHandler.add(title: <span class="string">"About"</span>, action: &#123;</span><br><span class="line">            <span class="type">NSWorkspace</span>.shared.<span class="keyword">open</span>(<span class="type">URL</span>(string: <span class="string">"https://onmyway133.com/pushhero"</span>)!)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">statusMenuButtonTouched</span><span class="params">(<span class="number">_</span> sender: NSStatusBarButton)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> event = <span class="type">NSApp</span>.currentEvent <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">switch</span> event.type &#123;</span><br><span class="line">    <span class="keyword">case</span> .rightMouseUp:</span><br><span class="line">        statusItem.popUpMenu(statusItemMenuHandler.menu)</span><br><span class="line">        <span class="comment">// statusItem.menu = statusItemMenuHandler.menu // this overrides left click</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        popover.toggle()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-12-08 05:11:24</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/707&quot;&gt;#707&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The trick is to set the button oinside of
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to convert struct to Core Data NSManagedObject</title>
    <link href="https://onmyway133.github.io/blog/How-to-convert-struct-to-Core-Data-NSManagedObject/"/>
    <id>https://onmyway133.github.io/blog/How-to-convert-struct-to-Core-Data-NSManagedObject/</id>
    <published>2020-12-07T05:04:21.000Z</published>
    <updated>2020-12-07T05:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/706">#706</a></strong></p><p>Use <code>Mirror</code> and set key value as <code>NSManagedObject</code> subclasses from <code>NSObject</code> </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagedObjectConverter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">convert</span>&lt;M&gt;<span class="params">(m: M, context: NSManagedObjectContext)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSManagedObject</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> entityName = <span class="type">String</span>(describing: m)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> entityDescription = <span class="type">NSEntityDescription</span>.entity(</span><br><span class="line">            forEntityName: entityName,</span><br><span class="line">            <span class="keyword">in</span>: context</span><br><span class="line">        ) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">AppError</span>.parsing</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> managedObject = <span class="type">NSManagedObject</span>(</span><br><span class="line">            entity: entityDescription,</span><br><span class="line">            insertInto: context</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: m)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> mirror.displayStyle == .<span class="keyword">struct</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">AppError</span>.parsing</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, anyValue) <span class="keyword">in</span> mirror.children &#123;</span><br><span class="line">            managedObject.setValue(anyValue, forKey: label)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> managedObject</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-12-07 06:05:04</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/706&quot;&gt;#706&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;Mirror&lt;/code&gt; and set key value
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="core data" scheme="https://onmyway133.github.io/tags/core-data/"/>
    
  </entry>
  
  <entry>
    <title>How to format ISO date string in Javascript</title>
    <link href="https://onmyway133.github.io/blog/How-to-format-ISO-date-string-in-Javascript/"/>
    <id>https://onmyway133.github.io/blog/How-to-format-ISO-date-string-in-Javascript/</id>
    <published>2020-12-05T05:00:44.000Z</published>
    <updated>2020-12-05T05:00:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/705">#705</a></strong></p><p>Supposed we have date in format ISO8601 and we want to get rid of T and millisecond and timezone Z</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">date.toDateString() <span class="comment">// "Sat Dec 05 2020"</span></span><br><span class="line">date.toString() <span class="comment">// "Sat Dec 05 2020 06:58:19 GMT+0100 (Central European Standard Time)"</span></span><br><span class="line">date.toISOString() <span class="comment">// "2020-12-05T05:58:19.081Z"</span></span><br></pre></td></tr></table></figure><p>We can use <code>toISOString</code>, then split base on the dot <code>.</code> then remove character <code>T</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date</span><br><span class="line">        .toISOString()</span><br><span class="line">        .split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">        .replace(<span class="string">'T'</span>, <span class="string">' '</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/705&quot;&gt;#705&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Supposed we have date in format ISO8601
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>How to declare Error in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-declare-Error-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-declare-Error-in-Swift/</id>
    <published>2020-12-05T04:31:35.000Z</published>
    <updated>2020-12-05T04:31:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/704">#704</a></strong></p><p>We used to declare enum that conforms to <code>Error</code>, but any type like struct or class can conform to Error as well.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">NetworkError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> failToCreateRequest</span><br><span class="line">    <span class="keyword">case</span> failToParseResponse</span><br><span class="line">    <span class="keyword">case</span> failToReachServe</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DetailError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> networkError: <span class="type">Error</span></span><br><span class="line">    <span class="keyword">let</span> createdAt: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">let</span> tag: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> trackId: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> detailError: <span class="type">DetailError</span></span><br><span class="line">    <span class="keyword">let</span> trackSession: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(trackId: <span class="type">String</span>, detailError: <span class="type">DetailError</span>, trackSession: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.trackId = trackId</span><br><span class="line">        <span class="keyword">self</span>.detailError = detailError</span><br><span class="line">        <span class="keyword">self</span>.trackSession = trackSession</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> networkError = <span class="type">NetworkError</span>.failToCreateRequest</span><br><span class="line"><span class="keyword">let</span> detailError = <span class="type">DetailError</span>(networkError: networkError, createdAt: <span class="type">Date</span>(), tag: <span class="string">"0.1"</span>)</span><br><span class="line"><span class="keyword">let</span> trackError = <span class="type">TrackError</span>(trackId: <span class="string">"AB-01"</span>, detailError: detailError, trackSession: <span class="string">"101"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/704&quot;&gt;#704&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We used to declare enum that conforms to
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>How to convert from paid to free with IAP</title>
    <link href="https://onmyway133.github.io/blog/How-to-convert-from-paid-to-free-with-IAP/"/>
    <id>https://onmyway133.github.io/blog/How-to-convert-from-paid-to-free-with-IAP/</id>
    <published>2020-11-30T19:26:10.000Z</published>
    <updated>2020-12-04T05:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/703">#703</a></strong></p><h2 id="What-is-receipt"><a href="#What-is-receipt" class="headerlink" title="What is receipt"></a>What is receipt</h2><p>Read <a href="https://stackoverflow.com/questions/45615106/when-to-refresh-a-receipt-vs-restore-purchases-in-ios">When to refresh a receipt vs restore purchases in iOS?</a></p><p>From iOS 7, every app downloaded from the store has a receipt (for downloading/buying the app) at <code>appStoreReceiptURL</code>. When users purchases something via In App Purchase, the content at <code>appStoreReceiptURL</code> is updated with purchases information. Most of the cases, you just need to refresh the receipt (at appStoreReceiptURL) so that you know which transactions users have made.</p><p><strong>Note</strong></p><ul><li>Receipt is generated and bundled with your app when user download the app, whether it is free or paid</li><li>When user makes IAP, receipt is updated with IAP information</li><li>When user downloads an app (download free, or purchase paid app), they get future updates (whether free or paid) forever.</li><li>Call <code>SKReceiptRefreshRequest</code> or <code>SKPaymentQueue.restoreCompletedTransactions</code> asks for Appstore credential</li><li>When we build the app from Xcode or download from Testflight, receipt is not bundled within the app since the app is not downloaded from AppStore. We can use <code>SKReceiptRefreshRequest</code> to download receipt from sandbox Appstore</li><li><code>restoreCompletedTransactions</code> updates app receipt</li><li>Receipt is stored locally on device, so when user uninstalls and reinstalls your app, there‚Äôs no in app purchases information, this is when you should refresh receipt or <code>restoreCompletedTransactions</code></li></ul><p>Users restore transactions to maintain access to content they‚Äôve already purchased. For example, when they upgrade to a new phone, they don‚Äôt lose all of the items they purchased on the old phone. Include some mechanism in your app to let the user restore their purchases, such as a Restore Purchases button. Restoring purchases prompts for the user‚Äôs App Store credentials, which interrupts the flow of your app: because of this, don‚Äôt automatically restore purchases, especially not every time your app is launched.</p><p>In most cases, all your app needs to do is refresh its receipt and deliver the products in its receipt. The refreshed receipt contains a record of the user‚Äôs purchases in this app, on this device or any other device. However, some apps need to take an alternate approach for one of the following reasons:</p><ul><li>If you use Apple-hosted content, restoring completed transactions gives your app the transaction objects it uses to download the content. If you need to support versions of iOS earlier than iOS 7, where the app receipt isn‚Äôt available, restore completed transactions instead.</li><li>Refreshing the receipt asks the App Store for the latest copy of the receipt. Refreshing a receipt does not create any new transactions.</li><li>Restoring completed transactions creates a new transaction for every completed transaction the user made, essentially replaying history for your transaction queue observer.</li></ul><p>More about receipt, from WWDC 2017, What‚Äôs new in StoreKit session <a href="https://developer.apple.com/videos/play/wwdc2017/303/">https://developer.apple.com/videos/play/wwdc2017/303/</a></p><p><img src="https://user-images.githubusercontent.com/2284279/100661732-38507b00-3354-11eb-9198-104410e5ddfb.png" alt="receipt"></p><p>You can also watch WWDC 2017, session Advanced StoreKit for more detail <a href="https://developer.apple.com/videos/play/wwdc2017/305/">https://developer.apple.com/videos/play/wwdc2017/305/</a></p><p><img src="https://user-images.githubusercontent.com/2284279/100661745-3d152f00-3354-11eb-943d-9c6d9b79000d.png" alt="receipt tips"></p><h2 id="Restoring-Purchased-Products"><a href="#Restoring-Purchased-Products" class="headerlink" title="Restoring Purchased Products"></a>Restoring Purchased Products</h2><p>Read <a href="https://developer.apple.com/documentation/storekit/in-app_purchase/restoring_purchased_products">Restoring Purchased Products</a></p><blockquote><p>Users sometimes need to restore purchased content, such as when they upgrade to a new phone.</p></blockquote><blockquote><p>Don‚Äôt automatically restore purchases, especially when your app is launched. Restoring purchases prompts for the user‚Äôs App Store credentials, which interrupts the flow of your app</p></blockquote><blockquote><p>In most cases, you only need to refresh the app receipt and deliver the products listed on the receipt. The refreshed receipt contains a record of the user‚Äôs purchases in this app, from any device the user‚Äôs App Store account is logged into</p></blockquote><blockquote><p>Refreshing a receipt doesn‚Äôt create new transactions; it requests the latest copy of the receipt from the App Store</p></blockquote><blockquote><p>Restoring completed transactions creates a new transaction for every transaction previously completed, essentially replaying history for your transaction queue observer. Your app maintains its own state to keep track of why it‚Äôs restoring completed transactions and how to handle them.</p></blockquote><h2 id="What-are-the-different-IAP-types"><a href="#What-are-the-different-IAP-types" class="headerlink" title="What are the different IAP types"></a>What are the different IAP types</h2><p>From AppStore</p><h3 id="Consumable-pay-everytime"><a href="#Consumable-pay-everytime" class="headerlink" title="Consumable (pay everytime)"></a>Consumable (pay everytime)</h3><p>A consumable In-App Purchase must be purchased every time the user downloads it. One-time services, such as fish food in a fishing app, are usually implemented as consumables.</p><h3 id="Non-Consumable-one-time-payment"><a href="#Non-Consumable-one-time-payment" class="headerlink" title="Non-Consumable (one time payment)"></a>Non-Consumable (one time payment)</h3><p>Non-consumable In-App Purchases only need to be purchased once by users. Services that do not expire or decrease with use are usually implemented as non-consumables, such as new race tracks for a game app.</p><h3 id="Auto-Renewable-Subscriptions-will-deduct-money-from-your-credit-card-on-a-cycle-complete"><a href="#Auto-Renewable-Subscriptions-will-deduct-money-from-your-credit-card-on-a-cycle-complete" class="headerlink" title="Auto-Renewable Subscriptions (will deduct money from your credit card on a cycle complete)"></a>Auto-Renewable Subscriptions (will deduct money from your credit card on a cycle complete)</h3><p>Auto-renewable Subscriptions allow the user to purchase updating and dynamic content for a set duration of time. Subscriptions renew automatically unless the user opts out, such as magazine subscriptions.</p><h3 id="Free-Subscription-no-payment-and-is-still-visible-even-you-did-not-submitted-your-account-detail-to-itunes-connect"><a href="#Free-Subscription-no-payment-and-is-still-visible-even-you-did-not-submitted-your-account-detail-to-itunes-connect" class="headerlink" title="Free Subscription (no payment and is still visible even you did not submitted your account detail to itunes connect)"></a>Free Subscription (no payment and is still visible even you did not submitted your account detail to itunes connect)</h3><p>Free subscriptions are a way for developers to put free subscription content in Newsstand. Once a user signs up for a free subscription, it will be available on all devices associated with the user‚Äôs Apple ID. Note that free subscriptions do not expire and can only be offered in Newsstand-enabled apps.</p><h3 id="Non-Renewing-need-to-renew-manually"><a href="#Non-Renewing-need-to-renew-manually" class="headerlink" title="Non-Renewing (need to renew manually)"></a>Non-Renewing (need to renew manually)</h3><p>Subscription Non-Renewing Subscriptions allow the sale of services with a limited duration. Non-Renewing Subscriptions must be used for In-App Purchases that offer time-based access to static content. Examples include a one week subscription to voice guidance feature within a navigation app or an annual subscription to online catalog of archived video or audio.</p><h2 id="When-is-app-receipt-missing"><a href="#When-is-app-receipt-missing" class="headerlink" title="When is app receipt missing"></a>When is app receipt missing</h2><p>Read <a href="https://developer.apple.com/documentation/storekit/skreceiptrefreshrequest">SKReceiptRefreshRequest</a></p><blockquote><p>Use this API to request a new receipt if the receipt is invalid or missing</p></blockquote><p>Receipt is stored locally on device. It can be missing in case user sync or restore device.</p><p>Watch <a href="https://asciiwwdc.com/2014/sessions/305">WWDC 2014 - 305 Preventing Unauthorized Purchases with Receipts</a></p><h2 id="How-to-check-receipt-existence"><a href="#How-to-check-receipt-existence" class="headerlink" title="How to check receipt existence"></a>How to check receipt existence</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bundle</span>.main.appStoreReceiptURL</span><br><span class="line">checkResourceIsReachable</span><br></pre></td></tr></table></figure><h2 id="How-to-read-receipt"><a href="#How-to-read-receipt" class="headerlink" title="How to read receipt"></a>How to read receipt</h2><p>Read <a href="https://www.raywenderlich.com/9257-in-app-purchases-receipt-validation-tutorial">In-App Purchases: Receipt Validation Tutorial</a></p><blockquote><p>The receipt consists of a single file in the app bundle. The file is in a format called PKCS #7. The payload consists of a set of receipt attributes in a cross-platform format called ASN.1</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">12</span>: <span class="comment">// Receipt Creation Date</span></span><br><span class="line">  <span class="keyword">var</span> dateStartPtr = ptr</span><br><span class="line">  receiptCreationDate = readASN1Date(ptr: &amp;dateStartPtr, maxLength: length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>: <span class="comment">// IAP Receipt</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"IAP Receipt."</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">case</span> <span class="number">19</span>: <span class="comment">// Original App Version</span></span><br><span class="line">  <span class="keyword">var</span> stringStartPtr = ptr</span><br><span class="line">  originalAppVersion = readASN1String(ptr: &amp;stringStartPtr, maxLength: length)</span><br></pre></td></tr></table></figure><p>Use <a href="https://github.com/tikhop/TPInAppReceipt">TPInAppReceipt</a> which includes certificates.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="type">InAppReceipt</span>.localReceipt()</span><br></pre></td></tr></table></figure><p>Check <a href="https://developer.apple.com/library/archive/releasenotes/General/ValidateAppStoreReceipt/Chapters/ReceiptFields.html">Receipt Fields</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Original Application Version</span><br><span class="line">The version of the app that was originally purchased.</span><br><span class="line">ASN.1 Field Type 19</span><br><span class="line">ASN.1 Field Value UTF8STRING</span><br></pre></td></tr></table></figure><p><strong>Note</strong></p><blockquote><p>This corresponds to the value of CFBundleVersion (in iOS) or CFBundleShortVersionString (in macOS) in the Info.plist file when the purchase was originally made</p></blockquote><p><code>CFBundleVersion</code> is build number, and <code>CFBundleShortVersionString</code> is app version</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In-App Purchase Receipt</span><br><span class="line">The receipt for an in-app purchase.</span><br><span class="line">ASN.1 Field Type 17</span><br></pre></td></tr></table></figure><p>Read <a href="https://developer.apple.com/documentation/storekit/in-app_purchase/validating_receipts_with_the_app_store">Validating Receipts with the App Store</a></p><p>Sample <code>verifyReceipt</code> json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"receipt"</span>: &#123;</span><br><span class="line">        <span class="attr">"receipt_type"</span>: <span class="string">"ProductionSandbox"</span>,</span><br><span class="line">        <span class="attr">"adam_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"app_item_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"bundle_id"</span>: <span class="string">"com.example.app.ios"</span>,</span><br><span class="line">        <span class="attr">"application_version"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"download_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"version_external_identifier"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">        <span class="attr">"receipt_creation_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"request_date"</span>: <span class="string">"2018-11-13 17:10:31 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"request_date_ms"</span>: <span class="string">"1542129031280"</span>,</span><br><span class="line">        <span class="attr">"request_date_pst"</span>: <span class="string">"2018-11-13 09:10:31 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date"</span>: <span class="string">"2013-08-01 07:00:00 Etc/GMT"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date_ms"</span>: <span class="string">"1375340400000"</span>,</span><br><span class="line">        <span class="attr">"original_purchase_date_pst"</span>: <span class="string">"2013-08-01 00:00:00 America/Los_Angeles"</span>,</span><br><span class="line">        <span class="attr">"original_application_version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">        <span class="attr">"in_app"</span>: [&#123;</span><br><span class="line">            <span class="attr">"quantity"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"product_id"</span>: <span class="string">"test2"</span>,</span><br><span class="line">            <span class="attr">"transaction_id"</span>: <span class="string">"1000000472106082"</span>,</span><br><span class="line">            <span class="attr">"original_transaction_id"</span>: <span class="string">"1000000472106082"</span>,</span><br><span class="line">            <span class="attr">"purchase_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">            <span class="attr">"purchase_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">            <span class="attr">"purchase_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date"</span>: <span class="string">"2018-11-13 16:46:31 Etc/GMT"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date_ms"</span>: <span class="string">"1542127591000"</span>,</span><br><span class="line">            <span class="attr">"original_purchase_date_pst"</span>: <span class="string">"2018-11-13 08:46:31 America/Los_Angeles"</span>,</span><br><span class="line">            <span class="attr">"is_trial_period"</span>: <span class="string">"false"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"Sandbox"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Verify your receipt first with the production URL; then verify with the sandbox URL if you receive a 21007 status code. This approach ensures you do not have to switch between URLs while your application is tested, reviewed by App Review, or live in the App Store.</p></blockquote><h2 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h2><p>Let‚Äôs use enum to represent possible states for each resource. Here‚Äôs simple case where we only have 1 non consumable IAP product.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IAPError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> failedToRefreshReceipt</span><br><span class="line">    <span class="keyword">case</span> failedToRequestProduct</span><br><span class="line">    <span class="keyword">case</span> failedToPurchase</span><br><span class="line">    <span class="keyword">case</span> receiptNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IAPResourceState</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> notAsked</span><br><span class="line">    <span class="keyword">case</span> loading</span><br><span class="line">    <span class="keyword">case</span> success(<span class="type">T</span>)</span><br><span class="line">    <span class="keyword">case</span> failure(<span class="type">IAPError</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PricingPlan</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> pro = (<span class="type">Bundle</span>.main.bundleIdentifier ?? <span class="string">""</span>) + <span class="string">".pro"</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> isPro: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> product: <span class="type">IAPResourceState</span>&lt;<span class="type">SKProduct</span>&gt; = .notAsked</span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> purchase: <span class="type">IAPResourceState</span>&lt;<span class="type">SKPayment</span>&gt; = .notAsked</span><br><span class="line">    @<span class="type">Published</span></span><br><span class="line">    <span class="keyword">var</span> receipt: <span class="type">IAPResourceState</span>&lt;<span class="type">InAppReceipt</span>&gt; = .notAsked</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let‚Äôs have a central place for managing all IAP operations, called <code>IAPManager</code>, it can update our <code>ObservableObject</code> <code>PricingPlan</code> hence triggers update to SwiftUI.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> StoreKit</span><br><span class="line"><span class="keyword">import</span> TPInAppReceipt</span><br><span class="line"><span class="keyword">import</span> Version</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IAPManager</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> pricingPlan: <span class="type">PricingPlan</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> paymentQueue: <span class="type">SKPaymentQueue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(pricingPlan: <span class="type">PricingPlan</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.pricingPlan = pricingPlan</span><br><span class="line">        <span class="keyword">self</span>.paymentQueue = <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.paymentQueue.add(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestProducts</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> identifiers = <span class="type">PricingPlan</span>.pro</span><br><span class="line">        <span class="keyword">let</span> request = <span class="type">SKProductsRequest</span>(productIdentifiers: <span class="type">Set</span>(arrayLiteral: identifiers))</span><br><span class="line">        request.delegate = <span class="keyword">self</span></span><br><span class="line">        pricingPlan.product = .loading</span><br><span class="line">        request.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">purchase</span><span class="params">(product: SKProduct)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="type">SKPaymentQueue</span>.canMakePayments() <span class="keyword">else</span> &#123;</span><br><span class="line">            showAlert(text: <span class="string">"You are not allowed to make payment. Please check device settings."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pricingPlan.purchase = .loading</span><br><span class="line">        <span class="keyword">let</span> payment = <span class="type">SKPayment</span>(product: product)</span><br><span class="line">        paymentQueue.add(payment)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">refreshReceipt</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="type">SKReceiptRefreshRequest</span>()</span><br><span class="line">        request.delegate = <span class="keyword">self</span></span><br><span class="line">        request.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">restorePurchase</span><span class="params">()</span></span> &#123;</span><br><span class="line">        paymentQueue.restoreCompletedTransactions()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Refresh-receipt"><a href="#Refresh-receipt" class="headerlink" title="Refresh receipt"></a>Refresh receipt</h3><p>You can use <code>restoreCompletedTransactions</code> if you simply <code>finishTransaction</code> and grant user pro feature, like in this simple tutorial <a href="https://www.raywenderlich.com/5456-in-app-purchase-tutorial-getting-started">In-App Purchase Tutorial: Getting Started</a>, search for <code>SKPaymentTransactionObserver</code>. <code>restoreCompletedTransactions</code> also updates receipt.</p><p>Otherwise refreshing receipt is a better idea. It serves both case when receipt is not there locally and when you want to restore transactions. With receipt refreshing, no restored transactions are created and <code>SKPaymentTransactionObserver</code> is not called, so we need to check receipt proactively.</p><p>Either <code>restoreCompletedTransactions</code>  or <code>SKReceiptRefreshRequest</code> asks for AppStore credential so you should present a button there and ask user.</p><h3 id="Check-local-receipt"><a href="#Check-local-receipt" class="headerlink" title="Check local receipt"></a>Check local receipt</h3><p>Try to locate local receipt and examine it.</p><ul><li>If it is not there (missing, corrupted), refresh receipt</li><li>If it‚Äôs there, check if it was from a version when the app was still as paid. Notice the difference in meaning of <code>originalAppVersion</code> in macOS and iOS</li><li>If it is not paid, check if this receipt contains In App Purchase information for our product</li></ul><p>In practice, we need to perform some basic checks on receipt, like bundle id, app version, device id. Read <a href="https://www.raywenderlich.com/9257-in-app-purchases-receipt-validation-tutorial">In-App Purchases: Receipt Validation Tutorial</a>, search for <code>Validating the Receipt</code>. <code>TPInAppReceipt</code> also has some handy <code>verify</code> functions</p><p>Besides verifying receipt locally, it is advisable to call <a href="https://developer.apple.com/documentation/appstorereceipts/verifyreceipt">verifyreceipt</a> either on device, or better on serve to let Apple verify receipt and returns you a human readable json for receipt information.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkReceipt</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> receipt = <span class="keyword">try</span> <span class="type">InAppReceipt</span>.localReceipt()</span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.receipt = .success(receipt)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.isPaid(receipt: receipt) &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.isPro = <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> receipt.containsPurchase(ofProductIdentifier: <span class="type">PricingPlan</span>.pro) &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.isPro = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.receipt = .failure(.receiptNotFound)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isPaid</span><span class="params">(receipt: InAppReceipt)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    #<span class="keyword">if</span> os(macOS)</span><br><span class="line">    <span class="comment">// originalAppVersion is CFBundleShortVersionString</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> version = <span class="type">Version</span>(receipt.originalAppVersion) &#123;</span><br><span class="line">        <span class="keyword">return</span> version &lt; versionToIAP</span><br><span class="line">    &#125;</span><br><span class="line">    #<span class="keyword">else</span></span><br><span class="line">    <span class="comment">// originalAppVersion is CFBundleVersion</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> buildNumber = <span class="type">Int</span>(receipt.originalAppVersion) &#123;</span><br><span class="line">        <span class="keyword">return</span> buildNumber &lt; buildNumberToIAP</span><br><span class="line">    &#125;</span><br><span class="line">    #endif</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, observe <code>SKProductsRequestDelegate</code> which also conforms to <code>SKRequestDelegate</code> for both product and receipt refresh request</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">IAPManager</span>: <span class="title">SKProductsRequestDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">productsRequest</span><span class="params">(<span class="number">_</span> request: SKProductsRequest, didReceive response: SKProductsResponse)</span></span> &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> product = response.products.first <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.product = .failure(<span class="type">IAPError</span>.failedToRequestProduct)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.pricingPlan.product = .success(product)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(<span class="number">_</span> request: SKRequest, didFailWithError error: Error)</span></span> &#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">switch</span> request &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKProductsRequest</span>:</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.product = .failure(<span class="type">IAPError</span>.failedToRequestProduct)</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKReceiptRefreshRequest</span>:</span><br><span class="line">                <span class="keyword">self</span>.pricingPlan.receipt = .failure(<span class="type">IAPError</span>.failedToRefreshReceipt)</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestDidFinish</span><span class="params">(<span class="number">_</span> request: SKRequest)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> request &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">SKReceiptRefreshRequest</span>:</span><br><span class="line">            checkReceipt()</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-12-04 06:58:17</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/703&quot;&gt;#703&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-is-receipt&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="iOS" scheme="https://onmyway133.github.io/tags/iOS/"/>
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>How to disable NSTextView in SwiftUI</title>
    <link href="https://onmyway133.github.io/blog/How-to-disable-NSTextView-in-SwiftUI/"/>
    <id>https://onmyway133.github.io/blog/How-to-disable-NSTextView-in-SwiftUI/</id>
    <published>2020-11-27T11:24:13.000Z</published>
    <updated>2020-11-27T11:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/702">#702</a></strong></p><p>The trick is to use an overlay</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MessageTextView</span>(text: $input.message)</span><br><span class="line">    .overlay(obscure)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obscure: <span class="type">AnyView</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> store.pricingPlan.isPro &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">EmptyView</span>().erase()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Color</span>.black.opacity(<span class="number">0.01</span>).erase()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/702&quot;&gt;#702&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The trick is to use an
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://onmyway133.github.io/tags/macOS/"/>
    
      <category term="swiftUI" scheme="https://onmyway133.github.io/tags/swiftUI/"/>
    
  </entry>
  
  <entry>
    <title>How to add under highlight to text in css</title>
    <link href="https://onmyway133.github.io/blog/How-to-add-under-highlight-to-text-in-css/"/>
    <id>https://onmyway133.github.io/blog/How-to-add-under-highlight-to-text-in-css/</id>
    <published>2020-11-20T04:22:58.000Z</published>
    <updated>2020-11-20T04:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/701">#701</a></strong></p><p>Use mark. This does not work for multiline</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;mark css=&#123;css`</span><br><span class="line">        <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">        <span class="selector-tag">line-height</span>: 0<span class="selector-tag">em</span>;</span><br><span class="line">        <span class="selector-tag">padding-bottom</span>: 0<span class="selector-class">.5em</span>;</span><br><span class="line">        `&#125;&gt;&#123;feature.title&#125;</span><br><span class="line">    &lt;/mark&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>Another way is to use background</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(180deg,rgba(255,255,255,0) <span class="number">50%</span>, <span class="number">#FFD0AE</span> <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul><li><a href="https://beatrizcaraballo.com/blog/low-highlight-heading-links-squarespace">https://beatrizcaraballo.com/blog/low-highlight-heading-links-squarespace</a></li><li><a href="https://stackoverflow.com/questions/43683187/how-can-i-create-custom-underline-or-highlight-for-text-in-html-or-css">https://stackoverflow.com/questions/43683187/how-can-i-create-custom-underline-or-highlight-for-text-in-html-or-css</a></li><li><a href="https://medium.com/@codingdudecom/highlight-text-css-97331a5b71b5">https://medium.com/@codingdudecom/highlight-text-css-97331a5b71b5</a></li></ul><p><strong>Updated at</strong> 2020-11-20 05:23:59</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/701&quot;&gt;#701&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use mark. This does not work for
        
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://onmyway133.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>How to use default system fonts in React apps</title>
    <link href="https://onmyway133.github.io/blog/How-to-use-default-system-fonts-in-React-apps/"/>
    <id>https://onmyway133.github.io/blog/How-to-use-default-system-fonts-in-React-apps/</id>
    <published>2020-11-18T05:29:22.000Z</published>
    <updated>2020-11-18T05:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/700">#700</a></strong></p><p>In <code>index.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">'Segoe UI'</span>, <span class="string">'Roboto'</span>, <span class="string">'Oxygen'</span>, <span class="string">'Ubuntu'</span>, <span class="string">'Cantarell'</span>, <span class="string">'Fira Sans'</span>, <span class="string">'Droid Sans'</span>, <span class="string">'Helvetica Neue'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: source-code-pro, Menlo, Monaco, Consolas, <span class="string">'Courier New'</span>, monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-11-18 06:29:29</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/700&quot;&gt;#700&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;index.css&lt;/code&gt;&lt;/p&gt;
&lt;figure
        
      
    
    </summary>
    
    
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to make simple overlay container in React</title>
    <link href="https://onmyway133.github.io/blog/How-to-make-simple-overlay-container-in-React/"/>
    <id>https://onmyway133.github.io/blog/How-to-make-simple-overlay-container-in-React/</id>
    <published>2020-11-18T05:13:03.000Z</published>
    <updated>2020-11-18T05:22:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/699">#699</a></strong></p><p>Use term <code>ZStack</code> like in SwiftUI, we declare container as relative position. For now it uses only 2 items from <code>props.children</code> but can be tweaked to support mutiple</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ZStack&gt;</span><br><span class="line">                &lt;Header /&gt;</span><br><span class="line">                &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">                    <span class="selector-tag">padding-top</span>: 50<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">                `</span>&#125;&gt;</span><br><span class="line">                    &lt;Showcase factory=&#123;factory&#125; /&gt;</span><br><span class="line">                    &lt;Footer /&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>ZStack&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @jsx jsx */</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; css, jsx &#125; <span class="keyword">from</span> <span class="string">'@emotion/core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ZStack</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div css=&#123;css`<span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span></span><br><span class="line"><span class="css">        `</span>&#125;&gt;</span><br><span class="line">            &lt;div &gt;</span><br><span class="line">                &#123;props.children[<span class="number">0</span>]&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div css=&#123;css`</span></span><br><span class="line"><span class="regexp">                position: absolute;</span></span><br><span class="line"><span class="regexp">                top: 0;</span></span><br><span class="line"><span class="regexp">                left: 0;</span></span><br><span class="line"><span class="regexp">                width: 100%;</span></span><br><span class="line"><span class="regexp">            `&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &#123;props.children[1]&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-11-18 06:22:50</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/699&quot;&gt;#699&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use term &lt;code&gt;ZStack&lt;/code&gt; like in
        
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://onmyway133.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://onmyway133.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to search using regular expression in Xcode</title>
    <link href="https://onmyway133.github.io/blog/How-to-search-using-regular-expression-in-Xcode/"/>
    <id>https://onmyway133.github.io/blog/How-to-search-using-regular-expression-in-Xcode/</id>
    <published>2020-11-17T12:05:29.000Z</published>
    <updated>2020-12-11T09:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/698">#698</a></strong></p><p>Xcode has powerful search. We can constrain search to be scoped in workspace, project or some folders. We can also constrain case sensitivity. </p><p>Another cool thing that people tend to overlook is, besides searching based on text, we can search based on references, definitions, call hierarchy, and üéâ regular expressions.</p><img width="1374" alt="Screenshot 2020-12-11 at 11 27 48" src="https://user-images.githubusercontent.com/2284279/101893352-e8b84d80-3ba4-11eb-9a54-8fd46bd970ba.png"><p>Searching for regular expression gives us extra power when it comes to limit our search based on some criteria. For example when we are about to refactor some <code>NSLayoutAnchor</code> code and we want to find all <code>NSLayoutConstraint.</code> calls that stops at  <code>bottomAnchor</code></p><p>Here ‚Äòs how to search <code>NSLayoutConstraint</code> calls that involves <code>bottomAnchor</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(NSLayoutConstraint(.*[\r\n])*).+?(?&#x3D;bottomAnchor)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">    child.leadingAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.leadingAnchor),</span><br><span class="line">    child.trailingAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.trailingAnchor),</span><br><span class="line">    child.topAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.topAnchor),</span><br><span class="line">    child.bottomAnchor.constraint(equalTo: parent.safeAreaLayoutGuide.bottomAnchor)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>Another tip when searching for regular expression is that we can use <a href="https://regex101.com/">https://regex101.com/</a> to validate and fine tune our regex. Below are breakdowns of our regex. Note how we use <code>/.+?(?=abc)/</code> to define ‚Äúsearch until‚Äù</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;</span><br><span class="line">(NSLayoutConstraint(.*[\r\n])*).+?(?&#x3D;bottomAnchor)</span><br><span class="line">&#x2F;</span><br><span class="line">gm</span><br><span class="line">1st Capturing Group (NSLayoutConstraint(.*[\r\n])*)</span><br><span class="line">NSLayoutConstraint matches the characters NSLayoutConstraint literally (case sensitive)</span><br><span class="line">2nd Capturing Group (.*[\r\n])*</span><br><span class="line">* Quantifier ‚Äî Matches between zero and unlimited times, as many times as possible, giving back as needed (greedy)</span><br><span class="line">A repeated capturing group will only capture the last iteration. Put a capturing group around the repeated group to capture all iterations or use a non-capturing group instead if you&#39;re not interested in the data</span><br><span class="line">.* matches any character (except for line terminators)</span><br><span class="line">* Quantifier ‚Äî Matches between zero and unlimited times, as many times as possible, giving back as needed (greedy)</span><br><span class="line">Match a single character present in the list below [\r\n]</span><br><span class="line">\r matches a carriage return (ASCII 13)</span><br><span class="line">\n matches a line-feed (newline) character (ASCII 10)</span><br><span class="line">.+? matches any character (except for line terminators)</span><br><span class="line">+? Quantifier ‚Äî Matches between one and unlimited times, as few times as possible, expanding as needed (lazy)</span><br><span class="line">Positive Lookahead (?&#x3D;bottomAnchor)</span><br><span class="line">Assert that the Regex below matches</span><br><span class="line">bottomAnchor matches the characters bottomAnchor literally (case sensitive)</span><br><span class="line">Global pattern flags</span><br><span class="line">g modifier: global. All matches (don&#39;t return after first match)</span><br><span class="line">m modifier: multi line. Causes ^ and $ to match the begin&#x2F;end of each line (not only begin&#x2F;end of string)</span><br></pre></td></tr></table></figure><p><strong>Updated at</strong> 2020-12-11 10:35:14</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/698&quot;&gt;#698&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Xcode has powerful search. We can
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
      <category term="xcode" scheme="https://onmyway133.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>How to write to temporary file in Swift</title>
    <link href="https://onmyway133.github.io/blog/How-to-write-to-temporary-file-in-Swift/"/>
    <id>https://onmyway133.github.io/blog/How-to-write-to-temporary-file-in-Swift/</id>
    <published>2020-11-15T05:23:39.000Z</published>
    <updated>2020-11-15T05:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Issue <a href="https://github.com/onmyway133/blog/issues/697">#697</a></strong></p><p>Use <code>temporaryDirectory</code> from <code>FileManager</code> and <code>String.write</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeTempFile</span><span class="params">(books: [Book])</span></span> -&gt; <span class="type">URL</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">FileManager</span>.<span class="keyword">default</span>.temporaryDirectory</span><br><span class="line">        .appendingPathComponent(<span class="type">UUID</span>().uuidString)</span><br><span class="line">        .appendingPathExtension(<span class="string">"txt"</span>)</span><br><span class="line">    <span class="keyword">let</span> string = books</span><br><span class="line">        .<span class="built_in">map</span>(&#123;</span><br><span class="line">            <span class="string">"book '\($0.url.path)'"</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .joined(separator: <span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">try</span>? string.write(to: url, atomically: <span class="literal">true</span>, encoding: .utf8)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;Issue &lt;a href=&quot;https://github.com/onmyway133/blog/issues/697&quot;&gt;#697&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;temporaryDirectory&lt;/code&gt; from
        
      
    
    </summary>
    
    
    
      <category term="swift" scheme="https://onmyway133.github.io/tags/swift/"/>
    
  </entry>
  
</feed>
